var __xr_tmp = [
"<span class=\"comment\"> *   queue.status and the wake_up_process, then the woken up</span>", 
"<span class=\"comment\"> *   process could return from semtimedop and die by calling</span>", 
"<span class=\"comment\"> *   sys_exit before wake_up_process is called. Then wake_up_process</span>", 
"<span class=\"comment\"> *   will oops, because the task structure is already invalid.</span>", 
"<span class=\"comment\"> *   (yes, this happened on s390 with sysv msg).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IN_WAKEUP\">IN_WAKEUP</a><span class=\"ts\"/>1", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * newary - Create a new semaphore set</span>", 
"<span class=\"comment\"> * @ns: namespace</span>", 
"<span class=\"comment\"> * @params: ptr to the structure that contains key, semflg and nsems</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with sem_ids.rw_mutex held (as a writer)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#newary\">newary</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>, struct <a class=\"id\" href=\"#ipc_params\">ipc_params</a> *<a class=\"id\" href=\"#params\">params</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_t\">key_t</a> <a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#params\">params</a>-><a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nsems\">nsems</a> = <a class=\"id\" href=\"#params\">params</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#nsems\">nsems</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#semflg\">semflg</a> = <a class=\"id\" href=\"#params\">params</a>-><a class=\"id\" href=\"#flg\">flg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nsems\">nsems</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#used_sems\">used_sems</a> + <a class=\"id\" href=\"#nsems\">nsems</a> &gt; <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#sc_semmns\">sc_semmns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof (*<a class=\"id\" href=\"#sma\">sma</a>) + <a class=\"id\" href=\"#nsems\">nsems</a> * sizeof (struct <a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a> = <a class=\"id\" href=\"#ipc_rcu_alloc\">ipc_rcu_alloc</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sma\">sma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a> (<a class=\"id\" href=\"#sma\">sma</a>, 0, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#mode\">mode</a> = (<a class=\"id\" href=\"#semflg\">semflg</a> &amp; <a class=\"id\" href=\"#S_IRWXUGO\">S_IRWXUGO</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#security_sem_alloc\">security_sem_alloc</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc_rcu_putref\">ipc_rcu_putref</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#ipc_addid\">ipc_addid</a>(&amp;<a class=\"id\" href=\"#sem_ids\">sem_ids</a>(<a class=\"id\" href=\"#ns\">ns</a>), &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>, <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#sc_semmni\">sc_semmni</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_sem_free\">security_sem_free</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc_rcu_putref\">ipc_rcu_putref</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#used_sems\">used_sems</a> += <a class=\"id\" href=\"#nsems\">nsems</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_base\">sem_base</a> = (struct <a class=\"id\" href=\"#sem\">sem</a> *) &amp;<a class=\"id\" href=\"#sma\">sma</a>[1];", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nsems\">nsems</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_base\">sem_base</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sem_pending\">sem_pending</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#complex_count\">complex_count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_pending\">sem_pending</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#list_id\">list_id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_nsems\">sem_nsems</a> = <a class=\"id\" href=\"#nsems\">nsems</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_ctime\">sem_ctime</a> = <a class=\"id\" href=\"#get_seconds\">get_seconds</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#id\">id</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called with sem_ids.rw_mutex and ipcp locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sem_security\">sem_security</a>(struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a>, int <a class=\"id\" href=\"#semflg\">semflg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>, struct <a class=\"id\" href=\"#sem_array\">sem_array</a>, <a class=\"id\" href=\"#sem_perm\">sem_perm</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#security_sem_associate\">security_sem_associate</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#semflg\">semflg</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called with sem_ids.rw_mutex and ipcp locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sem_more_checks\">sem_more_checks</a>(struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_params\">ipc_params</a> *<a class=\"id\" href=\"#params\">params</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>, struct <a class=\"id\" href=\"#sem_array\">sem_array</a>, <a class=\"id\" href=\"#sem_perm\">sem_perm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#params\">params</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#nsems\">nsems</a> &gt; <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_nsems\">sem_nsems</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#semget\">semget</a>, <a class=\"id\" href=\"#key_t\">key_t</a>, <a class=\"id\" href=\"#key\">key</a>, int, <a class=\"id\" href=\"#nsems\">nsems</a>, int, <a class=\"id\" href=\"#semflg\">semflg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_ops\">ipc_ops</a> <a class=\"id\" href=\"#sem_ops\">sem_ops</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_params\">ipc_params</a> <a class=\"id\" href=\"#sem_params\">sem_params</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#ipc_ns\">ipc_ns</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nsems\">nsems</a> &lt; 0 || <a class=\"id\" href=\"#nsems\">nsems</a> &gt; <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#sc_semmsl\">sc_semmsl</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_ops\">sem_ops</a>.<a class=\"id\" href=\"#getnew\">getnew</a> = <a class=\"id\" href=\"#newary\">newary</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_ops\">sem_ops</a>.<a class=\"id\" href=\"#associate\">associate</a> = <a class=\"id\" href=\"#sem_security\">sem_security</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_ops\">sem_ops</a>.<a class=\"id\" href=\"#more_checks\">more_checks</a> = <a class=\"id\" href=\"#sem_more_checks\">sem_more_checks</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_params\">sem_params</a>.<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_params\">sem_params</a>.<a class=\"id\" href=\"#flg\">flg</a> = <a class=\"id\" href=\"#semflg\">semflg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_params\">sem_params</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#nsems\">nsems</a> = <a class=\"id\" href=\"#nsems\">nsems</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ipcget\">ipcget</a>(<a class=\"id\" href=\"#ns\">ns</a>, &amp;<a class=\"id\" href=\"#sem_ids\">sem_ids</a>(<a class=\"id\" href=\"#ns\">ns</a>), &amp;<a class=\"id\" href=\"#sem_ops\">sem_ops</a>, &amp;<a class=\"id\" href=\"#sem_params\">sem_params</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Determine whether a sequence of semaphore operations would succeed</span>", 
"<span class=\"comment\"> * all at once. Return 0 if yes, 1 if need to sleep, else return error code.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#try_atomic_semop\">try_atomic_semop</a> (struct <a class=\"id\" href=\"#sem_array\">sem_array</a> * <a class=\"id\" href=\"#sma\">sma</a>, struct <a class=\"id\" href=\"#sembuf\">sembuf</a> * <a class=\"id\" href=\"#sops\">sops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#nsops\">nsops</a>, struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a> *<a class=\"id\" href=\"#un\">un</a>, int <a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#sem_op\">sem_op</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sembuf\">sembuf</a> *<a class=\"id\" href=\"#sop\">sop</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem\">sem</a> * <a class=\"id\" href=\"#curr\">curr</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#sop\">sop</a> = <a class=\"id\" href=\"#sops\">sops</a>; <a class=\"id\" href=\"#sop\">sop</a> &lt; <a class=\"id\" href=\"#sops\">sops</a> + <a class=\"id\" href=\"#nsops\">nsops</a>; <a class=\"id\" href=\"#sop\">sop</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_base\">sem_base</a> + <a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#sem_num\">sem_num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sem_op\">sem_op</a> = <a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#sem_op\">sem_op</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#semval\">semval</a>;", 
"  ", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sem_op\">sem_op</a> && <a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#would_block\">would_block</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += <a class=\"id\" href=\"#sem_op\">sem_op</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#would_block\">would_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> &gt; <a class=\"id\" href=\"#SEMVMX\">SEMVMX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_of_range\">out_of_range</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#sem_flg\">sem_flg</a> &amp; <a class=\"id\" href=\"#SEM_UNDO\">SEM_UNDO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#undo\">undo</a> = <a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#semadj\">semadj</a>[<a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#sem_num\">sem_num</a>] - <a class=\"id\" href=\"#sem_op\">sem_op</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> <span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>Exceeding the undo range is an error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#undo\">undo</a> &lt; (-<a class=\"id\" href=\"#SEMAEM\">SEMAEM</a> - 1) || <a class=\"id\" href=\"#undo\">undo</a> &gt; <a class=\"id\" href=\"#SEMAEM\">SEMAEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_of_range\">out_of_range</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#semval\">semval</a> = <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sop\">sop</a>--;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#sop\">sop</a> >= <a class=\"id\" href=\"#sops\">sops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_base\">sem_base</a>[<a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#sem_num\">sem_num</a>].<a class=\"id\" href=\"#sempid\">sempid</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#sem_flg\">sem_flg</a> &amp; <a class=\"id\" href=\"#SEM_UNDO\">SEM_UNDO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#semadj\">semadj</a>[<a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#sem_num\">sem_num</a>] -= <a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#sem_op\">sem_op</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sop\">sop</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_of_range\">out_of_range</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#undo\">undo</a>;", 
"", 
"<a class=\"id\" href=\"#would_block\">would_block</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#sem_flg\">sem_flg</a> &amp; <a class=\"id\" href=\"#IPC_NOWAIT\">IPC_NOWAIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 1;", 
"", 
"<a class=\"id\" href=\"#undo\">undo</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sop\">sop</a>--;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#sop\">sop</a> >= <a class=\"id\" href=\"#sops\">sops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_base\">sem_base</a>[<a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#sem_num\">sem_num</a>].<a class=\"id\" href=\"#semval\">semval</a> -= <a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#sem_op\">sem_op</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sop\">sop</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/** wake_up_sem_queue_prepare(q, error): Prepare wake-up</span>", 
"<span class=\"comment\"> * @q: queue entry that must be signaled</span>", 
"<span class=\"comment\"> * @error: Error value for the signal</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Prepare the wake-up of the queue entry q.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#wake_up_sem_queue_prepare\">wake_up_sem_queue_prepare</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pt\">pt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_queue\">sem_queue</a> *<a class=\"id\" href=\"#q\">q</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#pt\">pt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Hold preempt off so that we don't get preempted and have the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * wakee busy-wait until we're scheduled back on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#IN_WAKEUP\">IN_WAKEUP</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#simple_list\">simple_list</a>, <a class=\"id\" href=\"#pt\">pt</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wake_up_sem_queue_do(pt) - do the actual wake-up</span>", 
"<span class=\"comment\"> * @pt: list of tasks to be woken up</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Do the actual wake-up.</span>", 
"<span class=\"comment\"> * The function is called without any locks held, thus the semaphore array</span>", 
"<span class=\"comment\"> * could be destroyed already and the tasks can disappear as soon as the</span>", 
"<span class=\"comment\"> * status is set to the actual return code.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#wake_up_sem_queue_do\">wake_up_sem_queue_do</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pt\">pt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_queue\">sem_queue</a> *<a class=\"id\" href=\"#q\">q</a>, *<a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#did_something\">did_something</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#did_something\">did_something</a> = !<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#pt\">pt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#pt\">pt</a>, <a class=\"id\" href=\"#simple_list\">simple_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#sleeper\">sleeper</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* q can disappear immediately after writing q-&gt;status. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#did_something\">did_something</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#unlink_queue\">unlink_queue</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>, struct <a class=\"id\" href=\"#sem_queue\">sem_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nsops\">nsops</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#simple_list\">simple_list</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#complex_count\">complex_count</a>--;", 
"}", 
"", 
"<span class=\"comment\">/** check_restart(sma, q)</span>", 
"<span class=\"comment\"> * @sma: semaphore array</span>", 
"<span class=\"comment\"> * @q: the operation that just completed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * update_queue is O(N^2) when it restarts scanning the whole queue of</span>", 
"<span class=\"comment\"> * waiting operations. Therefore this function checks if the restart is</span>", 
"<span class=\"comment\"> * really necessary. It is called after a previously waiting operation</span>", 
"<span class=\"comment\"> * was completed.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#check_restart\">check_restart</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>, struct <a class=\"id\" href=\"#sem_queue\">sem_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem\">sem</a> *<a class=\"id\" href=\"#curr\">curr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_queue\">sem_queue</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if the operation didn't modify the array, then no restart */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#alter\">alter</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* pending complex operations are too difficult to analyse */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#complex_count\">complex_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we were a sleeping complex operation. Too difficult */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nsops\">nsops</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_base\">sem_base</a> + <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#sops\">sops</a>[0].<a class=\"id\" href=\"#sem_num\">sem_num</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No-one waits on this queue */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#sem_pending\">sem_pending</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the new semaphore value */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#semval\">semval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* It is impossible that someone waits for the new value:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * - q is a previously sleeping simple operation that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *   altered the array. It must be a decrement, because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *   simple increments never sleep.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * - The value is not 0, thus wait-for-zero won't proceed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * - If there are older (higher priority) decrements</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *   in the queue, then they have observed the original</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *   semval value and couldn't proceed. The operation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *   decremented to value - thus they won't proceed either.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#sops\">sops</a>[0].<a class=\"id\" href=\"#sem_op\">sem_op</a> >= 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * semval is 0. Check if there are wait-for-zero semops.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * They must be the first entries in the per-semaphore simple queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#sem_pending\">sem_pending</a>, struct <a class=\"id\" href=\"#sem_queue\">sem_queue</a>, <a class=\"id\" href=\"#simple_list\">simple_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nsops\">nsops</a> != 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#sops\">sops</a>[0].<a class=\"id\" href=\"#sem_num\">sem_num</a> != <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#sops\">sops</a>[0].<a class=\"id\" href=\"#sem_num\">sem_num</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Yes, there is a wait-for-zero semop. Restart */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#sops\">sops</a>[0].<a class=\"id\" href=\"#sem_op\">sem_op</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Again - no-one is waiting for the new value. */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * update_queue(sma, semnum): Look for tasks that can be completed.</span>", 
"<span class=\"comment\"> * @sma: semaphore array.</span>", 
"<span class=\"comment\"> * @semnum: semaphore that was modified.</span>", 
"<span class=\"comment\"> * @pt: list head for the tasks that must be woken up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * update_queue must be called after a semaphore in a semaphore array</span>", 
"<span class=\"comment\"> * was modified. If multiple semaphore were modified, then @semnum</span>", 
"<span class=\"comment\"> * must be set to -1.</span>", 
"<span class=\"comment\"> * The tasks that must be woken up are added to @pt. The return code</span>", 
"<span class=\"comment\"> * is stored in q-&gt;pid.</span>", 
"<span class=\"comment\"> * The function return 1 if at least one semop was completed successfully.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#update_queue\">update_queue</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>, int <a class=\"id\" href=\"#semnum\">semnum</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pt\">pt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_queue\">sem_queue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#walk\">walk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pending_list\">pending_list</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#semop_completed\">semop_completed</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if there are complex operations around, then knowing the semaphore</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that was modified doesn't help us. Assume that multiple semaphores</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * were modified.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#complex_count\">complex_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#semnum\">semnum</a> = -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#semnum\">semnum</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pending_list\">pending_list</a> = &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_pending\">sem_pending</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#sem_queue\">sem_queue</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pending_list\">pending_list</a> = &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_base\">sem_base</a>[<a class=\"id\" href=\"#semnum\">semnum</a>].<a class=\"id\" href=\"#sem_pending\">sem_pending</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#sem_queue\">sem_queue</a>, <a class=\"id\" href=\"#simple_list\">simple_list</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#walk\">walk</a> = <a class=\"id\" href=\"#pending_list\">pending_list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#walk\">walk</a> != <a class=\"id\" href=\"#pending_list\">pending_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#restart\">restart</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = (struct <a class=\"id\" href=\"#sem_queue\">sem_queue</a> *)((char *)<a class=\"id\" href=\"#walk\">walk</a> - <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#walk\">walk</a> = <a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we are scanning the single sop, per-semaphore list of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * one semaphore and that semaphore is 0, then it is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * necessary to scan the \"alter\" entries: simple increments</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that affect only one entry succeed immediately and cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be in the  per semaphore pending queue, and decrements</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cannot be successful if the value is already 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#semnum\">semnum</a> != -1 && <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_base\">sem_base</a>[<a class=\"id\" href=\"#semnum\">semnum</a>].<a class=\"id\" href=\"#semval\">semval</a> == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#alter\">alter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#try_atomic_semop\">try_atomic_semop</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#sops\">sops</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nsops\">nsops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#undo\">undo</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pid\">pid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Does q-&gt;sleeper still need to sleep? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlink_queue\">unlink_queue</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart\">restart</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#semop_completed\">semop_completed</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restart\">restart</a> = <a class=\"id\" href=\"#check_restart\">check_restart</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_sem_queue_prepare\">wake_up_sem_queue_prepare</a>(<a class=\"id\" href=\"#pt\">pt</a>, <a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#restart\">restart</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#semop_completed\">semop_completed</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * do_smart_update(sma, sops, nsops, otime, pt) - optimized update_queue</span>", 
"<span class=\"comment\"> * @sma: semaphore array</span>", 
"<span class=\"comment\"> * @sops: operations that were performed</span>", 
"<span class=\"comment\"> * @nsops: number of operations</span>", 
"<span class=\"comment\"> * @otime: force setting otime</span>", 
"<span class=\"comment\"> * @pt: list head of the tasks that must be woken up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * do_smart_update() does the required called to update_queue, based on the</span>", 
"<span class=\"comment\"> * actual changes that were performed on the semaphore array.</span>", 
"<span class=\"comment\"> * Note that the function does not do the actual wake-up: the caller is</span>", 
"<span class=\"comment\"> * responsible for calling wake_up_sem_queue_do(@pt).</span>", 
"<span class=\"comment\"> * It is safe to perform this call after dropping all locks.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#do_smart_update\">do_smart_update</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>, struct <a class=\"id\" href=\"#sembuf\">sembuf</a> *<a class=\"id\" href=\"#sops\">sops</a>, int <a class=\"id\" href=\"#nsops\">nsops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#otime\">otime</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pt\">pt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#complex_count\">complex_count</a> || <a class=\"id\" href=\"#sops\">sops</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#update_queue\">update_queue</a>(<a class=\"id\" href=\"#sma\">sma</a>, -1, <a class=\"id\" href=\"#pt\">pt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#otime\">otime</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nsops\">nsops</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sops\">sops</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sem_op\">sem_op</a> &gt; 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#sops\">sops</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sem_op\">sem_op</a> &lt; 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_base\">sem_base</a>[<a class=\"id\" href=\"#sops\">sops</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sem_num\">sem_num</a>].<a class=\"id\" href=\"#semval\">semval</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#update_queue\">update_queue</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#sops\">sops</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sem_num\">sem_num</a>, <a class=\"id\" href=\"#pt\">pt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#otime\">otime</a> = 1;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#otime\">otime</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_otime\">sem_otime</a> = <a class=\"id\" href=\"#get_seconds\">get_seconds</a>();", 
"}", 
"", 
"", 
"<span class=\"comment\">/* The following counts are associated to each semaphore:</span>", 
"<span class=\"comment\"> *   semncnt        number of tasks waiting on semval being nonzero</span>", 
"<span class=\"comment\"> *   semzcnt        number of tasks waiting on semval being zero</span>", 
"<span class=\"comment\"> * This model assumes that a task waits on exactly one semaphore.</span>", 
"<span class=\"comment\"> * Since semaphore operations are to be performed atomically, tasks actually</span>", 
"<span class=\"comment\"> * wait on a whole sequence of semaphores simultaneously.</span>", 
"<span class=\"comment\"> * The counts we return here are a rough approximation, but still</span>", 
"<span class=\"comment\"> * warrant that semncnt+semzcnt&gt;0 if the task is on the pending queue.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#count_semncnt\">count_semncnt</a> (struct <a class=\"id\" href=\"#sem_array\">sem_array</a> * <a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#ushort\">ushort</a> <a class=\"id\" href=\"#semnum\">semnum</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#semncnt\">semncnt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_queue\">sem_queue</a> * <a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#semncnt\">semncnt</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_pending\">sem_pending</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sembuf\">sembuf</a> * <a class=\"id\" href=\"#sops\">sops</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#sops\">sops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nsops\">nsops</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nsops\">nsops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nsops\">nsops</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sops\">sops</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sem_num\">sem_num</a> == <a class=\"id\" href=\"#semnum\">semnum</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    && (<a class=\"id\" href=\"#sops\">sops</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sem_op\">sem_op</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    && !(<a class=\"id\" href=\"#sops\">sops</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sem_flg\">sem_flg</a> &amp; <a class=\"id\" href=\"#IPC_NOWAIT\">IPC_NOWAIT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#semncnt\">semncnt</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#semncnt\">semncnt</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#count_semzcnt\">count_semzcnt</a> (struct <a class=\"id\" href=\"#sem_array\">sem_array</a> * <a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#ushort\">ushort</a> <a class=\"id\" href=\"#semnum\">semnum</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#semzcnt\">semzcnt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_queue\">sem_queue</a> * <a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#semzcnt\">semzcnt</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_pending\">sem_pending</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sembuf\">sembuf</a> * <a class=\"id\" href=\"#sops\">sops</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#sops\">sops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nsops\">nsops</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nsops\">nsops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nsops\">nsops</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sops\">sops</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sem_num\">sem_num</a> == <a class=\"id\" href=\"#semnum\">semnum</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    && (<a class=\"id\" href=\"#sops\">sops</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sem_op\">sem_op</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    && !(<a class=\"id\" href=\"#sops\">sops</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sem_flg\">sem_flg</a> &amp; <a class=\"id\" href=\"#IPC_NOWAIT\">IPC_NOWAIT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#semzcnt\">semzcnt</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#semzcnt\">semzcnt</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_un\">free_un</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a> *<a class=\"id\" href=\"#un\">un</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#un\">un</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Free a semaphore set. freeary() is called with sem_ids.rw_mutex locked</span>", 
"<span class=\"comment\"> * as a writer and the spinlock for this semaphore set hold. sem_ids.rw_mutex</span>", 
"<span class=\"comment\"> * remains locked on exit.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#freeary\">freeary</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>, struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_undo\">sem_undo</a> *<a class=\"id\" href=\"#un\">un</a>, *<a class=\"id\" href=\"#tu\">tu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_queue\">sem_queue</a> *<a class=\"id\" href=\"#q\">q</a>, *<a class=\"id\" href=\"#tq\">tq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ipcp\">ipcp</a>, struct <a class=\"id\" href=\"#sem_array\">sem_array</a>, <a class=\"id\" href=\"#sem_perm\">sem_perm</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tasks\">tasks</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Free the existing undo structures for this semaphore set.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#un\">un</a>, <a class=\"id\" href=\"#tu\">tu</a>, &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#list_id\">list_id</a>, <a class=\"id\" href=\"#list_id\">list_id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#list_id\">list_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#semid\">semid</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#list_proc\">list_proc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#ulp\">ulp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#un\">un</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#free_un\">free_un</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wake up all pending processes and let them fail with EIDRM. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#tq\">tq</a>, &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_pending\">sem_pending</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlink_queue\">unlink_queue</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_sem_queue_prepare\">wake_up_sem_queue_prepare</a>(&amp;<a class=\"id\" href=\"#tasks\">tasks</a>, <a class=\"id\" href=\"#q\">q</a>, -<a class=\"id\" href=\"#EIDRM\">EIDRM</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove the semaphore set from the IDR */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_rmid\">sem_rmid</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_sem_queue_do\">wake_up_sem_queue_do</a>(&amp;<a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#used_sems\">used_sems</a> -= <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_nsems\">sem_nsems</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_sem_free\">security_sem_free</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc_rcu_putref\">ipc_rcu_putref</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#copy_semid_to_user\">copy_semid_to_user</a>(void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, struct <a class=\"id\" href=\"#semid64_ds\">semid64_ds</a> *<a class=\"id\" href=\"#in\">in</a>, int <a class=\"id\" href=\"#version\">version</a>)", 
"{", 
"<span class=\"ts\"/>switch(<a class=\"id\" href=\"#version\">version</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_64\">IPC_64</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#in\">in</a>, sizeof(*<a class=\"id\" href=\"#in\">in</a>));", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_OLD\">IPC_OLD</a>:", 
"<span class=\"ts\"/>    {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#semid_ds\">semid_ds</a> <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#out\">out</a>, 0, sizeof(<a class=\"id\" href=\"#out\">out</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc64_perm_to_ipc_perm\">ipc64_perm_to_ipc_perm</a>(&amp;<a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>, &amp;<a class=\"id\" href=\"#out\">out</a>.<a class=\"id\" href=\"#sem_perm\">sem_perm</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>.<a class=\"id\" href=\"#sem_otime\">sem_otime</a><span class=\"ts\"/>= <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#sem_otime\">sem_otime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>.<a class=\"id\" href=\"#sem_ctime\">sem_ctime</a><span class=\"ts\"/>= <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#sem_ctime\">sem_ctime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>.<a class=\"id\" href=\"#sem_nsems\">sem_nsems</a><span class=\"ts\"/>= <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#sem_nsems\">sem_nsems</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, &amp;<a class=\"id\" href=\"#out\">out</a>, sizeof(<a class=\"id\" href=\"#out\">out</a>));", 
"<span class=\"ts\"/>    }", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#semctl_nolock\">semctl_nolock</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>, int <a class=\"id\" href=\"#semid\">semid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#cmd\">cmd</a>, int <a class=\"id\" href=\"#version\">version</a>, union <a class=\"id\" href=\"#semun\">semun</a> <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>;", 
"", 
"<span class=\"ts\"/>switch(<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_INFO\">IPC_INFO</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SEM_INFO\">SEM_INFO</a>:", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#seminfo\">seminfo</a> <a class=\"id\" href=\"#seminfo\">seminfo</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#max_id\">max_id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_sem_semctl\">security_sem_semctl</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#seminfo\">seminfo</a>,0,sizeof(<a class=\"id\" href=\"#seminfo\">seminfo</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seminfo\">seminfo</a>.<a class=\"id\" href=\"#semmni\">semmni</a> = <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#sc_semmni\">sc_semmni</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seminfo\">seminfo</a>.<a class=\"id\" href=\"#semmns\">semmns</a> = <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#sc_semmns\">sc_semmns</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seminfo\">seminfo</a>.<a class=\"id\" href=\"#semmsl\">semmsl</a> = <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#sc_semmsl\">sc_semmsl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seminfo\">seminfo</a>.<a class=\"id\" href=\"#semopm\">semopm</a> = <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#sc_semopm\">sc_semopm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seminfo\">seminfo</a>.<a class=\"id\" href=\"#semvmx\">semvmx</a> = <a class=\"id\" href=\"#SEMVMX\">SEMVMX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seminfo\">seminfo</a>.<a class=\"id\" href=\"#semmnu\">semmnu</a> = <a class=\"id\" href=\"#SEMMNU\">SEMMNU</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seminfo\">seminfo</a>.<a class=\"id\" href=\"#semmap\">semmap</a> = <a class=\"id\" href=\"#SEMMAP\">SEMMAP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seminfo\">seminfo</a>.<a class=\"id\" href=\"#semume\">semume</a> = <a class=\"id\" href=\"#SEMUME\">SEMUME</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#sem_ids\">sem_ids</a>(<a class=\"id\" href=\"#ns\">ns</a>).<a class=\"id\" href=\"#rw_mutex\">rw_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#SEM_INFO\">SEM_INFO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seminfo\">seminfo</a>.<a class=\"id\" href=\"#semusz\">semusz</a> = <a class=\"id\" href=\"#sem_ids\">sem_ids</a>(<a class=\"id\" href=\"#ns\">ns</a>).<a class=\"id\" href=\"#in_use\">in_use</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seminfo\">seminfo</a>.<a class=\"id\" href=\"#semaem\">semaem</a> = <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#used_sems\">used_sems</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seminfo\">seminfo</a>.<a class=\"id\" href=\"#semusz\">semusz</a> = <a class=\"id\" href=\"#SEMUSZ\">SEMUSZ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seminfo\">seminfo</a>.<a class=\"id\" href=\"#semaem\">semaem</a> = <a class=\"id\" href=\"#SEMAEM\">SEMAEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_id\">max_id</a> = <a class=\"id\" href=\"#ipc_get_maxid\">ipc_get_maxid</a>(&amp;<a class=\"id\" href=\"#sem_ids\">sem_ids</a>(<a class=\"id\" href=\"#ns\">ns</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#sem_ids\">sem_ids</a>(<a class=\"id\" href=\"#ns\">ns</a>).<a class=\"id\" href=\"#rw_mutex\">rw_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a> (<a class=\"id\" href=\"#arg\">arg</a>.<a class=\"id\" href=\"#__buf\">__buf</a>, &amp;<a class=\"id\" href=\"#seminfo\">seminfo</a>, sizeof(struct <a class=\"id\" href=\"#seminfo\">seminfo</a>))) ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#max_id\">max_id</a> &lt; 0) ? 0: <a class=\"id\" href=\"#max_id\">max_id</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_STAT\">IPC_STAT</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SEM_STAT\">SEM_STAT</a>:", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#semid64_ds\">semid64_ds</a> <a class=\"id\" href=\"#tbuf\">tbuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#SEM_STAT\">SEM_STAT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a> = <a class=\"id\" href=\"#sem_lock\">sem_lock</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#semid\">semid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#sma\">sma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sma\">sma</a> = <a class=\"id\" href=\"#sem_lock_check\">sem_lock_check</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#semid\">semid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#sma\">sma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ipcperms\">ipcperms</a> (&amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
];
xr_frag_insert('l/86/1e6c0d710d3c7501af83cb66918d1890dbf186.xr', __xr_tmp);
