var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Kernel Probes (KProbes)</span>", 
"<span class=\"comment\"> *  kernel/kprobes.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) IBM Corporation, 2002, 2004</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 2002-Oct<span class=\"ts\"/>Created by Vamsi Krishna S &lt;vamsi_krishna@in.ibm.com&gt; Kernel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Probes initial implementation (includes suggestions from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Rusty Russell).</span>", 
"<span class=\"comment\"> * 2004-Aug<span class=\"ts\"/>Updated by Prasanna S Panchamukhi &lt;prasanna@in.ibm.com&gt; with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>hlists and exceptions notifier as suggested by Andi Kleen.</span>", 
"<span class=\"comment\"> * 2004-July<span class=\"ts\"/>Suparna Bhattacharya &lt;suparna@in.ibm.com&gt; added jumper probes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>interface to access function arguments.</span>", 
"<span class=\"comment\"> * 2004-Sep<span class=\"ts\"/>Prasanna S Panchamukhi &lt;prasanna@in.ibm.com&gt; Changed Kprobes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>exceptions notifier to be first on the priority list.</span>", 
"<span class=\"comment\"> * 2005-May<span class=\"ts\"/>Hien Nguyen &lt;hien@us.ibm.com&gt;, Jim Keniston</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>&lt;jkenisto@us.ibm.com&gt; and Prasanna S Panchamukhi</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>&lt;prasanna@in.ibm.com&gt; added function-return probes.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kprobes\">kprobes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#moduleloader\">moduleloader</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#freezer\">freezer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdebug\">kdebug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memory\">memory</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>-<a class=\"id\" href=\"#generic\">generic</a>/<a class=\"id\" href=\"#sections\">sections</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KPROBE_HASH_BITS\">KPROBE_HASH_BITS</a> 6", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KPROBE_TABLE_SIZE\">KPROBE_TABLE_SIZE</a> (1 << <a class=\"id\" href=\"#KPROBE_HASH_BITS\">KPROBE_HASH_BITS</a>)", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some oddball architectures like 64bit powerpc have function descriptors</span>", 
"<span class=\"comment\"> * so this must be overridable.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#kprobe_lookup_name\">kprobe_lookup_name</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kprobe_lookup_name\">kprobe_lookup_name</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#addr\">addr</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = ((<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *)(<a class=\"id\" href=\"#kallsyms_lookup_name\">kallsyms_lookup_name</a>(<a class=\"id\" href=\"#name\">name</a>)))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#kprobes_initialized\">kprobes_initialized</a>;", 
"static struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> <a class=\"id\" href=\"#kprobe_table\">kprobe_table</a>[<a class=\"id\" href=\"#KPROBE_TABLE_SIZE\">KPROBE_TABLE_SIZE</a>];", 
"static struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> <a class=\"id\" href=\"#kretprobe_inst_table\">kretprobe_inst_table</a>[<a class=\"id\" href=\"#KPROBE_TABLE_SIZE\">KPROBE_TABLE_SIZE</a>];", 
"", 
"<span class=\"comment\">/* NOTE: change this value only with kprobe_mutex held */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#kprobes_all_disarmed\">kprobes_all_disarmed</a>;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);<span class=\"ts\"/><span class=\"comment\">/* Protects kprobe_table */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *, <a class=\"id\" href=\"#kprobe_instance\">kprobe_instance</a>) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"static struct {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a> <a class=\"id\" href=\"#____cacheline_aligned_in_smp\">____cacheline_aligned_in_smp</a>;", 
"} <a class=\"id\" href=\"#kretprobe_table_locks\">kretprobe_table_locks</a>[<a class=\"id\" href=\"#KPROBE_TABLE_SIZE\">KPROBE_TABLE_SIZE</a>];", 
"", 
"static <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#kretprobe_table_lock_ptr\">kretprobe_table_lock_ptr</a>(unsigned long <a class=\"id\" href=\"#hash\">hash</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;(<a class=\"id\" href=\"#kretprobe_table_locks\">kretprobe_table_locks</a>[<a class=\"id\" href=\"#hash\">hash</a>].<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Normally, functions that we'd want to prohibit kprobes in, are marked</span>", 
"<span class=\"comment\"> * __kprobes. But, there are cases where such functions already belong to</span>", 
"<span class=\"comment\"> * a different section (__sched for preempt_schedule)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For such cases, we now have a blacklist</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#kprobe_blackpoint\">kprobe_blackpoint</a> <a class=\"id\" href=\"#kprobe_blacklist\">kprobe_blacklist</a>[] = {", 
"<span class=\"ts\"/>{\"preempt_schedule\",},", 
"<span class=\"ts\"/>{\"native_get_debugreg\",},", 
"<span class=\"ts\"/>{\"irq_entries_start\",},", 
"<span class=\"ts\"/>{\"common_interrupt\",},", 
"<span class=\"ts\"/>{\"mcount\",},<span class=\"ts\"/><span class=\"comment\">/* mcount can be called from everywhere */</span>", 
"<span class=\"ts\"/>{<a class=\"id\" href=\"#NULL\">NULL</a>}    <span class=\"comment\">/* Terminator */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__ARCH_WANT_KPROBES_INSN_SLOT\">__ARCH_WANT_KPROBES_INSN_SLOT</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kprobe-&gt;ainsn.insn points to the copy of the instruction to be</span>", 
"<span class=\"comment\"> * single-stepped. x86_64, POWER4 and above have no-exec support and</span>", 
"<span class=\"comment\"> * stepping on the instruction on a vmalloced/kmalloced/data page</span>", 
"<span class=\"comment\"> * is a recipe for disaster</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kprobe_insn_page\">kprobe_insn_page</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *<a class=\"id\" href=\"#insns\">insns</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Page of instruction slots */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nused\">nused</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ngarbage\">ngarbage</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#slot_used\">slot_used</a>[];", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KPROBE_INSN_PAGE_SIZE\">KPROBE_INSN_PAGE_SIZE</a>(<a class=\"id\" href=\"#slots\">slots</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#kprobe_insn_page\">kprobe_insn_page</a>, <a class=\"id\" href=\"#slot_used\">slot_used</a>) +<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (sizeof(char) * (<a class=\"id\" href=\"#slots\">slots</a>)))", 
"", 
"struct <a class=\"id\" href=\"#kprobe_insn_cache\">kprobe_insn_cache</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#pages\">pages</a>;<span class=\"ts\"/><span class=\"comment\">/* list of kprobe_insn_page */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#insn_size\">insn_size</a>;<span class=\"ts\"/><span class=\"comment\">/* size of instruction slot */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_garbage\">nr_garbage</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#slots_per_page\">slots_per_page</a>(struct <a class=\"id\" href=\"#kprobe_insn_cache\">kprobe_insn_cache</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>/(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#insn_size\">insn_size</a> * sizeof(<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a>));", 
"}", 
"", 
"enum <a class=\"id\" href=\"#kprobe_slot_state\">kprobe_slot_state</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SLOT_CLEAN\">SLOT_CLEAN</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SLOT_DIRTY\">SLOT_DIRTY</a> = 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SLOT_USED\">SLOT_USED</a> = 2,", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#kprobe_insn_mutex\">kprobe_insn_mutex</a>);<span class=\"ts\"/><span class=\"comment\">/* Protects kprobe_insn_slots */</span>", 
"static struct <a class=\"id\" href=\"#kprobe_insn_cache\">kprobe_insn_cache</a> <a class=\"id\" href=\"#kprobe_insn_slots\">kprobe_insn_slots</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>(<a class=\"id\" href=\"#kprobe_insn_slots\">kprobe_insn_slots</a>.<a class=\"id\" href=\"#pages\">pages</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#insn_size\">insn_size</a> = <a class=\"id\" href=\"#MAX_INSN_SIZE\">MAX_INSN_SIZE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#nr_garbage\">nr_garbage</a> = 0,", 
"};", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#collect_garbage_slots\">collect_garbage_slots</a>(struct <a class=\"id\" href=\"#kprobe_insn_cache\">kprobe_insn_cache</a> *<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __get_insn_slot() - Find a slot on an executable page for an instruction.</span>", 
"<span class=\"comment\"> * We allocate an executable page if there's no room on existing ones.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> *<a class=\"id\" href=\"#__get_insn_slot\">__get_insn_slot</a>(struct <a class=\"id\" href=\"#kprobe_insn_cache\">kprobe_insn_cache</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_insn_page\">kprobe_insn_page</a> *<a class=\"id\" href=\"#kip\">kip</a>;", 
"", 
" <a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#kip\">kip</a>, &amp;<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#nused\">nused</a> &lt; <a class=\"id\" href=\"#slots_per_page\">slots_per_page</a>(<a class=\"id\" href=\"#c\">c</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#slots_per_page\">slots_per_page</a>(<a class=\"id\" href=\"#c\">c</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#slot_used\">slot_used</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#SLOT_CLEAN\">SLOT_CLEAN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#slot_used\">slot_used</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#SLOT_USED\">SLOT_USED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#nused\">nused</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#insns\">insns</a> + (<a class=\"id\" href=\"#i\">i</a> * <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#insn_size\">insn_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kip-&gt;nused is broken. Fix it. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#nused\">nused</a> = <a class=\"id\" href=\"#slots_per_page\">slots_per_page</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If there are any garbage slots, collect it and try again. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#nr_garbage\">nr_garbage</a> && <a class=\"id\" href=\"#collect_garbage_slots\">collect_garbage_slots</a>(<a class=\"id\" href=\"#c\">c</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All out of space.  Need to allocate a new page. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kip\">kip</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#KPROBE_INSN_PAGE_SIZE\">KPROBE_INSN_PAGE_SIZE</a>(<a class=\"id\" href=\"#slots_per_page\">slots_per_page</a>(<a class=\"id\" href=\"#c\">c</a>)), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kip\">kip</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use module_alloc so this page is within +/- 2GB of where the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernel image and loaded module images reside. This is required</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so x86_64 can correctly handle the %rip-relative fixups.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#insns\">insns</a> = <a class=\"id\" href=\"#module_alloc\">module_alloc</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#insns\">insns</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#kip\">kip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#slot_used\">slot_used</a>, <a class=\"id\" href=\"#SLOT_CLEAN\">SLOT_CLEAN</a>, <a class=\"id\" href=\"#slots_per_page\">slots_per_page</a>(<a class=\"id\" href=\"#c\">c</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#slot_used\">slot_used</a>[0] = <a class=\"id\" href=\"#SLOT_USED\">SLOT_USED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#nused\">nused</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#ngarbage\">ngarbage</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#insns\">insns</a>;", 
"}", 
"", 
"", 
"<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> *<a class=\"id\" href=\"#get_insn_slot\">get_insn_slot</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_insn_mutex\">kprobe_insn_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__get_insn_slot\">__get_insn_slot</a>(&amp;<a class=\"id\" href=\"#kprobe_insn_slots\">kprobe_insn_slots</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_insn_mutex\">kprobe_insn_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Return 1 if all garbages are collected, otherwise 0. */</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#collect_one_slot\">collect_one_slot</a>(struct <a class=\"id\" href=\"#kprobe_insn_page\">kprobe_insn_page</a> *<a class=\"id\" href=\"#kip\">kip</a>, int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#slot_used\">slot_used</a>[<a class=\"id\" href=\"#idx\">idx</a>] = <a class=\"id\" href=\"#SLOT_CLEAN\">SLOT_CLEAN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#nused\">nused</a>--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#nused\">nused</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Page is no longer in use.  Free it unless</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it's the last one.  We keep the last one</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so as not to have to set it up again the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * next time somebody inserts a probe.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_is_singular\">list_is_singular</a>(&amp;<a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_free\">module_free</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#insns\">insns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#kip\">kip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#collect_garbage_slots\">collect_garbage_slots</a>(struct <a class=\"id\" href=\"#kprobe_insn_cache\">kprobe_insn_cache</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_insn_page\">kprobe_insn_page</a> *<a class=\"id\" href=\"#kip\">kip</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ensure no-one is interrupted on the garbages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#kip\">kip</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#ngarbage\">ngarbage</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#ngarbage\">ngarbage</a> = 0;<span class=\"ts\"/><span class=\"comment\">/* we will collect all garbages */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#slots_per_page\">slots_per_page</a>(<a class=\"id\" href=\"#c\">c</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#slot_used\">slot_used</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#SLOT_DIRTY\">SLOT_DIRTY</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#collect_one_slot\">collect_one_slot</a>(<a class=\"id\" href=\"#kip\">kip</a>, <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#nr_garbage\">nr_garbage</a> = 0;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#__free_insn_slot\">__free_insn_slot</a>(struct <a class=\"id\" href=\"#kprobe_insn_cache\">kprobe_insn_cache</a> *<a class=\"id\" href=\"#c\">c</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *<a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#dirty\">dirty</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_insn_page\">kprobe_insn_page</a> *<a class=\"id\" href=\"#kip\">kip</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#kip\">kip</a>, &amp;<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#idx\">idx</a> = ((long)<a class=\"id\" href=\"#slot\">slot</a> - (long)<a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#insns\">insns</a>) /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#insn_size\">insn_size</a> * sizeof(<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> >= 0 && <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#slots_per_page\">slots_per_page</a>(<a class=\"id\" href=\"#c\">c</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#slot_used\">slot_used</a>[<a class=\"id\" href=\"#idx\">idx</a>] != <a class=\"id\" href=\"#SLOT_USED\">SLOT_USED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dirty\">dirty</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#slot_used\">slot_used</a>[<a class=\"id\" href=\"#idx\">idx</a>] = <a class=\"id\" href=\"#SLOT_DIRTY\">SLOT_DIRTY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kip\">kip</a>-><a class=\"id\" href=\"#ngarbage\">ngarbage</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#nr_garbage\">nr_garbage</a> &gt; <a class=\"id\" href=\"#slots_per_page\">slots_per_page</a>(<a class=\"id\" href=\"#c\">c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#collect_garbage_slots\">collect_garbage_slots</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#collect_one_slot\">collect_one_slot</a>(<a class=\"id\" href=\"#kip\">kip</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Could not free this slot. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#free_insn_slot\">free_insn_slot</a>(<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> * <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#dirty\">dirty</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_insn_mutex\">kprobe_insn_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_insn_slot\">__free_insn_slot</a>(&amp;<a class=\"id\" href=\"#kprobe_insn_slots\">kprobe_insn_slots</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#dirty\">dirty</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_insn_mutex\">kprobe_insn_mutex</a>);", 
"}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_OPTPROBES\">CONFIG_OPTPROBES</a>", 
"<span class=\"comment\">/* For optimized_kprobe buffer */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#kprobe_optinsn_mutex\">kprobe_optinsn_mutex</a>); <span class=\"comment\">/* Protects kprobe_optinsn_slots */</span>", 
"static struct <a class=\"id\" href=\"#kprobe_insn_cache\">kprobe_insn_cache</a> <a class=\"id\" href=\"#kprobe_optinsn_slots\">kprobe_optinsn_slots</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>(<a class=\"id\" href=\"#kprobe_optinsn_slots\">kprobe_optinsn_slots</a>.<a class=\"id\" href=\"#pages\">pages</a>),", 
"<span class=\"ts\"/><span class=\"comment\">/* .insn_size is initialized later */</span>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#nr_garbage\">nr_garbage</a> = 0,", 
"};", 
"<span class=\"comment\">/* Get a slot for optimized_kprobe buffer */</span>", 
"<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> *<a class=\"id\" href=\"#get_optinsn_slot\">get_optinsn_slot</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_optinsn_mutex\">kprobe_optinsn_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__get_insn_slot\">__get_insn_slot</a>(&amp;<a class=\"id\" href=\"#kprobe_optinsn_slots\">kprobe_optinsn_slots</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_optinsn_mutex\">kprobe_optinsn_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#free_optinsn_slot\">free_optinsn_slot</a>(<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> * <a class=\"id\" href=\"#slot\">slot</a>, int <a class=\"id\" href=\"#dirty\">dirty</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_optinsn_mutex\">kprobe_optinsn_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_insn_slot\">__free_insn_slot</a>(&amp;<a class=\"id\" href=\"#kprobe_optinsn_slots\">kprobe_optinsn_slots</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#dirty\">dirty</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_optinsn_mutex\">kprobe_optinsn_mutex</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* We have preemption disabled.. so it is safe to use __ versions */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_kprobe_instance\">set_kprobe_instance</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#kprobe_instance\">kprobe_instance</a>) = <a class=\"id\" href=\"#kp\">kp</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#reset_kprobe_instance\">reset_kprobe_instance</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#kprobe_instance\">kprobe_instance</a>) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This routine is called either:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>- under the kprobe_mutex - during kprobe_[un]register()</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>OR</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>- with preemption disabled - from arch/xxx/kernel/kprobes.c</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kprobe\">kprobe</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> *<a class=\"id\" href=\"#get_kprobe\">get_kprobe</a>(void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#kprobe_table\">kprobe_table</a>[<a class=\"id\" href=\"#hash_ptr\">hash_ptr</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#KPROBE_HASH_BITS\">KPROBE_HASH_BITS</a>)];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#aggr_pre_handler\">aggr_pre_handler</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"comment\">/* Return true if the kprobe is an aggregator */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#kprobe_aggrprobe\">kprobe_aggrprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pre_handler\">pre_handler</a> == <a class=\"id\" href=\"#aggr_pre_handler\">aggr_pre_handler</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Keep all fields in the kprobe consistent</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#copy_kprobe\">copy_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#old_p\">old_p</a>, struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#opcode\">opcode</a>, &amp;<a class=\"id\" href=\"#old_p\">old_p</a>-><a class=\"id\" href=\"#opcode\">opcode</a>, sizeof(<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>, &amp;<a class=\"id\" href=\"#old_p\">old_p</a>-><a class=\"id\" href=\"#ainsn\">ainsn</a>, sizeof(struct <a class=\"id\" href=\"#arch_specific_insn\">arch_specific_insn</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_OPTPROBES\">CONFIG_OPTPROBES</a>", 
"<span class=\"comment\">/* NOTE: change this value only with kprobe_mutex held */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#kprobes_allow_optimization\">kprobes_allow_optimization</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call all pre_handler on the list, but ignores its return value.</span>", 
"<span class=\"comment\"> * This must be called from arch-dep optimized caller.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#opt_pre_handler\">opt_pre_handler</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#kp\">kp</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#pre_handler\">pre_handler</a> && <a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#kp\">kp</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_kprobe_instance\">set_kprobe_instance</a>(<a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#pre_handler\">pre_handler</a>(<a class=\"id\" href=\"#kp\">kp</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reset_kprobe_instance\">reset_kprobe_instance</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Return true(!0) if the kprobe is ready for optimization. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#kprobe_optready\">kprobe_optready</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobe_aggrprobe\">kprobe_aggrprobe</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a>, <a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#arch_prepared_optinsn\">arch_prepared_optinsn</a>(&amp;<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return an optimized kprobe whose optimizing code replaces</span>", 
"<span class=\"comment\"> * instructions including addr (exclude breakpoint).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#get_optimized_kprobe\">get_optimized_kprobe</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't check i == 0, since that is a breakpoint case. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; !<a class=\"id\" href=\"#p\">p</a> && <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_OPTIMIZED_LENGTH\">MAX_OPTIMIZED_LENGTH</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#get_kprobe\">get_kprobe</a>((void *)(<a class=\"id\" href=\"#addr\">addr</a> - <a class=\"id\" href=\"#i\">i</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> && <a class=\"id\" href=\"#kprobe_optready\">kprobe_optready</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a>, <a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#arch_within_optimized_kprobe\">arch_within_optimized_kprobe</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Optimization staging list, protected by kprobe_mutex */</span>", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#optimizing_list\">optimizing_list</a>);", 
"", 
"static void <a class=\"id\" href=\"#kprobe_optimizer\">kprobe_optimizer</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"static <a class=\"id\" href=\"#DECLARE_DELAYED_WORK\">DECLARE_DELAYED_WORK</a>(<a class=\"id\" href=\"#optimizing_work\">optimizing_work</a>, <a class=\"id\" href=\"#kprobe_optimizer\">kprobe_optimizer</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OPTIMIZE_DELAY\">OPTIMIZE_DELAY</a> 5", 
"", 
"<span class=\"comment\">/* Kprobe jump optimizer */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#kprobe_optimizer\">kprobe_optimizer</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Lock modules while optimizing kprobes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobes_all_disarmed\">kprobes_all_disarmed</a> || !<a class=\"id\" href=\"#kprobes_allow_optimization\">kprobes_allow_optimization</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait for quiesence period to ensure all running interrupts</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are done. Because optprobe may modify multiple instructions</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there is a chance that Nth instruction is interrupted. In that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case, running interrupt can return to 2nd-Nth byte of jump</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * instruction. This wait is for avoiding it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The optimization/unoptimization refers online_cpus via</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stop_machine() and cpu-hotplug modifies online_cpus.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * And same time, text_mutex will be held in cpu-hotplug and here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This combination can cause a deadlock (cpu-hotplug try to lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * text_mutex but stop_machine can not be done because online_cpus</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * has been changed)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To avoid this deadlock, we need to call get_online_cpus()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for preventing cpu-hotplug outside of text_mutex locking.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#optimizing_list\">optimizing_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(&amp;<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#arch_optimize_kprobe\">arch_optimize_kprobe</a>(<a class=\"id\" href=\"#op\">op</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#KPROBE_FLAG_OPTIMIZED\">KPROBE_FLAG_OPTIMIZED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<a class=\"id\" href=\"#end\">end</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#module_mutex\">module_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Optimize kprobe if p is ready to be optimized */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#optimize_kprobe\">optimize_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if the kprobe is disabled or not ready for optimization. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobe_optready\">kprobe_optready</a>(<a class=\"id\" href=\"#p\">p</a>) || !<a class=\"id\" href=\"#kprobes_allow_optimization\">kprobes_allow_optimization</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#p\">p</a>) || <a class=\"id\" href=\"#kprobes_all_disarmed\">kprobes_all_disarmed</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Both of break_handler and post_handler are not supported. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#break_handler\">break_handler</a> || <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a>, <a class=\"id\" href=\"#kp\">kp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check there is no other kprobes at the optimized instructions */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arch_check_optimized_kprobe\">arch_check_optimized_kprobe</a>(<a class=\"id\" href=\"#op\">op</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if it is already optimized. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KPROBE_FLAG_OPTIMIZED\">KPROBE_FLAG_OPTIMIZED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#KPROBE_FLAG_OPTIMIZED\">KPROBE_FLAG_OPTIMIZED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#optimizing_list\">optimizing_list</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#delayed_work_pending\">delayed_work_pending</a>(&amp;<a class=\"id\" href=\"#optimizing_work\">optimizing_work</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_delayed_work\">schedule_delayed_work</a>(&amp;<a class=\"id\" href=\"#optimizing_work\">optimizing_work</a>, <a class=\"id\" href=\"#OPTIMIZE_DELAY\">OPTIMIZE_DELAY</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Unoptimize a kprobe if p is optimized */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#unoptimize_kprobe\">unoptimize_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KPROBE_FLAG_OPTIMIZED\">KPROBE_FLAG_OPTIMIZED</a>) && <a class=\"id\" href=\"#kprobe_aggrprobe\">kprobe_aggrprobe</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a>, <a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Dequeue from the optimization queue */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Replace jump with break */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_unoptimize_kprobe\">arch_unoptimize_kprobe</a>(<a class=\"id\" href=\"#op\">op</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#KPROBE_FLAG_OPTIMIZED\">KPROBE_FLAG_OPTIMIZED</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Remove optimized instructions */</span>", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kill_optimized_kprobe\">kill_optimized_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a>, <a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Dequeue from the optimization queue */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#KPROBE_FLAG_OPTIMIZED\">KPROBE_FLAG_OPTIMIZED</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't unoptimize, because the target code will be freed. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_remove_optimized_kprobe\">arch_remove_optimized_kprobe</a>(<a class=\"id\" href=\"#op\">op</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Try to prepare optimized instructions */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#prepare_optimized_kprobe\">prepare_optimized_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a>, <a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_prepare_optimized_kprobe\">arch_prepare_optimized_kprobe</a>(<a class=\"id\" href=\"#op\">op</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Free optimized instructions and optimized_kprobe */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#free_aggr_kprobe\">free_aggr_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a>, <a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_remove_optimized_kprobe\">arch_remove_optimized_kprobe</a>(<a class=\"id\" href=\"#op\">op</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#op\">op</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Allocate new optimized_kprobe and try to prepare optimized instructions */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#alloc_aggr_kprobe\">alloc_aggr_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#op\">op</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_prepare_optimized_kprobe\">arch_prepare_optimized_kprobe</a>(<a class=\"id\" href=\"#op\">op</a>);", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#init_aggr_kprobe\">init_aggr_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#ap\">ap</a>, struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prepare an optimized_kprobe and optimize it</span>", 
"<span class=\"comment\"> * NOTE: p must be a normal registered kprobe</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#try_to_optimize_kprobe\">try_to_optimize_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#alloc_aggr_kprobe\">alloc_aggr_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ap\">ap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ap\">ap</a>, struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a>, <a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#arch_prepared_optinsn\">arch_prepared_optinsn</a>(&amp;<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If failed to setup optimizing, fallback to kprobe */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_aggr_kprobe\">free_aggr_kprobe</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_aggr_kprobe\">init_aggr_kprobe</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#optimize_kprobe\">optimize_kprobe</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSCTL\">CONFIG_SYSCTL</a>", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#optimize_all_kprobes\">optimize_all_kprobes</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If optimization is already allowed, just return */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobes_allow_optimization\">kprobes_allow_optimization</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobes_allow_optimization\">kprobes_allow_optimization</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KPROBE_TABLE_SIZE\">KPROBE_TABLE_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#kprobe_table\">kprobe_table</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#hlist\">hlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#optimize_kprobe\">optimize_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Kprobes globally optimized\\n\");", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#unoptimize_all_kprobes\">unoptimize_all_kprobes</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If optimization is already prohibited, just return */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobes_allow_optimization\">kprobes_allow_optimization</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobes_allow_optimization\">kprobes_allow_optimization</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Kprobes globally unoptimized\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();<span class=\"ts\"/><span class=\"comment\">/* For avoiding text_mutex deadlock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KPROBE_TABLE_SIZE\">KPROBE_TABLE_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#kprobe_table\">kprobe_table</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unoptimize_kprobe\">unoptimize_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Allow all currently running kprobes to complete */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"}", 
"", 
"int <a class=\"id\" href=\"#sysctl_kprobes_optimization\">sysctl_kprobes_optimization</a>;", 
"int <a class=\"id\" href=\"#proc_kprobes_optimization_handler\">proc_kprobes_optimization_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#length\">length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysctl_kprobes_optimization\">sysctl_kprobes_optimization</a> = <a class=\"id\" href=\"#kprobes_allow_optimization\">kprobes_allow_optimization</a> ? 1 : 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_kprobes_optimization\">sysctl_kprobes_optimization</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#optimize_all_kprobes\">optimize_all_kprobes</a>();", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unoptimize_all_kprobes\">unoptimize_all_kprobes</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#kprobe_mutex\">kprobe_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SYSCTL */</span>", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#__arm_kprobe\">__arm_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#old_p\">old_p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check collision with other optimized kprobes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_p\">old_p</a> = <a class=\"id\" href=\"#get_optimized_kprobe\">get_optimized_kprobe</a>((unsigned long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#old_p\">old_p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unoptimize_kprobe\">unoptimize_kprobe</a>(<a class=\"id\" href=\"#old_p\">old_p</a>); <span class=\"comment\">/* Fallback to unoptimized kprobe */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_arm_kprobe\">arch_arm_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#optimize_kprobe\">optimize_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);<span class=\"ts\"/><span class=\"comment\">/* Try to optimize (add kprobe to a list) */</span>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#__disarm_kprobe\">__disarm_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#old_p\">old_p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unoptimize_kprobe\">unoptimize_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);<span class=\"ts\"/><span class=\"comment\">/* Try to unoptimize */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_disarm_kprobe\">arch_disarm_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If another kprobe was blocked, optimize it. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_p\">old_p</a> = <a class=\"id\" href=\"#get_optimized_kprobe\">get_optimized_kprobe</a>((unsigned long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#old_p\">old_p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#optimize_kprobe\">optimize_kprobe</a>(<a class=\"id\" href=\"#old_p\">old_p</a>);", 
"}", 
"", 
"#else <span class=\"comment\">/* !CONFIG_OPTPROBES */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#optimize_kprobe\">optimize_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unoptimize_kprobe\">unoptimize_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kill_optimized_kprobe\">kill_optimized_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/><span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#prepare_optimized_kprobe\">prepare_optimized_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/><span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#try_to_optimize_kprobe\">try_to_optimize_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/><span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__arm_kprobe\">__arm_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_arm_kprobe\">arch_arm_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__disarm_kprobe\">__disarm_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_disarm_kprobe\">arch_disarm_kprobe</a>(<a class=\"id\" href=\"#p\">p</a>)", 
"", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#free_aggr_kprobe\">free_aggr_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#alloc_aggr_kprobe\">alloc_aggr_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#kprobe\">kprobe</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_OPTPROBES */</span>", 
"", 
"<span class=\"comment\">/* Arm a kprobe with text_mutex */</span>", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#arm_kprobe\">arm_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Here, since __arm_kprobe() doesn't use stop_machine(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this doesn't cause deadlock on text_mutex. So, we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need get_online_cpus().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__arm_kprobe\">__arm_kprobe</a>(<a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Disarm a kprobe with text_mutex */</span>", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#disarm_kprobe\">disarm_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();<span class=\"ts\"/><span class=\"comment\">/* For avoiding text_mutex deadlock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__disarm_kprobe\">__disarm_kprobe</a>(<a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Aggregate handlers for multiple kprobes support - these handlers</span>", 
"<span class=\"comment\"> * take care of invoking the individual kprobe handlers on p-&gt;list</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#aggr_pre_handler\">aggr_pre_handler</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#kp\">kp</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#pre_handler\">pre_handler</a> && <a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#kp\">kp</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_kprobe_instance\">set_kprobe_instance</a>(<a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#pre_handler\">pre_handler</a>(<a class=\"id\" href=\"#kp\">kp</a>, <a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reset_kprobe_instance\">reset_kprobe_instance</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#aggr_post_handler\">aggr_post_handler</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#kp\">kp</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a> && <a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#kp\">kp</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_kprobe_instance\">set_kprobe_instance</a>(<a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#post_handler\">post_handler</a>(<a class=\"id\" href=\"#kp\">kp</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reset_kprobe_instance\">reset_kprobe_instance</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#aggr_fault_handler\">aggr_fault_handler</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#trapnr\">trapnr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#kprobe_instance\">kprobe_instance</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if we faulted \"during\" the execution of a user specified</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * probe handler, invoke just that probe's fault handler</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> && <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#fault_handler\">fault_handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#fault_handler\">fault_handler</a>(<a class=\"id\" href=\"#cur\">cur</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#trapnr\">trapnr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#aggr_break_handler\">aggr_break_handler</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#kprobe_instance\">kprobe_instance</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> && <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#break_handler\">break_handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#break_handler\">break_handler</a>(<a class=\"id\" href=\"#cur\">cur</a>, <a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reset_kprobe_instance\">reset_kprobe_instance</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Walks the list and increments nmissed count for multiprobe case */</span>", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kprobes_inc_nmissed_count\">kprobes_inc_nmissed_count</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kprobe_aggrprobe\">kprobe_aggrprobe</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#nmissed\">nmissed</a>++;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#kp\">kp</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#nmissed\">nmissed</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#recycle_rp_inst\">recycle_rp_inst</a>(struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a> *<a class=\"id\" href=\"#ri\">ri</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kretprobe\">kretprobe</a> *<a class=\"id\" href=\"#rp\">rp</a> = <a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#rp\">rp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* remove rp inst off the rprobe_inst_table */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(&amp;<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#rp\">rp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#hlist\">hlist</a>, &amp;<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#free_instances\">free_instances</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#rp\">rp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Unregistering */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#hlist\">hlist</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kretprobe_hash_lock\">kretprobe_hash_lock</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> **<a class=\"id\" href=\"#head\">head</a>, unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#hash_ptr\">hash_ptr</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#KPROBE_HASH_BITS\">KPROBE_HASH_BITS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#hlist_lock\">hlist_lock</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#kretprobe_inst_table\">kretprobe_inst_table</a>[<a class=\"id\" href=\"#hash\">hash</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_lock\">hlist_lock</a> = <a class=\"id\" href=\"#kretprobe_table_lock_ptr\">kretprobe_table_lock_ptr</a>(<a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#hlist_lock\">hlist_lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kretprobe_table_lock\">kretprobe_table_lock</a>(unsigned long <a class=\"id\" href=\"#hash\">hash</a>,", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#hlist_lock\">hlist_lock</a> = <a class=\"id\" href=\"#kretprobe_table_lock_ptr\">kretprobe_table_lock_ptr</a>(<a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#hlist_lock\">hlist_lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kretprobe_hash_unlock\">kretprobe_hash_unlock</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#hash_ptr\">hash_ptr</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#KPROBE_HASH_BITS\">KPROBE_HASH_BITS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#hlist_lock\">hlist_lock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_lock\">hlist_lock</a> = <a class=\"id\" href=\"#kretprobe_table_lock_ptr\">kretprobe_table_lock_ptr</a>(<a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#hlist_lock\">hlist_lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kretprobe_table_unlock\">kretprobe_table_unlock</a>(unsigned long <a class=\"id\" href=\"#hash\">hash</a>, unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#hlist_lock\">hlist_lock</a> = <a class=\"id\" href=\"#kretprobe_table_lock_ptr\">kretprobe_table_lock_ptr</a>(<a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#hlist_lock\">hlist_lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function is called from finish_task_switch when task tk becomes dead,</span>", 
"<span class=\"comment\"> * so that we can recycle any function-return probe instances associated</span>", 
"<span class=\"comment\"> * with this task. These left over instances represent probed functions</span>", 
"<span class=\"comment\"> * that have been called but will never return.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kprobe_flush_task\">kprobe_flush_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tk\">tk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a> *<a class=\"id\" href=\"#ri\">ri</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#empty_rp\">empty_rp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#kprobes_initialized\">kprobes_initialized</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Early boot.  kretprobe_table_locks not yet initialized. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#hash_ptr\">hash_ptr</a>(<a class=\"id\" href=\"#tk\">tk</a>, <a class=\"id\" href=\"#KPROBE_HASH_BITS\">KPROBE_HASH_BITS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#kretprobe_inst_table\">kretprobe_inst_table</a>[<a class=\"id\" href=\"#hash\">hash</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kretprobe_table_lock\">kretprobe_table_lock</a>(<a class=\"id\" href=\"#hash\">hash</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_safe\">hlist_for_each_entry_safe</a>(<a class=\"id\" href=\"#ri\">ri</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#tk\">tk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#recycle_rp_inst\">recycle_rp_inst</a>(<a class=\"id\" href=\"#ri\">ri</a>, &amp;<a class=\"id\" href=\"#empty_rp\">empty_rp</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kretprobe_table_unlock\">kretprobe_table_unlock</a>(<a class=\"id\" href=\"#hash\">hash</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#empty_rp\">empty_rp</a>);", 
];
xr_frag_insert('l/86/222709758ccb1310875131a5c568a1b0e059f9.xr', __xr_tmp);
