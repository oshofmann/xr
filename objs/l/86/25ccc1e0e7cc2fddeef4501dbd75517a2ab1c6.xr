var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/mm/mmu_notifier.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008  Qumranet, Inc.</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008  SGI</span>", 
"<span class=\"comment\"> *             Christoph Lameter &lt;clameter@sgi.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This work is licensed under the terms of the GNU GPL, version 2. See</span>", 
"<span class=\"comment\"> *  the COPYING file in the top-level directory.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rculist\">rculist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function can't run concurrently against mmu_notifier_register</span>", 
"<span class=\"comment\"> * because mm-&gt;mm_users &gt; 0 during mmu_notifier_register and exit_mmap</span>", 
"<span class=\"comment\"> * runs with mm_users == 0. Other tasks may still invoke mmu notifiers</span>", 
"<span class=\"comment\"> * in parallel despite there being no task using this mm any more,</span>", 
"<span class=\"comment\"> * through the vmas outside of the exit_mmap context, such as with</span>", 
"<span class=\"comment\"> * vmtruncate. This serializes against mmu_notifier_unregister with</span>", 
"<span class=\"comment\"> * the mmu_notifier_mm-&gt;lock in addition to RCU and it serializes</span>", 
"<span class=\"comment\"> * against the other mmu notifiers with RCU. struct mmu_notifier_mm</span>", 
"<span class=\"comment\"> * can't go away from under us as exit_mmap holds an mm_count pin</span>", 
"<span class=\"comment\"> * itself.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__mmu_notifier_release\">__mmu_notifier_release</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#hlist_empty\">hlist_empty</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#list\">list</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mn\">mn</a> = <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#first\">first</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We arrived before mmu_notifier_unregister so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mmu_notifier_unregister will do nothing other than</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to wait -&gt;release to finish and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mmu_notifier_unregister to return.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_init_rcu\">hlist_del_init_rcu</a>(&amp;<a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * RCU here will block mmu_notifier_unregister until</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * -&gt;release returns.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if -&gt;release runs before mmu_notifier_unregister it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * must be handled as it's the only way for the driver</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to flush all existing sptes and stop the driver</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * from establishing any more sptes before all the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pages in the mm are freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#release\">release</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#release\">release</a>(<a class=\"id\" href=\"#mn\">mn</a>, <a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * synchronize_rcu here prevents mmu_notifier_release to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return to exit_mmap (which would proceed freeing all pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the mm) until the -&gt;release method returns, if it was</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invoked by mmu_notifier_unregister.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The mmu_notifier_mm can't go away from under us because one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mm_count is hold by exit_mmap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If no young bitflag is supported by the hardware, -&gt;clear_flush_young can</span>", 
"<span class=\"comment\"> * unmap the address and return 1 or 0 depending if the mapping previously</span>", 
"<span class=\"comment\"> * existed or not.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__mmu_notifier_clear_flush_young\">__mmu_notifier_clear_flush_young</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#young\">young</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#mn\">mn</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#clear_flush_young\">clear_flush_young</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#young\">young</a> |= <a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#clear_flush_young\">clear_flush_young</a>(<a class=\"id\" href=\"#mn\">mn</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#young\">young</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__mmu_notifier_change_pte\">__mmu_notifier_change_pte</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#mn\">mn</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#change_pte\">change_pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#change_pte\">change_pte</a>(<a class=\"id\" href=\"#mn\">mn</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Some drivers don't have change_pte,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so we must call invalidate_page in that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#invalidate_page\">invalidate_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#invalidate_page\">invalidate_page</a>(<a class=\"id\" href=\"#mn\">mn</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#__mmu_notifier_invalidate_page\">__mmu_notifier_invalidate_page</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#mn\">mn</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#invalidate_page\">invalidate_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#invalidate_page\">invalidate_page</a>(<a class=\"id\" href=\"#mn\">mn</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#__mmu_notifier_invalidate_range_start\">__mmu_notifier_invalidate_range_start</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#mn\">mn</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#invalidate_range_start\">invalidate_range_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#invalidate_range_start\">invalidate_range_start</a>(<a class=\"id\" href=\"#mn\">mn</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#__mmu_notifier_invalidate_range_end\">__mmu_notifier_invalidate_range_end</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#mn\">mn</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#hlist\">hlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#invalidate_range_end\">invalidate_range_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#invalidate_range_end\">invalidate_range_end</a>(<a class=\"id\" href=\"#mn\">mn</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#do_mmu_notifier_register\">do_mmu_notifier_register</a>(struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#take_mmap_sem\">take_mmap_sem</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a> *<a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>) <= 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#take_mmap_sem\">take_mmap_sem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mm_take_all_locks\">mm_take_all_locks</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_cleanup\">out_cleanup</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm_has_notifiers\">mm_has_notifiers</a>(<a class=\"id\" href=\"#mm\">mm</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a> = <a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_count\">mm_count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Serialize the update against mmu_notifier_unregister. A</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * side note: mmu_notifier_release can't run concurrently with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * us because we hold the mm_users pin (either implicitly as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current-&gt;mm or explicitly with get_task_mm() or similar).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can't race against any other mmu notifier method either</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thanks to mm_take_all_locks().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#hlist\">hlist</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_drop_all_locks\">mm_drop_all_locks</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<a class=\"id\" href=\"#out_cleanup\">out_cleanup</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#take_mmap_sem\">take_mmap_sem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* kfree() does nothing if mmu_notifier_mm is NULL */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>) <= 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Must not hold mmap_sem nor any other VM related lock when calling</span>", 
"<span class=\"comment\"> * this registration function. Must also ensure mm_users can't go down</span>", 
"<span class=\"comment\"> * to zero while this runs to avoid races with mmu_notifier_release,</span>", 
"<span class=\"comment\"> * so mm has to be current-&gt;mm or the mm should be pinned safely such</span>", 
"<span class=\"comment\"> * as with get_task_mm(). If the mm is not current-&gt;mm, the mm_users</span>", 
"<span class=\"comment\"> * pin should be released by calling mmput after mmu_notifier_register</span>", 
"<span class=\"comment\"> * returns. mmu_notifier_unregister must be always called to</span>", 
"<span class=\"comment\"> * unregister the notifier. mm_count is automatically pinned to allow</span>", 
"<span class=\"comment\"> * mmu_notifier_unregister to safely run at any time later, before or</span>", 
"<span class=\"comment\"> * after exit_mmap. -&gt;release will always be called before exit_mmap</span>", 
"<span class=\"comment\"> * frees the pages.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mmu_notifier_register\">mmu_notifier_register</a>(struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_mmu_notifier_register\">do_mmu_notifier_register</a>(<a class=\"id\" href=\"#mn\">mn</a>, <a class=\"id\" href=\"#mm\">mm</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#mmu_notifier_register\">mmu_notifier_register</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Same as mmu_notifier_register but here the caller must hold the</span>", 
"<span class=\"comment\"> * mmap_sem in write mode.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__mmu_notifier_register\">__mmu_notifier_register</a>(struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_mmu_notifier_register\">do_mmu_notifier_register</a>(<a class=\"id\" href=\"#mn\">mn</a>, <a class=\"id\" href=\"#mm\">mm</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__mmu_notifier_register\">__mmu_notifier_register</a>);", 
"", 
"<span class=\"comment\">/* this is called after the last mmu_notifier_unregister() returned */</span>", 
"void <a class=\"id\" href=\"#__mmu_notifier_mm_destroy\">__mmu_notifier_mm_destroy</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#hlist_empty\">hlist_empty</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#list\">list</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a> = <a class=\"id\" href=\"#LIST_POISON1\">LIST_POISON1</a>; <span class=\"comment\">/* debug */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This releases the mm_count pin automatically and frees the mm</span>", 
"<span class=\"comment\"> * structure if it was the last user of it. It serializes against</span>", 
"<span class=\"comment\"> * running mmu notifiers with RCU and against mmu_notifier_unregister</span>", 
"<span class=\"comment\"> * with the unregister lock + RCU. All sptes must be dropped before</span>", 
"<span class=\"comment\"> * calling mmu_notifier_unregister. -&gt;release or any other notifier</span>", 
"<span class=\"comment\"> * method may be invoked concurrently with mmu_notifier_unregister,</span>", 
"<span class=\"comment\"> * and only after mmu_notifier_unregister returned we're guaranteed</span>", 
"<span class=\"comment\"> * that -&gt;release or any other method can't run anymore.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mmu_notifier_unregister\">mmu_notifier_unregister</a>(struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_count\">mm_count</a>) <= 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hlist_unhashed\">hlist_unhashed</a>(&amp;<a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#hlist\">hlist</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_rcu\">hlist_del_rcu</a>(&amp;<a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * RCU here will force exit_mmap to wait -&gt;release to finish</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * before freeing the pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * exit_mmap will block in mmu_notifier_release to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * guarantee -&gt;release is called before freeing the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#release\">release</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mn\">mn</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#release\">release</a>(<a class=\"id\" href=\"#mn\">mn</a>, <a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait any running method to finish, of course including</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -&gt;release if it was run by mmu_notifier_relase instead of us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_count\">mm_count</a>) <= 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmdrop\">mmdrop</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#mmu_notifier_unregister\">mmu_notifier_unregister</a>);", 
];
xr_frag_insert('l/86/25ccc1e0e7cc2fddeef4501dbd75517a2ab1c6.xr', __xr_tmp);
