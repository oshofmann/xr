var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Xen mmu operations</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file contains the various mmu fetch and update operations.</span>", 
"<span class=\"comment\"> * The most important job they must perform is the mapping between the</span>", 
"<span class=\"comment\"> * domain's pfn and the overall machine mfns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Xen allows guests to directly update the pagetable, in a controlled</span>", 
"<span class=\"comment\"> * fashion.  In other words, the guest modifies the same pagetable</span>", 
"<span class=\"comment\"> * that the CPU actually uses, which eliminates the overhead of having</span>", 
"<span class=\"comment\"> * a separate shadow pagetable.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In order to allow this, it falls on the guest domain to map its</span>", 
"<span class=\"comment\"> * notion of a \"physical\" pfn - which is just a domain-local linear</span>", 
"<span class=\"comment\"> * address - into a real \"machine address\" which the CPU's MMU can</span>", 
"<span class=\"comment\"> * use.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A pgd_t/pmd_t/pte_t will typically contain an mfn, and so can be</span>", 
"<span class=\"comment\"> * inserted directly into the pagetable.  When creating a new</span>", 
"<span class=\"comment\"> * pte/pmd/pgd, it converts the passed pfn into an mfn.  Conversely,</span>", 
"<span class=\"comment\"> * when reading the content back with __(pgd|pmd|pte)_val, it converts</span>", 
"<span class=\"comment\"> * the mfn back into a pfn.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The other constraint is that all pages which make up a pagetable</span>", 
"<span class=\"comment\"> * must be mapped read-only in the guest.  This prevents uncontrolled</span>", 
"<span class=\"comment\"> * guest updates to the pagetable.  Xen strictly enforces this, and</span>", 
"<span class=\"comment\"> * will disallow any pagetable update which will end up mapping a</span>", 
"<span class=\"comment\"> * pagetable page RW, and will disallow using any writable page as a</span>", 
"<span class=\"comment\"> * pagetable.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Naively, when loading %cr3 with the base of a new pagetable, Xen</span>", 
"<span class=\"comment\"> * would need to validate the whole pagetable before going on.</span>", 
"<span class=\"comment\"> * Naturally, this is quite slow.  The solution is to \"pin\" a</span>", 
"<span class=\"comment\"> * pagetable, which enforces all the constraints on the pagetable even</span>", 
"<span class=\"comment\"> * when it is not actively in use.  This menas that Xen can be assured</span>", 
"<span class=\"comment\"> * that it is still valid when you do load it into %cr3, and doesn't</span>", 
"<span class=\"comment\"> * need to revalidate it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Jeremy Fitzhardinge &lt;jeremy@xensource.com&gt;, XenSource Inc, 2007</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bug\">bug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#fixmap\">fixmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mmu_context\">mmu_context</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#setup\">setup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#paravirt\">paravirt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#linkage\">linkage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#hypercall\">hypercall</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#hypervisor\">hypervisor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#xen\">xen</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#interface\">interface</a>/<a class=\"id\" href=\"#xen\">xen</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#interface\">interface</a>/<a class=\"id\" href=\"#hvm\">hvm</a>/<a class=\"id\" href=\"#hvm_op\">hvm_op</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#interface\">interface</a>/<a class=\"id\" href=\"#version\">version</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#interface\">interface</a>/<a class=\"id\" href=\"#memory\">memory</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#hvc\">hvc</a>-<a class=\"id\" href=\"#console\">console</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"multicalls.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"mmu.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"debugfs.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMU_UPDATE_HISTO\">MMU_UPDATE_HISTO</a><span class=\"ts\"/>30", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Protects atomic reservation decrease/increase against concurrent increases.</span>", 
"<span class=\"comment\"> * Also protects non-atomic updates of current_pages and driver_pages, and</span>", 
"<span class=\"comment\"> * balloon lists.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#xen_reservation_lock\">xen_reservation_lock</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_XEN_DEBUG_FS\">CONFIG_XEN_DEBUG_FS</a>", 
"", 
"static struct {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pgd_update\">pgd_update</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pgd_update_pinned\">pgd_update_pinned</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pgd_update_batched\">pgd_update_batched</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pud_update\">pud_update</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pud_update_pinned\">pud_update_pinned</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pud_update_batched\">pud_update_batched</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pmd_update\">pmd_update</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pmd_update_pinned\">pmd_update_pinned</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pmd_update_batched\">pmd_update_batched</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pte_update\">pte_update</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pte_update_pinned\">pte_update_pinned</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pte_update_batched\">pte_update_batched</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mmu_update\">mmu_update</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mmu_update_extended\">mmu_update_extended</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mmu_update_histo\">mmu_update_histo</a>[<a class=\"id\" href=\"#MMU_UPDATE_HISTO\">MMU_UPDATE_HISTO</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#prot_commit\">prot_commit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#prot_commit_batched\">prot_commit_batched</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#set_pte_at_batched\">set_pte_at_batched</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#set_pte_at_pinned\">set_pte_at_pinned</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#set_pte_at_current\">set_pte_at_current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#set_pte_at_kernel\">set_pte_at_kernel</a>;", 
"} <a class=\"id\" href=\"#mmu_stats\">mmu_stats</a>;", 
"", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#zero_stats\">zero_stats</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#check_zero\">check_zero</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#zero_stats\">zero_stats</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#mmu_stats\">mmu_stats</a>, 0, sizeof(<a class=\"id\" href=\"#mmu_stats\">mmu_stats</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zero_stats\">zero_stats</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#elem\">elem</a>, <a class=\"id\" href=\"#val\">val</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do { <a class=\"id\" href=\"#check_zero\">check_zero</a>(); <a class=\"id\" href=\"#mmu_stats\">mmu_stats</a>.<a class=\"id\" href=\"#elem\">elem</a> += (<a class=\"id\" href=\"#val\">val</a>); } while(0)", 
"", 
"#else  <span class=\"comment\">/* !CONFIG_XEN_DEBUG_FS */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#elem\">elem</a>, <a class=\"id\" href=\"#val\">val</a>)<span class=\"ts\"/>do { (void)(<a class=\"id\" href=\"#val\">val</a>); } while(0)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_XEN_DEBUG_FS */</span>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Identity map, in addition to plain kernel map.  This needs to be</span>", 
"<span class=\"comment\"> * large enough to allocate page table pages to allocate the rest.</span>", 
"<span class=\"comment\"> * Each page can map 2MB.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#level1_ident_pgt\">level1_ident_pgt</a>[<a class=\"id\" href=\"#PTRS_PER_PTE\">PTRS_PER_PTE</a> * 4] <a class=\"id\" href=\"#__page_aligned_bss\">__page_aligned_bss</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"comment\">/* l3 pud for userspace vsyscall mapping */</span>", 
"static <a class=\"id\" href=\"#pud_t\">pud_t</a> <a class=\"id\" href=\"#level3_user_vsyscall\">level3_user_vsyscall</a>[<a class=\"id\" href=\"#PTRS_PER_PUD\">PTRS_PER_PUD</a>] <a class=\"id\" href=\"#__page_aligned_bss\">__page_aligned_bss</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note about cr3 (pagetable base) values:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * xen_cr3 contains the current logical cr3 value; it contains the</span>", 
"<span class=\"comment\"> * last set cr3.  This may not be the current effective cr3, because</span>", 
"<span class=\"comment\"> * its update may be being lazily deferred.  However, a vcpu looking</span>", 
"<span class=\"comment\"> * at its own cr3 can use this value knowing that it everything will</span>", 
"<span class=\"comment\"> * be self-consistent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * xen_current_cr3 contains the actual vcpu cr3; it is set once the</span>", 
"<span class=\"comment\"> * hypercall to set the vcpu cr3 is complete (so it may be a little</span>", 
"<span class=\"comment\"> * out of date, but it will never be set early).  If one vcpu is</span>", 
"<span class=\"comment\"> * looking at another vcpu's cr3 value, it should use this variable.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#xen_cr3\">xen_cr3</a>);<span class=\"ts\"/> <span class=\"comment\">/* cr3 stored as physaddr */</span>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#xen_current_cr3\">xen_current_cr3</a>);<span class=\"ts\"/> <span class=\"comment\">/* actual vcpu cr3 */</span>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Just beyond the highest usermode address.  STACK_TOP_MAX has a</span>", 
"<span class=\"comment\"> * redzone above it, so round it up to a PGD boundary.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USER_LIMIT\">USER_LIMIT</a><span class=\"ts\"/>((<a class=\"id\" href=\"#STACK_TOP_MAX\">STACK_TOP_MAX</a> + <a class=\"id\" href=\"#PGDIR_SIZE\">PGDIR_SIZE</a> - 1) &amp; <a class=\"id\" href=\"#PGDIR_MASK\">PGDIR_MASK</a>)", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#P2M_ENTRIES_PER_PAGE\">P2M_ENTRIES_PER_PAGE</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / sizeof(unsigned long))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TOP_ENTRIES\">TOP_ENTRIES</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#MAX_DOMAIN_PAGES\">MAX_DOMAIN_PAGES</a> / <a class=\"id\" href=\"#P2M_ENTRIES_PER_PAGE\">P2M_ENTRIES_PER_PAGE</a>)", 
"", 
"<span class=\"comment\">/* Placeholder for holes in the address space */</span>", 
"static unsigned long <a class=\"id\" href=\"#p2m_missing\">p2m_missing</a>[<a class=\"id\" href=\"#P2M_ENTRIES_PER_PAGE\">P2M_ENTRIES_PER_PAGE</a>] <a class=\"id\" href=\"#__page_aligned_data\">__page_aligned_data</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>{ [ 0 ... <a class=\"id\" href=\"#P2M_ENTRIES_PER_PAGE\">P2M_ENTRIES_PER_PAGE</a>-1 ] = ~0UL };", 
"", 
" <span class=\"comment\">/* Array of pointers to pages containing p2m entries */</span>", 
"static unsigned long *<a class=\"id\" href=\"#p2m_top\">p2m_top</a>[<a class=\"id\" href=\"#TOP_ENTRIES\">TOP_ENTRIES</a>] <a class=\"id\" href=\"#__page_aligned_data\">__page_aligned_data</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>{ [ 0 ... <a class=\"id\" href=\"#TOP_ENTRIES\">TOP_ENTRIES</a> - 1] = &amp;<a class=\"id\" href=\"#p2m_missing\">p2m_missing</a>[0] };", 
"", 
"<span class=\"comment\">/* Arrays of p2m arrays expressed in mfns used for save/restore */</span>", 
"static unsigned long <a class=\"id\" href=\"#p2m_top_mfn\">p2m_top_mfn</a>[<a class=\"id\" href=\"#TOP_ENTRIES\">TOP_ENTRIES</a>] <a class=\"id\" href=\"#__page_aligned_bss\">__page_aligned_bss</a>;", 
"", 
"static unsigned long <a class=\"id\" href=\"#p2m_top_mfn_list\">p2m_top_mfn_list</a>[<a class=\"id\" href=\"#TOP_ENTRIES\">TOP_ENTRIES</a> / <a class=\"id\" href=\"#P2M_ENTRIES_PER_PAGE\">P2M_ENTRIES_PER_PAGE</a>]", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__page_aligned_bss\">__page_aligned_bss</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#p2m_top_index\">p2m_top_index</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pfn\">pfn</a> >= <a class=\"id\" href=\"#MAX_DOMAIN_PAGES\">MAX_DOMAIN_PAGES</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pfn\">pfn</a> / <a class=\"id\" href=\"#P2M_ENTRIES_PER_PAGE\">P2M_ENTRIES_PER_PAGE</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#p2m_index\">p2m_index</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pfn\">pfn</a> % <a class=\"id\" href=\"#P2M_ENTRIES_PER_PAGE\">P2M_ENTRIES_PER_PAGE</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Build the parallel p2m_top_mfn structures */</span>", 
"void <a class=\"id\" href=\"#xen_build_mfn_list_list\">xen_build_mfn_list_list</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = 0; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#MAX_DOMAIN_PAGES\">MAX_DOMAIN_PAGES</a>; <a class=\"id\" href=\"#pfn\">pfn</a> += <a class=\"id\" href=\"#P2M_ENTRIES_PER_PAGE\">P2M_ENTRIES_PER_PAGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#topidx\">topidx</a> = <a class=\"id\" href=\"#p2m_top_index\">p2m_top_index</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p2m_top_mfn\">p2m_top_mfn</a>[<a class=\"id\" href=\"#topidx\">topidx</a>] = <a class=\"id\" href=\"#virt_to_mfn\">virt_to_mfn</a>(<a class=\"id\" href=\"#p2m_top\">p2m_top</a>[<a class=\"id\" href=\"#topidx\">topidx</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = 0; <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#p2m_top_mfn_list\">p2m_top_mfn_list</a>); <a class=\"id\" href=\"#idx\">idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#topidx\">topidx</a> = <a class=\"id\" href=\"#idx\">idx</a> * <a class=\"id\" href=\"#P2M_ENTRIES_PER_PAGE\">P2M_ENTRIES_PER_PAGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p2m_top_mfn_list\">p2m_top_mfn_list</a>[<a class=\"id\" href=\"#idx\">idx</a>] = <a class=\"id\" href=\"#virt_to_mfn\">virt_to_mfn</a>(&amp;<a class=\"id\" href=\"#p2m_top_mfn\">p2m_top_mfn</a>[<a class=\"id\" href=\"#topidx\">topidx</a>]);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_setup_mfn_list_list\">xen_setup_mfn_list_list</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#HYPERVISOR_shared_info\">HYPERVISOR_shared_info</a> == &amp;<a class=\"id\" href=\"#xen_dummy_shared_info\">xen_dummy_shared_info</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HYPERVISOR_shared_info\">HYPERVISOR_shared_info</a>-><a class=\"id\" href=\"#arch\">arch</a>.<a class=\"id\" href=\"#pfn_to_mfn_frame_list_list\">pfn_to_mfn_frame_list_list</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#virt_to_mfn\">virt_to_mfn</a>(<a class=\"id\" href=\"#p2m_top_mfn_list\">p2m_top_mfn_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HYPERVISOR_shared_info\">HYPERVISOR_shared_info</a>-><a class=\"id\" href=\"#arch\">arch</a>.<a class=\"id\" href=\"#max_pfn\">max_pfn</a> = <a class=\"id\" href=\"#xen_start_info\">xen_start_info</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Set up p2m_top to point to the domain-builder provided p2m pages */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#xen_build_dynamic_phys_to_machine\">xen_build_dynamic_phys_to_machine</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#mfn_list\">mfn_list</a> = (unsigned long *)<a class=\"id\" href=\"#xen_start_info\">xen_start_info</a>-><a class=\"id\" href=\"#mfn_list\">mfn_list</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_pfn\">max_pfn</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#MAX_DOMAIN_PAGES\">MAX_DOMAIN_PAGES</a>, <a class=\"id\" href=\"#xen_start_info\">xen_start_info</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = 0; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#max_pfn\">max_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> += <a class=\"id\" href=\"#P2M_ENTRIES_PER_PAGE\">P2M_ENTRIES_PER_PAGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#topidx\">topidx</a> = <a class=\"id\" href=\"#p2m_top_index\">p2m_top_index</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p2m_top\">p2m_top</a>[<a class=\"id\" href=\"#topidx\">topidx</a>] = &amp;<a class=\"id\" href=\"#mfn_list\">mfn_list</a>[<a class=\"id\" href=\"#pfn\">pfn</a>];", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_build_mfn_list_list\">xen_build_mfn_list_list</a>();", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#get_phys_to_machine\">get_phys_to_machine</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#topidx\">topidx</a>, <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pfn\">pfn</a> >= <a class=\"id\" href=\"#MAX_DOMAIN_PAGES\">MAX_DOMAIN_PAGES</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#INVALID_P2M_ENTRY\">INVALID_P2M_ENTRY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#topidx\">topidx</a> = <a class=\"id\" href=\"#p2m_top_index\">p2m_top_index</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#p2m_index\">p2m_index</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p2m_top\">p2m_top</a>[<a class=\"id\" href=\"#topidx\">topidx</a>][<a class=\"id\" href=\"#idx\">idx</a>];", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#get_phys_to_machine\">get_phys_to_machine</a>);", 
"", 
"<span class=\"comment\">/* install a  new p2m_top page */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#install_p2mtop_page\">install_p2mtop_page</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#topidx\">topidx</a> = <a class=\"id\" href=\"#p2m_top_index\">p2m_top_index</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>unsigned long **<a class=\"id\" href=\"#pfnp\">pfnp</a>, *<a class=\"id\" href=\"#mfnp\">mfnp</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfnp\">pfnp</a> = &amp;<a class=\"id\" href=\"#p2m_top\">p2m_top</a>[<a class=\"id\" href=\"#topidx\">topidx</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mfnp\">mfnp</a> = &amp;<a class=\"id\" href=\"#p2m_top_mfn\">p2m_top_mfn</a>[<a class=\"id\" href=\"#topidx\">topidx</a>];", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#P2M_ENTRIES_PER_PAGE\">P2M_ENTRIES_PER_PAGE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#INVALID_P2M_ENTRY\">INVALID_P2M_ENTRY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(<a class=\"id\" href=\"#pfnp\">pfnp</a>, <a class=\"id\" href=\"#p2m_missing\">p2m_missing</a>, <a class=\"id\" href=\"#p\">p</a>) == <a class=\"id\" href=\"#p2m_missing\">p2m_missing</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#mfnp\">mfnp</a> = <a class=\"id\" href=\"#virt_to_mfn\">virt_to_mfn</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#alloc_p2m\">alloc_p2m</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = (void *)<a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_NOFAIL\">__GFP_NOFAIL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#install_p2mtop_page\">install_p2mtop_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Try to install p2m mapping; fail if intermediate bits missing */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__set_phys_to_machine\">__set_phys_to_machine</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#mfn\">mfn</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#topidx\">topidx</a>, <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pfn\">pfn</a> >= <a class=\"id\" href=\"#MAX_DOMAIN_PAGES\">MAX_DOMAIN_PAGES</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#mfn\">mfn</a> != <a class=\"id\" href=\"#INVALID_P2M_ENTRY\">INVALID_P2M_ENTRY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#topidx\">topidx</a> = <a class=\"id\" href=\"#p2m_top_index\">p2m_top_index</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p2m_top\">p2m_top</a>[<a class=\"id\" href=\"#topidx\">topidx</a>] == <a class=\"id\" href=\"#p2m_missing\">p2m_missing</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mfn\">mfn</a> == <a class=\"id\" href=\"#INVALID_P2M_ENTRY\">INVALID_P2M_ENTRY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#p2m_index\">p2m_index</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p2m_top\">p2m_top</a>[<a class=\"id\" href=\"#topidx\">topidx</a>][<a class=\"id\" href=\"#idx\">idx</a>] = <a class=\"id\" href=\"#mfn\">mfn</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#set_phys_to_machine\">set_phys_to_machine</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#mfn\">mfn</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#xen_feature\">xen_feature</a>(<a class=\"id\" href=\"#XENFEAT_auto_translated_physmap\">XENFEAT_auto_translated_physmap</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pfn\">pfn</a> != <a class=\"id\" href=\"#mfn\">mfn</a> && <a class=\"id\" href=\"#mfn\">mfn</a> != <a class=\"id\" href=\"#INVALID_P2M_ENTRY\">INVALID_P2M_ENTRY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#__set_phys_to_machine\">__set_phys_to_machine</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#mfn\">mfn</a>)))  {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_p2m\">alloc_p2m</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#__set_phys_to_machine\">__set_phys_to_machine</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#mfn\">mfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#arbitrary_virt_to_mfn\">arbitrary_virt_to_mfn</a>(void *<a class=\"id\" href=\"#vaddr\">vaddr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xmaddr_t\">xmaddr_t</a> <a class=\"id\" href=\"#maddr\">maddr</a> = <a class=\"id\" href=\"#arbitrary_virt_to_machine\">arbitrary_virt_to_machine</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#maddr\">maddr</a>.<a class=\"id\" href=\"#maddr\">maddr</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#xmaddr_t\">xmaddr_t</a> <a class=\"id\" href=\"#arbitrary_virt_to_machine\">arbitrary_virt_to_machine</a>(void *<a class=\"id\" href=\"#vaddr\">vaddr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a> = (unsigned long)<a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the PFN is in the linear mapped vaddr range, we can just use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the (quick) virt_to_machine() p2m lookup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#virt_addr_valid\">virt_addr_valid</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#virt_to_machine\">virt_to_machine</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* otherwise we have to do a (slower) full page-table walk */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#lookup_address\">lookup_address</a>(<a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#level\">level</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pte\">pte</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#address\">address</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#XMADDR\">XMADDR</a>(((<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a>)<a class=\"id\" href=\"#pte_mfn\">pte_mfn</a>(*<a class=\"id\" href=\"#pte\">pte</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) + <a class=\"id\" href=\"#offset\">offset</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#make_lowmem_page_readonly\">make_lowmem_page_readonly</a>(void *<a class=\"id\" href=\"#vaddr\">vaddr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#ptev\">ptev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a> = (unsigned long)<a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#level\">level</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#lookup_address\">lookup_address</a>(<a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#level\">level</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pte\">pte</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptev\">ptev</a> = <a class=\"id\" href=\"#pte_wrprotect\">pte_wrprotect</a>(*<a class=\"id\" href=\"#pte\">pte</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_update_va_mapping\">HYPERVISOR_update_va_mapping</a>(<a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptev\">ptev</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#make_lowmem_page_readwrite\">make_lowmem_page_readwrite</a>(void *<a class=\"id\" href=\"#vaddr\">vaddr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#ptev\">ptev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a> = (unsigned long)<a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#level\">level</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#lookup_address\">lookup_address</a>(<a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#level\">level</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pte\">pte</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptev\">ptev</a> = <a class=\"id\" href=\"#pte_mkwrite\">pte_mkwrite</a>(*<a class=\"id\" href=\"#pte\">pte</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_update_va_mapping\">HYPERVISOR_update_va_mapping</a>(<a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptev\">ptev</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#xen_page_pinned\">xen_page_pinned</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PagePinned\">PagePinned</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#xen_iomap_pte\">xen_iomap_pte</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pte_flags\">pte_flags</a>(<a class=\"id\" href=\"#pte\">pte</a>) &amp; <a class=\"id\" href=\"#_PAGE_IOMAP\">_PAGE_IOMAP</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_set_iomap_pte\">xen_set_iomap_pte</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pteval\">pteval</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#multicall_space\">multicall_space</a> <a class=\"id\" href=\"#mcs\">mcs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_update\">mmu_update</a> *<a class=\"id\" href=\"#u\">u</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mcs\">mcs</a> = <a class=\"id\" href=\"#xen_mc_entry\">xen_mc_entry</a>(sizeof(*<a class=\"id\" href=\"#u\">u</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ptep might be kmapped when using 32-bit HIGHPTE */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#arbitrary_virt_to_machine\">arbitrary_virt_to_machine</a>(<a class=\"id\" href=\"#ptep\">ptep</a>).<a class=\"id\" href=\"#maddr\">maddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#pte_val_ma\">pte_val_ma</a>(<a class=\"id\" href=\"#pteval\">pteval</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MULTI_mmu_update\">MULTI_mmu_update</a>(<a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#mc\">mc</a>, <a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#args\">args</a>, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#DOMID_IO\">DOMID_IO</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_issue\">xen_mc_issue</a>(<a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_extend_mmu_update\">xen_extend_mmu_update</a>(const struct <a class=\"id\" href=\"#mmu_update\">mmu_update</a> *<a class=\"id\" href=\"#update\">update</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#multicall_space\">multicall_space</a> <a class=\"id\" href=\"#mcs\">mcs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_update\">mmu_update</a> *<a class=\"id\" href=\"#u\">u</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mcs\">mcs</a> = <a class=\"id\" href=\"#xen_mc_extend_args\">xen_mc_extend_args</a>(<a class=\"id\" href=\"#__HYPERVISOR_mmu_update\">__HYPERVISOR_mmu_update</a>, sizeof(*<a class=\"id\" href=\"#u\">u</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#mc\">mc</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#mmu_update_extended\">mmu_update_extended</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#mmu_update_histo\">mmu_update_histo</a>[<a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#mc\">mc</a>-><a class=\"id\" href=\"#args\">args</a>[1]], -1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#mc\">mc</a>-><a class=\"id\" href=\"#args\">args</a>[1]++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#mc\">mc</a>-><a class=\"id\" href=\"#args\">args</a>[1] &lt; <a class=\"id\" href=\"#MMU_UPDATE_HISTO\">MMU_UPDATE_HISTO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#mmu_update_histo\">mmu_update_histo</a>[<a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#mc\">mc</a>-><a class=\"id\" href=\"#args\">args</a>[1]], 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#mmu_update_histo\">mmu_update_histo</a>[0], 1);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#mmu_update\">mmu_update</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mcs\">mcs</a> = <a class=\"id\" href=\"#__xen_mc_entry\">__xen_mc_entry</a>(sizeof(*<a class=\"id\" href=\"#u\">u</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MULTI_mmu_update\">MULTI_mmu_update</a>(<a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#mc\">mc</a>, <a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#args\">args</a>, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#DOMID_SELF\">DOMID_SELF</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#mmu_update_histo\">mmu_update_histo</a>[1], 1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#u\">u</a> = *<a class=\"id\" href=\"#update\">update</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_set_pmd_hyper\">xen_set_pmd_hyper</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_update\">mmu_update</a> <a class=\"id\" href=\"#u\">u</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_batch\">xen_mc_batch</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ptr may be ioremapped for 64-bit pagetable setup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#arbitrary_virt_to_machine\">arbitrary_virt_to_machine</a>(<a class=\"id\" href=\"#ptr\">ptr</a>).<a class=\"id\" href=\"#maddr\">maddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#pmd_val_ma\">pmd_val_ma</a>(<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_extend_mmu_update\">xen_extend_mmu_update</a>(&amp;<a class=\"id\" href=\"#u\">u</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#pmd_update_batched\">pmd_update_batched</a>, <a class=\"id\" href=\"#paravirt_get_lazy_mode\">paravirt_get_lazy_mode</a>() == <a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_issue\">xen_mc_issue</a>(<a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_set_pmd\">xen_set_pmd</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#pmd_update\">pmd_update</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If page is not pinned, we can just update the entry</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   directly */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#xen_page_pinned\">xen_page_pinned</a>(<a class=\"id\" href=\"#ptr\">ptr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#pmd_update_pinned\">pmd_update_pinned</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_set_pmd_hyper\">xen_set_pmd_hyper</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Associate a virtual page frame with a given physical page frame</span>", 
"<span class=\"comment\"> * and protection flags for that frame.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#set_pte_mfn\">set_pte_mfn</a>(unsigned long <a class=\"id\" href=\"#vaddr\">vaddr</a>, unsigned long <a class=\"id\" href=\"#mfn\">mfn</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_vaddr\">set_pte_vaddr</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#mfn_pte\">mfn_pte</a>(<a class=\"id\" href=\"#mfn\">mfn</a>, <a class=\"id\" href=\"#flags\">flags</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_set_pte_at\">xen_set_pte_at</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pteval\">pteval</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xen_iomap_pte\">xen_iomap_pte</a>(<a class=\"id\" href=\"#pteval\">pteval</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_set_iomap_pte\">xen_set_iomap_pte</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pteval\">pteval</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>, 1);", 
"<span class=\"comment\">//<span class=\"ts\"/>ADD_STATS(set_pte_at_pinned, xen_page_pinned(ptep));</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#set_pte_at_current\">set_pte_at_current</a>, <a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#set_pte_at_kernel\">set_pte_at_kernel</a>, <a class=\"id\" href=\"#mm\">mm</a> == &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a> || <a class=\"id\" href=\"#mm\">mm</a> == &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#paravirt_get_lazy_mode\">paravirt_get_lazy_mode</a>() == <a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#multicall_space\">multicall_space</a> <a class=\"id\" href=\"#mcs\">mcs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mcs\">mcs</a> = <a class=\"id\" href=\"#xen_mc_entry\">xen_mc_entry</a>(0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MULTI_update_va_mapping\">MULTI_update_va_mapping</a>(<a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#mc\">mc</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pteval\">pteval</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#set_pte_at_batched\">set_pte_at_batched</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_issue\">xen_mc_issue</a>(<a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_update_va_mapping\">HYPERVISOR_update_va_mapping</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pteval\">pteval</a>, 0) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_set_pte\">xen_set_pte</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pteval\">pteval</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:<span class=\"ts\"/>return;", 
"}", 
"", 
"<a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#xen_ptep_modify_prot_start\">xen_ptep_modify_prot_start</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Just return the pte as-is.  We preserve the bits on commit */</span>", 
"<span class=\"ts\"/>return *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_ptep_modify_prot_commit\">xen_ptep_modify_prot_commit</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_update\">mmu_update</a> <a class=\"id\" href=\"#u\">u</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_batch\">xen_mc_batch</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#arbitrary_virt_to_machine\">arbitrary_virt_to_machine</a>(<a class=\"id\" href=\"#ptep\">ptep</a>).<a class=\"id\" href=\"#maddr\">maddr</a> | <a class=\"id\" href=\"#MMU_PT_UPDATE_PRESERVE_AD\">MMU_PT_UPDATE_PRESERVE_AD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#pte_val_ma\">pte_val_ma</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_extend_mmu_update\">xen_extend_mmu_update</a>(&amp;<a class=\"id\" href=\"#u\">u</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#prot_commit\">prot_commit</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#prot_commit_batched\">prot_commit_batched</a>, <a class=\"id\" href=\"#paravirt_get_lazy_mode\">paravirt_get_lazy_mode</a>() == <a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_issue\">xen_mc_issue</a>(<a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Assume pteval_t is equivalent to all the other *val_t types. */</span>", 
"static <a class=\"id\" href=\"#pteval_t\">pteval_t</a> <a class=\"id\" href=\"#pte_mfn_to_pfn\">pte_mfn_to_pfn</a>(<a class=\"id\" href=\"#pteval_t\">pteval_t</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mfn\">mfn</a> = (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#PTE_PFN_MASK\">PTE_PFN_MASK</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pteval_t\">pteval_t</a> <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#PTE_FLAGS_MASK\">PTE_FLAGS_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = ((<a class=\"id\" href=\"#pteval_t\">pteval_t</a>)<a class=\"id\" href=\"#mfn_to_pfn\">mfn_to_pfn</a>(<a class=\"id\" href=\"#mfn\">mfn</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) | <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#pteval_t\">pteval_t</a> <a class=\"id\" href=\"#pte_pfn_to_mfn\">pte_pfn_to_mfn</a>(<a class=\"id\" href=\"#pteval_t\">pteval_t</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#PTE_PFN_MASK\">PTE_PFN_MASK</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pteval_t\">pteval_t</a> <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#PTE_FLAGS_MASK\">PTE_FLAGS_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = ((<a class=\"id\" href=\"#pteval_t\">pteval_t</a>)<a class=\"id\" href=\"#pfn_to_mfn\">pfn_to_mfn</a>(<a class=\"id\" href=\"#pfn\">pfn</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) | <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#pteval_t\">pteval_t</a> <a class=\"id\" href=\"#iomap_pte\">iomap_pte</a>(<a class=\"id\" href=\"#pteval_t\">pteval_t</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#PTE_PFN_MASK\">PTE_PFN_MASK</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pteval_t\">pteval_t</a> <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#PTE_FLAGS_MASK\">PTE_FLAGS_MASK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We assume the pte frame number is a MFN, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   just use it as-is. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = ((<a class=\"id\" href=\"#pteval_t\">pteval_t</a>)<a class=\"id\" href=\"#pfn\">pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) | <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#pteval_t\">pteval_t</a> <a class=\"id\" href=\"#xen_pte_val\">xen_pte_val</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xen_initial_domain\">xen_initial_domain</a>() && (<a class=\"id\" href=\"#pte\">pte</a>.<a class=\"id\" href=\"#pte\">pte</a> &amp; <a class=\"id\" href=\"#_PAGE_IOMAP\">_PAGE_IOMAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pte\">pte</a>.<a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pte_mfn_to_pfn\">pte_mfn_to_pfn</a>(<a class=\"id\" href=\"#pte\">pte</a>.<a class=\"id\" href=\"#pte\">pte</a>);", 
"}", 
"<a class=\"id\" href=\"#PV_CALLEE_SAVE_REGS_THUNK\">PV_CALLEE_SAVE_REGS_THUNK</a>(<a class=\"id\" href=\"#xen_pte_val\">xen_pte_val</a>);", 
"", 
"<a class=\"id\" href=\"#pgdval_t\">pgdval_t</a> <a class=\"id\" href=\"#xen_pgd_val\">xen_pgd_val</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> <a class=\"id\" href=\"#pgd\">pgd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pte_mfn_to_pfn\">pte_mfn_to_pfn</a>(<a class=\"id\" href=\"#pgd\">pgd</a>.<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"}", 
"<a class=\"id\" href=\"#PV_CALLEE_SAVE_REGS_THUNK\">PV_CALLEE_SAVE_REGS_THUNK</a>(<a class=\"id\" href=\"#xen_pgd_val\">xen_pgd_val</a>);", 
"", 
"<a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#xen_make_pte\">xen_make_pte</a>(<a class=\"id\" href=\"#pteval_t\">pteval_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#addr\">addr</a> = (<a class=\"id\" href=\"#pte\">pte</a> &amp; <a class=\"id\" href=\"#PTE_PFN_MASK\">PTE_PFN_MASK</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unprivileged domains are allowed to do IOMAPpings for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PCI passthrough, but not map ISA space.  The ISA</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mappings are just dummy local mappings to keep other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * parts of the kernel happy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pte\">pte</a> &amp; <a class=\"id\" href=\"#_PAGE_IOMAP\">_PAGE_IOMAP</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#xen_initial_domain\">xen_initial_domain</a>() || <a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#ISA_END_ADDRESS\">ISA_END_ADDRESS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#iomap_pte\">iomap_pte</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> &= ~<a class=\"id\" href=\"#_PAGE_IOMAP\">_PAGE_IOMAP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_pfn_to_mfn\">pte_pfn_to_mfn</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#native_make_pte\">native_make_pte</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"}", 
"<a class=\"id\" href=\"#PV_CALLEE_SAVE_REGS_THUNK\">PV_CALLEE_SAVE_REGS_THUNK</a>(<a class=\"id\" href=\"#xen_make_pte\">xen_make_pte</a>);", 
"", 
"<a class=\"id\" href=\"#pgd_t\">pgd_t</a> <a class=\"id\" href=\"#xen_make_pgd\">xen_make_pgd</a>(<a class=\"id\" href=\"#pgdval_t\">pgdval_t</a> <a class=\"id\" href=\"#pgd\">pgd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pte_pfn_to_mfn\">pte_pfn_to_mfn</a>(<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#native_make_pgd\">native_make_pgd</a>(<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"}", 
"<a class=\"id\" href=\"#PV_CALLEE_SAVE_REGS_THUNK\">PV_CALLEE_SAVE_REGS_THUNK</a>(<a class=\"id\" href=\"#xen_make_pgd\">xen_make_pgd</a>);", 
"", 
"<a class=\"id\" href=\"#pmdval_t\">pmdval_t</a> <a class=\"id\" href=\"#xen_pmd_val\">xen_pmd_val</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> <a class=\"id\" href=\"#pmd\">pmd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pte_mfn_to_pfn\">pte_mfn_to_pfn</a>(<a class=\"id\" href=\"#pmd\">pmd</a>.<a class=\"id\" href=\"#pmd\">pmd</a>);", 
"}", 
"<a class=\"id\" href=\"#PV_CALLEE_SAVE_REGS_THUNK\">PV_CALLEE_SAVE_REGS_THUNK</a>(<a class=\"id\" href=\"#xen_pmd_val\">xen_pmd_val</a>);", 
"", 
"void <a class=\"id\" href=\"#xen_set_pud_hyper\">xen_set_pud_hyper</a>(<a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#pud_t\">pud_t</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_update\">mmu_update</a> <a class=\"id\" href=\"#u\">u</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_batch\">xen_mc_batch</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ptr may be ioremapped for 64-bit pagetable setup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#arbitrary_virt_to_machine\">arbitrary_virt_to_machine</a>(<a class=\"id\" href=\"#ptr\">ptr</a>).<a class=\"id\" href=\"#maddr\">maddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#pud_val_ma\">pud_val_ma</a>(<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_extend_mmu_update\">xen_extend_mmu_update</a>(&amp;<a class=\"id\" href=\"#u\">u</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#pud_update_batched\">pud_update_batched</a>, <a class=\"id\" href=\"#paravirt_get_lazy_mode\">paravirt_get_lazy_mode</a>() == <a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_issue\">xen_mc_issue</a>(<a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_set_pud\">xen_set_pud</a>(<a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#pud_t\">pud_t</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#pud_update\">pud_update</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If page is not pinned, we can just update the entry</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   directly */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#xen_page_pinned\">xen_page_pinned</a>(<a class=\"id\" href=\"#ptr\">ptr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#pud_update_pinned\">pud_update_pinned</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_set_pud_hyper\">xen_set_pud_hyper</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_set_pte\">xen_set_pte</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xen_iomap_pte\">xen_iomap_pte</a>(<a class=\"id\" href=\"#pte\">pte</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_set_iomap_pte\">xen_set_iomap_pte</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#pte_update\">pte_update</a>, 1);", 
"<span class=\"comment\">//<span class=\"ts\"/>ADD_STATS(pte_update_pinned, xen_page_pinned(ptep));</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#pte_update_batched\">pte_update_batched</a>, <a class=\"id\" href=\"#paravirt_get_lazy_mode\">paravirt_get_lazy_mode</a>() == <a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_PAE\">CONFIG_X86_PAE</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a>-><a class=\"id\" href=\"#pte_high\">pte_high</a> = <a class=\"id\" href=\"#pte\">pte</a>.<a class=\"id\" href=\"#pte_high\">pte_high</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a>-><a class=\"id\" href=\"#pte_low\">pte_low</a> = <a class=\"id\" href=\"#pte\">pte</a>.<a class=\"id\" href=\"#pte_low\">pte_low</a>;", 
"#else", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#pte\">pte</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_PAE\">CONFIG_X86_PAE</a>", 
"void <a class=\"id\" href=\"#xen_set_pte_atomic\">xen_set_pte_atomic</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xen_iomap_pte\">xen_iomap_pte</a>(<a class=\"id\" href=\"#pte\">pte</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_set_iomap_pte\">xen_set_iomap_pte</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_64bit\">set_64bit</a>((<a class=\"id\" href=\"#u64\">u64</a> *)<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#native_pte_val\">native_pte_val</a>(<a class=\"id\" href=\"#pte\">pte</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_pte_clear\">xen_pte_clear</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a>-><a class=\"id\" href=\"#pte_low\">pte_low</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* make sure low gets written first */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a>-><a class=\"id\" href=\"#pte_high\">pte_high</a> = 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_pmd_clear\">xen_pmd_clear</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmdp\">pmdp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pmd\">set_pmd</a>(<a class=\"id\" href=\"#pmdp\">pmdp</a>, <a class=\"id\" href=\"#__pmd\">__pmd</a>(0));", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_X86_PAE */</span>", 
"", 
"<a class=\"id\" href=\"#pmd_t\">pmd_t</a> <a class=\"id\" href=\"#xen_make_pmd\">xen_make_pmd</a>(<a class=\"id\" href=\"#pmdval_t\">pmdval_t</a> <a class=\"id\" href=\"#pmd\">pmd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pte_pfn_to_mfn\">pte_pfn_to_mfn</a>(<a class=\"id\" href=\"#pmd\">pmd</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#native_make_pmd\">native_make_pmd</a>(<a class=\"id\" href=\"#pmd\">pmd</a>);", 
"}", 
"<a class=\"id\" href=\"#PV_CALLEE_SAVE_REGS_THUNK\">PV_CALLEE_SAVE_REGS_THUNK</a>(<a class=\"id\" href=\"#xen_make_pmd\">xen_make_pmd</a>);", 
"", 
"#if <a class=\"id\" href=\"#PAGETABLE_LEVELS\">PAGETABLE_LEVELS</a> == 4", 
"<a class=\"id\" href=\"#pudval_t\">pudval_t</a> <a class=\"id\" href=\"#xen_pud_val\">xen_pud_val</a>(<a class=\"id\" href=\"#pud_t\">pud_t</a> <a class=\"id\" href=\"#pud\">pud</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pte_mfn_to_pfn\">pte_mfn_to_pfn</a>(<a class=\"id\" href=\"#pud\">pud</a>.<a class=\"id\" href=\"#pud\">pud</a>);", 
"}", 
"<a class=\"id\" href=\"#PV_CALLEE_SAVE_REGS_THUNK\">PV_CALLEE_SAVE_REGS_THUNK</a>(<a class=\"id\" href=\"#xen_pud_val\">xen_pud_val</a>);", 
"", 
"<a class=\"id\" href=\"#pud_t\">pud_t</a> <a class=\"id\" href=\"#xen_make_pud\">xen_make_pud</a>(<a class=\"id\" href=\"#pudval_t\">pudval_t</a> <a class=\"id\" href=\"#pud\">pud</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pte_pfn_to_mfn\">pte_pfn_to_mfn</a>(<a class=\"id\" href=\"#pud\">pud</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#native_make_pud\">native_make_pud</a>(<a class=\"id\" href=\"#pud\">pud</a>);", 
"}", 
"<a class=\"id\" href=\"#PV_CALLEE_SAVE_REGS_THUNK\">PV_CALLEE_SAVE_REGS_THUNK</a>(<a class=\"id\" href=\"#xen_make_pud\">xen_make_pud</a>);", 
"", 
"<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#xen_get_user_pgd\">xen_get_user_pgd</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd_page\">pgd_page</a> = (<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *)(((unsigned long)<a class=\"id\" href=\"#pgd\">pgd</a>) &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#pgd\">pgd</a> - <a class=\"id\" href=\"#pgd_page\">pgd_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#user_ptr\">user_ptr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#pgd_index\">pgd_index</a>(<a class=\"id\" href=\"#USER_LIMIT\">USER_LIMIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#pgd_page\">pgd_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user_ptr\">user_ptr</a> = (<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *)<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#user_ptr\">user_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user_ptr\">user_ptr</a> += <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#user_ptr\">user_ptr</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__xen_set_pgd_hyper\">__xen_set_pgd_hyper</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_update\">mmu_update</a> <a class=\"id\" href=\"#u\">u</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#virt_to_machine\">virt_to_machine</a>(<a class=\"id\" href=\"#ptr\">ptr</a>).<a class=\"id\" href=\"#maddr\">maddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#pgd_val_ma\">pgd_val_ma</a>(<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_extend_mmu_update\">xen_extend_mmu_update</a>(&amp;<a class=\"id\" href=\"#u\">u</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Raw hypercall-based set_pgd, intended for in early boot before</span>", 
"<span class=\"comment\"> * there's a page structure.  This implies:</span>", 
"<span class=\"comment\"> *  1. The only existing pagetable is the kernel's</span>", 
"<span class=\"comment\"> *  2. It is always pinned</span>", 
"<span class=\"comment\"> *  3. It has no user pagetable attached to it</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#xen_set_pgd_hyper\">xen_set_pgd_hyper</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_batch\">xen_mc_batch</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__xen_set_pgd_hyper\">__xen_set_pgd_hyper</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_issue\">xen_mc_issue</a>(<a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_set_pgd\">xen_set_pgd</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#user_ptr\">user_ptr</a> = <a class=\"id\" href=\"#xen_get_user_pgd\">xen_get_user_pgd</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#pgd_update\">pgd_update</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If page is not pinned, we can just update the entry</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   directly */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#xen_page_pinned\">xen_page_pinned</a>(<a class=\"id\" href=\"#ptr\">ptr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#user_ptr\">user_ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#xen_page_pinned\">xen_page_pinned</a>(<a class=\"id\" href=\"#user_ptr\">user_ptr</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#user_ptr\">user_ptr</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#pgd_update_pinned\">pgd_update_pinned</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ADD_STATS\">ADD_STATS</a>(<a class=\"id\" href=\"#pgd_update_batched\">pgd_update_batched</a>, <a class=\"id\" href=\"#paravirt_get_lazy_mode\">paravirt_get_lazy_mode</a>() == <a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If it's pinned, then we can at least batch the kernel and</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   user updates together. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_batch\">xen_mc_batch</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__xen_set_pgd_hyper\">__xen_set_pgd_hyper</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#user_ptr\">user_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__xen_set_pgd_hyper\">__xen_set_pgd_hyper</a>(<a class=\"id\" href=\"#user_ptr\">user_ptr</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_issue\">xen_mc_issue</a>(<a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* PAGETABLE_LEVELS == 4 */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * (Yet another) pagetable walker.  This one is intended for pinning a</span>", 
"<span class=\"comment\"> * pagetable.  This means that it walks a pagetable and calls the</span>", 
"<span class=\"comment\"> * callback function on each page it finds making up the page table,</span>", 
"<span class=\"comment\"> * at every level.  It walks the entire pagetable, but it only bothers</span>", 
"<span class=\"comment\"> * pinning pte pages which are below limit.  In the normal case this</span>", 
"<span class=\"comment\"> * will be STACK_TOP_MAX, but at boot we need to pin up to</span>", 
"<span class=\"comment\"> * FIXADDR_TOP.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For 32-bit the important bit is that we don't pin beyond there,</span>", 
"<span class=\"comment\"> * because then we start getting into Xen's ptes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For 64-bit, we must skip the Xen hole in the middle of the address</span>", 
"<span class=\"comment\"> * space, just after the big x86-64 virtual hole.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__xen_pgd_walk\">__xen_pgd_walk</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#page\">page</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      enum <a class=\"id\" href=\"#pt_level\">pt_level</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flush\">flush</a> = 0;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#hole_low\">hole_low</a>, <a class=\"id\" href=\"#hole_high\">hole_high</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#pgdidx_limit\">pgdidx_limit</a>, <a class=\"id\" href=\"#pudidx_limit\">pudidx_limit</a>, <a class=\"id\" href=\"#pmdidx_limit\">pmdidx_limit</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#pgdidx\">pgdidx</a>, <a class=\"id\" href=\"#pudidx\">pudidx</a>, <a class=\"id\" href=\"#pmdidx\">pmdidx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The limit is the last byte to be touched */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#limit\">limit</a> >= <a class=\"id\" href=\"#FIXADDR_TOP\">FIXADDR_TOP</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xen_feature\">xen_feature</a>(<a class=\"id\" href=\"#XENFEAT_auto_translated_physmap\">XENFEAT_auto_translated_physmap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 64-bit has a great big hole in the middle of the address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * space, which contains the Xen mappings.  On 32-bit these</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will end up making a zero-sized hole and so is a no-op.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hole_low\">hole_low</a> = <a class=\"id\" href=\"#pgd_index\">pgd_index</a>(<a class=\"id\" href=\"#USER_LIMIT\">USER_LIMIT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hole_high\">hole_high</a> = <a class=\"id\" href=\"#pgd_index\">pgd_index</a>(<a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdidx_limit\">pgdidx_limit</a> = <a class=\"id\" href=\"#pgd_index\">pgd_index</a>(<a class=\"id\" href=\"#limit\">limit</a>);", 
"#if <a class=\"id\" href=\"#PTRS_PER_PUD\">PTRS_PER_PUD</a> &gt; 1", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pudidx_limit\">pudidx_limit</a> = <a class=\"id\" href=\"#pud_index\">pud_index</a>(<a class=\"id\" href=\"#limit\">limit</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pudidx_limit\">pudidx_limit</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#if <a class=\"id\" href=\"#PTRS_PER_PMD\">PTRS_PER_PMD</a> &gt; 1", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmdidx_limit\">pmdidx_limit</a> = <a class=\"id\" href=\"#pmd_index\">pmd_index</a>(<a class=\"id\" href=\"#limit\">limit</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmdidx_limit\">pmdidx_limit</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pgdidx\">pgdidx</a> = 0; <a class=\"id\" href=\"#pgdidx\">pgdidx</a> <= <a class=\"id\" href=\"#pgdidx_limit\">pgdidx_limit</a>; <a class=\"id\" href=\"#pgdidx\">pgdidx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgdidx\">pgdidx</a> >= <a class=\"id\" href=\"#hole_low\">hole_low</a> && <a class=\"id\" href=\"#pgdidx\">pgdidx</a> &lt; <a class=\"id\" href=\"#hole_high\">hole_high</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgd_val\">pgd_val</a>(<a class=\"id\" href=\"#pgd\">pgd</a>[<a class=\"id\" href=\"#pgdidx\">pgdidx</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(&amp;<a class=\"id\" href=\"#pgd\">pgd</a>[<a class=\"id\" href=\"#pgdidx\">pgdidx</a>], 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PTRS_PER_PUD\">PTRS_PER_PUD</a> &gt; 1) <span class=\"comment\">/* not folded */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush\">flush</a> |= (*<a class=\"id\" href=\"#func\">func</a>)(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#pud\">pud</a>), <a class=\"id\" href=\"#PT_PUD\">PT_PUD</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#pudidx\">pudidx</a> = 0; <a class=\"id\" href=\"#pudidx\">pudidx</a> &lt; <a class=\"id\" href=\"#PTRS_PER_PUD\">PTRS_PER_PUD</a>; <a class=\"id\" href=\"#pudidx\">pudidx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgdidx\">pgdidx</a> == <a class=\"id\" href=\"#pgdidx_limit\">pgdidx_limit</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pudidx\">pudidx</a> &gt; <a class=\"id\" href=\"#pudidx_limit\">pudidx_limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_none\">pud_none</a>(<a class=\"id\" href=\"#pud\">pud</a>[<a class=\"id\" href=\"#pudidx\">pudidx</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(&amp;<a class=\"id\" href=\"#pud\">pud</a>[<a class=\"id\" href=\"#pudidx\">pudidx</a>], 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PTRS_PER_PMD\">PTRS_PER_PMD</a> &gt; 1) <span class=\"comment\">/* not folded */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush\">flush</a> |= (*<a class=\"id\" href=\"#func\">func</a>)(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#pmd\">pmd</a>), <a class=\"id\" href=\"#PT_PMD\">PT_PMD</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#pmdidx\">pmdidx</a> = 0; <a class=\"id\" href=\"#pmdidx\">pmdidx</a> &lt; <a class=\"id\" href=\"#PTRS_PER_PMD\">PTRS_PER_PMD</a>; <a class=\"id\" href=\"#pmdidx\">pmdidx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgdidx\">pgdidx</a> == <a class=\"id\" href=\"#pgdidx_limit\">pgdidx_limit</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pudidx\">pudidx</a> == <a class=\"id\" href=\"#pudidx_limit\">pudidx_limit</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pmdidx\">pmdidx</a> &gt; <a class=\"id\" href=\"#pmdidx_limit\">pmdidx_limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_none\">pmd_none</a>(<a class=\"id\" href=\"#pmd\">pmd</a>[<a class=\"id\" href=\"#pmdidx\">pmdidx</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pmd_page\">pmd_page</a>(<a class=\"id\" href=\"#pmd\">pmd</a>[<a class=\"id\" href=\"#pmdidx\">pmdidx</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush\">flush</a> |= (*<a class=\"id\" href=\"#func\">func</a>)(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#PT_PTE\">PT_PTE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Do the top level last, so that the callbacks can use it as</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   a cue to do final things like tlb flushes. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush\">flush</a> |= (*<a class=\"id\" href=\"#func\">func</a>)(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#pgd\">pgd</a>), <a class=\"id\" href=\"#PT_PGD\">PT_PGD</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#flush\">flush</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#xen_pgd_walk\">xen_pgd_walk</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#page\">page</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    enum <a class=\"id\" href=\"#pt_level\">pt_level</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__xen_pgd_walk\">__xen_pgd_walk</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#limit\">limit</a>);", 
"}", 
"", 
"<span class=\"comment\">/* If we're using split pte locks, then take the page's lock and</span>", 
"<span class=\"comment\">   return a pointer to it.  Otherwise return NULL. */</span>", 
"static <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#xen_pte_lock\">xen_pte_lock</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"#if <a class=\"id\" href=\"#USE_SPLIT_PTLOCKS\">USE_SPLIT_PTLOCKS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptl\">ptl</a> = <a class=\"id\" href=\"#__pte_lockptr\">__pte_lockptr</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_nest_lock\">spin_lock_nest_lock</a>(<a class=\"id\" href=\"#ptl\">ptl</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ptl\">ptl</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_pte_unlock\">xen_pte_unlock</a>(void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_do_pin\">xen_do_pin</a>(unsigned <a class=\"id\" href=\"#level\">level</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmuext_op\">mmuext_op</a> *<a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#multicall_space\">multicall_space</a> <a class=\"id\" href=\"#mcs\">mcs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mcs\">mcs</a> = <a class=\"id\" href=\"#__xen_mc_entry\">__xen_mc_entry</a>(sizeof(*<a class=\"id\" href=\"#op\">op</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#arg1\">arg1</a>.<a class=\"id\" href=\"#mfn\">mfn</a> = <a class=\"id\" href=\"#pfn_to_mfn\">pfn_to_mfn</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MULTI_mmuext_op\">MULTI_mmuext_op</a>(<a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#mc\">mc</a>, <a class=\"id\" href=\"#op\">op</a>, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#DOMID_SELF\">DOMID_SELF</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#xen_pin_page\">xen_pin_page</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#pt_level\">pt_level</a> <a class=\"id\" href=\"#level\">level</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#pgfl\">pgfl</a> = <a class=\"id\" href=\"#TestSetPagePinned\">TestSetPagePinned</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flush\">flush</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgfl\">pgfl</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush\">flush</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* already pinned */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kmaps need flushing if we found an unpinned</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   highpage */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush\">flush</a> = 1;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#pt\">pt</a> = <a class=\"id\" href=\"#lowmem_page_address\">lowmem_page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#multicall_space\">multicall_space</a> <a class=\"id\" href=\"#mcs\">mcs</a> = <a class=\"id\" href=\"#__xen_mc_entry\">__xen_mc_entry</a>(0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush\">flush</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We need to hold the pagetable lock between the time</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we make the pagetable RO and when we actually pin</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it.  If we don't, then other users may come in and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * attempt to update the pagetable by writing it,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * which will fail because the memory is RO but not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pinned, so Xen won't do the trap'n'emulate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we're using split pte locks, we can't hold the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * entire pagetable's worth of locks during the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * traverse, because we may wrap the preempt count (8</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bits).  The solution is to mark RO and pin each PTE</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * page while holding the lock.  This means the number</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of locks we end up holding is never more than a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * batch size (~32 entries, at present).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we're not using split pte locks, we needn't pin</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the PTE pages independently, because we're</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * protected by the overall pagetable lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptl\">ptl</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#PT_PTE\">PT_PTE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptl\">ptl</a> = <a class=\"id\" href=\"#xen_pte_lock\">xen_pte_lock</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MULTI_update_va_mapping\">MULTI_update_va_mapping</a>(<a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#mc\">mc</a>, (unsigned long)<a class=\"id\" href=\"#pt\">pt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn_pte\">pfn_pte</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#PAGE_KERNEL_RO\">PAGE_KERNEL_RO</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#PT_PGD\">PT_PGD</a> ? <a class=\"id\" href=\"#UVMF_TLB_FLUSH\">UVMF_TLB_FLUSH</a> : 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptl\">ptl</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_do_pin\">xen_do_pin</a>(<a class=\"id\" href=\"#MMUEXT_PIN_L1_TABLE\">MMUEXT_PIN_L1_TABLE</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Queue a deferred unlock for when this batch</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   is completed. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_callback\">xen_mc_callback</a>(<a class=\"id\" href=\"#xen_pte_unlock\">xen_pte_unlock</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#flush\">flush</a>;", 
"}", 
"", 
"<span class=\"comment\">/* This is called just after a mm has been created, but it has not</span>", 
"<span class=\"comment\">   been used yet.  We need to make sure that its pagetable is all</span>", 
"<span class=\"comment\">   read-only, and can be pinned. */</span>", 
"static void <a class=\"id\" href=\"#__xen_pgd_pin\">__xen_pgd_pin</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_batch\">xen_mc_batch</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__xen_pgd_walk\">__xen_pgd_walk</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#xen_pin_page\">xen_pin_page</a>, <a class=\"id\" href=\"#USER_LIMIT\">USER_LIMIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* re-enable interrupts for flushing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_issue\">xen_mc_issue</a>(0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmap_flush_unused\">kmap_flush_unused</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_batch\">xen_mc_batch</a>();", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#user_pgd\">user_pgd</a> = <a class=\"id\" href=\"#xen_get_user_pgd\">xen_get_user_pgd</a>(<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_do_pin\">xen_do_pin</a>(<a class=\"id\" href=\"#MMUEXT_PIN_L4_TABLE\">MMUEXT_PIN_L4_TABLE</a>, <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#pgd\">pgd</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#user_pgd\">user_pgd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_pin_page\">xen_pin_page</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#user_pgd\">user_pgd</a>), <a class=\"id\" href=\"#PT_PGD\">PT_PGD</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_do_pin\">xen_do_pin</a>(<a class=\"id\" href=\"#MMUEXT_PIN_L4_TABLE\">MMUEXT_PIN_L4_TABLE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#user_pgd\">user_pgd</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#else <span class=\"comment\">/* CONFIG_X86_32 */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_PAE\">CONFIG_X86_PAE</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Need to make sure unshared kernel PMD is pinnable */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_pin_page\">xen_pin_page</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd_page\">pgd_page</a>(<a class=\"id\" href=\"#pgd\">pgd</a>[<a class=\"id\" href=\"#pgd_index\">pgd_index</a>(<a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>)]),", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#PT_PMD\">PT_PMD</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_do_pin\">xen_do_pin</a>(<a class=\"id\" href=\"#MMUEXT_PIN_L3_TABLE\">MMUEXT_PIN_L3_TABLE</a>, <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#pgd\">pgd</a>)));", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_issue\">xen_mc_issue</a>(0);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_pgd_pin\">xen_pgd_pin</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__xen_pgd_pin\">__xen_pgd_pin</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#pgd\">pgd</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * On save, we need to pin all pagetables to make sure they get their</span>", 
"<span class=\"comment\"> * mfns turned into pfns.  Search the list for any unpinned pgds and pin</span>", 
"<span class=\"comment\"> * them (unpinned pgds are not currently in use, probably because the</span>", 
"<span class=\"comment\"> * process is under construction or destruction).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Expected to be called in stop_machine() (\"equivalent to taking</span>", 
"<span class=\"comment\"> * every spinlock in the system\"), so the locking doesn't really</span>", 
"<span class=\"comment\"> * matter all that much.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#xen_mm_pin_all\">xen_mm_pin_all</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#pgd_list\">pgd_list</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PagePinned\">PagePinned</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__xen_pgd_pin\">__xen_pgd_pin</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, (<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageSavePinned\">SetPageSavePinned</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The init_mm pagetable is really pinned as soon as its created, but</span>", 
"<span class=\"comment\"> * that's before we have page structures to store the bits.  So do all</span>", 
"<span class=\"comment\"> * the book-keeping now.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#xen_mark_pinned\">xen_mark_pinned</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  enum <a class=\"id\" href=\"#pt_level\">pt_level</a> <a class=\"id\" href=\"#level\">level</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SetPagePinned\">SetPagePinned</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#xen_mark_init_mm_pinned\">xen_mark_init_mm_pinned</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_pgd_walk\">xen_pgd_walk</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#xen_mark_pinned\">xen_mark_pinned</a>, <a class=\"id\" href=\"#FIXADDR_TOP\">FIXADDR_TOP</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#xen_unpin_page\">xen_unpin_page</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  enum <a class=\"id\" href=\"#pt_level\">pt_level</a> <a class=\"id\" href=\"#level\">level</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#pgfl\">pgfl</a> = <a class=\"id\" href=\"#TestClearPagePinned\">TestClearPagePinned</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgfl\">pgfl</a> && !<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#pt\">pt</a> = <a class=\"id\" href=\"#lowmem_page_address\">lowmem_page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#multicall_space\">multicall_space</a> <a class=\"id\" href=\"#mcs\">mcs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do the converse to pin_page.  If we're using split</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pte locks, we must be holding the lock for while</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the pte page is unpinned but still RO to prevent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * concurrent updates from seeing it in this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * partially-pinned state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#PT_PTE\">PT_PTE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptl\">ptl</a> = <a class=\"id\" href=\"#xen_pte_lock\">xen_pte_lock</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptl\">ptl</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_do_pin\">xen_do_pin</a>(<a class=\"id\" href=\"#MMUEXT_UNPIN_TABLE\">MMUEXT_UNPIN_TABLE</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mcs\">mcs</a> = <a class=\"id\" href=\"#__xen_mc_entry\">__xen_mc_entry</a>(0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MULTI_update_va_mapping\">MULTI_update_va_mapping</a>(<a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#mc\">mc</a>, (unsigned long)<a class=\"id\" href=\"#pt\">pt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn_pte\">pfn_pte</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#PAGE_KERNEL\">PAGE_KERNEL</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#PT_PGD\">PT_PGD</a> ? <a class=\"id\" href=\"#UVMF_TLB_FLUSH\">UVMF_TLB_FLUSH</a> : 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptl\">ptl</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unlock when batch completed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_callback\">xen_mc_callback</a>(<a class=\"id\" href=\"#xen_pte_unlock\">xen_pte_unlock</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* never need to flush on unpin */</span>", 
"}", 
"", 
"<span class=\"comment\">/* Release a pagetables pages back as normal RW */</span>", 
"static void <a class=\"id\" href=\"#__xen_pgd_unpin\">__xen_pgd_unpin</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_batch\">xen_mc_batch</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_do_pin\">xen_do_pin</a>(<a class=\"id\" href=\"#MMUEXT_UNPIN_TABLE\">MMUEXT_UNPIN_TABLE</a>, <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#pgd\">pgd</a>)));", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#user_pgd\">user_pgd</a> = <a class=\"id\" href=\"#xen_get_user_pgd\">xen_get_user_pgd</a>(<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#user_pgd\">user_pgd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_do_pin\">xen_do_pin</a>(<a class=\"id\" href=\"#MMUEXT_UNPIN_TABLE\">MMUEXT_UNPIN_TABLE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#user_pgd\">user_pgd</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_unpin_page\">xen_unpin_page</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#user_pgd\">user_pgd</a>), <a class=\"id\" href=\"#PT_PGD\">PT_PGD</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_PAE\">CONFIG_X86_PAE</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Need to make sure unshared kernel PMD is unpinned */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_unpin_page\">xen_unpin_page</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd_page\">pgd_page</a>(<a class=\"id\" href=\"#pgd\">pgd</a>[<a class=\"id\" href=\"#pgd_index\">pgd_index</a>(<a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>)]),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#PT_PMD\">PT_PMD</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__xen_pgd_walk\">__xen_pgd_walk</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#xen_unpin_page\">xen_unpin_page</a>, <a class=\"id\" href=\"#USER_LIMIT\">USER_LIMIT</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_issue\">xen_mc_issue</a>(0);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_pgd_unpin\">xen_pgd_unpin</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__xen_pgd_unpin\">__xen_pgd_unpin</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#pgd\">pgd</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * On resume, undo any pinning done at save, so that the rest of the</span>", 
"<span class=\"comment\"> * kernel doesn't see any unexpected pinned pagetables.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#xen_mm_unpin_all\">xen_mm_unpin_all</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#pgd_list\">pgd_list</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSavePinned\">PageSavePinned</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PagePinned\">PagePinned</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__xen_pgd_unpin\">__xen_pgd_unpin</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, (<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageSavePinned\">ClearPageSavePinned</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_activate_mm\">xen_activate_mm</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_pgd_pin\">xen_pgd_pin</a>(<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_dup_mmap\">xen_dup_mmap</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#oldmm\">oldmm</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_pgd_pin\">xen_pgd_pin</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"}", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/* Another cpu may still have their %cr3 pointing at the pagetable, so</span>", 
"<span class=\"comment\">   we need to repoint it somewhere else before we can unpin it. */</span>", 
"static void <a class=\"id\" href=\"#drop_other_mm_ref\">drop_other_mm_ref</a>(void *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#active_mm\">active_mm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#active_mm\">active_mm</a> = <a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#cpu_tlbstate\">cpu_tlbstate</a>.<a class=\"id\" href=\"#active_mm\">active_mm</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#active_mm\">active_mm</a> == <a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leave_mm\">leave_mm</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If this cpu still has a stale cr3 reference, then make sure</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   it has been flushed. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#xen_current_cr3\">xen_current_cr3</a>) == <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_cr3\">load_cr3</a>(<a class=\"id\" href=\"#swapper_pg_dir\">swapper_pg_dir</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_drop_mm_ref\">xen_drop_mm_ref</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a> == <a class=\"id\" href=\"#mm\">mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_cr3\">load_cr3</a>(<a class=\"id\" href=\"#swapper_pg_dir\">swapper_pg_dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leave_mm\">leave_mm</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the \"official\" set of cpus referring to our pagetable. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mm_cpumask\">mm_cpumask</a>(<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#xen_current_cr3\">xen_current_cr3</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) != <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#drop_other_mm_ref\">drop_other_mm_ref</a>, <a class=\"id\" href=\"#mm\">mm</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#mm_cpumask\">mm_cpumask</a>(<a class=\"id\" href=\"#mm\">mm</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* It's possible that a vcpu may have a stale reference to our</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   cr3, because its in lazy mode, and it hasn't yet flushed</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   its set of pending hypercalls yet.  In this case, we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   look at its actual current cr3 value, and force it to flush</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   if needed. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#xen_current_cr3\">xen_current_cr3</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) == <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#mask\">mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_many\">smp_call_function_many</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#drop_other_mm_ref\">drop_other_mm_ref</a>, <a class=\"id\" href=\"#mm\">mm</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"#else", 
"static void <a class=\"id\" href=\"#xen_drop_mm_ref\">xen_drop_mm_ref</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a> == <a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_cr3\">load_cr3</a>(<a class=\"id\" href=\"#swapper_pg_dir\">swapper_pg_dir</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * While a process runs, Xen pins its pagetables, which means that the</span>", 
"<span class=\"comment\"> * hypervisor forces it to be read-only, and it controls all updates</span>", 
"<span class=\"comment\"> * to it.  This means that all pagetable updates have to go via the</span>", 
"<span class=\"comment\"> * hypervisor, which is moderately expensive.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Since we're pulling the pagetable down, we switch to use init_mm,</span>", 
"<span class=\"comment\"> * unpin old process pagetable and mark it all read-write, which</span>", 
"<span class=\"comment\"> * allows further operations on it to be simple memory accesses.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The only subtle point is that another CPU may be still using the</span>", 
"<span class=\"comment\"> * pagetable because of lazy tlb flushing.  This means we need need to</span>", 
"<span class=\"comment\"> * switch all CPUs off this pagetable before we can unpin it.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#xen_exit_mmap\">xen_exit_mmap</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_cpu\">get_cpu</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* make sure we don't move around */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_drop_mm_ref\">xen_drop_mm_ref</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* pgd may not be pinned in the error exit path of execve */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xen_page_pinned\">xen_page_pinned</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_pgd_unpin\">xen_pgd_unpin</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#xen_pagetable_setup_start\">xen_pagetable_setup_start</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_post_allocator_init\">xen_post_allocator_init</a>(void);", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#xen_pagetable_setup_done\">xen_pagetable_setup_done</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_setup_shared_info\">xen_setup_shared_info</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_post_allocator_init\">xen_post_allocator_init</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_write_cr2\">xen_write_cr2</a>(unsigned long <a class=\"id\" href=\"#cr2\">cr2</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#xen_vcpu\">xen_vcpu</a>)-><a class=\"id\" href=\"#arch\">arch</a>.<a class=\"id\" href=\"#cr2\">cr2</a> = <a class=\"id\" href=\"#cr2\">cr2</a>;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#xen_read_cr2\">xen_read_cr2</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#xen_vcpu\">xen_vcpu</a>)-><a class=\"id\" href=\"#arch\">arch</a>.<a class=\"id\" href=\"#cr2\">cr2</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#xen_read_cr2_direct\">xen_read_cr2_direct</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#xen_vcpu_info\">xen_vcpu_info</a>.<a class=\"id\" href=\"#arch\">arch</a>.<a class=\"id\" href=\"#cr2\">cr2</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_flush_tlb\">xen_flush_tlb</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmuext_op\">mmuext_op</a> *<a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#multicall_space\">multicall_space</a> <a class=\"id\" href=\"#mcs\">mcs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mcs\">mcs</a> = <a class=\"id\" href=\"#xen_mc_entry\">xen_mc_entry</a>(sizeof(*<a class=\"id\" href=\"#op\">op</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#MMUEXT_TLB_FLUSH_LOCAL\">MMUEXT_TLB_FLUSH_LOCAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MULTI_mmuext_op\">MULTI_mmuext_op</a>(<a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#mc\">mc</a>, <a class=\"id\" href=\"#op\">op</a>, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#DOMID_SELF\">DOMID_SELF</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_issue\">xen_mc_issue</a>(<a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_flush_tlb_single\">xen_flush_tlb_single</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmuext_op\">mmuext_op</a> *<a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#multicall_space\">multicall_space</a> <a class=\"id\" href=\"#mcs\">mcs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mcs\">mcs</a> = <a class=\"id\" href=\"#xen_mc_entry\">xen_mc_entry</a>(sizeof(*<a class=\"id\" href=\"#op\">op</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#MMUEXT_INVLPG_LOCAL\">MMUEXT_INVLPG_LOCAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#arg1\">arg1</a>.<a class=\"id\" href=\"#linear_addr\">linear_addr</a> = <a class=\"id\" href=\"#addr\">addr</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MULTI_mmuext_op\">MULTI_mmuext_op</a>(<a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#mc\">mc</a>, <a class=\"id\" href=\"#op\">op</a>, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#DOMID_SELF\">DOMID_SELF</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_issue\">xen_mc_issue</a>(<a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_flush_tlb_others\">xen_flush_tlb_others</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpus\">cpus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#va\">va</a>)", 
"{", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mmuext_op\">mmuext_op</a> <a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>);", 
"<span class=\"ts\"/>} *<a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#multicall_space\">multicall_space</a> <a class=\"id\" href=\"#mcs\">mcs</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#cpus\">cpus</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nothing to do */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mcs\">mcs</a> = <a class=\"id\" href=\"#xen_mc_entry\">xen_mc_entry</a>(sizeof(*<a class=\"id\" href=\"#args\">args</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a> = <a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#arg2\">arg2</a>.<a class=\"id\" href=\"#vcpumask\">vcpumask</a> = <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove us, and any offline CPUS. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#mask\">mask</a>), <a class=\"id\" href=\"#cpus\">cpus</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#mask\">mask</a>));", 
];
xr_frag_insert('l/86/483ef2e26a47f63feabc3fa0216e1126546cc0.xr', __xr_tmp);
