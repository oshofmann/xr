var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/include/linux/nmi.h</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#LINUX_NMI_H\">LINUX_NMI_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LINUX_NMI_H\">LINUX_NMI_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#irq\">irq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * touch_nmi_watchdog - restart NMI watchdog timeout.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * If the architecture supports the NMI watchdog, touch_nmi_watchdog()</span>", 
"<span class=\"comment\"> * may be used to reset the timeout - for code which intentionally</span>", 
"<span class=\"comment\"> * disables interrupts for a long time. This call is stateless.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ARCH_HAS_NMI_WATCHDOG\">ARCH_HAS_NMI_WATCHDOG</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#nmi\">nmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"extern void <a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>(void);", 
"extern void <a class=\"id\" href=\"#acpi_nmi_disable\">acpi_nmi_disable</a>(void);", 
"extern void <a class=\"id\" href=\"#acpi_nmi_enable\">acpi_nmi_enable</a>(void);", 
"#else", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_HARDLOCKUP_DETECTOR\">CONFIG_HARDLOCKUP_DETECTOR</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#touch_softlockup_watchdog\">touch_softlockup_watchdog</a>();", 
"}", 
"#else", 
"extern void <a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>(void);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#acpi_nmi_disable\">acpi_nmi_disable</a>(void) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#acpi_nmi_enable\">acpi_nmi_enable</a>(void) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Create trigger_all_cpu_backtrace() out of the arch-provided</span>", 
"<span class=\"comment\"> * base function. Return whether such support was available,</span>", 
"<span class=\"comment\"> * to allow calling code to fall back to some other mechanism:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#arch_trigger_all_cpu_backtrace\">arch_trigger_all_cpu_backtrace</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#trigger_all_cpu_backtrace\">trigger_all_cpu_backtrace</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_trigger_all_cpu_backtrace\">arch_trigger_all_cpu_backtrace</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#trigger_all_cpu_backtrace\">trigger_all_cpu_backtrace</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKUP_DETECTOR\">CONFIG_LOCKUP_DETECTOR</a>", 
"int <a class=\"id\" href=\"#hw_nmi_is_cpu_stuck\">hw_nmi_is_cpu_stuck</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *);", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#hw_nmi_get_sample_period\">hw_nmi_get_sample_period</a>(void);", 
"extern int <a class=\"id\" href=\"#watchdog_enabled\">watchdog_enabled</a>;", 
"struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a>;", 
"extern int <a class=\"id\" href=\"#proc_dowatchdog_enabled\">proc_dowatchdog_enabled</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *, int ,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#size_t\">size_t</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/86/93730ee9d6e88f4058cf9c9c5becc42ebd5a1c.xr', __xr_tmp);
