var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  include/linux/eventpoll.h ( Efficent event polling implementation )</span>", 
"<span class=\"comment\"> *  Copyright (C) 2001,...,2006<span class=\"ts\"/> Davide Libenzi</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> *  (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Davide Libenzi &lt;davidel@xmailserver.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_EVENTPOLL_H\">_LINUX_EVENTPOLL_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_EVENTPOLL_H\">_LINUX_EVENTPOLL_H</a>", 
"", 
"<span class=\"comment\">/* For O_CLOEXEC */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fcntl\">fcntl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Flags for epoll_create1.  */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EPOLL_CLOEXEC\">EPOLL_CLOEXEC</a> <a class=\"id\" href=\"#O_CLOEXEC\">O_CLOEXEC</a>", 
"", 
"<span class=\"comment\">/* Valid opcodes to issue to sys_epoll_ctl() */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EPOLL_CTL_ADD\">EPOLL_CTL_ADD</a> 1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EPOLL_CTL_DEL\">EPOLL_CTL_DEL</a> 2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EPOLL_CTL_MOD\">EPOLL_CTL_MOD</a> 3", 
"", 
"<span class=\"comment\">/* Set the One Shot behaviour for the target file descriptor */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EPOLLONESHOT\">EPOLLONESHOT</a> (1 << 30)", 
"", 
"<span class=\"comment\">/* Set the Edge Triggered behaviour for the target file descriptor */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EPOLLET\">EPOLLET</a> (1 << 31)", 
"", 
"<span class=\"comment\">/* </span>", 
"<span class=\"comment\"> * On x86-64 make the 64bit structure have the same alignment as the</span>", 
"<span class=\"comment\"> * 32bit structure. This makes 32bit emulation easier.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * UML/x86_64 needs the same packing as x86_64</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__x86_64__\">__x86_64__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EPOLL_PACKED\">EPOLL_PACKED</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#packed\">packed</a>))", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EPOLL_PACKED\">EPOLL_PACKED</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#epoll_event\">epoll_event</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#events\">events</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a> <a class=\"id\" href=\"#data\">data</a>;", 
"} <a class=\"id\" href=\"#EPOLL_PACKED\">EPOLL_PACKED</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"<span class=\"comment\">/* Forward declarations to avoid compiler errors */</span>", 
"struct <a class=\"id\" href=\"#file\">file</a>;", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_EPOLL\">CONFIG_EPOLL</a>", 
"", 
"<span class=\"comment\">/* Used to initialize the epoll bits inside the \"struct file\" */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#eventpoll_init_file\">eventpoll_init_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_ep_links\">f_ep_links</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Used to release the epoll bits inside the \"struct file\" */</span>", 
"void <a class=\"id\" href=\"#eventpoll_release_file\">eventpoll_release_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is called from inside fs/file_table.c:__fput() to unlink files</span>", 
"<span class=\"comment\"> * from the eventpoll interface. We need to have this facility to cleanup</span>", 
"<span class=\"comment\"> * correctly files that are closed without being removed from the eventpoll</span>", 
"<span class=\"comment\"> * interface.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#eventpoll_release\">eventpoll_release</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fast check to avoid the get/release of the semaphore. Since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we're doing this outside the semaphore lock, it might return</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * false negatives, but we don't care. It'll help in 99.99% of cases</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to avoid the semaphore lock. False positives simply cannot happen</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because the file in on the way to be removed and nobody ( but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * eventpoll ) has still a reference to this file.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_ep_links\">f_ep_links</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The file is being closed while it is still linked to an epoll</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * descriptor. We need to handle this by correctly unlinking it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from its containers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eventpoll_release_file\">eventpoll_release_file</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"}", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#eventpoll_init_file\">eventpoll_init_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#eventpoll_release\">eventpoll_release</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>) {}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifndef _LINUX_EVENTPOLL_H */</span>", 
"", 
];
xr_frag_insert('l/87/9827f4b30f065521687ed8efc674a0307ff3cd.xr', __xr_tmp);
