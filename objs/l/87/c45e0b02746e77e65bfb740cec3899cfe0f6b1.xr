var __xr_tmp = [
"<span class=\"comment\"> * Copyright (C) 1992, 1993, 1994, 1995</span>", 
"<span class=\"comment\"> * Remy Card (card@masi.ibp.fr)</span>", 
"<span class=\"comment\"> * Laboratoire MASI - Institut Blaise Pascal</span>", 
"<span class=\"comment\"> * Universite Pierre et Marie Curie (Paris VI)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  linux/include/linux/minix_fs_i.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_EXT3_FS_I\">_LINUX_EXT3_FS_I</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_EXT3_FS_I\">_LINUX_EXT3_FS_I</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rwsem\">rwsem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rbtree\">rbtree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seqlock\">seqlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* data type for block offset of block group */</span>", 
"typedef int <a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a>;", 
"", 
"<span class=\"comment\">/* data type for filesystem-wide blocks number */</span>", 
"typedef unsigned long <a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#E3FSBLK\">E3FSBLK</a> \"%lu\"", 
"", 
"struct <a class=\"id\" href=\"#ext3_reserve_window\">ext3_reserve_window</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a><span class=\"ts\"/><a class=\"id\" href=\"#_rsv_start\">_rsv_start</a>;<span class=\"ts\"/><span class=\"comment\">/* First byte reserved */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a><span class=\"ts\"/><a class=\"id\" href=\"#_rsv_end\">_rsv_end</a>;<span class=\"ts\"/><span class=\"comment\">/* Last byte reserved or 0 */</span>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv_node\">rsv_node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv_alloc_hit\">rsv_alloc_hit</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_reserve_window\">ext3_reserve_window</a><span class=\"ts\"/><a class=\"id\" href=\"#rsv_window\">rsv_window</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ext3_block_alloc_info\">ext3_block_alloc_info</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* information about reservation window */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a><span class=\"ts\"/><a class=\"id\" href=\"#rsv_window_node\">rsv_window_node</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * was i_next_alloc_block in ext3_inode_info</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is the logical (file-relative) number of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * most-recently-allocated block in this file.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use this for detecting linearly ascending allocation requests.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a>                   <a class=\"id\" href=\"#last_alloc_logical_block\">last_alloc_logical_block</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Was i_next_alloc_goal in ext3_inode_info</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is the *physical* companion to i_next_alloc_block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it the physical block number of the block which was most-recentl</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocated to this file.  This give us the goal (target) for the next</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocation when we detect linearly ascending requests.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_alloc_physical_block\">last_alloc_physical_block</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rsv_start\">rsv_start</a> <a class=\"id\" href=\"#rsv_window\">rsv_window</a>.<a class=\"id\" href=\"#_rsv_start\">_rsv_start</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rsv_end\">rsv_end</a> <a class=\"id\" href=\"#rsv_window\">rsv_window</a>.<a class=\"id\" href=\"#_rsv_end\">_rsv_end</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * third extended file system inode data in memory</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ext3_inode_info\">ext3_inode_info</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a><span class=\"ts\"/><a class=\"id\" href=\"#i_data\">i_data</a>[15];<span class=\"ts\"/><span class=\"comment\">/* unconverted */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#i_flags\">i_flags</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#EXT3_FRAGMENTS\">EXT3_FRAGMENTS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#i_faddr\">i_faddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a><span class=\"ts\"/><a class=\"id\" href=\"#i_frag_no\">i_frag_no</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a><span class=\"ts\"/><a class=\"id\" href=\"#i_frag_size\">i_frag_size</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a><span class=\"ts\"/><a class=\"id\" href=\"#i_file_acl\">i_file_acl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#i_dir_acl\">i_dir_acl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#i_dtime\">i_dtime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * i_block_group is the number of the block group which contains</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this file's inode.  Constant across the lifetime of the inode,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it is ued for making block allocation decisions - we try to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * place a file's data blocks near its inode block, and new inodes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * near to their parent directory's inode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#i_block_group\">i_block_group</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#i_state_flags\">i_state_flags</a>;<span class=\"ts\"/><span class=\"comment\">/* Dynamic state flags for ext3 */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* block reservation info */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_block_alloc_info\">ext3_block_alloc_info</a> *<a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#i_dir_start_lookup\">i_dir_start_lookup</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_EXT3_FS_XATTR\">CONFIG_EXT3_FS_XATTR</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Extended attributes can be read independently of the main file</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * data. Taking i_mutex even when reading would cause contention</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * between readers of EAs and writers of regular file data, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * instead we synchronize on xattr_sem when reading or changing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * EAs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> <a class=\"id\" href=\"#xattr_sem\">xattr_sem</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#i_orphan\">i_orphan</a>;<span class=\"ts\"/><span class=\"comment\">/* unlinked but open inodes */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * i_disksize keeps track of what the inode size is ON DISK, not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in memory.  During truncate, i_size is set to the new size by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the VFS prior to calling ext3_truncate(), but the filesystem won't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set i_disksize to 0 until the truncate is actually under way.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The intent is that i_disksize always represents the blocks which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are used by this file.  This allows recovery to restart truncate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on orphans if we crash during truncate.  We actually write i_disksize</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * into the on-disk inode when writing inodes out, instead of i_size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The only time when i_disksize and i_size may be different is when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a truncate is in progress.  The only things which change i_disksize</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are ext3_get_block (growth) and ext3_truncate (shrinkth).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a><span class=\"ts\"/><a class=\"id\" href=\"#i_disksize\">i_disksize</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* on-disk additional length */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * truncate_mutex is for serialising ext3_truncate() against</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ext3_getblock().  In the 2.4 ext2 design, great chunks of inode's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * data tree are chopped off during truncate. We can't do that in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ext3 because whenever we perform intermediate commits during</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * truncate, the inode and all the metadata blocks *must* be in a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * consistent state which allows truncation of the orphans to restart</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * during recovery.  Hence we must fix the get_block-vs-truncate race</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by other means, so we have truncate_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#truncate_mutex\">truncate_mutex</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Transactions that contain inode's metadata needed to complete</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fsync and fdatasync, respectively.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#i_sync_tid\">i_sync_tid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#i_datasync_tid\">i_datasync_tid</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> <a class=\"id\" href=\"#vfs_inode\">vfs_inode</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _LINUX_EXT3_FS_I */</span>", 
];
xr_frag_insert('l/87/c45e0b02746e77e65bfb740cec3899cfe0f6b1.xr', __xr_tmp);
