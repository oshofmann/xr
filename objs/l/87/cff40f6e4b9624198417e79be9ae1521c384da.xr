var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Descending-priority-sorted double-linked list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) 2002-2003 Intel Corp</span>", 
"<span class=\"comment\"> * Inaky Perez-Gonzalez &lt;inaky.perez-gonzalez@intel.com&gt;.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 2001-2005 (c) MontaVista Software, Inc.</span>", 
"<span class=\"comment\"> * Daniel Walker &lt;dwalker@mvista.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) 2005 Thomas Gleixner &lt;tglx@linutronix.de&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Simplifications of the original code by</span>", 
"<span class=\"comment\"> * Oleg Nesterov &lt;oleg@tv-sign.ru&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Licensed under the FSF's GNU Public License v2 or later.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on simple lists (include/linux/list.h).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a priority-sorted list of nodes; each node has a</span>", 
"<span class=\"comment\"> * priority from INT_MIN (highest) to INT_MAX (lowest).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Addition is O(K), removal is O(1), change of priority of a node is</span>", 
"<span class=\"comment\"> * O(K) and K is the number of RT priority levels used in the system.</span>", 
"<span class=\"comment\"> * (1 &lt;= K &lt;= 99)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This list is really a list of lists:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - The tier 1 list is the prio_list, different priority nodes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - The tier 2 list is the node_list, serialized nodes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Simple ASCII art explanation:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * |HEAD          |</span>", 
"<span class=\"comment\"> * |              |</span>", 
"<span class=\"comment\"> * |prio_list.prev|&lt;------------------------------------|</span>", 
"<span class=\"comment\"> * |prio_list.next|&lt;-&gt;|pl|&lt;-&gt;|pl|&lt;---------------&gt;|pl|&lt;-|</span>", 
"<span class=\"comment\"> * |10            |   |10|   |21|   |21|   |21|   |40|   (prio)</span>", 
"<span class=\"comment\"> * |              |   |  |   |  |   |  |   |  |   |  |</span>", 
"<span class=\"comment\"> * |              |   |  |   |  |   |  |   |  |   |  |</span>", 
"<span class=\"comment\"> * |node_list.next|&lt;-&gt;|nl|&lt;-&gt;|nl|&lt;-&gt;|nl|&lt;-&gt;|nl|&lt;-&gt;|nl|&lt;-|</span>", 
"<span class=\"comment\"> * |node_list.prev|&lt;------------------------------------|</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The nodes on the prio_list list are sorted by priority to simplify</span>", 
"<span class=\"comment\"> * the insertion of new nodes. There are no nodes with duplicate</span>", 
"<span class=\"comment\"> * priorites on the list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The nodes on the node_list are ordered by priority and can contain</span>", 
"<span class=\"comment\"> * entries which have the same priority. Those entries are ordered</span>", 
"<span class=\"comment\"> * FIFO</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Addition means: look for the prio_list node in the prio_list</span>", 
"<span class=\"comment\"> * for the priority of the node and insert it before the node_list</span>", 
"<span class=\"comment\"> * entry of the next prio_list node. If it is the first node of</span>", 
"<span class=\"comment\"> * that priority, add it to the prio_list in the right position and</span>", 
"<span class=\"comment\"> * insert it into the serialized node_list list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Removal means remove it from the node_list and remove it from</span>", 
"<span class=\"comment\"> * the prio_list if the node_list list_head is non empty. In case</span>", 
"<span class=\"comment\"> * of removal from the prio_list it must be checked whether other</span>", 
"<span class=\"comment\"> * entries of the same priority are on the list or not. If there</span>", 
"<span class=\"comment\"> * is another entry of the same priority then this entry has to</span>", 
"<span class=\"comment\"> * replace the removed entry on the prio_list. If the entry which</span>", 
"<span class=\"comment\"> * is removed is the only entry of this priority then a simple</span>", 
"<span class=\"comment\"> * remove from both list is sufficient.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * INT_MIN is the highest priority, 0 is the medium highest, INT_MAX</span>", 
"<span class=\"comment\"> * is lowest priority.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * No locking is done, up to the caller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_PLIST_H_\">_LINUX_PLIST_H_</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_PLIST_H_\">_LINUX_PLIST_H_</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock_types\">spinlock_types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#plist_head\">plist_head</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#prio_list\">prio_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#node_list\">node_list</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PI_LIST\">CONFIG_DEBUG_PI_LIST</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> *<a class=\"id\" href=\"#rawlock\">rawlock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#spinlock\">spinlock</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#plist_node\">plist_node</a> {", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prio\">prio</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#plist_head\">plist_head</a><span class=\"ts\"/><a class=\"id\" href=\"#plist\">plist</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PI_LIST\">CONFIG_DEBUG_PI_LIST</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PLIST_HEAD_LOCK_INIT\">PLIST_HEAD_LOCK_INIT</a>(<a class=\"id\" href=\"#_lock\">_lock</a>)<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#spinlock\">spinlock</a> = <a class=\"id\" href=\"#_lock\">_lock</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PLIST_HEAD_LOCK_INIT_RAW\">PLIST_HEAD_LOCK_INIT_RAW</a>(<a class=\"id\" href=\"#_lock\">_lock</a>)<span class=\"ts\"/>.<a class=\"id\" href=\"#rawlock\">rawlock</a> = <a class=\"id\" href=\"#_lock\">_lock</a>", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PLIST_HEAD_LOCK_INIT\">PLIST_HEAD_LOCK_INIT</a>(<a class=\"id\" href=\"#_lock\">_lock</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PLIST_HEAD_LOCK_INIT_RAW\">PLIST_HEAD_LOCK_INIT_RAW</a>(<a class=\"id\" href=\"#_lock\">_lock</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_PLIST_HEAD_INIT\">_PLIST_HEAD_INIT</a>(<a class=\"id\" href=\"#head\">head</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#prio_list\">prio_list</a> = <a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>((<a class=\"id\" href=\"#head\">head</a>).<a class=\"id\" href=\"#prio_list\">prio_list</a>),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#node_list\">node_list</a> = <a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>((<a class=\"id\" href=\"#head\">head</a>).<a class=\"id\" href=\"#node_list\">node_list</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * PLIST_HEAD_INIT - static struct plist_head initializer</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>struct plist_head variable name</span>", 
"<span class=\"comment\"> * @_lock:<span class=\"ts\"/>lock to initialize for this list</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PLIST_HEAD_INIT\">PLIST_HEAD_INIT</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#_lock\">_lock</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_PLIST_HEAD_INIT\">_PLIST_HEAD_INIT</a>(<a class=\"id\" href=\"#head\">head</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PLIST_HEAD_LOCK_INIT\">PLIST_HEAD_LOCK_INIT</a>(&amp;(<a class=\"id\" href=\"#_lock\">_lock</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * PLIST_HEAD_INIT_RAW - static struct plist_head initializer</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>struct plist_head variable name</span>", 
"<span class=\"comment\"> * @_lock:<span class=\"ts\"/>lock to initialize for this list</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PLIST_HEAD_INIT_RAW\">PLIST_HEAD_INIT_RAW</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#_lock\">_lock</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_PLIST_HEAD_INIT\">_PLIST_HEAD_INIT</a>(<a class=\"id\" href=\"#head\">head</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PLIST_HEAD_LOCK_INIT_RAW\">PLIST_HEAD_LOCK_INIT_RAW</a>(&amp;(<a class=\"id\" href=\"#_lock\">_lock</a>))<span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * PLIST_NODE_INIT - static struct plist_node initializer</span>", 
"<span class=\"comment\"> * @node:<span class=\"ts\"/>struct plist_node variable name</span>", 
"<span class=\"comment\"> * @__prio:<span class=\"ts\"/>initial node priority</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PLIST_NODE_INIT\">PLIST_NODE_INIT</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#__prio\">__prio</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#prio\">prio</a>  = (<a class=\"id\" href=\"#__prio\">__prio</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#plist\">plist</a> = { <a class=\"id\" href=\"#_PLIST_HEAD_INIT\">_PLIST_HEAD_INIT</a>((<a class=\"id\" href=\"#node\">node</a>).<a class=\"id\" href=\"#plist\">plist</a>) },<span class=\"ts\"/>\\", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * plist_head_init - dynamic struct plist_head initializer</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>&amp;struct plist_head pointer</span>", 
"<span class=\"comment\"> * @lock:<span class=\"ts\"/>spinlock protecting the list (debugging)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#plist_head_init\">plist_head_init</a>(struct <a class=\"id\" href=\"#plist_head\">plist_head</a> *<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#prio_list\">prio_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#node_list\">node_list</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PI_LIST\">CONFIG_DEBUG_PI_LIST</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#spinlock\">spinlock</a> = <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#rawlock\">rawlock</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * plist_head_init_raw - dynamic struct plist_head initializer</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>&amp;struct plist_head pointer</span>", 
"<span class=\"comment\"> * @lock:<span class=\"ts\"/>raw_spinlock protecting the list (debugging)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#plist_head_init_raw\">plist_head_init_raw</a>(struct <a class=\"id\" href=\"#plist_head\">plist_head</a> *<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#prio_list\">prio_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#node_list\">node_list</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PI_LIST\">CONFIG_DEBUG_PI_LIST</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#rawlock\">rawlock</a> = <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#spinlock\">spinlock</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * plist_node_init - Dynamic struct plist_node initializer</span>", 
"<span class=\"comment\"> * @node:<span class=\"ts\"/>&amp;struct plist_node pointer</span>", 
"<span class=\"comment\"> * @prio:<span class=\"ts\"/>initial node priority</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#plist_node_init\">plist_node_init</a>(struct <a class=\"id\" href=\"#plist_node\">plist_node</a> *<a class=\"id\" href=\"#node\">node</a>, int <a class=\"id\" href=\"#prio\">prio</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#prio\">prio</a> = <a class=\"id\" href=\"#prio\">prio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#plist_head_init\">plist_head_init</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#plist\">plist</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#plist_add\">plist_add</a>(struct <a class=\"id\" href=\"#plist_node\">plist_node</a> *<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#plist_head\">plist_head</a> *<a class=\"id\" href=\"#head\">head</a>);", 
"extern void <a class=\"id\" href=\"#plist_del\">plist_del</a>(struct <a class=\"id\" href=\"#plist_node\">plist_node</a> *<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#plist_head\">plist_head</a> *<a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * plist_for_each - iterate over the plist</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the type * to use as a loop counter</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#plist_for_each\">plist_for_each</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, &amp;(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#node_list\">node_list</a>, <a class=\"id\" href=\"#plist\">plist</a>.<a class=\"id\" href=\"#node_list\">node_list</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * plist_for_each_safe - iterate safely over a plist of given type</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the type * to use as a loop counter</span>", 
"<span class=\"comment\"> * @n:<span class=\"ts\"/>another type * to use as temporary storage</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterate over a plist of given type, safe against removal of list entry.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#plist_for_each_safe\">plist_for_each_safe</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#head\">head</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#node_list\">node_list</a>, <a class=\"id\" href=\"#plist\">plist</a>.<a class=\"id\" href=\"#node_list\">node_list</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * plist_for_each_entry<span class=\"ts\"/>- iterate over list of given type</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the type * to use as a loop counter</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list</span>", 
"<span class=\"comment\"> * @mem:<span class=\"ts\"/>the name of the list_struct within the struct</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#plist_for_each_entry\">plist_for_each_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#mem\">mem</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, &amp;(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#node_list\">node_list</a>, <a class=\"id\" href=\"#mem\">mem</a>.<a class=\"id\" href=\"#plist\">plist</a>.<a class=\"id\" href=\"#node_list\">node_list</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * plist_for_each_entry_safe - iterate safely over list of given type</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the type * to use as a loop counter</span>", 
"<span class=\"comment\"> * @n:<span class=\"ts\"/><span class=\"ts\"/>another type * to use as temporary storage</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list</span>", 
"<span class=\"comment\"> * @m:<span class=\"ts\"/><span class=\"ts\"/>the name of the list_struct within the struct</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterate over list of given type, safe against removal of list entry.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#plist_for_each_entry_safe\">plist_for_each_entry_safe</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#m\">m</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;(<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#node_list\">node_list</a>, <a class=\"id\" href=\"#m\">m</a>.<a class=\"id\" href=\"#plist\">plist</a>.<a class=\"id\" href=\"#node_list\">node_list</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * plist_head_empty - return !0 if a plist_head is empty</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>&amp;struct plist_head pointer</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#plist_head_empty\">plist_head_empty</a>(const struct <a class=\"id\" href=\"#plist_head\">plist_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#node_list\">node_list</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * plist_node_empty - return !0 if plist_node is not on a list</span>", 
"<span class=\"comment\"> * @node:<span class=\"ts\"/>&amp;struct plist_node pointer</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#plist_node_empty\">plist_node_empty</a>(const struct <a class=\"id\" href=\"#plist_node\">plist_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#plist_head_empty\">plist_head_empty</a>(&amp;<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#plist\">plist</a>);", 
"}", 
"", 
"<span class=\"comment\">/* All functions below assume the plist_head is not empty. */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * plist_first_entry - get the struct for the first entry</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the &amp;struct plist_head pointer</span>", 
"<span class=\"comment\"> * @type:<span class=\"ts\"/>the type of the struct this is embedded in</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the list_struct within the struct</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PI_LIST\">CONFIG_DEBUG_PI_LIST</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#plist_first_entry\">plist_first_entry</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/>\\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#plist_head_empty\">plist_head_empty</a>(<a class=\"id\" href=\"#head\">head</a>)); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#plist_first\">plist_first</a>(<a class=\"id\" href=\"#head\">head</a>), <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>); \\", 
"})", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#plist_first_entry\">plist_first_entry</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#plist_first\">plist_first</a>(<a class=\"id\" href=\"#head\">head</a>), <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * plist_last_entry - get the struct for the last entry</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the &amp;struct plist_head pointer</span>", 
"<span class=\"comment\"> * @type:<span class=\"ts\"/>the type of the struct this is embedded in</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the list_struct within the struct</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PI_LIST\">CONFIG_DEBUG_PI_LIST</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#plist_last_entry\">plist_last_entry</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/>\\", 
"({ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#plist_head_empty\">plist_head_empty</a>(<a class=\"id\" href=\"#head\">head</a>)); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#plist_last\">plist_last</a>(<a class=\"id\" href=\"#head\">head</a>), <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>); \\", 
"})", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#plist_last_entry\">plist_last_entry</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#plist_last\">plist_last</a>(<a class=\"id\" href=\"#head\">head</a>), <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * plist_first - return the first node (and thus, highest priority)</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the &amp;struct plist_head pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Assumes the plist is _not_ empty.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#plist_node\">plist_node</a> *<a class=\"id\" href=\"#plist_first\">plist_first</a>(const struct <a class=\"id\" href=\"#plist_head\">plist_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#node_list\">node_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#plist_node\">plist_node</a>, <a class=\"id\" href=\"#plist\">plist</a>.<a class=\"id\" href=\"#node_list\">node_list</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * plist_last - return the last node (and thus, lowest priority)</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the &amp;struct plist_head pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Assumes the plist is _not_ empty.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#plist_node\">plist_node</a> *<a class=\"id\" href=\"#plist_last\">plist_last</a>(const struct <a class=\"id\" href=\"#plist_head\">plist_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#node_list\">node_list</a>.<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#plist_node\">plist_node</a>, <a class=\"id\" href=\"#plist\">plist</a>.<a class=\"id\" href=\"#node_list\">node_list</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/87/cff40f6e4b9624198417e79be9ae1521c384da.xr', __xr_tmp);
