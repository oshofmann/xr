var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dma\">dma</a>-<a class=\"id\" href=\"#mapping\">mapping</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dma\">dma</a>-<a class=\"id\" href=\"#debug\">debug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmar\">dmar</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmemleak\">kmemleak</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#proto\">proto</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#dma\">dma</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#iommu\">iommu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#gart\">gart</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#calgary\">calgary</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#amd_iommu\">amd_iommu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#swiotlb\">swiotlb</a>-<a class=\"id\" href=\"#xen\">xen</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static int <a class=\"id\" href=\"#forbid_dac\">forbid_dac</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"struct <a class=\"id\" href=\"#dma_map_ops\">dma_map_ops</a> *<a class=\"id\" href=\"#dma_ops\">dma_ops</a> = &amp;<a class=\"id\" href=\"#nommu_dma_ops\">nommu_dma_ops</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_ops\">dma_ops</a>);", 
"", 
"static int <a class=\"id\" href=\"#iommu_sac_force\">iommu_sac_force</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IOMMU_DEBUG\">CONFIG_IOMMU_DEBUG</a>", 
"int <a class=\"id\" href=\"#panic_on_overflow\">panic_on_overflow</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"int <a class=\"id\" href=\"#force_iommu\">force_iommu</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"#else", 
"int <a class=\"id\" href=\"#panic_on_overflow\">panic_on_overflow</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 0;", 
"int <a class=\"id\" href=\"#force_iommu\">force_iommu</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#iommu_merge\">iommu_merge</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 0;", 
"", 
"int <a class=\"id\" href=\"#no_iommu\">no_iommu</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<span class=\"comment\">/* Set this to 1 if there is a HW IOMMU in the system */</span>", 
"int <a class=\"id\" href=\"#iommu_detected\">iommu_detected</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 0;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This variable becomes 1 if iommu=pt is passed on the kernel command line.</span>", 
"<span class=\"comment\"> * If this variable is 1, IOMMU implementations do no DMA translation for</span>", 
"<span class=\"comment\"> * devices and allow every device to access to whole physical memory. This is</span>", 
"<span class=\"comment\"> * useful if a user wants to use an IOMMU only for KVM device assignment to</span>", 
"<span class=\"comment\"> * guests and not for driver dma translation.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#iommu_pass_through\">iommu_pass_through</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/* Dummy device used for NULL arguments (normally ISA). */</span>", 
"struct <a class=\"id\" href=\"#device\">device</a> <a class=\"id\" href=\"#x86_dma_fallback_dev\">x86_dma_fallback_dev</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#init_name\">init_name</a> = \"fallback device\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#coherent_dma_mask\">coherent_dma_mask</a> = <a class=\"id\" href=\"#ISA_DMA_BIT_MASK\">ISA_DMA_BIT_MASK</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#dma_mask\">dma_mask</a> = &amp;<a class=\"id\" href=\"#x86_dma_fallback_dev\">x86_dma_fallback_dev</a>.<a class=\"id\" href=\"#coherent_dma_mask\">coherent_dma_mask</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#x86_dma_fallback_dev\">x86_dma_fallback_dev</a>);", 
"", 
"<span class=\"comment\">/* Number of entries preallocated for DMA-API debugging */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PREALLOC_DMA_DEBUG_ENTRIES\">PREALLOC_DMA_DEBUG_ENTRIES</a>       32768", 
"", 
"int <a class=\"id\" href=\"#dma_set_mask\">dma_set_mask</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dma_mask\">dma_mask</a> || !<a class=\"id\" href=\"#dma_supported\">dma_supported</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#mask\">mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dma_mask\">dma_mask</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_set_mask\">dma_set_mask</a>);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>) && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>)", 
"static <a class=\"id\" href=\"#__initdata\">__initdata</a> void *<a class=\"id\" href=\"#dma32_bootmem_ptr\">dma32_bootmem_ptr</a>;", 
"static unsigned long <a class=\"id\" href=\"#dma32_bootmem_size\">dma32_bootmem_size</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> = (128ULL<<20);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_dma32_size_opt\">parse_dma32_size_opt</a>(char *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma32_bootmem_size\">dma32_bootmem_size</a> = <a class=\"id\" href=\"#memparse\">memparse</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"dma32_size\", <a class=\"id\" href=\"#parse_dma32_size_opt\">parse_dma32_size_opt</a>);", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dma32_reserve_bootmem\">dma32_reserve_bootmem</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_pfn\">max_pfn</a> <= <a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check aperture_64.c allocate_aperture() for reason about</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * using 512M as goal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a> = 64ULL<<20;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#dma32_bootmem_size\">dma32_bootmem_size</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma32_bootmem_ptr\">dma32_bootmem_ptr</a> = <a class=\"id\" href=\"#__alloc_bootmem_nopanic\">__alloc_bootmem_nopanic</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> 512ULL<<20);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Kmemleak should not scan this block as it may not be mapped via the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernel direct mapping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_ignore\">kmemleak_ignore</a>(<a class=\"id\" href=\"#dma32_bootmem_ptr\">dma32_bootmem_ptr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dma32_bootmem_ptr\">dma32_bootmem_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma32_bootmem_size\">dma32_bootmem_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma32_bootmem_size\">dma32_bootmem_size</a> = 0;", 
"}", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dma32_free_bootmem\">dma32_free_bootmem</a>(void)", 
"{", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_pfn\">max_pfn</a> <= <a class=\"id\" href=\"#MAX_DMA32_PFN\">MAX_DMA32_PFN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma32_bootmem_ptr\">dma32_bootmem_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem\">free_bootmem</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#dma32_bootmem_ptr\">dma32_bootmem_ptr</a>), <a class=\"id\" href=\"#dma32_bootmem_size\">dma32_bootmem_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma32_bootmem_ptr\">dma32_bootmem_ptr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma32_bootmem_size\">dma32_bootmem_size</a> = 0;", 
"}", 
"#else", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dma32_reserve_bootmem\">dma32_reserve_bootmem</a>(void)", 
"{", 
"}", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dma32_free_bootmem\">dma32_free_bootmem</a>(void)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pci_iommu_alloc\">pci_iommu_alloc</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* free the range so iommu could get some range less than 4G */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma32_free_bootmem\">dma32_free_bootmem</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_xen_swiotlb_detect\">pci_xen_swiotlb_detect</a>() || <a class=\"id\" href=\"#pci_swiotlb_detect\">pci_swiotlb_detect</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gart_iommu_hole_init\">gart_iommu_hole_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#detect_calgary\">detect_calgary</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#detect_intel_iommu\">detect_intel_iommu</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* needs to be called after gart_iommu_hole_init */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_detect\">amd_iommu_detect</a>();", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_xen_swiotlb_init\">pci_xen_swiotlb_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_swiotlb_init\">pci_swiotlb_init</a>();", 
"}", 
"", 
"void *<a class=\"id\" href=\"#dma_generic_alloc_coherent\">dma_generic_alloc_coherent</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> *<a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dma_mask\">dma_mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_mask\">dma_mask</a> = <a class=\"id\" href=\"#dma_alloc_coherent_mask\">dma_alloc_coherent_mask</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a> |= <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>;", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages_node\">alloc_pages_node</a>(<a class=\"id\" href=\"#dev_to_node\">dev_to_node</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#flag\">flag</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#page_to_phys\">page_to_phys</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#dma_mask\">dma_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages\">__free_pages</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_mask\">dma_mask</a> &lt; <a class=\"id\" href=\"#DMA_BIT_MASK\">DMA_BIT_MASK</a>(32) && !(<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a> = (<a class=\"id\" href=\"#flag\">flag</a> &amp; ~<a class=\"id\" href=\"#GFP_DMA32\">GFP_DMA32</a>) | <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dma_addr\">dma_addr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * See &lt;Documentation/x86_64/boot-options.txt&gt; for the iommu kernel parameter</span>", 
"<span class=\"comment\"> * documentation.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#iommu_setup\">iommu_setup</a>(char *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_merge\">iommu_merge</a> = 1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"off\", 3))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#no_iommu\">no_iommu</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* gart_parse_options has more force support */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"force\", 5))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_iommu\">force_iommu</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"noforce\", 7)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_merge\">iommu_merge</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_iommu\">force_iommu</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"biomerge\", 8)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_merge\">iommu_merge</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_iommu\">force_iommu</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"panic\", 5))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic_on_overflow\">panic_on_overflow</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"nopanic\", 7))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic_on_overflow\">panic_on_overflow</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"merge\", 5)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_merge\">iommu_merge</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_iommu\">force_iommu</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"nomerge\", 7))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_merge\">iommu_merge</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"forcesac\", 8))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_sac_force\">iommu_sac_force</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"allowdac\", 8))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#forbid_dac\">forbid_dac</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"nodac\", 5))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#forbid_dac\">forbid_dac</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"usedac\", 6)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#forbid_dac\">forbid_dac</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SWIOTLB\">CONFIG_SWIOTLB</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"soft\", 4))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb\">swiotlb</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"pt\", 2))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_pass_through\">iommu_pass_through</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gart_parse_options\">gart_parse_options</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CALGARY_IOMMU\">CONFIG_CALGARY_IOMMU</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#p\">p</a>, \"calgary\", 7))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#use_calgary\">use_calgary</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_CALGARY_IOMMU */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#strcspn\">strcspn</a>(<a class=\"id\" href=\"#p\">p</a>, \",\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == ',')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"iommu\", <a class=\"id\" href=\"#iommu_setup\">iommu_setup</a>);", 
"", 
"int <a class=\"id\" href=\"#dma_supported\">dma_supported</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_map_ops\">dma_map_ops</a> *<a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#get_dma_ops\">get_dma_ops</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> &gt; 0xffffffff && <a class=\"id\" href=\"#forbid_dac\">forbid_dac</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"PCI: Disallowing DAC for device\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#dma_supported\">dma_supported</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#dma_supported\">dma_supported</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copied from i386. Doesn't make much sense, because it will</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   only work for pci_alloc_coherent.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   The caller just has to use GFP_DMA in this case. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> &lt; <a class=\"id\" href=\"#DMA_BIT_MASK\">DMA_BIT_MASK</a>(24))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Tell the device to use SAC when IOMMU force is on.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   allows the driver to use cheaper accesses in some cases.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Problem with this is that if we overflow the IOMMU area and</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   return DAC as fallback address the device may not handle it</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   correctly.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>   As a special case some controllers have a 39bit address</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   mode that is as efficient as 32bit (aic79xx). Don't force</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   SAC for these.  Assume all masks &lt;= 40 bits are of this</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   type. Normally this doesn't make any difference, but gives</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   more gentle handling of IOMMU overflow. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iommu_sac_force\">iommu_sac_force</a> && (<a class=\"id\" href=\"#mask\">mask</a> >= <a class=\"id\" href=\"#DMA_BIT_MASK\">DMA_BIT_MASK</a>(40))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"Force SAC with mask %Lx\\n\", <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_supported\">dma_supported</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pci_iommu_init\">pci_iommu_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_debug_init\">dma_debug_init</a>(<a class=\"id\" href=\"#PREALLOC_DMA_DEBUG_ENTRIES\">PREALLOC_DMA_DEBUG_ENTRIES</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_debug_add_bus\">dma_debug_add_bus</a>(&amp;<a class=\"id\" href=\"#pci_bus_type\">pci_bus_type</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#iommu\">iommu</a>.<a class=\"id\" href=\"#iommu_init\">iommu_init</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swiotlb\">swiotlb</a> || <a class=\"id\" href=\"#xen_swiotlb\">xen_swiotlb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"PCI-DMA: \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"Using software bounce buffering for IO (SWIOTLB)\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_print_info\">swiotlb_print_info</a>();", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_free\">swiotlb_free</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<span class=\"comment\">/* Must execute after PCI subsystem */</span>", 
"<a class=\"id\" href=\"#rootfs_initcall\">rootfs_initcall</a>(<a class=\"id\" href=\"#pci_iommu_init\">pci_iommu_init</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>", 
"<span class=\"comment\">/* Many VIA bridges seem to corrupt data for DAC. Disable it here */</span>", 
"", 
"static <a class=\"id\" href=\"#__devinit\">__devinit</a> void <a class=\"id\" href=\"#via_no_dac\">via_no_dac</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) == <a class=\"id\" href=\"#PCI_CLASS_BRIDGE_PCI\">PCI_CLASS_BRIDGE_PCI</a> && <a class=\"id\" href=\"#forbid_dac\">forbid_dac</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"disabling DAC on VIA PCI bridge\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#forbid_dac\">forbid_dac</a> = 1;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#via_no_dac\">via_no_dac</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/87/e288b4e342d2caecfceb51a6df9e06040cb608.xr', __xr_tmp);
