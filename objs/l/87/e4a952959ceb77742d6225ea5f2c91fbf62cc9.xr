var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_preempt_send_cbs_to_orphanage\">rcu_preempt_send_cbs_to_orphanage</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD_FROZEN\">CPU_DEAD_FROZEN</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_CANCELED\">CPU_UP_CANCELED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_CANCELED_FROZEN\">CPU_UP_CANCELED_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_offline_cpu\">rcu_offline_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function is invoked towards the end of the scheduler's initialization</span>", 
"<span class=\"comment\"> * process.  Before this is called, the idle task might contain</span>", 
"<span class=\"comment\"> * RCU read-side critical sections (during which time, this idle</span>", 
"<span class=\"comment\"> * task is booting the system).  After this function is called, the</span>", 
"<span class=\"comment\"> * idle tasks are prohibited from containing RCU read-side critical</span>", 
"<span class=\"comment\"> * sections.  This function also enables RCU lockdep checking.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_scheduler_starting\">rcu_scheduler_starting</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() != 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#nr_context_switches\">nr_context_switches</a>() &gt; 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_scheduler_active\">rcu_scheduler_active</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Compute the per-level fanout, either using the exact fanout specified</span>", 
"<span class=\"comment\"> * or balancing the tree, depending on CONFIG_RCU_FANOUT_EXACT.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RCU_FANOUT_EXACT\">CONFIG_RCU_FANOUT_EXACT</a>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#rcu_init_levelspread\">rcu_init_levelspread</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#NUM_RCU_LVLS\">NUM_RCU_LVLS</a> - 1; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#levelspread\">levelspread</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#CONFIG_RCU_FANOUT\">CONFIG_RCU_FANOUT</a>;", 
"}", 
"#else <span class=\"comment\">/* #ifdef CONFIG_RCU_FANOUT_EXACT */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#rcu_init_levelspread\">rcu_init_levelspread</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ccur\">ccur</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cprv\">cprv</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cprv\">cprv</a> = <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#NUM_RCU_LVLS\">NUM_RCU_LVLS</a> - 1; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ccur\">ccur</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#levelcnt\">levelcnt</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#levelspread\">levelspread</a>[<a class=\"id\" href=\"#i\">i</a>] = (<a class=\"id\" href=\"#cprv\">cprv</a> + <a class=\"id\" href=\"#ccur\">ccur</a> - 1) / <a class=\"id\" href=\"#ccur\">ccur</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cprv\">cprv</a> = <a class=\"id\" href=\"#ccur\">ccur</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifdef CONFIG_RCU_FANOUT_EXACT */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helper function for rcu_init() that initializes one rcu_state structure.</span>", 
];
xr_frag_insert('l/87/e4a952959ceb77742d6225ea5f2c91fbf62cc9.xr', __xr_tmp);
