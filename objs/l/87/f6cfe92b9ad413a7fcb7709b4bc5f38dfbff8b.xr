var __xr_tmp = [
"<span class=\"comment\">/* sfi_core.c Simple Firmware Interface - core internals */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  This file is provided under a dual BSD/GPLv2 license.  When using or</span>", 
"<span class=\"comment\">  redistributing this file, you may do so under either license.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  GPL LICENSE SUMMARY</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  Copyright(c) 2009 Intel Corporation. All rights reserved.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\">  it under the terms of version 2 of the GNU General Public License as</span>", 
"<span class=\"comment\">  published by the Free Software Foundation.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\">  WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>", 
"<span class=\"comment\">  General Public License for more details.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\">  along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\">  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.</span>", 
"<span class=\"comment\">  The full GNU General Public License is included in this distribution</span>", 
"<span class=\"comment\">  in the file called LICENSE.GPL.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  BSD LICENSE</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  Copyright(c) 2009 Intel Corporation. All rights reserved.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\">  modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\">  are met:</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    * Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\">      notice, this list of conditions and the following disclaimer.</span>", 
"<span class=\"comment\">    * Redistributions in binary form must reproduce the above copyright</span>", 
"<span class=\"comment\">      notice, this list of conditions and the following disclaimer in</span>", 
"<span class=\"comment\">      the documentation and/or other materials provided with the</span>", 
"<span class=\"comment\">      distribution.</span>", 
"<span class=\"comment\">    * Neither the name of Intel Corporation nor the names of its</span>", 
"<span class=\"comment\">      contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\">      from this software without specific prior written permission.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\">  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\">  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span>", 
"<span class=\"comment\">  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\">  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span>", 
"<span class=\"comment\">  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span>", 
"<span class=\"comment\">  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span>", 
"<span class=\"comment\">  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span>", 
"<span class=\"comment\">  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span>", 
"<span class=\"comment\">  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span>", 
"<span class=\"comment\">  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">*/</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KMSG_COMPONENT\">KMSG_COMPONENT</a> \"SFI\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>) <a class=\"id\" href=\"#KMSG_COMPONENT\">KMSG_COMPONENT</a> \": \" <a class=\"id\" href=\"#fmt\">fmt</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sfi\">sfi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"sfi_core.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ON_SAME_PAGE\">ON_SAME_PAGE</a>(<a class=\"id\" href=\"#addr1\">addr1</a>, <a class=\"id\" href=\"#addr2\">addr2</a>) \\", 
"<span class=\"ts\"/>(((unsigned long)(<a class=\"id\" href=\"#addr1\">addr1</a>) &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>) == \\", 
"<span class=\"ts\"/>((unsigned long)(<a class=\"id\" href=\"#addr2\">addr2</a>) &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TABLE_ON_PAGE\">TABLE_ON_PAGE</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#size\">size</a>) (<a class=\"id\" href=\"#ON_SAME_PAGE\">ON_SAME_PAGE</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#table\">table</a>) && \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ON_SAME_PAGE\">ON_SAME_PAGE</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#table\">table</a> + <a class=\"id\" href=\"#size\">size</a>))", 
"", 
"int <a class=\"id\" href=\"#sfi_disabled\">sfi_disabled</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sfi_disabled\">sfi_disabled</a>);", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#syst_pa\">syst_pa</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static struct <a class=\"id\" href=\"#sfi_table_simple\">sfi_table_simple</a> *<a class=\"id\" href=\"#syst_va\">syst_va</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * FW creates and saves the SFI tables in memory. When these tables get</span>", 
"<span class=\"comment\"> * used, they may need to be mapped to virtual address space, and the mapping</span>", 
"<span class=\"comment\"> * can happen before or after the ioremap() is ready, so a flag is needed</span>", 
"<span class=\"comment\"> * to indicating this</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sfi_use_ioremap\">sfi_use_ioremap</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sfi_un/map_memory calls early_ioremap/iounmap which is a __init function</span>", 
"<span class=\"comment\"> * and introduces section mismatch. So use __ref to make it calm.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__iomem\">__iomem</a> * <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#sfi_map_memory\">sfi_map_memory</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#phys\">phys</a> || !<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sfi_use_ioremap\">sfi_use_ioremap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ioremap\">ioremap</a>(<a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#early_ioremap\">early_ioremap</a>(<a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#sfi_unmap_memory\">sfi_unmap_memory</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#virt\">virt</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#virt\">virt</a> || !<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sfi_use_ioremap\">sfi_use_ioremap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#virt\">virt</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_iounmap\">early_iounmap</a>(<a class=\"id\" href=\"#virt\">virt</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sfi_print_table_header\">sfi_print_table_header</a>(unsigned long long <a class=\"id\" href=\"#pa\">pa</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#header\">header</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"%4.4s %llX, %04X (v%d %6.6s %8.8s)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#pa\">pa</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#rev\">rev</a>, <a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#oem_id\">oem_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#oem_table_id\">oem_table_id</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sfi_verify_table()</span>", 
"<span class=\"comment\"> * Sanity check table lengh, calculate checksum</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#sfi_verify_table\">sfi_verify_table</a>(struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#table\">table</a>)", 
"{", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#checksum\">checksum</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#puchar\">puchar</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#table\">table</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Sanity check table length against arbitrary 1MB limit */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &gt; 0x100000) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"Invalid table length 0x%x\\n\", <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#length\">length</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#checksum\">checksum</a> += *<a class=\"id\" href=\"#puchar\">puchar</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#checksum\">checksum</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"Checksum %2.2X should be %2.2X\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#csum\">csum</a> - <a class=\"id\" href=\"#checksum\">checksum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sfi_map_table()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return address of mapped table</span>", 
"<span class=\"comment\"> * Check for common case that we can re-use mapping to SYST,</span>", 
"<span class=\"comment\"> * which requires syst_pa, syst_va to be initialized.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#sfi_map_table\">sfi_map_table</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#pa\">pa</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#th\">th</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#TABLE_ON_PAGE\">TABLE_ON_PAGE</a>(<a class=\"id\" href=\"#syst_pa\">syst_pa</a>, <a class=\"id\" href=\"#pa\">pa</a>, sizeof(struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a> = <a class=\"id\" href=\"#sfi_map_memory\">sfi_map_memory</a>(<a class=\"id\" href=\"#pa\">pa</a>, sizeof(struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a>));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a> = (void *)<a class=\"id\" href=\"#syst_va\">syst_va</a> + (<a class=\"id\" href=\"#pa\">pa</a> - <a class=\"id\" href=\"#syst_pa\">syst_pa</a>);", 
"", 
"<span class=\"ts\"/> <span class=\"comment\">/* If table fits on same page as its header, we are done */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TABLE_ON_PAGE\">TABLE_ON_PAGE</a>(<a class=\"id\" href=\"#th\">th</a>, <a class=\"id\" href=\"#th\">th</a>, <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#th\">th</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Entire table does not fit on same page as SYST */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#TABLE_ON_PAGE\">TABLE_ON_PAGE</a>(<a class=\"id\" href=\"#syst_pa\">syst_pa</a>, <a class=\"id\" href=\"#pa\">pa</a>, sizeof(struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sfi_unmap_memory\">sfi_unmap_memory</a>(<a class=\"id\" href=\"#th\">th</a>, sizeof(struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sfi_map_memory\">sfi_map_memory</a>(<a class=\"id\" href=\"#pa\">pa</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sfi_unmap_table()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Undoes effect of sfi_map_table() by unmapping table</span>", 
"<span class=\"comment\"> * if it did not completely fit on same page as SYST.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sfi_unmap_table\">sfi_unmap_table</a>(struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#th\">th</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#TABLE_ON_PAGE\">TABLE_ON_PAGE</a>(<a class=\"id\" href=\"#syst_va\">syst_va</a>, <a class=\"id\" href=\"#th\">th</a>, <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sfi_unmap_memory\">sfi_unmap_memory</a>(<a class=\"id\" href=\"#th\">th</a>, <a class=\"id\" href=\"#TABLE_ON_PAGE\">TABLE_ON_PAGE</a>(<a class=\"id\" href=\"#th\">th</a>, <a class=\"id\" href=\"#th\">th</a>, <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#len\">len</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(*<a class=\"id\" href=\"#th\">th</a>) : <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sfi_table_check_key\">sfi_table_check_key</a>(struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#th\">th</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_key\">sfi_table_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#SFI_SIGNATURE_SIZE\">SFI_SIGNATURE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>|| (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#oem_id\">oem_id</a> && <a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#oem_id\">oem_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#oem_id\">oem_id</a>, <a class=\"id\" href=\"#SFI_OEM_ID_SIZE\">SFI_OEM_ID_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>|| (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#oem_table_id\">oem_table_id</a> && <a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#oem_table_id\">oem_table_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#oem_table_id\">oem_table_id</a>, <a class=\"id\" href=\"#SFI_OEM_TABLE_ID_SIZE\">SFI_OEM_TABLE_ID_SIZE</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function will be used in 2 cases:</span>", 
"<span class=\"comment\"> * 1. used to enumerate and verify the tables addressed by SYST/XSDT,</span>", 
"<span class=\"comment\"> *    thus no signature will be given (in kernel boot phase)</span>", 
"<span class=\"comment\"> * 2. used to parse one specific table, signature must exist, and</span>", 
"<span class=\"comment\"> *    the mapped virt address will be returned, and the virt space</span>", 
"<span class=\"comment\"> *    will be released by call sfi_put_table() later</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This two cases are from two different functions with two different</span>", 
"<span class=\"comment\"> * sections and causes section mismatch warning. So use __ref to tell</span>", 
"<span class=\"comment\"> * modpost not to make any noise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return value:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NULL:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>when can't find a table matching the key</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ERR_PTR(error):<span class=\"ts\"/><span class=\"ts\"/>error value</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>virt table address:<span class=\"ts\"/>when a matched table is found</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *", 
" <a class=\"id\" href=\"#__ref\">__ref</a> <a class=\"id\" href=\"#sfi_check_table\">sfi_check_table</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#pa\">pa</a>, struct <a class=\"id\" href=\"#sfi_table_key\">sfi_table_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#th\">th</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a> = <a class=\"id\" href=\"#sfi_map_table\">sfi_map_table</a>(<a class=\"id\" href=\"#pa\">pa</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#th\">th</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#sig\">sig</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sfi_print_table_header\">sfi_print_table_header</a>(<a class=\"id\" href=\"#pa\">pa</a>, <a class=\"id\" href=\"#th\">th</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sfi_verify_table\">sfi_verify_table</a>(<a class=\"id\" href=\"#th\">th</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sfi_table_check_key\">sfi_table_check_key</a>(<a class=\"id\" href=\"#th\">th</a>, <a class=\"id\" href=\"#key\">key</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#th\">th</a>;<span class=\"ts\"/><span class=\"comment\">/* Success */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_unmap_table\">sfi_unmap_table</a>(<a class=\"id\" href=\"#th\">th</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sfi_get_table()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Search SYST for the specified table with the signature in</span>", 
"<span class=\"comment\"> * the key, and return the mapped table</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#sfi_get_table\">sfi_get_table</a>(struct <a class=\"id\" href=\"#sfi_table_key\">sfi_table_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#th\">th</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a> = <a class=\"id\" href=\"#SFI_GET_NUM_ENTRIES\">SFI_GET_NUM_ENTRIES</a>(<a class=\"id\" href=\"#syst_va\">syst_va</a>, <a class=\"id\" href=\"#u64\">u64</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a> = <a class=\"id\" href=\"#sfi_check_table\">sfi_check_table</a>(<a class=\"id\" href=\"#syst_va\">syst_va</a>-><a class=\"id\" href=\"#pentry\">pentry</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#th\">th</a>) && <a class=\"id\" href=\"#th\">th</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#th\">th</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#sfi_put_table\">sfi_put_table</a>(struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#th\">th</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_unmap_table\">sfi_unmap_table</a>(<a class=\"id\" href=\"#th\">th</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Find table with signature, run handler on it */</span>", 
"int <a class=\"id\" href=\"#sfi_table_parse\">sfi_table_parse</a>(char *<a class=\"id\" href=\"#signature\">signature</a>, char *<a class=\"id\" href=\"#oem_id\">oem_id</a>, char *<a class=\"id\" href=\"#oem_table_id\">oem_table_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sfi_table_handler\">sfi_table_handler</a> <a class=\"id\" href=\"#handler\">handler</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_key\">sfi_table_key</a> <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sfi_disabled\">sfi_disabled</a> || !<a class=\"id\" href=\"#handler\">handler</a> || !<a class=\"id\" href=\"#signature\">signature</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#signature\">signature</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#oem_id\">oem_id</a> = <a class=\"id\" href=\"#oem_id\">oem_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#oem_table_id\">oem_table_id</a> = <a class=\"id\" href=\"#oem_table_id\">oem_table_id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#sfi_get_table\">sfi_get_table</a>(&amp;<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#table\">table</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#handler\">handler</a>(<a class=\"id\" href=\"#table\">table</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_put_table\">sfi_put_table</a>(<a class=\"id\" href=\"#table\">table</a>);", 
"<a class=\"id\" href=\"#exit\">exit</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sfi_table_parse\">sfi_table_parse</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sfi_parse_syst()</span>", 
"<span class=\"comment\"> * Checksum all the tables in SYST and print their headers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * success: set syst_va, return 0</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sfi_parse_syst\">sfi_parse_syst</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_key\">sfi_table_key</a> <a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#SFI_ANY_KEY\">SFI_ANY_KEY</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#syst_va\">syst_va</a> = <a class=\"id\" href=\"#sfi_map_memory\">sfi_map_memory</a>(<a class=\"id\" href=\"#syst_pa\">syst_pa</a>, sizeof(struct <a class=\"id\" href=\"#sfi_table_simple\">sfi_table_simple</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#syst_va\">syst_va</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a> = <a class=\"id\" href=\"#SFI_GET_NUM_ENTRIES\">SFI_GET_NUM_ENTRIES</a>(<a class=\"id\" href=\"#syst_va\">syst_va</a>, <a class=\"id\" href=\"#u64\">u64</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sfi_check_table\">sfi_check_table</a>(<a class=\"id\" href=\"#syst_va\">syst_va</a>-><a class=\"id\" href=\"#pentry\">pentry</a>[<a class=\"id\" href=\"#i\">i</a>], &amp;<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The OS finds the System Table by searching 16-byte boundaries between</span>", 
"<span class=\"comment\"> * physical address 0x000E0000 and 0x000FFFFF. The OS shall search this region</span>", 
"<span class=\"comment\"> * starting at the low address and shall stop searching when the 1st valid SFI</span>", 
"<span class=\"comment\"> * System Table is found.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * success: set syst_pa, return 0</span>", 
"<span class=\"comment\"> * fail: return -1</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#sfi_find_syst\">sfi_find_syst</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#SFI_SYST_SEARCH_END\">SFI_SYST_SEARCH_END</a> - <a class=\"id\" href=\"#SFI_SYST_SEARCH_BEGIN\">SFI_SYST_SEARCH_BEGIN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#sfi_map_memory\">sfi_map_memory</a>(<a class=\"id\" href=\"#SFI_SYST_SEARCH_BEGIN\">SFI_SYST_SEARCH_BEGIN</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#offset\">offset</a> = 0; <a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#offset\">offset</a> += 16) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#syst_hdr\">syst_hdr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#syst_hdr\">syst_hdr</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#syst_hdr\">syst_hdr</a>-><a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#SFI_SIG_SYST\">SFI_SIG_SYST</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SFI_SIGNATURE_SIZE\">SFI_SIGNATURE_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#syst_hdr\">syst_hdr</a>-><a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sfi_print_table_header\">sfi_print_table_header</a>(<a class=\"id\" href=\"#SFI_SYST_SEARCH_BEGIN\">SFI_SYST_SEARCH_BEGIN</a> + <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#syst_hdr\">syst_hdr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sfi_verify_table\">sfi_verify_table</a>(<a class=\"id\" href=\"#syst_hdr\">syst_hdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Enforce SFI spec mandate that SYST reside within a page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ON_SAME_PAGE\">ON_SAME_PAGE</a>(<a class=\"id\" href=\"#syst_pa\">syst_pa</a>, <a class=\"id\" href=\"#syst_pa\">syst_pa</a> + <a class=\"id\" href=\"#syst_hdr\">syst_hdr</a>-><a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"SYST 0x%llx + 0x%x crosses page\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#syst_pa\">syst_pa</a>, <a class=\"id\" href=\"#syst_hdr\">syst_hdr</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Success */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#syst_pa\">syst_pa</a> = <a class=\"id\" href=\"#SFI_SYST_SEARCH_BEGIN\">SFI_SYST_SEARCH_BEGIN</a> + <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sfi_unmap_memory\">sfi_unmap_memory</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_unmap_memory\">sfi_unmap_memory</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#sfi_kobj\">sfi_kobj</a>;", 
"static struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#tables_kobj\">tables_kobj</a>;", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sfi_table_show\">sfi_table_show</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#bin_attribute\">bin_attribute</a> *<a class=\"id\" href=\"#bin_attr\">bin_attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_attr\">sfi_table_attr</a> *<a class=\"id\" href=\"#tbl_attr\">tbl_attr</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#bin_attr\">bin_attr</a>, struct <a class=\"id\" href=\"#sfi_table_attr\">sfi_table_attr</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#th\">th</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_key\">sfi_table_key</a> <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#oem_id\">oem_id</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#oem_table_id\">oem_table_id</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#SFI_SIG_SYST\">SFI_SIG_SYST</a>, <a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#SFI_SIGNATURE_SIZE\">SFI_SIGNATURE_SIZE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a> = <a class=\"id\" href=\"#sfi_get_table\">sfi_get_table</a>(&amp;<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#th\">th</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> =  <a class=\"id\" href=\"#memory_read_from_buffer\">memory_read_from_buffer</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a>, <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sfi_put_table\">sfi_put_table</a>(<a class=\"id\" href=\"#th\">th</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> =  <a class=\"id\" href=\"#memory_read_from_buffer\">memory_read_from_buffer</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#syst_va\">syst_va</a>, <a class=\"id\" href=\"#syst_va\">syst_va</a>-><a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#sfi_table_attr\">sfi_table_attr</a> <a class=\"id\" href=\"#__init\">__init</a> *<a class=\"id\" href=\"#sfi_sysfs_install_table\">sfi_sysfs_install_table</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#pa\">pa</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_attr\">sfi_table_attr</a> *<a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sfi_table_header\">sfi_table_header</a> *<a class=\"id\" href=\"#th\">th</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tbl_attr\">tbl_attr</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#sfi_table_attr\">sfi_table_attr</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a> = <a class=\"id\" href=\"#sfi_map_table\">sfi_map_table</a>(<a class=\"id\" href=\"#pa\">pa</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#th\">th</a> || !<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#sig\">sig</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysfs_attr_init\">sysfs_attr_init</a>(&amp;<a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#SFI_SIGNATURE_SIZE\">SFI_SIGNATURE_SIZE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#sfi_table_show\">sfi_table_show</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mode\">mode</a> = 0400;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sysfs_create_bin_file\">sysfs_create_bin_file</a>(<a class=\"id\" href=\"#tables_kobj\">tables_kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>-><a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tbl_attr\">tbl_attr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_unmap_table\">sfi_unmap_table</a>(<a class=\"id\" href=\"#th\">th</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tbl_attr\">tbl_attr</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sfi_sysfs_init\">sfi_sysfs_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sfi_disabled\">sfi_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_kobj\">sfi_kobj</a> = <a class=\"id\" href=\"#kobject_create_and_add\">kobject_create_and_add</a>(\"sfi\", <a class=\"id\" href=\"#firmware_kobj\">firmware_kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sfi_kobj\">sfi_kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tables_kobj\">tables_kobj</a> = <a class=\"id\" href=\"#kobject_create_and_add\">kobject_create_and_add</a>(\"tables\", <a class=\"id\" href=\"#sfi_kobj\">sfi_kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tables_kobj\">tables_kobj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#sfi_kobj\">sfi_kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_sysfs_install_table\">sfi_sysfs_install_table</a>(<a class=\"id\" href=\"#syst_pa\">syst_pa</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a> = <a class=\"id\" href=\"#SFI_GET_NUM_ENTRIES\">SFI_GET_NUM_ENTRIES</a>(<a class=\"id\" href=\"#syst_va\">syst_va</a>, <a class=\"id\" href=\"#u64\">u64</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tbl_cnt\">tbl_cnt</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sfi_sysfs_install_table\">sfi_sysfs_install_table</a>(<a class=\"id\" href=\"#syst_va\">syst_va</a>-><a class=\"id\" href=\"#pentry\">pentry</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_acpi_sysfs_init\">sfi_acpi_sysfs_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_uevent\">kobject_uevent</a>(<a class=\"id\" href=\"#sfi_kobj\">sfi_kobj</a>, <a class=\"id\" href=\"#KOBJ_ADD\">KOBJ_ADD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_uevent\">kobject_uevent</a>(<a class=\"id\" href=\"#tables_kobj\">tables_kobj</a>, <a class=\"id\" href=\"#KOBJ_ADD\">KOBJ_ADD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"SFI sysfs interfaces init success\\n\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sfi_init\">sfi_init</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_disabled\">acpi_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_sfi\">disable_sfi</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sfi_disabled\">sfi_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Simple Firmware Interface v0.81 http://simplefirmware.org\\n\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sfi_find_syst\">sfi_find_syst</a>() || <a class=\"id\" href=\"#sfi_parse_syst\">sfi_parse_syst</a>() || <a class=\"id\" href=\"#sfi_platform_init\">sfi_platform_init</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_sfi\">disable_sfi</a>();", 
"", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sfi_init_late\">sfi_init_late</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sfi_disabled\">sfi_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#syst_va\">syst_va</a>-><a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_unmap_memory\">sfi_unmap_memory</a>(<a class=\"id\" href=\"#syst_va\">syst_va</a>, sizeof(struct <a class=\"id\" href=\"#sfi_table_simple\">sfi_table_simple</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use ioremap now after it is ready */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_use_ioremap\">sfi_use_ioremap</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#syst_va\">syst_va</a> = <a class=\"id\" href=\"#sfi_map_memory\">sfi_map_memory</a>(<a class=\"id\" href=\"#syst_pa\">syst_pa</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_acpi_init\">sfi_acpi_init</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The reason we put it here becasue we need wait till the /sys/firmware</span>", 
"<span class=\"comment\"> * is setup, then our interface can be registered in /sys/firmware/sfi</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#sfi_sysfs_init\">sfi_sysfs_init</a>);", 
];
xr_frag_insert('l/87/f6cfe92b9ad413a7fcb7709b4bc5f38dfbff8b.xr', __xr_tmp);
