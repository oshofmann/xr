var __xr_tmp = [
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * proc_dointvec - read a vector of integers</span>", 
"<span class=\"comment\"> * @table: the sysctl table</span>", 
"<span class=\"comment\"> * @write: %TRUE if this is a write to the sysctl file</span>", 
"<span class=\"comment\"> * @buffer: the user buffer</span>", 
"<span class=\"comment\"> * @lenp: the size of the user buffer</span>", 
"<span class=\"comment\"> * @ppos: file position</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reads/writes up to table-&gt;maxlen/sizeof(unsigned int) integer</span>", 
"<span class=\"comment\"> * values from/to the user buffer, treated as an ASCII string. </span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"    return <a class=\"id\" href=\"#do_proc_dointvec\">do_proc_dointvec</a>(<a class=\"id\" href=\"#table\">table</a>,<a class=\"id\" href=\"#write\">write</a>,<a class=\"id\" href=\"#buffer\">buffer</a>,<a class=\"id\" href=\"#lenp\">lenp</a>,<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <span class=\"ts\"/>    <a class=\"id\" href=\"#NULL\">NULL</a>,<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Taint values can only be increased</span>", 
"<span class=\"comment\"> * This means we can safely use a temporary.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#proc_taint\">proc_taint</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmptaint\">tmptaint</a> = <a class=\"id\" href=\"#get_taint\">get_taint</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a> && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = *<a class=\"id\" href=\"#table\">table</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>.<a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#tmptaint\">tmptaint</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_doulongvec_minmax\">proc_doulongvec_minmax</a>(&amp;<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Poor man's atomic or. Not worth adding a primitive</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to everyone's atomic.h for this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> && <a class=\"id\" href=\"#tmptaint\">tmptaint</a> >> <a class=\"id\" href=\"#i\">i</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#tmptaint\">tmptaint</a> >> <a class=\"id\" href=\"#i\">i</a>) &amp; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_taint\">add_taint</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#do_proc_dointvec_minmax_conv_param\">do_proc_dointvec_minmax_conv_param</a> {", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#min\">min</a>;", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#max\">max</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#do_proc_dointvec_minmax_conv\">do_proc_dointvec_minmax_conv</a>(<a class=\"id\" href=\"#bool\">bool</a> *<a class=\"id\" href=\"#negp\">negp</a>, unsigned long *<a class=\"id\" href=\"#lvalp\">lvalp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#valp\">valp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#write\">write</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#do_proc_dointvec_minmax_conv_param\">do_proc_dointvec_minmax_conv_param</a> *<a class=\"id\" href=\"#param\">param</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a> = *<a class=\"id\" href=\"#negp\">negp</a> ? -*<a class=\"id\" href=\"#lvalp\">lvalp</a> : *<a class=\"id\" href=\"#lvalp\">lvalp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#param\">param</a>-><a class=\"id\" href=\"#min\">min</a> && *<a class=\"id\" href=\"#param\">param</a>-><a class=\"id\" href=\"#min\">min</a> &gt; <a class=\"id\" href=\"#val\">val</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#param\">param</a>-><a class=\"id\" href=\"#max\">max</a> && *<a class=\"id\" href=\"#param\">param</a>-><a class=\"id\" href=\"#max\">max</a> &lt; <a class=\"id\" href=\"#val\">val</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#valp\">valp</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a> = *<a class=\"id\" href=\"#valp\">valp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#negp\">negp</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lvalp\">lvalp</a> = (unsigned long)-<a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#negp\">negp</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lvalp\">lvalp</a> = (unsigned long)<a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * proc_dointvec_minmax - read a vector of integers with min/max values</span>", 
"<span class=\"comment\"> * @table: the sysctl table</span>", 
"<span class=\"comment\"> * @write: %TRUE if this is a write to the sysctl file</span>", 
"<span class=\"comment\"> * @buffer: the user buffer</span>", 
"<span class=\"comment\"> * @lenp: the size of the user buffer</span>", 
"<span class=\"comment\"> * @ppos: file position</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reads/writes up to table-&gt;maxlen/sizeof(unsigned int) integer</span>", 
"<span class=\"comment\"> * values from/to the user buffer, treated as an ASCII string.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine will ensure the values are within the range specified by</span>", 
"<span class=\"comment\"> * table-&gt;extra1 (min) and table-&gt;extra2 (max).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#do_proc_dointvec_minmax_conv_param\">do_proc_dointvec_minmax_conv_param</a> <a class=\"id\" href=\"#param\">param</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#min\">min</a> = (int *) <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#extra1\">extra1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#max\">max</a> = (int *) <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#extra2\">extra2</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_proc_dointvec\">do_proc_dointvec</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_proc_dointvec_minmax_conv\">do_proc_dointvec_minmax_conv</a>, &amp;<a class=\"id\" href=\"#param\">param</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__do_proc_doulongvec_minmax\">__do_proc_doulongvec_minmax</a>(void *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#convmul\">convmul</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#convdiv\">convdiv</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#i\">i</a>, *<a class=\"id\" href=\"#min\">min</a>, *<a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#vleft\">vleft</a>, <a class=\"id\" href=\"#first\">first</a> = 1, <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#page\">page</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#left\">left</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#kbuf\">kbuf</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a> || !<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#maxlen\">maxlen</a> || !*<a class=\"id\" href=\"#lenp\">lenp</a> || (*<a class=\"id\" href=\"#ppos\">ppos</a> && !<a class=\"id\" href=\"#write\">write</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lenp\">lenp</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = (unsigned long *) <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a> = (unsigned long *) <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#extra1\">extra1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = (unsigned long *) <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#extra2\">extra2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vleft\">vleft</a> = <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#maxlen\">maxlen</a> / sizeof(unsigned long);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = *<a class=\"id\" href=\"#lenp\">lenp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#left\">left</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_TEMPORARY\">GFP_TEMPORARY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbuf\">kbuf</a> = (char *) <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kbuf\">kbuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#kbuf\">kbuf</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#left\">left</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free\">free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbuf\">kbuf</a>[<a class=\"id\" href=\"#left\">left</a>] = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#left\">left</a> && <a class=\"id\" href=\"#vleft\">vleft</a>--; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#first\">first</a> = 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#neg\">neg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> -= <a class=\"id\" href=\"#proc_skip_spaces\">proc_skip_spaces</a>(&amp;<a class=\"id\" href=\"#kbuf\">kbuf</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_get_long\">proc_get_long</a>(&amp;<a class=\"id\" href=\"#kbuf\">kbuf</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, &amp;<a class=\"id\" href=\"#val\">val</a>, &amp;<a class=\"id\" href=\"#neg\">neg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#proc_wspace_sep\">proc_wspace_sep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     sizeof(<a class=\"id\" href=\"#proc_wspace_sep\">proc_wspace_sep</a>), <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#neg\">neg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#min\">min</a> && <a class=\"id\" href=\"#val\">val</a> &lt; *<a class=\"id\" href=\"#min\">min</a>) || (<a class=\"id\" href=\"#max\">max</a> && <a class=\"id\" href=\"#val\">val</a> &gt; *<a class=\"id\" href=\"#max\">max</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#convdiv\">convdiv</a> * (*<a class=\"id\" href=\"#i\">i</a>) / <a class=\"id\" href=\"#convmul\">convmul</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_put_char\">proc_put_char</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, '\\t');", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_put_long\">proc_put_long</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#write\">write</a> && !<a class=\"id\" href=\"#first\">first</a> && <a class=\"id\" href=\"#left\">left</a> && !<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_put_char\">proc_put_char</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, '\\n');", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a> && !<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> -= <a class=\"id\" href=\"#proc_skip_spaces\">proc_skip_spaces</a>(&amp;<a class=\"id\" href=\"#kbuf\">kbuf</a>);", 
"<a class=\"id\" href=\"#free\">free</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a> ? : -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#lenp\">lenp</a> -= <a class=\"id\" href=\"#left\">left</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += *<a class=\"id\" href=\"#lenp\">lenp</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#do_proc_doulongvec_minmax\">do_proc_doulongvec_minmax</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#convmul\">convmul</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#convdiv\">convdiv</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__do_proc_doulongvec_minmax\">__do_proc_doulongvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#convmul\">convmul</a>, <a class=\"id\" href=\"#convdiv\">convdiv</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * proc_doulongvec_minmax - read a vector of long integers with min/max values</span>", 
"<span class=\"comment\"> * @table: the sysctl table</span>", 
"<span class=\"comment\"> * @write: %TRUE if this is a write to the sysctl file</span>", 
"<span class=\"comment\"> * @buffer: the user buffer</span>", 
"<span class=\"comment\"> * @lenp: the size of the user buffer</span>", 
"<span class=\"comment\"> * @ppos: file position</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reads/writes up to table-&gt;maxlen/sizeof(unsigned long) unsigned long</span>", 
"<span class=\"comment\"> * values from/to the user buffer, treated as an ASCII string.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine will ensure the values are within the range specified by</span>", 
"<span class=\"comment\"> * table-&gt;extra1 (min) and table-&gt;extra2 (max).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#proc_doulongvec_minmax\">proc_doulongvec_minmax</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"    return <a class=\"id\" href=\"#do_proc_doulongvec_minmax\">do_proc_doulongvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, 1l, 1l);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * proc_doulongvec_ms_jiffies_minmax - read a vector of millisecond values with min/max values</span>", 
"<span class=\"comment\"> * @table: the sysctl table</span>", 
"<span class=\"comment\"> * @write: %TRUE if this is a write to the sysctl file</span>", 
"<span class=\"comment\"> * @buffer: the user buffer</span>", 
"<span class=\"comment\"> * @lenp: the size of the user buffer</span>", 
"<span class=\"comment\"> * @ppos: file position</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reads/writes up to table-&gt;maxlen/sizeof(unsigned long) unsigned long</span>", 
"<span class=\"comment\"> * values from/to the user buffer, treated as an ASCII string. The values</span>", 
"<span class=\"comment\"> * are treated as milliseconds, and converted to jiffies when they are stored.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine will ensure the values are within the range specified by</span>", 
"<span class=\"comment\"> * table-&gt;extra1 (min) and table-&gt;extra2 (max).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#proc_doulongvec_ms_jiffies_minmax\">proc_doulongvec_ms_jiffies_minmax</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"    return <a class=\"id\" href=\"#do_proc_doulongvec_minmax\">do_proc_doulongvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#HZ\">HZ</a>, 1000l);", 
"}", 
"", 
"", 
"static int <a class=\"id\" href=\"#do_proc_dointvec_jiffies_conv\">do_proc_dointvec_jiffies_conv</a>(<a class=\"id\" href=\"#bool\">bool</a> *<a class=\"id\" href=\"#negp\">negp</a>, unsigned long *<a class=\"id\" href=\"#lvalp\">lvalp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int *<a class=\"id\" href=\"#valp\">valp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#write\">write</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#lvalp\">lvalp</a> &gt; <a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a> / <a class=\"id\" href=\"#HZ\">HZ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#valp\">valp</a> = *<a class=\"id\" href=\"#negp\">negp</a> ? -(*<a class=\"id\" href=\"#lvalp\">lvalp</a>*<a class=\"id\" href=\"#HZ\">HZ</a>) : (*<a class=\"id\" href=\"#lvalp\">lvalp</a>*<a class=\"id\" href=\"#HZ\">HZ</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a> = *<a class=\"id\" href=\"#valp\">valp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lval\">lval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#negp\">negp</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lval\">lval</a> = (unsigned long)-<a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#negp\">negp</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lval\">lval</a> = (unsigned long)<a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lvalp\">lvalp</a> = <a class=\"id\" href=\"#lval\">lval</a> / <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#do_proc_dointvec_userhz_jiffies_conv\">do_proc_dointvec_userhz_jiffies_conv</a>(<a class=\"id\" href=\"#bool\">bool</a> *<a class=\"id\" href=\"#negp\">negp</a>, unsigned long *<a class=\"id\" href=\"#lvalp\">lvalp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#valp\">valp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#write\">write</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#USER_HZ\">USER_HZ</a> &lt; <a class=\"id\" href=\"#HZ\">HZ</a> && *<a class=\"id\" href=\"#lvalp\">lvalp</a> &gt; (<a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a> / <a class=\"id\" href=\"#HZ\">HZ</a>) * <a class=\"id\" href=\"#USER_HZ\">USER_HZ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#valp\">valp</a> = <a class=\"id\" href=\"#clock_t_to_jiffies\">clock_t_to_jiffies</a>(*<a class=\"id\" href=\"#negp\">negp</a> ? -*<a class=\"id\" href=\"#lvalp\">lvalp</a> : *<a class=\"id\" href=\"#lvalp\">lvalp</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a> = *<a class=\"id\" href=\"#valp\">valp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lval\">lval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#negp\">negp</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lval\">lval</a> = (unsigned long)-<a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#negp\">negp</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lval\">lval</a> = (unsigned long)<a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lvalp\">lvalp</a> = <a class=\"id\" href=\"#jiffies_to_clock_t\">jiffies_to_clock_t</a>(<a class=\"id\" href=\"#lval\">lval</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#do_proc_dointvec_ms_jiffies_conv\">do_proc_dointvec_ms_jiffies_conv</a>(<a class=\"id\" href=\"#bool\">bool</a> *<a class=\"id\" href=\"#negp\">negp</a>, unsigned long *<a class=\"id\" href=\"#lvalp\">lvalp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int *<a class=\"id\" href=\"#valp\">valp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#write\">write</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#valp\">valp</a> = <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(*<a class=\"id\" href=\"#negp\">negp</a> ? -*<a class=\"id\" href=\"#lvalp\">lvalp</a> : *<a class=\"id\" href=\"#lvalp\">lvalp</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a> = *<a class=\"id\" href=\"#valp\">valp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lval\">lval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#negp\">negp</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lval\">lval</a> = (unsigned long)-<a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#negp\">negp</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lval\">lval</a> = (unsigned long)<a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lvalp\">lvalp</a> = <a class=\"id\" href=\"#jiffies_to_msecs\">jiffies_to_msecs</a>(<a class=\"id\" href=\"#lval\">lval</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * proc_dointvec_jiffies - read a vector of integers as seconds</span>", 
"<span class=\"comment\"> * @table: the sysctl table</span>", 
"<span class=\"comment\"> * @write: %TRUE if this is a write to the sysctl file</span>", 
"<span class=\"comment\"> * @buffer: the user buffer</span>", 
"<span class=\"comment\"> * @lenp: the size of the user buffer</span>", 
"<span class=\"comment\"> * @ppos: file position</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reads/writes up to table-&gt;maxlen/sizeof(unsigned int) integer</span>", 
"<span class=\"comment\"> * values from/to the user buffer, treated as an ASCII string. </span>", 
"<span class=\"comment\"> * The values read are assumed to be in seconds, and are converted into</span>", 
"<span class=\"comment\"> * jiffies.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#proc_dointvec_jiffies\">proc_dointvec_jiffies</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"    return <a class=\"id\" href=\"#do_proc_dointvec\">do_proc_dointvec</a>(<a class=\"id\" href=\"#table\">table</a>,<a class=\"id\" href=\"#write\">write</a>,<a class=\"id\" href=\"#buffer\">buffer</a>,<a class=\"id\" href=\"#lenp\">lenp</a>,<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <span class=\"ts\"/>    <a class=\"id\" href=\"#do_proc_dointvec_jiffies_conv\">do_proc_dointvec_jiffies_conv</a>,<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * proc_dointvec_userhz_jiffies - read a vector of integers as 1/USER_HZ seconds</span>", 
"<span class=\"comment\"> * @table: the sysctl table</span>", 
"<span class=\"comment\"> * @write: %TRUE if this is a write to the sysctl file</span>", 
"<span class=\"comment\"> * @buffer: the user buffer</span>", 
"<span class=\"comment\"> * @lenp: the size of the user buffer</span>", 
"<span class=\"comment\"> * @ppos: pointer to the file position</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reads/writes up to table-&gt;maxlen/sizeof(unsigned int) integer</span>", 
"<span class=\"comment\"> * values from/to the user buffer, treated as an ASCII string. </span>", 
"<span class=\"comment\"> * The values read are assumed to be in 1/USER_HZ seconds, and </span>", 
"<span class=\"comment\"> * are converted into jiffies.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#proc_dointvec_userhz_jiffies\">proc_dointvec_userhz_jiffies</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"    return <a class=\"id\" href=\"#do_proc_dointvec\">do_proc_dointvec</a>(<a class=\"id\" href=\"#table\">table</a>,<a class=\"id\" href=\"#write\">write</a>,<a class=\"id\" href=\"#buffer\">buffer</a>,<a class=\"id\" href=\"#lenp\">lenp</a>,<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <span class=\"ts\"/>    <a class=\"id\" href=\"#do_proc_dointvec_userhz_jiffies_conv\">do_proc_dointvec_userhz_jiffies_conv</a>,<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * proc_dointvec_ms_jiffies - read a vector of integers as 1 milliseconds</span>", 
"<span class=\"comment\"> * @table: the sysctl table</span>", 
"<span class=\"comment\"> * @write: %TRUE if this is a write to the sysctl file</span>", 
"<span class=\"comment\"> * @buffer: the user buffer</span>", 
"<span class=\"comment\"> * @lenp: the size of the user buffer</span>", 
"<span class=\"comment\"> * @ppos: file position</span>", 
"<span class=\"comment\"> * @ppos: the current position in the file</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reads/writes up to table-&gt;maxlen/sizeof(unsigned int) integer</span>", 
"<span class=\"comment\"> * values from/to the user buffer, treated as an ASCII string. </span>", 
"<span class=\"comment\"> * The values read are assumed to be in 1/1000 seconds, and </span>", 
"<span class=\"comment\"> * are converted into jiffies.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#proc_dointvec_ms_jiffies\">proc_dointvec_ms_jiffies</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_proc_dointvec\">do_proc_dointvec</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_proc_dointvec_ms_jiffies_conv\">do_proc_dointvec_ms_jiffies_conv</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#proc_do_cad_pid\">proc_do_cad_pid</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#new_pid\">new_pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#pid_vnr\">pid_vnr</a>(<a class=\"id\" href=\"#cad_pid\">cad_pid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#__do_proc_dointvec\">__do_proc_dointvec</a>(&amp;<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a> || !<a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_pid\">new_pid</a> = <a class=\"id\" href=\"#find_get_pid\">find_get_pid</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_pid\">new_pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_pid\">put_pid</a>(<a class=\"id\" href=\"#xchg\">xchg</a>(&amp;<a class=\"id\" href=\"#cad_pid\">cad_pid</a>, <a class=\"id\" href=\"#new_pid\">new_pid</a>));", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * proc_do_large_bitmap - read/write from/to a large bitmap</span>", 
"<span class=\"comment\"> * @table: the sysctl table</span>", 
"<span class=\"comment\"> * @write: %TRUE if this is a write to the sysctl file</span>", 
"<span class=\"comment\"> * @buffer: the user buffer</span>", 
"<span class=\"comment\"> * @lenp: the size of the user buffer</span>", 
"<span class=\"comment\"> * @ppos: file position</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The bitmap is stored at table-&gt;data and the bitmap length (in bits)</span>", 
"<span class=\"comment\"> * in table-&gt;maxlen.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We use a range comma separated format (e.g. 1,3-4,10-10) so that</span>", 
"<span class=\"comment\"> * large bitmaps may be represented in a compact manner. Writing into</span>", 
"<span class=\"comment\"> * the file will clear the bitmap then update it with the given input.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#proc_do_large_bitmap\">proc_do_large_bitmap</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#first\">first</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#left\">left</a> = *<a class=\"id\" href=\"#lenp\">lenp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bitmap_len\">bitmap_len</a> = <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#maxlen\">maxlen</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a> = (unsigned long *) <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#tmp_bitmap\">tmp_bitmap</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#tr_a\">tr_a</a>[] = { '-', ',', '\\n' }, <a class=\"id\" href=\"#tr_b\">tr_b</a>[] = { ',', '\\n', 0 }, <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap_len\">bitmap_len</a> || !<a class=\"id\" href=\"#left\">left</a> || (*<a class=\"id\" href=\"#ppos\">ppos</a> && !<a class=\"id\" href=\"#write\">write</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lenp\">lenp</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#page\">page</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#kbuf\">kbuf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#left\">left</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_TEMPORARY\">GFP_TEMPORARY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbuf\">kbuf</a> = (char *) <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kbuf\">kbuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#kbuf\">kbuf</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#left\">left</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"                }", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbuf\">kbuf</a>[<a class=\"id\" href=\"#left\">left</a>] = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp_bitmap\">tmp_bitmap</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#bitmap_len\">bitmap_len</a>) * sizeof(unsigned long),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tmp_bitmap\">tmp_bitmap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#proc_skip_char\">proc_skip_char</a>(&amp;<a class=\"id\" href=\"#kbuf\">kbuf</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, '\\n');", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#err\">err</a> && <a class=\"id\" href=\"#left\">left</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val_a\">val_a</a>, <a class=\"id\" href=\"#val_b\">val_b</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#neg\">neg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_get_long\">proc_get_long</a>(&amp;<a class=\"id\" href=\"#kbuf\">kbuf</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, &amp;<a class=\"id\" href=\"#val_a\">val_a</a>, &amp;<a class=\"id\" href=\"#neg\">neg</a>, <a class=\"id\" href=\"#tr_a\">tr_a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     sizeof(<a class=\"id\" href=\"#tr_a\">tr_a</a>), &amp;<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val_a\">val_a</a> >= <a class=\"id\" href=\"#bitmap_len\">bitmap_len</a> || <a class=\"id\" href=\"#neg\">neg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val_b\">val_b</a> = <a class=\"id\" href=\"#val_a\">val_a</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#left\">left</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbuf\">kbuf</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> == '-') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_get_long\">proc_get_long</a>(&amp;<a class=\"id\" href=\"#kbuf\">kbuf</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, &amp;<a class=\"id\" href=\"#val_b\">val_b</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#neg\">neg</a>, <a class=\"id\" href=\"#tr_b\">tr_b</a>, sizeof(<a class=\"id\" href=\"#tr_b\">tr_b</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val_b\">val_b</a> >= <a class=\"id\" href=\"#bitmap_len\">bitmap_len</a> || <a class=\"id\" href=\"#neg\">neg</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#val_a\">val_a</a> &gt; <a class=\"id\" href=\"#val_b\">val_b</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#left\">left</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbuf\">kbuf</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#val_a\">val_a</a> <= <a class=\"id\" href=\"#val_b\">val_b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#val_a\">val_a</a>++, <a class=\"id\" href=\"#tmp_bitmap\">tmp_bitmap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#proc_skip_char\">proc_skip_char</a>(&amp;<a class=\"id\" href=\"#kbuf\">kbuf</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, '\\n');", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bit_a\">bit_a</a>, <a class=\"id\" href=\"#bit_b\">bit_b</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#left\">left</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bit_a\">bit_a</a> = <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#bitmap_len\">bitmap_len</a>, <a class=\"id\" href=\"#bit_b\">bit_b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bit_a\">bit_a</a> >= <a class=\"id\" href=\"#bitmap_len\">bitmap_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bit_b\">bit_b</a> = <a class=\"id\" href=\"#find_next_zero_bit\">find_next_zero_bit</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#bitmap_len\">bitmap_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#bit_a\">bit_a</a> + 1) - 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#first\">first</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_put_char\">proc_put_char</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, ',');", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_put_long\">proc_put_long</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, <a class=\"id\" href=\"#bit_a\">bit_a</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bit_a\">bit_a</a> != <a class=\"id\" href=\"#bit_b\">bit_b</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_put_char\">proc_put_char</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, '-');", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_put_long\">proc_put_long</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, <a class=\"id\" href=\"#bit_b\">bit_b</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = 0; <a class=\"id\" href=\"#bit_b\">bit_b</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#proc_put_char\">proc_put_char</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>, &amp;<a class=\"id\" href=\"#left\">left</a>, '\\n');", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_or\">bitmap_or</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#tmp_bitmap\">tmp_bitmap</a>, <a class=\"id\" href=\"#bitmap_len\">bitmap_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#tmp_bitmap\">tmp_bitmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#bitmap_len\">bitmap_len</a>) * sizeof(unsigned long));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tmp_bitmap\">tmp_bitmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lenp\">lenp</a> -= <a class=\"id\" href=\"#left\">left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += *<a class=\"id\" href=\"#lenp\">lenp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tmp_bitmap\">tmp_bitmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#else <span class=\"comment\">/* CONFIG_PROC_FS */</span>", 
"", 
"int <a class=\"id\" href=\"#proc_dostring\">proc_dostring</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#proc_dointvec_jiffies\">proc_dointvec_jiffies</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#proc_dointvec_userhz_jiffies\">proc_dointvec_userhz_jiffies</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#proc_dointvec_ms_jiffies\">proc_dointvec_ms_jiffies</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#proc_doulongvec_minmax\">proc_doulongvec_minmax</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#proc_doulongvec_ms_jiffies_minmax\">proc_doulongvec_ms_jiffies_minmax</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"    return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PROC_FS */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * No sense putting this after each symbol definition, twice,</span>", 
"<span class=\"comment\"> * exception granted :-)</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#proc_dointvec\">proc_dointvec</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#proc_dointvec_jiffies\">proc_dointvec_jiffies</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#proc_dointvec_userhz_jiffies\">proc_dointvec_userhz_jiffies</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#proc_dointvec_ms_jiffies\">proc_dointvec_ms_jiffies</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#proc_dostring\">proc_dostring</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#proc_doulongvec_minmax\">proc_doulongvec_minmax</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#proc_doulongvec_ms_jiffies_minmax\">proc_doulongvec_ms_jiffies_minmax</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_sysctl_table\">register_sysctl_table</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_sysctl_paths\">register_sysctl_paths</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_sysctl_table\">unregister_sysctl_table</a>);", 
];
xr_frag_insert('l/88/1ee555b3473d307ae7ef7b43d943fe5f9ee5a5.xr', __xr_tmp);
