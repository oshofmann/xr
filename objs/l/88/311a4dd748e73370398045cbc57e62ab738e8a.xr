var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> |= <a class=\"id\" href=\"#UART_NATSEMI\">UART_NATSEMI</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No EFR.  Try to detect a TI16750, which only sets bit 5 of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the IIR when 64 byte FIFO mode is enabled when DLAB is set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try setting it with and without DLAB set.  Cheap clones</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set bit 5 without DLAB set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_FCR\">UART_FCR</a>, <a class=\"id\" href=\"#UART_FCR_ENABLE_FIFO\">UART_FCR_ENABLE_FIFO</a> | <a class=\"id\" href=\"#UART_FCR7_64BYTE\">UART_FCR7_64BYTE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status1\">status1</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IIR\">UART_IIR</a>) >> 5;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_FCR\">UART_FCR</a>, <a class=\"id\" href=\"#UART_FCR_ENABLE_FIFO\">UART_FCR_ENABLE_FIFO</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, <a class=\"id\" href=\"#UART_LCR_DLAB\">UART_LCR_DLAB</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_FCR\">UART_FCR</a>, <a class=\"id\" href=\"#UART_FCR_ENABLE_FIFO\">UART_FCR_ENABLE_FIFO</a> | <a class=\"id\" href=\"#UART_FCR7_64BYTE\">UART_FCR7_64BYTE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status2\">status2</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IIR\">UART_IIR</a>) >> 5;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_FCR\">UART_FCR</a>, <a class=\"id\" href=\"#UART_FCR_ENABLE_FIFO\">UART_FCR_ENABLE_FIFO</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_AUTOCONF\">DEBUG_AUTOCONF</a>(\"iir1=%d iir2=%d \", <a class=\"id\" href=\"#status1\">status1</a>, <a class=\"id\" href=\"#status2\">status2</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status1\">status1</a> == 6 && <a class=\"id\" href=\"#status2\">status2</a> == 7) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PORT_16750\">PORT_16750</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> |= <a class=\"id\" href=\"#UART_CAP_AFE\">UART_CAP_AFE</a> | <a class=\"id\" href=\"#UART_CAP_SLEEP\">UART_CAP_SLEEP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try writing and reading the UART_IER_UUE bit (b6).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If it works, this is probably one of the Xscale platform's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * internal UARTs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We're going to explicitly set the UUE bit to 0 before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * trying to write and read a 1 just to make sure it's not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already a 1 and maybe locked there before we even start start.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iersave\">iersave</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#iersave\">iersave</a> &amp; ~<a class=\"id\" href=\"#UART_IER_UUE\">UART_IER_UUE</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>) &amp; <a class=\"id\" href=\"#UART_IER_UUE\">UART_IER_UUE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * OK it's in a known zero state, try writing and reading</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * without disturbing the current state of the other bits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#iersave\">iersave</a> | <a class=\"id\" href=\"#UART_IER_UUE\">UART_IER_UUE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>) &amp; <a class=\"id\" href=\"#UART_IER_UUE\">UART_IER_UUE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * It's an Xscale.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We'll leave the UART_IER_UUE bit set to 1 (enabled).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_AUTOCONF\">DEBUG_AUTOCONF</a>(\"Xscale \");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PORT_XSCALE\">PORT_XSCALE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> |= <a class=\"id\" href=\"#UART_CAP_UUE\">UART_CAP_UUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we got here we couldn't force the IER_UUE bit to 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Log it and continue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_AUTOCONF\">DEBUG_AUTOCONF</a>(\"Couldn't force IER_UUE to 0 \");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#iersave\">iersave</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We distinguish between 16550A and U6 16550A by counting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * how many bytes are in the FIFO.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PORT_16550A\">PORT_16550A</a> && <a class=\"id\" href=\"#size_fifo\">size_fifo</a>(<a class=\"id\" href=\"#up\">up</a>) == 64) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PORT_U6_16550A\">PORT_U6_16550A</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> |= <a class=\"id\" href=\"#UART_CAP_AFE\">UART_CAP_AFE</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This routine is called by rs_init() to initialize a specific serial</span>", 
"<span class=\"comment\"> * port.  It determines what type of UART chip this serial port is</span>", 
"<span class=\"comment\"> * using: 8250, 16450, 16550, 16550A.  The important question is</span>", 
"<span class=\"comment\"> * whether or not this UART is a 16550A or not, since this will</span>", 
"<span class=\"comment\"> * determine whether or not we can use its FIFO features or not.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#autoconfig\">autoconfig</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>, unsigned int <a class=\"id\" href=\"#probeflags\">probeflags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#status1\">status1</a>, <a class=\"id\" href=\"#scratch\">scratch</a>, <a class=\"id\" href=\"#scratch2\">scratch2</a>, <a class=\"id\" href=\"#scratch3\">scratch3</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#save_lcr\">save_lcr</a>, <a class=\"id\" href=\"#save_mcr\">save_mcr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#iobase\">iobase</a> && !<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#mapbase\">mapbase</a> && !<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#membase\">membase</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_AUTOCONF\">DEBUG_AUTOCONF</a>(\"ttyS%d: autoconf (0x%04lx, 0x%p): \",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#serial_index\">serial_index</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>), <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#iobase\">iobase</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#membase\">membase</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We really do need global IRQs disabled here - we're going to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be frobbing the chips IRQ enable register to see if it exists.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#bugs\">bugs</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#UPF_BUGGY_UART\">UPF_BUGGY_UART</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do a simple existence test first; if we fail this,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * there's no point trying anything else.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 0x80 is used as a nonsense port to prevent against</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * false positives due to ISA bus float.  The</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * assumption is that 0x80 is a non-existent port;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * which should be safe since include/asm/io.h also</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * makes this assumption.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note: this is safe as long as MCR bit 4 is clear</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and the device is in \"PC\" mode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scratch\">scratch</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, 0);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__i386__\">__i386__</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(0xff, 0x080);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Mask out IER[7:4] bits for test as some UARTs (e.g. TL</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 16C754B) allow only to modify them if an EFR bit is set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scratch2\">scratch2</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>) &amp; 0x0f;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, 0x0F);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__i386__\">__i386__</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(0, 0x080);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scratch3\">scratch3</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>) &amp; 0x0f;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#scratch\">scratch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scratch2\">scratch2</a> != 0 || <a class=\"id\" href=\"#scratch3\">scratch3</a> != 0x0F) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We failed; there's nothing here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_AUTOCONF\">DEBUG_AUTOCONF</a>(\"IER test failed (%02x, %02x) \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#scratch2\">scratch2</a>, <a class=\"id\" href=\"#scratch3\">scratch3</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_mcr\">save_mcr</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_lcr\">save_lcr</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check to see if a UART is really there.  Certain broken</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * internal modems based on the Rockwell chipset fail this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * test, because they apparently don't implement the loopback</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * test mode.  So this test is skipped on the COM 1 through</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * COM 4 ports.  This *should* be safe, since no board</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * manufacturer would be stupid enough to design a board</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that conflicts with COM 1-4 --- we hope!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#UPF_SKIP_TEST\">UPF_SKIP_TEST</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>, <a class=\"id\" href=\"#UART_MCR_LOOP\">UART_MCR_LOOP</a> | 0x0A);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status1\">status1</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MSR\">UART_MSR</a>) &amp; 0xF0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>, <a class=\"id\" href=\"#save_mcr\">save_mcr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status1\">status1</a> != 0x90) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_AUTOCONF\">DEBUG_AUTOCONF</a>(\"LOOP test failed (%02x) \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#status1\">status1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We're pretty sure there's a port here.  Lets find out what</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * type of port it is.  The IIR top two bits allows us to find</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * out if it's 8250 or 16450, 16550, 16550A or later.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * determines what we test for next.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We also initialise the EFR (if any) to zero for later.  The</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * EFR occupies the same register location as the FCR and IIR.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0xBF);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_EFR\">UART_EFR</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_FCR\">UART_FCR</a>, <a class=\"id\" href=\"#UART_FCR_ENABLE_FIFO\">UART_FCR_ENABLE_FIFO</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scratch\">scratch</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IIR\">UART_IIR</a>) >> 6;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_AUTOCONF\">DEBUG_AUTOCONF</a>(\"iir=%d \", <a class=\"id\" href=\"#scratch\">scratch</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#scratch\">scratch</a>) {", 
"<span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#autoconfig_8250\">autoconfig_8250</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PORT_UNKNOWN\">PORT_UNKNOWN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PORT_16550\">PORT_16550</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 3:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#autoconfig_16550a\">autoconfig_16550a</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SERIAL_8250_RSA\">CONFIG_SERIAL_8250_RSA</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only probe for RSA ports if we got the region.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PORT_16550A\">PORT_16550A</a> && <a class=\"id\" href=\"#probeflags\">probeflags</a> &amp; <a class=\"id\" href=\"#PROBE_RSA\">PROBE_RSA</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0 ; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#probe_rsa_count\">probe_rsa_count</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#probe_rsa\">probe_rsa</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#iobase\">iobase</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__enable_rsa\">__enable_rsa</a>(<a class=\"id\" href=\"#up\">up</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PORT_RSA\">PORT_RSA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, <a class=\"id\" href=\"#save_lcr\">save_lcr</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> != <a class=\"id\" href=\"#uart_config\">uart_config</a>[<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#flags\">flags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"ttyS%d: detected caps %08x should be %08x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#serial_index\">serial_index</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>), <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#uart_config\">uart_config</a>[<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#fifosize\">fifosize</a> = <a class=\"id\" href=\"#uart_config\">uart_config</a>[<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#fifo_size\">fifo_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> = <a class=\"id\" href=\"#uart_config\">uart_config</a>[<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#tx_loadsz\">tx_loadsz</a> = <a class=\"id\" href=\"#uart_config\">uart_config</a>[<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#tx_loadsz\">tx_loadsz</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PORT_UNKNOWN\">PORT_UNKNOWN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reset the UART.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SERIAL_8250_RSA\">CONFIG_SERIAL_8250_RSA</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PORT_RSA\">PORT_RSA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_RSA_FRR\">UART_RSA_FRR</a>, 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>, <a class=\"id\" href=\"#save_mcr\">save_mcr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial8250_clear_fifos\">serial8250_clear_fifos</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_RX\">UART_RX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> &amp; <a class=\"id\" href=\"#UART_CAP_UUE\">UART_CAP_UUE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#UART_IER_UUE\">UART_IER_UUE</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, 0);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_AUTOCONF\">DEBUG_AUTOCONF</a>(\"type=%s\\n\", <a class=\"id\" href=\"#uart_config\">uart_config</a>[<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#autoconfig_irq\">autoconfig_irq</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#save_mcr\">save_mcr</a>, <a class=\"id\" href=\"#save_ier\">save_ier</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#save_ICP\">save_ICP</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ICP\">ICP</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#irqs\">irqs</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#irq\">irq</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#UPF_FOURPORT\">UPF_FOURPORT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ICP\">ICP</a> = (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#iobase\">iobase</a> &amp; 0xfe0) | 0x1f;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save_ICP\">save_ICP</a> = <a class=\"id\" href=\"#inb_p\">inb_p</a>(<a class=\"id\" href=\"#ICP\">ICP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb_p\">outb_p</a>(0x80, <a class=\"id\" href=\"#ICP\">ICP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>(void) <a class=\"id\" href=\"#inb_p\">inb_p</a>(<a class=\"id\" href=\"#ICP\">ICP</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* forget possible initially masked and pending IRQ */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#probe_irq_off\">probe_irq_off</a>(<a class=\"id\" href=\"#probe_irq_on\">probe_irq_on</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_mcr\">save_mcr</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_ier\">save_ier</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>, <a class=\"id\" href=\"#UART_MCR_OUT1\">UART_MCR_OUT1</a> | <a class=\"id\" href=\"#UART_MCR_OUT2\">UART_MCR_OUT2</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irqs\">irqs</a> = <a class=\"id\" href=\"#probe_irq_on\">probe_irq_on</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(10);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#UPF_FOURPORT\">UPF_FOURPORT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#UART_MCR_DTR\">UART_MCR_DTR</a> | <a class=\"id\" href=\"#UART_MCR_RTS\">UART_MCR_RTS</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#UART_MCR_DTR\">UART_MCR_DTR</a> | <a class=\"id\" href=\"#UART_MCR_RTS\">UART_MCR_RTS</a> | <a class=\"id\" href=\"#UART_MCR_OUT2\">UART_MCR_OUT2</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, 0x0f);<span class=\"ts\"/><span class=\"comment\">/* enable all intrs */</span>", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LSR\">UART_LSR</a>);", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_RX\">UART_RX</a>);", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IIR\">UART_IIR</a>);", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MSR\">UART_MSR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_TX\">UART_TX</a>, 0xFF);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(20);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#probe_irq_off\">probe_irq_off</a>(<a class=\"id\" href=\"#irqs\">irqs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>, <a class=\"id\" href=\"#save_mcr\">save_mcr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#save_ier\">save_ier</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#UPF_FOURPORT\">UPF_FOURPORT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb_p\">outb_p</a>(<a class=\"id\" href=\"#save_ICP\">save_ICP</a>, <a class=\"id\" href=\"#ICP\">ICP</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#irq\">irq</a> = (<a class=\"id\" href=\"#irq\">irq</a> &gt; 0) ? <a class=\"id\" href=\"#irq\">irq</a> : 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__stop_tx\">__stop_tx</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ier\">ier</a> &amp; <a class=\"id\" href=\"#UART_IER_THRI\">UART_IER_THRI</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ier\">ier</a> &= ~<a class=\"id\" href=\"#UART_IER_THRI\">UART_IER_THRI</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ier\">ier</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#serial8250_stop_tx\">serial8250_stop_tx</a>(struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a> = (struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *)<a class=\"id\" href=\"#port\">port</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__stop_tx\">__stop_tx</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We really want to stop the transmitter from sending.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PORT_16C950\">PORT_16C950</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#acr\">acr</a> |= <a class=\"id\" href=\"#UART_ACR_TXDIS\">UART_ACR_TXDIS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_icr_write\">serial_icr_write</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_ACR\">UART_ACR</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#acr\">acr</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#transmit_chars\">transmit_chars</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>);", 
"", 
"static void <a class=\"id\" href=\"#serial8250_start_tx\">serial8250_start_tx</a>(struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a> = (struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *)<a class=\"id\" href=\"#port\">port</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#ier\">ier</a> &amp; <a class=\"id\" href=\"#UART_IER_THRI\">UART_IER_THRI</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#ier\">ier</a> |= <a class=\"id\" href=\"#UART_IER_THRI\">UART_IER_THRI</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#ier\">ier</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#bugs\">bugs</a> &amp; <a class=\"id\" href=\"#UART_BUG_TXEN\">UART_BUG_TXEN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#lsr\">lsr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lsr\">lsr</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LSR\">UART_LSR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#lsr_saved_flags\">lsr_saved_flags</a> |= <a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#LSR_SAVE_FLAGS\">LSR_SAVE_FLAGS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PORT_RM9000\">PORT_RM9000</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#UART_LSR_THRE\">UART_LSR_THRE</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#UART_LSR_TEMT\">UART_LSR_TEMT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transmit_chars\">transmit_chars</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Re-enable the transmitter if we disabled it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PORT_16C950\">PORT_16C950</a> && <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#acr\">acr</a> &amp; <a class=\"id\" href=\"#UART_ACR_TXDIS\">UART_ACR_TXDIS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#acr\">acr</a> &= ~<a class=\"id\" href=\"#UART_ACR_TXDIS\">UART_ACR_TXDIS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_icr_write\">serial_icr_write</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_ACR\">UART_ACR</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#acr\">acr</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#serial8250_stop_rx\">serial8250_stop_rx</a>(struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a> = (struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *)<a class=\"id\" href=\"#port\">port</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#ier\">ier</a> &= ~<a class=\"id\" href=\"#UART_IER_RLSI\">UART_IER_RLSI</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#read_status_mask\">read_status_mask</a> &= ~<a class=\"id\" href=\"#UART_LSR_DR\">UART_LSR_DR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#ier\">ier</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#serial8250_enable_ms\">serial8250_enable_ms</a>(struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a> = (struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *)<a class=\"id\" href=\"#port\">port</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* no MSR capabilities */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#bugs\">bugs</a> &amp; <a class=\"id\" href=\"#UART_BUG_NOMSR\">UART_BUG_NOMSR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#ier\">ier</a> |= <a class=\"id\" href=\"#UART_IER_MSI\">UART_IER_MSI</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#ier\">ier</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#receive_chars\">receive_chars</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>, unsigned int *<a class=\"id\" href=\"#status\">status</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#tty\">tty</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#ch\">ch</a>, <a class=\"id\" href=\"#lsr\">lsr</a> = *<a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_count\">max_count</a> = 256;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#flag\">flag</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#UART_LSR_DR\">UART_LSR_DR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ch\">ch</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_RX\">UART_RX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Intel 82571 has a Serial Over Lan device that will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * set UART_LSR_BI without setting UART_LSR_DR when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * it receives a break. To avoid reading from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * receive buffer without UART_LSR_DR bit set, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * just force the read character to be 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ch\">ch</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a> = <a class=\"id\" href=\"#TTY_NORMAL\">TTY_NORMAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#icount\">icount</a>.<a class=\"id\" href=\"#rx\">rx</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lsr\">lsr</a> |= <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#lsr_saved_flags\">lsr_saved_flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#lsr_saved_flags\">lsr_saved_flags</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#UART_LSR_BRK_ERROR_BITS\">UART_LSR_BRK_ERROR_BITS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * For statistics only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#UART_LSR_BI\">UART_LSR_BI</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lsr\">lsr</a> &= ~(<a class=\"id\" href=\"#UART_LSR_FE\">UART_LSR_FE</a> | <a class=\"id\" href=\"#UART_LSR_PE\">UART_LSR_PE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#icount\">icount</a>.<a class=\"id\" href=\"#brk\">brk</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We do the SysRQ and SAK checking</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * here because otherwise the break</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * may get masked by ignore_status_mask</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * or read_status_mask.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#uart_handle_break\">uart_handle_break</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#ignore_char\">ignore_char</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#UART_LSR_PE\">UART_LSR_PE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#icount\">icount</a>.<a class=\"id\" href=\"#parity\">parity</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#UART_LSR_FE\">UART_LSR_FE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#icount\">icount</a>.<a class=\"id\" href=\"#frame\">frame</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#UART_LSR_OE\">UART_LSR_OE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#icount\">icount</a>.<a class=\"id\" href=\"#overrun\">overrun</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Mask off conditions which should be ignored.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lsr\">lsr</a> &= <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#read_status_mask\">read_status_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#UART_LSR_BI\">UART_LSR_BI</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_INTR\">DEBUG_INTR</a>(\"handling break....\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a> = <a class=\"id\" href=\"#TTY_BREAK\">TTY_BREAK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#UART_LSR_PE\">UART_LSR_PE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a> = <a class=\"id\" href=\"#TTY_PARITY\">TTY_PARITY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#lsr\">lsr</a> &amp; <a class=\"id\" href=\"#UART_LSR_FE\">UART_LSR_FE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a> = <a class=\"id\" href=\"#TTY_FRAME\">TTY_FRAME</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#uart_handle_sysrq_char\">uart_handle_sysrq_char</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#ch\">ch</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#ignore_char\">ignore_char</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uart_insert_char\">uart_insert_char</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#lsr\">lsr</a>, <a class=\"id\" href=\"#UART_LSR_OE\">UART_LSR_OE</a>, <a class=\"id\" href=\"#ch\">ch</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"", 
"<a class=\"id\" href=\"#ignore_char\">ignore_char</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lsr\">lsr</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LSR\">UART_LSR</a>);", 
"<span class=\"ts\"/>} while ((<a class=\"id\" href=\"#lsr\">lsr</a> &amp; (<a class=\"id\" href=\"#UART_LSR_DR\">UART_LSR_DR</a> | <a class=\"id\" href=\"#UART_LSR_BI\">UART_LSR_BI</a>)) && (<a class=\"id\" href=\"#max_count\">max_count</a>-- &gt; 0));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty_flip_buffer_push\">tty_flip_buffer_push</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#lsr\">lsr</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#transmit_chars\">transmit_chars</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#circ_buf\">circ_buf</a> *<a class=\"id\" href=\"#xmit\">xmit</a> = &amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#xmit\">xmit</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#x_char\">x_char</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_TX\">UART_TX</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#x_char\">x_char</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#icount\">icount</a>.<a class=\"id\" href=\"#tx\">tx</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#x_char\">x_char</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uart_tx_stopped\">uart_tx_stopped</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial8250_stop_tx\">serial8250_stop_tx</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uart_circ_empty\">uart_circ_empty</a>(<a class=\"id\" href=\"#xmit\">xmit</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__stop_tx\">__stop_tx</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#tx_loadsz\">tx_loadsz</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_TX\">UART_TX</a>, <a class=\"id\" href=\"#xmit\">xmit</a>-><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#xmit\">xmit</a>-><a class=\"id\" href=\"#tail\">tail</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xmit\">xmit</a>-><a class=\"id\" href=\"#tail\">tail</a> = (<a class=\"id\" href=\"#xmit\">xmit</a>-><a class=\"id\" href=\"#tail\">tail</a> + 1) &amp; (<a class=\"id\" href=\"#UART_XMIT_SIZE\">UART_XMIT_SIZE</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#icount\">icount</a>.<a class=\"id\" href=\"#tx\">tx</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#uart_circ_empty\">uart_circ_empty</a>(<a class=\"id\" href=\"#xmit\">xmit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>} while (--<a class=\"id\" href=\"#count\">count</a> &gt; 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uart_circ_chars_pending\">uart_circ_chars_pending</a>(<a class=\"id\" href=\"#xmit\">xmit</a>) &lt; <a class=\"id\" href=\"#WAKEUP_CHARS\">WAKEUP_CHARS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uart_write_wakeup\">uart_write_wakeup</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_INTR\">DEBUG_INTR</a>(\"THRE...\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uart_circ_empty\">uart_circ_empty</a>(<a class=\"id\" href=\"#xmit\">xmit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__stop_tx\">__stop_tx</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#check_modem_status\">check_modem_status</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MSR\">UART_MSR</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#msr_saved_flags\">msr_saved_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#msr_saved_flags\">msr_saved_flags</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#UART_MSR_ANY_DELTA\">UART_MSR_ANY_DELTA</a> && <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#ier\">ier</a> &amp; <a class=\"id\" href=\"#UART_IER_MSI\">UART_IER_MSI</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#UART_MSR_TERI\">UART_MSR_TERI</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#icount\">icount</a>.<a class=\"id\" href=\"#rng\">rng</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#UART_MSR_DDSR\">UART_MSR_DDSR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#icount\">icount</a>.<a class=\"id\" href=\"#dsr\">dsr</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#UART_MSR_DDCD\">UART_MSR_DDCD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uart_handle_dcd_change\">uart_handle_dcd_change</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#UART_MSR_DCD\">UART_MSR_DCD</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#UART_MSR_DCTS\">UART_MSR_DCTS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uart_handle_cts_change\">uart_handle_cts_change</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#UART_MSR_CTS\">UART_MSR_CTS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#delta_msr_wait\">delta_msr_wait</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This handles the interrupt from one port.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#serial8250_handle_port\">serial8250_handle_port</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LSR\">UART_LSR</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_INTR\">DEBUG_INTR</a>(\"status = %x...\", <a class=\"id\" href=\"#status\">status</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &amp; (<a class=\"id\" href=\"#UART_LSR_DR\">UART_LSR_DR</a> | <a class=\"id\" href=\"#UART_LSR_BI\">UART_LSR_BI</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#receive_chars\">receive_chars</a>(<a class=\"id\" href=\"#up\">up</a>, &amp;<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_modem_status\">check_modem_status</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#UART_LSR_THRE\">UART_LSR_THRE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transmit_chars\">transmit_chars</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the serial driver's interrupt routine.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arjan thinks the old way was overly complex, so it got simplified.</span>", 
"<span class=\"comment\"> * Alan disagrees, saying that need the complexity to handle the weird</span>", 
"<span class=\"comment\"> * nature of ISA shared interrupts.  (This is a special exception.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In order to handle ISA shared interrupts properly, we need to check</span>", 
"<span class=\"comment\"> * that all ports have been serviced, and therefore the ISA interrupt</span>", 
"<span class=\"comment\"> * line has been de-asserted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This means we need to loop through all ports. checking that they</span>", 
"<span class=\"comment\"> * don't have an interrupt pending.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#irqreturn_t\">irqreturn_t</a> <a class=\"id\" href=\"#serial8250_interrupt\">serial8250_interrupt</a>(int <a class=\"id\" href=\"#irq\">irq</a>, void *<a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_info\">irq_info</a> *<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#dev_id\">dev_id</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l\">l</a>, *<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pass_counter\">pass_counter</a> = 0, <a class=\"id\" href=\"#handled\">handled</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_INTR\">DEBUG_INTR</a>(\"serial8250_interrupt(%d)...\", <a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#iir\">iir</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#l\">l</a>, struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iir\">iir</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_IIR\">UART_IIR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#iir\">iir</a> &amp; <a class=\"id\" href=\"#UART_IIR_NO_INT\">UART_IIR_NO_INT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial8250_handle_port\">serial8250_handle_port</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handled\">handled</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#iotype\">iotype</a> == <a class=\"id\" href=\"#UPIO_DWAPB\">UPIO_DWAPB</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#iir\">iir</a> &amp; <a class=\"id\" href=\"#UART_IIR_BUSY\">UART_IIR_BUSY</a>) == <a class=\"id\" href=\"#UART_IIR_BUSY\">UART_IIR_BUSY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The DesignWare APB UART has an Busy Detect (0x07)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * interrupt meaning an LCR write attempt occured while the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * UART was busy. The interrupt must be cleared by reading</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the UART status register (USR) and the LCR re-written. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = *(volatile <a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#lcr\">lcr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handled\">handled</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#end\">end</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#l\">l</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l\">l</a> == <a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#head\">head</a> && <a class=\"id\" href=\"#pass_counter\">pass_counter</a>++ &gt; <a class=\"id\" href=\"#PASS_LIMIT\">PASS_LIMIT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we hit this, we're dead. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"serial8250: too much work for \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"irq%d\\n\", <a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#l\">l</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_INTR\">DEBUG_INTR</a>(\"end.\\n\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#IRQ_RETVAL\">IRQ_RETVAL</a>(<a class=\"id\" href=\"#handled\">handled</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * To support ISA shared interrupts, we need to have one interrupt</span>", 
"<span class=\"comment\"> * handler that ensures that the IRQ line has been deasserted</span>", 
"<span class=\"comment\"> * before returning.  Failing to do this will result in the IRQ</span>", 
"<span class=\"comment\"> * line being stuck active, and, since ISA irqs are edge triggered,</span>", 
"<span class=\"comment\"> * no more IRQs will be seen.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#serial_do_unlink\">serial_do_unlink</a>(struct <a class=\"id\" href=\"#irq_info\">irq_info</a> *<a class=\"id\" href=\"#i\">i</a>, struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#head\">head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#head\">head</a> == &amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#head\">head</a> != &amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* List empty so throw away the hash node */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#head\">head</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#i\">i</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#serial_link_irq_chain\">serial_link_irq_chain</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
];
xr_frag_insert('l/88/311a4dd748e73370398045cbc57e62ab738e8a.xr', __xr_tmp);
