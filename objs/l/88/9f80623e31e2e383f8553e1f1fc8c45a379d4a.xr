var __xr_tmp = [
"<span class=\"comment\">/* -*- linux-c -*- ------------------------------------------------------- *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   Copyright (C) 1991, 1992 Linus Torvalds</span>", 
"<span class=\"comment\"> *   Copyright 2007 rPath, Inc. - All Rights Reserved</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   This file is part of the Linux kernel, and is made available under</span>", 
"<span class=\"comment\"> *   the terms of the GNU General Public License version 2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ----------------------------------------------------------------------- */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Very simple bitops for the boot code.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#BOOT_BITOPS_H\">BOOT_BITOPS_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BOOT_BITOPS_H\">BOOT_BITOPS_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_BITOPS_H\">_LINUX_BITOPS_H</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Inhibit inclusion of &lt;linux/bitops.h&gt; */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#constant_test_bit\">constant_test_bit</a>(int <a class=\"id\" href=\"#nr\">nr</a>, const void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#p\">p</a> = (const <a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>return ((1UL << (<a class=\"id\" href=\"#nr\">nr</a> &amp; 31)) &amp; (<a class=\"id\" href=\"#p\">p</a>[<a class=\"id\" href=\"#nr\">nr</a> >> 5])) != 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#variable_test_bit\">variable_test_bit</a>(int <a class=\"id\" href=\"#nr\">nr</a>, const void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#p\">p</a> = (const <a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"btl %2,%1; setc %0\" : \"=qm\" (<a class=\"id\" href=\"#v\">v</a>) : \"m\" (*<a class=\"id\" href=\"#p\">p</a>), \"Ir\" (<a class=\"id\" href=\"#nr\">nr</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#v\">v</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#nr\">nr</a>,<a class=\"id\" href=\"#addr\">addr</a>) \\", 
"(<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#nr\">nr</a>) ? \\", 
" <a class=\"id\" href=\"#constant_test_bit\">constant_test_bit</a>((<a class=\"id\" href=\"#nr\">nr</a>),(<a class=\"id\" href=\"#addr\">addr</a>)) : \\", 
" <a class=\"id\" href=\"#variable_test_bit\">variable_test_bit</a>((<a class=\"id\" href=\"#nr\">nr</a>),(<a class=\"id\" href=\"#addr\">addr</a>)))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_bit\">set_bit</a>(int <a class=\"id\" href=\"#nr\">nr</a>, void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"btsl %1,%0\" : \"+m\" (*(<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#addr\">addr</a>) : \"Ir\" (<a class=\"id\" href=\"#nr\">nr</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* BOOT_BITOPS_H */</span>", 
];
xr_frag_insert('l/88/9f80623e31e2e383f8553e1f1fc8c45a379d4a.xr', __xr_tmp);
