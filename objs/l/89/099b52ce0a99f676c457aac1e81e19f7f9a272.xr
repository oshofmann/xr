var __xr_tmp = [
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm - Support for Windows Logical Disk Manager (Dynamic Disks)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2001,2002 Richard Russon &lt;ldm@flatcap.org&gt;</span>", 
"<span class=\"comment\"> * Copyright (c) 2001-2007 Anton Altaparmakov</span>", 
"<span class=\"comment\"> * Copyright (C) 2001,2002 Jakob Kemi &lt;jakob.kemi@telia.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Documentation is available at http://www.linux-ntfs.org/content/view/19/37/</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify it under</span>", 
"<span class=\"comment\"> * the terms of the GNU General Public License as published by the Free Software</span>", 
"<span class=\"comment\"> * Foundation; either version 2 of the License, or (at your option) any later</span>", 
"<span class=\"comment\"> * version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful, but WITHOUT</span>", 
"<span class=\"comment\"> * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS</span>", 
"<span class=\"comment\"> * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more</span>", 
"<span class=\"comment\"> * details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License along with</span>", 
"<span class=\"comment\"> * this program (in the main directory of the source in the file COPYING); if</span>", 
"<span class=\"comment\"> * not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,</span>", 
"<span class=\"comment\"> * Boston, MA  02111-1307  USA</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stringify\">stringify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"ldm.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"check.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"msdos.h\"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_debug/info/error/crit - Output an error message</span>", 
"<span class=\"comment\"> * @f:    A printf format string containing the message</span>", 
"<span class=\"comment\"> * @...:  Variables to substitute into @f</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ldm_debug() writes a DEBUG level message to the syslog but only if the</span>", 
"<span class=\"comment\"> * driver was compiled with debug enabled. Otherwise, the call turns into a NOP.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_LDM_DEBUG\">CONFIG_LDM_DEBUG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ldm_debug\">ldm_debug</a>(...)<span class=\"ts\"/>do {} while (0)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ldm_debug\">ldm_debug</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#a\">a</a>...) <a class=\"id\" href=\"#_ldm_printk\">_ldm_printk</a> (<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#f\">f</a>, ##<a class=\"id\" href=\"#a\">a</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ldm_crit\">ldm_crit</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#a\">a</a>...)  <a class=\"id\" href=\"#_ldm_printk\">_ldm_printk</a> (<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a>,  <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#f\">f</a>, ##<a class=\"id\" href=\"#a\">a</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ldm_error\">ldm_error</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#a\">a</a>...) <a class=\"id\" href=\"#_ldm_printk\">_ldm_printk</a> (<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>,   <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#f\">f</a>, ##<a class=\"id\" href=\"#a\">a</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ldm_info\">ldm_info</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#a\">a</a>...)  <a class=\"id\" href=\"#_ldm_printk\">_ldm_printk</a> (<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>,  <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#f\">f</a>, ##<a class=\"id\" href=\"#a\">a</a>)", 
"", 
"<a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#format\">format</a> (<a class=\"id\" href=\"#printf\">printf</a>, 3, 4)))", 
"static void <a class=\"id\" href=\"#_ldm_printk\">_ldm_printk</a> (const char *<a class=\"id\" href=\"#level\">level</a>, const char *<a class=\"id\" href=\"#function\">function</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/>static char <a class=\"id\" href=\"#buf\">buf</a>[128];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a> (<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vsnprintf\">vsnprintf</a> (<a class=\"id\" href=\"#buf\">buf</a>, sizeof (<a class=\"id\" href=\"#buf\">buf</a>), <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a> (<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a> (\"%s%s(): %s\\n\", <a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#function\">function</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ldm_parse_hexbyte - Convert a ASCII hex number to a byte</span>", 
"<span class=\"comment\"> * @src:  Pointer to at least 2 characters to convert.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Convert a two character ASCII hex string to a number.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:  0-255  Success, the byte was parsed correctly</span>", 
"<span class=\"comment\"> *          -1     Error, an invalid character was supplied</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ldm_parse_hexbyte\">ldm_parse_hexbyte</a> (const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#x\">x</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* For correct wrapping */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#h\">h</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* high part */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#hex_to_bin\">hex_to_bin</a>(<a class=\"id\" href=\"#src\">src</a>[0]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#h\">h</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* low part */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#hex_to_bin\">hex_to_bin</a>(<a class=\"id\" href=\"#src\">src</a>[1]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#h\">h</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#x\">x</a> << 4) + <a class=\"id\" href=\"#h\">h</a>;", 
];
xr_frag_insert('l/89/099b52ce0a99f676c457aac1e81e19f7f9a272.xr', __xr_tmp);
