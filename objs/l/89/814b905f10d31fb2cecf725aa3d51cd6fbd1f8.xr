var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This file contains code to reset and initialize USB host controllers.</span>", 
"<span class=\"comment\"> * Some of it includes work-arounds for PCI hardware and BIOS quirks.</span>", 
"<span class=\"comment\"> * It may need to run early during booting -- before USB would normally</span>", 
"<span class=\"comment\"> * initialize -- to ensure that Linux doesn't use any legacy modes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (c) 1999 Martin Mares &lt;mj@ucw.cz&gt;</span>", 
"<span class=\"comment\"> *  (and others)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"pci-quirks.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"xhci-ext-caps.h\"", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UHCI_USBLEGSUP\">UHCI_USBLEGSUP</a><span class=\"ts\"/><span class=\"ts\"/>0xc0<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* legacy support */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UHCI_USBCMD\">UHCI_USBCMD</a><span class=\"ts\"/><span class=\"ts\"/>0<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* command register */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UHCI_USBINTR\">UHCI_USBINTR</a><span class=\"ts\"/><span class=\"ts\"/>4<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* interrupt register */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UHCI_USBLEGSUP_RWC\">UHCI_USBLEGSUP_RWC</a><span class=\"ts\"/>0x8f00<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the R/WC bits */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UHCI_USBLEGSUP_RO\">UHCI_USBLEGSUP_RO</a><span class=\"ts\"/>0x5040<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* R/O and reserved bits */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UHCI_USBCMD_RUN\">UHCI_USBCMD_RUN</a><span class=\"ts\"/><span class=\"ts\"/>0x0001<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* RUN/STOP bit */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UHCI_USBCMD_HCRESET\">UHCI_USBCMD_HCRESET</a><span class=\"ts\"/>0x0002<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Host Controller reset */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UHCI_USBCMD_EGSM\">UHCI_USBCMD_EGSM</a><span class=\"ts\"/>0x0008<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Global Suspend Mode */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UHCI_USBCMD_CONFIGURE\">UHCI_USBCMD_CONFIGURE</a><span class=\"ts\"/>0x0040<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Config Flag */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UHCI_USBINTR_RESUME\">UHCI_USBINTR_RESUME</a><span class=\"ts\"/>0x0002<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Resume interrupt enable */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OHCI_CONTROL\">OHCI_CONTROL</a><span class=\"ts\"/><span class=\"ts\"/>0x04", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OHCI_CMDSTATUS\">OHCI_CMDSTATUS</a><span class=\"ts\"/><span class=\"ts\"/>0x08", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OHCI_INTRSTATUS\">OHCI_INTRSTATUS</a><span class=\"ts\"/><span class=\"ts\"/>0x0c", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OHCI_INTRENABLE\">OHCI_INTRENABLE</a><span class=\"ts\"/><span class=\"ts\"/>0x10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OHCI_INTRDISABLE\">OHCI_INTRDISABLE</a><span class=\"ts\"/>0x14", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OHCI_OCR\">OHCI_OCR</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 3)<span class=\"ts\"/><span class=\"comment\">/* ownership change request */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OHCI_CTRL_RWC\">OHCI_CTRL_RWC</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 9)<span class=\"ts\"/><span class=\"comment\">/* remote wakeup connected */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OHCI_CTRL_IR\">OHCI_CTRL_IR</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 8)<span class=\"ts\"/><span class=\"comment\">/* interrupt routing */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OHCI_INTR_OC\">OHCI_INTR_OC</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 30)<span class=\"ts\"/><span class=\"comment\">/* ownership change */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EHCI_HCC_PARAMS\">EHCI_HCC_PARAMS</a><span class=\"ts\"/><span class=\"ts\"/>0x08<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* extended capabilities */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EHCI_USBCMD\">EHCI_USBCMD</a><span class=\"ts\"/><span class=\"ts\"/>0<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* command register */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EHCI_USBCMD_RUN\">EHCI_USBCMD_RUN</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 0)<span class=\"ts\"/><span class=\"comment\">/* RUN/STOP bit */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EHCI_USBSTS\">EHCI_USBSTS</a><span class=\"ts\"/><span class=\"ts\"/>4<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* status register */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EHCI_USBSTS_HALTED\">EHCI_USBSTS_HALTED</a><span class=\"ts\"/>(1 << 12)<span class=\"ts\"/><span class=\"comment\">/* HCHalted bit */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EHCI_USBINTR\">EHCI_USBINTR</a><span class=\"ts\"/><span class=\"ts\"/>8<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* interrupt register */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EHCI_CONFIGFLAG\">EHCI_CONFIGFLAG</a><span class=\"ts\"/><span class=\"ts\"/>0x40<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* configured flag register */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EHCI_USBLEGSUP\">EHCI_USBLEGSUP</a><span class=\"ts\"/><span class=\"ts\"/>0<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* legacy support register */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EHCI_USBLEGSUP_BIOS\">EHCI_USBLEGSUP_BIOS</a><span class=\"ts\"/>(1 << 16)<span class=\"ts\"/><span class=\"comment\">/* BIOS semaphore */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EHCI_USBLEGSUP_OS\">EHCI_USBLEGSUP_OS</a><span class=\"ts\"/>(1 << 24)<span class=\"ts\"/><span class=\"comment\">/* OS semaphore */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EHCI_USBLEGCTLSTS\">EHCI_USBLEGCTLSTS</a><span class=\"ts\"/>4<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* legacy control/status */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EHCI_USBLEGCTLSTS_SOOE\">EHCI_USBLEGCTLSTS_SOOE</a><span class=\"ts\"/>(1 << 13)<span class=\"ts\"/><span class=\"comment\">/* SMI on ownership change */</span>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Make sure the controller is completely inactive, unable to</span>", 
"<span class=\"comment\"> * generate interrupts or do DMA.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#uhci_reset_hc\">uhci_reset_hc</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, unsigned long <a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Turn off PIRQ enable and SMI enable.  (This also turns off the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * BIOS's USB Legacy Support.)  Turn off all the R/WC bits too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#UHCI_USBLEGSUP\">UHCI_USBLEGSUP</a>, <a class=\"id\" href=\"#UHCI_USBLEGSUP_RWC\">UHCI_USBLEGSUP_RWC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reset the HC - this will force us to get a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * new notification of any already connected</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ports due to the virtual disconnect that it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * implies.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outw\">outw</a>(<a class=\"id\" href=\"#UHCI_USBCMD_HCRESET\">UHCI_USBCMD_HCRESET</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#UHCI_USBCMD\">UHCI_USBCMD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb\">mb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(5);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inw\">inw</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#UHCI_USBCMD\">UHCI_USBCMD</a>) &amp; <a class=\"id\" href=\"#UHCI_USBCMD_HCRESET\">UHCI_USBCMD_HCRESET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"HCRESET not completed yet!\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Just to be safe, disable interrupt requests and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make sure the controller is stopped.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outw\">outw</a>(0, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#UHCI_USBINTR\">UHCI_USBINTR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outw\">outw</a>(0, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#UHCI_USBCMD\">UHCI_USBCMD</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#uhci_reset_hc\">uhci_reset_hc</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize a controller that was newly discovered or has just been</span>", 
"<span class=\"comment\"> * resumed.  In either case we can't be sure of its previous state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns: 1 if the controller was reset, 0 otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#uhci_check_and_reset_hc\">uhci_check_and_reset_hc</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, unsigned long <a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#legsup\">legsup</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#intr\">intr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When restarting a suspended controller, we expect all the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * settings to be the same as we left them:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>PIRQ and SMI disabled, no R/W bits set in USBLEGSUP;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Controller is stopped and configured with EGSM set;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>No interrupts enabled except possibly Resume Detect.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If any of these conditions are violated we do a complete reset.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#UHCI_USBLEGSUP\">UHCI_USBLEGSUP</a>, &amp;<a class=\"id\" href=\"#legsup\">legsup</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#legsup\">legsup</a> &amp; ~(<a class=\"id\" href=\"#UHCI_USBLEGSUP_RO\">UHCI_USBLEGSUP_RO</a> | <a class=\"id\" href=\"#UHCI_USBLEGSUP_RWC\">UHCI_USBLEGSUP_RWC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"%s: legsup = 0x%04x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#legsup\">legsup</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#reset_needed\">reset_needed</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#inw\">inw</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#UHCI_USBCMD\">UHCI_USBCMD</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#cmd\">cmd</a> &amp; <a class=\"id\" href=\"#UHCI_USBCMD_RUN\">UHCI_USBCMD_RUN</a>) || !(<a class=\"id\" href=\"#cmd\">cmd</a> &amp; <a class=\"id\" href=\"#UHCI_USBCMD_CONFIGURE\">UHCI_USBCMD_CONFIGURE</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!(<a class=\"id\" href=\"#cmd\">cmd</a> &amp; <a class=\"id\" href=\"#UHCI_USBCMD_EGSM\">UHCI_USBCMD_EGSM</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"%s: cmd = 0x%04x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#reset_needed\">reset_needed</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#intr\">intr</a> = <a class=\"id\" href=\"#inw\">inw</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#UHCI_USBINTR\">UHCI_USBINTR</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#intr\">intr</a> &amp; (~<a class=\"id\" href=\"#UHCI_USBINTR_RESUME\">UHCI_USBINTR_RESUME</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"%s: intr = 0x%04x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#intr\">intr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#reset_needed\">reset_needed</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#reset_needed\">reset_needed</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Performing full reset\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uhci_reset_hc\">uhci_reset_hc</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#uhci_check_and_reset_hc\">uhci_check_and_reset_hc</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#io_type_enabled\">io_type_enabled</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, unsigned int <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, &amp;<a class=\"id\" href=\"#cmd\">cmd</a>) && (<a class=\"id\" href=\"#cmd\">cmd</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pio_enabled\">pio_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>) <a class=\"id\" href=\"#io_type_enabled\">io_type_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_COMMAND_IO\">PCI_COMMAND_IO</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mmio_enabled\">mmio_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>) <a class=\"id\" href=\"#io_type_enabled\">io_type_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_COMMAND_MEMORY\">PCI_COMMAND_MEMORY</a>)", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_usb_handoff_uhci\">quirk_usb_handoff_uhci</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#base\">base</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pio_enabled\">pio_enabled</a>(<a class=\"id\" href=\"#pdev\">pdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PCI_ROM_RESOURCE\">PCI_ROM_RESOURCE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#pci_resource_flags\">pci_resource_flags</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#i\">i</a>) &amp; <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uhci_check_and_reset_hc\">uhci_check_and_reset_hc</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#mmio_resource_enabled\">mmio_resource_enabled</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#idx\">idx</a>) && <a class=\"id\" href=\"#mmio_enabled\">mmio_enabled</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_usb_handoff_ohci\">quirk_usb_handoff_ohci</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mmio_resource_enabled\">mmio_resource_enabled</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#pci_ioremap_bar\">pci_ioremap_bar</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"comment\">/* On PA-RISC, PDC can leave IR set incorrectly; ignore it there. */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__hppa__\">__hppa__</a>", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#control\">control</a> = <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#OHCI_CONTROL\">OHCI_CONTROL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#control\">control</a> &amp; <a class=\"id\" href=\"#OHCI_CTRL_IR\">OHCI_CTRL_IR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#wait_time\">wait_time</a> = 500; <span class=\"comment\">/* arbitrary; 5 seconds */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(<a class=\"id\" href=\"#OHCI_INTR_OC\">OHCI_INTR_OC</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#OHCI_INTRENABLE\">OHCI_INTRENABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(<a class=\"id\" href=\"#OHCI_OCR\">OHCI_OCR</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#OHCI_CMDSTATUS\">OHCI_CMDSTATUS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#wait_time\">wait_time</a> &gt; 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#OHCI_CONTROL\">OHCI_CONTROL</a>) &amp; <a class=\"id\" href=\"#OHCI_CTRL_IR\">OHCI_CTRL_IR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_time\">wait_time</a> -= 10;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(10);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wait_time\">wait_time</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"OHCI: BIOS handoff failed\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" (BIOS bug?) %08x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#OHCI_CONTROL\">OHCI_CONTROL</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reset controller, preserving RWC */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(<a class=\"id\" href=\"#control\">control</a> &amp; <a class=\"id\" href=\"#OHCI_CTRL_RWC\">OHCI_CTRL_RWC</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#OHCI_CONTROL\">OHCI_CONTROL</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disable interrupts</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(~(<a class=\"id\" href=\"#u32\">u32</a>)0, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#OHCI_INTRDISABLE\">OHCI_INTRDISABLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(~(<a class=\"id\" href=\"#u32\">u32</a>)0, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#OHCI_INTRSTATUS\">OHCI_INTRSTATUS</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#base\">base</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_usb_disable_ehci\">quirk_usb_disable_ehci</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#wait_time\">wait_time</a>, <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#base\">base</a>, *<a class=\"id\" href=\"#op_reg_base\">op_reg_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><a class=\"id\" href=\"#hcc_params\">hcc_params</a>, <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#cap_length\">cap_length</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 256/4;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#tried_handoff\">tried_handoff</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mmio_resource_enabled\">mmio_resource_enabled</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#pci_ioremap_bar\">pci_ioremap_bar</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cap_length\">cap_length</a> = <a class=\"id\" href=\"#readb\">readb</a>(<a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> = <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#cap_length\">cap_length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* EHCI 0.96 and later may have \"extended capabilities\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * spec section 5.1 explains the bios handoff, e.g. for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * booting from USB disk or using a usb keyboard</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hcc_params\">hcc_params</a> = <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#EHCI_HCC_PARAMS\">EHCI_HCC_PARAMS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#hcc_params\">hcc_params</a> >> 8) &amp; 0xff;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#offset\">offset</a> && --<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cap\">cap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msec\">msec</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#offset\">offset</a>, &amp;<a class=\"id\" href=\"#cap\">cap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#cap\">cap</a> &amp; 0xff) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 1:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* BIOS/SMM/... handoff support */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#EHCI_USBLEGSUP_BIOS\">EHCI_USBLEGSUP_BIOS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"EHCI: BIOS handoff\\n\");", 
"", 
"#if 0", 
"<span class=\"comment\">/* aleksey_gorelov@phoenix.com reports that some systems need SMI forced on,</span>", 
"<span class=\"comment\"> * but that seems dubious in general (the BIOS left it off intentionally)</span>", 
"<span class=\"comment\"> * and is known to prevent some systems from booting.  so we won't do this</span>", 
"<span class=\"comment\"> * unless maybe we can determine when we're on a system that needs SMI forced.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* BIOS workaround (?): be sure the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pre-Linux code receives the SMI</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#pdev\">pdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#EHCI_USBLEGCTLSTS\">EHCI_USBLEGCTLSTS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#pdev\">pdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#EHCI_USBLEGCTLSTS\">EHCI_USBLEGCTLSTS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> | <a class=\"id\" href=\"#EHCI_USBLEGCTLSTS_SOOE\">EHCI_USBLEGCTLSTS_SOOE</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* some systems get upset if this semaphore is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * set for any other reason than forcing a BIOS</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * handoff..</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#offset\">offset</a> + 3, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if boot firmware now owns EHCI, spin till</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * it hands it over.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msec\">msec</a> = 1000;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#EHCI_USBLEGSUP_BIOS\">EHCI_USBLEGSUP_BIOS</a>) && (<a class=\"id\" href=\"#msec\">msec</a> &gt; 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tried_handoff\">tried_handoff</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(10);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msec\">msec</a> -= 10;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#offset\">offset</a>, &amp;<a class=\"id\" href=\"#cap\">cap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#EHCI_USBLEGSUP_BIOS\">EHCI_USBLEGSUP_BIOS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* well, possibly buggy BIOS... try to shut</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * it down, and hope nothing goes too wrong</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"EHCI: BIOS handoff failed\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" (BIOS bug?) %08x\\n\", <a class=\"id\" href=\"#cap\">cap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#offset\">offset</a> + 2, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* just in case, always disable EHCI SMIs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#pdev\">pdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#EHCI_USBLEGCTLSTS\">EHCI_USBLEGCTLSTS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If the BIOS ever owned the controller then we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * can't expect any power sessions to remain intact.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tried_handoff\">tried_handoff</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(0, <a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> + <a class=\"id\" href=\"#EHCI_CONFIGFLAG\">EHCI_CONFIGFLAG</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* illegal reserved capability */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cap\">cap</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FALLTHROUGH */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"EHCI: unrecognized capability \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%02x\\n\", <a class=\"id\" href=\"#cap\">cap</a> &amp; 0xff);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#cap\">cap</a> >> 8) &amp; 0xff;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"EHCI: capability loop?\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * halt EHCI &amp; disable its interrupts in any case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> + <a class=\"id\" href=\"#EHCI_USBSTS\">EHCI_USBSTS</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#EHCI_USBSTS_HALTED\">EHCI_USBSTS_HALTED</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> + <a class=\"id\" href=\"#EHCI_USBCMD\">EHCI_USBCMD</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> &= ~<a class=\"id\" href=\"#EHCI_USBCMD_RUN\">EHCI_USBCMD_RUN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> + <a class=\"id\" href=\"#EHCI_USBCMD\">EHCI_USBCMD</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_time\">wait_time</a> = 2000;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = 100;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(0x3f, <a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> + <a class=\"id\" href=\"#EHCI_USBSTS\">EHCI_USBSTS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(<a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_time\">wait_time</a> -= <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> + <a class=\"id\" href=\"#EHCI_USBSTS\">EHCI_USBSTS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#val\">val</a> == ~(<a class=\"id\" href=\"#u32\">u32</a>)0) || (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#EHCI_USBSTS_HALTED\">EHCI_USBSTS_HALTED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#wait_time\">wait_time</a> &gt; 0);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(0, <a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> + <a class=\"id\" href=\"#EHCI_USBINTR\">EHCI_USBINTR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(0x3f, <a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> + <a class=\"id\" href=\"#EHCI_USBSTS\">EHCI_USBSTS</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#base\">base</a>);", 
"", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * handshake - spin reading a register until handshake completes</span>", 
"<span class=\"comment\"> * @ptr: address of hc register to be read</span>", 
"<span class=\"comment\"> * @mask: bits to look at in result of read</span>", 
"<span class=\"comment\"> * @done: value of those bits when handshake succeeds</span>", 
"<span class=\"comment\"> * @wait_usec: timeout in microseconds</span>", 
"<span class=\"comment\"> * @delay_usec: delay in microseconds to wait between polling</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Polls a register every delay_usec microseconds.</span>", 
"<span class=\"comment\"> * Returns 0 when the mask bits have the value done.</span>", 
"<span class=\"comment\"> * Returns -ETIMEDOUT if this condition is not true after</span>", 
"<span class=\"comment\"> * wait_usec microseconds have passed.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#handshake\">handshake</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#done\">done</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#wait_usec\">wait_usec</a>, int <a class=\"id\" href=\"#delay_usec\">delay_usec</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> &= <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> == <a class=\"id\" href=\"#done\">done</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(<a class=\"id\" href=\"#delay_usec\">delay_usec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_usec\">wait_usec</a> -= <a class=\"id\" href=\"#delay_usec\">delay_usec</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#wait_usec\">wait_usec</a> &gt; 0);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ETIMEDOUT\">ETIMEDOUT</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * PCI Quirks for xHCI.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Takes care of the handoff between the Pre-OS (i.e. BIOS) and the OS.</span>", 
"<span class=\"comment\"> * It signals to the BIOS that the OS wants control of the host controller,</span>", 
"<span class=\"comment\"> * and then waits 5 seconds for the BIOS to hand over control.</span>", 
"<span class=\"comment\"> * If we timeout, assume the BIOS is broken and take control anyway.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_usb_handoff_xhci\">quirk_usb_handoff_xhci</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ext_cap_offset\">ext_cap_offset</a>;", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#op_reg_base\">op_reg_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mmio_resource_enabled\">mmio_resource_enabled</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#ioremap_nocache\">ioremap_nocache</a>(<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 0),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_resource_len\">pci_resource_len</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 0));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find the Legacy Support Capability register -</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this is optional for xHCI host controllers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext_cap_offset\">ext_cap_offset</a> = <a class=\"id\" href=\"#xhci_find_next_cap_offset\">xhci_find_next_cap_offset</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#XHCI_HCC_PARAMS_OFFSET\">XHCI_HCC_PARAMS_OFFSET</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext_cap_offset\">ext_cap_offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We've reached the end of the extended capabilities */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#hc_init\">hc_init</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#ext_cap_offset\">ext_cap_offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#XHCI_EXT_CAPS_ID\">XHCI_EXT_CAPS_ID</a>(<a class=\"id\" href=\"#val\">val</a>) == <a class=\"id\" href=\"#XHCI_EXT_CAPS_LEGACY\">XHCI_EXT_CAPS_LEGACY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext_cap_offset\">ext_cap_offset</a> = <a class=\"id\" href=\"#xhci_find_next_cap_offset\">xhci_find_next_cap_offset</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#ext_cap_offset\">ext_cap_offset</a>);", 
"<span class=\"ts\"/>} while (1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the BIOS owns the HC, signal that the OS wants it, and wait */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#XHCI_HC_BIOS_OWNED\">XHCI_HC_BIOS_OWNED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#XHCI_HC_OS_OWNED\">XHCI_HC_OS_OWNED</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#ext_cap_offset\">ext_cap_offset</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Wait for 5 seconds with 10 microsecond polling interval */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#handshake\">handshake</a>(<a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#ext_cap_offset\">ext_cap_offset</a>, <a class=\"id\" href=\"#XHCI_HC_BIOS_OWNED\">XHCI_HC_BIOS_OWNED</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0, 5000, 10);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Assume a buggy BIOS and take HC ownership anyway */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"xHCI BIOS handoff failed\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" (BIOS bug ?) %08x\\n\", <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(<a class=\"id\" href=\"#val\">val</a> &amp; ~<a class=\"id\" href=\"#XHCI_HC_BIOS_OWNED\">XHCI_HC_BIOS_OWNED</a>, <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#ext_cap_offset\">ext_cap_offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Disable any BIOS SMIs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(<a class=\"id\" href=\"#XHCI_LEGACY_DISABLE_SMI\">XHCI_LEGACY_DISABLE_SMI</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#ext_cap_offset\">ext_cap_offset</a> + <a class=\"id\" href=\"#XHCI_LEGACY_CONTROL_OFFSET\">XHCI_LEGACY_CONTROL_OFFSET</a>);", 
"", 
"<a class=\"id\" href=\"#hc_init\">hc_init</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> = <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#XHCI_HC_LENGTH\">XHCI_HC_LENGTH</a>(<a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#base\">base</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for the host controller to be ready before writing any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * operational or runtime registers.  Wait 5 seconds and no more.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#handshake\">handshake</a>(<a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> + <a class=\"id\" href=\"#XHCI_STS_OFFSET\">XHCI_STS_OFFSET</a>, <a class=\"id\" href=\"#XHCI_STS_CNR\">XHCI_STS_CNR</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>5000, 10);", 
"<span class=\"ts\"/><span class=\"comment\">/* Assume a buggy HC and start HC initialization anyway */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> + <a class=\"id\" href=\"#XHCI_STS_OFFSET\">XHCI_STS_OFFSET</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"xHCI HW not ready after 5 sec (HC bug?) \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"status = 0x%x\\n\", <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Send the halt and disable interrupts command */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> + <a class=\"id\" href=\"#XHCI_CMD_OFFSET\">XHCI_CMD_OFFSET</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> &= ~(<a class=\"id\" href=\"#XHCI_CMD_RUN\">XHCI_CMD_RUN</a> | <a class=\"id\" href=\"#XHCI_IRQS\">XHCI_IRQS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> + <a class=\"id\" href=\"#XHCI_CMD_OFFSET\">XHCI_CMD_OFFSET</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for the HC to halt - poll every 125 usec (one microframe). */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#handshake\">handshake</a>(<a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> + <a class=\"id\" href=\"#XHCI_STS_OFFSET\">XHCI_STS_OFFSET</a>, <a class=\"id\" href=\"#XHCI_STS_HALT\">XHCI_STS_HALT</a>, 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#XHCI_MAX_HALT_USEC\">XHCI_MAX_HALT_USEC</a>, 125);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#op_reg_base\">op_reg_base</a> + <a class=\"id\" href=\"#XHCI_STS_OFFSET\">XHCI_STS_OFFSET</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"xHCI HW did not halt within %d usec \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"status = 0x%x\\n\", <a class=\"id\" href=\"#XHCI_MAX_HALT_USEC\">XHCI_MAX_HALT_USEC</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#base\">base</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_usb_early_handoff\">quirk_usb_early_handoff</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#PCI_CLASS_SERIAL_USB_UHCI\">PCI_CLASS_SERIAL_USB_UHCI</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_usb_handoff_uhci\">quirk_usb_handoff_uhci</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#PCI_CLASS_SERIAL_USB_OHCI\">PCI_CLASS_SERIAL_USB_OHCI</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_usb_handoff_ohci\">quirk_usb_handoff_ohci</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#PCI_CLASS_SERIAL_USB_EHCI\">PCI_CLASS_SERIAL_USB_EHCI</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_usb_disable_ehci\">quirk_usb_disable_ehci</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#PCI_CLASS_SERIAL_USB_XHCI\">PCI_CLASS_SERIAL_USB_XHCI</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_usb_handoff_xhci\">quirk_usb_handoff_xhci</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#quirk_usb_early_handoff\">quirk_usb_early_handoff</a>);", 
];
xr_frag_insert('l/89/814b905f10d31fb2cecf725aa3d51cd6fbd1f8.xr', __xr_tmp);
