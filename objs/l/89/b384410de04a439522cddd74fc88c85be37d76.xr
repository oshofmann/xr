var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * drivers/pci/pcie/aer/aerdrv_core.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is subject to the terms and conditions of the GNU General Public</span>", 
"<span class=\"comment\"> * License.  See the file \"COPYING\" in the main directory of this archive</span>", 
"<span class=\"comment\"> * for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file implements the core part of PCI-Express AER. When an pci-express</span>", 
"<span class=\"comment\"> * error is delivered, an error message will be collected and printed to</span>", 
"<span class=\"comment\"> * console, then, an error recovery procedure will be executed by following</span>", 
"<span class=\"comment\"> * the pci error recovery rules.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2006 Intel Corp.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Tom Long Nguyen (tom.l.nguyen@intel.com)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zhang Yanmin (yanmin.zhang@intel.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm\">pm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"aerdrv.h\"", 
"", 
"static int <a class=\"id\" href=\"#forceload\">forceload</a>;", 
"static int <a class=\"id\" href=\"#nosourceid\">nosourceid</a>;", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#forceload\">forceload</a>, <a class=\"id\" href=\"#bool\">bool</a>, 0);", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#nosourceid\">nosourceid</a>, <a class=\"id\" href=\"#bool\">bool</a>, 0);", 
"", 
"int <a class=\"id\" href=\"#pci_enable_pcie_error_reporting\">pci_enable_pcie_error_reporting</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#reg16\">reg16</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_aer_get_firmware_first\">pcie_aer_get_firmware_first</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ext_capability\">pci_find_ext_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_EXT_CAP_ID_ERR\">PCI_EXT_CAP_ID_ERR</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_pcie_cap\">pci_pcie_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCTL\">PCI_EXP_DEVCTL</a>, &amp;<a class=\"id\" href=\"#reg16\">reg16</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reg16\">reg16</a> |= (<a class=\"id\" href=\"#PCI_EXP_DEVCTL_CERE\">PCI_EXP_DEVCTL_CERE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_EXP_DEVCTL_NFERE\">PCI_EXP_DEVCTL_NFERE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_EXP_DEVCTL_FERE\">PCI_EXP_DEVCTL_FERE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_EXP_DEVCTL_URRE\">PCI_EXP_DEVCTL_URRE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCTL\">PCI_EXP_DEVCTL</a>, <a class=\"id\" href=\"#reg16\">reg16</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_enable_pcie_error_reporting\">pci_enable_pcie_error_reporting</a>);", 
"", 
"int <a class=\"id\" href=\"#pci_disable_pcie_error_reporting\">pci_disable_pcie_error_reporting</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#reg16\">reg16</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_aer_get_firmware_first\">pcie_aer_get_firmware_first</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_pcie_cap\">pci_pcie_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCTL\">PCI_EXP_DEVCTL</a>, &amp;<a class=\"id\" href=\"#reg16\">reg16</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reg16\">reg16</a> &= ~(<a class=\"id\" href=\"#PCI_EXP_DEVCTL_CERE\">PCI_EXP_DEVCTL_CERE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_EXP_DEVCTL_NFERE\">PCI_EXP_DEVCTL_NFERE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_EXP_DEVCTL_FERE\">PCI_EXP_DEVCTL_FERE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_EXP_DEVCTL_URRE\">PCI_EXP_DEVCTL_URRE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCTL\">PCI_EXP_DEVCTL</a>, <a class=\"id\" href=\"#reg16\">reg16</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_disable_pcie_error_reporting\">pci_disable_pcie_error_reporting</a>);", 
"", 
"int <a class=\"id\" href=\"#pci_cleanup_aer_uncorrect_error_status\">pci_cleanup_aer_uncorrect_error_status</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ext_capability\">pci_find_ext_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_EXT_CAP_ID_ERR\">PCI_EXT_CAP_ID_ERR</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_UNCOR_STATUS\">PCI_ERR_UNCOR_STATUS</a>, &amp;<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_UNCOR_STATUS\">PCI_ERR_UNCOR_STATUS</a>, <a class=\"id\" href=\"#status\">status</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_cleanup_aer_uncorrect_error_status\">pci_cleanup_aer_uncorrect_error_status</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * add_error_device - list device to be handled</span>", 
"<span class=\"comment\"> * @e_info: pointer to error info</span>", 
"<span class=\"comment\"> * @dev: pointer to pci_dev to be added</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#add_error_device\">add_error_device</a>(struct <a class=\"id\" href=\"#aer_err_info\">aer_err_info</a> *<a class=\"id\" href=\"#e_info\">e_info</a>, struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#error_dev_num\">error_dev_num</a> &lt; <a class=\"id\" href=\"#AER_MAX_MULTI_ERR_DEVICES\">AER_MAX_MULTI_ERR_DEVICES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#dev\">dev</a>[<a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#error_dev_num\">error_dev_num</a>] = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#error_dev_num\">error_dev_num</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#PCI_BUS\">PCI_BUS</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#x\">x</a>) >> 8) &amp; 0xff)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_error_source - check whether the device is source of reported error</span>", 
"<span class=\"comment\"> * @dev: pointer to pci_dev to be checked</span>", 
"<span class=\"comment\"> * @e_info: pointer to reported error info</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_error_source\">is_error_source</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#aer_err_info\">aer_err_info</a> *<a class=\"id\" href=\"#e_info\">e_info</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#reg16\">reg16</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When bus id is equal to 0, it might be a bad id</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reported by root port.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nosourceid\">nosourceid</a> && (<a class=\"id\" href=\"#PCI_BUS\">PCI_BUS</a>(<a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#id\">id</a>) != 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Device ID match? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#id\">id</a> == ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#number\">number</a> << 8) | <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Continue id comparing if there is no multiple error */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#multi_error_valid\">multi_error_valid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When either</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      1) nosourceid==y;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      2) bus id is equal to 0. Some ports might lose the bus</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *              id of error source id;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      3) There are multiple errors and prior id comparing fails;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We check AER status registers to find possible reporter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#enable_cnt\">enable_cnt</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_pcie_cap\">pci_pcie_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if AER is enabled */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCTL\">PCI_EXP_DEVCTL</a>, &amp;<a class=\"id\" href=\"#reg16\">reg16</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#reg16\">reg16</a> &amp; (", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_EXP_DEVCTL_CERE\">PCI_EXP_DEVCTL_CERE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_EXP_DEVCTL_NFERE\">PCI_EXP_DEVCTL_NFERE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_EXP_DEVCTL_FERE\">PCI_EXP_DEVCTL_FERE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_EXP_DEVCTL_URRE\">PCI_EXP_DEVCTL_URRE</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ext_capability\">pci_find_ext_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_EXT_CAP_ID_ERR\">PCI_EXT_CAP_ID_ERR</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if error is recorded */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#severity\">severity</a> == <a class=\"id\" href=\"#AER_CORRECTABLE\">AER_CORRECTABLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_COR_STATUS\">PCI_ERR_COR_STATUS</a>, &amp;<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_COR_MASK\">PCI_ERR_COR_MASK</a>, &amp;<a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_UNCOR_STATUS\">PCI_ERR_UNCOR_STATUS</a>, &amp;<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_UNCOR_MASK\">PCI_ERR_UNCOR_MASK</a>, &amp;<a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &amp; ~<a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#find_device_iter\">find_device_iter</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aer_err_info\">aer_err_info</a> *<a class=\"id\" href=\"#e_info\">e_info</a> = (struct <a class=\"id\" href=\"#aer_err_info\">aer_err_info</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_error_source\">is_error_source</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#e_info\">e_info</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* List this device */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#add_error_device\">add_error_device</a>(<a class=\"id\" href=\"#e_info\">e_info</a>, <a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We cannot handle more... Stop iteration */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TODO: Should print error message here? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If there is only a single error, stop iteration */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#multi_error_valid\">multi_error_valid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_source_device - search through device hierarchy for source device</span>", 
"<span class=\"comment\"> * @parent: pointer to Root Port pci_dev data structure</span>", 
"<span class=\"comment\"> * @e_info: including detailed error information such like id</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return true if found.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invoked by DPC when error is detected at the Root Port.</span>", 
"<span class=\"comment\"> * Caller of this function must set id, severity, and multi_error_valid of</span>", 
"<span class=\"comment\"> * struct aer_err_info pointed by @e_info properly.  This function must fill</span>", 
"<span class=\"comment\"> * e_info-&gt;error_dev_num and e_info-&gt;dev[], based on the given information.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#find_source_device\">find_source_device</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#aer_err_info\">aer_err_info</a> *<a class=\"id\" href=\"#e_info\">e_info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must reset in this function */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#error_dev_num\">error_dev_num</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is Root Port an agent that sends error message? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#find_device_iter\">find_device_iter</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#e_info\">e_info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_walk_bus\">pci_walk_bus</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>, <a class=\"id\" href=\"#find_device_iter\">find_device_iter</a>, <a class=\"id\" href=\"#e_info\">e_info</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#error_dev_num\">error_dev_num</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"can't find device of ID%04x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#report_error_detected\">report_error_detected</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_ers_result_t\">pci_ers_result_t</a> <a class=\"id\" href=\"#vote\">vote</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_error_handlers\">pci_error_handlers</a> *<a class=\"id\" href=\"#err_handler\">err_handler</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aer_broadcast_data\">aer_broadcast_data</a> *<a class=\"id\" href=\"#result_data\">result_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result_data\">result_data</a> = (struct <a class=\"id\" href=\"#aer_broadcast_data\">aer_broadcast_data</a> *) <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#error_state\">error_state</a> = <a class=\"id\" href=\"#result_data\">result_data</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#err_handler\">err_handler</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#err_handler\">err_handler</a>-><a class=\"id\" href=\"#error_detected\">error_detected</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result_data\">result_data</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#pci_channel_io_frozen\">pci_channel_io_frozen</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hdr_type\">hdr_type</a> &amp; <a class=\"id\" href=\"#PCI_HEADER_TYPE_BRIDGE\">PCI_HEADER_TYPE_BRIDGE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * In case of fatal recovery, if one of down-</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * stream device has no driver. We might be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * unable to recover because a later insmod</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * of a driver for this device is unaware of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * its hw state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"device has %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"no AER-aware driver\" : \"no driver\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err_handler\">err_handler</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#err_handler\">err_handler</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vote\">vote</a> = <a class=\"id\" href=\"#err_handler\">err_handler</a>-><a class=\"id\" href=\"#error_detected\">error_detected</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#result_data\">result_data</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result_data\">result_data</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#merge_result\">merge_result</a>(<a class=\"id\" href=\"#result_data\">result_data</a>-><a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#vote\">vote</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#report_mmio_enabled\">report_mmio_enabled</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_ers_result_t\">pci_ers_result_t</a> <a class=\"id\" href=\"#vote\">vote</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_error_handlers\">pci_error_handlers</a> *<a class=\"id\" href=\"#err_handler\">err_handler</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aer_broadcast_data\">aer_broadcast_data</a> *<a class=\"id\" href=\"#result_data\">result_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result_data\">result_data</a> = (struct <a class=\"id\" href=\"#aer_broadcast_data\">aer_broadcast_data</a> *) <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#err_handler\">err_handler</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#err_handler\">err_handler</a>-><a class=\"id\" href=\"#mmio_enabled\">mmio_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err_handler\">err_handler</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#err_handler\">err_handler</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vote\">vote</a> = <a class=\"id\" href=\"#err_handler\">err_handler</a>-><a class=\"id\" href=\"#mmio_enabled\">mmio_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result_data\">result_data</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#merge_result\">merge_result</a>(<a class=\"id\" href=\"#result_data\">result_data</a>-><a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#vote\">vote</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#report_slot_reset\">report_slot_reset</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_ers_result_t\">pci_ers_result_t</a> <a class=\"id\" href=\"#vote\">vote</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_error_handlers\">pci_error_handlers</a> *<a class=\"id\" href=\"#err_handler\">err_handler</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aer_broadcast_data\">aer_broadcast_data</a> *<a class=\"id\" href=\"#result_data\">result_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result_data\">result_data</a> = (struct <a class=\"id\" href=\"#aer_broadcast_data\">aer_broadcast_data</a> *) <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#err_handler\">err_handler</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#err_handler\">err_handler</a>-><a class=\"id\" href=\"#slot_reset\">slot_reset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err_handler\">err_handler</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#err_handler\">err_handler</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vote\">vote</a> = <a class=\"id\" href=\"#err_handler\">err_handler</a>-><a class=\"id\" href=\"#slot_reset\">slot_reset</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result_data\">result_data</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#merge_result\">merge_result</a>(<a class=\"id\" href=\"#result_data\">result_data</a>-><a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#vote\">vote</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#report_resume\">report_resume</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_error_handlers\">pci_error_handlers</a> *<a class=\"id\" href=\"#err_handler\">err_handler</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#error_state\">error_state</a> = <a class=\"id\" href=\"#pci_channel_io_normal\">pci_channel_io_normal</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#err_handler\">err_handler</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#err_handler\">err_handler</a>-><a class=\"id\" href=\"#resume\">resume</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err_handler\">err_handler</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#err_handler\">err_handler</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err_handler\">err_handler</a>-><a class=\"id\" href=\"#resume\">resume</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * broadcast_error_message - handle message broadcast to downstream drivers</span>", 
"<span class=\"comment\"> * @dev: pointer to from where in a hierarchy message is broadcasted down</span>", 
"<span class=\"comment\"> * @state: error state</span>", 
"<span class=\"comment\"> * @error_mesg: message to print</span>", 
"<span class=\"comment\"> * @cb: callback to be broadcasted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invoked during error recovery process. Once being invoked, the content</span>", 
"<span class=\"comment\"> * of error severity will be broadcasted to all downstream drivers in a</span>", 
"<span class=\"comment\"> * hierarchy in question.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#pci_ers_result_t\">pci_ers_result_t</a> <a class=\"id\" href=\"#broadcast_error_message\">broadcast_error_message</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#pci_channel_state\">pci_channel_state</a> <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#error_mesg\">error_mesg</a>,", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#cb\">cb</a>)(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *, void *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aer_broadcast_data\">aer_broadcast_data</a> <a class=\"id\" href=\"#result_data\">result_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"broadcast %s message\\n\", <a class=\"id\" href=\"#error_mesg\">error_mesg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result_data\">result_data</a>.<a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cb\">cb</a> == <a class=\"id\" href=\"#report_error_detected\">report_error_detected</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result_data\">result_data</a>.<a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#PCI_ERS_RESULT_CAN_RECOVER\">PCI_ERS_RESULT_CAN_RECOVER</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result_data\">result_data</a>.<a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#PCI_ERS_RESULT_RECOVERED\">PCI_ERS_RESULT_RECOVERED</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hdr_type\">hdr_type</a> &amp; <a class=\"id\" href=\"#PCI_HEADER_TYPE_BRIDGE\">PCI_HEADER_TYPE_BRIDGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the error is reported by a bridge, we think this error</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is related to the downstream link of the bridge, so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * do error recovery on all subordinates of the bridge instead</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of the bridge and clear the error status of the bridge.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cb\">cb</a> == <a class=\"id\" href=\"#report_error_detected\">report_error_detected</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#error_state\">error_state</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_walk_bus\">pci_walk_bus</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>, <a class=\"id\" href=\"#cb\">cb</a>, &amp;<a class=\"id\" href=\"#result_data\">result_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cb\">cb</a> == <a class=\"id\" href=\"#report_resume\">report_resume</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_cleanup_aer_uncorrect_error_status\">pci_cleanup_aer_uncorrect_error_status</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#error_state\">error_state</a> = <a class=\"id\" href=\"#pci_channel_io_normal\">pci_channel_io_normal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the error is reported by an end point, we think this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * error is related to the upstream link of the end point.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_walk_bus\">pci_walk_bus</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#cb\">cb</a>, &amp;<a class=\"id\" href=\"#result_data\">result_data</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result_data\">result_data</a>.<a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * aer_do_secondary_bus_reset - perform secondary bus reset</span>", 
"<span class=\"comment\"> * @dev: pointer to bridge's pci_dev data structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invoked when performing link reset at Root Port or Downstream Port.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#aer_do_secondary_bus_reset\">aer_do_secondary_bus_reset</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#p2p_ctrl\">p2p_ctrl</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Assert Secondary Bus Reset */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_BRIDGE_CONTROL\">PCI_BRIDGE_CONTROL</a>, &amp;<a class=\"id\" href=\"#p2p_ctrl\">p2p_ctrl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p2p_ctrl\">p2p_ctrl</a> |= <a class=\"id\" href=\"#PCI_BRIDGE_CTL_BUS_RESET\">PCI_BRIDGE_CTL_BUS_RESET</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_BRIDGE_CONTROL\">PCI_BRIDGE_CONTROL</a>, <a class=\"id\" href=\"#p2p_ctrl\">p2p_ctrl</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we should send hot reset message for 2ms to allow it time to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * propagate to all downstream ports</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(2);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* De-assert Secondary Bus Reset */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p2p_ctrl\">p2p_ctrl</a> &= ~<a class=\"id\" href=\"#PCI_BRIDGE_CTL_BUS_RESET\">PCI_BRIDGE_CTL_BUS_RESET</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_BRIDGE_CONTROL\">PCI_BRIDGE_CONTROL</a>, <a class=\"id\" href=\"#p2p_ctrl\">p2p_ctrl</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * System software must wait for at least 100ms from the end</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of a reset of one or more device before it is permitted</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to issue Configuration Requests to those devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(200);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * default_downstream_reset_link - default reset function for Downstream Port</span>", 
"<span class=\"comment\"> * @dev: pointer to downstream port's pci_dev data structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invoked when performing link reset at Downstream Port w/ no aer driver.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#pci_ers_result_t\">pci_ers_result_t</a> <a class=\"id\" href=\"#default_downstream_reset_link\">default_downstream_reset_link</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aer_do_secondary_bus_reset\">aer_do_secondary_bus_reset</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>\"Downstream Port link has been reset\\n\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PCI_ERS_RESULT_RECOVERED\">PCI_ERS_RESULT_RECOVERED</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#find_aer_service_iter\">find_aer_service_iter</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#device\">device</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcie_port_service_driver\">pcie_port_service_driver</a> *<a class=\"id\" href=\"#service_driver\">service_driver</a>, **<a class=\"id\" href=\"#drv\">drv</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a> = (struct <a class=\"id\" href=\"#pcie_port_service_driver\">pcie_port_service_driver</a> **) <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#bus\">bus</a> == &amp;<a class=\"id\" href=\"#pcie_port_bus_type\">pcie_port_bus_type</a> && <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#driver\">driver</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#service_driver\">service_driver</a> = <a class=\"id\" href=\"#to_service_driver\">to_service_driver</a>(<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#service_driver\">service_driver</a>-><a class=\"id\" href=\"#service\">service</a> == <a class=\"id\" href=\"#PCIE_PORT_SERVICE_AER\">PCIE_PORT_SERVICE_AER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#service_driver\">service_driver</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pcie_port_service_driver\">pcie_port_service_driver</a> *<a class=\"id\" href=\"#find_aer_service\">find_aer_service</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcie_port_service_driver\">pcie_port_service_driver</a> *<a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_for_each_child\">device_for_each_child</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#drv\">drv</a>, <a class=\"id\" href=\"#find_aer_service_iter\">find_aer_service_iter</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#drv\">drv</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#pci_ers_result_t\">pci_ers_result_t</a> <a class=\"id\" href=\"#reset_link\">reset_link</a>(struct <a class=\"id\" href=\"#pcie_device\">pcie_device</a> *<a class=\"id\" href=\"#aerdev\">aerdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#udev\">udev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_ers_result_t\">pci_ers_result_t</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcie_port_service_driver\">pcie_port_service_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hdr_type\">hdr_type</a> &amp; <a class=\"id\" href=\"#PCI_HEADER_TYPE_BRIDGE\">PCI_HEADER_TYPE_BRIDGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reset this port for all subordinates */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udev\">udev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reset the upstream component (likely downstream port) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udev\">udev</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use the aer driver of the component firstly */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#find_aer_service\">find_aer_service</a>(<a class=\"id\" href=\"#udev\">udev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#driver\">driver</a> && <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#reset_link\">reset_link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#reset_link\">reset_link</a>(<a class=\"id\" href=\"#udev\">udev</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#udev\">udev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a> == <a class=\"id\" href=\"#PCI_EXP_TYPE_DOWNSTREAM\">PCI_EXP_TYPE_DOWNSTREAM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#default_downstream_reset_link\">default_downstream_reset_link</a>(<a class=\"id\" href=\"#udev\">udev</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"no link-reset support at upstream device %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_name\">pci_name</a>(<a class=\"id\" href=\"#udev\">udev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PCI_ERS_RESULT_DISCONNECT\">PCI_ERS_RESULT_DISCONNECT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#PCI_ERS_RESULT_RECOVERED\">PCI_ERS_RESULT_RECOVERED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"link reset at upstream device %s failed\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_name\">pci_name</a>(<a class=\"id\" href=\"#udev\">udev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PCI_ERS_RESULT_DISCONNECT\">PCI_ERS_RESULT_DISCONNECT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * do_recovery - handle nonfatal/fatal error recovery process</span>", 
"<span class=\"comment\"> * @aerdev: pointer to a pcie_device data structure of root port</span>", 
"<span class=\"comment\"> * @dev: pointer to a pci_dev data structure of agent detecting an error</span>", 
"<span class=\"comment\"> * @severity: error severity type</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invoked when an error is nonfatal/fatal. Once being invoked, broadcast</span>", 
"<span class=\"comment\"> * error detected message to all downstream drivers within a hierarchy in</span>", 
"<span class=\"comment\"> * question and return the returned code.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#do_recovery\">do_recovery</a>(struct <a class=\"id\" href=\"#pcie_device\">pcie_device</a> *<a class=\"id\" href=\"#aerdev\">aerdev</a>, struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#severity\">severity</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_ers_result_t\">pci_ers_result_t</a> <a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#PCI_ERS_RESULT_RECOVERED\">PCI_ERS_RESULT_RECOVERED</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#pci_channel_state\">pci_channel_state</a> <a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#severity\">severity</a> == <a class=\"id\" href=\"#AER_FATAL\">AER_FATAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#pci_channel_io_frozen\">pci_channel_io_frozen</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#pci_channel_io_normal\">pci_channel_io_normal</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#broadcast_error_message\">broadcast_error_message</a>(<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"error_detected\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#report_error_detected\">report_error_detected</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#severity\">severity</a> == <a class=\"id\" href=\"#AER_FATAL\">AER_FATAL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#reset_link\">reset_link</a>(<a class=\"id\" href=\"#aerdev\">aerdev</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> != <a class=\"id\" href=\"#PCI_ERS_RESULT_RECOVERED\">PCI_ERS_RESULT_RECOVERED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#PCI_ERS_RESULT_CAN_RECOVER\">PCI_ERS_RESULT_CAN_RECOVER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#broadcast_error_message\">broadcast_error_message</a>(<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"mmio_enabled\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#report_mmio_enabled\">report_mmio_enabled</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#PCI_ERS_RESULT_NEED_RESET\">PCI_ERS_RESULT_NEED_RESET</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * TODO: Should call platform-specific</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * functions to reset slot before calling</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * drivers' slot_reset callbacks?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#broadcast_error_message\">broadcast_error_message</a>(<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"slot_reset\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#report_slot_reset\">report_slot_reset</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#PCI_ERS_RESULT_RECOVERED\">PCI_ERS_RESULT_RECOVERED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#broadcast_error_message\">broadcast_error_message</a>(<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"resume\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#report_resume\">report_resume</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>\"AER driver successfully recovered\\n\");", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#failed\">failed</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* TODO: Should kernel panic here? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>\"AER driver didn't recover\\n\");", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * handle_error_source - handle logging error into an event log</span>", 
"<span class=\"comment\"> * @aerdev: pointer to pcie_device data structure of the root port</span>", 
"<span class=\"comment\"> * @dev: pointer to pci_dev data structure of error source device</span>", 
"<span class=\"comment\"> * @info: comprehensive error information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invoked when an error being detected by Root Port.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#handle_error_source\">handle_error_source</a>(struct <a class=\"id\" href=\"#pcie_device\">pcie_device</a> *<a class=\"id\" href=\"#aerdev\">aerdev</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aer_err_info\">aer_err_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#severity\">severity</a> == <a class=\"id\" href=\"#AER_CORRECTABLE\">AER_CORRECTABLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Correctable error does not need software intevention.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * No need to go through error recovery process.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ext_capability\">pci_find_ext_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_EXT_CAP_ID_ERR\">PCI_EXT_CAP_ID_ERR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_COR_STATUS\">PCI_ERR_COR_STATUS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_recovery\">do_recovery</a>(<a class=\"id\" href=\"#aerdev\">aerdev</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#severity\">severity</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_device_error_info - read error status from dev and store it to info</span>", 
"<span class=\"comment\"> * @dev: pointer to the device expected to have a error record</span>", 
"<span class=\"comment\"> * @info: pointer to structure to store the error record</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 1 on success, 0 on error.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that @info is reused among all error devices. Clear fields properly.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#get_device_error_info\">get_device_error_info</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#aer_err_info\">aer_err_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#temp\">temp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must reset in this function */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#status\">status</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#tlp_header_valid\">tlp_header_valid</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ext_capability\">pci_find_ext_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_EXT_CAP_ID_ERR\">PCI_EXT_CAP_ID_ERR</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The device might not support AER */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#severity\">severity</a> == <a class=\"id\" href=\"#AER_CORRECTABLE\">AER_CORRECTABLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_COR_STATUS\">PCI_ERR_COR_STATUS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_COR_MASK\">PCI_ERR_COR_MASK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#status\">status</a> &amp; ~<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#mask\">mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hdr_type\">hdr_type</a> &amp; <a class=\"id\" href=\"#PCI_HEADER_TYPE_BRIDGE\">PCI_HEADER_TYPE_BRIDGE</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#severity\">severity</a> == <a class=\"id\" href=\"#AER_NONFATAL\">AER_NONFATAL</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Link is still healthy for IO reads */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_UNCOR_STATUS\">PCI_ERR_UNCOR_STATUS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_UNCOR_MASK\">PCI_ERR_UNCOR_MASK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#status\">status</a> &amp; ~<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#mask\">mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get First Error Pointer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_CAP\">PCI_ERR_CAP</a>, &amp;<a class=\"id\" href=\"#temp\">temp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#first_error\">first_error</a> = <a class=\"id\" href=\"#PCI_ERR_CAP_FEP\">PCI_ERR_CAP_FEP</a>(<a class=\"id\" href=\"#temp\">temp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#AER_LOG_TLP_MASKS\">AER_LOG_TLP_MASKS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#tlp_header_valid\">tlp_header_valid</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_HEADER_LOG\">PCI_ERR_HEADER_LOG</a>, &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#tlp\">tlp</a>.<a class=\"id\" href=\"#dw0\">dw0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_HEADER_LOG\">PCI_ERR_HEADER_LOG</a> + 4, &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#tlp\">tlp</a>.<a class=\"id\" href=\"#dw1\">dw1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_HEADER_LOG\">PCI_ERR_HEADER_LOG</a> + 8, &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#tlp\">tlp</a>.<a class=\"id\" href=\"#dw2\">dw2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ERR_HEADER_LOG\">PCI_ERR_HEADER_LOG</a> + 12, &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#tlp\">tlp</a>.<a class=\"id\" href=\"#dw3\">dw3</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#aer_process_err_devices\">aer_process_err_devices</a>(struct <a class=\"id\" href=\"#pcie_device\">pcie_device</a> *<a class=\"id\" href=\"#p_device\">p_device</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#aer_err_info\">aer_err_info</a> *<a class=\"id\" href=\"#e_info\">e_info</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Report all before handle them, not to lost records by reset etc. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#error_dev_num\">error_dev_num</a> && <a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#dev\">dev</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_device_error_info\">get_device_error_info</a>(<a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#dev\">dev</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#e_info\">e_info</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aer_print_error\">aer_print_error</a>(<a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#dev\">dev</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#e_info\">e_info</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#error_dev_num\">error_dev_num</a> && <a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#dev\">dev</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_device_error_info\">get_device_error_info</a>(<a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#dev\">dev</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#e_info\">e_info</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle_error_source\">handle_error_source</a>(<a class=\"id\" href=\"#p_device\">p_device</a>, <a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#dev\">dev</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#e_info\">e_info</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * aer_isr_one_error - consume an error detected by root port</span>", 
"<span class=\"comment\"> * @p_device: pointer to error root port service device</span>", 
"<span class=\"comment\"> * @e_src: pointer to an error source</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#aer_isr_one_error\">aer_isr_one_error</a>(struct <a class=\"id\" href=\"#pcie_device\">pcie_device</a> *<a class=\"id\" href=\"#p_device\">p_device</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#aer_err_source\">aer_err_source</a> *<a class=\"id\" href=\"#e_src\">e_src</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aer_err_info\">aer_err_info</a> *<a class=\"id\" href=\"#e_info\">e_info</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* struct aer_err_info might be big, so we allocate it with slab */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e_info\">e_info</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#aer_err_info\">aer_err_info</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#e_info\">e_info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#p_device\">p_device</a>-><a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Can't allocate mem when processing AER errors\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There is a possibility that both correctable error and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * uncorrectable error being logged. Report correctable error first.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#e_src\">e_src</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#PCI_ERR_ROOT_COR_RCV\">PCI_ERR_ROOT_COR_RCV</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#ERR_COR_ID\">ERR_COR_ID</a>(<a class=\"id\" href=\"#e_src\">e_src</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#severity\">severity</a> = <a class=\"id\" href=\"#AER_CORRECTABLE\">AER_CORRECTABLE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#e_src\">e_src</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#PCI_ERR_ROOT_MULTI_COR_RCV\">PCI_ERR_ROOT_MULTI_COR_RCV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#multi_error_valid\">multi_error_valid</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#multi_error_valid\">multi_error_valid</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aer_print_port_info\">aer_print_port_info</a>(<a class=\"id\" href=\"#p_device\">p_device</a>-><a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#e_info\">e_info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#find_source_device\">find_source_device</a>(<a class=\"id\" href=\"#p_device\">p_device</a>-><a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#e_info\">e_info</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aer_process_err_devices\">aer_process_err_devices</a>(<a class=\"id\" href=\"#p_device\">p_device</a>, <a class=\"id\" href=\"#e_info\">e_info</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#e_src\">e_src</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#PCI_ERR_ROOT_UNCOR_RCV\">PCI_ERR_ROOT_UNCOR_RCV</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#ERR_UNCOR_ID\">ERR_UNCOR_ID</a>(<a class=\"id\" href=\"#e_src\">e_src</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#e_src\">e_src</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#PCI_ERR_ROOT_FATAL_RCV\">PCI_ERR_ROOT_FATAL_RCV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#severity\">severity</a> = <a class=\"id\" href=\"#AER_FATAL\">AER_FATAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#severity\">severity</a> = <a class=\"id\" href=\"#AER_NONFATAL\">AER_NONFATAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#e_src\">e_src</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#PCI_ERR_ROOT_MULTI_UNCOR_RCV\">PCI_ERR_ROOT_MULTI_UNCOR_RCV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#multi_error_valid\">multi_error_valid</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e_info\">e_info</a>-><a class=\"id\" href=\"#multi_error_valid\">multi_error_valid</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aer_print_port_info\">aer_print_port_info</a>(<a class=\"id\" href=\"#p_device\">p_device</a>-><a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#e_info\">e_info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#find_source_device\">find_source_device</a>(<a class=\"id\" href=\"#p_device\">p_device</a>-><a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#e_info\">e_info</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aer_process_err_devices\">aer_process_err_devices</a>(<a class=\"id\" href=\"#p_device\">p_device</a>, <a class=\"id\" href=\"#e_info\">e_info</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#e_info\">e_info</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_e_source - retrieve an error source</span>", 
"<span class=\"comment\"> * @rpc: pointer to the root port which holds an error</span>", 
"<span class=\"comment\"> * @e_src: pointer to store retrieved error source</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 1 if an error source is retrieved, otherwise 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invoked by DPC handler to consume an error.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#get_e_source\">get_e_source</a>(struct <a class=\"id\" href=\"#aer_rpc\">aer_rpc</a> *<a class=\"id\" href=\"#rpc\">rpc</a>, struct <a class=\"id\" href=\"#aer_err_source\">aer_err_source</a> *<a class=\"id\" href=\"#e_src\">e_src</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Lock access to Root error producer/consumer index */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rpc\">rpc</a>-><a class=\"id\" href=\"#e_lock\">e_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rpc\">rpc</a>-><a class=\"id\" href=\"#prod_idx\">prod_idx</a> == <a class=\"id\" href=\"#rpc\">rpc</a>-><a class=\"id\" href=\"#cons_idx\">cons_idx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rpc\">rpc</a>-><a class=\"id\" href=\"#e_lock\">e_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#e_src\">e_src</a> = <a class=\"id\" href=\"#rpc\">rpc</a>-><a class=\"id\" href=\"#e_sources\">e_sources</a>[<a class=\"id\" href=\"#rpc\">rpc</a>-><a class=\"id\" href=\"#cons_idx\">cons_idx</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rpc\">rpc</a>-><a class=\"id\" href=\"#cons_idx\">cons_idx</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rpc\">rpc</a>-><a class=\"id\" href=\"#cons_idx\">cons_idx</a> == <a class=\"id\" href=\"#AER_ERROR_SOURCES_MAX\">AER_ERROR_SOURCES_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpc\">rpc</a>-><a class=\"id\" href=\"#cons_idx\">cons_idx</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rpc\">rpc</a>-><a class=\"id\" href=\"#e_lock\">e_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * aer_isr - consume errors detected by root port</span>", 
"<span class=\"comment\"> * @work: definition of this work item</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invoked, as DPC, when root port records new detected error</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#aer_isr\">aer_isr</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aer_rpc\">aer_rpc</a> *<a class=\"id\" href=\"#rpc\">rpc</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#aer_rpc\">aer_rpc</a>, <a class=\"id\" href=\"#dpc_handler\">dpc_handler</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcie_device\">pcie_device</a> *<a class=\"id\" href=\"#p_device\">p_device</a> = <a class=\"id\" href=\"#rpc\">rpc</a>-><a class=\"id\" href=\"#rpd\">rpd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aer_err_source\">aer_err_source</a> <a class=\"id\" href=\"#e_src\">e_src</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#rpc\">rpc</a>-><a class=\"id\" href=\"#rpc_mutex\">rpc_mutex</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#get_e_source\">get_e_source</a>(<a class=\"id\" href=\"#rpc\">rpc</a>, &amp;<a class=\"id\" href=\"#e_src\">e_src</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aer_isr_one_error\">aer_isr_one_error</a>(<a class=\"id\" href=\"#p_device\">p_device</a>, &amp;<a class=\"id\" href=\"#e_src\">e_src</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#rpc\">rpc</a>-><a class=\"id\" href=\"#rpc_mutex\">rpc_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#rpc\">rpc</a>-><a class=\"id\" href=\"#wait_release\">wait_release</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * aer_init - provide AER initialization</span>", 
"<span class=\"comment\"> * @dev: pointer to AER pcie device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invoked when AER service driver is loaded.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#aer_init\">aer_init</a>(struct <a class=\"id\" href=\"#pcie_device\">pcie_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#forceload\">forceload</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"aerdrv forceload requested.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcie_aer_force_firmware_first\">pcie_aer_force_firmware_first</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#port\">port</a>, 0);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/89/b384410de04a439522cddd74fc88c85be37d76.xr', __xr_tmp);
