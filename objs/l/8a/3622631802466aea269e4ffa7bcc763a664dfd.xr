var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/binfmt_script.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1996  Martin von LÃ¶wis</span>", 
"<span class=\"comment\"> *  original #!-checking implemented by tytso.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stat\">stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#binfmts\">binfmts</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static int <a class=\"id\" href=\"#load_script\">load_script</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>,struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#i_arg\">i_arg</a>, *<a class=\"id\" href=\"#i_name\">i_name</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#interp\">interp</a>[<a class=\"id\" href=\"#BINPRM_BUF_SIZE\">BINPRM_BUF_SIZE</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>[0] != '#') || (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>[1] != '!') ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#recursion_depth\">recursion_depth</a> &gt; <a class=\"id\" href=\"#BINPRM_MAX_RECURSION\">BINPRM_MAX_RECURSION</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This section does the #! interpretation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sorta complicated, but hopefully it will work.  -TYT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#recursion_depth\">recursion_depth</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#allow_write_access\">allow_write_access</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#BINPRM_BUF_SIZE\">BINPRM_BUF_SIZE</a> - 1] = '\\0';", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>, '\\n')) == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>+<a class=\"id\" href=\"#BINPRM_BUF_SIZE\">BINPRM_BUF_SIZE</a>-1;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a> = '\\0';", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cp\">cp</a> &gt; <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#cp\">cp</a> == ' ') || (*<a class=\"id\" href=\"#cp\">cp</a> == '\\t'))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a> = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>+2; (*<a class=\"id\" href=\"#cp\">cp</a> == ' ') || (*<a class=\"id\" href=\"#cp\">cp</a> == '\\t'); <a class=\"id\" href=\"#cp\">cp</a>++);", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#cp\">cp</a> == '\\0') ", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>; <span class=\"comment\">/* No interpreter name found */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i_name\">i_name</a> = <a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i_arg\">i_arg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>for ( ; *<a class=\"id\" href=\"#cp\">cp</a> && (*<a class=\"id\" href=\"#cp\">cp</a> != ' ') && (*<a class=\"id\" href=\"#cp\">cp</a> != '\\t'); <a class=\"id\" href=\"#cp\">cp</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nothing */</span> ;", 
"<span class=\"ts\"/>while ((*<a class=\"id\" href=\"#cp\">cp</a> == ' ') || (*<a class=\"id\" href=\"#cp\">cp</a> == '\\t'))", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a>++ = '\\0';", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#cp\">cp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_arg\">i_arg</a> = <a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a> (<a class=\"id\" href=\"#interp\">interp</a>, <a class=\"id\" href=\"#i_name\">i_name</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * OK, we've parsed out the interpreter name and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (optional) argument.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Splice in (1) the interpreter's name for argv[0]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *           (2) (optional) argument to interpreter</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *           (3) filename of shell script (replace argv[0])</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is done in reverse order, because of how the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * user environment and arguments are stored.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#remove_arg_zero\">remove_arg_zero</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_strings_kernel\">copy_strings_kernel</a>(1, &amp;<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#interp\">interp</a>, <a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0) return <a class=\"id\" href=\"#retval\">retval</a>; ", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#argc\">argc</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i_arg\">i_arg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_strings_kernel\">copy_strings_kernel</a>(1, &amp;<a class=\"id\" href=\"#i_arg\">i_arg</a>, <a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0) return <a class=\"id\" href=\"#retval\">retval</a>; ", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#argc\">argc</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_strings_kernel\">copy_strings_kernel</a>(1, &amp;<a class=\"id\" href=\"#i_name\">i_name</a>, <a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) return <a class=\"id\" href=\"#retval\">retval</a>; ", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#argc\">argc</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#interp\">interp</a> = <a class=\"id\" href=\"#interp\">interp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * OK, now restart the process with the interpreter's dentry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#open_exec\">open_exec</a>(<a class=\"id\" href=\"#interp\">interp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#prepare_binprm\">prepare_binprm</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#search_binary_handler\">search_binary_handler</a>(<a class=\"id\" href=\"#bprm\">bprm</a>,<a class=\"id\" href=\"#regs\">regs</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#linux_binfmt\">linux_binfmt</a> <a class=\"id\" href=\"#script_format\">script_format</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#module\">module</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#load_binary\">load_binary</a><span class=\"ts\"/>= <a class=\"id\" href=\"#load_script\">load_script</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_script_binfmt\">init_script_binfmt</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#register_binfmt\">register_binfmt</a>(&amp;<a class=\"id\" href=\"#script_format\">script_format</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#exit_script_binfmt\">exit_script_binfmt</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_binfmt\">unregister_binfmt</a>(&amp;<a class=\"id\" href=\"#script_format\">script_format</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#init_script_binfmt\">init_script_binfmt</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#exit_script_binfmt\">exit_script_binfmt</a>);", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
];
xr_frag_insert('l/8a/3622631802466aea269e4ffa7bcc763a664dfd.xr', __xr_tmp);
