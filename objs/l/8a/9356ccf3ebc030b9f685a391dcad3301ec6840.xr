var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/ext3/inode.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1992, 1993, 1994, 1995</span>", 
"<span class=\"comment\"> * Remy Card (card@masi.ibp.fr)</span>", 
"<span class=\"comment\"> * Laboratoire MASI - Institut Blaise Pascal</span>", 
"<span class=\"comment\"> * Universite Pierre et Marie Curie (Paris VI)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  linux/fs/minix/inode.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Goal-directed block allocation by Stephen Tweedie</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(sct@redhat.com), 1993, 1998</span>", 
"<span class=\"comment\"> *  Big-endian to little-endian byte-swapping/bitmaps by</span>", 
"<span class=\"comment\"> *        David S. Miller (davem@caip.rutgers.edu), 1995</span>", 
"<span class=\"comment\"> *  64-bit file support on 64-bit platforms by Jakub Jelinek</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(jj@sunsite.ms.mff.cuni.cz)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Assorted race fixes, rewrite of ext3_get_block() by Al Viro, 2000</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ext3_jbd\">ext3_jbd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jbd\">jbd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highuid\">highuid</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#quotaops\">quotaops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mpage\">mpage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uio\">uio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fiemap\">fiemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"xattr.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acl.h\"", 
"", 
"static int <a class=\"id\" href=\"#ext3_writepage_trans_blocks\">ext3_writepage_trans_blocks</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Test whether an inode is a fast symlink.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext3_inode_is_fast_symlink\">ext3_inode_is_fast_symlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ea_blocks\">ea_blocks</a> = <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_file_acl\">i_file_acl</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> >> 9) : 0;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) && <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a> - <a class=\"id\" href=\"#ea_blocks\">ea_blocks</a> == 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The ext3 forget function must perform a revoke if we are freeing data</span>", 
"<span class=\"comment\"> * which has been journaled.  Metadata (eg. indirect blocks) must be</span>", 
"<span class=\"comment\"> * revoked in all cases.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * \"bh\" may be NULL: a metadata block may have been freed from memory</span>", 
"<span class=\"comment\"> * but there may still be a record of it in the journal, and that record</span>", 
"<span class=\"comment\"> * still needs to be revoked.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext3_forget\">ext3_forget</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, int <a class=\"id\" href=\"#is_metadata\">is_metadata</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#blocknr\">blocknr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"enter\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(4, \"forgetting bh %p: is_metadata = %d, mode %o, \"", 
"<span class=\"ts\"/><span class=\"ts\"/>  \"data mode %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#is_metadata\">is_metadata</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#test_opt\">test_opt</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#DATA_FLAGS\">DATA_FLAGS</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Never use the revoke function if we are doing full data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * journaling: there is no need to, and a V1 superblock won't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * support it.  Otherwise, only skip the revoke on un-journaled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * data blocks. */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_opt\">test_opt</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#DATA_FLAGS\">DATA_FLAGS</a>) == <a class=\"id\" href=\"#EXT3_MOUNT_JOURNAL_DATA\">EXT3_MOUNT_JOURNAL_DATA</a> ||", 
"<span class=\"ts\"/>    (!<a class=\"id\" href=\"#is_metadata\">is_metadata</a> && !<a class=\"id\" href=\"#ext3_should_journal_data\">ext3_should_journal_data</a>(<a class=\"id\" href=\"#inode\">inode</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"call journal_forget\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ext3_journal_forget\">ext3_journal_forget</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * data!=journal &amp;&amp; (is_metadata || should_journal_data(inode))</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"call ext3_journal_revoke\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_revoke\">ext3_journal_revoke</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#blocknr\">blocknr</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_abort\">ext3_abort</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"error %d when attempting revoke\", <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"exit\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Work out how many blocks we need to proceed with the next chunk of a</span>", 
"<span class=\"comment\"> * truncate transaction.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#blocks_for_truncate\">blocks_for_truncate</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#needed\">needed</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#needed\">needed</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a> >> (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a> - 9);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Give ourselves just enough room to cope with inodes in which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * i_blocks is corrupt: we've seen disk corruptions in the past</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which resulted in random data in an inode which looked enough</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * like a regular file for ext3 to try to delete it.  Things</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will go a bit crazy if that happens, but at least we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * try not to panic the whole kernel. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#needed\">needed</a> &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#needed\">needed</a> = 2;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* But we need to bound the transaction so we don't overflow the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * journal. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#needed\">needed</a> &gt; <a class=\"id\" href=\"#EXT3_MAX_TRANS_DATA\">EXT3_MAX_TRANS_DATA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#needed\">needed</a> = <a class=\"id\" href=\"#EXT3_MAX_TRANS_DATA\">EXT3_MAX_TRANS_DATA</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#EXT3_DATA_TRANS_BLOCKS\">EXT3_DATA_TRANS_BLOCKS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>) + <a class=\"id\" href=\"#needed\">needed</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Truncate transactions can be complex and absolutely huge.  So we need to</span>", 
"<span class=\"comment\"> * be able to restart the transaction at a conventient checkpoint to make</span>", 
"<span class=\"comment\"> * sure we don't overflow the journal.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * start_transaction gets us a new handle for a truncate transaction,</span>", 
"<span class=\"comment\"> * and extend_transaction tries to extend the existing one a bit.  If</span>", 
"<span class=\"comment\"> * extend fails, we need to propagate the failure up and restart the</span>", 
"<span class=\"comment\"> * transaction in the top-level truncate loop. --sct</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#start_transaction\">start_transaction</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ext3_journal_start\">ext3_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#blocks_for_truncate\">blocks_for_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#result\">result</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_std_error\">ext3_std_error</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#result\">result</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to extend this transaction for the purposes of truncation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if we managed to create more room.  If we can't create more</span>", 
"<span class=\"comment\"> * room, and the transaction must be restarted we return 1.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#try_to_extend_transaction\">try_to_extend_transaction</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_buffer_credits\">h_buffer_credits</a> &gt; <a class=\"id\" href=\"#EXT3_RESERVE_TRANS_BLOCKS\">EXT3_RESERVE_TRANS_BLOCKS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext3_journal_extend\">ext3_journal_extend</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#blocks_for_truncate\">blocks_for_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Restart the transaction associated with *handle.  This does a commit,</span>", 
"<span class=\"comment\"> * so before we call here everything must be consistently dirtied against</span>", 
"<span class=\"comment\"> * this transaction.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#truncate_restart_transaction\">truncate_restart_transaction</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(2, \"restarting handle %p\\n\", <a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Drop truncate_mutex to avoid deadlock with ext3_get_blocks_handle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At this moment, get_block can be called only for blocks inside</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * i_size since page cache has been already dropped and writes are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * blocked by i_mutex. So we can safely drop the truncate_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#truncate_mutex\">truncate_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext3_journal_restart\">ext3_journal_restart</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#blocks_for_truncate\">blocks_for_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#truncate_mutex\">truncate_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called at inode eviction from icache</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext3_evict_inode\">ext3_evict_inode</a> (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_block_alloc_info\">ext3_block_alloc_info</a> *<a class=\"id\" href=\"#rsv\">rsv</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#want_delete\">want_delete</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> && !<a class=\"id\" href=\"#is_bad_inode\">is_bad_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot_initialize\">dquot_initialize</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#want_delete\">want_delete</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#truncate_inode_pages\">truncate_inode_pages</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_discard_reservation\">ext3_discard_reservation</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a> = <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rsv\">rsv</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#rsv\">rsv</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#want_delete\">want_delete</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_delete\">no_delete</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#start_transaction\">start_transaction</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we're going to skip the normal cleanup, we still need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * make sure that the in-core orphan linked list is properly</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cleaned up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_orphan_del\">ext3_orphan_del</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_delete\">no_delete</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_SYNC\">IS_SYNC</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_sync\">h_sync</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_truncate\">ext3_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Kill off the orphan record which ext3_truncate created.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * AKPM: I think this can be inside the above `if'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that ext3_orphan_del() has to be able to cope with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * deletion of a non-existent orphan - this is because we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * know if ext3_truncate() actually created an orphan record.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (Well, we could do this if we need to, but heck - it works)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_orphan_del\">ext3_orphan_del</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_dtime\">i_dtime</a><span class=\"ts\"/>= <a class=\"id\" href=\"#get_seconds\">get_seconds</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * One subtle ordering requirement: if anything has gone wrong</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (transaction abort, IO errors, whatever), then we can still</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do these next steps (the fs will already have been marked as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * having errors), but we can't free the inode if the mark_dirty</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fails.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_mark_inode_dirty\">ext3_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If that failed, just dquot_drop() and be done with that */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot_drop\">dquot_drop</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_writeback\">end_writeback</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_xattr_delete_inode\">ext3_xattr_delete_inode</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot_free_inode\">dquot_free_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot_drop\">dquot_drop</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_writeback\">end_writeback</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_inode\">ext3_free_inode</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>return;", 
"<a class=\"id\" href=\"#no_delete\">no_delete</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_writeback\">end_writeback</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot_drop\">dquot_drop</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"typedef struct {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"} <a class=\"id\" href=\"#Indirect\">Indirect</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#add_chain\">add_chain</a>(<a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#key\">key</a> = *(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#verify_chain\">verify_chain</a>(<a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#from\">from</a> <= <a class=\"id\" href=\"#to\">to</a> && <a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#key\">key</a> == *<a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a>++;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#from\">from</a> &gt; <a class=\"id\" href=\"#to\">to</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_block_to_path - parse the block number into array of offsets</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: inode in question (we are only interested in its superblock)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@i_block: block number to be parsed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@offsets: array to store the offsets in</span>", 
"<span class=\"comment\"> *      @boundary: set this non-zero if the referred-to block is likely to be</span>", 
"<span class=\"comment\"> *             followed (on disk) by an indirect block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>To store the locations of file's data ext3 uses a data structure common</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for UNIX filesystems - tree of pointers anchored in the inode, with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>data blocks at leaves and indirect blocks in intermediate nodes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function translates the block number into path in that tree -</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>return value is the path length and @offsets[n] is the offset of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pointer to (n+1)th node in the nth one. If @block is out of range</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(negative or too large) warning is printed and zero returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note: function doesn't find node addresses, so no IO is needed. All</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>we need to know is the capacity of indirect blocks (taken from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>inode-&gt;i_sb).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Portability note: the last comparison (check that we fit into triple</span>", 
"<span class=\"comment\"> * indirect block) is spelled differently, because otherwise on an</span>", 
"<span class=\"comment\"> * architecture with 32-bit longs and 8Kb pages we might get into trouble</span>", 
"<span class=\"comment\"> * if our filesystem had 8Kb blocks. We might use long long, but that would</span>", 
"<span class=\"comment\"> * kill us on x86. Oh, well, at least the sign propagation does not matter -</span>", 
"<span class=\"comment\"> * i_block would have to be negative in the very beginning, so we would not</span>", 
"<span class=\"comment\"> * get there at all.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#ext3_block_to_path\">ext3_block_to_path</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#i_block\">i_block</a>, int <a class=\"id\" href=\"#offsets\">offsets</a>[4], int *<a class=\"id\" href=\"#boundary\">boundary</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ptrs\">ptrs</a> = <a class=\"id\" href=\"#EXT3_ADDR_PER_BLOCK\">EXT3_ADDR_PER_BLOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a> = <a class=\"id\" href=\"#EXT3_ADDR_PER_BLOCK_BITS\">EXT3_ADDR_PER_BLOCK_BITS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/>const long <a class=\"id\" href=\"#direct_blocks\">direct_blocks</a> = <a class=\"id\" href=\"#EXT3_NDIR_BLOCKS\">EXT3_NDIR_BLOCKS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#indirect_blocks\">indirect_blocks</a> = <a class=\"id\" href=\"#ptrs\">ptrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#double_blocks\">double_blocks</a> = (1 << (<a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a> * 2));", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#final\">final</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i_block\">i_block</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_warning\">ext3_warning</a> (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, \"ext3_block_to_path\", \"block < 0\");", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#i_block\">i_block</a> &lt; <a class=\"id\" href=\"#direct_blocks\">direct_blocks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#direct_blocks\">direct_blocks</a>;", 
"<span class=\"ts\"/>} else if ( (<a class=\"id\" href=\"#i_block\">i_block</a> -= <a class=\"id\" href=\"#direct_blocks\">direct_blocks</a>) &lt; <a class=\"id\" href=\"#indirect_blocks\">indirect_blocks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#EXT3_IND_BLOCK\">EXT3_IND_BLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#ptrs\">ptrs</a>;", 
"<span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#i_block\">i_block</a> -= <a class=\"id\" href=\"#indirect_blocks\">indirect_blocks</a>) &lt; <a class=\"id\" href=\"#double_blocks\">double_blocks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#EXT3_DIND_BLOCK\">EXT3_DIND_BLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a> >> <a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a> &amp; (<a class=\"id\" href=\"#ptrs\">ptrs</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#ptrs\">ptrs</a>;", 
"<span class=\"ts\"/>} else if (((<a class=\"id\" href=\"#i_block\">i_block</a> -= <a class=\"id\" href=\"#double_blocks\">double_blocks</a>) >> (<a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a> * 2)) &lt; <a class=\"id\" href=\"#ptrs\">ptrs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#EXT3_TIND_BLOCK\">EXT3_TIND_BLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a> >> (<a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a> * 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = (<a class=\"id\" href=\"#i_block\">i_block</a> >> <a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a>) &amp; (<a class=\"id\" href=\"#ptrs\">ptrs</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a> &amp; (<a class=\"id\" href=\"#ptrs\">ptrs</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#ptrs\">ptrs</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_warning\">ext3_warning</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, \"ext3_block_to_path\", \"block > big\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boundary\">boundary</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#boundary\">boundary</a> = <a class=\"id\" href=\"#final\">final</a> - 1 - (<a class=\"id\" href=\"#i_block\">i_block</a> &amp; (<a class=\"id\" href=\"#ptrs\">ptrs</a> - 1));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_get_branch - read the chain of indirect blocks leading to data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: inode in question</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@depth: depth of the chain (1 - direct pointer, etc.)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@offsets: offsets of pointers in inode/indirect blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chain: place to store the result</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@err: here we store the error value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Function fills the array of triples &lt;key, p, bh&gt; and returns %NULL</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if everything went OK or the pointer to the last filled triple</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(incomplete one) otherwise. Upon the return chain[i].key contains</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the number of (i+1)-th block in the chain (as it is stored in memory,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>i.e. little-endian 32-bit), chain[i].p contains the address of that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>number (it points into struct inode for i==0 and into the bh-&gt;b_data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for i&gt;0) and chain[i].bh points to the buffer_head of i-th indirect</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>block for i&gt;0 and NULL for i==0. In other words, it holds the block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>numbers of the chain, addresses they were taken from (and where we can</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>verify that chain did not change) and buffer_heads hosting these</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>numbers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Function stops when it stumbles upon zero pointer (absent block)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>(pointer to last triple returned, *@err == 0)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or when it gets an IO error reading an indirect block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>(ditto, *@err == -EIO)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or when it notices that chain had been changed while it was reading</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>(ditto, *@err == -EAGAIN)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or when it reads all @depth-1 indirect blocks successfully and finds</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the whole chain, all way to the data (returns %NULL, *err == 0).</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#ext3_get_branch\">ext3_get_branch</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#depth\">depth</a>, int *<a class=\"id\" href=\"#offsets\">offsets</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#Indirect\">Indirect</a> <a class=\"id\" href=\"#chain\">chain</a>[4], int *<a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#chain\">chain</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* i_data is not going away, no lock needed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_chain\">add_chain</a> (<a class=\"id\" href=\"#chain\">chain</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_data\">i_data</a> + *<a class=\"id\" href=\"#offsets\">offsets</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#key\">key</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_block\">no_block</a>;", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#depth\">depth</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_bread\">sb_bread</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#key\">key</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failure\">failure</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reader: pointers */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#verify_chain\">verify_chain</a>(<a class=\"id\" href=\"#chain\">chain</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#changed\">changed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_chain\">add_chain</a>(++<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#bh\">bh</a>, (<a class=\"id\" href=\"#__le32\">__le32</a>*)<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a> + *++<a class=\"id\" href=\"#offsets\">offsets</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reader: end */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#key\">key</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_block\">no_block</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<a class=\"id\" href=\"#changed\">changed</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#no_block\">no_block</a>;", 
"<a class=\"id\" href=\"#failure\">failure</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<a class=\"id\" href=\"#no_block\">no_block</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_find_near - find a place for allocation with sufficient locality</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: owner</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ind: descriptor of indirect block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function returns the preferred place for block allocation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It is used when heuristic for sequential allocation fails.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Rules are:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  + if there is a block to the left of our position - allocate near it.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  + if pointer will live in indirect block - allocate near that block.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  + if pointer will live in inode - allocate in the same</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    cylinder group.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In the latter case we colour the starting block by the callers PID to</span>", 
"<span class=\"comment\"> * prevent it from clashing with concurrent allocations for a different inode</span>", 
"<span class=\"comment\"> * in the same block group.   The PID is used here so that functionally related</span>", 
"<span class=\"comment\"> * files will be close-by on-disk.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Caller must make sure that @ind is valid and will stay that way.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#ext3_find_near\">ext3_find_near</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#ind\">ind</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_inode_info\">ext3_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ind\">ind</a>-><a class=\"id\" href=\"#bh\">bh</a> ? (<a class=\"id\" href=\"#__le32\">__le32</a>*) <a class=\"id\" href=\"#ind\">ind</a>-><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a> : <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data\">i_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#bg_start\">bg_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#colour\">colour</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Try to find previous block */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#ind\">ind</a>-><a class=\"id\" href=\"#p\">p</a> - 1; <a class=\"id\" href=\"#p\">p</a> >= <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#p\">p</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No such thing, so let's try location of indirect block */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ind\">ind</a>-><a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ind\">ind</a>-><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is going to be referred to from the inode itself? OK, just put it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * into the same cylinder group then.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bg_start\">bg_start</a> = <a class=\"id\" href=\"#ext3_group_first_block_no\">ext3_group_first_block_no</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_group\">i_block_group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#colour\">colour</a> = (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a> % 16) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#EXT3_BLOCKS_PER_GROUP\">EXT3_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>) / 16);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bg_start\">bg_start</a> + <a class=\"id\" href=\"#colour\">colour</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_find_goal - find a preferred place for allocation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: owner</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@block:  block we want</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@partial: pointer to the last triple within a chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Normally this function find the preferred place for block allocation,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returns it.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
];
xr_frag_insert('l/8a/9356ccf3ebc030b9f685a391dcad3301ec6840.xr', __xr_tmp);
