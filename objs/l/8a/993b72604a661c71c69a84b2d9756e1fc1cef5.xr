var __xr_tmp = [
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__ret\">__ret</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#condition\">condition</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wait_event_killable\">__wait_event_killable</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#__ret\">__ret</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are the old interfaces to sleep waiting for an event.</span>", 
"<span class=\"comment\"> * They are racy.  DO NOT use them, use the wait_event* interfaces above.</span>", 
"<span class=\"comment\"> * We plan to remove these interfaces.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#sleep_on\">sleep_on</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>);", 
"extern long <a class=\"id\" href=\"#sleep_on_timeout\">sleep_on_timeout</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      signed long <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"extern void <a class=\"id\" href=\"#interruptible_sleep_on\">interruptible_sleep_on</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>);", 
"extern long <a class=\"id\" href=\"#interruptible_sleep_on_timeout\">interruptible_sleep_on_timeout</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   signed long <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Waitqueues which are removed from the waitqueue_head at wakeup time</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>, int <a class=\"id\" href=\"#state\">state</a>);", 
"void <a class=\"id\" href=\"#prepare_to_wait_exclusive\">prepare_to_wait_exclusive</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>, int <a class=\"id\" href=\"#state\">state</a>);", 
"void <a class=\"id\" href=\"#finish_wait\">finish_wait</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>);", 
"void <a class=\"id\" href=\"#abort_exclusive_wait\">abort_exclusive_wait</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mode\">mode</a>, void *<a class=\"id\" href=\"#key\">key</a>);", 
"int <a class=\"id\" href=\"#autoremove_wake_function\">autoremove_wake_function</a>(<a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>, unsigned <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#sync\">sync</a>, void *<a class=\"id\" href=\"#key\">key</a>);", 
"int <a class=\"id\" href=\"#wake_bit_function\">wake_bit_function</a>(<a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>, unsigned <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#sync\">sync</a>, void *<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_WAIT_FUNC\">DEFINE_WAIT_FUNC</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#function\">function</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> <a class=\"id\" href=\"#name\">name</a> = {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a><span class=\"ts\"/>= <a class=\"id\" href=\"#current\">current</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#function\">function</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#task_list\">task_list</a><span class=\"ts\"/>= <a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>((<a class=\"id\" href=\"#name\">name</a>).<a class=\"id\" href=\"#task_list\">task_list</a>),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#name\">name</a>) <a class=\"id\" href=\"#DEFINE_WAIT_FUNC\">DEFINE_WAIT_FUNC</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#autoremove_wake_function\">autoremove_wake_function</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_WAIT_BIT\">DEFINE_WAIT_BIT</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#word\">word</a>, <a class=\"id\" href=\"#bit\">bit</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wait_bit_queue\">wait_bit_queue</a> <a class=\"id\" href=\"#name\">name</a> = {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#__WAIT_BIT_KEY_INITIALIZER\">__WAIT_BIT_KEY_INITIALIZER</a>(<a class=\"id\" href=\"#word\">word</a>, <a class=\"id\" href=\"#bit\">bit</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#wait\">wait</a><span class=\"ts\"/>= {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a><span class=\"ts\"/>= <a class=\"id\" href=\"#current\">current</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#wake_bit_function\">wake_bit_function</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#task_list\">task_list</a><span class=\"ts\"/>=<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>((<a class=\"id\" href=\"#name\">name</a>).<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#task_list\">task_list</a>),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>},<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#init_wait\">init_wait</a>(<a class=\"id\" href=\"#wait\">wait</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#wait\">wait</a>)-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#current\">current</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#wait\">wait</a>)-><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#autoremove_wake_function\">autoremove_wake_function</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;(<a class=\"id\" href=\"#wait\">wait</a>)-><a class=\"id\" href=\"#task_list\">task_list</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#wait\">wait</a>)-><a class=\"id\" href=\"#flags\">flags</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_on_bit - wait for a bit to be cleared</span>", 
"<span class=\"comment\"> * @word: the word being waited on, a kernel virtual address</span>", 
"<span class=\"comment\"> * @bit: the bit of the word being waited on</span>", 
"<span class=\"comment\"> * @action: the function used to sleep, which may take special actions</span>", 
"<span class=\"comment\"> * @mode: the task state to sleep in</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There is a standard hashed waitqueue table for generic use. This</span>", 
"<span class=\"comment\"> * is the part of the hashtable's accessor API that waits on a bit.</span>", 
"<span class=\"comment\"> * For instance, if one were to have waiters on a bitflag, one would</span>", 
"<span class=\"comment\"> * call wait_on_bit() in threads waiting for the bit to clear.</span>", 
"<span class=\"comment\"> * One uses wait_on_bit() where one is waiting for the bit to clear,</span>", 
"<span class=\"comment\"> * but has no intention of setting it.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#wait_on_bit\">wait_on_bit</a>(void *<a class=\"id\" href=\"#word\">word</a>, int <a class=\"id\" href=\"#bit\">bit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#action\">action</a>)(void *), unsigned <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#word\">word</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#out_of_line_wait_on_bit\">out_of_line_wait_on_bit</a>(<a class=\"id\" href=\"#word\">word</a>, <a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#action\">action</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_on_bit_lock - wait for a bit to be cleared, when wanting to set it</span>", 
"<span class=\"comment\"> * @word: the word being waited on, a kernel virtual address</span>", 
"<span class=\"comment\"> * @bit: the bit of the word being waited on</span>", 
"<span class=\"comment\"> * @action: the function used to sleep, which may take special actions</span>", 
"<span class=\"comment\"> * @mode: the task state to sleep in</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There is a standard hashed waitqueue table for generic use. This</span>", 
"<span class=\"comment\"> * is the part of the hashtable's accessor API that waits on a bit</span>", 
"<span class=\"comment\"> * when one intends to set it, for instance, trying to lock bitflags.</span>", 
"<span class=\"comment\"> * For instance, if one were to have waiters trying to set bitflag</span>", 
"<span class=\"comment\"> * and waiting for it to clear before setting it, one would call</span>", 
"<span class=\"comment\"> * wait_on_bit() in threads waiting to be able to set the bit.</span>", 
"<span class=\"comment\"> * One uses wait_on_bit_lock() where one is waiting for the bit to</span>", 
"<span class=\"comment\"> * clear with the intention of setting it, and when done, clearing it.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#wait_on_bit_lock\">wait_on_bit_lock</a>(void *<a class=\"id\" href=\"#word\">word</a>, int <a class=\"id\" href=\"#bit\">bit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#action\">action</a>)(void *), unsigned <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#word\">word</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#out_of_line_wait_on_bit_lock\">out_of_line_wait_on_bit_lock</a>(<a class=\"id\" href=\"#word\">word</a>, <a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#action\">action</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"}", 
"<span class=\"ts\"/>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/8a/993b72604a661c71c69a84b2d9756e1fc1cef5.xr', __xr_tmp);
