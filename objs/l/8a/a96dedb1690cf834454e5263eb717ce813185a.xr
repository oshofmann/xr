var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A hash table (hashtab) maintains associations between</span>", 
"<span class=\"comment\"> * key values and datum values.  The type of the key values</span>", 
"<span class=\"comment\"> * and the type of the datum values is arbitrary.  The</span>", 
"<span class=\"comment\"> * functions for hash computation and key comparison are</span>", 
"<span class=\"comment\"> * provided by the creator of the table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author : Stephen Smalley, &lt;sds@epoch.ncsc.mil&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_SS_HASHTAB_H_\">_SS_HASHTAB_H_</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_SS_HASHTAB_H_\">_SS_HASHTAB_H_</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HASHTAB_MAX_NODES\">HASHTAB_MAX_NODES</a><span class=\"ts\"/>0xffffffff", 
"", 
"struct <a class=\"id\" href=\"#hashtab_node\">hashtab_node</a> {", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#datum\">datum</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hashtab_node\">hashtab_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#hashtab\">hashtab</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hashtab_node\">hashtab_node</a> **<a class=\"id\" href=\"#htable\">htable</a>;<span class=\"ts\"/><span class=\"comment\">/* hash table */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#size\">size</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* number of slots in hash table */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#nel\">nel</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* number of elements in hash table */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> (*<a class=\"id\" href=\"#hash_value\">hash_value</a>)(struct <a class=\"id\" href=\"#hashtab\">hashtab</a> *<a class=\"id\" href=\"#h\">h</a>, const void *<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hash function */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#keycmp\">keycmp</a>)(struct <a class=\"id\" href=\"#hashtab\">hashtab</a> *<a class=\"id\" href=\"#h\">h</a>, const void *<a class=\"id\" href=\"#key1\">key1</a>, const void *<a class=\"id\" href=\"#key2\">key2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* key comparison function */</span>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#hashtab_info\">hashtab_info</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#slots_used\">slots_used</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#max_chain_len\">max_chain_len</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Creates a new hash table with the specified characteristics.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns NULL if insufficent space is available or</span>", 
"<span class=\"comment\"> * the new hash table otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#hashtab\">hashtab</a> *<a class=\"id\" href=\"#hashtab_create\">hashtab_create</a>(<a class=\"id\" href=\"#u32\">u32</a> (*<a class=\"id\" href=\"#hash_value\">hash_value</a>)(struct <a class=\"id\" href=\"#hashtab\">hashtab</a> *<a class=\"id\" href=\"#h\">h</a>, const void *<a class=\"id\" href=\"#key\">key</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int (*<a class=\"id\" href=\"#keycmp\">keycmp</a>)(struct <a class=\"id\" href=\"#hashtab\">hashtab</a> *<a class=\"id\" href=\"#h\">h</a>, const void *<a class=\"id\" href=\"#key1\">key1</a>, const void *<a class=\"id\" href=\"#key2\">key2</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Inserts the specified (key, datum) pair into the specified hash table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns -ENOMEM on memory allocation error,</span>", 
"<span class=\"comment\"> * -EEXIST if there is already an entry with the same key,</span>", 
"<span class=\"comment\"> * -EINVAL for general errors or</span>", 
"<span class=\"comment\">  0 otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#hashtab_insert\">hashtab_insert</a>(struct <a class=\"id\" href=\"#hashtab\">hashtab</a> *<a class=\"id\" href=\"#h\">h</a>, void *<a class=\"id\" href=\"#k\">k</a>, void *<a class=\"id\" href=\"#d\">d</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Searches for the entry with the specified key in the hash table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns NULL if no entry has the specified key or</span>", 
"<span class=\"comment\"> * the datum of the entry otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#hashtab_search\">hashtab_search</a>(struct <a class=\"id\" href=\"#hashtab\">hashtab</a> *<a class=\"id\" href=\"#h\">h</a>, const void *<a class=\"id\" href=\"#k\">k</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Destroys the specified hash table.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#hashtab_destroy\">hashtab_destroy</a>(struct <a class=\"id\" href=\"#hashtab\">hashtab</a> *<a class=\"id\" href=\"#h\">h</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Applies the specified apply function to (key,datum,args)</span>", 
"<span class=\"comment\"> * for each entry in the specified hash table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The order in which the function is applied to the entries</span>", 
"<span class=\"comment\"> * is dependent upon the internal structure of the hash table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If apply returns a non-zero status, then hashtab_map will cease</span>", 
"<span class=\"comment\"> * iterating through the hash table and will propagate the error</span>", 
"<span class=\"comment\"> * return to its caller.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#hashtab_map\">hashtab_map</a>(struct <a class=\"id\" href=\"#hashtab\">hashtab</a> *<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#apply\">apply</a>)(void *<a class=\"id\" href=\"#k\">k</a>, void *<a class=\"id\" href=\"#d\">d</a>, void *<a class=\"id\" href=\"#args\">args</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"comment\">/* Fill info with some hash table statistics */</span>", 
"void <a class=\"id\" href=\"#hashtab_stat\">hashtab_stat</a>(struct <a class=\"id\" href=\"#hashtab\">hashtab</a> *<a class=\"id\" href=\"#h\">h</a>, struct <a class=\"id\" href=\"#hashtab_info\">hashtab_info</a> *<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _SS_HASHTAB_H */</span>", 
];
xr_frag_insert('l/8a/a96dedb1690cf834454e5263eb717ce813185a.xr', __xr_tmp);
