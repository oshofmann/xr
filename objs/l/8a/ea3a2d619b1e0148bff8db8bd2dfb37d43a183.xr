var __xr_tmp = [
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#select_parent\">select_parent</a>(<a class=\"id\" href=\"#parent\">parent</a>)) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__shrink_dcache_sb\">__shrink_dcache_sb</a>(<a class=\"id\" href=\"#sb\">sb</a>, &amp;<a class=\"id\" href=\"#found\">found</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#shrink_dcache_parent\">shrink_dcache_parent</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Scan `nr' dentries and return the number which remain.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We need to avoid reentering the filesystem if the caller is performing a</span>", 
"<span class=\"comment\"> * GFP_NOFS allocation attempt.  One example deadlock is:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ext2_new_block-&gt;getblk-&gt;GFP-&gt;shrink_dcache_memory-&gt;prune_dcache-&gt;</span>", 
"<span class=\"comment\"> * prune_one_dentry-&gt;dput-&gt;dentry_iput-&gt;iput-&gt;inode-&gt;i_sb-&gt;s_op-&gt;put_inode-&gt;</span>", 
"<span class=\"comment\"> * ext2_discard_prealloc-&gt;ext2_free_blocks-&gt;lock_super-&gt;DEADLOCK.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In this case we return -1 to tell the caller that we baled.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#shrink_dcache_memory\">shrink_dcache_memory</a>(struct <a class=\"id\" href=\"#shrinker\">shrinker</a> *<a class=\"id\" href=\"#shrink\">shrink</a>, int <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prune_dcache\">prune_dcache</a>(<a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#dentry_stat\">dentry_stat</a>.<a class=\"id\" href=\"#nr_unused\">nr_unused</a> / 100) * <a class=\"id\" href=\"#sysctl_vfs_cache_pressure\">sysctl_vfs_cache_pressure</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#shrinker\">shrinker</a> <a class=\"id\" href=\"#dcache_shrinker\">dcache_shrinker</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#shrink\">shrink</a> = <a class=\"id\" href=\"#shrink_dcache_memory\">shrink_dcache_memory</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#seeks\">seeks</a> = <a class=\"id\" href=\"#DEFAULT_SEEKS\">DEFAULT_SEEKS</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_alloc<span class=\"ts\"/>-<span class=\"ts\"/>allocate a dcache entry</span>", 
"<span class=\"comment\"> * @parent: parent of entry to allocate</span>", 
"<span class=\"comment\"> * @name: qstr of the name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocates a dentry. It returns %NULL if there is insufficient memory</span>", 
"<span class=\"comment\"> * available. On a success the dentry is returned. The name passed in is</span>", 
"<span class=\"comment\"> * copied and the copy passed in may be reused after this call.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_alloc\">d_alloc</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#parent\">parent</a>, const struct <a class=\"id\" href=\"#qstr\">qstr</a> *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#dname\">dname</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#dentry_cache\">dentry_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>-><a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#DNAME_INLINE_LEN\">DNAME_INLINE_LEN</a>-1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dname\">dname</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#name\">name</a>-><a class=\"id\" href=\"#len\">len</a> + 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dname\">dname</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#dentry_cache\">dentry_cache</a>, <a class=\"id\" href=\"#dentry\">dentry</a>); ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else  {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dname\">dname</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_iname\">d_iname</a>;", 
"<span class=\"ts\"/>}<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#dname\">dname</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#name\">name</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#name\">name</a>-><a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dname\">dname</a>, <a class=\"id\" href=\"#name\">name</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dname\">dname</a>[<a class=\"id\" href=\"#name\">name</a>-><a class=\"id\" href=\"#len\">len</a>] = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_count\">d_count</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_flags\">d_flags</a> = <a class=\"id\" href=\"#DCACHE_UNHASHED\">DCACHE_UNHASHED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_sb\">d_sb</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_fsdata\">d_fsdata</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_mounted\">d_mounted</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_hash\">d_hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lru\">d_lru</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_alias\">d_alias</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a> = <a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_sb\">d_sb</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_sb\">d_sb</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_u\">d_u</a>.<a class=\"id\" href=\"#d_child\">d_child</a>, &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_subdirs\">d_subdirs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry_stat\">dentry_stat</a>.<a class=\"id\" href=\"#nr_dentry\">nr_dentry</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#d_alloc\">d_alloc</a>);", 
"", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_alloc_name\">d_alloc_name</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#qstr\">qstr</a> <a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#full_name_hash\">full_name_hash</a>(<a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#q\">q</a>.<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#d_alloc\">d_alloc</a>(<a class=\"id\" href=\"#parent\">parent</a>, &amp;<a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#d_alloc_name\">d_alloc_name</a>);", 
"", 
"<span class=\"comment\">/* the caller must hold dcache_lock */</span>", 
"static void <a class=\"id\" href=\"#__d_instantiate\">__d_instantiate</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_alias\">d_alias</a>, &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_dentry\">i_dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a> = <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_d_instantiate\">fsnotify_d_instantiate</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_instantiate - fill in inode information for a dentry</span>", 
"<span class=\"comment\"> * @entry: dentry to complete</span>", 
"<span class=\"comment\"> * @inode: inode to attach to this dentry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fill in inode information in the entry.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This turns negative dentries into productive full members</span>", 
"<span class=\"comment\"> * of society.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE! This assumes that the inode count has been incremented</span>", 
"<span class=\"comment\"> * (or otherwise set) by the caller to indicate that it is now</span>", 
"<span class=\"comment\"> * in use by the dcache.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"void <a class=\"id\" href=\"#d_instantiate\">d_instantiate</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#d_alias\">d_alias</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__d_instantiate\">__d_instantiate</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_d_instantiate\">security_d_instantiate</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#d_instantiate\">d_instantiate</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_instantiate_unique - instantiate a non-aliased dentry</span>", 
"<span class=\"comment\"> * @entry: dentry to instantiate</span>", 
"<span class=\"comment\"> * @inode: inode to attach to this dentry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fill in inode information in the entry. On success, it returns NULL.</span>", 
"<span class=\"comment\"> * If an unhashed alias of \"entry\" already exists, then we return the</span>", 
"<span class=\"comment\"> * aliased dentry instead and drop one reference to inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that in order to avoid conflicts with rename() etc, the caller</span>", 
"<span class=\"comment\"> * had better be holding the parent directory semaphore.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This also assumes that the inode count has been incremented</span>", 
"<span class=\"comment\"> * (or otherwise set) by the caller to indicate that it is now</span>", 
"<span class=\"comment\"> * in use by the dcache.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#__d_instantiate_unique\">__d_instantiate_unique</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#alias\">alias</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#hash\">hash</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__d_instantiate\">__d_instantiate</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#alias\">alias</a>, &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_dentry\">i_dentry</a>, <a class=\"id\" href=\"#d_alias\">d_alias</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#qstr\">qstr</a> *<a class=\"id\" href=\"#qstr\">qstr</a> = &amp;<a class=\"id\" href=\"#alias\">alias</a>-><a class=\"id\" href=\"#d_name\">d_name</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qstr\">qstr</a>-><a class=\"id\" href=\"#hash\">hash</a> != <a class=\"id\" href=\"#hash\">hash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#alias\">alias</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a> != <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qstr\">qstr</a>-><a class=\"id\" href=\"#len\">len</a> != <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#qstr\">qstr</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dget_locked\">dget_locked</a>(<a class=\"id\" href=\"#alias\">alias</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#alias\">alias</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__d_instantiate\">__d_instantiate</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_instantiate_unique\">d_instantiate_unique</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#d_alias\">d_alias</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#__d_instantiate_unique\">__d_instantiate_unique</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_d_instantiate\">security_d_instantiate</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#d_unhashed\">d_unhashed</a>(<a class=\"id\" href=\"#result\">result</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#d_instantiate_unique\">d_instantiate_unique</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_alloc_root - allocate root dentry</span>", 
"<span class=\"comment\"> * @root_inode: inode to allocate the root for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate a root (\"/\") dentry for the inode given. The inode is</span>", 
"<span class=\"comment\"> * instantiated and returned. %NULL is returned if there is insufficient</span>", 
"<span class=\"comment\"> * memory or the inode passed is %NULL.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#d_alloc_root\">d_alloc_root</a>(struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#root_inode\">root_inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#root_inode\">root_inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>static const struct <a class=\"id\" href=\"#qstr\">qstr</a> <a class=\"id\" href=\"#name\">name</a> = { .<a class=\"id\" href=\"#name\">name</a> = \"/\", .<a class=\"id\" href=\"#len\">len</a> = 1 };", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#d_alloc\">d_alloc</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#d_sb\">d_sb</a> = <a class=\"id\" href=\"#root_inode\">root_inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a> = <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_instantiate\">d_instantiate</a>(<a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#root_inode\">root_inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#d_alloc_root\">d_alloc_root</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#d_hash\">d_hash</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hash\">hash</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> += ((unsigned long) <a class=\"id\" href=\"#parent\">parent</a> ^ <a class=\"id\" href=\"#GOLDEN_RATIO_PRIME\">GOLDEN_RATIO_PRIME</a>) / <a class=\"id\" href=\"#L1_CACHE_BYTES\">L1_CACHE_BYTES</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#hash\">hash</a> ^ ((<a class=\"id\" href=\"#hash\">hash</a> ^ <a class=\"id\" href=\"#GOLDEN_RATIO_PRIME\">GOLDEN_RATIO_PRIME</a>) >> <a class=\"id\" href=\"#D_HASHBITS\">D_HASHBITS</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry_hashtable\">dentry_hashtable</a> + (<a class=\"id\" href=\"#hash\">hash</a> &amp; <a class=\"id\" href=\"#D_HASHMASK\">D_HASHMASK</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_obtain_alias - find or allocate a dentry for a given inode</span>", 
"<span class=\"comment\"> * @inode: inode to allocate the dentry for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Obtain a dentry for an inode resulting from NFS filehandle conversion or</span>", 
"<span class=\"comment\"> * similar open by handle operations.  The returned dentry may be anonymous,</span>", 
"<span class=\"comment\"> * or may have a full name (if the inode was already in the cache).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When called on a directory inode, we must ensure that the inode only ever</span>", 
"<span class=\"comment\"> * has one dentry.  If a dentry is found, that is returned instead of</span>", 
"<span class=\"comment\"> * allocating a new one.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On successful return, the reference to the inode has been transferred</span>", 
"<span class=\"comment\"> * to the dentry.  In case of an error the reference on the inode is released.</span>", 
];
xr_frag_insert('l/8a/ea3a2d619b1e0148bff8db8bd2dfb37d43a183.xr', __xr_tmp);
