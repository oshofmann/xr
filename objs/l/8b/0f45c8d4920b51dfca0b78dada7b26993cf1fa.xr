var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_NLS_H\">_LINUX_NLS_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_NLS_H\">_LINUX_NLS_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Unicode has changed over the years.  Unicode code points no longer</span>", 
"<span class=\"comment\"> * fit into 16 bits; as of Unicode 5 valid code points range from 0</span>", 
"<span class=\"comment\"> * to 0x10ffff (17 planes, where each plane holds 65536 code points).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The original decision to represent Unicode characters as 16-bit</span>", 
"<span class=\"comment\"> * wchar_t values is now outdated.  But plane 0 still includes the</span>", 
"<span class=\"comment\"> * most commonly used characters, so we will retain it.  The newer</span>", 
"<span class=\"comment\"> * 32-bit unicode_t type can be used when it is necessary to</span>", 
"<span class=\"comment\"> * represent the full Unicode character set.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Plane-0 Unicode character */</span>", 
"typedef <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#wchar_t\">wchar_t</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_WCHAR_T\">MAX_WCHAR_T</a><span class=\"ts\"/>0xffff", 
"", 
"<span class=\"comment\">/* Arbitrary Unicode character */</span>", 
"typedef <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#unicode_t\">unicode_t</a>;", 
"", 
"struct <a class=\"id\" href=\"#nls_table\">nls_table</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#charset\">charset</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#alias\">alias</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#uni2char\">uni2char</a>) (<a class=\"id\" href=\"#wchar_t\">wchar_t</a> <a class=\"id\" href=\"#uni\">uni</a>, unsigned char *<a class=\"id\" href=\"#out\">out</a>, int <a class=\"id\" href=\"#boundlen\">boundlen</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#char2uni\">char2uni</a>) (const unsigned char *<a class=\"id\" href=\"#rawstring\">rawstring</a>, int <a class=\"id\" href=\"#boundlen\">boundlen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#wchar_t\">wchar_t</a> *<a class=\"id\" href=\"#uni\">uni</a>);", 
"<span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#charset2lower\">charset2lower</a>;", 
"<span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#charset2upper\">charset2upper</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nls_table\">nls_table</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"};", 
"", 
"<span class=\"comment\">/* this value hold the maximum octet of charset */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NLS_MAX_CHARSET_SIZE\">NLS_MAX_CHARSET_SIZE</a> 6 <span class=\"comment\">/* for UTF-8 */</span>", 
"", 
"<span class=\"comment\">/* Byte order for UTF-16 strings */</span>", 
"enum <a class=\"id\" href=\"#utf16_endian\">utf16_endian</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#UTF16_HOST_ENDIAN\">UTF16_HOST_ENDIAN</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#UTF16_LITTLE_ENDIAN\">UTF16_LITTLE_ENDIAN</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#UTF16_BIG_ENDIAN\">UTF16_BIG_ENDIAN</a>", 
"};", 
"", 
"<span class=\"comment\">/* nls.c */</span>", 
"extern int <a class=\"id\" href=\"#register_nls\">register_nls</a>(struct <a class=\"id\" href=\"#nls_table\">nls_table</a> *);", 
"extern int <a class=\"id\" href=\"#unregister_nls\">unregister_nls</a>(struct <a class=\"id\" href=\"#nls_table\">nls_table</a> *);", 
"extern struct <a class=\"id\" href=\"#nls_table\">nls_table</a> *<a class=\"id\" href=\"#load_nls\">load_nls</a>(char *);", 
"extern void <a class=\"id\" href=\"#unload_nls\">unload_nls</a>(struct <a class=\"id\" href=\"#nls_table\">nls_table</a> *);", 
"extern struct <a class=\"id\" href=\"#nls_table\">nls_table</a> *<a class=\"id\" href=\"#load_nls_default\">load_nls_default</a>(void);", 
"", 
"extern int <a class=\"id\" href=\"#utf8_to_utf32\">utf8_to_utf32</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#s\">s</a>, int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#unicode_t\">unicode_t</a> *<a class=\"id\" href=\"#pu\">pu</a>);", 
"extern int <a class=\"id\" href=\"#utf32_to_utf8\">utf32_to_utf8</a>(<a class=\"id\" href=\"#unicode_t\">unicode_t</a> <a class=\"id\" href=\"#u\">u</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#s\">s</a>, int <a class=\"id\" href=\"#maxlen\">maxlen</a>);", 
"extern int <a class=\"id\" href=\"#utf8s_to_utf16s\">utf8s_to_utf16s</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#s\">s</a>, int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#wchar_t\">wchar_t</a> *<a class=\"id\" href=\"#pwcs\">pwcs</a>);", 
"extern int <a class=\"id\" href=\"#utf16s_to_utf8s\">utf16s_to_utf8s</a>(const <a class=\"id\" href=\"#wchar_t\">wchar_t</a> *<a class=\"id\" href=\"#pwcs\">pwcs</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#utf16_endian\">utf16_endian</a> <a class=\"id\" href=\"#endian\">endian</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#s\">s</a>, int <a class=\"id\" href=\"#maxlen\">maxlen</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char <a class=\"id\" href=\"#nls_tolower\">nls_tolower</a>(struct <a class=\"id\" href=\"#nls_table\">nls_table</a> *<a class=\"id\" href=\"#t\">t</a>, unsigned char <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#nc\">nc</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#charset2lower\">charset2lower</a>[<a class=\"id\" href=\"#c\">c</a>];", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nc\">nc</a> ? <a class=\"id\" href=\"#nc\">nc</a> : <a class=\"id\" href=\"#c\">c</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char <a class=\"id\" href=\"#nls_toupper\">nls_toupper</a>(struct <a class=\"id\" href=\"#nls_table\">nls_table</a> *<a class=\"id\" href=\"#t\">t</a>, unsigned char <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#nc\">nc</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#charset2upper\">charset2upper</a>[<a class=\"id\" href=\"#c\">c</a>];", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nc\">nc</a> ? <a class=\"id\" href=\"#nc\">nc</a> : <a class=\"id\" href=\"#c\">c</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#nls_strnicmp\">nls_strnicmp</a>(struct <a class=\"id\" href=\"#nls_table\">nls_table</a> *<a class=\"id\" href=\"#t\">t</a>, const unsigned char *<a class=\"id\" href=\"#s1\">s1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#s2\">s2</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nls_tolower\">nls_tolower</a>(<a class=\"id\" href=\"#t\">t</a>, *<a class=\"id\" href=\"#s1\">s1</a>++) != <a class=\"id\" href=\"#nls_tolower\">nls_tolower</a>(<a class=\"id\" href=\"#t\">t</a>, *<a class=\"id\" href=\"#s2\">s2</a>++))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * nls_nullsize - return length of null character for codepage</span>", 
"<span class=\"comment\"> * @codepage - codepage for which to return length of NULL terminator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Since we can't guarantee that the null terminator will be a particular</span>", 
"<span class=\"comment\"> * length, we have to check against the codepage. If there's a problem</span>", 
"<span class=\"comment\"> * determining it, assume a single-byte NULL terminator.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#nls_nullsize\">nls_nullsize</a>(const struct <a class=\"id\" href=\"#nls_table\">nls_table</a> *<a class=\"id\" href=\"#codepage\">codepage</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#charlen\">charlen</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>[<a class=\"id\" href=\"#NLS_MAX_CHARSET_SIZE\">NLS_MAX_CHARSET_SIZE</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#charlen\">charlen</a> = <a class=\"id\" href=\"#codepage\">codepage</a>-><a class=\"id\" href=\"#uni2char\">uni2char</a>(0, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#NLS_MAX_CHARSET_SIZE\">NLS_MAX_CHARSET_SIZE</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#charlen\">charlen</a> &gt; 0 ? <a class=\"id\" href=\"#charlen\">charlen</a> : 1;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_ALIAS_NLS\">MODULE_ALIAS_NLS</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><a class=\"id\" href=\"#MODULE_ALIAS\">MODULE_ALIAS</a>(\"nls_\" <a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#name\">name</a>))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_NLS_H */</span>", 
"", 
];
xr_frag_insert('l/8b/0f45c8d4920b51dfca0b78dada7b26993cf1fa.xr', __xr_tmp);
