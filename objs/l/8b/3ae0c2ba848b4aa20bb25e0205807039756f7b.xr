var __xr_tmp = [
"static <a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#ext3_find_goal\">ext3_find_goal</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, long <a class=\"id\" href=\"#block\">block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#partial\">partial</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_block_alloc_info\">ext3_block_alloc_info</a> *<a class=\"id\" href=\"#block_i\">block_i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a> =  <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * try the heuristic for sequential allocation,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * failing that at least try to get decent locality.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#block_i\">block_i</a> && (<a class=\"id\" href=\"#block\">block</a> == <a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#last_alloc_logical_block\">last_alloc_logical_block</a> + 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>&& (<a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#last_alloc_physical_block\">last_alloc_physical_block</a> != 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#last_alloc_physical_block\">last_alloc_physical_block</a> + 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ext3_find_near\">ext3_find_near</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#partial\">partial</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_blks_to_allocate: Look up the block map and count the number</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of direct blocks need to be allocated for the given branch.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@branch: chain of indirect blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@k: number of blocks need for indirect blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@blks: number of data blocks to be mapped.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@blocks_to_boundary:  the offset in the indirect block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>return the total number of blocks to be allocate, including the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>direct and indirect blocks.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext3_blks_to_allocate\">ext3_blks_to_allocate</a>(<a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#branch\">branch</a>, int <a class=\"id\" href=\"#k\">k</a>, unsigned long <a class=\"id\" href=\"#blks\">blks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Simple case, [t,d]Indirect block(s) has not allocated yet</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then it's clear blocks on that path have not allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* right now we don't handle cross boundary allocation */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blks\">blks</a> &lt; <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a> + 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#blks\">blks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#blks\">blks</a> && <a class=\"id\" href=\"#count\">count</a> <= <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*(<a class=\"id\" href=\"#branch\">branch</a>[0].<a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#count\">count</a>)) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_alloc_blocks: multiple allocate blocks needed for a branch</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@indirect_blks: the number of blocks need to allocate for indirect</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>blocks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new_blocks: on return it will store the new block numbers for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the indirect blocks(if needed) and the first direct block,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@blks:<span class=\"ts\"/>on return it will store the total number of allocated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>direct blocks</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext3_alloc_blocks\">ext3_alloc_blocks</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>, int <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>, int <a class=\"id\" href=\"#blks\">blks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[4], int *<a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#current_block\">current_block</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Here we try to allocate the requested multiple blocks at once,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on a best-effort basis.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To build a branch, we should allocate blocks for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the indirect blocks(if not allocated yet), and at least</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the first direct block of this branch.  That's the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * minimum number of blocks need to allocate(required)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a> = <a class=\"id\" href=\"#blks\">blks</a> + <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#target\">target</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* allocating blocks for indirect blocks and direct blocks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_block\">current_block</a> = <a class=\"id\" href=\"#ext3_new_blocks\">ext3_new_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>,<a class=\"id\" href=\"#inode\">inode</a>,<a class=\"id\" href=\"#goal\">goal</a>,&amp;<a class=\"id\" href=\"#count\">count</a>,<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed_out\">failed_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a> -= <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* allocate blocks for indirect blocks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#index\">index</a> &lt; <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a> && <a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#index\">index</a>++] = <a class=\"id\" href=\"#current_block\">current_block</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* save the new block number for the first direct block */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#index\">index</a>] = <a class=\"id\" href=\"#current_block\">current_block</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* total number of blocks allocated for direct blocks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<a class=\"id\" href=\"#failed_out\">failed_out</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt;<a class=\"id\" href=\"#index\">index</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_blocks\">ext3_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#i\">i</a>], 1);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_alloc_branch - allocate and set up a chain of blocks.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: owner</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@indirect_blks: number of allocated indirect blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@blks: number of allocated direct blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@offsets: offsets (in the blocks) to store the pointers to next.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@branch: place to store the chain in.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function allocates blocks, zeroes out all but the last one,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>links them into chain and (if we are synchronous) writes them to disk.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>In other words, it prepares a branch that can be spliced onto the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>inode. It stores the information about that chain in the branch[], in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the same format as ext3_get_branch() would do. We are calling it after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>we had read the existing part of chain and partial points to the last</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>triple of that (one with zero -&gt;key). Upon the exit we have the same</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>picture as after the successful ext3_get_block(), except that in one</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>place chain is disconnected - *branch-&gt;p is still zero (we did not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>set the last link), but branch-&gt;key contains the number that should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be placed into *branch-&gt;p to fill that gap.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If allocation fails we free all blocks we've allocated (and forget</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>their buffer_heads) and return the error value the from failed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_alloc_block() (normally -ENOSPC). Otherwise we set the chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as described above and return 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext3_alloc_branch\">ext3_alloc_branch</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>, int *<a class=\"id\" href=\"#blks\">blks</a>, <a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#branch\">branch</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#blocksize\">blocksize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#n\">n</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#current_block\">current_block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#ext3_alloc_blocks\">ext3_alloc_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#blks\">blks</a>, <a class=\"id\" href=\"#new_blocks\">new_blocks</a>, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#branch\">branch</a>[0].<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#new_blocks\">new_blocks</a>[0]);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * metadata blocks and data blocks are allocated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = 1; <a class=\"id\" href=\"#n\">n</a> <= <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>;  <a class=\"id\" href=\"#n\">n</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get buffer_head for parent block, zero it out</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and set the pointer to new one, then send</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * parent to disk.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_getblk\">sb_getblk</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#n\">n</a>-1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"call get_create_access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_get_create_access\">ext3_journal_get_create_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, 0, <a class=\"id\" href=\"#blocksize\">blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#p\">p</a> = (<a class=\"id\" href=\"#__le32\">__le32</a> *) <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a> + <a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#n\">n</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ( <a class=\"id\" href=\"#n\">n</a> == <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_block\">current_block</a> = <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#n\">n</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * End of chain, update the last new metablock of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the chain to point to the new allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * data blocks numbers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#i\">i</a>) = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(++<a class=\"id\" href=\"#current_block\">current_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"marking uptodate\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"call ext3_journal_dirty_metadata\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#blks\">blks</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<a class=\"id\" href=\"#failed\">failed</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocation failed, free what we already allocated */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#n\">n</a> ; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bh\">bh</a>, \"call journal_forget\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_forget\">ext3_journal_forget</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt;<a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_blocks\">ext3_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#i\">i</a>], 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_blocks\">ext3_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#num\">num</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext3_splice_branch - splice the allocated branch onto inode.</span>", 
"<span class=\"comment\"> * @inode: owner</span>", 
"<span class=\"comment\"> * @block: (logical) number of block we are adding</span>", 
"<span class=\"comment\"> * @chain: chain of indirect blocks (with a missing link - see</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_alloc_branch)</span>", 
"<span class=\"comment\"> * @where: location of missing link</span>", 
"<span class=\"comment\"> * @num:   number of indirect blocks we are adding</span>", 
"<span class=\"comment\"> * @blks:  number of direct blocks we are adding</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function fills the missing link and does all housekeeping needed in</span>", 
"<span class=\"comment\"> * inode (-&gt;i_blocks, etc.). In case of success we end up with the full</span>", 
"<span class=\"comment\"> * chain to new block and return 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext3_splice_branch\">ext3_splice_branch</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#where\">where</a>, int <a class=\"id\" href=\"#num\">num</a>, int <a class=\"id\" href=\"#blks\">blks</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_block_alloc_info\">ext3_block_alloc_info</a> *<a class=\"id\" href=\"#block_i\">block_i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#current_block\">current_block</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_inode_info\">ext3_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a> = <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we're splicing into a [td]indirect block (as opposed to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inode) then we need to get write access to the [td]indirect block</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before the splice.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#bh\">bh</a>, \"get_write_access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_get_write_access\">ext3_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* That's it */</span>", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Update the host buffer_head or inode to point to more just allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * direct blocks blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> == 0 && <a class=\"id\" href=\"#blks\">blks</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_block\">current_block</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#key\">key</a>) + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#blks\">blks</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#i\">i</a> ) = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#current_block\">current_block</a>++);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * update the most recently allocated logical &amp; physical block</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in i_block_alloc_info, to assist find the proper goal block for next</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#block_i\">block_i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#last_alloc_logical_block\">last_alloc_logical_block</a> = <a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#blks\">blks</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#last_alloc_physical_block\">last_alloc_physical_block</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#where\">where</a>[<a class=\"id\" href=\"#num\">num</a>].<a class=\"id\" href=\"#key\">key</a>) + <a class=\"id\" href=\"#blks\">blks</a> - 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We are done with atomic stuff, now do the rest of housekeeping */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a> = <a class=\"id\" href=\"#CURRENT_TIME_SEC\">CURRENT_TIME_SEC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_mark_inode_dirty\">ext3_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* ext3_mark_inode_dirty already updated i_sync_tid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_datasync_tid\">i_datasync_tid</a>, <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>-><a class=\"id\" href=\"#t_tid\">t_tid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* had we spliced it onto indirect block? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we spliced it onto an indirect block, we haven't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * altered the inode.  Note however that if it is being spliced</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * onto an indirect block at the very end of the file (the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * file is growing) then we *will* alter the inode to reflect</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the new i_size.  But that is not done here - it is done in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * generic_commit_write-&gt;__mark_inode_dirty-&gt;ext3_dirty_inode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(5, \"splicing indirect only\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#bh\">bh</a>, \"call ext3_journal_dirty_metadata\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * OK, we spliced it into the inode itself on a direct block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Inode was dirtied above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(5, \"splicing direct\\n\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#where\">where</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bh\">bh</a>, \"call journal_forget\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_forget\">ext3_journal_forget</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#where\">where</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_blocks\">ext3_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>,<a class=\"id\" href=\"#inode\">inode</a>,<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#where\">where</a>[<a class=\"id\" href=\"#i\">i</a>-1].<a class=\"id\" href=\"#key\">key</a>),1);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_blocks\">ext3_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#where\">where</a>[<a class=\"id\" href=\"#num\">num</a>].<a class=\"id\" href=\"#key\">key</a>), <a class=\"id\" href=\"#blks\">blks</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocation strategy is simple: if we have to allocate something, we will</span>", 
"<span class=\"comment\"> * have to go the whole way to leaf. So let's do it before attaching anything</span>", 
"<span class=\"comment\"> * to tree, set linkage between the newborn blocks, write them if sync is</span>", 
"<span class=\"comment\"> * required, recheck the path, free and repeat if check fails, otherwise</span>", 
"<span class=\"comment\"> * set the last missing link (that will protect us from any truncate-generated</span>", 
"<span class=\"comment\"> * removals - all blocks on the path are immune now) and possibly force the</span>", 
"<span class=\"comment\"> * write on the parent block.</span>", 
"<span class=\"comment\"> * That has a nice additional property: no special recovery from the failed</span>", 
"<span class=\"comment\"> * allocations is needed - we simply release blocks and do not touch anything</span>", 
"<span class=\"comment\"> * reachable from inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * `handle' can be NULL if create == 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The BKL may not be held on entry here.  Be sure to take it early.</span>", 
"<span class=\"comment\"> * return &gt; 0, # of blocks mapped or allocated.</span>", 
"<span class=\"comment\"> * return = 0, if plain lookup failed.</span>", 
"<span class=\"comment\"> * return &lt; 0, error case.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext3_get_blocks_handle\">ext3_get_blocks_handle</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>, unsigned long <a class=\"id\" href=\"#maxblocks\">maxblocks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh_result\">bh_result</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#create\">create</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offsets\">offsets</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> <a class=\"id\" href=\"#chain\">chain</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#partial\">partial</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#depth\">depth</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_inode_info\">ext3_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#first_block\">first_block</a> = 0;", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#handle\">handle</a> != <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#create\">create</a> == 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#depth\">depth</a> = <a class=\"id\" href=\"#ext3_block_to_path\">ext3_block_to_path</a>(<a class=\"id\" href=\"#inode\">inode</a>,<a class=\"id\" href=\"#iblock\">iblock</a>,<a class=\"id\" href=\"#offsets\">offsets</a>,&amp;<a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#depth\">depth</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#ext3_get_branch\">ext3_get_branch</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#depth\">depth</a>, <a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#chain\">chain</a>, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Simplest case - block found, no allocation needed */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#partial\">partial</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_block\">first_block</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#chain\">chain</a>[<a class=\"id\" href=\"#depth\">depth</a> - 1].<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_new\">clear_buffer_new</a>(<a class=\"id\" href=\"#bh_result\">bh_result</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*map more blocks*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#maxblocks\">maxblocks</a> && <a class=\"id\" href=\"#count\">count</a> <= <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#blk\">blk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#verify_chain\">verify_chain</a>(<a class=\"id\" href=\"#chain\">chain</a>, <a class=\"id\" href=\"#chain\">chain</a> + <a class=\"id\" href=\"#depth\">depth</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Indirect block might be removed by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * truncate while we were reading it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Handling of that case: forget what we've</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * got now. Flag the err as EAGAIN, so it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * will reread.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk\">blk</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*(<a class=\"id\" href=\"#chain\">chain</a>[<a class=\"id\" href=\"#depth\">depth</a>-1].<a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#count\">count</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk\">blk</a> == <a class=\"id\" href=\"#first_block\">first_block</a> + <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> != -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_it\">got_it</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Next simple case - plain lookup or failed read of indirect block */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#create\">create</a> || <a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EIO\">EIO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#truncate_mutex\">truncate_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the indirect block is missing while we are reading</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the chain(ext3_get_branch() returns -EAGAIN err), or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the chain has been changed after we grab the semaphore,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (either because another process truncated this branch, or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * another get_block allocated this branch) re-grab the chain to see if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the request block has been allocated or not.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since we already block the truncate/other get_block</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at this point, we will have the current copy of the chain when we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * splice the branch into the tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a> || !<a class=\"id\" href=\"#verify_chain\">verify_chain</a>(<a class=\"id\" href=\"#chain\">chain</a>, <a class=\"id\" href=\"#partial\">partial</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#partial\">partial</a> &gt; <a class=\"id\" href=\"#chain\">chain</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#ext3_get_branch\">ext3_get_branch</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#depth\">depth</a>, <a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#chain\">chain</a>, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#partial\">partial</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#truncate_mutex\">truncate_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_new\">clear_buffer_new</a>(<a class=\"id\" href=\"#bh_result\">bh_result</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_it\">got_it</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Okay, we need to do block allocation.  Lazily initialize the block</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocation info here if necessary</span>", 
"<span class=\"comment\"><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) && (!<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_init_block_alloc_info\">ext3_init_block_alloc_info</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#ext3_find_goal\">ext3_find_goal</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iblock\">iblock</a>, <a class=\"id\" href=\"#partial\">partial</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the number of blocks need to allocate for [d,t]indirect blocks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#indirect_blks\">indirect_blks</a> = (<a class=\"id\" href=\"#chain\">chain</a> + <a class=\"id\" href=\"#depth\">depth</a>) - <a class=\"id\" href=\"#partial\">partial</a> - 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Next look up the indirect map to count the totoal number of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * direct blocks to allocate for this branch.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#ext3_blks_to_allocate\">ext3_blks_to_allocate</a>(<a class=\"id\" href=\"#partial\">partial</a>, <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maxblocks\">maxblocks</a>, <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Block out ext3_truncate while we alter the tree</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_alloc_branch\">ext3_alloc_branch</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>, &amp;<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#goal\">goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a> + (<a class=\"id\" href=\"#partial\">partial</a> - <a class=\"id\" href=\"#chain\">chain</a>), <a class=\"id\" href=\"#partial\">partial</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The ext3_splice_branch call will free and forget any buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the new chain if there is a failure, but that risks using</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * up transaction credits, especially for bitmaps where the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * credits cannot be returned.  Can we handle this somehow?  We</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * may need to return -EAGAIN upwards in the worst case.  --sct</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_splice_branch\">ext3_splice_branch</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iblock\">iblock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>, <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#truncate_mutex\">truncate_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_new\">set_buffer_new</a>(<a class=\"id\" href=\"#bh_result\">bh_result</a>);", 
"<a class=\"id\" href=\"#got_it\">got_it</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>(<a class=\"id\" href=\"#bh_result\">bh_result</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#chain\">chain</a>[<a class=\"id\" href=\"#depth\">depth</a>-1].<a class=\"id\" href=\"#key\">key</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_boundary\">set_buffer_boundary</a>(<a class=\"id\" href=\"#bh_result\">bh_result</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Clean up and exit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#chain\">chain</a> + <a class=\"id\" href=\"#depth\">depth</a> - 1;<span class=\"ts\"/><span class=\"comment\">/* the whole chain */</span>", 
"<a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#partial\">partial</a> &gt; <a class=\"id\" href=\"#chain\">chain</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>, \"call brelse\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh_result\">bh_result</a>, \"returned\");", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Maximum number of blocks we map for direct IO at once. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DIO_MAX_BLOCKS\">DIO_MAX_BLOCKS</a> 4096", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Number of credits we need for writing DIO_MAX_BLOCKS:</span>", 
"<span class=\"comment\"> * We need sb + group descriptor + bitmap + inode -&gt; 4</span>", 
"<span class=\"comment\"> * For B blocks with A block pointers per block we need:</span>", 
"<span class=\"comment\"> * 1 (triple ind.) + (B/A/A + 2) (doubly ind.) + (B/A + 2) (indirect).</span>", 
"<span class=\"comment\"> * If we plug in 4096 for B and 256 for A (for 1KB block size), we get 25.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DIO_CREDITS\">DIO_CREDITS</a> 25", 
"", 
"static int <a class=\"id\" href=\"#ext3_get_block\">ext3_get_block</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh_result\">bh_result</a>, int <a class=\"id\" href=\"#create\">create</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext3_journal_current_handle\">ext3_journal_current_handle</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#started\">started</a> = 0;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#max_blocks\">max_blocks</a> = <a class=\"id\" href=\"#bh_result\">bh_result</a>-><a class=\"id\" href=\"#b_size\">b_size</a> >> <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#create\">create</a> && !<a class=\"id\" href=\"#handle\">handle</a>) {<span class=\"ts\"/><span class=\"comment\">/* Direct IO write... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#max_blocks\">max_blocks</a> &gt; <a class=\"id\" href=\"#DIO_MAX_BLOCKS\">DIO_MAX_BLOCKS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_blocks\">max_blocks</a> = <a class=\"id\" href=\"#DIO_MAX_BLOCKS\">DIO_MAX_BLOCKS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext3_journal_start\">ext3_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#DIO_CREDITS\">DIO_CREDITS</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_MAXQUOTAS_TRANS_BLOCKS\">EXT3_MAXQUOTAS_TRANS_BLOCKS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#started\">started</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext3_get_blocks_handle\">ext3_get_blocks_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iblock\">iblock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_blocks\">max_blocks</a>, <a class=\"id\" href=\"#bh_result\">bh_result</a>, <a class=\"id\" href=\"#create\">create</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh_result\">bh_result</a>-><a class=\"id\" href=\"#b_size\">b_size</a> = (<a class=\"id\" href=\"#ret\">ret</a> << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#started\">started</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ext3_fiemap\">ext3_fiemap</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#fiemap_extent_info\">fiemap_extent_info</a> *<a class=\"id\" href=\"#fieinfo\">fieinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#generic_block_fiemap\">generic_block_fiemap</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#fieinfo\">fieinfo</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ext3_get_block\">ext3_get_block</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * `handle' can be NULL if create is zero</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#ext3_getblk\">ext3_getblk</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#block\">block</a>, int <a class=\"id\" href=\"#create\">create</a>, int *<a class=\"id\" href=\"#errp\">errp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> <a class=\"id\" href=\"#dummy\">dummy</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fatal\">fatal</a> = 0, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#handle\">handle</a> != <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#create\">create</a> == 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dummy\">dummy</a>.<a class=\"id\" href=\"#b_state\">b_state</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dummy\">dummy</a>.<a class=\"id\" href=\"#b_blocknr\">b_blocknr</a> = -1000;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer_trace_init\">buffer_trace_init</a>(&amp;<a class=\"id\" href=\"#dummy\">dummy</a>.<a class=\"id\" href=\"#b_history\">b_history</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_get_blocks_handle\">ext3_get_blocks_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#block\">block</a>, 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dummy\">dummy</a>, <a class=\"id\" href=\"#create\">create</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ext3_get_blocks_handle() returns number of blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mapped. 0 in case of a HOLE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a> && <a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(&amp;<a class=\"id\" href=\"#dummy\">dummy</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_getblk\">sb_getblk</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#dummy\">dummy</a>.<a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_new\">buffer_new</a>(&amp;<a class=\"id\" href=\"#dummy\">dummy</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#create\">create</a> != 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#handle\">handle</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Now that we do not always journal data, we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * keep in mind whether this should always journal the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * new buffer as metadata.  For now, regular file</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * writes use ext3_get_block instead, so it's not a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * problem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"call get_create_access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fatal\">fatal</a> = <a class=\"id\" href=\"#ext3_journal_get_create_access\">ext3_journal_get_create_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fatal\">fatal</a> && !<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>,0,<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"call ext3_journal_dirty_metadata\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fatal\">fatal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fatal\">fatal</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"not a new buffer\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal\">fatal</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = <a class=\"id\" href=\"#fatal\">fatal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#ext3_bread\">ext3_bread</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#block\">block</a>, int <a class=\"id\" href=\"#create\">create</a>, int *<a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#ext3_getblk\">ext3_getblk</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#create\">create</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ll_rw_block\">ll_rw_block</a>(<a class=\"id\" href=\"#READ_META\">READ_META</a>, 1, &amp;<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#walk_page_buffers\">walk_page_buffers</a>(<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#partial\">partial</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#fn\">fn</a>)(<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#block_start\">block_start</a>, <a class=\"id\" href=\"#block_end\">block_end</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#b_size\">b_size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>for (<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#block_start\">block_start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> == 0 && (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a> || !<a class=\"id\" href=\"#block_start\">block_start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_start\">block_start</a> = <a class=\"id\" href=\"#block_end\">block_end</a>, <a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_end\">block_end</a> = <a class=\"id\" href=\"#block_start\">block_start</a> + <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block_end\">block_end</a> <= <a class=\"id\" href=\"#from\">from</a> || <a class=\"id\" href=\"#block_start\">block_start</a> >= <a class=\"id\" href=\"#to\">to</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#partial\">partial</a> && !<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#partial\">partial</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = (*<a class=\"id\" href=\"#fn\">fn</a>)(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * To preserve ordering, it is essential that the hole instantiation and</span>", 
"<span class=\"comment\"> * the data write be encapsulated in a single transaction.  We cannot</span>", 
"<span class=\"comment\"> * close off a transaction and start a new one between the ext3_get_block()</span>", 
"<span class=\"comment\"> * and the commit_write().  So doing the journal_start at the start of</span>", 
"<span class=\"comment\"> * prepare_write() is the right place.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also, this function can nest inside ext3_writepage() -&gt;</span>", 
"<span class=\"comment\"> * block_write_full_page(). In that case, we *know* that ext3_writepage()</span>", 
"<span class=\"comment\"> * has generated enough buffer credits to do the whole page.  So we won't</span>", 
"<span class=\"comment\"> * block on the journal in that case, which is good, because the caller may</span>", 
"<span class=\"comment\"> * be PF_MEMALLOC.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * By accident, ext3 can be reentered when a transaction is open via</span>", 
"<span class=\"comment\"> * quota file writes.  If we were to commit the transaction while thus</span>", 
"<span class=\"comment\"> * reentered, there can be a deadlock - we would be holding a quota</span>", 
"<span class=\"comment\"> * lock, and the commit would never complete if another thread had a</span>", 
"<span class=\"comment\"> * transaction open and was blocking on the quota lock - a ranking</span>", 
"<span class=\"comment\"> * violation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So what we do is to rely on the fact that journal_stop/journal_start</span>", 
"<span class=\"comment\"> * will _not_ run commit under these circumstances because handle-&gt;h_ref</span>", 
"<span class=\"comment\"> * is elevated.  We'll still have enough credits for the tiny quotafile</span>", 
"<span class=\"comment\"> * write.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_journal_get_write_access\">do_journal_get_write_access</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dirty\">dirty</a> = <a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>) || <a class=\"id\" href=\"#buffer_freed\">buffer_freed</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __block_prepare_write() could have dirtied some buffers. Clean</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the dirty bit as jbd2_journal_get_write_access() could complain</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * otherwise about fs integrity issues. Setting of the dirty bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by __block_prepare_write() isn't a real problem here as we clear</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the bit before releasing a page lock and thus writeback cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ever write the buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dirty\">dirty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext3_journal_get_write_access\">ext3_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#dirty\">dirty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Truncate blocks that were not used by write. We have to truncate the</span>", 
"<span class=\"comment\"> * pagecache as well so that corresponding buffers get properly unmapped.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext3_truncate_failed_write\">ext3_truncate_failed_write</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#truncate_inode_pages\">truncate_inode_pages</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_truncate\">ext3_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext3_write_begin\">ext3_write_begin</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pagep\">pagep</a>, void **<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retries\">retries</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Reserve one block more for addition to orphan list in case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we allocate blocks but write fails for some reason */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#needed_blocks\">needed_blocks</a> = <a class=\"id\" href=\"#ext3_writepage_trans_blocks\">ext3_writepage_trans_blocks</a>(<a class=\"id\" href=\"#inode\">inode</a>) + 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#pos\">pos</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#pos\">pos</a> &amp; (<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#from\">from</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#grab_cache_page_write_begin\">grab_cache_page_write_begin</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pagep\">pagep</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext3_journal_start\">ext3_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#needed_blocks\">needed_blocks</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__block_write_begin\">__block_write_begin</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#ext3_get_block\">ext3_get_block</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#write_begin_failed\">write_begin_failed</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_should_journal_data\">ext3_should_journal_data</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#walk_page_buffers\">walk_page_buffers</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#do_journal_get_write_access\">do_journal_get_write_access</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#write_begin_failed\">write_begin_failed</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * block_write_begin may have instantiated a few blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * outside i_size.  Trim these off again. Don't need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * i_size_read because we hold i_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Add inode to orphan list in case we crash before truncate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * finishes. Do this only if ext3_can_truncate() agrees so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that orphan processing code is happy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> && <a class=\"id\" href=\"#ext3_can_truncate\">ext3_can_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_orphan_add\">ext3_orphan_add</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_truncate_failed_write\">ext3_truncate_failed_write</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a> && <a class=\"id\" href=\"#ext3_should_retry_alloc\">ext3_should_retry_alloc</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, &amp;<a class=\"id\" href=\"#retries\">retries</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"", 
"int <a class=\"id\" href=\"#ext3_journal_dirty_data\">ext3_journal_dirty_data</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#journal_dirty_data\">journal_dirty_data</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_abort_handle\">ext3_journal_abort_handle</a>(<a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/* For ordered writepage and write_end functions */</span>", 
"static int <a class=\"id\" href=\"#journal_dirty_data_fn\">journal_dirty_data_fn</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Write could have mapped the buffer but it didn't copy the data in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * yet. So avoid filing such buffer into a transaction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>) && <a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ext3_journal_dirty_data\">ext3_journal_dirty_data</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* For write_end() in data=journal mode */</span>", 
"static int <a class=\"id\" href=\"#write_end_fn\">write_end_fn</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>) || <a class=\"id\" href=\"#buffer_freed\">buffer_freed</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is nasty and subtle: ext3_write_begin() could have allocated blocks</span>", 
"<span class=\"comment\"> * for the whole page but later we failed to copy the data in. Update inode</span>", 
"<span class=\"comment\"> * size according to what we managed to copy. The rest is going to be</span>", 
"<span class=\"comment\"> * truncated in write_end function.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#update_file_sizes\">update_file_sizes</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* What matters to us is i_disksize. We don't write i_size anywhere */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#copied\">copied</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_write\">i_size_write</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#copied\">copied</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#copied\">copied</a> &gt; <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_disksize\">i_disksize</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_disksize\">i_disksize</a> = <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#copied\">copied</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We need to pick up the new inode size which generic_commit_write gave us</span>", 
"<span class=\"comment\"> * `file' can be NULL - eg, when called from page_symlink().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ext3 never places buffers on inode-&gt;i_mapping-&gt;private_list.  metadata</span>", 
"<span class=\"comment\"> * buffers are managed internally.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext3_ordered_write_end\">ext3_ordered_write_end</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext3_journal_current_handle\">ext3_journal_current_handle</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> = <a class=\"id\" href=\"#block_write_end\">block_write_end</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#copied\">copied</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#pos\">pos</a> &amp; (<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#from\">from</a> + <a class=\"id\" href=\"#copied\">copied</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#walk_page_buffers\">walk_page_buffers</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#journal_dirty_data_fn\">journal_dirty_data_fn</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_file_sizes\">update_file_sizes</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#copied\">copied</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There may be allocated blocks outside of i_size because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we failed to copy some data. Prepare for truncate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> && <a class=\"id\" href=\"#ext3_can_truncate\">ext3_can_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_orphan_add\">ext3_orphan_add</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = <a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_truncate_failed_write\">ext3_truncate_failed_write</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? <a class=\"id\" href=\"#ret\">ret</a> : <a class=\"id\" href=\"#copied\">copied</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext3_writeback_write_end\">ext3_writeback_write_end</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext3_journal_current_handle\">ext3_journal_current_handle</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> = <a class=\"id\" href=\"#block_write_end\">block_write_end</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#copied\">copied</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_file_sizes\">update_file_sizes</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#copied\">copied</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There may be allocated blocks outside of i_size because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we failed to copy some data. Prepare for truncate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> && <a class=\"id\" href=\"#ext3_can_truncate\">ext3_can_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_orphan_add\">ext3_orphan_add</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_truncate_failed_write\">ext3_truncate_failed_write</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? <a class=\"id\" href=\"#ret\">ret</a> : <a class=\"id\" href=\"#copied\">copied</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext3_journalled_write_end\">ext3_journalled_write_end</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext3_journal_current_handle\">ext3_journal_current_handle</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#partial\">partial</a> = 0;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#pos\">pos</a> &amp; (<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#from\">from</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copied\">copied</a> &lt; <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_zero_new_buffers\">page_zero_new_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#from\">from</a> + <a class=\"id\" href=\"#copied\">copied</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#from\">from</a> + <a class=\"id\" href=\"#copied\">copied</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#walk_page_buffers\">walk_page_buffers</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>), <a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>, &amp;<a class=\"id\" href=\"#partial\">partial</a>, <a class=\"id\" href=\"#write_end_fn\">write_end_fn</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#partial\">partial</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageUptodate\">SetPageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#copied\">copied</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_write\">i_size_write</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#copied\">copied</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There may be allocated blocks outside of i_size because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we failed to copy some data. Prepare for truncate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> && <a class=\"id\" href=\"#ext3_can_truncate\">ext3_can_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_orphan_add\">ext3_orphan_add</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_set_inode_state\">ext3_set_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT3_STATE_JDATA\">EXT3_STATE_JDATA</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> &gt; <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_disksize\">i_disksize</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_disksize\">i_disksize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = <a class=\"id\" href=\"#ext3_mark_inode_dirty\">ext3_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = <a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_truncate_failed_write\">ext3_truncate_failed_write</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? <a class=\"id\" href=\"#ret\">ret</a> : <a class=\"id\" href=\"#copied\">copied</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bmap() is special.  It gets used by applications such as lilo and by</span>", 
"<span class=\"comment\"> * the swapper to find the on-disk block of a specific piece of data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Naturally, this is dangerous if the block concerned is still in the</span>", 
"<span class=\"comment\"> * journal.  If somebody makes a swapfile on an ext3 data-journaling</span>", 
"<span class=\"comment\"> * filesystem and enables swap, then they may get a nasty shock when the</span>", 
"<span class=\"comment\"> * data getting swapped to that swapfile suddenly gets overwritten by</span>", 
"<span class=\"comment\"> * the original zero's written out previously to the journal and</span>", 
"<span class=\"comment\"> * awaiting writeback in the kernel's buffer cache.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So, if we see any bmap calls here on a modified, data-journaled file,</span>", 
"<span class=\"comment\"> * take extra steps to flush any blocks which might be in the cache.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#ext3_bmap\">ext3_bmap</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_test_inode_state\">ext3_test_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT3_STATE_JDATA\">EXT3_STATE_JDATA</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is a REALLY heavyweight approach, but the use of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bmap on dirty files is expected to be extremely rare:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * only if we run lilo or swapon on a freshly made file</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * do we expect this to happen.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (bmap requires CAP_SYS_RAWIO so this does not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * represent an unprivileged user DOS attack --- we'd be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in trouble if mortal users could trigger this path at</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * NB. EXT3_STATE_JDATA is not set on files other than</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * regular files.  If somebody wants to bmap a directory</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or symlink and gets confused because the buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * hasn't yet been flushed to disk, they deserve</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * everything they get.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_clear_inode_state\">ext3_clear_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT3_STATE_JDATA\">EXT3_STATE_JDATA</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#EXT3_JOURNAL\">EXT3_JOURNAL</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_lock_updates\">journal_lock_updates</a>(<a class=\"id\" href=\"#journal\">journal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#journal_flush\">journal_flush</a>(<a class=\"id\" href=\"#journal\">journal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_unlock_updates\">journal_unlock_updates</a>(<a class=\"id\" href=\"#journal\">journal</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#generic_block_bmap\">generic_block_bmap</a>(<a class=\"id\" href=\"#mapping\">mapping</a>,<a class=\"id\" href=\"#block\">block</a>,<a class=\"id\" href=\"#ext3_get_block\">ext3_get_block</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#bget_one\">bget_one</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#bput_one\">bput_one</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#buffer_unmapped\">buffer_unmapped</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note that we always start a transaction even if we're not journalling</span>", 
"<span class=\"comment\"> * data.  This is to preserve ordering: any hole instantiation within</span>", 
"<span class=\"comment\"> * __block_write_full_page -&gt; ext3_get_block() should be journalled</span>", 
"<span class=\"comment\"> * along with the data so we don't crash and then get metadata which</span>", 
"<span class=\"comment\"> * refers to old data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In all journalling modes block_write_full_page() will start the I/O.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Problem:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_writepage() -&gt; kmalloc() -&gt; __alloc_pages() -&gt; page_launder() -&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>ext3_writepage()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Similar for:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_file_write() -&gt; generic_file_write() -&gt; __alloc_pages() -&gt; ...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Same applies to ext3_get_block().  We will deadlock on various things like</span>", 
"<span class=\"comment\"> * lock_journal and i_truncate_mutex.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Setting PF_MEMALLOC here doesn't work - too many internal memory</span>", 
"<span class=\"comment\"> * allocations fail.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 16May01: If we're reentered then journal_current_handle() will be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    non-zero. We simply *return*.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1 July 2001: @@@ FIXME:</span>", 
"<span class=\"comment\"> *   In journalled data mode, a data buffer may be metadata against the</span>", 
"<span class=\"comment\"> *   current transaction.  But the same file is part of a shared mapping</span>", 
"<span class=\"comment\"> *   and someone does a writepage() on it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   We will move the buffer onto the async_data list, but *after* it has</span>", 
"<span class=\"comment\"> *   been dirtied. So there's a small window where we have dirty data on</span>", 
"<span class=\"comment\"> *   BJ_Metadata.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   Note that this only applies to the last partial page in the file.  The</span>", 
"<span class=\"comment\"> *   bit which block_write_full_page() uses prepare/commit for.  (That's</span>", 
"<span class=\"comment\"> *   broken code anyway: it's wrong for msync()).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   It's a rare case: affects the final partial page, for journalled data</span>", 
"<span class=\"comment\"> *   where the file is subject to bith write() and writepage() in the same</span>", 
"<span class=\"comment\"> *   transction.  To fix it we'll need a custom block_write_full_page().</span>", 
"<span class=\"comment\"> *   We'll probably need that anyway for journalling writepage() output.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We don't honour synchronous mounts for writepage().  That would be</span>", 
"<span class=\"comment\"> * disastrous.  Any write() or metadata operation will sync the fs for</span>", 
"<span class=\"comment\"> * us.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * AKPM2: if all the page's buffers are mapped to disk and !data=journal,</span>", 
"<span class=\"comment\"> * we don't need to open a transaction here.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext3_ordered_writepage\">ext3_ordered_writepage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#page_bufs\">page_bufs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#IS_RDONLY\">IS_RDONLY</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We give up here if we're reentered, because it might be for a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * different filesystem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_journal_current_handle\">ext3_journal_current_handle</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fail\">out_fail</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#create_empty_buffers\">create_empty_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#BH_Dirty\">BH_Dirty</a>)|(1 << <a class=\"id\" href=\"#BH_Uptodate\">BH_Uptodate</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_bufs\">page_bufs</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_bufs\">page_bufs</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#walk_page_buffers\">walk_page_buffers</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#page_bufs\">page_bufs</a>, 0, <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#buffer_unmapped\">buffer_unmapped</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Provide NULL get_block() to catch bugs if buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * weren't really mapped */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#block_write_full_page\">block_write_full_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext3_journal_start\">ext3_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#ext3_writepage_trans_blocks\">ext3_writepage_trans_blocks</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fail\">out_fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#walk_page_buffers\">walk_page_buffers</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#page_bufs\">page_bufs</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#bget_one\">bget_one</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#block_write_full_page\">block_write_full_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#ext3_get_block\">ext3_get_block</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The page can become unlocked at any point now, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * truncate can then come in and change things.  So we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can't touch *page from now on.  But *page_bufs is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * safe due to elevated refcount.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * And attach them to the current transaction.  But only if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * block_write_full_page() succeeded.  Otherwise they are unmapped,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and generally junk.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#walk_page_buffers\">walk_page_buffers</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#page_bufs\">page_bufs</a>, 0, <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#journal_dirty_data_fn\">journal_dirty_data_fn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#walk_page_buffers\">walk_page_buffers</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#page_bufs\">page_bufs</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#bput_one\">bput_one</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#out_fail\">out_fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#redirty_page_for_writepage\">redirty_page_for_writepage</a>(<a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext3_writeback_writepage\">ext3_writeback_writepage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#IS_RDONLY\">IS_RDONLY</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_journal_current_handle\">ext3_journal_current_handle</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fail\">out_fail</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#walk_page_buffers\">walk_page_buffers</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#buffer_unmapped\">buffer_unmapped</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Provide NULL get_block() to catch bugs if buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * weren't really mapped */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#block_write_full_page\">block_write_full_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext3_journal_start\">ext3_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#ext3_writepage_trans_blocks\">ext3_writepage_trans_blocks</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fail\">out_fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#block_write_full_page\">block_write_full_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#ext3_get_block\">ext3_get_block</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#out_fail\">out_fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#redirty_page_for_writepage\">redirty_page_for_writepage</a>(<a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext3_journalled_writepage\">ext3_journalled_writepage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#IS_RDONLY\">IS_RDONLY</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_journal_current_handle\">ext3_journal_current_handle</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_write\">no_write</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext3_journal_start\">ext3_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#ext3_writepage_trans_blocks\">ext3_writepage_trans_blocks</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_write\">no_write</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#PageChecked\">PageChecked</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It's mmapped pagecache.  Add buffers and journal it.  There</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * doesn't seem much point in redirtying the page here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageChecked\">ClearPageChecked</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#block_prepare_write\">block_prepare_write</a>(<a class=\"id\" href=\"#page\">page</a>, 0, <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_get_block\">ext3_get_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#walk_page_buffers\">walk_page_buffers</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#do_journal_get_write_access\">do_journal_get_write_access</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#walk_page_buffers\">walk_page_buffers</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#write_end_fn\">write_end_fn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_set_inode_state\">ext3_set_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT3_STATE_JDATA\">EXT3_STATE_JDATA</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It may be a page full of checkpoint-mode buffers.  We don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * really know unless we go poke around in the buffer_heads.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * But block_write_full_page will do the right thing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#block_write_full_page\">block_write_full_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#ext3_get_block\">ext3_get_block</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#no_write\">no_write</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#redirty_page_for_writepage\">redirty_page_for_writepage</a>(<a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext3_readpage\">ext3_readpage</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mpage_readpage\">mpage_readpage</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#ext3_get_block\">ext3_get_block</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ext3_readpages\">ext3_readpages</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pages\">pages</a>, unsigned <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mpage_readpages\">mpage_readpages</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#ext3_get_block\">ext3_get_block</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ext3_invalidatepage\">ext3_invalidatepage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#EXT3_JOURNAL\">EXT3_JOURNAL</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If it's a full truncate we just forget about the pending dirtying</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageChecked\">ClearPageChecked</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_invalidatepage\">journal_invalidatepage</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext3_releasepage\">ext3_releasepage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#EXT3_JOURNAL\">EXT3_JOURNAL</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#PageChecked\">PageChecked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#journal_try_to_free_buffers\">journal_try_to_free_buffers</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If the O_DIRECT write will extend the file then add this inode to the</span>", 
"<span class=\"comment\"> * orphan list.  So recovery will truncate it back to the original size</span>", 
"<span class=\"comment\"> * if the machine crashes during the write.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the O_DIRECT write is intantiating holes inside i_size and the machine</span>", 
"<span class=\"comment\"> * crashes then stale disk data _may_ be exposed inside the file. But current</span>", 
"<span class=\"comment\"> * VFS code falls back into buffered path in that case so we are safe.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ext3_direct_IO\">ext3_direct_IO</a>(int <a class=\"id\" href=\"#rw\">rw</a>, struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_inode_info\">ext3_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#orphan\">orphan</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#iov_length\">iov_length</a>(<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retries\">retries</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rw\">rw</a> == <a class=\"id\" href=\"#WRITE\">WRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#final_size\">final_size</a> = <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#final_size\">final_size</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Credits for sb + inode write */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext3_journal_start\">ext3_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext3_orphan_add\">ext3_orphan_add</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#orphan\">orphan</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_disksize\">i_disksize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#blockdev_direct_IO\">blockdev_direct_IO</a>(<a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>, <a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ext3_get_block\">ext3_get_block</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In case of error extending write may have instantiated a few</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * blocks outside i_size. Trim these off again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#rw\">rw</a> &amp; <a class=\"id\" href=\"#WRITE\">WRITE</a>) && <a class=\"id\" href=\"#ret\">ret</a> &lt; 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#isize\">isize</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#iov_length\">iov_length</a>(<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#isize\">isize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmtruncate\">vmtruncate</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#isize\">isize</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a> && <a class=\"id\" href=\"#ext3_should_retry_alloc\">ext3_should_retry_alloc</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, &amp;<a class=\"id\" href=\"#retries\">retries</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#orphan\">orphan</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Credits for sb + inode write */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext3_journal_start\">ext3_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, 2);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is really bad luck. We've written the data</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * but cannot extend i_size. Truncate allocated blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and pretend the write failed... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_truncate\">ext3_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_orphan_del\">ext3_orphan_del</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_disksize\">i_disksize</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_write\">i_size_write</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We're going to return a positive `ret'</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * here due to non-zero-length I/O, so there's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * no way of reporting error returns from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ext3_mark_inode_dirty() to userspace.  So</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ignore it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_mark_inode_dirty\">ext3_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Pages can be marked dirty completely asynchronously from ext3's journalling</span>", 
"<span class=\"comment\"> * activity.  By filemap_sync_pte(), try_to_unmap_one(), etc.  We cannot do</span>", 
"<span class=\"comment\"> * much here because -&gt;set_page_dirty is called under VFS locks.  The page is</span>", 
"<span class=\"comment\"> * not necessarily locked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We cannot just dirty the page and leave attached buffers clean, because the</span>", 
"<span class=\"comment\"> * buffers' dirty state is \"definitive\".  We cannot just set the buffers dirty</span>", 
"<span class=\"comment\"> * or jbddirty because all the journalling code will explode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So what we do is to mark the page \"pending dirty\" and next time writepage</span>", 
"<span class=\"comment\"> * is called, propagate that into the buffers appropriately.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext3_journalled_set_page_dirty\">ext3_journalled_set_page_dirty</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SetPageChecked\">SetPageChecked</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__set_page_dirty_nobuffers\">__set_page_dirty_nobuffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#ext3_ordered_aops\">ext3_ordered_aops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpage\">readpage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_readpage\">ext3_readpage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpages\">readpages</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_readpages\">ext3_readpages</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#writepage\">writepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_ordered_writepage\">ext3_ordered_writepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sync_page\">sync_page</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#block_sync_page\">block_sync_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_begin\">write_begin</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_write_begin\">ext3_write_begin</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_end\">write_end</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_ordered_write_end\">ext3_ordered_write_end</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bmap\">bmap</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_bmap\">ext3_bmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#invalidatepage\">invalidatepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_invalidatepage\">ext3_invalidatepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#releasepage\">releasepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_releasepage\">ext3_releasepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#direct_IO\">direct_IO</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_direct_IO\">ext3_direct_IO</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#migratepage\">migratepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#buffer_migrate_page\">buffer_migrate_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#is_partially_uptodate\">is_partially_uptodate</a>  = <a class=\"id\" href=\"#block_is_partially_uptodate\">block_is_partially_uptodate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#error_remove_page\">error_remove_page</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_error_remove_page\">generic_error_remove_page</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#ext3_writeback_aops\">ext3_writeback_aops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpage\">readpage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_readpage\">ext3_readpage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpages\">readpages</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_readpages\">ext3_readpages</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#writepage\">writepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_writeback_writepage\">ext3_writeback_writepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sync_page\">sync_page</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#block_sync_page\">block_sync_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_begin\">write_begin</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_write_begin\">ext3_write_begin</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_end\">write_end</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_writeback_write_end\">ext3_writeback_write_end</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bmap\">bmap</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_bmap\">ext3_bmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#invalidatepage\">invalidatepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_invalidatepage\">ext3_invalidatepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#releasepage\">releasepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_releasepage\">ext3_releasepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#direct_IO\">direct_IO</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_direct_IO\">ext3_direct_IO</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#migratepage\">migratepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#buffer_migrate_page\">buffer_migrate_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#is_partially_uptodate\">is_partially_uptodate</a>  = <a class=\"id\" href=\"#block_is_partially_uptodate\">block_is_partially_uptodate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#error_remove_page\">error_remove_page</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_error_remove_page\">generic_error_remove_page</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#ext3_journalled_aops\">ext3_journalled_aops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpage\">readpage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_readpage\">ext3_readpage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpages\">readpages</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_readpages\">ext3_readpages</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#writepage\">writepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_journalled_writepage\">ext3_journalled_writepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sync_page\">sync_page</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#block_sync_page\">block_sync_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_begin\">write_begin</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_write_begin\">ext3_write_begin</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_end\">write_end</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_journalled_write_end\">ext3_journalled_write_end</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_journalled_set_page_dirty\">ext3_journalled_set_page_dirty</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bmap\">bmap</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_bmap\">ext3_bmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#invalidatepage\">invalidatepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_invalidatepage\">ext3_invalidatepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#releasepage\">releasepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext3_releasepage\">ext3_releasepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#is_partially_uptodate\">is_partially_uptodate</a>  = <a class=\"id\" href=\"#block_is_partially_uptodate\">block_is_partially_uptodate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#error_remove_page\">error_remove_page</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_error_remove_page\">generic_error_remove_page</a>,", 
"};", 
"", 
"void <a class=\"id\" href=\"#ext3_set_aops\">ext3_set_aops</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_should_order_data\">ext3_should_order_data</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a> = &amp;<a class=\"id\" href=\"#ext3_ordered_aops\">ext3_ordered_aops</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#ext3_should_writeback_data\">ext3_should_writeback_data</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a> = &amp;<a class=\"id\" href=\"#ext3_writeback_aops\">ext3_writeback_aops</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a> = &amp;<a class=\"id\" href=\"#ext3_journalled_aops\">ext3_journalled_aops</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext3_block_truncate_page() zeroes out a mapping from file offset `from'</span>", 
"<span class=\"comment\"> * up to the end of the block which corresponds to `from'.</span>", 
"<span class=\"comment\"> * This required during truncate. We need to physically zero the tail end</span>", 
"<span class=\"comment\"> * of that block so it doesn't yield old data if the file is later grown.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext3_block_truncate_page\">ext3_block_truncate_page</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#from\">from</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#from\">from</a> &amp; (<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>-1);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a>, <a class=\"id\" href=\"#iblock\">iblock</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocksize\">blocksize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#blocksize\">blocksize</a> - (<a class=\"id\" href=\"#offset\">offset</a> &amp; (<a class=\"id\" href=\"#blocksize\">blocksize</a> - 1));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iblock\">iblock</a> = <a class=\"id\" href=\"#index\">index</a> << (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#create_empty_buffers\">create_empty_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#blocksize\">blocksize</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the buffer that contains \"offset\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#pos\">pos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iblock\">iblock</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_freed\">buffer_freed</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"freed: skip\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"unmapped\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_get_block\">ext3_get_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iblock\">iblock</a>, <a class=\"id\" href=\"#bh\">bh</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unmapped? It's a hole - nothing to do */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"still unmapped\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok, it's mapped. Make sure it's up-to-date */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ll_rw_block\">ll_rw_block</a>(<a class=\"id\" href=\"#READ\">READ</a>, 1, &amp;<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Uhhuh. Read error. Complain and punt. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_should_journal_data\">ext3_should_journal_data</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"get write access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_get_write_access\">ext3_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zero_user\">zero_user</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"zeroed end of block\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_should_journal_data\">ext3_should_journal_data</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_should_order_data\">ext3_should_order_data</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_dirty_data\">ext3_journal_dirty_data</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Probably it should be a library function... search for first non-zero word</span>", 
"<span class=\"comment\"> * or memcmp with zero_page, whatever is better for particular architecture.</span>", 
"<span class=\"comment\"> * Linus?</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#all_zeroes\">all_zeroes</a>(<a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_find_shared - find the indirect blocks for partial truncation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode:<span class=\"ts\"/>  inode in question</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@depth:<span class=\"ts\"/>  depth of the affected branch</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@offsets: offsets of pointers in that branch (see ext3_block_to_path)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chain:<span class=\"ts\"/>  place to store the pointers to partial indirect blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@top:<span class=\"ts\"/>  place to the (detached) top of branch</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is a helper function used by ext3_truncate().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>When we do truncate() we may have to clean the ends of several</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>indirect blocks but leave the blocks themselves alive. Block is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>partially truncated if some data below the new i_size is refered</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from it (and it is on the path to the first completely truncated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>data block, indeed).  We have to free the top of that path along</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with everything to the right of the path. Since no allocation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>past the truncation point is possible until ext3_truncate()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>finishes, we may safely do the latter, but top of branch may</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>require special attention - pageout below the truncation point</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>might try to populate it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We atomically detach the top of branch from the tree, store the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>block number of its root in *@top, pointers to buffer_heads of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>partially truncated blocks - in @chain[].bh and pointers to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>their last elements that should not be removed - in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chain[].p. Return value is the pointer to last filled element</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of @chain.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The work left to caller to do the actual freeing of subtrees:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>a) free the subtree starting from *@top</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>b) free the subtrees whose roots are stored in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(@chain[i].p+1 .. end of @chain[i].bh-&gt;b_data)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>c) free the subtrees growing from the inode past the @chain[0].</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(no partially truncated stuff there).  */</span>", 
"", 
"static <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#ext3_find_shared\">ext3_find_shared</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#depth\">depth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offsets\">offsets</a>[4], <a class=\"id\" href=\"#Indirect\">Indirect</a> <a class=\"id\" href=\"#chain\">chain</a>[4], <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#top\">top</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#partial\">partial</a>, *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#top\">top</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* Make k index the deepest non-null offset + 1 */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#depth\">depth</a>; <a class=\"id\" href=\"#k\">k</a> &gt; 1 && !<a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#k\">k</a>-1]; <a class=\"id\" href=\"#k\">k</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#ext3_get_branch\">ext3_get_branch</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#chain\">chain</a>, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Writer: pointers */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#partial\">partial</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#chain\">chain</a> + <a class=\"id\" href=\"#k\">k</a>-1;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the branch acquired continuation since we've looked at it -</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fine, it should all survive and (new) top doesn't belong to us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#key\">key</a> && *<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Writer: end */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_top\">no_top</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a>=<a class=\"id\" href=\"#partial\">partial</a>; <a class=\"id\" href=\"#p\">p</a>&gt;<a class=\"id\" href=\"#chain\">chain</a> && <a class=\"id\" href=\"#all_zeroes\">all_zeroes</a>((<a class=\"id\" href=\"#__le32\">__le32</a>*)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>,<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p\">p</a>); <a class=\"id\" href=\"#p\">p</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * OK, we've found the last block that must survive. The rest of our</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * branch should be detached before unlocking. However, if that rest</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of branch is all ours and does not grow immediately from the inode</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it's easier to cheat and just decrement partial-&gt;p.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#chain\">chain</a> + <a class=\"id\" href=\"#k\">k</a> - 1 && <a class=\"id\" href=\"#p\">p</a> &gt; <a class=\"id\" href=\"#chain\">chain</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p\">p</a>--;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#top\">top</a> = *<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Nope, don't do this in ext3.  Must leave the tree intact */</span>", 
"#if 0", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p\">p</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Writer: end */</span>", 
"", 
"<span class=\"ts\"/>while(<a class=\"id\" href=\"#partial\">partial</a> &gt; <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>--;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#no_top\">no_top</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#partial\">partial</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Zero a number of block pointers in either an inode or an indirect block.</span>", 
"<span class=\"comment\"> * If we restart the transaction we must again get write access to the</span>", 
"<span class=\"comment\"> * indirect block for further modification.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We release `count' blocks on disk, but (last - first) may be greater</span>", 
"<span class=\"comment\"> * than `count' because there can be holes in there.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext3_clear_blocks\">ext3_clear_blocks</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#block_to_free\">block_to_free</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#last\">last</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#try_to_extend_transaction\">try_to_extend_transaction</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"call ext3_journal_dirty_metadata\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_mark_inode_dirty\">ext3_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#truncate_restart_transaction\">truncate_restart_transaction</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"retaking write access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_get_write_access\">ext3_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Any buffers which are on the journal will be in memory. We find</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * them on the hash table so journal_revoke() will run journal_forget()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on them.  We've already detached each block from the file, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bforget() in journal_forget() should be safe.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * AKPM: turn on bforget in journal_forget()!!!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#first\">first</a>; <a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#last\">last</a>; <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_find_get_block\">sb_find_get_block</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_forget\">ext3_forget</a>(<a class=\"id\" href=\"#handle\">handle</a>, 0, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_blocks\">ext3_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#block_to_free\">block_to_free</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext3_free_data - free a list of data blocks</span>", 
"<span class=\"comment\"> * @handle:<span class=\"ts\"/>handle for this transaction</span>", 
"<span class=\"comment\"> * @inode:<span class=\"ts\"/>inode we are dealing with</span>", 
"<span class=\"comment\"> * @this_bh:<span class=\"ts\"/>indirect buffer_head which contains *@first and *@last</span>", 
"<span class=\"comment\"> * @first:<span class=\"ts\"/>array of block numbers</span>", 
"<span class=\"comment\"> * @last:<span class=\"ts\"/>points immediately past the end of array</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We are freeing all blocks refered from that array (numbers are stored as</span>", 
"<span class=\"comment\"> * little-endian 32-bit) and updating @inode-&gt;i_blocks appropriately.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We accumulate contiguous runs of blocks to free.  Conveniently, if these</span>", 
"<span class=\"comment\"> * blocks are contiguous then releasing them at one time will only affect one</span>", 
"<span class=\"comment\"> * or two bitmap blocks (+ group descriptor(s) and superblock) and we won't</span>", 
"<span class=\"comment\"> * actually use a lot of journal space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @this_bh will be %NULL if @first and @last point into the inode's direct</span>", 
"<span class=\"comment\"> * block pointers.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext3_free_data\">ext3_free_data</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#this_bh\">this_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#last\">last</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#block_to_free\">block_to_free</a> = 0;    <span class=\"comment\">/* Starting block # of a run */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a> = 0;<span class=\"ts\"/>    <span class=\"comment\">/* Number of blocks in the run */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#block_to_free_p\">block_to_free_p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/>    <span class=\"comment\">/* Pointer into inode/ind</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       corresponding to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       block_to_free */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#nr\">nr</a>;<span class=\"ts\"/><span class=\"ts\"/>    <span class=\"comment\">/* Current block # */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#p\">p</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <span class=\"comment\">/* Pointer into inode/ind</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       for current block */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_bh\">this_bh</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* For indirect block */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#this_bh\">this_bh</a>, \"get_write_access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_get_write_access\">ext3_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#this_bh\">this_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Important: if we can't update the indirect pointers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to the blocks, we can't free them. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#first\">first</a>; <a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#last\">last</a>; <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* accumulate blocks to free if they're contiguous */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_to_free\">block_to_free</a> = <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_to_free_p\">block_to_free_p</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#nr\">nr</a> == <a class=\"id\" href=\"#block_to_free\">block_to_free</a> + <a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_clear_blocks\">ext3_clear_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#this_bh\">this_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#block_to_free\">block_to_free</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#block_to_free_p\">block_to_free_p</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_to_free\">block_to_free</a> = <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_to_free_p\">block_to_free_p</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_clear_blocks\">ext3_clear_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#this_bh\">this_bh</a>, <a class=\"id\" href=\"#block_to_free\">block_to_free</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#block_to_free_p\">block_to_free_p</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_bh\">this_bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#this_bh\">this_bh</a>, \"call ext3_journal_dirty_metadata\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The buffer head should have an attached journal head at this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * point. However, if the data is corrupted and an indirect</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * block pointed to itself, it would have been detached when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the block was cleared. Check for this instead of OOPSing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#this_bh\">this_bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#this_bh\">this_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, \"ext3_free_data\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"circular indirect block detected, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"inode=%lu, block=%llu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (unsigned long long)<a class=\"id\" href=\"#this_bh\">this_bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_free_branches - free an array of branches</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@handle: JBD handle for this transaction</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode:<span class=\"ts\"/>inode we are dealing with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@parent_bh: the buffer_head which contains *@first and *@last</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@first:<span class=\"ts\"/>array of block numbers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@last:<span class=\"ts\"/>pointer immediately past the end of array</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@depth:<span class=\"ts\"/>depth of the branches to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We are freeing all blocks refered from these branches (numbers are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>stored as little-endian 32-bit) and updating @inode-&gt;i_blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>appropriately.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext3_free_branches\">ext3_free_branches</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#parent_bh\">parent_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#last\">last</a>, int <a class=\"id\" href=\"#depth\">depth</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_handle_aborted\">is_handle_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#depth\">depth</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#addr_per_block\">addr_per_block</a> = <a class=\"id\" href=\"#EXT3_ADDR_PER_BLOCK\">EXT3_ADDR_PER_BLOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (--<a class=\"id\" href=\"#p\">p</a> >= <a class=\"id\" href=\"#first\">first</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr\">nr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* A hole */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Go read the buffer for the next level down */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_bread\">sb_bread</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#nr\">nr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * A read failure? Report error and clear slot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * (should be rare).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, \"ext3_free_branches\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"Read failure, inode=%lu, block=\"<a class=\"id\" href=\"#E3FSBLK\">E3FSBLK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>, <a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This zaps the entire block.  Bottom up. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"free child branches\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_branches\">ext3_free_branches</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#bh\">bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#__le32\">__le32</a>*)<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#__le32\">__le32</a>*)<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a> + <a class=\"id\" href=\"#addr_per_block\">addr_per_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#depth\">depth</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Everything below this this pointer has been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * released.  Now let this top-of-subtree go.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We want the freeing of this indirect block to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * atomic in the journal with the updating of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * bitmap block which owns it.  So make some room in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the journal.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We zero the parent pointer *after* freeing its</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pointee in the bitmaps, so if extend_transaction()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for some reason fails to put the bitmap changes and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the release into the same transaction, recovery</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * will merely complain about releasing a free block,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * rather than leaking blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_handle_aborted\">is_handle_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#try_to_extend_transaction\">try_to_extend_transaction</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_mark_inode_dirty\">ext3_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#truncate_restart_transaction\">truncate_restart_transaction</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We've probably journalled the indirect block several</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * times during the truncate.  But it's no longer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * needed and we now drop it from the transaction via</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * journal_revoke().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * That's easy if it's exclusively part of this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * transaction.  But if it's part of the committing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * transaction then journal_forget() will simply</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * brelse() it.  That means that if the underlying</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * block is reallocated in ext3_get_block(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * unmap_underlying_metadata() will find this block</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and will try to get rid of it.  damn, damn. Thus</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we don't allow a block to be reallocated until</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * a transaction freeing it has fully committed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We also have to make sure journal replay after a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * crash does not overwrite non-journaled data blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * with old metadata when the block got reallocated for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * data.  Thus we have to store a revoke record for a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * block in the same transaction in which we free the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_forget\">ext3_forget</a>(<a class=\"id\" href=\"#handle\">handle</a>, 1, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_blocks\">ext3_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#nr\">nr</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#parent_bh\">parent_bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The block which we have just freed is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pointed to by an indirect block: journal it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#parent_bh\">parent_bh</a>, \"get_write_access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext3_journal_get_write_access\">ext3_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#parent_bh\">parent_bh</a>)){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#parent_bh\">parent_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"call ext3_journal_dirty_metadata\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#parent_bh\">parent_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have reached the bottom of the tree. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#parent_bh\">parent_bh</a>, \"free data blocks\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_data\">ext3_free_data</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#parent_bh\">parent_bh</a>, <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#last\">last</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"int <a class=\"id\" href=\"#ext3_can_truncate\">ext3_can_truncate</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_APPEND\">IS_APPEND</a>(<a class=\"id\" href=\"#inode\">inode</a>) || <a class=\"id\" href=\"#IS_IMMUTABLE\">IS_IMMUTABLE</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return !<a class=\"id\" href=\"#ext3_inode_is_fast_symlink\">ext3_inode_is_fast_symlink</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext3_truncate()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We block out ext3_get_block() block instantiations across the entire</span>", 
"<span class=\"comment\"> * transaction, and VFS/VM ensures that ext3_truncate() cannot run</span>", 
"<span class=\"comment\"> * simultaneously on behalf of the same inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * As we work through the truncate and commmit bits of it to the journal there</span>", 
"<span class=\"comment\"> * is one core, guiding principle: the file's tree must always be consistent on</span>", 
"<span class=\"comment\"> * disk.  We must be able to restart the truncate after a crash.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The file's tree may be transiently inconsistent in memory (although it</span>", 
"<span class=\"comment\"> * probably isn't), but whenever we close off and commit a journal transaction,</span>", 
"<span class=\"comment\"> * the contents of (the filesystem + the journal) must be consistent and</span>", 
"<span class=\"comment\"> * restartable.  It's pretty simple, really: bottom up, right to left (although</span>", 
"<span class=\"comment\"> * left-to-right works OK too).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that at recovery time, journal replay occurs *before* the restart of</span>", 
"<span class=\"comment\"> * truncate against the orphan inode list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The committed inode has the new, desired i_size (which is the same as</span>", 
"<span class=\"comment\"> * i_disksize in this case).  After a crash, ext3_orphan_cleanup() will see</span>", 
"<span class=\"comment\"> * that this inode's truncate did not complete and it will again call</span>", 
"<span class=\"comment\"> * ext3_truncate() to have another go.  So there will be instantiated blocks</span>", 
"<span class=\"comment\"> * to the right of the truncation point in a crashed ext3 filesystem.  But</span>", 
"<span class=\"comment\"> * that's fine - as long as they are linked from the inode, the post-crash</span>", 
"<span class=\"comment\"> * ext3_truncate() run will find them and release them.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext3_truncate\">ext3_truncate</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_inode_info\">ext3_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#i_data\">i_data</a> = <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data\">i_data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#addr_per_block\">addr_per_block</a> = <a class=\"id\" href=\"#EXT3_ADDR_PER_BLOCK\">EXT3_ADDR_PER_BLOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offsets\">offsets</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> <a class=\"id\" href=\"#chain\">chain</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#partial\">partial</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> <a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#last_block\">last_block</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext3_can_truncate\">ext3_can_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_notrans\">out_notrans</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> == 0 && <a class=\"id\" href=\"#ext3_should_writeback_data\">ext3_should_writeback_data</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_set_inode_state\">ext3_set_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT3_STATE_FLUSH_ON_CLOSE\">EXT3_STATE_FLUSH_ON_CLOSE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We have to lock the EOF page here, because lock_page() nests</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * outside journal_start().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> &amp; (<a class=\"id\" href=\"#blocksize\">blocksize</a> - 1)) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Block boundary? Nothing to do */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#grab_cache_page\">grab_cache_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_notrans\">out_notrans</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#start_transaction\">start_transaction</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_highpage\">clear_highpage</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_page\">flush_dcache_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_notrans\">out_notrans</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_block\">last_block</a> = (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> + <a class=\"id\" href=\"#blocksize\">blocksize</a>-1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>>> <a class=\"id\" href=\"#EXT3_BLOCK_SIZE_BITS\">EXT3_BLOCK_SIZE_BITS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_block_truncate_page\">ext3_block_truncate_page</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#ext3_block_to_path\">ext3_block_to_path</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#last_block\">last_block</a>, <a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_stop\">out_stop</a>;<span class=\"ts\"/><span class=\"comment\">/* error */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * OK.  This truncate is going to happen.  We add the inode to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * orphan list, so that if this truncate spans multiple transactions,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and we crash, we will resume the truncate when the filesystem</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * recovers.  It also marks the inode dirty, to catch the new size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Implication: the file must always be in a sane, consistent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * truncatable state while each transaction commits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_orphan_add\">ext3_orphan_add</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_stop\">out_stop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The orphan list entry will now protect us from any crash which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * occurs before the truncate completes, so it is now safe to propagate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the new, shorter inode size (held for now in i_size) into the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on-disk inode. We do this via i_disksize, which is the value which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ext3 *really* writes onto the disk inode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_disksize\">i_disksize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * From here we block out all ext3_get_block() callers who want to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * modify the block allocation tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#truncate_mutex\">truncate_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> == 1) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* direct blocks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_data\">ext3_free_data</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#i_data\">i_data</a>+<a class=\"id\" href=\"#offsets\">offsets</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#i_data\">i_data</a> + <a class=\"id\" href=\"#EXT3_NDIR_BLOCKS\">EXT3_NDIR_BLOCKS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#do_indirects\">do_indirects</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#ext3_find_shared\">ext3_find_shared</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#chain\">chain</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Kill the top of shared branch (not detached) */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#partial\">partial</a> == <a class=\"id\" href=\"#chain\">chain</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Shared branch grows from the inode */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_branches\">ext3_free_branches</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>+1, (<a class=\"id\" href=\"#chain\">chain</a>+<a class=\"id\" href=\"#n\">n</a>-1) - <a class=\"id\" href=\"#partial\">partial</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#p\">p</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We mark the inode dirty prior to restart,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and prior to stop.  No need for it here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Shared branch grows from an indirect block */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>, \"get_write_access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_branches\">ext3_free_branches</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#p\">p</a>+1, (<a class=\"id\" href=\"#chain\">chain</a>+<a class=\"id\" href=\"#n\">n</a>-1) - <a class=\"id\" href=\"#partial\">partial</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the ends of indirect blocks on the shared branch */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#partial\">partial</a> &gt; <a class=\"id\" href=\"#chain\">chain</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_branches\">ext3_free_branches</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#p\">p</a> + 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#__le32\">__le32</a>*)<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>+<a class=\"id\" href=\"#addr_per_block\">addr_per_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#chain\">chain</a>+<a class=\"id\" href=\"#n\">n</a>-1) - <a class=\"id\" href=\"#partial\">partial</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>, \"call brelse\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a> (<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>--;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#do_indirects\">do_indirects</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Kill the remaining (whole) subtrees */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#offsets\">offsets</a>[0]) {", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT3_IND_BLOCK\">EXT3_IND_BLOCK</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_branches\">ext3_free_branches</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>+1, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT3_IND_BLOCK\">EXT3_IND_BLOCK</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EXT3_IND_BLOCK\">EXT3_IND_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT3_DIND_BLOCK\">EXT3_DIND_BLOCK</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_branches\">ext3_free_branches</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>+1, 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT3_DIND_BLOCK\">EXT3_DIND_BLOCK</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EXT3_DIND_BLOCK\">EXT3_DIND_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT3_TIND_BLOCK\">EXT3_TIND_BLOCK</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_branches\">ext3_free_branches</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>+1, 3);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT3_TIND_BLOCK\">EXT3_TIND_BLOCK</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EXT3_TIND_BLOCK\">EXT3_TIND_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_discard_reservation\">ext3_discard_reservation</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#truncate_mutex\">truncate_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a> = <a class=\"id\" href=\"#CURRENT_TIME_SEC\">CURRENT_TIME_SEC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_mark_inode_dirty\">ext3_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In a multi-transaction truncate, we only make the final transaction</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * synchronous</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_SYNC\">IS_SYNC</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_sync\">h_sync</a> = 1;", 
"<a class=\"id\" href=\"#out_stop\">out_stop</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this was a simple ftruncate(), and the file will remain alive</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then we need to clear up the orphan record which we created above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * However, if this was a real unlink then we were called by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ext3_evict_inode(), and we allow that function to clean up the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * orphan info for us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_orphan_del\">ext3_orphan_del</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>return;", 
"<a class=\"id\" href=\"#out_notrans\">out_notrans</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Delete the inode from orphan list so that it doesn't stay there</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * forever and trigger assertion on umount.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_orphan_del\">ext3_orphan_del</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#ext3_get_inode_block\">ext3_get_inode_block</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ino\">ino</a>, struct <a class=\"id\" href=\"#ext3_iloc\">ext3_iloc</a> *<a class=\"id\" href=\"#iloc\">iloc</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#block_group\">block_group</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_group_desc\">ext3_group_desc</a> *<a class=\"id\" href=\"#gdp\">gdp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext3_valid_inum\">ext3_valid_inum</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ino\">ino</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This error is already checked for in namei.c unless we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * looking at an NFS filehandle, in which case no error</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * report is needed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a> = (<a class=\"id\" href=\"#ino\">ino</a> - 1) / <a class=\"id\" href=\"#EXT3_INODES_PER_GROUP\">EXT3_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdp\">gdp</a> = <a class=\"id\" href=\"#ext3_get_group_desc\">ext3_get_group_desc</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gdp\">gdp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Figure out the offset within the block group inode table</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = ((<a class=\"id\" href=\"#ino\">ino</a> - 1) % <a class=\"id\" href=\"#EXT3_INODES_PER_GROUP\">EXT3_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>)) *", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_INODE_SIZE\">EXT3_INODE_SIZE</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_inode_table\">bg_inode_table</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#offset\">offset</a> >> <a class=\"id\" href=\"#EXT3_BLOCK_SIZE_BITS\">EXT3_BLOCK_SIZE_BITS</a>(<a class=\"id\" href=\"#sb\">sb</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iloc\">iloc</a>-><a class=\"id\" href=\"#block_group\">block_group</a> = <a class=\"id\" href=\"#block_group\">block_group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iloc\">iloc</a>-><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offset\">offset</a> &amp; (<a class=\"id\" href=\"#EXT3_BLOCK_SIZE\">EXT3_BLOCK_SIZE</a>(<a class=\"id\" href=\"#sb\">sb</a>) - 1);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#block\">block</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext3_get_inode_loc returns with an extra refcount against the inode's</span>", 
"<span class=\"comment\"> * underlying buffer_head on success. If 'in_mem' is true, we have all</span>", 
"<span class=\"comment\"> * data in memory that is needed to recreate the on-disk version of this</span>", 
"<span class=\"comment\"> * inode.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__ext3_get_inode_loc\">__ext3_get_inode_loc</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_iloc\">ext3_iloc</a> *<a class=\"id\" href=\"#iloc\">iloc</a>, int <a class=\"id\" href=\"#in_mem\">in_mem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#ext3_get_inode_block\">ext3_get_inode_block</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>, <a class=\"id\" href=\"#iloc\">iloc</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#block\">block</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_getblk\">sb_getblk</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#block\">block</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a> (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, \"ext3_get_inode_loc\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"unable to read inode block - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"inode=%lu, block=\"<a class=\"id\" href=\"#E3FSBLK\">E3FSBLK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>, <a class=\"id\" href=\"#block\">block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the buffer has the write error flag, we have failed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to write out another inode in the same block.  In this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * case, we don't have to read the block because we may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * read the old inode data successfully.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_write_io_error\">buffer_write_io_error</a>(<a class=\"id\" href=\"#bh\">bh</a>) && !<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* someone brought it uptodate while we waited */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#has_buffer\">has_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we have all information of the inode in memory and this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is the only valid inode in the block, we need not read the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in_mem\">in_mem</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_group_desc\">ext3_group_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#inodes_per_buffer\">inodes_per_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#inode_offset\">inode_offset</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#block_group\">block_group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a> = (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> - 1) /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_INODES_PER_GROUP\">EXT3_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inodes_per_buffer\">inodes_per_buffer</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_INODE_SIZE\">EXT3_INODE_SIZE</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode_offset\">inode_offset</a> = ((<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> - 1) %", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_INODES_PER_GROUP\">EXT3_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#inode_offset\">inode_offset</a> &amp; ~(<a class=\"id\" href=\"#inodes_per_buffer\">inodes_per_buffer</a> - 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Is the inode bitmap in cache? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext3_get_group_desc\">ext3_get_group_desc</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#make_io\">make_io</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#sb_getblk\">sb_getblk</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_inode_bitmap\">bg_inode_bitmap</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#make_io\">make_io</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If the inode bitmap isn't in cache then the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * optimisation may end up performing two reads instead</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * of one, so skip it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#make_io\">make_io</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#inodes_per_buffer\">inodes_per_buffer</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#inode_offset\">inode_offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_test_bit\">ext3_test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#inodes_per_buffer\">inodes_per_buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* all other inodes are free, so skip I/O */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, 0, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#has_buffer\">has_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#make_io\">make_io</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * There are other valid inodes in the buffer, this inode</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * has in-inode xattrs, or we don't have this inode in memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Read the block from disk.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a> = <a class=\"id\" href=\"#end_buffer_read_sync\">end_buffer_read_sync</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#submit_bh\">submit_bh</a>(<a class=\"id\" href=\"#READ_META\">READ_META</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, \"ext3_get_inode_loc\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"unable to read inode block - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"inode=%lu, block=\"<a class=\"id\" href=\"#E3FSBLK\">E3FSBLK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>, <a class=\"id\" href=\"#block\">block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#has_buffer\">has_buffer</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iloc\">iloc</a>-><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ext3_get_inode_loc\">ext3_get_inode_loc</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#ext3_iloc\">ext3_iloc</a> *<a class=\"id\" href=\"#iloc\">iloc</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* We have all inode data except xattrs in memory here. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__ext3_get_inode_loc\">__ext3_get_inode_loc</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iloc\">iloc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#ext3_test_inode_state\">ext3_test_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT3_STATE_XATTR\">EXT3_STATE_XATTR</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#ext3_set_inode_flags\">ext3_set_inode_flags</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> &= ~(<a class=\"id\" href=\"#S_SYNC\">S_SYNC</a>|<a class=\"id\" href=\"#S_APPEND\">S_APPEND</a>|<a class=\"id\" href=\"#S_IMMUTABLE\">S_IMMUTABLE</a>|<a class=\"id\" href=\"#S_NOATIME\">S_NOATIME</a>|<a class=\"id\" href=\"#S_DIRSYNC\">S_DIRSYNC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT3_SYNC_FL\">EXT3_SYNC_FL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#S_SYNC\">S_SYNC</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT3_APPEND_FL\">EXT3_APPEND_FL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#S_APPEND\">S_APPEND</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT3_IMMUTABLE_FL\">EXT3_IMMUTABLE_FL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#S_IMMUTABLE\">S_IMMUTABLE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT3_NOATIME_FL\">EXT3_NOATIME_FL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#S_NOATIME\">S_NOATIME</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT3_DIRSYNC_FL\">EXT3_DIRSYNC_FL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#S_DIRSYNC\">S_DIRSYNC</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Propagate flags from i_flags to EXT3_I(inode)-&gt;i_flags */</span>", 
"void <a class=\"id\" href=\"#ext3_get_inode_flags\">ext3_get_inode_flags</a>(struct <a class=\"id\" href=\"#ext3_inode_info\">ext3_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#vfs_inode\">vfs_inode</a>.<a class=\"id\" href=\"#i_flags\">i_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> &= ~(<a class=\"id\" href=\"#EXT3_SYNC_FL\">EXT3_SYNC_FL</a>|<a class=\"id\" href=\"#EXT3_APPEND_FL\">EXT3_APPEND_FL</a>|", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_IMMUTABLE_FL\">EXT3_IMMUTABLE_FL</a>|<a class=\"id\" href=\"#EXT3_NOATIME_FL\">EXT3_NOATIME_FL</a>|<a class=\"id\" href=\"#EXT3_DIRSYNC_FL\">EXT3_DIRSYNC_FL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#S_SYNC\">S_SYNC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#EXT3_SYNC_FL\">EXT3_SYNC_FL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#S_APPEND\">S_APPEND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#EXT3_APPEND_FL\">EXT3_APPEND_FL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#S_IMMUTABLE\">S_IMMUTABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#EXT3_IMMUTABLE_FL\">EXT3_IMMUTABLE_FL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#S_NOATIME\">S_NOATIME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#EXT3_NOATIME_FL\">EXT3_NOATIME_FL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#S_DIRSYNC\">S_DIRSYNC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#EXT3_DIRSYNC_FL\">EXT3_DIRSYNC_FL</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ext3_iget\">ext3_iget</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, unsigned long <a class=\"id\" href=\"#ino\">ino</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_iloc\">ext3_iloc</a> <a class=\"id\" href=\"#iloc\">iloc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_inode\">ext3_inode</a> *<a class=\"id\" href=\"#raw_inode\">raw_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_inode_info\">ext3_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_journal\">s_journal</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#block\">block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#iget_locked\">iget_locked</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ino\">ino</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_NEW\">I_NEW</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__ext3_get_inode_loc\">__ext3_get_inode_loc</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#iloc\">iloc</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_inode\">bad_inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_inode\">raw_inode</a> = <a class=\"id\" href=\"#ext3_raw_inode\">ext3_raw_inode</a>(&amp;<a class=\"id\" href=\"#iloc\">iloc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> = (<a class=\"id\" href=\"#uid_t\">uid_t</a>)<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_uid_low\">i_uid_low</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> = (<a class=\"id\" href=\"#gid_t\">gid_t</a>)<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_gid_low\">i_gid_low</a>);", 
"<span class=\"ts\"/>if(!(<a class=\"id\" href=\"#test_opt\">test_opt</a> (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#NO_UID32\">NO_UID32</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> |= <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_uid_high\">i_uid_high</a>) << 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> |= <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_gid_high\">i_gid_high</a>) << 16;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_links_count\">i_links_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = (signed)<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = (signed)<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = (signed)<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_state_flags\">i_state_flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_dir_start_lookup\">i_dir_start_lookup</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_dtime\">i_dtime</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_dtime\">i_dtime</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* We now have enough fields to check if the inode was active or not.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is needed because nfsd might try to access dead inodes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the test is that same one that e2fsck uses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NeilBrown 1999oct15</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> == 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_mount_state\">s_mount_state</a> &amp; <a class=\"id\" href=\"#EXT3_ORPHAN_FS\">EXT3_ORPHAN_FS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this inode is deleted */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a> (<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ESTALE\">ESTALE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_inode\">bad_inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The only unlinked inodes we let through here have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * valid i_mode and are being read by the orphan</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * recovery code: that's fine, we're about to complete</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the process of deleting those. */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#EXT3_FRAGMENTS\">EXT3_FRAGMENTS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_faddr\">i_faddr</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_faddr\">i_faddr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_frag_no\">i_frag_no</a> = <a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_frag\">i_frag</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_frag_size\">i_frag_size</a> = <a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_fsize\">i_fsize</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_file_acl\">i_file_acl</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_file_acl\">i_file_acl</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_dir_acl\">i_dir_acl</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_dir_acl\">i_dir_acl</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> |=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__u64\">__u64</a>)<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_size_high\">i_size_high</a>)) << 32;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_disksize\">i_disksize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_generation\">i_generation</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_generation\">i_generation</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_group\">i_block_group</a> = <a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#block_group\">block_group</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE! The in-memory inode i_data array is in little-endian order</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * even on big-endian machines: we do NOT byteswap the block numbers!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#block\">block</a> = 0; <a class=\"id\" href=\"#block\">block</a> &lt; <a class=\"id\" href=\"#EXT3_N_BLOCKS\">EXT3_N_BLOCKS</a>; <a class=\"id\" href=\"#block\">block</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#block\">block</a>] = <a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_block\">i_block</a>[<a class=\"id\" href=\"#block\">block</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_orphan\">i_orphan</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set transaction id's of transactions that have to be committed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to finish f[data]sync. We set them to currently running transaction</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as we cannot be sure that the inode or some of its metadata isn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * part of the transaction - the inode could have been reclaimed and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * now it is reread from disk.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tid_t\">tid_t</a> <a class=\"id\" href=\"#tid\">tid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#transaction\">transaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tid\">tid</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_tid\">t_tid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tid\">tid</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_commit_sequence\">j_commit_sequence</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_sync_tid\">i_sync_tid</a>, <a class=\"id\" href=\"#tid\">tid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_datasync_tid\">i_datasync_tid</a>, <a class=\"id\" href=\"#tid\">tid</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> >= <a class=\"id\" href=\"#EXT3_FIRST_INO\">EXT3_FIRST_INO</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>) + 1 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#EXT3_INODE_SIZE\">EXT3_INODE_SIZE</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>) &gt; <a class=\"id\" href=\"#EXT3_GOOD_OLD_INODE_SIZE\">EXT3_GOOD_OLD_INODE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When mke2fs creates big inodes it does not zero out</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the unused bytes above EXT3_GOOD_OLD_INODE_SIZE,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so ignore those first few inodes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT3_GOOD_OLD_INODE_SIZE\">EXT3_GOOD_OLD_INODE_SIZE</a> + <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a> &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#EXT3_INODE_SIZE\">EXT3_INODE_SIZE</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a> (<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_inode\">bad_inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The extra space is currently unused. Use it. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a> = sizeof(struct <a class=\"id\" href=\"#ext3_inode\">ext3_inode</a>) -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#EXT3_GOOD_OLD_INODE_SIZE\">EXT3_GOOD_OLD_INODE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#magic\">magic</a> = (void *)<a class=\"id\" href=\"#raw_inode\">raw_inode</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_GOOD_OLD_INODE_SIZE\">EXT3_GOOD_OLD_INODE_SIZE</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#magic\">magic</a> == <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#EXT3_XATTR_MAGIC\">EXT3_XATTR_MAGIC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ext3_set_inode_state\">ext3_set_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT3_STATE_XATTR\">EXT3_STATE_XATTR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_extra_isize\">i_extra_isize</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#ext3_file_inode_operations\">ext3_file_inode_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#ext3_file_operations\">ext3_file_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_set_aops\">ext3_set_aops</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#ext3_dir_inode_operations\">ext3_dir_inode_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#ext3_dir_operations\">ext3_dir_operations</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_inode_is_fast_symlink\">ext3_inode_is_fast_symlink</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#ext3_fast_symlink_inode_operations\">ext3_fast_symlink_inode_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd_terminate_link\">nd_terminate_link</a>(<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data\">i_data</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data\">i_data</a>) - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#ext3_symlink_inode_operations\">ext3_symlink_inode_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_set_aops\">ext3_set_aops</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#ext3_special_inode_operations\">ext3_special_inode_operations</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_block\">i_block</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_special_inode\">init_special_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#old_decode_dev\">old_decode_dev</a>(<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_block\">i_block</a>[0])));", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_special_inode\">init_special_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#new_decode_dev\">new_decode_dev</a>(<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#raw_inode\">raw_inode</a>-><a class=\"id\" href=\"#i_block\">i_block</a>[1])));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a> (<a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_set_inode_flags\">ext3_set_inode_flags</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_new_inode\">unlock_new_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<a class=\"id\" href=\"#bad_inode\">bad_inode</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iget_failed\">iget_failed</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Post the struct inode info into an on-disk inode location in the</span>", 
"<span class=\"comment\"> * buffer-cache.  This gobbles the caller's reference to the</span>", 
"<span class=\"comment\"> * buffer_head in the inode location struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must have write access to iloc-&gt;bh.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext3_do_update_inode\">ext3_do_update_inode</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
];
xr_frag_insert('l/8b/3ae0c2ba848b4aa20bb25e0205807039756f7b.xr', __xr_tmp);
