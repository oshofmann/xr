var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_VIRTIO_H\">_LINUX_VIRTIO_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_VIRTIO_H\">_LINUX_VIRTIO_H</a>", 
"<span class=\"comment\">/* Everything a virtio driver needs to work with any particular virtio</span>", 
"<span class=\"comment\"> * implementation. */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#scatterlist\">scatterlist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mod_devicetable\">mod_devicetable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * virtqueue - a queue to register buffers for sending or receiving.</span>", 
"<span class=\"comment\"> * @list: the chain of virtqueues for this device</span>", 
"<span class=\"comment\"> * @callback: the function to call when buffers are consumed (can be NULL).</span>", 
"<span class=\"comment\"> * @name: the name of this virtqueue (mainly for debugging)</span>", 
"<span class=\"comment\"> * @vdev: the virtio device this queue was created for.</span>", 
"<span class=\"comment\"> * @priv: a pointer for the virtqueue implementation to use.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#callback\">callback</a>)(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>);", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#vdev\">vdev</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#priv\">priv</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * operations for virtqueue</span>", 
"<span class=\"comment\"> * virtqueue_add_buf: expose buffer to other end</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vq: the struct virtqueue we're talking about.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sg: the description of the buffer(s).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>out_num: the number of sg readable by other side</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in_num: the number of sg which are writable (after readable ones)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>data: the token identifying the buffer.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>gfp: how to do memory allocations (if necessary).</span>", 
"<span class=\"comment\"> *      Returns remaining capacity of queue (sg segments) or a negative error.</span>", 
"<span class=\"comment\"> * virtqueue_kick: update after add_buf</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vq: the struct virtqueue</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>After one or more add_buf calls, invoke this to kick the other side.</span>", 
"<span class=\"comment\"> * virtqueue_get_buf: get the next used buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vq: the struct virtqueue we're talking about.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>len: the length written into the buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns NULL or the \"data\" token handed to add_buf.</span>", 
"<span class=\"comment\"> * virtqueue_disable_cb: disable callbacks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vq: the struct virtqueue we're talking about.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note that this is not necessarily synchronous, hence unreliable and only</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>useful as an optimization.</span>", 
"<span class=\"comment\"> * virtqueue_enable_cb: restart callbacks after disable_cb.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vq: the struct virtqueue we're talking about.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This re-enables callbacks; it returns \"false\" if there are pending</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>buffers in the queue, to detect a possible race between the driver</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>checking for more work, and enabling callbacks.</span>", 
"<span class=\"comment\"> * virtqueue_detach_unused_buf: detach first unused buffer</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>vq: the struct virtqueue we're talking about.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Returns NULL or the \"data\" token handed to add_buf</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking rules are straightforward: the driver is responsible for</span>", 
"<span class=\"comment\"> * locking.  No two operations may be invoked simultaneously, with the exception</span>", 
"<span class=\"comment\"> * of virtqueue_disable_cb.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All operations can be called in any context.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#virtqueue_add_buf_gfp\">virtqueue_add_buf_gfp</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> <a class=\"id\" href=\"#sg\">sg</a>[],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#out_num\">out_num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#in_num\">in_num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#virtqueue_add_buf\">virtqueue_add_buf</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> <a class=\"id\" href=\"#sg\">sg</a>[],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#out_num\">out_num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#in_num\">in_num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#virtqueue_add_buf_gfp\">virtqueue_add_buf_gfp</a>(<a class=\"id\" href=\"#vq\">vq</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#out_num\">out_num</a>, <a class=\"id\" href=\"#in_num\">in_num</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#virtqueue_kick\">virtqueue_kick</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>);", 
"", 
"void *<a class=\"id\" href=\"#virtqueue_get_buf\">virtqueue_get_buf</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>, unsigned int *<a class=\"id\" href=\"#len\">len</a>);", 
"", 
"void <a class=\"id\" href=\"#virtqueue_disable_cb\">virtqueue_disable_cb</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>);", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#virtqueue_enable_cb\">virtqueue_enable_cb</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>);", 
"", 
"void *<a class=\"id\" href=\"#virtqueue_detach_unused_buf\">virtqueue_detach_unused_buf</a>(struct <a class=\"id\" href=\"#virtqueue\">virtqueue</a> *<a class=\"id\" href=\"#vq\">vq</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * virtio_device - representation of a device using virtio</span>", 
"<span class=\"comment\"> * @index: unique position on the virtio bus</span>", 
"<span class=\"comment\"> * @dev: underlying device.</span>", 
"<span class=\"comment\"> * @id: the device type identification (used to match it with a driver).</span>", 
"<span class=\"comment\"> * @config: the configuration ops for this device.</span>", 
"<span class=\"comment\"> * @vqs: the list of virtqueues for this device.</span>", 
"<span class=\"comment\"> * @features: the features supported by both driver and device.</span>", 
"<span class=\"comment\"> * @priv: private pointer for the driver's use.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#virtio_device_id\">virtio_device_id</a> <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#virtio_config_ops\">virtio_config_ops</a> *<a class=\"id\" href=\"#config\">config</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#vqs\">vqs</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Note that this is a Linux set_bit-style bitmap. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#features\">features</a>[1];", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#priv\">priv</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dev_to_virtio\">dev_to_virtio</a>(<a class=\"id\" href=\"#dev\">dev</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a>, <a class=\"id\" href=\"#dev\">dev</a>)", 
"int <a class=\"id\" href=\"#register_virtio_device\">register_virtio_device</a>(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"void <a class=\"id\" href=\"#unregister_virtio_device\">unregister_virtio_device</a>(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * virtio_driver - operations for a virtio I/O driver</span>", 
"<span class=\"comment\"> * @driver: underlying device driver (populate name and owner).</span>", 
"<span class=\"comment\"> * @id_table: the ids serviced by this driver.</span>", 
"<span class=\"comment\"> * @feature_table: an array of feature numbers supported by this device.</span>", 
"<span class=\"comment\"> * @feature_table_size: number of entries in the feature table array.</span>", 
"<span class=\"comment\"> * @probe: the function to call when a device is found.  Returns 0 or -errno.</span>", 
"<span class=\"comment\"> * @remove: the function when a device is removed.</span>", 
"<span class=\"comment\"> * @config_changed: optional function to call when the device configuration</span>", 
"<span class=\"comment\"> *    changes; may be called in interrupt context.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#virtio_driver\">virtio_driver</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a> <a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#virtio_device_id\">virtio_device_id</a> *<a class=\"id\" href=\"#id_table\">id_table</a>;", 
"<span class=\"ts\"/>const unsigned int *<a class=\"id\" href=\"#feature_table\">feature_table</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#feature_table_size\">feature_table_size</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#probe\">probe</a>)(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#remove\">remove</a>)(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#config_changed\">config_changed</a>)(struct <a class=\"id\" href=\"#virtio_device\">virtio_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"};", 
"", 
"int <a class=\"id\" href=\"#register_virtio_driver\">register_virtio_driver</a>(struct <a class=\"id\" href=\"#virtio_driver\">virtio_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>);", 
"void <a class=\"id\" href=\"#unregister_virtio_driver\">unregister_virtio_driver</a>(struct <a class=\"id\" href=\"#virtio_driver\">virtio_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_VIRTIO_H */</span>", 
];
xr_frag_insert('l/8b/940615a466fd927eb0fd21d9cd619f582be7f3.xr', __xr_tmp);
