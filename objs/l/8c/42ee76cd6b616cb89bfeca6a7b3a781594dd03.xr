var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic pidhash and scalable, time-bounded PID allocator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) 2002-2003 William Irwin, IBM</span>", 
"<span class=\"comment\"> * (C) 2004 William Irwin, Oracle</span>", 
"<span class=\"comment\"> * (C) 2002-2004 Ingo Molnar, Red Hat</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * pid-structures are backing objects for tasks sharing a given ID to chain</span>", 
"<span class=\"comment\"> * against. There is very little to them aside from hashing them and</span>", 
"<span class=\"comment\"> * parking tasks using given ID's on a list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The hash is always changed with the tasklist_lock write-acquired,</span>", 
"<span class=\"comment\"> * and the hash is only accessed with the tasklist_lock at least</span>", 
"<span class=\"comment\"> * read-acquired, so there's no additional SMP locking needed here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We have a list of bitmap pages, which bitmaps represent the PID space.</span>", 
"<span class=\"comment\"> * Allocating and freeing PIDs is completely lockless. The worst-case</span>", 
"<span class=\"comment\"> * allocation scenario when all but one out of 1 million PIDs possible are</span>", 
"<span class=\"comment\"> * allocated already: the scanning of 32 list entries and at most PAGE_SIZE</span>", 
"<span class=\"comment\"> * bytes. The typical fastpath is a single successful setbit. Freeing is O(1).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Pid namespaces:</span>", 
"<span class=\"comment\"> *    (C) 2007 Pavel Emelyanov &lt;xemul@openvz.org&gt;, OpenVZ, SWsoft Inc.</span>", 
"<span class=\"comment\"> *    (C) 2007 Sukadev Bhattiprolu &lt;sukadev@us.ibm.com&gt;, IBM</span>", 
"<span class=\"comment\"> *     Many thanks to Oleg Nesterov for comments and help</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rculist\">rculist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pid_hashfn\">pid_hashfn</a>(<a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#ns\">ns</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash_long\">hash_long</a>((unsigned long)<a class=\"id\" href=\"#nr\">nr</a> + (unsigned long)<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#pidhash_shift\">pidhash_shift</a>)", 
"static struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#pid_hash\">pid_hash</a>;", 
"static unsigned int <a class=\"id\" href=\"#pidhash_shift\">pidhash_shift</a> = 4;", 
"struct <a class=\"id\" href=\"#pid\">pid</a> <a class=\"id\" href=\"#init_struct_pid\">init_struct_pid</a> = <a class=\"id\" href=\"#INIT_STRUCT_PID\">INIT_STRUCT_PID</a>;", 
"", 
"int <a class=\"id\" href=\"#pid_max\">pid_max</a> = <a class=\"id\" href=\"#PID_MAX_DEFAULT\">PID_MAX_DEFAULT</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RESERVED_PIDS\">RESERVED_PIDS</a><span class=\"ts\"/><span class=\"ts\"/>300", 
"", 
"int <a class=\"id\" href=\"#pid_max_min\">pid_max_min</a> = <a class=\"id\" href=\"#RESERVED_PIDS\">RESERVED_PIDS</a> + 1;", 
"int <a class=\"id\" href=\"#pid_max_max\">pid_max_max</a> = <a class=\"id\" href=\"#PID_MAX_LIMIT\">PID_MAX_LIMIT</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>*8)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BITS_PER_PAGE_MASK\">BITS_PER_PAGE_MASK</a><span class=\"ts\"/>(<a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a>-1)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mk_pid\">mk_pid</a>(struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#pid_ns\">pid_ns</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pidmap\">pidmap</a> *<a class=\"id\" href=\"#map\">map</a>, int <a class=\"id\" href=\"#off\">off</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#map\">map</a> - <a class=\"id\" href=\"#pid_ns\">pid_ns</a>-><a class=\"id\" href=\"#pidmap\">pidmap</a>)*<a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a> + <a class=\"id\" href=\"#off\">off</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#find_next_offset\">find_next_offset</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#off\">off</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#find_next_zero_bit\">find_next_zero_bit</a>((<a class=\"id\" href=\"#map\">map</a>)-><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a>, <a class=\"id\" href=\"#off\">off</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * PID-map pages start out as NULL, they get allocated upon</span>", 
"<span class=\"comment\"> * first use and are never deallocated. This way a low pid_max</span>", 
"<span class=\"comment\"> * value does not cause lots of bitmaps to be allocated, but</span>", 
"<span class=\"comment\"> * the scheme scales to up to 4 million PIDs, runtime.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> <a class=\"id\" href=\"#init_pid_ns\">init_pid_ns</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#kref\">kref</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#refcount\">refcount</a>       = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(2),", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pidmap\">pidmap</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ 0 ... <a class=\"id\" href=\"#PIDMAP_ENTRIES\">PIDMAP_ENTRIES</a>-1] = { <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(<a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a>), <a class=\"id\" href=\"#NULL\">NULL</a> }", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#last_pid\">last_pid</a> = 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#level\">level</a> = 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#child_reaper\">child_reaper</a> = &amp;<a class=\"id\" href=\"#init_task\">init_task</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#init_pid_ns\">init_pid_ns</a>);", 
"", 
"int <a class=\"id\" href=\"#is_container_init\">is_container_init</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#task_pid\">task_pid</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#numbers\">numbers</a>[<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#level\">level</a>].<a class=\"id\" href=\"#nr\">nr</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#is_container_init\">is_container_init</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note: disable interrupts while the pidmap_lock is held as an</span>", 
"<span class=\"comment\"> * interrupt might come in and do read_lock(&amp;tasklist_lock).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If we don't disable interrupts there is a nasty deadlock between</span>", 
"<span class=\"comment\"> * detach_pid()-&gt;free_pid() and another cpu that does</span>", 
"<span class=\"comment\"> * spin_lock(&amp;pidmap_lock) followed by an interrupt routine that does</span>", 
"<span class=\"comment\"> * read_lock(&amp;tasklist_lock);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After we clean up the tasklist_lock and know there are no</span>", 
"<span class=\"comment\"> * irq handlers that take it we can leave the interrupts enabled.</span>", 
"<span class=\"comment\"> * For now it is easier to be safe than to prove it can't happen.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static  <a class=\"id\" href=\"#__cacheline_aligned_in_smp\">__cacheline_aligned_in_smp</a> <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#pidmap_lock\">pidmap_lock</a>);", 
"", 
"static void <a class=\"id\" href=\"#free_pidmap\">free_pidmap</a>(struct <a class=\"id\" href=\"#upid\">upid</a> *<a class=\"id\" href=\"#upid\">upid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#upid\">upid</a>-><a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pidmap\">pidmap</a> *<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#upid\">upid</a>-><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#pidmap\">pidmap</a> + <a class=\"id\" href=\"#nr\">nr</a> / <a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#nr\">nr</a> &amp; <a class=\"id\" href=\"#BITS_PER_PAGE_MASK\">BITS_PER_PAGE_MASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#nr_free\">nr_free</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If we started walking pids at 'base', is 'a' seen before 'b'?</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pid_before\">pid_before</a>(int <a class=\"id\" href=\"#base\">base</a>, int <a class=\"id\" href=\"#a\">a</a>, int <a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is the same as saying</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (a - base + MAXUINT) % MAXUINT &lt; (b - base + MAXUINT) % MAXUINT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and that mapping orders 'a' and 'b' with respect to 'base'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return (unsigned)(<a class=\"id\" href=\"#a\">a</a> - <a class=\"id\" href=\"#base\">base</a>) &lt; (unsigned)(<a class=\"id\" href=\"#b\">b</a> - <a class=\"id\" href=\"#base\">base</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We might be racing with someone else trying to set pid_ns-&gt;last_pid.</span>", 
"<span class=\"comment\"> * We want the winner to have the \"later\" value, because if the</span>", 
"<span class=\"comment\"> * \"earlier\" value prevails, then a pid may get reused immediately.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Since pids rollover, it is not sufficient to just pick the bigger</span>", 
"<span class=\"comment\"> * value.  We have to consider where we started counting from.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 'base' is the value of pid_ns-&gt;last_pid that we observed when</span>", 
"<span class=\"comment\"> * we started looking for a pid.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 'pid' is the pid that we eventually found.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#set_last_pid\">set_last_pid</a>(struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#pid_ns\">pid_ns</a>, int <a class=\"id\" href=\"#base\">base</a>, int <a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#last_write\">last_write</a> = <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#last_write\">last_write</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_write\">last_write</a> = <a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(&amp;<a class=\"id\" href=\"#pid_ns\">pid_ns</a>-><a class=\"id\" href=\"#last_pid\">last_pid</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/>} while ((<a class=\"id\" href=\"#prev\">prev</a> != <a class=\"id\" href=\"#last_write\">last_write</a>) && (<a class=\"id\" href=\"#pid_before\">pid_before</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#last_write\">last_write</a>, <a class=\"id\" href=\"#pid\">pid</a>)));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#alloc_pidmap\">alloc_pidmap</a>(struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#pid_ns\">pid_ns</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#max_scan\">max_scan</a>, <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#pid_ns\">pid_ns</a>-><a class=\"id\" href=\"#last_pid\">last_pid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pidmap\">pidmap</a> *<a class=\"id\" href=\"#map\">map</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#last\">last</a> + 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> >= <a class=\"id\" href=\"#pid_max\">pid_max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#RESERVED_PIDS\">RESERVED_PIDS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#pid\">pid</a> &amp; <a class=\"id\" href=\"#BITS_PER_PAGE_MASK\">BITS_PER_PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = &amp;<a class=\"id\" href=\"#pid_ns\">pid_ns</a>-><a class=\"id\" href=\"#pidmap\">pidmap</a>[<a class=\"id\" href=\"#pid\">pid</a>/<a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a>];", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If last_pid points into the middle of the map-&gt;page we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * want to scan this bitmap block twice, the second time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we start with offset == 0 (or RESERVED_PIDS).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_scan\">max_scan</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#pid_max\">pid_max</a>, <a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a>) - !<a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#max_scan\">max_scan</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Free the page if someone raced with us</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * installing it:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#pidmap_lock\">pidmap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#pidmap_lock\">pidmap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#nr_free\">nr_free</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#nr_free\">nr_free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_last_pid\">set_last_pid</a>(<a class=\"id\" href=\"#pid_ns\">pid_ns</a>, <a class=\"id\" href=\"#last\">last</a>, <a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#find_next_offset\">find_next_offset</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#mk_pid\">mk_pid</a>(<a class=\"id\" href=\"#pid_ns\">pid_ns</a>, <a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a> && <a class=\"id\" href=\"#pid\">pid</a> &lt; <a class=\"id\" href=\"#pid_max\">pid_max</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#map\">map</a> &lt; &amp;<a class=\"id\" href=\"#pid_ns\">pid_ns</a>-><a class=\"id\" href=\"#pidmap\">pidmap</a>[(<a class=\"id\" href=\"#pid_max\">pid_max</a>-1)/<a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = &amp;<a class=\"id\" href=\"#pid_ns\">pid_ns</a>-><a class=\"id\" href=\"#pidmap\">pidmap</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#RESERVED_PIDS\">RESERVED_PIDS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#last\">last</a> == <a class=\"id\" href=\"#offset\">offset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#mk_pid\">mk_pid</a>(<a class=\"id\" href=\"#pid_ns\">pid_ns</a>, <a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"int <a class=\"id\" href=\"#next_pidmap\">next_pidmap</a>(struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#pid_ns\">pid_ns</a>, int <a class=\"id\" href=\"#last\">last</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pidmap\">pidmap</a> *<a class=\"id\" href=\"#map\">map</a>, *<a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = (<a class=\"id\" href=\"#last\">last</a> + 1) &amp; <a class=\"id\" href=\"#BITS_PER_PAGE_MASK\">BITS_PER_PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = &amp;<a class=\"id\" href=\"#pid_ns\">pid_ns</a>-><a class=\"id\" href=\"#pidmap\">pidmap</a>[(<a class=\"id\" href=\"#last\">last</a> + 1)/<a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = &amp;<a class=\"id\" href=\"#pid_ns\">pid_ns</a>-><a class=\"id\" href=\"#pidmap\">pidmap</a>[<a class=\"id\" href=\"#PIDMAP_ENTRIES\">PIDMAP_ENTRIES</a>];", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#map\">map</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#map\">map</a>++, <a class=\"id\" href=\"#offset\">offset</a> = 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>((<a class=\"id\" href=\"#map\">map</a>)-><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mk_pid\">mk_pid</a>(<a class=\"id\" href=\"#pid_ns\">pid_ns</a>, <a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"void <a class=\"id\" href=\"#put_pid\">put_pid</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#numbers\">numbers</a>[<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#level\">level</a>].<a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#count\">count</a>) == 1) ||", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#count\">count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#pid_cachep\">pid_cachep</a>, <a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_pid_ns\">put_pid_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#put_pid\">put_pid</a>);", 
"", 
"static void <a class=\"id\" href=\"#delayed_put_pid\">delayed_put_pid</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rhp\">rhp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#rhp\">rhp</a>, struct <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_pid\">put_pid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_pid\">free_pid</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* We can be called with write_lock_irq(&amp;tasklist_lock) held */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pidmap_lock\">pidmap_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#level\">level</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_rcu\">hlist_del_rcu</a>(&amp;<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#numbers\">numbers</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pid_chain\">pid_chain</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pidmap_lock\">pidmap_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#level\">level</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pidmap\">free_pidmap</a>(<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#numbers\">numbers</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#delayed_put_pid\">delayed_put_pid</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#alloc_pid\">alloc_pid</a>(struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#upid\">upid</a> *<a class=\"id\" href=\"#upid\">upid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#pid_cachep\">pid_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#level\">level</a>; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#alloc_pidmap\">alloc_pidmap</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#numbers\">numbers</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#numbers\">numbers</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_pid_ns\">get_pid_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#count\">count</a>, 1);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#type\">type</a> = 0; <a class=\"id\" href=\"#type\">type</a> &lt; <a class=\"id\" href=\"#PIDTYPE_MAX\">PIDTYPE_MAX</a>; ++<a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#tasks\">tasks</a>[<a class=\"id\" href=\"#type\">type</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#upid\">upid</a> = <a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#numbers\">numbers</a> + <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#pidmap_lock\">pidmap_lock</a>);", 
"<span class=\"ts\"/>for ( ; <a class=\"id\" href=\"#upid\">upid</a> >= <a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#numbers\">numbers</a>; --<a class=\"id\" href=\"#upid\">upid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#upid\">upid</a>-><a class=\"id\" href=\"#pid_chain\">pid_chain</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#pid_hash\">pid_hash</a>[<a class=\"id\" href=\"#pid_hashfn\">pid_hashfn</a>(<a class=\"id\" href=\"#upid\">upid</a>-><a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#upid\">upid</a>-><a class=\"id\" href=\"#ns\">ns</a>)]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#pidmap_lock\">pidmap_lock</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/>while (++<a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#level\">level</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pidmap\">free_pidmap</a>(<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#numbers\">numbers</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#pid_cachep\">pid_cachep</a>, <a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#find_pid_ns\">find_pid_ns</a>(int <a class=\"id\" href=\"#nr\">nr</a>, struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#elem\">elem</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#upid\">upid</a> *<a class=\"id\" href=\"#pnr\">pnr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#pnr\">pnr</a>, <a class=\"id\" href=\"#elem\">elem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#pid_hash\">pid_hash</a>[<a class=\"id\" href=\"#pid_hashfn\">pid_hashfn</a>(<a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#ns\">ns</a>)], <a class=\"id\" href=\"#pid_chain\">pid_chain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pnr\">pnr</a>-><a class=\"id\" href=\"#nr\">nr</a> == <a class=\"id\" href=\"#nr\">nr</a> && <a class=\"id\" href=\"#pnr\">pnr</a>-><a class=\"id\" href=\"#ns\">ns</a> == <a class=\"id\" href=\"#ns\">ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#pnr\">pnr</a>, struct <a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numbers\">numbers</a>[<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#level\">level</a>]);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#find_pid_ns\">find_pid_ns</a>);", 
"", 
"struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#find_vpid\">find_vpid</a>(int <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#find_pid_ns\">find_pid_ns</a>(<a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#pid_ns\">pid_ns</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#find_vpid\">find_vpid</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * attach_pid() must be called with the tasklist_lock write-held.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#attach_pid\">attach_pid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_link\">pid_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a> = &amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#tasks\">tasks</a>[<a class=\"id\" href=\"#type\">type</a>]);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__change_pid\">__change_pid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_link\">pid_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a> = &amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_rcu\">hlist_del_rcu</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#PIDTYPE_MAX\">PIDTYPE_MAX</a>; --<a class=\"id\" href=\"#tmp\">tmp</a> >= 0; )", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#hlist_empty\">hlist_empty</a>(&amp;<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#tasks\">tasks</a>[<a class=\"id\" href=\"#tmp\">tmp</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pid\">free_pid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#detach_pid\">detach_pid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__change_pid\">__change_pid</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#change_pid\">change_pid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__change_pid\">__change_pid</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attach_pid\">attach_pid</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#pid\">pid</a>);", 
"}", 
"", 
"<span class=\"comment\">/* transfer_pid is an optimization of attach_pid(new), detach_pid(old) */</span>", 
"void <a class=\"id\" href=\"#transfer_pid\">transfer_pid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#old\">old</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_replace_rcu\">hlist_replace_rcu</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#node\">node</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#pid_task\">pid_task</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#tasks\">tasks</a>[<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#first\">first</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>() ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#lockdep_tasklist_lock_is_held\">lockdep_tasklist_lock_is_held</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#first\">first</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a>, <a class=\"id\" href=\"#pids\">pids</a>[(<a class=\"id\" href=\"#type\">type</a>)].<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pid_task\">pid_task</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Must be called under rcu_read_lock().</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#find_task_by_pid_ns\">find_task_by_pid_ns</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#nr\">nr</a>, struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pid_task\">pid_task</a>(<a class=\"id\" href=\"#find_pid_ns\">find_pid_ns</a>(<a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#ns\">ns</a>), <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#vnr\">vnr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#find_task_by_pid_ns\">find_task_by_pid_ns</a>(<a class=\"id\" href=\"#vnr\">vnr</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#pid_ns\">pid_ns</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#get_task_pid\">get_task_pid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#get_pid\">get_pid</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pid\">pid</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#get_pid_task\">get_pid_task</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#pid_task\">pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#result\">result</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#find_get_pid\">find_get_pid</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#get_pid\">get_pid</a>(<a class=\"id\" href=\"#find_vpid\">find_vpid</a>(<a class=\"id\" href=\"#nr\">nr</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pid\">pid</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#find_get_pid\">find_get_pid</a>);", 
"", 
"<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid_nr_ns\">pid_nr_ns</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>, struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#upid\">upid</a> *<a class=\"id\" href=\"#upid\">upid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> && <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#level\">level</a> <= <a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#level\">level</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#upid\">upid</a> = &amp;<a class=\"id\" href=\"#pid\">pid</a>-><a class=\"id\" href=\"#numbers\">numbers</a>[<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#level\">level</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#upid\">upid</a>-><a class=\"id\" href=\"#ns\">ns</a> == <a class=\"id\" href=\"#ns\">ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#upid\">upid</a>-><a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid_vnr\">pid_vnr</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pid_nr_ns\">pid_nr_ns</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#pid_ns\">pid_ns</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pid_vnr\">pid_vnr</a>);", 
"", 
"<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#__task_pid_nr_ns\">__task_pid_nr_ns</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, enum <a class=\"id\" href=\"#pid_type\">pid_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ns\">ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#pid_ns\">pid_ns</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#pid_alive\">pid_alive</a>(<a class=\"id\" href=\"#task\">task</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#pid_nr_ns\">pid_nr_ns</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pids\">pids</a>[<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__task_pid_nr_ns\">__task_pid_nr_ns</a>);", 
"", 
"<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#task_tgid_nr_ns\">task_tgid_nr_ns</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pid_nr_ns\">pid_nr_ns</a>(<a class=\"id\" href=\"#task_tgid\">task_tgid</a>(<a class=\"id\" href=\"#tsk\">tsk</a>), <a class=\"id\" href=\"#ns\">ns</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#task_tgid_nr_ns\">task_tgid_nr_ns</a>);", 
"", 
"struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#task_active_pid_ns\">task_active_pid_ns</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ns_of_pid\">ns_of_pid</a>(<a class=\"id\" href=\"#task_pid\">task_pid</a>(<a class=\"id\" href=\"#tsk\">tsk</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#task_active_pid_ns\">task_active_pid_ns</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Used by proc to find the first pid that is greater than or equal to nr.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If there is a pid at nr this function is exactly the same as find_pid_ns.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#find_ge_pid\">find_ge_pid</a>(int <a class=\"id\" href=\"#nr\">nr</a>, struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#find_pid_ns\">find_pid_ns</a>(<a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#next_pidmap\">next_pidmap</a>(<a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#nr\">nr</a> &gt; 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pid\">pid</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The pid hash table is scaled according to the amount of memory in the</span>", 
"<span class=\"comment\"> * machine.  From a minimum of 16 slots up to 4096 slots at one gigabyte or</span>", 
"<span class=\"comment\"> * more.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pidhash_init\">pidhash_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#pidhash_size\">pidhash_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_hash\">pid_hash</a> = <a class=\"id\" href=\"#alloc_large_system_hash\">alloc_large_system_hash</a>(\"PID\", sizeof(*<a class=\"id\" href=\"#pid_hash\">pid_hash</a>), 0, 18,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#HASH_EARLY\">HASH_EARLY</a> | <a class=\"id\" href=\"#HASH_SMALL\">HASH_SMALL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#pidhash_shift\">pidhash_shift</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 4096);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pidhash_size\">pidhash_size</a> = 1 << <a class=\"id\" href=\"#pidhash_shift\">pidhash_shift</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pidhash_size\">pidhash_size</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#pid_hash\">pid_hash</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pidmap_init\">pidmap_init</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* bump default and minimum pid_max based on number of cpus */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_max\">pid_max</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#pid_max_max\">pid_max_max</a>, <a class=\"id\" href=\"#max_t\">max_t</a>(int, <a class=\"id\" href=\"#pid_max\">pid_max</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PIDS_PER_CPU_DEFAULT\">PIDS_PER_CPU_DEFAULT</a> * <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>()));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_max_min\">pid_max_min</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(int, <a class=\"id\" href=\"#pid_max_min\">pid_max_min</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PIDS_PER_CPU_MIN\">PIDS_PER_CPU_MIN</a> * <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"pid_max: default: %u minimum: %u\\n\", <a class=\"id\" href=\"#pid_max\">pid_max</a>, <a class=\"id\" href=\"#pid_max_min\">pid_max_min</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_pid_ns\">init_pid_ns</a>.<a class=\"id\" href=\"#pidmap\">pidmap</a>[0].<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Reserve PID 0. We never call free_pidmap(0) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(0, <a class=\"id\" href=\"#init_pid_ns\">init_pid_ns</a>.<a class=\"id\" href=\"#pidmap\">pidmap</a>[0].<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#init_pid_ns\">init_pid_ns</a>.<a class=\"id\" href=\"#pidmap\">pidmap</a>[0].<a class=\"id\" href=\"#nr_free\">nr_free</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_pid_ns\">init_pid_ns</a>.<a class=\"id\" href=\"#pid_cachep\">pid_cachep</a> = <a class=\"id\" href=\"#KMEM_CACHE\">KMEM_CACHE</a>(<a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a> | <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>);", 
"}", 
];
xr_frag_insert('l/8c/42ee76cd6b616cb89bfeca6a7b3a781594dd03.xr', __xr_tmp);
