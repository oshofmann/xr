var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Pid namespaces</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:</span>", 
"<span class=\"comment\"> *    (C) 2007 Pavel Emelyanov &lt;xemul@openvz.org&gt;, OpenVZ, SWsoft Inc.</span>", 
"<span class=\"comment\"> *    (C) 2007 Sukadev Bhattiprolu &lt;sukadev@us.ibm.com&gt;, IBM</span>", 
"<span class=\"comment\"> *     Many thanks to Oleg Nesterov for comments and help</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid\">pid</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acct\">acct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>*8)", 
"", 
"struct <a class=\"id\" href=\"#pid_cache\">pid_cache</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_ids\">nr_ids</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[16];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#pid_caches_lh\">pid_caches_lh</a>);", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#pid_caches_mutex\">pid_caches_mutex</a>);", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#pid_ns_cachep\">pid_ns_cachep</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * creates the kmem cache to allocate pids from.</span>", 
"<span class=\"comment\"> * @nr_ids: the number of numerical ids this pid will have to carry</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#create_pid_cachep\">create_pid_cachep</a>(int <a class=\"id\" href=\"#nr_ids\">nr_ids</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_cache\">pid_cache</a> *<a class=\"id\" href=\"#pcache\">pcache</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pid_caches_mutex\">pid_caches_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#pcache\">pcache</a>, &amp;<a class=\"id\" href=\"#pid_caches_lh\">pid_caches_lh</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pcache\">pcache</a>-><a class=\"id\" href=\"#nr_ids\">nr_ids</a> == <a class=\"id\" href=\"#nr_ids\">nr_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcache\">pcache</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#pid_cache\">pid_cache</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcache\">pcache</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_alloc\">err_alloc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#pcache\">pcache</a>-><a class=\"id\" href=\"#name\">name</a>, sizeof(<a class=\"id\" href=\"#pcache\">pcache</a>-><a class=\"id\" href=\"#name\">name</a>), \"pid_%d\", <a class=\"id\" href=\"#nr_ids\">nr_ids</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(<a class=\"id\" href=\"#pcache\">pcache</a>-><a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#pid\">pid</a>) + (<a class=\"id\" href=\"#nr_ids\">nr_ids</a> - 1) * sizeof(struct <a class=\"id\" href=\"#upid\">upid</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0, <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cachep\">cachep</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_cachep\">err_cachep</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcache\">pcache</a>-><a class=\"id\" href=\"#nr_ids\">nr_ids</a> = <a class=\"id\" href=\"#nr_ids\">nr_ids</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcache\">pcache</a>-><a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#cachep\">cachep</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#pcache\">pcache</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#pid_caches_lh\">pid_caches_lh</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pid_caches_mutex\">pid_caches_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pcache\">pcache</a>-><a class=\"id\" href=\"#cachep\">cachep</a>;", 
"", 
"<a class=\"id\" href=\"#err_cachep\">err_cachep</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pcache\">pcache</a>);", 
"<a class=\"id\" href=\"#err_alloc\">err_alloc</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pid_caches_mutex\">pid_caches_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#create_pid_namespace\">create_pid_namespace</a>(struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#parent_pid_ns\">parent_pid_ns</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#parent_pid_ns\">parent_pid_ns</a>-><a class=\"id\" href=\"#level\">level</a> + 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#pid_ns_cachep\">pid_ns_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ns\">ns</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#pidmap\">pidmap</a>[0].<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#pidmap\">pidmap</a>[0].<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#pid_cachep\">pid_cachep</a> = <a class=\"id\" href=\"#create_pid_cachep\">create_pid_cachep</a>(<a class=\"id\" href=\"#level\">level</a> + 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#pid_cachep\">pid_cachep</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_map\">out_free_map</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kref_init\">kref_init</a>(&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#kref\">kref</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#get_pid_ns\">get_pid_ns</a>(<a class=\"id\" href=\"#parent_pid_ns\">parent_pid_ns</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(0, <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#pidmap\">pidmap</a>[0].<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#pidmap\">pidmap</a>[0].<a class=\"id\" href=\"#nr_free\">nr_free</a>, <a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a> - 1);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PIDMAP_ENTRIES\">PIDMAP_ENTRIES</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#pidmap\">pidmap</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#nr_free\">nr_free</a>, <a class=\"id\" href=\"#BITS_PER_PAGE\">BITS_PER_PAGE</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ns\">ns</a>;", 
"", 
"<a class=\"id\" href=\"#out_free_map\">out_free_map</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#pidmap\">pidmap</a>[0].<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#pid_ns_cachep\">pid_ns_cachep</a>, <a class=\"id\" href=\"#ns\">ns</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#destroy_pid_namespace\">destroy_pid_namespace</a>(struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PIDMAP_ENTRIES\">PIDMAP_ENTRIES</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#pidmap\">pidmap</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#pid_ns_cachep\">pid_ns_cachep</a>, <a class=\"id\" href=\"#ns\">ns</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#copy_pid_ns\">copy_pid_ns</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#old_ns\">old_ns</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLONE_NEWPID\">CLONE_NEWPID</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#get_pid_ns\">get_pid_ns</a>(<a class=\"id\" href=\"#old_ns\">old_ns</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#CLONE_THREAD\">CLONE_THREAD</a>|<a class=\"id\" href=\"#CLONE_PARENT\">CLONE_PARENT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#create_pid_namespace\">create_pid_namespace</a>(<a class=\"id\" href=\"#old_ns\">old_ns</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_pid_ns\">free_pid_ns</a>(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#kref\">kref</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>, *<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kref\">kref</a>, struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>, <a class=\"id\" href=\"#kref\">kref</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_pid_namespace\">destroy_pid_namespace</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_pid_ns\">put_pid_ns</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#zap_pid_ns_processes\">zap_pid_ns_processes</a>(struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#pid_ns\">pid_ns</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The last thread in the cgroup-init thread group is terminating.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find remaining pid_ts in the namespace, signal and wait for them</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to exit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note:  This signals each threads in the namespace - even those that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * <span class=\"ts\"/>  belong to the same thread group, To avoid this, we would have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * <span class=\"ts\"/>  to walk the entire tasklist looking a processes in this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * <span class=\"ts\"/>  namespace, but that could be unnecessarily expensive if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * <span class=\"ts\"/>  pid namespace has just a few processes. Or we need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * <span class=\"ts\"/>  maintain a tasklist for each pid namespace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#next_pidmap\">next_pidmap</a>(<a class=\"id\" href=\"#pid_ns\">pid_ns</a>, 1);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr\">nr</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Any nested-container's init processes won't ignore the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * SEND_SIG_NOINFO signal, see send_signal()-&gt;si_fromuser().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#pid_task\">pid_task</a>(<a class=\"id\" href=\"#find_vpid\">find_vpid</a>(<a class=\"id\" href=\"#nr\">nr</a>), <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sig_info\">send_sig_info</a>(<a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>, <a class=\"id\" href=\"#SEND_SIG_NOINFO\">SEND_SIG_NOINFO</a>, <a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#next_pidmap\">next_pidmap</a>(<a class=\"id\" href=\"#pid_ns\">pid_ns</a>, <a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_thread_flag\">clear_thread_flag</a>(<a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#sys_wait4\">sys_wait4</a>(-1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#__WALL\">__WALL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#rc\">rc</a> != -<a class=\"id\" href=\"#ECHILD\">ECHILD</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acct_exit_ns\">acct_exit_ns</a>(<a class=\"id\" href=\"#pid_ns\">pid_ns</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#pid_namespaces_init\">pid_namespaces_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_ns_cachep\">pid_ns_cachep</a> = <a class=\"id\" href=\"#KMEM_CACHE\">KMEM_CACHE</a>(<a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#__initcall\">__initcall</a>(<a class=\"id\" href=\"#pid_namespaces_init\">pid_namespaces_init</a>);", 
];
xr_frag_insert('l/8c/4adbb798b8f9d65aaf6d199c42db56e74c0416.xr', __xr_tmp);
