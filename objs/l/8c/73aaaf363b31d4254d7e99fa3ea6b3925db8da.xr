var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_COMPILER_H\">__LINUX_COMPILER_H</a>", 
"#<a class=\"id\" href=\"#error\">error</a> \"Please don't include <linux/compiler-gcc.h> directly, include <linux/compiler.h> instead.\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Common definitions for all gcc versions go here.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"<span class=\"comment\">/* Optimization barrier */</span>", 
"<span class=\"comment\">/* The \"volatile\" is due to gcc bugs */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#barrier\">barrier</a>() <a class=\"id\" href=\"#__asm__\">__asm__</a> <a class=\"id\" href=\"#__volatile__\">__volatile__</a>(\"\": : :\"memory\")", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This macro obfuscates arithmetic on a variable address so that gcc</span>", 
"<span class=\"comment\"> * shouldn't recognize the original var, and make assumptions about it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is needed because the C standard makes it undefined to do</span>", 
"<span class=\"comment\"> * pointer arithmetic on \"objects\" outside their boundaries and the</span>", 
"<span class=\"comment\"> * gcc optimizers assume this is the case. In particular they</span>", 
"<span class=\"comment\"> * assume such arithmetic does not wrap.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A miscompilation has been observed because of this on PPC.</span>", 
"<span class=\"comment\"> * To work around it we hide the relationship of the pointer and the object</span>", 
"<span class=\"comment\"> * using this macro.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Versions of the ppc64 compiler before 4.1 had a bug where use of</span>", 
"<span class=\"comment\"> * RELOC_HIDE could trash r30. The bug can be worked around by changing</span>", 
"<span class=\"comment\"> * the inline assembly constraint from =g to =r, in this particular</span>", 
"<span class=\"comment\"> * case either is valid.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RELOC_HIDE\">RELOC_HIDE</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#off\">off</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"  ({ unsigned long <a class=\"id\" href=\"#__ptr\">__ptr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"    <a class=\"id\" href=\"#__asm__\">__asm__</a> (\"\" : \"=r\"(<a class=\"id\" href=\"#__ptr\">__ptr</a>) : \"0\"(<a class=\"id\" href=\"#ptr\">ptr</a>));<span class=\"ts\"/><span class=\"ts\"/>\\", 
"    (<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#ptr\">ptr</a>)) (<a class=\"id\" href=\"#__ptr\">__ptr</a> + (<a class=\"id\" href=\"#off\">off</a>)); })", 
"", 
"<span class=\"comment\">/* &amp;a[0] degrades to a pointer: a different type from an array */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__must_be_array\">__must_be_array</a>(<a class=\"id\" href=\"#a\">a</a>) <a class=\"id\" href=\"#BUILD_BUG_ON_ZERO\">BUILD_BUG_ON_ZERO</a>(<a class=\"id\" href=\"#__same_type\">__same_type</a>((<a class=\"id\" href=\"#a\">a</a>), &amp;(<a class=\"id\" href=\"#a\">a</a>)[0]))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Force always-inline if the user requests it so via the .config,</span>", 
"<span class=\"comment\"> * or if gcc is too old:</span>", 
"<span class=\"comment\"> */</span>", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING\">CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING</a>) || \\", 
"    !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_OPTIMIZE_INLINING\">CONFIG_OPTIMIZE_INLINING</a>) || (<a class=\"id\" href=\"#__GNUC__\">__GNUC__</a> &lt; 4)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#inline\">inline</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inline\">inline</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#always_inline\">always_inline</a>))", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__inline__\">__inline__</a><span class=\"ts\"/><a class=\"id\" href=\"#__inline__\">__inline__</a><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#always_inline\">always_inline</a>))", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__inline\">__inline</a><span class=\"ts\"/><a class=\"id\" href=\"#__inline\">__inline</a><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#always_inline\">always_inline</a>))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__deprecated\">__deprecated</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#deprecated\">deprecated</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__packed\">__packed</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#packed\">packed</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__weak\">__weak</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * it doesn't make sense on ARM (currently the only user of __naked) to trace</span>", 
"<span class=\"comment\"> * naked functions because then mcount is called without stack and frame pointer</span>", 
"<span class=\"comment\"> * being set up and there is no chance to restore the lr register to the value</span>", 
"<span class=\"comment\"> * before mcount was called.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The asm() bodies of naked functions often depend on standard calling conventions,</span>", 
"<span class=\"comment\"> * therefore they must be noinline and noclone.  GCC 4.[56] currently fail to enforce</span>", 
"<span class=\"comment\"> * this, so we must do so ourselves.  See GCC PR44290.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__naked\">__naked</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#naked\">naked</a>)) <a class=\"id\" href=\"#noinline\">noinline</a> <a class=\"id\" href=\"#__noclone\">__noclone</a> <a class=\"id\" href=\"#notrace\">notrace</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__noreturn\">__noreturn</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#noreturn\">noreturn</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * From the GCC manual:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Many functions have no effects except the return value and their</span>", 
"<span class=\"comment\"> * return value depends only on the parameters and/or global</span>", 
"<span class=\"comment\"> * variables.  Such a function can be subject to common subexpression</span>", 
"<span class=\"comment\"> * elimination and loop optimization just as an arithmetic operator</span>", 
"<span class=\"comment\"> * would be.</span>", 
"<span class=\"comment\"> * [...]</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__pure\">__pure</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#pure\">pure</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__aligned\">__aligned</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#aligned\">aligned</a>(<a class=\"id\" href=\"#x\">x</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__printf\">__printf</a>(<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#format\">format</a>(<a class=\"id\" href=\"#printf\">printf</a>,<a class=\"id\" href=\"#a\">a</a>,<a class=\"id\" href=\"#b\">b</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a>  <a class=\"id\" href=\"#noinline\">noinline</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#noinline\">noinline</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__attribute_const__\">__attribute_const__</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#__const__\">__const__</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__maybe_unused\">__maybe_unused</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#unused\">unused</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__always_unused\">__always_unused</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#unused\">unused</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__gcc_header\">__gcc_header</a>(<a class=\"id\" href=\"#x\">x</a>) #<a class=\"id\" href=\"#x\">x</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_gcc_header\">_gcc_header</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#__gcc_header\">__gcc_header</a>(<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>-<a class=\"id\" href=\"#gcc\">gcc</a>##<a class=\"id\" href=\"#x\">x</a>.<a class=\"id\" href=\"#h\">h</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#gcc_header\">gcc_header</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#_gcc_header\">_gcc_header</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#include\">include</a> <a class=\"id\" href=\"#gcc_header\">gcc_header</a>(<a class=\"id\" href=\"#__GNUC__\">__GNUC__</a>)", 
"", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__noclone\">__noclone</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__noclone\">__noclone</a><span class=\"ts\"/><span class=\"comment\">/* not needed */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/8c/73aaaf363b31d4254d7e99fa3ea6b3925db8da.xr', __xr_tmp);
