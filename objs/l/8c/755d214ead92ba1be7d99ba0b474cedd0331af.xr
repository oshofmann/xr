var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * generic net pointers</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__NET_GENERIC_H__\">__NET_GENERIC_H__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__NET_GENERIC_H__\">__NET_GENERIC_H__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic net pointers are to be used by modules to put some private</span>", 
"<span class=\"comment\"> * stuff on the struct net without explicit struct net modification</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The rules are simple:</span>", 
"<span class=\"comment\"> * 1. set pernet_operations-&gt;id.  After register_pernet_device you</span>", 
"<span class=\"comment\"> *    will have the id of your private pointer.</span>", 
"<span class=\"comment\"> * 2. set pernet_operations-&gt;size to have the code allocate and free</span>", 
"<span class=\"comment\"> *    a private structure pointed to from struct net.</span>", 
"<span class=\"comment\"> * 3. do not change this pointer while the net is alive;</span>", 
"<span class=\"comment\"> * 4. do not try to have any private reference on the net_generic object.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After accomplishing all of the above, the private pointer can be</span>", 
"<span class=\"comment\"> * accessed with the net_generic() call.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#net_generic\">net_generic</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu\">rcu</a>;", 
"", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>[0];", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#net_generic\">net_generic</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_generic\">net_generic</a> *<a class=\"id\" href=\"#ng\">ng</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ng\">ng</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#gen\">gen</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#id\">id</a> == 0 || <a class=\"id\" href=\"#id\">id</a> &gt; <a class=\"id\" href=\"#ng\">ng</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#ng\">ng</a>-><a class=\"id\" href=\"#ptr\">ptr</a>[<a class=\"id\" href=\"#id\">id</a> - 1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/8c/755d214ead92ba1be7d99ba0b474cedd0331af.xr', __xr_tmp);
