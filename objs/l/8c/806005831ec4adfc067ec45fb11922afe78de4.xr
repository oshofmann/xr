var __xr_tmp = [
"<span class=\"comment\"> * use the stuctures below. Actually, this struct is also more</span>", 
"<span class=\"comment\"> * efficient, but that's another story...</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Describe how a standard IOCTL looks like.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#iw_ioctl_description\">iw_ioctl_description</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a><span class=\"ts\"/><a class=\"id\" href=\"#header_type\">header_type</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* NULL, iw_point or other */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a><span class=\"ts\"/><a class=\"id\" href=\"#token_type\">token_type</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Future */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><a class=\"id\" href=\"#token_size\">token_size</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Granularity of payload */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><a class=\"id\" href=\"#min_tokens\">min_tokens</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Min acceptable token number */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><a class=\"id\" href=\"#max_tokens\">max_tokens</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Max acceptable token number */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Special handling of the request */</span>", 
"};", 
"", 
"<span class=\"comment\">/* Need to think of short header translation table. Later. */</span>", 
"", 
"<span class=\"comment\">/* --------------------- ENHANCED SPY SUPPORT --------------------- */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In the old days, the driver was handling spy support all by itself.</span>", 
"<span class=\"comment\"> * Now, the driver can delegate this task to Wireless Extensions.</span>", 
"<span class=\"comment\"> * It needs to include this struct in its private part and use the</span>", 
"<span class=\"comment\"> * standard spy iw_handler.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Instance specific spy data, i.e. addresses spied and quality for them.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#iw_spy_data\">iw_spy_data</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* --- Standard spy support --- */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spy_number\">spy_number</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u_char\">u_char</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spy_address\">spy_address</a>[<a class=\"id\" href=\"#IW_MAX_SPY\">IW_MAX_SPY</a>][<a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iw_quality\">iw_quality</a><span class=\"ts\"/><a class=\"id\" href=\"#spy_stat\">spy_stat</a>[<a class=\"id\" href=\"#IW_MAX_SPY\">IW_MAX_SPY</a>];", 
"<span class=\"ts\"/><span class=\"comment\">/* --- Enhanced spy support (event) */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iw_quality\">iw_quality</a><span class=\"ts\"/><a class=\"id\" href=\"#spy_thr_low\">spy_thr_low</a>;<span class=\"ts\"/><span class=\"comment\">/* Low threshold */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iw_quality\">iw_quality</a><span class=\"ts\"/><a class=\"id\" href=\"#spy_thr_high\">spy_thr_high</a>;<span class=\"ts\"/><span class=\"comment\">/* High threshold */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u_char\">u_char</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spy_thr_under\">spy_thr_under</a>[<a class=\"id\" href=\"#IW_MAX_SPY\">IW_MAX_SPY</a>];", 
"};", 
"", 
"<span class=\"comment\">/* --------------------- DEVICE WIRELESS DATA --------------------- */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is all the wireless data specific to a device instance that</span>", 
"<span class=\"comment\"> * is managed by the core of Wireless Extensions or the 802.11 layer.</span>", 
"<span class=\"comment\"> * We only keep pointer to those structures, so that a driver is free</span>", 
"<span class=\"comment\"> * to share them between instances.</span>", 
"<span class=\"comment\"> * This structure should be initialised before registering the device.</span>", 
"<span class=\"comment\"> * Access to this data follow the same rules as any other struct net_device</span>", 
"<span class=\"comment\"> * data (i.e. valid as long as struct net_device exist, same locking rules).</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/* Forward declaration */</span>", 
"struct <a class=\"id\" href=\"#libipw_device\">libipw_device</a>;", 
"<span class=\"comment\">/* The struct */</span>", 
"struct <a class=\"id\" href=\"#iw_public_data\">iw_public_data</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Driver enhanced spy support */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iw_spy_data\">iw_spy_data</a> *<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spy_data\">spy_data</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Legacy structure managed by the ipw2x00-specific IEEE 802.11 layer */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#libipw_device\">libipw_device</a> *<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#libipw\">libipw</a>;", 
"};", 
"", 
"<span class=\"comment\">/**************************** PROTOTYPES ****************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions part of the Wireless Extensions (defined in net/core/wireless.c).</span>", 
"<span class=\"comment\"> * Those may be called only within the kernel.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* First : function strictly used inside the kernel */</span>", 
"", 
"<span class=\"comment\">/* Handle /proc/net/wireless, called in net/code/dev.c */</span>", 
"extern int <a class=\"id\" href=\"#dev_get_wireless_info\">dev_get_wireless_info</a>(char * <a class=\"id\" href=\"#buffer\">buffer</a>, char **<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#off_t\">off_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"comment\">/* Second : functions that may be called by driver modules */</span>", 
"", 
"<span class=\"comment\">/* Send a single event to user space */</span>", 
"extern void <a class=\"id\" href=\"#wireless_send_event\">wireless_send_event</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>union <a class=\"id\" href=\"#iwreq_data\">iwreq_data</a> *<span class=\"ts\"/><a class=\"id\" href=\"#wrqu\">wrqu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#extra\">extra</a>);", 
"", 
"<span class=\"comment\">/* We may need a function to send a stream of events to user space.</span>", 
"<span class=\"comment\"> * More on that later... */</span>", 
"", 
"<span class=\"comment\">/* Standard handler for SIOCSIWSPY */</span>", 
"extern int <a class=\"id\" href=\"#iw_handler_set_spy\">iw_handler_set_spy</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      union <a class=\"id\" href=\"#iwreq_data\">iwreq_data</a> *<span class=\"ts\"/><a class=\"id\" href=\"#wrqu\">wrqu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      char *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#extra\">extra</a>);", 
"<span class=\"comment\">/* Standard handler for SIOCGIWSPY */</span>", 
"extern int <a class=\"id\" href=\"#iw_handler_get_spy\">iw_handler_get_spy</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      union <a class=\"id\" href=\"#iwreq_data\">iwreq_data</a> *<span class=\"ts\"/><a class=\"id\" href=\"#wrqu\">wrqu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      char *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#extra\">extra</a>);", 
"<span class=\"comment\">/* Standard handler for SIOCSIWTHRSPY */</span>", 
"extern int <a class=\"id\" href=\"#iw_handler_set_thrspy\">iw_handler_set_thrspy</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> union <a class=\"id\" href=\"#iwreq_data\">iwreq_data</a> *<span class=\"ts\"/><a class=\"id\" href=\"#wrqu\">wrqu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#extra\">extra</a>);", 
"<span class=\"comment\">/* Standard handler for SIOCGIWTHRSPY */</span>", 
"extern int <a class=\"id\" href=\"#iw_handler_get_thrspy\">iw_handler_get_thrspy</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> union <a class=\"id\" href=\"#iwreq_data\">iwreq_data</a> *<span class=\"ts\"/><a class=\"id\" href=\"#wrqu\">wrqu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#extra\">extra</a>);", 
"<span class=\"comment\">/* Driver call to update spy records */</span>", 
"extern void <a class=\"id\" href=\"#wireless_spy_update\">wireless_spy_update</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char *<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#iw_quality\">iw_quality</a> *<span class=\"ts\"/><a class=\"id\" href=\"#wstats\">wstats</a>);", 
"", 
"<span class=\"comment\">/************************* INLINE FUNTIONS *************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function that are so simple that it's more efficient inlining them</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#iwe_stream_lcp_len\">iwe_stream_lcp_len</a>(struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IW_REQUEST_FLAG_COMPAT\">IW_REQUEST_FLAG_COMPAT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#IW_EV_COMPAT_LCP_LEN\">IW_EV_COMPAT_LCP_LEN</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#IW_EV_LCP_LEN\">IW_EV_LCP_LEN</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#iwe_stream_point_len\">iwe_stream_point_len</a>(struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IW_REQUEST_FLAG_COMPAT\">IW_REQUEST_FLAG_COMPAT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#IW_EV_COMPAT_POINT_LEN\">IW_EV_COMPAT_POINT_LEN</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#IW_EV_POINT_LEN\">IW_EV_POINT_LEN</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#iwe_stream_event_len_adjust\">iwe_stream_event_len_adjust</a>(struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#event_len\">event_len</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IW_REQUEST_FLAG_COMPAT\">IW_REQUEST_FLAG_COMPAT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event_len\">event_len</a> -= <a class=\"id\" href=\"#IW_EV_LCP_LEN\">IW_EV_LCP_LEN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event_len\">event_len</a> += <a class=\"id\" href=\"#IW_EV_COMPAT_LCP_LEN\">IW_EV_COMPAT_LCP_LEN</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event_len\">event_len</a>;", 
"}", 
"", 
"<span class=\"comment\">/*------------------------------------------------------------------*/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wrapper to add an Wireless Event to a stream of events.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> char *", 
"<a class=\"id\" href=\"#iwe_stream_add_event\">iwe_stream_add_event</a>(struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>, char *<a class=\"id\" href=\"#stream\">stream</a>, char *<a class=\"id\" href=\"#ends\">ends</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#iw_event\">iw_event</a> *<a class=\"id\" href=\"#iwe\">iwe</a>, int <a class=\"id\" href=\"#event_len\">event_len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lcp_len\">lcp_len</a> = <a class=\"id\" href=\"#iwe_stream_lcp_len\">iwe_stream_lcp_len</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event_len\">event_len</a> = <a class=\"id\" href=\"#iwe_stream_event_len_adjust\">iwe_stream_event_len_adjust</a>(<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#event_len\">event_len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if it's possible */</span>", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#likely\">likely</a>((<a class=\"id\" href=\"#stream\">stream</a> + <a class=\"id\" href=\"#event_len\">event_len</a>) &lt; <a class=\"id\" href=\"#ends\">ends</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iwe\">iwe</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#event_len\">event_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Beware of alignement issues on 64 bits */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#stream\">stream</a>, (char *) <a class=\"id\" href=\"#iwe\">iwe</a>, <a class=\"id\" href=\"#IW_EV_LCP_PK_LEN\">IW_EV_LCP_PK_LEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#stream\">stream</a> + <a class=\"id\" href=\"#lcp_len\">lcp_len</a>, &amp;<a class=\"id\" href=\"#iwe\">iwe</a>-><a class=\"id\" href=\"#u\">u</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#event_len\">event_len</a> - <a class=\"id\" href=\"#lcp_len\">lcp_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stream\">stream</a> += <a class=\"id\" href=\"#event_len\">event_len</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#stream\">stream</a>;", 
"}", 
"", 
"<span class=\"comment\">/*------------------------------------------------------------------*/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wrapper to add an short Wireless Event containing a pointer to a</span>", 
"<span class=\"comment\"> * stream of events.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> char *", 
"<a class=\"id\" href=\"#iwe_stream_add_point\">iwe_stream_add_point</a>(struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>, char *<a class=\"id\" href=\"#stream\">stream</a>, char *<a class=\"id\" href=\"#ends\">ends</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#iw_event\">iw_event</a> *<a class=\"id\" href=\"#iwe\">iwe</a>, char *<a class=\"id\" href=\"#extra\">extra</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#event_len\">event_len</a> = <a class=\"id\" href=\"#iwe_stream_point_len\">iwe_stream_point_len</a>(<a class=\"id\" href=\"#info\">info</a>) + <a class=\"id\" href=\"#iwe\">iwe</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#point_len\">point_len</a> = <a class=\"id\" href=\"#iwe_stream_point_len\">iwe_stream_point_len</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lcp_len\">lcp_len</a>   = <a class=\"id\" href=\"#iwe_stream_lcp_len\">iwe_stream_lcp_len</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if it's possible */</span>", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#likely\">likely</a>((<a class=\"id\" href=\"#stream\">stream</a> + <a class=\"id\" href=\"#event_len\">event_len</a>) &lt; <a class=\"id\" href=\"#ends\">ends</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iwe\">iwe</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#event_len\">event_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#stream\">stream</a>, (char *) <a class=\"id\" href=\"#iwe\">iwe</a>, <a class=\"id\" href=\"#IW_EV_LCP_PK_LEN\">IW_EV_LCP_PK_LEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#stream\">stream</a> + <a class=\"id\" href=\"#lcp_len\">lcp_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       ((char *) &amp;<a class=\"id\" href=\"#iwe\">iwe</a>-><a class=\"id\" href=\"#u\">u</a>) + <a class=\"id\" href=\"#IW_EV_POINT_OFF\">IW_EV_POINT_OFF</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#IW_EV_POINT_PK_LEN\">IW_EV_POINT_PK_LEN</a> - <a class=\"id\" href=\"#IW_EV_LCP_PK_LEN\">IW_EV_LCP_PK_LEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#stream\">stream</a> + <a class=\"id\" href=\"#point_len\">point_len</a>, <a class=\"id\" href=\"#extra\">extra</a>, <a class=\"id\" href=\"#iwe\">iwe</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stream\">stream</a> += <a class=\"id\" href=\"#event_len\">event_len</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#stream\">stream</a>;", 
"}", 
"", 
"<span class=\"comment\">/*------------------------------------------------------------------*/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wrapper to add a value to a Wireless Event in a stream of events.</span>", 
"<span class=\"comment\"> * Be careful, this one is tricky to use properly :</span>", 
"<span class=\"comment\"> * At the first run, you need to have (value = event + IW_EV_LCP_LEN).</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> char *", 
"<a class=\"id\" href=\"#iwe_stream_add_value\">iwe_stream_add_value</a>(struct <a class=\"id\" href=\"#iw_request_info\">iw_request_info</a> *<a class=\"id\" href=\"#info\">info</a>, char *<a class=\"id\" href=\"#event\">event</a>, char *<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     char *<a class=\"id\" href=\"#ends\">ends</a>, struct <a class=\"id\" href=\"#iw_event\">iw_event</a> *<a class=\"id\" href=\"#iwe\">iwe</a>, int <a class=\"id\" href=\"#event_len\">event_len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lcp_len\">lcp_len</a> = <a class=\"id\" href=\"#iwe_stream_lcp_len\">iwe_stream_lcp_len</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't duplicate LCP */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event_len\">event_len</a> -= <a class=\"id\" href=\"#IW_EV_LCP_LEN\">IW_EV_LCP_LEN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if it's possible */</span>", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#likely\">likely</a>((<a class=\"id\" href=\"#value\">value</a> + <a class=\"id\" href=\"#event_len\">event_len</a>) &lt; <a class=\"id\" href=\"#ends\">ends</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Add new value */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#iwe\">iwe</a>-><a class=\"id\" href=\"#u\">u</a>, <a class=\"id\" href=\"#event_len\">event_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> += <a class=\"id\" href=\"#event_len\">event_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Patch LCP */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iwe\">iwe</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#value\">value</a> - <a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#event\">event</a>, (char *) <a class=\"id\" href=\"#iwe\">iwe</a>, <a class=\"id\" href=\"#lcp_len\">lcp_len</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#value\">value</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _IW_HANDLER_H */</span>", 
];
xr_frag_insert('l/8c/806005831ec4adfc067ec45fb11922afe78de4.xr', __xr_tmp);
