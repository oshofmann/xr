var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Implement CPU time clocks for the POSIX clock interface.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#posix\">posix</a>-<a class=\"id\" href=\"#timers\">timers</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#math64\">math64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called after updating RLIMIT_CPU to run cpu timer and update</span>", 
"<span class=\"comment\"> * tsk-&gt;signal-&gt;cputime_expires expiration cache if necessary. Needs</span>", 
"<span class=\"comment\"> * siglock protection since other code may update expiration cache as</span>", 
"<span class=\"comment\"> * well.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#update_rlimit_cpu\">update_rlimit_cpu</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, unsigned long <a class=\"id\" href=\"#rlim_new\">rlim_new</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#cputime\">cputime</a> = <a class=\"id\" href=\"#secs_to_cputime\">secs_to_cputime</a>(<a class=\"id\" href=\"#rlim_new\">rlim_new</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_process_cpu_timer\">set_process_cpu_timer</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#CPUCLOCK_PROF\">CPUCLOCK_PROF</a>, &amp;<a class=\"id\" href=\"#cputime\">cputime</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#check_clock\">check_clock</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#CPUCLOCK_PID\">CPUCLOCK_PID</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_WHICH\">CPUCLOCK_WHICH</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>) >= <a class=\"id\" href=\"#CPUCLOCK_MAX\">CPUCLOCK_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a> || !(<a class=\"id\" href=\"#CPUCLOCK_PERTHREAD\">CPUCLOCK_PERTHREAD</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#same_thread_group\">same_thread_group</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#current\">current</a>) : <a class=\"id\" href=\"#thread_group_leader\">thread_group_leader</a>(<a class=\"id\" href=\"#p\">p</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a>", 
"<a class=\"id\" href=\"#timespec_to_sample\">timespec_to_sample</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, const struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>.<a class=\"id\" href=\"#sched\">sched</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* high half always zero when .cpu used */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_WHICH\">CPUCLOCK_WHICH</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>) == <a class=\"id\" href=\"#CPUCLOCK_SCHED\">CPUCLOCK_SCHED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>.<a class=\"id\" href=\"#sched\">sched</a> = (unsigned long long)<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> * <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>.<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#timespec_to_cputime\">timespec_to_cputime</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sample_to_timespec\">sample_to_timespec</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_WHICH\">CPUCLOCK_WHICH</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>) == <a class=\"id\" href=\"#CPUCLOCK_SCHED\">CPUCLOCK_SCHED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#ns_to_timespec\">ns_to_timespec</a>(<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#sched\">sched</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_to_timespec\">cputime_to_timespec</a>(<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpu_time_before\">cpu_time_before</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> <a class=\"id\" href=\"#now\">now</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> <a class=\"id\" href=\"#then\">then</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_WHICH\">CPUCLOCK_WHICH</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>) == <a class=\"id\" href=\"#CPUCLOCK_SCHED\">CPUCLOCK_SCHED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#sched\">sched</a> &lt; <a class=\"id\" href=\"#then\">then</a>.<a class=\"id\" href=\"#sched\">sched</a>;", 
"<span class=\"ts\"/>}  else {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cputime_lt\">cputime_lt</a>(<a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#then\">then</a>.<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpu_time_add\">cpu_time_add</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> *<a class=\"id\" href=\"#acc\">acc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>        union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_WHICH\">CPUCLOCK_WHICH</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>) == <a class=\"id\" href=\"#CPUCLOCK_SCHED\">CPUCLOCK_SCHED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acc\">acc</a>-><a class=\"id\" href=\"#sched\">sched</a> += <a class=\"id\" href=\"#val\">val</a>.<a class=\"id\" href=\"#sched\">sched</a>;", 
"<span class=\"ts\"/>}  else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acc\">acc</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#acc\">acc</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#val\">val</a>.<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> <a class=\"id\" href=\"#cpu_time_sub\">cpu_time_sub</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> <a class=\"id\" href=\"#a\">a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> <a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_WHICH\">CPUCLOCK_WHICH</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>) == <a class=\"id\" href=\"#CPUCLOCK_SCHED\">CPUCLOCK_SCHED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#sched\">sched</a> -= <a class=\"id\" href=\"#b\">b</a>.<a class=\"id\" href=\"#sched\">sched</a>;", 
"<span class=\"ts\"/>}  else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cputime_sub\">cputime_sub</a>(<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#b\">b</a>.<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#a\">a</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Divide and limit the result to res &gt;= 1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is necessary to prevent signal delivery starvation, when the result of</span>", 
"<span class=\"comment\"> * the division would be rounded down to 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#cputime_div_non_zero\">cputime_div_non_zero</a>(<a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#time\">time</a>, unsigned long <a class=\"id\" href=\"#div\">div</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#cputime_div\">cputime_div</a>(<a class=\"id\" href=\"#time\">time</a>, <a class=\"id\" href=\"#div\">div</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max_t\">max_t</a>(<a class=\"id\" href=\"#cputime_t\">cputime_t</a>, <a class=\"id\" href=\"#res\">res</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Update expiry time from increment, and increase overrun count,</span>", 
"<span class=\"comment\"> * given the current clock sample.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#bump_cpu_timer\">bump_cpu_timer</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> <a class=\"id\" href=\"#now\">now</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#incr\">incr</a>.<a class=\"id\" href=\"#sched\">sched</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_WHICH\">CPUCLOCK_WHICH</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>) == <a class=\"id\" href=\"#CPUCLOCK_SCHED\">CPUCLOCK_SCHED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#incr\">incr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#sched\">sched</a> &lt; <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#incr\">incr</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#incr\">incr</a>.<a class=\"id\" href=\"#sched\">sched</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#sched\">sched</a> + <a class=\"id\" href=\"#incr\">incr</a> - <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't use (incr*2 &lt; delta), incr*2 might overflow. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#incr\">incr</a> &lt; <a class=\"id\" href=\"#delta\">delta</a> - <a class=\"id\" href=\"#incr\">incr</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#incr\">incr</a> = <a class=\"id\" href=\"#incr\">incr</a> << 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#incr\">incr</a> >>= 1, <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &lt; <a class=\"id\" href=\"#incr\">incr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a> += <a class=\"id\" href=\"#incr\">incr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_overrun\">it_overrun</a> += 1 << <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> -= <a class=\"id\" href=\"#incr\">incr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#incr\">incr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cputime_lt\">cputime_lt</a>(<a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#incr\">incr</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#incr\">incr</a>.<a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#cputime_sub\">cputime_sub</a>(<a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#incr\">incr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't use (incr*2 &lt; delta), incr*2 might overflow. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#cputime_lt\">cputime_lt</a>(<a class=\"id\" href=\"#incr\">incr</a>, <a class=\"id\" href=\"#cputime_sub\">cputime_sub</a>(<a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#incr\">incr</a>)); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#incr\">incr</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#incr\">incr</a>, <a class=\"id\" href=\"#incr\">incr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#incr\">incr</a> = <a class=\"id\" href=\"#cputime_halve\">cputime_halve</a>(<a class=\"id\" href=\"#incr\">incr</a>), <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cputime_lt\">cputime_lt</a>(<a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#incr\">incr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#incr\">incr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_overrun\">it_overrun</a> += 1 << <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#cputime_sub\">cputime_sub</a>(<a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#incr\">incr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#prof_ticks\">prof_ticks</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#stime\">stime</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#virt_ticks\">virt_ticks</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utime\">utime</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#posix_cpu_clock_getres\">posix_cpu_clock_getres</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#check_clock\">check_clock</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = ((<a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a> + <a class=\"id\" href=\"#HZ\">HZ</a> - 1) / <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_WHICH\">CPUCLOCK_WHICH</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>) == <a class=\"id\" href=\"#CPUCLOCK_SCHED\">CPUCLOCK_SCHED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If sched_clock is using a cycle counter, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * don't have any idea of its true resolution</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * exported, but it is much more than 1s/HZ.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#posix_cpu_clock_set\">posix_cpu_clock_set</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, const struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * You can never reset a CPU clock, but we check for other errors</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the call before failing with EPERM.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#check_clock\">check_clock</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sample a per-thread clock for the given task.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cpu_clock_sample\">cpu_clock_sample</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> *<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#CPUCLOCK_WHICH\">CPUCLOCK_WHICH</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>)) {", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPUCLOCK_PROF\">CPUCLOCK_PROF</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#prof_ticks\">prof_ticks</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPUCLOCK_VIRT\">CPUCLOCK_VIRT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#virt_ticks\">virt_ticks</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPUCLOCK_SCHED\">CPUCLOCK_SCHED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#sched\">sched</a> = <a class=\"id\" href=\"#task_sched_runtime\">task_sched_runtime</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#thread_group_cputime\">thread_group_cputime</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> *<a class=\"id\" href=\"#times\">times</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#times\">times</a>-><a class=\"id\" href=\"#utime\">utime</a> = <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#utime\">utime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#times\">times</a>-><a class=\"id\" href=\"#stime\">stime</a> = <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#stime\">stime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#times\">times</a>-><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> = <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#sum_sched_runtime\">sum_sched_runtime</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* make sure we can trust tsk-&gt;thread_group list */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#pid_alive\">pid_alive</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#times\">times</a>-><a class=\"id\" href=\"#utime\">utime</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#times\">times</a>-><a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#utime\">utime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#times\">times</a>-><a class=\"id\" href=\"#stime\">stime</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#times\">times</a>-><a class=\"id\" href=\"#stime\">stime</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#stime\">stime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#times\">times</a>-><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> += <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#update_gt_cputime\">update_gt_cputime</a>(struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cputime_gt\">cputime_gt</a>(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#utime\">utime</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#utime\">utime</a> = <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#utime\">utime</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cputime_gt\">cputime_gt</a>(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#stime\">stime</a>, <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#stime\">stime</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#stime\">stime</a> = <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#stime\">stime</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> &gt; <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> = <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#thread_group_cputimer\">thread_group_cputimer</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> *<a class=\"id\" href=\"#times\">times</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_group_cputimer\">thread_group_cputimer</a> *<a class=\"id\" href=\"#cputimer\">cputimer</a> = &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#cputimer\">cputimer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> <a class=\"id\" href=\"#sum\">sum</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cputimer\">cputimer</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cputimer\">cputimer</a>-><a class=\"id\" href=\"#running\">running</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputimer\">cputimer</a>-><a class=\"id\" href=\"#running\">running</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The POSIX timer interface allows for absolute time expiry</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * values through the TIMER_ABSTIME flag, therefore we have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to synchronize the timer to the clock every time we start</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thread_group_cputime\">thread_group_cputime</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, &amp;<a class=\"id\" href=\"#sum\">sum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_gt_cputime\">update_gt_cputime</a>(&amp;<a class=\"id\" href=\"#cputimer\">cputimer</a>-><a class=\"id\" href=\"#cputime\">cputime</a>, &amp;<a class=\"id\" href=\"#sum\">sum</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#times\">times</a> = <a class=\"id\" href=\"#cputimer\">cputimer</a>-><a class=\"id\" href=\"#cputime\">cputime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cputimer\">cputimer</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sample a process (thread group) clock for the given group_leader task.</span>", 
"<span class=\"comment\"> * Must be called with tasklist_lock held for reading.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cpu_clock_sample_group\">cpu_clock_sample_group</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> *<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> <a class=\"id\" href=\"#cputime\">cputime</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#CPUCLOCK_WHICH\">CPUCLOCK_WHICH</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>)) {", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPUCLOCK_PROF\">CPUCLOCK_PROF</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thread_group_cputime\">thread_group_cputime</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#cputime\">cputime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#stime\">stime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPUCLOCK_VIRT\">CPUCLOCK_VIRT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thread_group_cputime\">thread_group_cputime</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#cputime\">cputime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#utime\">utime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPUCLOCK_SCHED\">CPUCLOCK_SCHED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#sched\">sched</a> = <a class=\"id\" href=\"#thread_group_sched_runtime\">thread_group_sched_runtime</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"int <a class=\"id\" href=\"#posix_cpu_clock_get\">posix_cpu_clock_get</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#CPUCLOCK_PID\">CPUCLOCK_PID</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Special case constant value for our own clocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We don't have to do any lookup to find ourselves.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_PERTHREAD\">CPUCLOCK_PERTHREAD</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Sampling just ourselves we can do with no locking.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#cpu_clock_sample\">cpu_clock_sample</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#current\">current</a>, &amp;<a class=\"id\" href=\"#rtn\">rtn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#cpu_clock_sample_group\">cpu_clock_sample_group</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#current\">current</a>, &amp;<a class=\"id\" href=\"#rtn\">rtn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Find the given PID, and validate that the caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * should be able to see it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_PERTHREAD\">CPUCLOCK_PERTHREAD</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#same_thread_group\">same_thread_group</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#cpu_clock_sample\">cpu_clock_sample</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#rtn\">rtn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#thread_group_leader\">thread_group_leader</a>(<a class=\"id\" href=\"#p\">p</a>) && <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cpu_clock_sample_group\">cpu_clock_sample_group</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>           <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#rtn\">rtn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sample_to_timespec\">sample_to_timespec</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>, <a class=\"id\" href=\"#rtn\">rtn</a>, <a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Validate the clockid_t for a new CPU-clock timer, and initialize the timer.</span>", 
"<span class=\"comment\"> * This is called from sys_timer_create() and do_cpu_nanosleep() with the</span>", 
"<span class=\"comment\"> * new timer already all-zeros initialized.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#posix_cpu_timer_create\">posix_cpu_timer_create</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#new_timer\">new_timer</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#CPUCLOCK_PID\">CPUCLOCK_PID</a>(<a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_WHICH\">CPUCLOCK_WHICH</a>(<a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>) >= <a class=\"id\" href=\"#CPUCLOCK_MAX\">CPUCLOCK_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_PERTHREAD\">CPUCLOCK_PERTHREAD</a>(<a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> && !<a class=\"id\" href=\"#same_thread_group\">same_thread_group</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> && !<a class=\"id\" href=\"#thread_group_leader\">thread_group_leader</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_timer\">new_timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clean up a CPU-clock timer that is about to be destroyed.</span>", 
"<span class=\"comment\"> * This is called from timer deletion with the timer already locked.</span>", 
"<span class=\"comment\"> * If we return TIMER_RETRY, it's necessary to release the timer's lock</span>", 
"<span class=\"comment\"> * and try again.  (This happens when the timer is in the middle of firing.)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#posix_cpu_timer_del\">posix_cpu_timer_del</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We raced with the reaping of the task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The deletion should have cleared us off the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#entry\">entry</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#firing\">firing</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#TIMER_RETRY\">TIMER_RETRY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clean out CPU timers still ticking when a thread exited.  The task</span>", 
"<span class=\"comment\"> * pointer is cleared, and the expiry time is replaced with the residual</span>", 
"<span class=\"comment\"> * time for later timer_gettime calls to return.</span>", 
"<span class=\"comment\"> * This must be called with the siglock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cleanup_timers\">cleanup_timers</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#stime\">stime</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long long <a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_timer_list\">cpu_timer_list</a> *<a class=\"id\" href=\"#timer\">timer</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#ptime\">ptime</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#stime\">stime</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cputime_lt\">cputime_lt</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ptime\">ptime</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cputime_sub\">cputime_sub</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ptime\">ptime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cputime_lt\">cputime_lt</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#utime\">utime</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cputime_sub\">cputime_sub</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#utime\">utime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>++<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a> &lt; <a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a> -= <a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are both called with the siglock held, when the current thread</span>", 
"<span class=\"comment\"> * is being reaped.  When the final (leader) thread in the group is reaped,</span>", 
"<span class=\"comment\"> * posix_cpu_timers_exit_group will be called after posix_cpu_timers_exit.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#posix_cpu_timers_exit\">posix_cpu_timers_exit</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cleanup_timers\">cleanup_timers</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cpu_timers\">cpu_timers</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#stime\">stime</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>);", 
"", 
"}", 
"void <a class=\"id\" href=\"#posix_cpu_timers_exit_group\">posix_cpu_timers_exit_group</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *const <a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cleanup_timers\">cleanup_timers</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#cpu_timers\">cpu_timers</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#utime\">utime</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#stime\">stime</a>, <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#stime\">stime</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> + <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#sum_sched_runtime\">sum_sched_runtime</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clear_dead_task\">clear_dead_task</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> <a class=\"id\" href=\"#now\">now</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * That's all for this thread or process.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We leave our residual in expires to be reported.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#cpu_time_sub\">cpu_time_sub</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#now\">now</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#expires_gt\">expires_gt</a>(<a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#cputime_t\">cputime_t</a> <a class=\"id\" href=\"#new_exp\">new_exp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cputime_eq\">cputime_eq</a>(<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#cputime_zero\">cputime_zero</a>) ||", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#cputime_gt\">cputime_gt</a>(<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#new_exp\">new_exp</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Insert the timer on the appropriate list before any timers that</span>", 
"<span class=\"comment\"> * expire later.  This must be called with the tasklist_lock held</span>", 
"<span class=\"comment\"> * for reading, interrupts disabled and p-&gt;sighand-&gt;siglock taken.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#arm_timer\">arm_timer</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#listpos\">listpos</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> *<a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_timer_list\">cpu_timer_list</a> *const <a class=\"id\" href=\"#nt\">nt</a> = &amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_timer_list\">cpu_timer_list</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_PERTHREAD\">CPUCLOCK_PERTHREAD</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpu_timers\">cpu_timers</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a> = &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#cpu_timers\">cpu_timers</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a> = &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> += <a class=\"id\" href=\"#CPUCLOCK_WHICH\">CPUCLOCK_WHICH</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#listpos\">listpos</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_time_before\">cpu_time_before</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, <a class=\"id\" href=\"#nt\">nt</a>-><a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#expires\">expires</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#listpos\">listpos</a> = &amp;<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#nt\">nt</a>-><a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#listpos\">listpos</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#listpos\">listpos</a> == <a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> *<a class=\"id\" href=\"#exp\">exp</a> = &amp;<a class=\"id\" href=\"#nt\">nt</a>-><a class=\"id\" href=\"#expires\">expires</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are the new earliest-expiring POSIX 1.b timer, hence</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * need to update expiration cache. Take into account that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for process timers we share expiration cache with itimers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and RLIMIT_CPU and for thread timers with RLIMIT_RTTIME.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#CPUCLOCK_WHICH\">CPUCLOCK_WHICH</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#CPUCLOCK_PROF\">CPUCLOCK_PROF</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#expires_gt\">expires_gt</a>(<a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>-><a class=\"id\" href=\"#prof_exp\">prof_exp</a>, <a class=\"id\" href=\"#exp\">exp</a>-><a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>-><a class=\"id\" href=\"#prof_exp\">prof_exp</a> = <a class=\"id\" href=\"#exp\">exp</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#CPUCLOCK_VIRT\">CPUCLOCK_VIRT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#expires_gt\">expires_gt</a>(<a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>-><a class=\"id\" href=\"#virt_exp\">virt_exp</a>, <a class=\"id\" href=\"#exp\">exp</a>-><a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>-><a class=\"id\" href=\"#virt_exp\">virt_exp</a> = <a class=\"id\" href=\"#exp\">exp</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#CPUCLOCK_SCHED\">CPUCLOCK_SCHED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>-><a class=\"id\" href=\"#sched_exp\">sched_exp</a> == 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>-><a class=\"id\" href=\"#sched_exp\">sched_exp</a> &gt; <a class=\"id\" href=\"#exp\">exp</a>-><a class=\"id\" href=\"#sched\">sched</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>-><a class=\"id\" href=\"#sched_exp\">sched_exp</a> = <a class=\"id\" href=\"#exp\">exp</a>-><a class=\"id\" href=\"#sched\">sched</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The timer is locked, fire it and arrange for its reload.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cpu_timer_fire\">cpu_timer_fire</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_sigev_notify\">it_sigev_notify</a> &amp; ~<a class=\"id\" href=\"#SIGEV_THREAD_ID\">SIGEV_THREAD_ID</a>) == <a class=\"id\" href=\"#SIGEV_NONE\">SIGEV_NONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * User don't want any signal.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a> = 0;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#sigq\">sigq</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This a special case for clock_nanosleep,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not a normal timer from sys_timer_create.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_process\">it_process</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a> = 0;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#incr\">incr</a>.<a class=\"id\" href=\"#sched\">sched</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * One-shot timer.  Clear it as soon as it's fired.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#posix_timer_event\">posix_timer_event</a>(<a class=\"id\" href=\"#timer\">timer</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#sched\">sched</a> = 0;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#posix_timer_event\">posix_timer_event</a>(<a class=\"id\" href=\"#timer\">timer</a>, ++<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_requeue_pending\">it_requeue_pending</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The signal did not get queued because the signal</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * was ignored, so we won't get any callback to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reload the timer.  But we need to keep it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ticking in case the signal is deliverable next time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#posix_cpu_timer_schedule\">posix_cpu_timer_schedule</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sample a process (thread group) timer for the given group_leader task.</span>", 
"<span class=\"comment\"> * Must be called with tasklist_lock held for reading.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cpu_timer_sample_group\">cpu_timer_sample_group</a>(const <a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#which_clock\">which_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> *<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> <a class=\"id\" href=\"#cputime\">cputime</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thread_group_cputimer\">thread_group_cputimer</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#cputime\">cputime</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#CPUCLOCK_WHICH\">CPUCLOCK_WHICH</a>(<a class=\"id\" href=\"#which_clock\">which_clock</a>)) {", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPUCLOCK_PROF\">CPUCLOCK_PROF</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#stime\">stime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPUCLOCK_VIRT\">CPUCLOCK_VIRT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#utime\">utime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPUCLOCK_SCHED\">CPUCLOCK_SCHED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#sched\">sched</a> = <a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> + <a class=\"id\" href=\"#task_delta_exec\">task_delta_exec</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Guts of sys_timer_settime for CPU timers.</span>", 
"<span class=\"comment\"> * This is called with the timer locked and interrupts disabled.</span>", 
"<span class=\"comment\"> * If we return TIMER_RETRY, it's necessary to release the timer's lock</span>", 
"<span class=\"comment\"> * and try again.  (This happens when the timer is in the middle of firing.)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#posix_cpu_timer_set\">posix_cpu_timer_set</a>(struct <a class=\"id\" href=\"#k_itimer\">k_itimer</a> *<a class=\"id\" href=\"#timer\">timer</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#itimerspec\">itimerspec</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#itimerspec\">itimerspec</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#cpu_time_count\">cpu_time_count</a> <a class=\"id\" href=\"#old_expires\">old_expires</a>, <a class=\"id\" href=\"#new_expires\">new_expires</a>, <a class=\"id\" href=\"#old_incr\">old_incr</a>, <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Timer refers to a dead task's clock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_expires\">new_expires</a> = <a class=\"id\" href=\"#timespec_to_sample\">timespec_to_sample</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, &amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#it_value\">it_value</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need the tasklist_lock to protect against reaping that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * clears p-&gt;sighand.  If p has just been reaped, we can no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * longer get any information about it at all.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disarm any old timer after extracting its expiry time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_incr\">old_incr</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#incr\">incr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_expires\">old_expires</a> = <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#firing\">firing</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#firing\">firing</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#TIMER_RETRY\">TIMER_RETRY</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to sample the current value to convert the new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * value from to relative and absolute, and to convert the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * old value from absolute to relative.  To set a process</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * timer, we need a sample to balance the thread expiry</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * times (in arm_timer).  With an absolute time, we must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check if it's already passed.  In short, we need a sample.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CPUCLOCK_PERTHREAD\">CPUCLOCK_PERTHREAD</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_clock_sample\">cpu_clock_sample</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_timer_sample_group\">cpu_timer_sample_group</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old_expires\">old_expires</a>.<a class=\"id\" href=\"#sched\">sched</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#it_value\">it_value</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#it_value\">it_value</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Update the timer in case it has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * overrun already.  If it has,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we'll report it as having overrun</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and with the next reloaded timer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * already ticking, though we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * swallowing that pending</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * notification here to install the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * new setting.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bump_cpu_timer\">bump_cpu_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_time_before\">cpu_time_before</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, <a class=\"id\" href=\"#val\">val</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_expires\">old_expires</a> = <a class=\"id\" href=\"#cpu_time_sub\">cpu_time_sub</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sample_to_timespec\">sample_to_timespec</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#old_expires\">old_expires</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#it_value\">it_value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#it_value\">it_value</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#it_value\">it_value</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are colliding with the timer actually firing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Punt after filling in the timer's old value, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * disable this firing since we are already reporting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it as an overrun (thanks to bump_cpu_timer above).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_expires\">new_expires</a>.<a class=\"id\" href=\"#sched\">sched</a> != 0 && !(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TIMER_ABSTIME\">TIMER_ABSTIME</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_time_add\">cpu_time_add</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, &amp;<a class=\"id\" href=\"#new_expires\">new_expires</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Install the new expiry time (or zero).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For a timer with no notification action, we don't actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * arm the timer (we'll just fake it for timer_gettime).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#new_expires\">new_expires</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_expires\">new_expires</a>.<a class=\"id\" href=\"#sched\">sched</a> != 0 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cpu_time_before\">cpu_time_before</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#new_expires\">new_expires</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arm_timer\">arm_timer</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Install the new reload setting, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set up the signal and overrun bookkeeping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it\">it</a>.<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#incr\">incr</a> = <a class=\"id\" href=\"#timespec_to_sample\">timespec_to_sample</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#it_interval\">it_interval</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This acts as a modification timestamp for the timer,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so any automatic reload attempt will punt on seeing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that we have reset the timer manually.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_requeue_pending\">it_requeue_pending</a> = (<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_requeue_pending\">it_requeue_pending</a> + 2) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/>~<a class=\"id\" href=\"#REQUEUE_PENDING\">REQUEUE_PENDING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_overrun_last\">it_overrun_last</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_overrun\">it_overrun</a> = -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_expires\">new_expires</a>.<a class=\"id\" href=\"#sched\">sched</a> != 0 &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#cpu_time_before\">cpu_time_before</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#new_expires\">new_expires</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The designated time already passed, so we notify</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * immediately, even if the thread never runs to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * accumulate more time on this clock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_timer_fire\">cpu_timer_fire</a>(<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sample_to_timespec\">sample_to_timespec</a>(<a class=\"id\" href=\"#timer\">timer</a>-><a class=\"id\" href=\"#it_clock\">it_clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#old_incr\">old_incr</a>, &amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#it_interval\">it_interval</a>);", 
"<span class=\"ts\"/>}", 
];
xr_frag_insert('l/8c/919ba8fdad194ecb64a4cef43e6685803ee116.xr', __xr_tmp);
