var __xr_tmp = [
"<span class=\"comment\">/* SCTP kernel reference Implementation</span>", 
"<span class=\"comment\"> * (C) Copyright IBM Corp. 2001, 2004</span>", 
"<span class=\"comment\"> * Copyright (c) 1999-2000 Cisco, Inc.</span>", 
"<span class=\"comment\"> * Copyright (c) 1999-2001 Motorola, Inc.</span>", 
"<span class=\"comment\"> * Copyright (c) 2001 Intel Corp.</span>", 
"<span class=\"comment\"> * Copyright (c) 2001 Nokia, Inc.</span>", 
"<span class=\"comment\"> * Copyright (c) 2001 La Monte H.P. Yarroll</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is part of the SCTP kernel reference Implementation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Various protocol defined structures.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This SCTP implementation is free software;</span>", 
"<span class=\"comment\"> * you can redistribute it and/or modify it under the terms of</span>", 
"<span class=\"comment\"> * the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2, or (at your option)</span>", 
"<span class=\"comment\"> * any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This SCTP implementation is distributed in the hope that it</span>", 
"<span class=\"comment\"> * will be useful, but WITHOUT ANY WARRANTY; without even the implied</span>", 
"<span class=\"comment\"> *                 ************************</span>", 
"<span class=\"comment\"> * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>", 
"<span class=\"comment\"> * See the GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with GNU CC; see the file COPYING.  If not, write to</span>", 
"<span class=\"comment\"> * the Free Software Foundation, 59 Temple Place - Suite 330,</span>", 
"<span class=\"comment\"> * Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Please send any bug reports or fixes you make to the</span>", 
"<span class=\"comment\"> * email address(es):</span>", 
"<span class=\"comment\"> *    lksctp developers &lt;lksctp-developerst@lists.sourceforge.net&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Or submit a bug report through the following website:</span>", 
"<span class=\"comment\"> *    http://www.sf.net/projects/lksctp</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Written or modified by:</span>", 
"<span class=\"comment\"> *    La Monte H.P. Yarroll &lt;piggy@acm.org&gt;</span>", 
"<span class=\"comment\"> *    Karl Knutson &lt;karl@athena.chicago.il.us&gt;</span>", 
"<span class=\"comment\"> *    Jon Grimm &lt;jgrimm@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> *    Xingang Guo &lt;xingang.guo@intel.com&gt;</span>", 
"<span class=\"comment\"> *    randall@sctp.chicago.il.us</span>", 
"<span class=\"comment\"> *    kmorneau@cisco.com</span>", 
"<span class=\"comment\"> *    qxie1@email.mot.com</span>", 
"<span class=\"comment\"> *    Sridhar Samudrala &lt;sri@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> *    Kevin Gao &lt;kevin.gao@intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Any bugs reported given to us we will try to fix... any fixes shared will</span>", 
"<span class=\"comment\"> * be incorporated into the next SCTP release.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_SCTP_H__\">__LINUX_SCTP_H__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_SCTP_H__\">__LINUX_SCTP_H__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We need in_addr.  */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in6\">in6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We need in6_addr.  */</span>", 
"", 
"", 
"<span class=\"comment\">/* Section 3.1.  SCTP Common Header Format */</span>", 
"typedef struct <a class=\"id\" href=\"#sctphdr\">sctphdr</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#source\">source</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dest\">dest</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#vtag\">vtag</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> <a class=\"id\" href=\"#checksum\">checksum</a>;", 
"} <a class=\"id\" href=\"#__packed\">__packed</a> <a class=\"id\" href=\"#sctp_sctphdr_t\">sctp_sctphdr_t</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sctphdr\">sctphdr</a> *<a class=\"id\" href=\"#sctp_hdr\">sctp_hdr</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#sctphdr\">sctphdr</a> *)<a class=\"id\" href=\"#skb_transport_header\">skb_transport_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Section 3.2.  Chunk Field Descriptions. */</span>", 
"typedef struct <a class=\"id\" href=\"#sctp_chunkhdr\">sctp_chunkhdr</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#length\">length</a>;", 
"} <a class=\"id\" href=\"#__packed\">__packed</a> <a class=\"id\" href=\"#sctp_chunkhdr_t\">sctp_chunkhdr_t</a>;", 
"", 
"", 
"<span class=\"comment\">/* Section 3.2.  Chunk Type Values.</span>", 
"<span class=\"comment\"> * [Chunk Type] identifies the type of information contained in the Chunk</span>", 
"<span class=\"comment\"> * Value field. It takes a value from 0 to 254. The value of 255 is</span>", 
"<span class=\"comment\"> * reserved for future use as an extension field.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCTP_CID_DATA\">SCTP_CID_DATA</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 0,", 
"        <a class=\"id\" href=\"#SCTP_CID_INIT\">SCTP_CID_INIT</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1,", 
"        <a class=\"id\" href=\"#SCTP_CID_INIT_ACK\">SCTP_CID_INIT_ACK</a><span class=\"ts\"/><span class=\"ts\"/>= 2,", 
"        <a class=\"id\" href=\"#SCTP_CID_SACK\">SCTP_CID_SACK</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 3,", 
"        <a class=\"id\" href=\"#SCTP_CID_HEARTBEAT\">SCTP_CID_HEARTBEAT</a><span class=\"ts\"/><span class=\"ts\"/>= 4,", 
"        <a class=\"id\" href=\"#SCTP_CID_HEARTBEAT_ACK\">SCTP_CID_HEARTBEAT_ACK</a><span class=\"ts\"/><span class=\"ts\"/>= 5,", 
"        <a class=\"id\" href=\"#SCTP_CID_ABORT\">SCTP_CID_ABORT</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 6,", 
"        <a class=\"id\" href=\"#SCTP_CID_SHUTDOWN\">SCTP_CID_SHUTDOWN</a><span class=\"ts\"/><span class=\"ts\"/>= 7,", 
"        <a class=\"id\" href=\"#SCTP_CID_SHUTDOWN_ACK\">SCTP_CID_SHUTDOWN_ACK</a><span class=\"ts\"/><span class=\"ts\"/>= 8,", 
"        <a class=\"id\" href=\"#SCTP_CID_ERROR\">SCTP_CID_ERROR</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 9,", 
"        <a class=\"id\" href=\"#SCTP_CID_COOKIE_ECHO\">SCTP_CID_COOKIE_ECHO</a><span class=\"ts\"/><span class=\"ts\"/>= 10,", 
"        <a class=\"id\" href=\"#SCTP_CID_COOKIE_ACK\">SCTP_CID_COOKIE_ACK</a><span class=\"ts\"/>        = 11,", 
"        <a class=\"id\" href=\"#SCTP_CID_ECN_ECNE\">SCTP_CID_ECN_ECNE</a><span class=\"ts\"/><span class=\"ts\"/>= 12,", 
"        <a class=\"id\" href=\"#SCTP_CID_ECN_CWR\">SCTP_CID_ECN_CWR</a><span class=\"ts\"/><span class=\"ts\"/>= 13,", 
"        <a class=\"id\" href=\"#SCTP_CID_SHUTDOWN_COMPLETE\">SCTP_CID_SHUTDOWN_COMPLETE</a><span class=\"ts\"/>= 14,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* AUTH Extension Section 4.1 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCTP_CID_AUTH\">SCTP_CID_AUTH</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 0x0F,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* PR-SCTP Sec 3.2 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCTP_CID_FWD_TSN\">SCTP_CID_FWD_TSN</a><span class=\"ts\"/><span class=\"ts\"/>= 0xC0,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use hex, as defined in ADDIP sec. 3.1 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCTP_CID_ASCONF\">SCTP_CID_ASCONF</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 0xC1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCTP_CID_ASCONF_ACK\">SCTP_CID_ASCONF_ACK</a><span class=\"ts\"/><span class=\"ts\"/>= 0x80,", 
"} <a class=\"id\" href=\"#sctp_cid_t\">sctp_cid_t</a>; <span class=\"comment\">/* enum */</span>", 
"", 
"", 
"<span class=\"comment\">/* Section 3.2</span>", 
"<span class=\"comment\"> *  Chunk Types are encoded such that the highest-order two bits specify</span>", 
"<span class=\"comment\"> *  the action that must be taken if the processing endpoint does not</span>", 
"<span class=\"comment\"> *  recognize the Chunk Type.</span>", 
"<span class=\"comment\"> */</span>", 
"typedef enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCTP_CID_ACTION_DISCARD\">SCTP_CID_ACTION_DISCARD</a>     = 0x00,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCTP_CID_ACTION_DISCARD_ERR\">SCTP_CID_ACTION_DISCARD_ERR</a> = 0x40,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCTP_CID_ACTION_SKIP\">SCTP_CID_ACTION_SKIP</a>        = 0x80,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCTP_CID_ACTION_SKIP_ERR\">SCTP_CID_ACTION_SKIP_ERR</a>    = 0xc0,", 
"} <a class=\"id\" href=\"#sctp_cid_action_t\">sctp_cid_action_t</a>;", 
"", 
"enum { <a class=\"id\" href=\"#SCTP_CID_ACTION_MASK\">SCTP_CID_ACTION_MASK</a> = 0xc0, };", 
"", 
"<span class=\"comment\">/* This flag is used in Chunk Flags for ABORT and SHUTDOWN COMPLETE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 3.3.7 Abort Association (ABORT) (6):</span>", 
"<span class=\"comment\"> *    The T bit is set to 0 if the sender had a TCB that it destroyed.</span>", 
"<span class=\"comment\"> *    If the sender did not have a TCB it should set this bit to 1.</span>", 
"<span class=\"comment\"> */</span>", 
"enum { <a class=\"id\" href=\"#SCTP_CHUNK_FLAG_T\">SCTP_CHUNK_FLAG_T</a> = 0x01 };", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Set the T bit</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      0                   1                   2                   3</span>", 
"<span class=\"comment\"> *      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span>", 
"<span class=\"comment\"> *     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span>", 
"<span class=\"comment\"> *     |   Type = 14   |Reserved     |T|      Length = 4               |</span>", 
"<span class=\"comment\"> *     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Chunk Flags: 8 bits</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   Reserved:  7 bits</span>", 
"<span class=\"comment\"> *     Set to 0 on transmit and ignored on receipt.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   T bit:  1 bit</span>", 
"<span class=\"comment\"> *     The T bit is set to 0 if the sender had a TCB that it destroyed. If</span>", 
"<span class=\"comment\"> *     the sender did NOT have a TCB it should set this bit to 1.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: Special rules apply to this chunk for verification, please</span>", 
"<span class=\"comment\"> * see Section 8.5.1 for details.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sctp_test_T_bit\">sctp_test_T_bit</a>(<a class=\"id\" href=\"#c\">c</a>)    ((<a class=\"id\" href=\"#c\">c</a>)-><a class=\"id\" href=\"#chunk_hdr\">chunk_hdr</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SCTP_CHUNK_FLAG_T\">SCTP_CHUNK_FLAG_T</a>)", 
"", 
"<span class=\"comment\">/* RFC 2960</span>", 
"<span class=\"comment\"> * Section 3.2.1 Optional/Variable-length Parmaeter Format.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"typedef struct <a class=\"id\" href=\"#sctp_paramhdr\">sctp_paramhdr</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#length\">length</a>;", 
"} <a class=\"id\" href=\"#__packed\">__packed</a> <a class=\"id\" href=\"#sctp_paramhdr_t\">sctp_paramhdr_t</a>;", 
"", 
"typedef enum {", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* RFC 2960 Section 3.3.5 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCTP_PARAM_HEARTBEAT_INFO\">SCTP_PARAM_HEARTBEAT_INFO</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu_to_be16\">cpu_to_be16</a>(1),", 
];
xr_frag_insert('l/8c/dc2dccbe380219617b53ced87dc93a26c40514.xr', __xr_tmp);
