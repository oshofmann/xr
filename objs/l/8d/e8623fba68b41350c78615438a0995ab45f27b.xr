var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Floating proportions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2007 Red Hat, Inc., Peter Zijlstra &lt;pzijlstr@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The floating proportion is a time derivative with an exponentially decaying</span>", 
"<span class=\"comment\"> * history:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   p_{j} = \\Sum_{i=0} (dx_{j}/dt_{-i}) / 2^(1+i)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Where j is an element from {prop_local}, x_{j} is j's number of events,</span>", 
"<span class=\"comment\"> * and i the time period over which the differential is taken. So d/dt_{-i} is</span>", 
"<span class=\"comment\"> * the differential over the i-th last period.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The decaying history gives smooth transitions. The time differential carries</span>", 
"<span class=\"comment\"> * the notion of speed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The denominator is 2^(1+i) because we want the series to be normalised, ie.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   \\Sum_{i=0} 1/2^(1+i) = 1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Further more, if we measure time (t) in the same events as x; so that:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   t = \\Sum_{j} x_{j}</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * we get that:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   \\Sum_{j} p_{j} = 1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Writing this in an iterative fashion we get (dropping the 'd's):</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   if (++x_{j}, ++t &gt; period)</span>", 
"<span class=\"comment\"> *     t /= 2;</span>", 
"<span class=\"comment\"> *     for_each (j)</span>", 
"<span class=\"comment\"> *       x_{j} /= 2;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * so that:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   p_{j} = x_{j} / t;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We optimize away the '/= 2' for the global time delta by noting that:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   if (++t &gt; period) t /= 2:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Can be approximated by:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   period/2 + (++t % period/2)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * [ Furthermore, when we choose period to be 2^n it can be written in terms of</span>", 
"<span class=\"comment\"> *   binary operations and wraparound artefacts disappear. ]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also note that this yields a natural counter of the elapsed periods:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   c = t / (period/2)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * [ Its monotonic increasing property can be applied to mitigate the wrap-</span>", 
"<span class=\"comment\"> *   around issue. ]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This allows us to do away with the loop over all prop_locals on each period</span>", 
"<span class=\"comment\"> * expiration. By remembering the period count under which it was last accessed</span>", 
"<span class=\"comment\"> * as c_{j}, we can obtain the number of 'missed' cycles from:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   c - c_{j}</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We can then lazily catch up to the global period count every time we are</span>", 
"<span class=\"comment\"> * going to use x_{j}, by doing:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   x_{j} /= 2^(c - c_{j}), c_{j} = c</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proportions\">proportions</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"int <a class=\"id\" href=\"#prop_descriptor_init\">prop_descriptor_init</a>(struct <a class=\"id\" href=\"#prop_descriptor\">prop_descriptor</a> *<a class=\"id\" href=\"#pd\">pd</a>, int <a class=\"id\" href=\"#shift\">shift</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shift\">shift</a> &gt; <a class=\"id\" href=\"#PROP_MAX_SHIFT\">PROP_MAX_SHIFT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#PROP_MAX_SHIFT\">PROP_MAX_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#pg\">pg</a>[0].<a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#percpu_counter_init\">percpu_counter_init</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#pg\">pg</a>[0].<a class=\"id\" href=\"#events\">events</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#percpu_counter_init\">percpu_counter_init</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#pg\">pg</a>[1].<a class=\"id\" href=\"#events\">events</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_destroy\">percpu_counter_destroy</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#pg\">pg</a>[0].<a class=\"id\" href=\"#events\">events</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We have two copies, and flip between them to make it seem like an atomic</span>", 
"<span class=\"comment\"> * update. The update is not really atomic wrt the events counter, but</span>", 
"<span class=\"comment\"> * it is internally consistent with the bit layout depending on shift.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We copy the events count, move the bits around and flip the index.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#prop_change_shift\">prop_change_shift</a>(struct <a class=\"id\" href=\"#prop_descriptor\">prop_descriptor</a> *<a class=\"id\" href=\"#pd\">pd</a>, int <a class=\"id\" href=\"#shift\">shift</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#events\">events</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shift\">shift</a> &gt; <a class=\"id\" href=\"#PROP_MAX_SHIFT\">PROP_MAX_SHIFT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#PROP_MAX_SHIFT\">PROP_MAX_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#index\">index</a> ^ 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#pg\">pg</a>[<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#shift\">shift</a> - <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#pg\">pg</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#shift\">shift</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#events\">events</a> = <a class=\"id\" href=\"#percpu_counter_sum\">percpu_counter_sum</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#pg\">pg</a>[<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#events\">events</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events\">events</a> <<= -<a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#events\">events</a> >>= <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_set\">percpu_counter_set</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#pg\">pg</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#events\">events</a>, <a class=\"id\" href=\"#events\">events</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ensure the new pg is fully written before the switch</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * wrap the access to the data in an rcu_read_lock() section;</span>", 
"<span class=\"comment\"> * this is used to track the active references.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#prop_global\">prop_global</a> *<a class=\"id\" href=\"#prop_get_global\">prop_get_global</a>(struct <a class=\"id\" href=\"#prop_descriptor\">prop_descriptor</a> *<a class=\"id\" href=\"#pd\">pd</a>)", 
"<a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#RCU\">RCU</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * match the wmb from vcd_flip()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#pd\">pd</a>-><a class=\"id\" href=\"#pg\">pg</a>[<a class=\"id\" href=\"#index\">index</a>];", 
"}", 
"", 
"static void <a class=\"id\" href=\"#prop_put_global\">prop_put_global</a>(struct <a class=\"id\" href=\"#prop_descriptor\">prop_descriptor</a> *<a class=\"id\" href=\"#pd\">pd</a>, struct <a class=\"id\" href=\"#prop_global\">prop_global</a> *<a class=\"id\" href=\"#pg\">pg</a>)", 
"<a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#RCU\">RCU</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#prop_adjust_shift\">prop_adjust_shift</a>(int *<a class=\"id\" href=\"#pl_shift\">pl_shift</a>, unsigned long *<a class=\"id\" href=\"#pl_period\">pl_period</a>, int <a class=\"id\" href=\"#new_shift\">new_shift</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a> = *<a class=\"id\" href=\"#pl_shift\">pl_shift</a> - <a class=\"id\" href=\"#new_shift\">new_shift</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pl_period\">pl_period</a> <<= -<a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pl_period\">pl_period</a> >>= <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pl_shift\">pl_shift</a> = <a class=\"id\" href=\"#new_shift\">new_shift</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * PERCPU</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PROP_BATCH\">PROP_BATCH</a> (8*(1+<a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)))", 
"", 
"int <a class=\"id\" href=\"#prop_local_init_percpu\">prop_local_init_percpu</a>(struct <a class=\"id\" href=\"#prop_local_percpu\">prop_local_percpu</a> *<a class=\"id\" href=\"#pl\">pl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#shift\">shift</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#period\">period</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#percpu_counter_init\">percpu_counter_init</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#events\">events</a>, 0);", 
"}", 
"", 
"void <a class=\"id\" href=\"#prop_local_destroy_percpu\">prop_local_destroy_percpu</a>(struct <a class=\"id\" href=\"#prop_local_percpu\">prop_local_percpu</a> *<a class=\"id\" href=\"#pl\">pl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_destroy\">percpu_counter_destroy</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#events\">events</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Catch up with missed period expirations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   until (c_{j} == c)</span>", 
"<span class=\"comment\"> *     x_{j} -= x_{j}/2;</span>", 
"<span class=\"comment\"> *     c_{j}++;</span>", 
"<span class=\"comment\"> */</span>", 
"static", 
"void <a class=\"id\" href=\"#prop_norm_percpu\">prop_norm_percpu</a>(struct <a class=\"id\" href=\"#prop_global\">prop_global</a> *<a class=\"id\" href=\"#pg\">pg</a>, struct <a class=\"id\" href=\"#prop_local_percpu\">prop_local_percpu</a> *<a class=\"id\" href=\"#pl\">pl</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#period\">period</a> = 1UL << (<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#shift\">shift</a> - 1);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#period_mask\">period_mask</a> = ~(<a class=\"id\" href=\"#period\">period</a> - 1);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#global_period\">global_period</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#global_period\">global_period</a> = <a class=\"id\" href=\"#percpu_counter_read\">percpu_counter_read</a>(&amp;<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#events\">events</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#global_period\">global_period</a> &= <a class=\"id\" href=\"#period_mask\">period_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fast path - check if the local and global period count still match</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * outside of the lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#period\">period</a> == <a class=\"id\" href=\"#global_period\">global_period</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_adjust_shift\">prop_adjust_shift</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#shift\">shift</a>, &amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#period\">period</a>, <a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#shift\">shift</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For each missed period, we half the local counter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * basically:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   pl-&gt;events &gt;&gt; (global_period - pl-&gt;period);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = (<a class=\"id\" href=\"#global_period\">global_period</a> - <a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#period\">period</a>) >> (<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#shift\">shift</a> - 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#period\">period</a> &lt; <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#percpu_counter_read\">percpu_counter_read</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#events\">events</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &lt; (<a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> * <a class=\"id\" href=\"#PROP_BATCH\">PROP_BATCH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#percpu_counter_sum\">percpu_counter_sum</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#events\">events</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__percpu_counter_add\">__percpu_counter_add</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#events\">events</a>, -<a class=\"id\" href=\"#val\">val</a> + (<a class=\"id\" href=\"#val\">val</a> >> <a class=\"id\" href=\"#period\">period</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PROP_BATCH\">PROP_BATCH</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_set\">percpu_counter_set</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#events\">events</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#global_period\">global_period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *   ++x_{j}, ++t</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__prop_inc_percpu\">__prop_inc_percpu</a>(struct <a class=\"id\" href=\"#prop_descriptor\">prop_descriptor</a> *<a class=\"id\" href=\"#pd\">pd</a>, struct <a class=\"id\" href=\"#prop_local_percpu\">prop_local_percpu</a> *<a class=\"id\" href=\"#pl\">pl</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prop_global\">prop_global</a> *<a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#prop_get_global\">prop_get_global</a>(<a class=\"id\" href=\"#pd\">pd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_norm_percpu\">prop_norm_percpu</a>(<a class=\"id\" href=\"#pg\">pg</a>, <a class=\"id\" href=\"#pl\">pl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__percpu_counter_add\">__percpu_counter_add</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#events\">events</a>, 1, <a class=\"id\" href=\"#PROP_BATCH\">PROP_BATCH</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_add\">percpu_counter_add</a>(&amp;<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#events\">events</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_put_global\">prop_put_global</a>(<a class=\"id\" href=\"#pd\">pd</a>, <a class=\"id\" href=\"#pg\">pg</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * identical to __prop_inc_percpu, except that it limits this pl's fraction to</span>", 
"<span class=\"comment\"> * @frac/PROP_FRAC_BASE by ignoring events when this limit has been exceeded.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__prop_inc_percpu_max\">__prop_inc_percpu_max</a>(struct <a class=\"id\" href=\"#prop_descriptor\">prop_descriptor</a> *<a class=\"id\" href=\"#pd\">pd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#prop_local_percpu\">prop_local_percpu</a> *<a class=\"id\" href=\"#pl\">pl</a>, long <a class=\"id\" href=\"#frac\">frac</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prop_global\">prop_global</a> *<a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#prop_get_global\">prop_get_global</a>(<a class=\"id\" href=\"#pd\">pd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_norm_percpu\">prop_norm_percpu</a>(<a class=\"id\" href=\"#pg\">pg</a>, <a class=\"id\" href=\"#pl\">pl</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#frac\">frac</a> != <a class=\"id\" href=\"#PROP_FRAC_BASE\">PROP_FRAC_BASE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#period_2\">period_2</a> = 1UL << (<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#shift\">shift</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#counter_mask\">counter_mask</a> = <a class=\"id\" href=\"#period_2\">period_2</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#global_count\">global_count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#numerator\">numerator</a>, <a class=\"id\" href=\"#denominator\">denominator</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numerator\">numerator</a> = <a class=\"id\" href=\"#percpu_counter_read_positive\">percpu_counter_read_positive</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#events\">events</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_count\">global_count</a> = <a class=\"id\" href=\"#percpu_counter_read\">percpu_counter_read</a>(&amp;<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#events\">events</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#denominator\">denominator</a> = <a class=\"id\" href=\"#period_2\">period_2</a> + (<a class=\"id\" href=\"#global_count\">global_count</a> &amp; <a class=\"id\" href=\"#counter_mask\">counter_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#numerator\">numerator</a> &gt; ((<a class=\"id\" href=\"#denominator\">denominator</a> * <a class=\"id\" href=\"#frac\">frac</a>) >> <a class=\"id\" href=\"#PROP_FRAC_SHIFT\">PROP_FRAC_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put\">out_put</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_add\">percpu_counter_add</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#events\">events</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_add\">percpu_counter_add</a>(&amp;<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#events\">events</a>, 1);", 
"", 
"<a class=\"id\" href=\"#out_put\">out_put</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_put_global\">prop_put_global</a>(<a class=\"id\" href=\"#pd\">pd</a>, <a class=\"id\" href=\"#pg\">pg</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Obtain a fraction of this proportion</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   p_{j} = x_{j} / (period/2 + t % period/2)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#prop_fraction_percpu\">prop_fraction_percpu</a>(struct <a class=\"id\" href=\"#prop_descriptor\">prop_descriptor</a> *<a class=\"id\" href=\"#pd\">pd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#prop_local_percpu\">prop_local_percpu</a> *<a class=\"id\" href=\"#pl\">pl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>long *<a class=\"id\" href=\"#numerator\">numerator</a>, long *<a class=\"id\" href=\"#denominator\">denominator</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prop_global\">prop_global</a> *<a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#prop_get_global\">prop_get_global</a>(<a class=\"id\" href=\"#pd\">pd</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#period_2\">period_2</a> = 1UL << (<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#shift\">shift</a> - 1);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#counter_mask\">counter_mask</a> = <a class=\"id\" href=\"#period_2\">period_2</a> - 1;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#global_count\">global_count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_norm_percpu\">prop_norm_percpu</a>(<a class=\"id\" href=\"#pg\">pg</a>, <a class=\"id\" href=\"#pl\">pl</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#numerator\">numerator</a> = <a class=\"id\" href=\"#percpu_counter_read_positive\">percpu_counter_read_positive</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#events\">events</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#global_count\">global_count</a> = <a class=\"id\" href=\"#percpu_counter_read\">percpu_counter_read</a>(&amp;<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#events\">events</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#denominator\">denominator</a> = <a class=\"id\" href=\"#period_2\">period_2</a> + (<a class=\"id\" href=\"#global_count\">global_count</a> &amp; <a class=\"id\" href=\"#counter_mask\">counter_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_put_global\">prop_put_global</a>(<a class=\"id\" href=\"#pd\">pd</a>, <a class=\"id\" href=\"#pg\">pg</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * SINGLE</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#prop_local_init_single\">prop_local_init_single</a>(struct <a class=\"id\" href=\"#prop_local_single\">prop_local_single</a> *<a class=\"id\" href=\"#pl\">pl</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#shift\">shift</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#period\">period</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#events\">events</a> = 0;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#prop_local_destroy_single\">prop_local_destroy_single</a>(struct <a class=\"id\" href=\"#prop_local_single\">prop_local_single</a> *<a class=\"id\" href=\"#pl\">pl</a>)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Catch up with missed period expirations.</span>", 
"<span class=\"comment\"> */</span>", 
"static", 
"void <a class=\"id\" href=\"#prop_norm_single\">prop_norm_single</a>(struct <a class=\"id\" href=\"#prop_global\">prop_global</a> *<a class=\"id\" href=\"#pg\">pg</a>, struct <a class=\"id\" href=\"#prop_local_single\">prop_local_single</a> *<a class=\"id\" href=\"#pl\">pl</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#period\">period</a> = 1UL << (<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#shift\">shift</a> - 1);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#period_mask\">period_mask</a> = ~(<a class=\"id\" href=\"#period\">period</a> - 1);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#global_period\">global_period</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#global_period\">global_period</a> = <a class=\"id\" href=\"#percpu_counter_read\">percpu_counter_read</a>(&amp;<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#events\">events</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#global_period\">global_period</a> &= <a class=\"id\" href=\"#period_mask\">period_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fast path - check if the local and global period count still match</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * outside of the lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#period\">period</a> == <a class=\"id\" href=\"#global_period\">global_period</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_adjust_shift\">prop_adjust_shift</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#shift\">shift</a>, &amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#period\">period</a>, <a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#shift\">shift</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For each missed period, we half the local counter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = (<a class=\"id\" href=\"#global_period\">global_period</a> - <a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#period\">period</a>) >> (<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#shift\">shift</a> - 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#period\">period</a> &lt; <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#events\">events</a> >>= <a class=\"id\" href=\"#period\">period</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#events\">events</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#global_period\">global_period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *   ++x_{j}, ++t</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__prop_inc_single\">__prop_inc_single</a>(struct <a class=\"id\" href=\"#prop_descriptor\">prop_descriptor</a> *<a class=\"id\" href=\"#pd\">pd</a>, struct <a class=\"id\" href=\"#prop_local_single\">prop_local_single</a> *<a class=\"id\" href=\"#pl\">pl</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prop_global\">prop_global</a> *<a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#prop_get_global\">prop_get_global</a>(<a class=\"id\" href=\"#pd\">pd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_norm_single\">prop_norm_single</a>(<a class=\"id\" href=\"#pg\">pg</a>, <a class=\"id\" href=\"#pl\">pl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#events\">events</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_add\">percpu_counter_add</a>(&amp;<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#events\">events</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_put_global\">prop_put_global</a>(<a class=\"id\" href=\"#pd\">pd</a>, <a class=\"id\" href=\"#pg\">pg</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Obtain a fraction of this proportion</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   p_{j} = x_{j} / (period/2 + t % period/2)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#prop_fraction_single\">prop_fraction_single</a>(struct <a class=\"id\" href=\"#prop_descriptor\">prop_descriptor</a> *<a class=\"id\" href=\"#pd\">pd</a>,", 
"<span class=\"ts\"/>       <span class=\"ts\"/>struct <a class=\"id\" href=\"#prop_local_single\">prop_local_single</a> *<a class=\"id\" href=\"#pl\">pl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>long *<a class=\"id\" href=\"#numerator\">numerator</a>, long *<a class=\"id\" href=\"#denominator\">denominator</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prop_global\">prop_global</a> *<a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#prop_get_global\">prop_get_global</a>(<a class=\"id\" href=\"#pd\">pd</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#period_2\">period_2</a> = 1UL << (<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#shift\">shift</a> - 1);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#counter_mask\">counter_mask</a> = <a class=\"id\" href=\"#period_2\">period_2</a> - 1;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#global_count\">global_count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_norm_single\">prop_norm_single</a>(<a class=\"id\" href=\"#pg\">pg</a>, <a class=\"id\" href=\"#pl\">pl</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#numerator\">numerator</a> = <a class=\"id\" href=\"#pl\">pl</a>-><a class=\"id\" href=\"#events\">events</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#global_count\">global_count</a> = <a class=\"id\" href=\"#percpu_counter_read\">percpu_counter_read</a>(&amp;<a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#events\">events</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#denominator\">denominator</a> = <a class=\"id\" href=\"#period_2\">period_2</a> + (<a class=\"id\" href=\"#global_count\">global_count</a> &amp; <a class=\"id\" href=\"#counter_mask\">counter_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_put_global\">prop_put_global</a>(<a class=\"id\" href=\"#pd\">pd</a>, <a class=\"id\" href=\"#pg\">pg</a>);", 
"}", 
];
xr_frag_insert('l/8d/e8623fba68b41350c78615438a0995ab45f27b.xr', __xr_tmp);
