var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> * vcpu.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * VCPU initialisation, query, and hotplug.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span>", 
"<span class=\"comment\"> * of this software and associated documentation files (the \"Software\"), to</span>", 
"<span class=\"comment\"> * deal in the Software without restriction, including without limitation the</span>", 
"<span class=\"comment\"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span>", 
"<span class=\"comment\"> * sell copies of the Software, and to permit persons to whom the Software is</span>", 
"<span class=\"comment\"> * furnished to do so, subject to the following conditions:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The above copyright notice and this permission notice shall be included in</span>", 
"<span class=\"comment\"> * all copies or substantial portions of the Software.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>", 
"<span class=\"comment\"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>", 
"<span class=\"comment\"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>", 
"<span class=\"comment\"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>", 
"<span class=\"comment\"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING</span>", 
"<span class=\"comment\"> * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER</span>", 
"<span class=\"comment\"> * DEALINGS IN THE SOFTWARE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2005, Keir Fraser &lt;keir@xensource.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__XEN_PUBLIC_VCPU_H__\">__XEN_PUBLIC_VCPU_H__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__XEN_PUBLIC_VCPU_H__\">__XEN_PUBLIC_VCPU_H__</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prototype for this hypercall is:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>int vcpu_op(int cmd, int vcpuid, void *extra_args)</span>", 
"<span class=\"comment\"> * @cmd<span class=\"ts\"/><span class=\"ts\"/>   == VCPUOP_??? (VCPU operation).</span>", 
"<span class=\"comment\"> * @vcpuid<span class=\"ts\"/>   == VCPU to operate on.</span>", 
"<span class=\"comment\"> * @extra_args == Operation-specific extra arguments (NULL if none).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialise a VCPU. Each VCPU can be initialised only once. A</span>", 
"<span class=\"comment\"> * newly-initialised VCPU will not run until it is brought up by VCPUOP_up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @extra_arg == pointer to vcpu_guest_context structure containing initial</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> state for the VCPU.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VCPUOP_initialise\">VCPUOP_initialise</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> 0", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bring up a VCPU. This makes the VCPU runnable. This operation will fail</span>", 
"<span class=\"comment\"> * if the VCPU has not been initialised (VCPUOP_initialise).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VCPUOP_up\">VCPUOP_up</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> 1", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bring down a VCPU (i.e., make it non-runnable).</span>", 
"<span class=\"comment\"> * There are a few caveats that callers should observe:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1. This operation may return, and VCPU_is_up may return false, before the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   VCPU stops running (i.e., the command is asynchronous). It is a good</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   idea to ensure that the VCPU has entered a non-critical loop before</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   bringing it down. Alternatively, this operation is guaranteed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   synchronous if invoked by the VCPU itself.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2. After a VCPU is initialised, there is currently no way to drop all its</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   references to domain memory. Even a VCPU that is down still holds</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   memory references via its pagetable base pointer and GDT. It is good</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   practise to move a VCPU onto an 'idle' or default page table, LDT and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   GDT before bringing it down.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VCPUOP_down\">VCPUOP_down</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> 2", 
"", 
"<span class=\"comment\">/* Returns 1 if the given VCPU is up. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VCPUOP_is_up\">VCPUOP_is_up</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> 3", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return information about the state and running time of a VCPU.</span>", 
"<span class=\"comment\"> * @extra_arg == pointer to vcpu_runstate_info structure.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VCPUOP_get_runstate_info\">VCPUOP_get_runstate_info</a><span class=\"ts\"/> 4", 
"struct <a class=\"id\" href=\"#vcpu_runstate_info\">vcpu_runstate_info</a> {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* VCPU's current state (RUNSTATE_*). */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* When was current state entered (system time, ns)? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#state_entry_time\">state_entry_time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Time spent in each RUNSTATE_* (ns). The sum of these times is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * guaranteed not to drift from system time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#time\">time</a>[4];", 
"};", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#vcpu_runstate_info\">vcpu_runstate_info</a>);", 
"", 
"<span class=\"comment\">/* VCPU is currently running on a physical CPU. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RUNSTATE_running\">RUNSTATE_running</a>  0", 
"", 
"<span class=\"comment\">/* VCPU is runnable, but not currently scheduled on any physical CPU. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RUNSTATE_runnable\">RUNSTATE_runnable</a> 1", 
"", 
"<span class=\"comment\">/* VCPU is blocked (a.k.a. idle). It is therefore not runnable. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RUNSTATE_blocked\">RUNSTATE_blocked</a>  2", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VCPU is not runnable, but it is not blocked.</span>", 
"<span class=\"comment\"> * This is a 'catch all' state for things like hotplug and pauses by the</span>", 
"<span class=\"comment\"> * system administrator (or for critical sections in the hypervisor).</span>", 
"<span class=\"comment\"> * RUNSTATE_blocked dominates this state (it is the preferred state).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RUNSTATE_offline\">RUNSTATE_offline</a>  3", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Register a shared memory area from which the guest may obtain its own</span>", 
"<span class=\"comment\"> * runstate information without needing to execute a hypercall.</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1. The registered address may be virtual or physical, depending on the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   platform. The virtual address should be registered on x86 systems.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2. Only one shared area may be registered per VCPU. The shared area is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   updated by the hypervisor each time the VCPU is scheduled. Thus</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   runstate.state will always be RUNSTATE_running and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   runstate.state_entry_time will indicate the system time at which the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   VCPU was last scheduled to run.</span>", 
"<span class=\"comment\"> * @extra_arg == pointer to vcpu_register_runstate_memory_area structure.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VCPUOP_register_runstate_memory_area\">VCPUOP_register_runstate_memory_area</a> 5", 
];
xr_frag_insert('l/8e/8b04b4223f78be271ca6d7eea15256f9ec0f13.xr', __xr_tmp);
