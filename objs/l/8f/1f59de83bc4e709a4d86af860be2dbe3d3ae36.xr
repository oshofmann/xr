var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/kernel/dma.c: A DMA channel allocator. Inspired by linux/kernel/irq.c.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Written by Hennus Bergman, 1992.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1994/12/26: Changes by Alex Nash to fix a minor bug in /proc/dma.</span>", 
"<span class=\"comment\"> *   In the previous version the reported device could end up being wrong,</span>", 
"<span class=\"comment\"> *   if a device requested a DMA channel that was already in use.</span>", 
"<span class=\"comment\"> *   [It also happened to remove the sizeof(char *) == sizeof(int)</span>", 
"<span class=\"comment\"> *   assumption introduced because of those /proc/dma patches. -- Hennus]</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#dma\">dma</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"", 
"", 
"<span class=\"comment\">/* A note on resource allocation:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All drivers needing DMA channels, should allocate and release them</span>", 
"<span class=\"comment\"> * through the public routines `request_dma()' and `free_dma()'.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In order to avoid problems, all processes should allocate resources in</span>", 
"<span class=\"comment\"> * the same sequence and release them in the reverse order.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So, when allocating DMAs and IRQs, first allocate the IRQ, then the DMA.</span>", 
"<span class=\"comment\"> * When releasing them, first release the DMA, then release the IRQ.</span>", 
"<span class=\"comment\"> * If you don't, you may cause allocation requests to fail unnecessarily.</span>", 
"<span class=\"comment\"> * This doesn't really matter now, but it will once we get real semaphores</span>", 
"<span class=\"comment\"> * in the kernel.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"<a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#dma_spin_lock\">dma_spin_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If our port doesn't define this it has no PC like DMA</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#MAX_DMA_CHANNELS\">MAX_DMA_CHANNELS</a>", 
"", 
"", 
"<span class=\"comment\">/* Channel n is busy iff dma_chan_busy[n].lock != 0.</span>", 
"<span class=\"comment\"> * DMA0 used to be reserved for DRAM refresh, but apparently not any more...</span>", 
"<span class=\"comment\"> * DMA4 is reserved for cascading.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> {", 
"<span class=\"ts\"/>int  <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#device_id\">device_id</a>;", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> <a class=\"id\" href=\"#dma_chan_busy\">dma_chan_busy</a>[<a class=\"id\" href=\"#MAX_DMA_CHANNELS\">MAX_DMA_CHANNELS</a>] = {", 
"<span class=\"ts\"/>[4] = { 1, \"cascade\" },", 
"};", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * request_dma - request and reserve a system DMA channel</span>", 
"<span class=\"comment\"> * @dmanr: DMA channel number</span>", 
"<span class=\"comment\"> * @device_id: reserving device ID string, used in /proc/dma</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#request_dma\">request_dma</a>(unsigned int <a class=\"id\" href=\"#dmanr\">dmanr</a>, const char * <a class=\"id\" href=\"#device_id\">device_id</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmanr\">dmanr</a> >= <a class=\"id\" href=\"#MAX_DMA_CHANNELS\">MAX_DMA_CHANNELS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xchg\">xchg</a>(&amp;<a class=\"id\" href=\"#dma_chan_busy\">dma_chan_busy</a>[<a class=\"id\" href=\"#dmanr\">dmanr</a>].<a class=\"id\" href=\"#lock\">lock</a>, 1) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_chan_busy\">dma_chan_busy</a>[<a class=\"id\" href=\"#dmanr\">dmanr</a>].<a class=\"id\" href=\"#device_id\">device_id</a> = <a class=\"id\" href=\"#device_id\">device_id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* old flag was 0, now contains 1 to indicate busy */</span>", 
"<span class=\"ts\"/>return 0;", 
"} <span class=\"comment\">/* request_dma */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * free_dma - free a reserved system DMA channel</span>", 
"<span class=\"comment\"> * @dmanr: DMA channel number</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#free_dma\">free_dma</a>(unsigned int <a class=\"id\" href=\"#dmanr\">dmanr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmanr\">dmanr</a> >= <a class=\"id\" href=\"#MAX_DMA_CHANNELS\">MAX_DMA_CHANNELS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Trying to free DMA%d\\n\", <a class=\"id\" href=\"#dmanr\">dmanr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xchg\">xchg</a>(&amp;<a class=\"id\" href=\"#dma_chan_busy\">dma_chan_busy</a>[<a class=\"id\" href=\"#dmanr\">dmanr</a>].<a class=\"id\" href=\"#lock\">lock</a>, 0) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Trying to free free DMA%d\\n\", <a class=\"id\" href=\"#dmanr\">dmanr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"} <span class=\"comment\">/* free_dma */</span>", 
"", 
"#else", 
"", 
"int <a class=\"id\" href=\"#request_dma\">request_dma</a>(unsigned int <a class=\"id\" href=\"#dmanr\">dmanr</a>, const char *<a class=\"id\" href=\"#device_id\">device_id</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_dma\">free_dma</a>(unsigned int <a class=\"id\" href=\"#dmanr\">dmanr</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#MAX_DMA_CHANNELS\">MAX_DMA_CHANNELS</a>", 
"static int <a class=\"id\" href=\"#proc_dma_show\">proc_dma_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0 ; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_DMA_CHANNELS\">MAX_DMA_CHANNELS</a> ; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_chan_busy\">dma_chan_busy</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#lock\">lock</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%2d: %s\\n\", <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dma_chan_busy\">dma_chan_busy</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#device_id\">device_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"static int <a class=\"id\" href=\"#proc_dma_show\">proc_dma_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \"No DMA\\n\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* MAX_DMA_CHANNELS */</span>", 
"", 
"static int <a class=\"id\" href=\"#proc_dma_open\">proc_dma_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#single_open\">single_open</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#proc_dma_show\">proc_dma_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_dma_operations\">proc_dma_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#proc_dma_open\">proc_dma_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#single_release\">single_release</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#proc_dma_init\">proc_dma_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_create\">proc_create</a>(\"dma\", 0, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#proc_dma_operations\">proc_dma_operations</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#__initcall\">__initcall</a>(<a class=\"id\" href=\"#proc_dma_init\">proc_dma_init</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#request_dma\">request_dma</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#free_dma\">free_dma</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_spin_lock\">dma_spin_lock</a>);", 
];
xr_frag_insert('l/8f/1f59de83bc4e709a4d86af860be2dbe3d3ae36.xr', __xr_tmp);
