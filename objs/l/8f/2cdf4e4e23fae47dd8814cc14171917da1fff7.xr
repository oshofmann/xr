var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2007 Casey Schaufler &lt;casey@schaufler-ca.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/>it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the Free Software Foundation, version 2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Casey Schaufler &lt;casey@schaufler-ca.com&gt;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Ahmed S. Darwish &lt;darwish.07@gmail.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Special thanks to the authors of selinuxfs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Karl MacMillan &lt;kmacmillan@tresys.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>James Morris &lt;jmorris@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#net_namespace\">net_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netlabel\">netlabel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#cipso_ipv4\">cipso_ipv4</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"smack.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * smackfs pseudo filesystem.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum <a class=\"id\" href=\"#smk_inos\">smk_inos</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SMK_ROOT_INO\">SMK_ROOT_INO</a><span class=\"ts\"/>= 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SMK_LOAD\">SMK_LOAD</a><span class=\"ts\"/>= 3,<span class=\"ts\"/><span class=\"comment\">/* load policy */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SMK_CIPSO\">SMK_CIPSO</a><span class=\"ts\"/>= 4,<span class=\"ts\"/><span class=\"comment\">/* load label -&gt; CIPSO mapping */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SMK_DOI\">SMK_DOI</a><span class=\"ts\"/><span class=\"ts\"/>= 5,<span class=\"ts\"/><span class=\"comment\">/* CIPSO DOI */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SMK_DIRECT\">SMK_DIRECT</a><span class=\"ts\"/>= 6,<span class=\"ts\"/><span class=\"comment\">/* CIPSO level indicating direct label */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SMK_AMBIENT\">SMK_AMBIENT</a><span class=\"ts\"/>= 7,<span class=\"ts\"/><span class=\"comment\">/* internet ambient label */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SMK_NETLBLADDR\">SMK_NETLBLADDR</a><span class=\"ts\"/>= 8,<span class=\"ts\"/><span class=\"comment\">/* single label hosts */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SMK_ONLYCAP\">SMK_ONLYCAP</a><span class=\"ts\"/>= 9,<span class=\"ts\"/><span class=\"comment\">/* the only \"capable\" label */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SMK_LOGGING\">SMK_LOGGING</a><span class=\"ts\"/>= 10,<span class=\"ts\"/><span class=\"comment\">/* logging */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * List locks</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#smack_list_lock\">smack_list_lock</a>);", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#smack_cipso_lock\">smack_cipso_lock</a>);", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#smack_ambient_lock\">smack_ambient_lock</a>);", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#smk_netlbladdr_lock\">smk_netlbladdr_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the \"ambient\" label for network traffic.</span>", 
"<span class=\"comment\"> * If it isn't somehow marked, use this.</span>", 
"<span class=\"comment\"> * It can be reset via smackfs/ambient</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#smack_net_ambient\">smack_net_ambient</a> = <a class=\"id\" href=\"#smack_known_floor\">smack_known_floor</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the level in a CIPSO header that indicates a</span>", 
"<span class=\"comment\"> * smack label is contained directly in the category set.</span>", 
"<span class=\"comment\"> * It can be reset via smackfs/direct</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#smack_cipso_direct\">smack_cipso_direct</a> = <a class=\"id\" href=\"#SMACK_CIPSO_DIRECT_DEFAULT\">SMACK_CIPSO_DIRECT_DEFAULT</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unless a process is running with this label even</span>", 
"<span class=\"comment\"> * having CAP_MAC_OVERRIDE isn't enough to grant</span>", 
"<span class=\"comment\"> * privilege to violate MAC policy. If no label is</span>", 
"<span class=\"comment\"> * designated (the NULL case) capabilities apply to</span>", 
"<span class=\"comment\"> * everyone. It is expected that the hat (^) label</span>", 
"<span class=\"comment\"> * will be used if any label is used.</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#smack_onlycap\">smack_onlycap</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Certain IP addresses may be designated as single label hosts.</span>", 
"<span class=\"comment\"> * Packets are sent there unlabeled, but only from tasks that</span>", 
"<span class=\"comment\"> * can write to the specified label.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#smk_netlbladdr_list\">smk_netlbladdr_list</a>);", 
"<a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#smack_rule_list\">smack_rule_list</a>);", 
"", 
"static int <a class=\"id\" href=\"#smk_cipso_doi_value\">smk_cipso_doi_value</a> = <a class=\"id\" href=\"#SMACK_CIPSO_DOI_DEFAULT\">SMACK_CIPSO_DOI_DEFAULT</a>;", 
"", 
"const char *<a class=\"id\" href=\"#smack_cipso_option\">smack_cipso_option</a> = <a class=\"id\" href=\"#SMACK_CIPSO_OPTION\">SMACK_CIPSO_OPTION</a>;", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SEQ_READ_FINISHED\">SEQ_READ_FINISHED</a><span class=\"ts\"/>1", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Values for parsing cipso rules</span>", 
"<span class=\"comment\"> * SMK_DIGITLEN: Length of a digit field in a rule.</span>", 
"<span class=\"comment\"> * SMK_CIPSOMIN: Minimum possible cipso rule length.</span>", 
"<span class=\"comment\"> * SMK_CIPSOMAX: Maximum possible cipso rule length.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SMK_DIGITLEN\">SMK_DIGITLEN</a> 4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SMK_CIPSOMIN\">SMK_CIPSOMIN</a> (<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a> + 2 * <a class=\"id\" href=\"#SMK_DIGITLEN\">SMK_DIGITLEN</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SMK_CIPSOMAX\">SMK_CIPSOMAX</a> (<a class=\"id\" href=\"#SMK_CIPSOMIN\">SMK_CIPSOMIN</a> + <a class=\"id\" href=\"#SMACK_CIPSO_MAXCATNUM\">SMACK_CIPSO_MAXCATNUM</a> * <a class=\"id\" href=\"#SMK_DIGITLEN\">SMK_DIGITLEN</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Values for parsing MAC rules</span>", 
"<span class=\"comment\"> * SMK_ACCESS: Maximum possible combination of access permissions</span>", 
"<span class=\"comment\"> * SMK_ACCESSLEN: Maximum length for a rule access field</span>", 
"<span class=\"comment\"> * SMK_LOADLEN: Smack rule length</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SMK_ACCESS\">SMK_ACCESS</a>    \"rwxa\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SMK_ACCESSLEN\">SMK_ACCESSLEN</a> (sizeof(<a class=\"id\" href=\"#SMK_ACCESS\">SMK_ACCESS</a>) - 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SMK_LOADLEN\">SMK_LOADLEN</a>   (<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a> + <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a> + <a class=\"id\" href=\"#SMK_ACCESSLEN\">SMK_ACCESSLEN</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_netlabel_audit_set - fill a netlbl_audit struct</span>", 
"<span class=\"comment\"> * @nap: structure to fill</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smk_netlabel_audit_set\">smk_netlabel_audit_set</a>(struct <a class=\"id\" href=\"#netlbl_audit\">netlbl_audit</a> *<a class=\"id\" href=\"#nap\">nap</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nap\">nap</a>-><a class=\"id\" href=\"#loginuid\">loginuid</a> = <a class=\"id\" href=\"#audit_get_loginuid\">audit_get_loginuid</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nap\">nap</a>-><a class=\"id\" href=\"#sessionid\">sessionid</a> = <a class=\"id\" href=\"#audit_get_sessionid\">audit_get_sessionid</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nap\">nap</a>-><a class=\"id\" href=\"#secid\">secid</a> = <a class=\"id\" href=\"#smack_to_secid\">smack_to_secid</a>(<a class=\"id\" href=\"#current_security\">current_security</a>());", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Values for parsing single label host rules</span>", 
"<span class=\"comment\"> * \"1.2.3.4 X\"</span>", 
"<span class=\"comment\"> * \"192.168.138.129/32 abcdefghijklmnopqrstuvw\"</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SMK_NETLBLADDRMIN\">SMK_NETLBLADDRMIN</a><span class=\"ts\"/>9", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SMK_NETLBLADDRMAX\">SMK_NETLBLADDRMAX</a><span class=\"ts\"/>42", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Seq_file read operations for /smack/load</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void *<a class=\"id\" href=\"#load_seq_start\">load_seq_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pos\">pos</a> == <a class=\"id\" href=\"#SEQ_READ_FINISHED\">SEQ_READ_FINISHED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#smack_rule_list\">smack_rule_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smack_rule_list\">smack_rule_list</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#load_seq_next\">load_seq_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_is_last\">list_is_last</a>(<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#smack_rule_list\">smack_rule_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#SEQ_READ_FINISHED\">SEQ_READ_FINISHED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#load_seq_show\">load_seq_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_rule\">smack_rule</a> *<a class=\"id\" href=\"#srp\">srp</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#list\">list</a>, struct <a class=\"id\" href=\"#smack_rule\">smack_rule</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%s %s\", (char *)<a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#smk_subject\">smk_subject</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   (char *)<a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#smk_object\">smk_object</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#s\">s</a>, ' ');", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#smk_access\">smk_access</a> &amp; <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#s\">s</a>, 'r');", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#smk_access\">smk_access</a> &amp; <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#s\">s</a>, 'w');", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#smk_access\">smk_access</a> &amp; <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#s\">s</a>, 'x');", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#smk_access\">smk_access</a> &amp; <a class=\"id\" href=\"#MAY_APPEND\">MAY_APPEND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#s\">s</a>, 'a');", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#smk_access\">smk_access</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#s\">s</a>, '-');", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#s\">s</a>, '\\n');", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#load_seq_stop\">load_seq_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* No-op */</span>", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#load_seq_ops\">load_seq_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#load_seq_start\">load_seq_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a>  = <a class=\"id\" href=\"#load_seq_next\">load_seq_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a>  = <a class=\"id\" href=\"#load_seq_show\">load_seq_show</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a>  = <a class=\"id\" href=\"#load_seq_stop\">load_seq_stop</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_open_load - open() for /smack/load</span>", 
"<span class=\"comment\"> * @inode: inode structure representing file</span>", 
"<span class=\"comment\"> * @file: \"load\" file pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For reading, use load_seq_* seq_file reading operations.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smk_open_load\">smk_open_load</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#load_seq_ops\">load_seq_ops</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_set_access - add a rule to the rule list</span>", 
"<span class=\"comment\"> * @srp: the new rule to add</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Looks through the current subject/object/access list for</span>", 
"<span class=\"comment\"> * the subject/object pair and replaces the access that was</span>", 
"<span class=\"comment\"> * there. If the pair isn't found add it with the specified</span>", 
"<span class=\"comment\"> * access.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if nothing goes wrong or -ENOMEM if it fails</span>", 
"<span class=\"comment\"> * during the allocation of the new pair to add.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smk_set_access\">smk_set_access</a>(struct <a class=\"id\" href=\"#smack_rule\">smack_rule</a> *<a class=\"id\" href=\"#srp\">srp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_rule\">smack_rule</a> *<a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#smack_list_lock\">smack_list_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#sp\">sp</a>, &amp;<a class=\"id\" href=\"#smack_rule_list\">smack_rule_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#smk_subject\">smk_subject</a> == <a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#smk_subject\">smk_subject</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#smk_object\">smk_object</a> == <a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#smk_object\">smk_object</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#smk_access\">smk_access</a> = <a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#smk_access\">smk_access</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#srp\">srp</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#smack_rule_list\">smack_rule_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#smack_list_lock\">smack_list_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_write_load - write() for /smack/load</span>", 
"<span class=\"comment\"> * @file: file pointer, not actually used</span>", 
"<span class=\"comment\"> * @buf: where to get the data from</span>", 
"<span class=\"comment\"> * @count: bytes sent</span>", 
"<span class=\"comment\"> * @ppos: where to start - must be 0</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Get one smack access rule from above.</span>", 
"<span class=\"comment\"> * The format is exactly:</span>", 
"<span class=\"comment\"> *     char subject[SMK_LABELLEN]</span>", 
"<span class=\"comment\"> *     char object[SMK_LABELLEN]</span>", 
"<span class=\"comment\"> *     char access[SMK_ACCESSLEN]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * writes must be SMK_LABELLEN+SMK_LABELLEN+SMK_ACCESSLEN bytes.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#smk_write_load\">smk_write_load</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_rule\">smack_rule</a> *<a class=\"id\" href=\"#rule\">rule</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Must have privilege.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No partial writes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enough data must be present.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_MAC_ADMIN\">CAP_MAC_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#ppos\">ppos</a> != 0 || <a class=\"id\" href=\"#count\">count</a> != <a class=\"id\" href=\"#SMK_LOADLEN\">SMK_LOADLEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#rule\">rule</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rule\">rule</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#smk_subject\">smk_subject</a> = <a class=\"id\" href=\"#smk_import\">smk_import</a>(<a class=\"id\" href=\"#data\">data</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#smk_subject\">smk_subject</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_rule\">out_free_rule</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#smk_object\">smk_object</a> = <a class=\"id\" href=\"#smk_import\">smk_import</a>(<a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#smk_object\">smk_object</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_rule\">out_free_rule</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#smk_access\">smk_access</a> = 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a> + <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>]) {", 
"<span class=\"ts\"/>case '-':", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 'r':", 
"<span class=\"ts\"/>case 'R':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#smk_access\">smk_access</a> |= <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_rule\">out_free_rule</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a> + <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a> + 1]) {", 
"<span class=\"ts\"/>case '-':", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 'w':", 
"<span class=\"ts\"/>case 'W':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#smk_access\">smk_access</a> |= <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_rule\">out_free_rule</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a> + <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a> + 2]) {", 
"<span class=\"ts\"/>case '-':", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 'x':", 
"<span class=\"ts\"/>case 'X':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#smk_access\">smk_access</a> |= <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_rule\">out_free_rule</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a> + <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a> + 3]) {", 
"<span class=\"ts\"/>case '-':", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 'a':", 
"<span class=\"ts\"/>case 'A':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#smk_access\">smk_access</a> |= <a class=\"id\" href=\"#MAY_APPEND\">MAY_APPEND</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_rule\">out_free_rule</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_set_access\">smk_set_access</a>(<a class=\"id\" href=\"#rule\">rule</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<a class=\"id\" href=\"#out_free_rule\">out_free_rule</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#rule\">rule</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#smk_load_ops\">smk_load_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a>           = <a class=\"id\" href=\"#smk_open_load\">smk_open_load</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a>         = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#smk_write_load\">smk_write_load</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a>        = <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_cipso_doi - initialize the CIPSO domain</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smk_cipso_doi\">smk_cipso_doi</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cipso_v4_doi\">cipso_v4_doi</a> *<a class=\"id\" href=\"#doip\">doip</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_audit\">netlbl_audit</a> <a class=\"id\" href=\"#nai\">nai</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_netlabel_audit_set\">smk_netlabel_audit_set</a>(&amp;<a class=\"id\" href=\"#nai\">nai</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#netlbl_cfg_map_del\">netlbl_cfg_map_del</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#PF_INET\">PF_INET</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#nai\">nai</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s:%d remove rc = %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>, <a class=\"id\" href=\"#rc\">rc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#doip\">doip</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#cipso_v4_doi\">cipso_v4_doi</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#doip\">doip</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"smack:  Failed to initialize cipso DOI.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#doip\">doip</a>-><a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#std\">std</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#doip\">doip</a>-><a class=\"id\" href=\"#doi\">doi</a> = <a class=\"id\" href=\"#smk_cipso_doi_value\">smk_cipso_doi_value</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#doip\">doip</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#CIPSO_V4_MAP_PASS\">CIPSO_V4_MAP_PASS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#doip\">doip</a>-><a class=\"id\" href=\"#tags\">tags</a>[0] = <a class=\"id\" href=\"#CIPSO_V4_TAG_RBITMAP\">CIPSO_V4_TAG_RBITMAP</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#rc\">rc</a> = 1; <a class=\"id\" href=\"#rc\">rc</a> &lt; <a class=\"id\" href=\"#CIPSO_V4_TAG_MAXCNT\">CIPSO_V4_TAG_MAXCNT</a>; <a class=\"id\" href=\"#rc\">rc</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#doip\">doip</a>-><a class=\"id\" href=\"#tags\">tags</a>[<a class=\"id\" href=\"#rc\">rc</a>] = <a class=\"id\" href=\"#CIPSO_V4_TAG_INVALID\">CIPSO_V4_TAG_INVALID</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#netlbl_cfg_cipsov4_add\">netlbl_cfg_cipsov4_add</a>(<a class=\"id\" href=\"#doip\">doip</a>, &amp;<a class=\"id\" href=\"#nai\">nai</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s:%d cipso add rc = %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>, <a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#doip\">doip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#netlbl_cfg_cipsov4_map_add\">netlbl_cfg_cipsov4_map_add</a>(<a class=\"id\" href=\"#doip\">doip</a>-><a class=\"id\" href=\"#doi\">doi</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#nai\">nai</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s:%d map add rc = %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>, <a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#doip\">doip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_unlbl_ambient - initialize the unlabeled domain</span>", 
"<span class=\"comment\"> * @oldambient: previous domain string</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smk_unlbl_ambient\">smk_unlbl_ambient</a>(char *<a class=\"id\" href=\"#oldambient\">oldambient</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_audit\">netlbl_audit</a> <a class=\"id\" href=\"#nai\">nai</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_netlabel_audit_set\">smk_netlabel_audit_set</a>(&amp;<a class=\"id\" href=\"#nai\">nai</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oldambient\">oldambient</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#netlbl_cfg_map_del\">netlbl_cfg_map_del</a>(<a class=\"id\" href=\"#oldambient\">oldambient</a>, <a class=\"id\" href=\"#PF_INET\">PF_INET</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#nai\">nai</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s:%d remove rc = %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>, <a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#netlbl_cfg_unlbl_map_add\">netlbl_cfg_unlbl_map_add</a>(<a class=\"id\" href=\"#smack_net_ambient\">smack_net_ambient</a>, <a class=\"id\" href=\"#PF_INET\">PF_INET</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#nai\">nai</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s:%d add rc = %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>, <a class=\"id\" href=\"#rc\">rc</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Seq_file read operations for /smack/cipso</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void *<a class=\"id\" href=\"#cipso_seq_start\">cipso_seq_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pos\">pos</a> == <a class=\"id\" href=\"#SEQ_READ_FINISHED\">SEQ_READ_FINISHED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#smack_known_list\">smack_known_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smack_known_list\">smack_known_list</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#cipso_seq_next\">cipso_seq_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a>  *<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * labels with no associated cipso value wont be printed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in cipso_seq_show</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_is_last\">list_is_last</a>(<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#smack_known_list\">smack_known_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#SEQ_READ_FINISHED\">SEQ_READ_FINISHED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Print cipso labels in format:</span>", 
"<span class=\"comment\"> * label level[/cat[,cat]]</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cipso_seq_show\">cipso_seq_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a>  *<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_known\">smack_known</a> *<a class=\"id\" href=\"#skp\">skp</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#list\">list</a>, struct <a class=\"id\" href=\"#smack_known\">smack_known</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_cipso\">smack_cipso</a> *<a class=\"id\" href=\"#scp\">scp</a> = <a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_cipso\">smk_cipso</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#cbp\">cbp</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#sep\">sep</a> = '/';", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cat\">cat</a> = 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scp\">scp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%s %3d\", (char *)&amp;<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_known\">smk_known</a>, <a class=\"id\" href=\"#scp\">scp</a>-><a class=\"id\" href=\"#smk_level\">smk_level</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cbp\">cbp</a> = <a class=\"id\" href=\"#scp\">scp</a>-><a class=\"id\" href=\"#smk_catset\">smk_catset</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#m\">m</a> = 0x80; <a class=\"id\" href=\"#m\">m</a> != 0; <a class=\"id\" href=\"#m\">m</a> >>= 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> &amp; <a class=\"id\" href=\"#cbp\">cbp</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%c%d\", <a class=\"id\" href=\"#sep\">sep</a>, <a class=\"id\" href=\"#cat\">cat</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sep\">sep</a> = ',';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cat\">cat</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#s\">s</a>, '\\n');", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cipso_seq_stop\">cipso_seq_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* No-op */</span>", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#cipso_seq_ops\">cipso_seq_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#cipso_seq_start\">cipso_seq_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a>  = <a class=\"id\" href=\"#cipso_seq_stop\">cipso_seq_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a>  = <a class=\"id\" href=\"#cipso_seq_next\">cipso_seq_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a>  = <a class=\"id\" href=\"#cipso_seq_show\">cipso_seq_show</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_open_cipso - open() for /smack/cipso</span>", 
"<span class=\"comment\"> * @inode: inode structure representing file</span>", 
"<span class=\"comment\"> * @file: \"cipso\" file pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Connect our cipso_seq_* operations with /smack/cipso</span>", 
"<span class=\"comment\"> * file_operations</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smk_open_cipso\">smk_open_cipso</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#cipso_seq_ops\">cipso_seq_ops</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_write_cipso - write() for /smack/cipso</span>", 
"<span class=\"comment\"> * @file: file pointer, not actually used</span>", 
"<span class=\"comment\"> * @buf: where to get the data from</span>", 
"<span class=\"comment\"> * @count: bytes sent</span>", 
"<span class=\"comment\"> * @ppos: where to start</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Accepts only one cipso rule per write call.</span>", 
"<span class=\"comment\"> * Returns number of bytes written or error code, as appropriate</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#smk_write_cipso\">smk_write_cipso</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_known\">smack_known</a> *<a class=\"id\" href=\"#skp\">skp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_cipso\">smack_cipso</a> *<a class=\"id\" href=\"#scp\">scp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#mapcatset\">mapcatset</a>[<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#maplevel\">maplevel</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cat\">cat</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#catlen\">catlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#rule\">rule</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Must have privilege.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No partial writes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enough data must be present.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_MAC_ADMIN\">CAP_MAC_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#ppos\">ppos</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#SMK_CIPSOMIN\">SMK_CIPSOMIN</a> || <a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#SMK_CIPSOMAX\">SMK_CIPSOMAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#count\">count</a> + 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlockedout\">unlockedout</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* labels cannot begin with a '-' */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>[0] == '-') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlockedout\">unlockedout</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#count\">count</a>] = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only allow one writer at a time. Writes should be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * quite rare and small in any case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#smack_cipso_lock\">smack_cipso_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skp\">skp</a> = <a class=\"id\" href=\"#smk_import_entry\">smk_import_entry</a>(<a class=\"id\" href=\"#rule\">rule</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skp\">skp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a> += <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#rule\">rule</a>, \"%d\", &amp;<a class=\"id\" href=\"#maplevel\">maplevel</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 1 || <a class=\"id\" href=\"#maplevel\">maplevel</a> &gt; <a class=\"id\" href=\"#SMACK_CIPSO_MAXLEVEL\">SMACK_CIPSO_MAXLEVEL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a> += <a class=\"id\" href=\"#SMK_DIGITLEN\">SMK_DIGITLEN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#rule\">rule</a>, \"%d\", &amp;<a class=\"id\" href=\"#catlen\">catlen</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 1 || <a class=\"id\" href=\"#catlen\">catlen</a> &gt; <a class=\"id\" href=\"#SMACK_CIPSO_MAXCATNUM\">SMACK_CIPSO_MAXCATNUM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> != (<a class=\"id\" href=\"#SMK_CIPSOMIN\">SMK_CIPSOMIN</a> + <a class=\"id\" href=\"#catlen\">catlen</a> * <a class=\"id\" href=\"#SMK_DIGITLEN\">SMK_DIGITLEN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#mapcatset\">mapcatset</a>, 0, sizeof(<a class=\"id\" href=\"#mapcatset\">mapcatset</a>));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#catlen\">catlen</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a> += <a class=\"id\" href=\"#SMK_DIGITLEN\">SMK_DIGITLEN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#rule\">rule</a>, \"%d\", &amp;<a class=\"id\" href=\"#cat\">cat</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 1 || <a class=\"id\" href=\"#cat\">cat</a> &gt; <a class=\"id\" href=\"#SMACK_CIPSO_MAXCATVAL\">SMACK_CIPSO_MAXCATVAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack_catset_bit\">smack_catset_bit</a>(<a class=\"id\" href=\"#cat\">cat</a>, <a class=\"id\" href=\"#mapcatset\">mapcatset</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_cipso\">smk_cipso</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scp\">scp</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#smack_cipso\">smack_cipso</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scp\">scp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_cipsolock\">smk_cipsolock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scp\">scp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scp\">scp</a> = <a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_cipso\">smk_cipso</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_cipso\">smk_cipso</a> = <a class=\"id\" href=\"#scp\">scp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scp\">scp</a>-><a class=\"id\" href=\"#smk_level\">smk_level</a> = <a class=\"id\" href=\"#maplevel\">maplevel</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#scp\">scp</a>-><a class=\"id\" href=\"#smk_catset\">smk_catset</a>, <a class=\"id\" href=\"#mapcatset\">mapcatset</a>, sizeof(<a class=\"id\" href=\"#mapcatset\">mapcatset</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_cipsolock\">smk_cipsolock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#smack_cipso_lock\">smack_cipso_lock</a>);", 
"<a class=\"id\" href=\"#unlockedout\">unlockedout</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#smk_cipso_ops\">smk_cipso_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a>           = <a class=\"id\" href=\"#smk_open_cipso\">smk_open_cipso</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a>         = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#smk_write_cipso\">smk_write_cipso</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a>        = <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Seq_file read operations for /smack/netlabel</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void *<a class=\"id\" href=\"#netlbladdr_seq_start\">netlbladdr_seq_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pos\">pos</a> == <a class=\"id\" href=\"#SEQ_READ_FINISHED\">SEQ_READ_FINISHED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#smk_netlbladdr_list\">smk_netlbladdr_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_netlbladdr_list\">smk_netlbladdr_list</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#netlbladdr_seq_next\">netlbladdr_seq_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_is_last\">list_is_last</a>(<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#smk_netlbladdr_list\">smk_netlbladdr_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#SEQ_READ_FINISHED\">SEQ_READ_FINISHED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BEBITS\">BEBITS</a><span class=\"ts\"/>(sizeof(<a class=\"id\" href=\"#__be32\">__be32</a>) * 8)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Print host/label pairs</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#netlbladdr_seq_show\">netlbladdr_seq_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_netlbladdr\">smk_netlbladdr</a> *<a class=\"id\" href=\"#skp\">skp</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#list\">list</a>, struct <a class=\"id\" href=\"#smk_netlbladdr\">smk_netlbladdr</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#hp\">hp</a> = (char *) &amp;<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_host\">smk_host</a>.<a class=\"id\" href=\"#sin_addr\">sin_addr</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#maskn\">maskn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#temp_mask\">temp_mask</a> = <a class=\"id\" href=\"#be32_to_cpu\">be32_to_cpu</a>(<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_mask\">smk_mask</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#maskn\">maskn</a> = 0; <a class=\"id\" href=\"#temp_mask\">temp_mask</a>; <a class=\"id\" href=\"#temp_mask\">temp_mask</a> <<= 1, <a class=\"id\" href=\"#maskn\">maskn</a>++);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%u.%u.%u.%u/%d %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hp\">hp</a>[0], <a class=\"id\" href=\"#hp\">hp</a>[1], <a class=\"id\" href=\"#hp\">hp</a>[2], <a class=\"id\" href=\"#hp\">hp</a>[3], <a class=\"id\" href=\"#maskn\">maskn</a>, <a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_label\">smk_label</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#netlbladdr_seq_stop\">netlbladdr_seq_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* No-op */</span>", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#netlbladdr_seq_ops\">netlbladdr_seq_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#netlbladdr_seq_start\">netlbladdr_seq_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a>  = <a class=\"id\" href=\"#netlbladdr_seq_stop\">netlbladdr_seq_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a>  = <a class=\"id\" href=\"#netlbladdr_seq_next\">netlbladdr_seq_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a>  = <a class=\"id\" href=\"#netlbladdr_seq_show\">netlbladdr_seq_show</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_open_netlbladdr - open() for /smack/netlabel</span>", 
"<span class=\"comment\"> * @inode: inode structure representing file</span>", 
"<span class=\"comment\"> * @file: \"netlabel\" file pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Connect our netlbladdr_seq_* operations with /smack/netlabel</span>", 
"<span class=\"comment\"> * file_operations</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smk_open_netlbladdr\">smk_open_netlbladdr</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#netlbladdr_seq_ops\">netlbladdr_seq_ops</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_netlbladdr_insert</span>", 
"<span class=\"comment\"> * @new : netlabel to insert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This helper insert netlabel in the smack_netlbladdrs list</span>", 
"<span class=\"comment\"> * sorted by netmask length (longest to smallest)</span>", 
"<span class=\"comment\"> * locked by &amp;smk_netlbladdr_lock in smk_write_netlbladdr</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smk_netlbladdr_insert\">smk_netlbladdr_insert</a>(struct <a class=\"id\" href=\"#smk_netlbladdr\">smk_netlbladdr</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_netlbladdr\">smk_netlbladdr</a> *<a class=\"id\" href=\"#m\">m</a>, *<a class=\"id\" href=\"#m_next\">m_next</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#smk_netlbladdr_list\">smk_netlbladdr_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#smk_netlbladdr_list\">smk_netlbladdr_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#list_entry_rcu\">list_entry_rcu</a>(<a class=\"id\" href=\"#smk_netlbladdr_list\">smk_netlbladdr_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#smk_netlbladdr\">smk_netlbladdr</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the comparison '&gt;' is a bit hacky, but works */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#smk_mask\">smk_mask</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a> &gt; <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#smk_mask\">smk_mask</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#smk_netlbladdr_list\">smk_netlbladdr_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#smk_netlbladdr_list\">smk_netlbladdr_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_is_last\">list_is_last</a>(&amp;<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#smk_netlbladdr_list\">smk_netlbladdr_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m_next\">m_next</a> = <a class=\"id\" href=\"#list_entry_rcu\">list_entry_rcu</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_netlbladdr\">smk_netlbladdr</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#smk_mask\">smk_mask</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a> &gt; <a class=\"id\" href=\"#m_next\">m_next</a>-><a class=\"id\" href=\"#smk_mask\">smk_mask</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_write_netlbladdr - write() for /smack/netlabel</span>", 
"<span class=\"comment\"> * @file: file pointer, not actually used</span>", 
"<span class=\"comment\"> * @buf: where to get the data from</span>", 
"<span class=\"comment\"> * @count: bytes sent</span>", 
"<span class=\"comment\"> * @ppos: where to start</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Accepts only one netlbladdr per write call.</span>", 
"<span class=\"comment\"> * Returns number of bytes written or error code, as appropriate</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#smk_write_netlbladdr\">smk_write_netlbladdr</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_netlbladdr\">smk_netlbladdr</a> *<a class=\"id\" href=\"#skp\">skp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> <a class=\"id\" href=\"#newname\">newname</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#smack\">smack</a>[<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#SMK_NETLBLADDRMAX\">SMK_NETLBLADDRMAX</a> + 1];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#host\">host</a> = (char *)&amp;<a class=\"id\" href=\"#newname\">newname</a>.<a class=\"id\" href=\"#sin_addr\">sin_addr</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_audit\">netlbl_audit</a> <a class=\"id\" href=\"#audit_info\">audit_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#in_addr\">in_addr</a> <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask_bits\">mask_bits</a> = (1<<31);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#nsa\">nsa</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#temp_mask\">temp_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Must have privilege.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No partial writes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enough data must be present.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \"&lt;addr/mask, as a.b.c.d/e&gt;&lt;space&gt;&lt;label&gt;\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \"&lt;addr, as a.b.c.d&gt;&lt;space&gt;&lt;label&gt;\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_MAC_ADMIN\">CAP_MAC_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#ppos\">ppos</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#SMK_NETLBLADDRMIN\">SMK_NETLBLADDRMIN</a> || <a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#SMK_NETLBLADDRMAX\">SMK_NETLBLADDRMAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#count\">count</a>] = '\\0';", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#data\">data</a>, \"%hhd.%hhd.%hhd.%hhd/%d %s\",", 
"<span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#host\">host</a>[0], &amp;<a class=\"id\" href=\"#host\">host</a>[1], &amp;<a class=\"id\" href=\"#host\">host</a>[2], &amp;<a class=\"id\" href=\"#host\">host</a>[3], &amp;<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#smack\">smack</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 6) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#data\">data</a>, \"%hhd.%hhd.%hhd.%hhd %s\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#host\">host</a>[0], &amp;<a class=\"id\" href=\"#host\">host</a>[1], &amp;<a class=\"id\" href=\"#host\">host</a>[2], &amp;<a class=\"id\" href=\"#host\">host</a>[3], <a class=\"id\" href=\"#smack\">smack</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 5)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#BEBITS\">BEBITS</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a> &gt; <a class=\"id\" href=\"#BEBITS\">BEBITS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if smack begins with '-', its an option, don't import it */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smack\">smack</a>[0] != '-') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#smk_import\">smk_import</a>(<a class=\"id\" href=\"#smack\">smack</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* check known options */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#smack\">smack</a>, <a class=\"id\" href=\"#smack_cipso_option\">smack_cipso_option</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = (char *)<a class=\"id\" href=\"#smack_cipso_option\">smack_cipso_option</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#temp_mask\">temp_mask</a> = 0; <a class=\"id\" href=\"#m\">m</a> &gt; 0; <a class=\"id\" href=\"#m\">m</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#temp_mask\">temp_mask</a> |= <a class=\"id\" href=\"#mask_bits\">mask_bits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask_bits\">mask_bits</a> >>= 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a> = <a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#temp_mask\">temp_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newname\">newname</a>.<a class=\"id\" href=\"#sin_addr\">sin_addr</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a> &= <a class=\"id\" href=\"#mask\">mask</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only allow one writer at a time. Writes should be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * quite rare and small in any case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#smk_netlbladdr_lock\">smk_netlbladdr_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nsa\">nsa</a> = <a class=\"id\" href=\"#newname\">newname</a>.<a class=\"id\" href=\"#sin_addr\">sin_addr</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* try to find if the prefix is already in the list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#skp\">skp</a>, &amp;<a class=\"id\" href=\"#smk_netlbladdr_list\">smk_netlbladdr_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_host\">smk_host</a>.<a class=\"id\" href=\"#sin_addr\">sin_addr</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a> == <a class=\"id\" href=\"#nsa\">nsa</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_mask\">smk_mask</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a> == <a class=\"id\" href=\"#mask\">mask</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_netlabel_audit_set\">smk_netlabel_audit_set</a>(&amp;<a class=\"id\" href=\"#audit_info\">audit_info</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skp\">skp</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#skp\">skp</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skp\">skp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_host\">smk_host</a>.<a class=\"id\" href=\"#sin_addr\">sin_addr</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a> = <a class=\"id\" href=\"#newname\">newname</a>.<a class=\"id\" href=\"#sin_addr\">sin_addr</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_mask\">smk_mask</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a> = <a class=\"id\" href=\"#mask\">mask</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_label\">smk_label</a> = <a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smk_netlbladdr_insert\">smk_netlbladdr_insert</a>(<a class=\"id\" href=\"#skp\">skp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we delete the unlabeled entry, only if the previous label</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * wasnt the special CIPSO option */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_label\">smk_label</a> != <a class=\"id\" href=\"#smack_cipso_option\">smack_cipso_option</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#netlbl_cfg_unlbl_static_del\">netlbl_cfg_unlbl_static_del</a>(&amp;<a class=\"id\" href=\"#init_net\">init_net</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_host\">smk_host</a>.<a class=\"id\" href=\"#sin_addr\">sin_addr</a>, &amp;<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_mask\">smk_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PF_INET\">PF_INET</a>, &amp;<a class=\"id\" href=\"#audit_info\">audit_info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_label\">smk_label</a> = <a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now tell netlabel about the single label nature of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this host so that incoming packets get labeled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but only if we didn't get the special CIPSO option</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0 && <a class=\"id\" href=\"#sp\">sp</a> != <a class=\"id\" href=\"#smack_cipso_option\">smack_cipso_option</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#netlbl_cfg_unlbl_static_add\">netlbl_cfg_unlbl_static_add</a>(&amp;<a class=\"id\" href=\"#init_net\">init_net</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_host\">smk_host</a>.<a class=\"id\" href=\"#sin_addr\">sin_addr</a>, &amp;<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_mask\">smk_mask</a>, <a class=\"id\" href=\"#PF_INET\">PF_INET</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack_to_secid\">smack_to_secid</a>(<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_label\">smk_label</a>), &amp;<a class=\"id\" href=\"#audit_info\">audit_info</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#smk_netlbladdr_lock\">smk_netlbladdr_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#smk_netlbladdr_ops\">smk_netlbladdr_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a>           = <a class=\"id\" href=\"#smk_open_netlbladdr\">smk_open_netlbladdr</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a>         = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#smk_write_netlbladdr\">smk_write_netlbladdr</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a>        = <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_read_doi - read() for /smack/doi</span>", 
"<span class=\"comment\"> * @filp: file pointer, not actually used</span>", 
"<span class=\"comment\"> * @buf: where to put the result</span>", 
"<span class=\"comment\"> * @count: maximum to send along</span>", 
"<span class=\"comment\"> * @ppos: where to start</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns number of bytes read or error code, as appropriate</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#smk_read_doi\">smk_read_doi</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#temp\">temp</a>[80];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#ppos\">ppos</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#temp\">temp</a>, \"%d\", <a class=\"id\" href=\"#smk_cipso_doi_value\">smk_cipso_doi_value</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#temp\">temp</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#temp\">temp</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_write_doi - write() for /smack/doi</span>", 
"<span class=\"comment\"> * @file: file pointer, not actually used</span>", 
"<span class=\"comment\"> * @buf: where to get the data from</span>", 
"<span class=\"comment\"> * @count: bytes sent</span>", 
"<span class=\"comment\"> * @ppos: where to start</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns number of bytes written or error code, as appropriate</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#smk_write_doi\">smk_write_doi</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#temp\">temp</a>[80];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_MAC_ADMIN\">CAP_MAC_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> >= sizeof(<a class=\"id\" href=\"#temp\">temp</a>) || <a class=\"id\" href=\"#count\">count</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#temp\">temp</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#temp\">temp</a>[<a class=\"id\" href=\"#count\">count</a>] = '\\0';", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#temp\">temp</a>, \"%d\", &amp;<a class=\"id\" href=\"#i\">i</a>) != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_cipso_doi_value\">smk_cipso_doi_value</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_cipso_doi\">smk_cipso_doi</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#smk_doi_ops\">smk_doi_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#smk_read_doi\">smk_read_doi</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#smk_write_doi\">smk_write_doi</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_read_direct - read() for /smack/direct</span>", 
"<span class=\"comment\"> * @filp: file pointer, not actually used</span>", 
"<span class=\"comment\"> * @buf: where to put the result</span>", 
"<span class=\"comment\"> * @count: maximum to send along</span>", 
"<span class=\"comment\"> * @ppos: where to start</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns number of bytes read or error code, as appropriate</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#smk_read_direct\">smk_read_direct</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#temp\">temp</a>[80];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#ppos\">ppos</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#temp\">temp</a>, \"%d\", <a class=\"id\" href=\"#smack_cipso_direct\">smack_cipso_direct</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#temp\">temp</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#temp\">temp</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_write_direct - write() for /smack/direct</span>", 
"<span class=\"comment\"> * @file: file pointer, not actually used</span>", 
"<span class=\"comment\"> * @buf: where to get the data from</span>", 
"<span class=\"comment\"> * @count: bytes sent</span>", 
"<span class=\"comment\"> * @ppos: where to start</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns number of bytes written or error code, as appropriate</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#smk_write_direct\">smk_write_direct</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#temp\">temp</a>[80];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_MAC_ADMIN\">CAP_MAC_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> >= sizeof(<a class=\"id\" href=\"#temp\">temp</a>) || <a class=\"id\" href=\"#count\">count</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#temp\">temp</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#temp\">temp</a>[<a class=\"id\" href=\"#count\">count</a>] = '\\0';", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#temp\">temp</a>, \"%d\", &amp;<a class=\"id\" href=\"#i\">i</a>) != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smack_cipso_direct\">smack_cipso_direct</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#smk_direct_ops\">smk_direct_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#smk_read_direct\">smk_read_direct</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#smk_write_direct\">smk_write_direct</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_read_ambient - read() for /smack/ambient</span>", 
"<span class=\"comment\"> * @filp: file pointer, not actually used</span>", 
"<span class=\"comment\"> * @buf: where to put the result</span>", 
"<span class=\"comment\"> * @cn: maximum to send along</span>", 
"<span class=\"comment\"> * @ppos: where to start</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns number of bytes read or error code, as appropriate</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#smk_read_ambient\">smk_read_ambient</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cn\">cn</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#asize\">asize</a>;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#ppos\">ppos</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Being careful to avoid a problem in the case where</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * smack_net_ambient gets changed in midstream.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#smack_ambient_lock\">smack_ambient_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asize\">asize</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#smack_net_ambient\">smack_net_ambient</a>) + 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cn\">cn</a> >= <a class=\"id\" href=\"#asize\">asize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#cn\">cn</a>, <a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#smack_net_ambient\">smack_net_ambient</a>, <a class=\"id\" href=\"#asize\">asize</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#smack_ambient_lock\">smack_ambient_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_write_ambient - write() for /smack/ambient</span>", 
"<span class=\"comment\"> * @file: file pointer, not actually used</span>", 
"<span class=\"comment\"> * @buf: where to get the data from</span>", 
"<span class=\"comment\"> * @count: bytes sent</span>", 
"<span class=\"comment\"> * @ppos: where to start</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns number of bytes written or error code, as appropriate</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#smk_write_ambient\">smk_write_ambient</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#in\">in</a>[<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#oldambient\">oldambient</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#smack\">smack</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_MAC_ADMIN\">CAP_MAC_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> >= <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smack\">smack</a> = <a class=\"id\" href=\"#smk_import\">smk_import</a>(<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smack\">smack</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#smack_ambient_lock\">smack_ambient_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldambient\">oldambient</a> = <a class=\"id\" href=\"#smack_net_ambient\">smack_net_ambient</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smack_net_ambient\">smack_net_ambient</a> = <a class=\"id\" href=\"#smack\">smack</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_unlbl_ambient\">smk_unlbl_ambient</a>(<a class=\"id\" href=\"#oldambient\">oldambient</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#smack_ambient_lock\">smack_ambient_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#smk_ambient_ops\">smk_ambient_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#smk_read_ambient\">smk_read_ambient</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#smk_write_ambient\">smk_write_ambient</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_read_onlycap - read() for /smack/onlycap</span>", 
"<span class=\"comment\"> * @filp: file pointer, not actually used</span>", 
"<span class=\"comment\"> * @buf: where to put the result</span>", 
"<span class=\"comment\"> * @cn: maximum to send along</span>", 
"<span class=\"comment\"> * @ppos: where to start</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns number of bytes read or error code, as appropriate</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#smk_read_onlycap\">smk_read_onlycap</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cn\">cn</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#smack\">smack</a> = \"\";", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#asize\">asize</a>;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#ppos\">ppos</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smack_onlycap\">smack_onlycap</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack\">smack</a> = <a class=\"id\" href=\"#smack_onlycap\">smack_onlycap</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asize\">asize</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#smack\">smack</a>) + 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cn\">cn</a> >= <a class=\"id\" href=\"#asize\">asize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#cn\">cn</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#smack\">smack</a>, <a class=\"id\" href=\"#asize\">asize</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_write_onlycap - write() for /smack/onlycap</span>", 
"<span class=\"comment\"> * @file: file pointer, not actually used</span>", 
"<span class=\"comment\"> * @buf: where to get the data from</span>", 
"<span class=\"comment\"> * @count: bytes sent</span>", 
"<span class=\"comment\"> * @ppos: where to start</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns number of bytes written or error code, as appropriate</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#smk_write_onlycap\">smk_write_onlycap</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#in\">in</a>[<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_MAC_ADMIN\">CAP_MAC_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This can be done using smk_access() but is done</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * explicitly for clarity. The smk_access() implementation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * would use smk_access(smack_onlycap, MAY_WRITE)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smack_onlycap\">smack_onlycap</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#smack_onlycap\">smack_onlycap</a> != <a class=\"id\" href=\"#sp\">sp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> >= <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Should the null string be passed in unset the onlycap value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This seems like something to be careful with as usually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * smk_import only expects to return NULL for errors. It</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is usually the case that a nullstring or \"\\n\" would be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bad to pass to smk_import but in fact this is useful here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smack_onlycap\">smack_onlycap</a> = <a class=\"id\" href=\"#smk_import\">smk_import</a>(<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#smk_onlycap_ops\">smk_onlycap_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#smk_read_onlycap\">smk_read_onlycap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#smk_write_onlycap\">smk_write_onlycap</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_read_logging - read() for /smack/logging</span>", 
"<span class=\"comment\"> * @filp: file pointer, not actually used</span>", 
"<span class=\"comment\"> * @buf: where to put the result</span>", 
"<span class=\"comment\"> * @cn: maximum to send along</span>", 
"<span class=\"comment\"> * @ppos: where to start</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns number of bytes read or error code, as appropriate</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#smk_read_logging\">smk_read_logging</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#temp\">temp</a>[32];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#ppos\">ppos</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#temp\">temp</a>, \"%d\\n\", <a class=\"id\" href=\"#log_policy\">log_policy</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#temp\">temp</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#temp\">temp</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_write_logging - write() for /smack/logging</span>", 
"<span class=\"comment\"> * @file: file pointer, not actually used</span>", 
"<span class=\"comment\"> * @buf: where to get the data from</span>", 
"<span class=\"comment\"> * @count: bytes sent</span>", 
"<span class=\"comment\"> * @ppos: where to start</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns number of bytes written or error code, as appropriate</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#smk_write_logging\">smk_write_logging</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#temp\">temp</a>[32];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_MAC_ADMIN\">CAP_MAC_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> >= sizeof(<a class=\"id\" href=\"#temp\">temp</a>) || <a class=\"id\" href=\"#count\">count</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#temp\">temp</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#temp\">temp</a>[<a class=\"id\" href=\"#count\">count</a>] = '\\0';", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#temp\">temp</a>, \"%d\", &amp;<a class=\"id\" href=\"#i\">i</a>) != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; 0 || <a class=\"id\" href=\"#i\">i</a> &gt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#log_policy\">log_policy</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#smk_logging_ops\">smk_logging_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#smk_read_logging\">smk_read_logging</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#smk_write_logging\">smk_write_logging</a>,", 
"};", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_fill_super - fill the /smackfs superblock</span>", 
"<span class=\"comment\"> * @sb: the empty superblock</span>", 
"<span class=\"comment\"> * @data: unused</span>", 
"<span class=\"comment\"> * @silent: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fill in the well known entries for /smack</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, an error code on failure</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smk_fill_super\">smk_fill_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, void *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#silent\">silent</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#root_inode\">root_inode</a>;", 
"", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#tree_descr\">tree_descr</a> <a class=\"id\" href=\"#smack_files\">smack_files</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#SMK_LOAD\">SMK_LOAD</a>]<span class=\"ts\"/>=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{\"load\", &amp;<a class=\"id\" href=\"#smk_load_ops\">smk_load_ops</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>|<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>},", 
"<span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#SMK_CIPSO\">SMK_CIPSO</a>]<span class=\"ts\"/>=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{\"cipso\", &amp;<a class=\"id\" href=\"#smk_cipso_ops\">smk_cipso_ops</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>|<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>},", 
"<span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#SMK_DOI\">SMK_DOI</a>]<span class=\"ts\"/>=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{\"doi\", &amp;<a class=\"id\" href=\"#smk_doi_ops\">smk_doi_ops</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>|<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>},", 
"<span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#SMK_DIRECT\">SMK_DIRECT</a>]<span class=\"ts\"/>=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{\"direct\", &amp;<a class=\"id\" href=\"#smk_direct_ops\">smk_direct_ops</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>|<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>},", 
"<span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#SMK_AMBIENT\">SMK_AMBIENT</a>]<span class=\"ts\"/>=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{\"ambient\", &amp;<a class=\"id\" href=\"#smk_ambient_ops\">smk_ambient_ops</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>|<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>},", 
"<span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#SMK_NETLBLADDR\">SMK_NETLBLADDR</a>] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{\"netlabel\", &amp;<a class=\"id\" href=\"#smk_netlbladdr_ops\">smk_netlbladdr_ops</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>|<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>},", 
"<span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#SMK_ONLYCAP\">SMK_ONLYCAP</a>]<span class=\"ts\"/>=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{\"onlycap\", &amp;<a class=\"id\" href=\"#smk_onlycap_ops\">smk_onlycap_ops</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>|<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>},", 
"<span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#SMK_LOGGING\">SMK_LOGGING</a>]<span class=\"ts\"/>=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{\"logging\", &amp;<a class=\"id\" href=\"#smk_logging_ops\">smk_logging_ops</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>|<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>},", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* last one */</span> {\"\"}", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#simple_fill_super\">simple_fill_super</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#SMACK_MAGIC\">SMACK_MAGIC</a>, <a class=\"id\" href=\"#smack_files\">smack_files</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s failed %d while creating inodes\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root_inode\">root_inode</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root_inode\">root_inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a> = <a class=\"id\" href=\"#new_inode_smack\">new_inode_smack</a>(<a class=\"id\" href=\"#smack_known_floor\">smack_known_floor</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_get_sb - get the smackfs superblock</span>", 
"<span class=\"comment\"> * @fs_type: passed along without comment</span>", 
"<span class=\"comment\"> * @flags: passed along without comment</span>", 
"<span class=\"comment\"> * @dev_name: passed along without comment</span>", 
"<span class=\"comment\"> * @data: passed along without comment</span>", 
"<span class=\"comment\"> * @mnt: passed along without comment</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Just passes everything along.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns what the lower level code does.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smk_get_sb\">smk_get_sb</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#flags\">flags</a>, const char *<a class=\"id\" href=\"#dev_name\">dev_name</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_sb_single\">get_sb_single</a>(<a class=\"id\" href=\"#fs_type\">fs_type</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#smk_fill_super\">smk_fill_super</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> <a class=\"id\" href=\"#smk_fs_type\">smk_fs_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"smackfs\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_sb\">get_sb</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#smk_get_sb\">smk_get_sb</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#kill_sb\">kill_sb</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kill_litter_super\">kill_litter_super</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#smackfs_mount\">smackfs_mount</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * init_smk_fs - get the smackfs superblock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * register the smackfs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Do not register smackfs if Smack wasn't enabled</span>", 
"<span class=\"comment\"> * on boot. We can not put this method normally under the</span>", 
"<span class=\"comment\"> * smack_init() code path since the security subsystem get</span>", 
"<span class=\"comment\"> * initialized before the vfs caches.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if we were not chosen on boot or if</span>", 
"<span class=\"comment\"> * we were chosen and filesystem registration succeeded.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_smk_fs\">init_smk_fs</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#security_module_enable\">security_module_enable</a>(&amp;<a class=\"id\" href=\"#smack_ops\">smack_ops</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#register_filesystem\">register_filesystem</a>(&amp;<a class=\"id\" href=\"#smk_fs_type\">smk_fs_type</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smackfs_mount\">smackfs_mount</a> = <a class=\"id\" href=\"#kern_mount\">kern_mount</a>(&amp;<a class=\"id\" href=\"#smk_fs_type\">smk_fs_type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#smackfs_mount\">smackfs_mount</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"smackfs:  could not mount!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#smackfs_mount\">smackfs_mount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smackfs_mount\">smackfs_mount</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_cipso_doi\">smk_cipso_doi</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_unlbl_ambient\">smk_unlbl_ambient</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#__initcall\">__initcall</a>(<a class=\"id\" href=\"#init_smk_fs\">init_smk_fs</a>);", 
];
xr_frag_insert('l/8f/2cdf4e4e23fae47dd8814cc14171917da1fff7.xr', __xr_tmp);
