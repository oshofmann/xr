var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/pnode.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) Copyright IBM Corporation 2005.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Released under GPL v2.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Author : Ram Pai (linuxram@us.ibm.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"pnode.h\"", 
"", 
"<span class=\"comment\">/* return the next shared peer mount of @p */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#next_peer\">next_peer</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_share\">mnt_share</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>, <a class=\"id\" href=\"#mnt_share\">mnt_share</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#first_slave\">first_slave</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_slave_list\">mnt_slave_list</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>, <a class=\"id\" href=\"#mnt_slave\">mnt_slave</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#next_slave\">next_slave</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mnt_slave\">mnt_slave</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>, <a class=\"id\" href=\"#mnt_slave\">mnt_slave</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return true if path is reachable from root</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * namespace_sem is held, and mnt is attached</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_path_reachable\">is_path_reachable</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#mnt\">mnt</a> != <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#mnt\">mnt</a> && <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a> != <a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mnt\">mnt</a> == <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#mnt\">mnt</a> && <a class=\"id\" href=\"#is_subdir\">is_subdir</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#dentry\">dentry</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#get_peer_under_root\">get_peer_under_root</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#mnt_namespace\">mnt_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check the namespace first for optimization */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a> == <a class=\"id\" href=\"#ns\">ns</a> && <a class=\"id\" href=\"#is_path_reachable\">is_path_reachable</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>, <a class=\"id\" href=\"#root\">root</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#next_peer\">next_peer</a>(<a class=\"id\" href=\"#m\">m</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#m\">m</a> != <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get ID of closest dominating peer group having a representative</span>", 
"<span class=\"comment\"> * under the given root.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller must hold namespace_sem</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#get_dominating_id\">get_dominating_id</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, const struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_master\">mnt_master</a>; <a class=\"id\" href=\"#m\">m</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#mnt_master\">mnt_master</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#get_peer_under_root\">get_peer_under_root</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>, <a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#mnt_group_id\">mnt_group_id</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#do_make_slave\">do_make_slave</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#peer_mnt\">peer_mnt</a> = <a class=\"id\" href=\"#mnt\">mnt</a>, *<a class=\"id\" href=\"#master\">master</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_master\">mnt_master</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#slave_mnt\">slave_mnt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * slave 'mnt' to a peer mount that has the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * same root dentry. If none is available then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * slave it to anything that is available.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#peer_mnt\">peer_mnt</a> = <a class=\"id\" href=\"#next_peer\">next_peer</a>(<a class=\"id\" href=\"#peer_mnt\">peer_mnt</a>)) != <a class=\"id\" href=\"#mnt\">mnt</a> &&", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#peer_mnt\">peer_mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a> != <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>) ;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#peer_mnt\">peer_mnt</a> == <a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#peer_mnt\">peer_mnt</a> = <a class=\"id\" href=\"#next_peer\">next_peer</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#peer_mnt\">peer_mnt</a> == <a class=\"id\" href=\"#mnt\">mnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#peer_mnt\">peer_mnt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_MNT_SHARED\">IS_MNT_SHARED</a>(<a class=\"id\" href=\"#mnt\">mnt</a>) && <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_share\">mnt_share</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_release_group_id\">mnt_release_group_id</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_share\">mnt_share</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_group_id\">mnt_group_id</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#peer_mnt\">peer_mnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#master\">master</a> = <a class=\"id\" href=\"#peer_mnt\">peer_mnt</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#master\">master</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#slave_mnt\">slave_mnt</a>, &amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_slave_list\">mnt_slave_list</a>, <a class=\"id\" href=\"#mnt_slave\">mnt_slave</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slave_mnt\">slave_mnt</a>-><a class=\"id\" href=\"#mnt_master\">mnt_master</a> = <a class=\"id\" href=\"#master\">master</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_slave\">mnt_slave</a>, &amp;<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#mnt_slave_list\">mnt_slave_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_splice\">list_splice</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_slave_list\">mnt_slave_list</a>, <a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#mnt_slave_list\">mnt_slave_list</a>.<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_slave_list\">mnt_slave_list</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_slave_list\">mnt_slave_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"                        <a class=\"id\" href=\"#slave_mnt\">slave_mnt</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>, <a class=\"id\" href=\"#mnt_slave\">mnt_slave</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#slave_mnt\">slave_mnt</a>-><a class=\"id\" href=\"#mnt_slave\">mnt_slave</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slave_mnt\">slave_mnt</a>-><a class=\"id\" href=\"#mnt_master\">mnt_master</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_master\">mnt_master</a> = <a class=\"id\" href=\"#master\">master</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CLEAR_MNT_SHARED\">CLEAR_MNT_SHARED</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * vfsmount lock must be held for write</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#change_mnt_propagation\">change_mnt_propagation</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#MS_SHARED\">MS_SHARED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_mnt_shared\">set_mnt_shared</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_make_slave\">do_make_slave</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#MS_SLAVE\">MS_SLAVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_slave\">mnt_slave</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_master\">mnt_master</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#MS_UNBINDABLE\">MS_UNBINDABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> |= <a class=\"id\" href=\"#MNT_UNBINDABLE\">MNT_UNBINDABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &= ~<a class=\"id\" href=\"#MNT_UNBINDABLE\">MNT_UNBINDABLE</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
];
xr_frag_insert('l/8f/c516e29b2a3eac4c261824f555bd144c9c46fb.xr', __xr_tmp);
