var __xr_tmp = [
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Drain async requests before we start sync IO</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_should_idle\">cfq_should_idle</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>) && <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#rq_in_flight\">rq_in_flight</a>[<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is an async queue and we have sync IO in flight, let it wait</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#rq_in_flight\">rq_in_flight</a>[<a class=\"id\" href=\"#BLK_RW_SYNC\">BLK_RW_SYNC</a>] && !<a class=\"id\" href=\"#cfq_cfqq_sync\">cfq_cfqq_sync</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_dispatch\">max_dispatch</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(unsigned int, <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_quantum\">cfq_quantum</a> / 2, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_class_idle\">cfq_class_idle</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_dispatch\">max_dispatch</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Does this cfqq already have too much IO in flight?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#dispatched\">dispatched</a> >= <a class=\"id\" href=\"#max_dispatch\">max_dispatch</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * idle queue must always only have a single IO in flight</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_class_idle\">cfq_class_idle</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We have other queues, don't allow more IO from this one</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#busy_queues\">busy_queues</a> &gt; 1 && <a class=\"id\" href=\"#cfq_slice_used_soon\">cfq_slice_used_soon</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Sole queue user, no limit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#busy_queues\">busy_queues</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_dispatch\">max_dispatch</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Normally we start throttling cfqq when cfq_quantum/2</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * requests have been dispatched. But we can drive</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * deeper queue depths at the beginning of slice</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * subjected to upper limit of cfq_quantum.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_dispatch\">max_dispatch</a> = <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_quantum\">cfq_quantum</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Async queues must wait a bit before being allowed dispatch.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We also ramp up the dispatch depth gradually for async IO,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * based on the last sync IO we serviced</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfq_cfqq_sync\">cfq_cfqq_sync</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>) && <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_latency\">cfq_latency</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#last_sync\">last_sync</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#last_delayed_sync\">last_delayed_sync</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#depth\">depth</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#depth\">depth</a> = <a class=\"id\" href=\"#last_sync\">last_sync</a> / <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_slice\">cfq_slice</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#depth\">depth</a> && !<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#dispatched\">dispatched</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#depth\">depth</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#depth\">depth</a> &lt; <a class=\"id\" href=\"#max_dispatch\">max_dispatch</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_dispatch\">max_dispatch</a> = <a class=\"id\" href=\"#depth\">depth</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we're below the current max, allow a dispatch</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#dispatched\">dispatched</a> &lt; <a class=\"id\" href=\"#max_dispatch\">max_dispatch</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Dispatch a request from cfqq, moving them to the request queue</span>", 
"<span class=\"comment\"> * dispatch list.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cfq_dispatch_request\">cfq_dispatch_request</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#RB_EMPTY_ROOT\">RB_EMPTY_ROOT</a>(&amp;<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#sort_list\">sort_list</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfq_may_dispatch\">cfq_may_dispatch</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * follow expired path, else get first next available</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cfq_check_fifo\">cfq_check_fifo</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rq\">rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * insert request into driver dispatch list</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_dispatch_insert\">cfq_dispatch_insert</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#active_cic\">active_cic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a> = <a class=\"id\" href=\"#RQ_CIC\">RQ_CIC</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_inc\">atomic_long_inc</a>(&amp;<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#refcount\">refcount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#active_cic\">active_cic</a> = <a class=\"id\" href=\"#cic\">cic</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Find the cfqq that we need to service and move a request from that to the</span>", 
"<span class=\"comment\"> * dispatch list</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cfq_dispatch_requests\">cfq_dispatch_requests</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, int <a class=\"id\" href=\"#force\">force</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#elevator\">elevator</a>-><a class=\"id\" href=\"#elevator_data\">elevator_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#busy_queues\">busy_queues</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#force\">force</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cfq_forced_dispatch\">cfq_forced_dispatch</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a> = <a class=\"id\" href=\"#cfq_select_queue\">cfq_select_queue</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Dispatch a request from this cfqq, if it is allowed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfq_dispatch_request\">cfq_dispatch_request</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#slice_dispatch\">slice_dispatch</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_clear_cfqq_must_dispatch\">cfq_clear_cfqq_must_dispatch</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * expire an async queue immediately if it has used up its slice. idle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * queue always expire after 1 dispatch round.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#busy_queues\">busy_queues</a> &gt; 1 && ((!<a class=\"id\" href=\"#cfq_cfqq_sync\">cfq_cfqq_sync</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#slice_dispatch\">slice_dispatch</a> >= <a class=\"id\" href=\"#cfq_prio_to_maxrq\">cfq_prio_to_maxrq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>)) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cfq_class_idle\">cfq_class_idle</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#slice_end\">slice_end</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_slice_expired\">cfq_slice_expired</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_log_cfqq\">cfq_log_cfqq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, \"dispatched a request\");", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * task holds one reference to the queue, dropped when task exits. each rq</span>", 
"<span class=\"comment\"> * in-flight on this queue also holds a reference, dropped when rq is freed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each cfq queue took a reference on the parent group. Drop it now.</span>", 
"<span class=\"comment\"> * queue lock must be held here.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cfq_put_queue\">cfq_put_queue</a>(struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a> = <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#cfqd\">cfqd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> *<a class=\"id\" href=\"#cfqg\">cfqg</a>, *<a class=\"id\" href=\"#orig_cfqg\">orig_cfqg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ref\">ref</a>) <= 0);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ref\">ref</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_log_cfqq\">cfq_log_cfqq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, \"put_queue\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#rb_first\">rb_first</a>(&amp;<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#sort_list\">sort_list</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#allocated\">allocated</a>[<a class=\"id\" href=\"#READ\">READ</a>] + <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#allocated\">allocated</a>[<a class=\"id\" href=\"#WRITE\">WRITE</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqg\">cfqg</a> = <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#cfqg\">cfqg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#orig_cfqg\">orig_cfqg</a> = <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#orig_cfqg\">orig_cfqg</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#active_queue\">active_queue</a> == <a class=\"id\" href=\"#cfqq\">cfqq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__cfq_slice_expired\">__cfq_slice_expired</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_schedule_dispatch\">cfq_schedule_dispatch</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cfq_cfqq_on_rr\">cfq_cfqq_on_rr</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#cfq_pool\">cfq_pool</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_put_cfqg\">cfq_put_cfqg</a>(<a class=\"id\" href=\"#cfqg\">cfqg</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#orig_cfqg\">orig_cfqg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_put_cfqg\">cfq_put_cfqg</a>(<a class=\"id\" href=\"#orig_cfqg\">orig_cfqg</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Must always be called with the rcu_read_lock() held</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#__call_for_each_cic\">__call_for_each_cic</a>(struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#io_context\">io_context</a> *, struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#cic\">cic</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#cic_list\">cic_list</a>, <a class=\"id\" href=\"#cic_list\">cic_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#ioc\">ioc</a>, <a class=\"id\" href=\"#cic\">cic</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call func for each cic attached to this ioc.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#call_for_each_cic\">call_for_each_cic</a>(struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#io_context\">io_context</a> *, struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__call_for_each_cic\">__call_for_each_cic</a>(<a class=\"id\" href=\"#ioc\">ioc</a>, <a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cfq_cic_free_rcu\">cfq_cic_free_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#cfq_ioc_pool\">cfq_ioc_pool</a>, <a class=\"id\" href=\"#cic\">cic</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elv_ioc_count_dec\">elv_ioc_count_dec</a>(<a class=\"id\" href=\"#cfq_ioc_count\">cfq_ioc_count</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ioc_gone\">ioc_gone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * CFQ scheduler is exiting, grab exit lock and check</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the pending io context count. If it hits zero,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * complete ioc_gone and set it back to NULL</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ioc_gone_lock\">ioc_gone_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ioc_gone\">ioc_gone</a> && !<a class=\"id\" href=\"#elv_ioc_count_read\">elv_ioc_count_read</a>(<a class=\"id\" href=\"#cfq_ioc_count\">cfq_ioc_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(<a class=\"id\" href=\"#ioc_gone\">ioc_gone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ioc_gone\">ioc_gone</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ioc_gone_lock\">ioc_gone_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cfq_cic_free\">cfq_cic_free</a>(struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#cfq_cic_free_rcu\">cfq_cic_free_rcu</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cic_free_func\">cic_free_func</a>(struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>, struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dead_key\">dead_key</a> = (unsigned long) <a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#dead_key\">dead_key</a> &amp; <a class=\"id\" href=\"#CIC_DEAD_KEY\">CIC_DEAD_KEY</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_delete\">radix_tree_delete</a>(&amp;<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#radix_root\">radix_root</a>, <a class=\"id\" href=\"#dead_key\">dead_key</a> >> <a class=\"id\" href=\"#CIC_DEAD_INDEX_SHIFT\">CIC_DEAD_INDEX_SHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_rcu\">hlist_del_rcu</a>(&amp;<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#cic_list\">cic_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_cic_free\">cfq_cic_free</a>(<a class=\"id\" href=\"#cic\">cic</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Must be called with rcu_read_lock() held or preemption otherwise disabled.</span>", 
"<span class=\"comment\"> * Only two callers of this - -&gt;dtor() which is called with the rcu_read_lock(),</span>", 
"<span class=\"comment\"> * and -&gt;trim() which is called with the task lock held</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cfq_free_io_context\">cfq_free_io_context</a>(struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ioc-&gt;refcount is zero here, or we are called from elv_unregister(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so no more cic's are allowed to be linked into this ioc.  So it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should be ok to iterate over the known list, we will see all cic's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * since no new ones are added.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__call_for_each_cic\">__call_for_each_cic</a>(<a class=\"id\" href=\"#ioc\">ioc</a>, <a class=\"id\" href=\"#cic_free_func\">cic_free_func</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cfq_put_cooperator\">cfq_put_cooperator</a>(struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#__cfqq\">__cfqq</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this queue was scheduled to merge with another queue, be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sure to drop the reference taken on that queue (and others in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the merge chain).  See cfq_setup_merge and cfq_merge_cfqqs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__cfqq\">__cfqq</a> = <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#__cfqq\">__cfqq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__cfqq\">__cfqq</a> == <a class=\"id\" href=\"#cfqq\">cfqq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"cfqq->new_cfqq loop detected\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#__cfqq\">__cfqq</a>-><a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_put_queue\">cfq_put_queue</a>(<a class=\"id\" href=\"#__cfqq\">__cfqq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__cfqq\">__cfqq</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cfq_exit_cfqq\">cfq_exit_cfqq</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a> == <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#active_queue\">active_queue</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__cfq_slice_expired\">__cfq_slice_expired</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_schedule_dispatch\">cfq_schedule_dispatch</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_put_cooperator\">cfq_put_cooperator</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_put_queue\">cfq_put_queue</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cfq_exit_single_io_context\">__cfq_exit_single_io_context</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a> = <a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ioc\">ioc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#queue_list\">queue_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure dead mark is seen for dead queues</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#cfqd_dead_key\">cfqd_dead_key</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#ioc_data\">ioc_data</a> == <a class=\"id\" href=\"#cic\">cic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#ioc_data\">ioc_data</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#cfqq\">cfqq</a>[<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_exit_cfqq\">cfq_exit_cfqq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#cfqq\">cfqq</a>[<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#cfqq\">cfqq</a>[<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#cfqq\">cfqq</a>[<a class=\"id\" href=\"#BLK_RW_SYNC\">BLK_RW_SYNC</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_exit_cfqq\">cfq_exit_cfqq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#cfqq\">cfqq</a>[<a class=\"id\" href=\"#BLK_RW_SYNC\">BLK_RW_SYNC</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#cfqq\">cfqq</a>[<a class=\"id\" href=\"#BLK_RW_SYNC\">BLK_RW_SYNC</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cfq_exit_single_io_context\">cfq_exit_single_io_context</a>(struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a> = <a class=\"id\" href=\"#cic_to_cfqd\">cic_to_cfqd</a>(<a class=\"id\" href=\"#cic\">cic</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqd\">cfqd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ensure we get a fresh copy of the -&gt;key to prevent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * race between exiting task and queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_read_barrier_depends\">smp_read_barrier_depends</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#key\">key</a> == <a class=\"id\" href=\"#cfqd\">cfqd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__cfq_exit_single_io_context\">__cfq_exit_single_io_context</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cic\">cic</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The process that ioc belongs to has exited, we need to clean up</span>", 
"<span class=\"comment\"> * and put the internal structures we have that belongs to that process.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cfq_exit_io_context\">cfq_exit_io_context</a>(struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_for_each_cic\">call_for_each_cic</a>(<a class=\"id\" href=\"#ioc\">ioc</a>, <a class=\"id\" href=\"#cfq_exit_single_io_context\">cfq_exit_single_io_context</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *", 
"<a class=\"id\" href=\"#cfq_alloc_io_context\">cfq_alloc_io_context</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a> = <a class=\"id\" href=\"#kmem_cache_alloc_node\">kmem_cache_alloc_node</a>(<a class=\"id\" href=\"#cfq_ioc_pool\">cfq_ioc_pool</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cic\">cic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#last_end_request\">last_end_request</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#queue_list\">queue_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(&amp;<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#cic_list\">cic_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#dtor\">dtor</a> = <a class=\"id\" href=\"#cfq_free_io_context\">cfq_free_io_context</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#exit\">exit</a> = <a class=\"id\" href=\"#cfq_exit_io_context\">cfq_exit_io_context</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elv_ioc_count_inc\">elv_ioc_count_inc</a>(<a class=\"id\" href=\"#cfq_ioc_count\">cfq_ioc_count</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cic\">cic</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cfq_init_prio_data\">cfq_init_prio_data</a>(struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>, struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ioprio_class\">ioprio_class</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfq_cfqq_prio_changed\">cfq_cfqq_prio_changed</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioprio_class\">ioprio_class</a> = <a class=\"id\" href=\"#IOPRIO_PRIO_CLASS\">IOPRIO_PRIO_CLASS</a>(<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#ioprio_class\">ioprio_class</a>) {", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"cfq: bad prio %x\\n\", <a class=\"id\" href=\"#ioprio_class\">ioprio_class</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IOPRIO_CLASS_NONE\">IOPRIO_CLASS_NONE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * no prio set, inherit CPU scheduling settings</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a> = <a class=\"id\" href=\"#task_nice_ioprio\">task_nice_ioprio</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ioprio_class\">ioprio_class</a> = <a class=\"id\" href=\"#task_nice_ioclass\">task_nice_ioclass</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IOPRIO_CLASS_RT\">IOPRIO_CLASS_RT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a> = <a class=\"id\" href=\"#task_ioprio\">task_ioprio</a>(<a class=\"id\" href=\"#ioc\">ioc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ioprio_class\">ioprio_class</a> = <a class=\"id\" href=\"#IOPRIO_CLASS_RT\">IOPRIO_CLASS_RT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IOPRIO_CLASS_BE\">IOPRIO_CLASS_BE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a> = <a class=\"id\" href=\"#task_ioprio\">task_ioprio</a>(<a class=\"id\" href=\"#ioc\">ioc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ioprio_class\">ioprio_class</a> = <a class=\"id\" href=\"#IOPRIO_CLASS_BE\">IOPRIO_CLASS_BE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IOPRIO_CLASS_IDLE\">IOPRIO_CLASS_IDLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ioprio_class\">ioprio_class</a> = <a class=\"id\" href=\"#IOPRIO_CLASS_IDLE\">IOPRIO_CLASS_IDLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a> = 7;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_clear_cfqq_idle_window\">cfq_clear_cfqq_idle_window</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * keep track of original prio settings in case we have to temporarily</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * elevate the priority of this queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#org_ioprio\">org_ioprio</a> = <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#org_ioprio_class\">org_ioprio_class</a> = <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ioprio_class\">ioprio_class</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_clear_cfqq_prio_changed\">cfq_clear_cfqq_prio_changed</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#changed_ioprio\">changed_ioprio</a>(struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>, struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a> = <a class=\"id\" href=\"#cic_to_cfqd\">cic_to_cfqd</a>(<a class=\"id\" href=\"#cic\">cic</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#cfqd\">cfqd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a> = <a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#cfqq\">cfqq</a>[<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqq\">cfqq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_cfqq\">new_cfqq</a> = <a class=\"id\" href=\"#cfq_get_queue\">cfq_get_queue</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>, <a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ioc\">ioc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#cfqq\">cfqq</a>[<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>] = <a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_put_queue\">cfq_put_queue</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a> = <a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#cfqq\">cfqq</a>[<a class=\"id\" href=\"#BLK_RW_SYNC\">BLK_RW_SYNC</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_mark_cfqq_prio_changed\">cfq_mark_cfqq_prio_changed</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cfq_ioc_set_ioprio\">cfq_ioc_set_ioprio</a>(struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_for_each_cic\">call_for_each_cic</a>(<a class=\"id\" href=\"#ioc\">ioc</a>, <a class=\"id\" href=\"#changed_ioprio\">changed_ioprio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#ioprio_changed\">ioprio_changed</a> = 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cfq_init_cfqq\">cfq_init_cfqq</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_sync\">is_sync</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RB_CLEAR_NODE\">RB_CLEAR_NODE</a>(&amp;<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RB_CLEAR_NODE\">RB_CLEAR_NODE</a>(&amp;<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#p_node\">p_node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#fifo\">fifo</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ref\">ref</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#cfqd\">cfqd</a> = <a class=\"id\" href=\"#cfqd\">cfqd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_mark_cfqq_prio_changed\">cfq_mark_cfqq_prio_changed</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_sync\">is_sync</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfq_class_idle\">cfq_class_idle</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_mark_cfqq_idle_window\">cfq_mark_cfqq_idle_window</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_mark_cfqq_sync\">cfq_mark_cfqq_sync</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CFQ_GROUP_IOSCHED\">CONFIG_CFQ_GROUP_IOSCHED</a>", 
"static void <a class=\"id\" href=\"#changed_cgroup\">changed_cgroup</a>(struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>, struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#sync_cfqq\">sync_cfqq</a> = <a class=\"id\" href=\"#cic_to_cfqq\">cic_to_cfqq</a>(<a class=\"id\" href=\"#cic\">cic</a>, 1);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a> = <a class=\"id\" href=\"#cic_to_cfqd\">cic_to_cfqd</a>(<a class=\"id\" href=\"#cic\">cic</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#cfqd\">cfqd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sync_cfqq\">sync_cfqq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Drop reference to sync queue. A new sync queue will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * assigned in new group upon arrival of a fresh request.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_log_cfqq\">cfq_log_cfqq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#sync_cfqq\">sync_cfqq</a>, \"changed cgroup\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cic_set_cfqq\">cic_set_cfqq</a>(<a class=\"id\" href=\"#cic\">cic</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_put_queue\">cfq_put_queue</a>(<a class=\"id\" href=\"#sync_cfqq\">sync_cfqq</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cfq_ioc_set_cgroup\">cfq_ioc_set_cgroup</a>(struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_for_each_cic\">call_for_each_cic</a>(<a class=\"id\" href=\"#ioc\">ioc</a>, <a class=\"id\" href=\"#changed_cgroup\">changed_cgroup</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#cgroup_changed\">cgroup_changed</a> = 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>  <span class=\"comment\">/* CONFIG_CFQ_GROUP_IOSCHED */</span>", 
"", 
"static struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *", 
"<a class=\"id\" href=\"#cfq_find_alloc_queue\">cfq_find_alloc_queue</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_sync\">is_sync</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>, *<a class=\"id\" href=\"#new_cfqq\">new_cfqq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> *<a class=\"id\" href=\"#cfqg\">cfqg</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqg\">cfqg</a> = <a class=\"id\" href=\"#cfq_get_cfqg\">cfq_get_cfqg</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a> = <a class=\"id\" href=\"#cfq_cic_lookup\">cfq_cic_lookup</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#ioc\">ioc</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* cic always exists here */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a> = <a class=\"id\" href=\"#cic_to_cfqq\">cic_to_cfqq</a>(<a class=\"id\" href=\"#cic\">cic</a>, <a class=\"id\" href=\"#is_sync\">is_sync</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Always try a new alloc if we fell back to the OOM cfqq</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * originally, since it should just be a temporary situation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfqq\">cfqq</a> || <a class=\"id\" href=\"#cfqq\">cfqq</a> == &amp;<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#oom_cfqq\">oom_cfqq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a> = <a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_cfqq\">new_cfqq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_cfqq\">new_cfqq</a> = <a class=\"id\" href=\"#kmem_cache_alloc_node\">kmem_cache_alloc_node</a>(<a class=\"id\" href=\"#cfq_pool\">cfq_pool</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a> = <a class=\"id\" href=\"#kmem_cache_alloc_node\">kmem_cache_alloc_node</a>(<a class=\"id\" href=\"#cfq_pool\">cfq_pool</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqq\">cfqq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_init_cfqq\">cfq_init_cfqq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#is_sync\">is_sync</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_init_prio_data\">cfq_init_prio_data</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>, <a class=\"id\" href=\"#ioc\">ioc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_link_cfqq_cfqg\">cfq_link_cfqq_cfqg</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>, <a class=\"id\" href=\"#cfqg\">cfqg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_log_cfqq\">cfq_log_cfqq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, \"alloced\");", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a> = &amp;<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#oom_cfqq\">oom_cfqq</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#cfq_pool\">cfq_pool</a>, <a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cfqq\">cfqq</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> **", 
"<a class=\"id\" href=\"#cfq_async_queue_prio\">cfq_async_queue_prio</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, int <a class=\"id\" href=\"#ioprio_class\">ioprio_class</a>, int <a class=\"id\" href=\"#ioprio\">ioprio</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#ioprio_class\">ioprio_class</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IOPRIO_CLASS_RT\">IOPRIO_CLASS_RT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#async_cfqq\">async_cfqq</a>[0][<a class=\"id\" href=\"#ioprio\">ioprio</a>];", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IOPRIO_CLASS_BE\">IOPRIO_CLASS_BE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#async_cfqq\">async_cfqq</a>[1][<a class=\"id\" href=\"#ioprio\">ioprio</a>];", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IOPRIO_CLASS_IDLE\">IOPRIO_CLASS_IDLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#async_idle_cfqq\">async_idle_cfqq</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *", 
"<a class=\"id\" href=\"#cfq_get_queue\">cfq_get_queue</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_sync\">is_sync</a>, struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>,", 
"<span class=\"ts\"/>      <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#ioprio\">ioprio</a> = <a class=\"id\" href=\"#task_ioprio\">task_ioprio</a>(<a class=\"id\" href=\"#ioc\">ioc</a>);", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#ioprio_class\">ioprio_class</a> = <a class=\"id\" href=\"#task_ioprio_class\">task_ioprio_class</a>(<a class=\"id\" href=\"#ioc\">ioc</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> **<a class=\"id\" href=\"#async_cfqq\">async_cfqq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_sync\">is_sync</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#async_cfqq\">async_cfqq</a> = <a class=\"id\" href=\"#cfq_async_queue_prio\">cfq_async_queue_prio</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#ioprio_class\">ioprio_class</a>, <a class=\"id\" href=\"#ioprio\">ioprio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a> = *<a class=\"id\" href=\"#async_cfqq\">async_cfqq</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a> = <a class=\"id\" href=\"#cfq_find_alloc_queue\">cfq_find_alloc_queue</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#is_sync\">is_sync</a>, <a class=\"id\" href=\"#ioc\">ioc</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pin the queue now that it's allocated, scheduler exit will prune it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_sync\">is_sync</a> && !(*<a class=\"id\" href=\"#async_cfqq\">async_cfqq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ref\">ref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#async_cfqq\">async_cfqq</a> = <a class=\"id\" href=\"#cfqq\">cfqq</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ref\">ref</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cfqq\">cfqq</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We drop cfq io contexts lazily, so we may find a dead one.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#cfq_drop_dead_cic\">cfq_drop_dead_cic</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#queue_list\">queue_list</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#key\">key</a> != <a class=\"id\" href=\"#cfqd_dead_key\">cfqd_dead_key</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#ioc_data\">ioc_data</a> == <a class=\"id\" href=\"#cic\">cic</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_delete\">radix_tree_delete</a>(&amp;<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#radix_root\">radix_root</a>, <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cic_index\">cic_index</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_rcu\">hlist_del_rcu</a>(&amp;<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#cic_list\">cic_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_cic_free\">cfq_cic_free</a>(<a class=\"id\" href=\"#cic\">cic</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *", 
"<a class=\"id\" href=\"#cfq_cic_lookup\">cfq_cic_lookup</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#ioc\">ioc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we maintain a last-hit cache, to avoid browsing over the tree</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#ioc_data\">ioc_data</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cic\">cic</a> && <a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#key\">key</a> == <a class=\"id\" href=\"#cfqd\">cfqd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cic\">cic</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a> = <a class=\"id\" href=\"#radix_tree_lookup\">radix_tree_lookup</a>(&amp;<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#radix_root\">radix_root</a>, <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cic_index\">cic_index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cic\">cic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#key\">key</a> != <a class=\"id\" href=\"#cfqd\">cfqd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_drop_dead_cic\">cfq_drop_dead_cic</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#ioc\">ioc</a>, <a class=\"id\" href=\"#cic\">cic</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#ioc_data\">ioc_data</a>, <a class=\"id\" href=\"#cic\">cic</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>} while (1);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cic\">cic</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add cic into ioc, using cfqd as the search key. This enables us to lookup</span>", 
"<span class=\"comment\"> * the process specific cfq io context when entered from the block layer.</span>", 
"<span class=\"comment\"> * Also adds the cic to a per-cfqd list, used when this queue is removed.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cfq_cic_link\">cfq_cic_link</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#radix_tree_preload\">radix_tree_preload</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ioc\">ioc</a> = <a class=\"id\" href=\"#ioc\">ioc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#cfqd\">cfqd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#radix_tree_insert\">radix_tree_insert</a>(&amp;<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#radix_root\">radix_root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cic_index\">cic_index</a>, <a class=\"id\" href=\"#cic\">cic</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#cic_list\">cic_list</a>, &amp;<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#cic_list\">cic_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_preload_end\">radix_tree_preload_end</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#queue_list\">queue_list</a>, &amp;<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cic_list\">cic_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"cfq: cic link failed!\\n\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setup general io context and cfq io context. There can be several cfq</span>", 
"<span class=\"comment\"> * io contexts per general io context, if this process is doing io to more</span>", 
"<span class=\"comment\"> * than one device managed by cfq.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *", 
"<a class=\"id\" href=\"#cfq_get_io_context\">cfq_get_io_context</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep_if\">might_sleep_if</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioc\">ioc</a> = <a class=\"id\" href=\"#get_io_context\">get_io_context</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ioc\">ioc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a> = <a class=\"id\" href=\"#cfq_cic_lookup\">cfq_cic_lookup</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#ioc\">ioc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cic\">cic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a> = <a class=\"id\" href=\"#cfq_alloc_io_context\">cfq_alloc_io_context</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cic\">cic</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_cic_link\">cfq_cic_link</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#ioc\">ioc</a>, <a class=\"id\" href=\"#cic\">cic</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free\">err_free</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_read_barrier_depends\">smp_read_barrier_depends</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#ioprio_changed\">ioprio_changed</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_ioc_set_ioprio\">cfq_ioc_set_ioprio</a>(<a class=\"id\" href=\"#ioc\">ioc</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CFQ_GROUP_IOSCHED\">CONFIG_CFQ_GROUP_IOSCHED</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#cgroup_changed\">cgroup_changed</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_ioc_set_cgroup\">cfq_ioc_set_cgroup</a>(<a class=\"id\" href=\"#ioc\">ioc</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cic\">cic</a>;", 
"<a class=\"id\" href=\"#err_free\">err_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_cic_free\">cfq_cic_free</a>(<a class=\"id\" href=\"#cic\">cic</a>);", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_io_context\">put_io_context</a>(<a class=\"id\" href=\"#ioc\">ioc</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#cfq_update_io_thinktime\">cfq_update_io_thinktime</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#elapsed\">elapsed</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#last_end_request\">last_end_request</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ttime\">ttime</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#elapsed\">elapsed</a>, 2UL * <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_slice_idle\">cfq_slice_idle</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ttime_samples\">ttime_samples</a> = (7*<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ttime_samples\">ttime_samples</a> + 256) / 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ttime_total\">ttime_total</a> = (7*<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ttime_total\">ttime_total</a> + 256*<a class=\"id\" href=\"#ttime\">ttime</a>) / 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ttime_mean\">ttime_mean</a> = (<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ttime_total\">ttime_total</a> + 128) / <a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ttime_samples\">ttime_samples</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#cfq_update_io_seektime\">cfq_update_io_seektime</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sdist\">sdist</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#n_sec\">n_sec</a> = <a class=\"id\" href=\"#blk_rq_sectors\">blk_rq_sectors</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#last_request_pos\">last_request_pos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#last_request_pos\">last_request_pos</a> &lt; <a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#rq\">rq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdist\">sdist</a> = <a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#rq\">rq</a>) - <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#last_request_pos\">last_request_pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdist\">sdist</a> = <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#last_request_pos\">last_request_pos</a> - <a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#seek_history\">seek_history</a> <<= 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_queue_nonrot\">blk_queue_nonrot</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#seek_history\">seek_history</a> |= (<a class=\"id\" href=\"#n_sec\">n_sec</a> &lt; <a class=\"id\" href=\"#CFQQ_SECT_THR_NONROT\">CFQQ_SECT_THR_NONROT</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#seek_history\">seek_history</a> |= (<a class=\"id\" href=\"#sdist\">sdist</a> &gt; <a class=\"id\" href=\"#CFQQ_SEEK_THR\">CFQQ_SEEK_THR</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Disable idle window if the process thinks too long or seeks so much that</span>", 
"<span class=\"comment\"> * it doesn't matter</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#cfq_update_idle_window\">cfq_update_idle_window</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_idle\">old_idle</a>, <a class=\"id\" href=\"#enable_idle\">enable_idle</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't idle for async or idle io prio class</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfq_cfqq_sync\">cfq_cfqq_sync</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>) || <a class=\"id\" href=\"#cfq_class_idle\">cfq_class_idle</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_idle\">enable_idle</a> = <a class=\"id\" href=\"#old_idle\">old_idle</a> = <a class=\"id\" href=\"#cfq_cfqq_idle_window\">cfq_cfqq_idle_window</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#queued\">queued</a>[0] + <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#queued\">queued</a>[1] >= 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_mark_cfqq_deep\">cfq_mark_cfqq_deep</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#nr_tasks\">nr_tasks</a>) || !<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_slice_idle\">cfq_slice_idle</a> ||", 
"<span class=\"ts\"/>    (!<a class=\"id\" href=\"#cfq_cfqq_deep\">cfq_cfqq_deep</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>) && <a class=\"id\" href=\"#CFQQ_SEEKY\">CFQQ_SEEKY</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_idle\">enable_idle</a> = 0;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#sample_valid\">sample_valid</a>(<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ttime_samples\">ttime_samples</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ttime_mean\">ttime_mean</a> &gt; <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_slice_idle\">cfq_slice_idle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_idle\">enable_idle</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_idle\">enable_idle</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_idle\">old_idle</a> != <a class=\"id\" href=\"#enable_idle\">enable_idle</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_log_cfqq\">cfq_log_cfqq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, \"idle=%d\", <a class=\"id\" href=\"#enable_idle\">enable_idle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#enable_idle\">enable_idle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_mark_cfqq_idle_window\">cfq_mark_cfqq_idle_window</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_clear_cfqq_idle_window\">cfq_clear_cfqq_idle_window</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check if new_cfqq should preempt the currently active queue. Return 0 for</span>", 
"<span class=\"comment\"> * no or if we aren't sure, a 1 will cause a preempt.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a>", 
"<a class=\"id\" href=\"#cfq_should_preempt\">cfq_should_preempt</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a> = <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#active_queue\">active_queue</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_class_idle\">cfq_class_idle</a>(<a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_class_idle\">cfq_class_idle</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't allow a non-RT request to preempt an ongoing RT cfqq timeslice.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_class_rt\">cfq_class_rt</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>) && !<a class=\"id\" href=\"#cfq_class_rt\">cfq_class_rt</a>(<a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the new request is sync, but the currently running queue is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not, let the sync request have priority.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq_is_sync\">rq_is_sync</a>(<a class=\"id\" href=\"#rq\">rq</a>) && !<a class=\"id\" href=\"#cfq_cfqq_sync\">cfq_cfqq_sync</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>-><a class=\"id\" href=\"#cfqg\">cfqg</a> != <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#cfqg\">cfqg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_slice_used\">cfq_slice_used</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allow preemption only if we are idling on sync-noidle tree */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#serving_type\">serving_type</a> == <a class=\"id\" href=\"#SYNC_NOIDLE_WORKLOAD\">SYNC_NOIDLE_WORKLOAD</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cfqq_type\">cfqq_type</a>(<a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>) == <a class=\"id\" href=\"#SYNC_NOIDLE_WORKLOAD\">SYNC_NOIDLE_WORKLOAD</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>-><a class=\"id\" href=\"#service_tree\">service_tree</a>-><a class=\"id\" href=\"#count\">count</a> == 2 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#RB_EMPTY_ROOT\">RB_EMPTY_ROOT</a>(&amp;<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#sort_list\">sort_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So both queues are sync. Let the new request get disk time if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it's a metadata request and the current queue is doing regular IO.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_META\">REQ_META</a>) && !<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#meta_pending\">meta_pending</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allow an RT request to pre-empt an ongoing non-RT cfqq timeslice.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_class_rt\">cfq_class_rt</a>(<a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>) && !<a class=\"id\" href=\"#cfq_class_rt\">cfq_class_rt</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#active_cic\">active_cic</a> || !<a class=\"id\" href=\"#cfq_cfqq_wait_request\">cfq_cfqq_wait_request</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if this request is as-good as one we would expect from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current cfqq, let it preempt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_rq_close\">cfq_rq_close</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, <a class=\"id\" href=\"#rq\">rq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cfqq preempts the active queue. if we allowed preempt with no slice left,</span>", 
"<span class=\"comment\"> * let it have half of its nominal slice.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cfq_preempt_queue\">cfq_preempt_queue</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_log_cfqq\">cfq_log_cfqq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, \"preempt\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_slice_expired\">cfq_slice_expired</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Put the new queue at the front of the of the current list,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so we know that it will be selected next.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#cfq_cfqq_on_rr\">cfq_cfqq_on_rr</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_service_tree_add\">cfq_service_tree_add</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#slice_end\">slice_end</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_mark_cfqq_slice_new\">cfq_mark_cfqq_slice_new</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called when a new fs request (rq) is added (to cfqq). Check if there's</span>", 
"<span class=\"comment\"> * something we should do about it</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#cfq_rq_enqueued\">cfq_rq_enqueued</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a> = <a class=\"id\" href=\"#RQ_CIC\">RQ_CIC</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#rq_queued\">rq_queued</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_META\">REQ_META</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#meta_pending\">meta_pending</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_update_io_thinktime\">cfq_update_io_thinktime</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cic\">cic</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_update_io_seektime\">cfq_update_io_seektime</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_update_idle_window\">cfq_update_idle_window</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, <a class=\"id\" href=\"#cic\">cic</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#last_request_pos\">last_request_pos</a> = <a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#rq\">rq</a>) + <a class=\"id\" href=\"#blk_rq_sectors\">blk_rq_sectors</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqq\">cfqq</a> == <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#active_queue\">active_queue</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Remember that we saw a request from this process, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * don't start queuing just yet. Otherwise we risk seeing lots</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of tiny requests, because we disrupt the normal plugging</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and merging. If the request is already larger than a single</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * page, let it rip immediately. For that case we assume that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * merging is already done. Ditto for a busy system that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * has other work pending, don't risk delaying until the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * idle timer unplug to continue working.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_cfqq_wait_request\">cfq_cfqq_wait_request</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>) &gt; <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#busy_queues\">busy_queues</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_del_timer\">cfq_del_timer</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_clear_cfqq_wait_request\">cfq_clear_cfqq_wait_request</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__blk_run_queue\">__blk_run_queue</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_blkiocg_update_idle_time_stats\">cfq_blkiocg_update_idle_time_stats</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#blkg\">blkg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_mark_cfqq_must_dispatch\">cfq_mark_cfqq_must_dispatch</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#cfq_should_preempt\">cfq_should_preempt</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, <a class=\"id\" href=\"#rq\">rq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not the active queue - expire current slice if it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * idle and has expired it's mean thinktime or this new queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * has some old slice time left and is of higher priority or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this new queue is RT and the current one is BE</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_preempt_queue\">cfq_preempt_queue</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__blk_run_queue\">__blk_run_queue</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cfq_insert_request\">cfq_insert_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#elevator\">elevator</a>-><a class=\"id\" href=\"#elevator_data\">elevator_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a> = <a class=\"id\" href=\"#RQ_CFQQ\">RQ_CFQQ</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_log_cfqq\">cfq_log_cfqq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, \"insert_request\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_init_prio_data\">cfq_init_prio_data</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>, <a class=\"id\" href=\"#RQ_CIC\">RQ_CIC</a>(<a class=\"id\" href=\"#rq\">rq</a>)-><a class=\"id\" href=\"#ioc\">ioc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq_set_fifo_time\">rq_set_fifo_time</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_fifo_expire\">cfq_fifo_expire</a>[<a class=\"id\" href=\"#rq_is_sync\">rq_is_sync</a>(<a class=\"id\" href=\"#rq\">rq</a>)]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#queuelist\">queuelist</a>, &amp;<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#fifo\">fifo</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_add_rq_rb\">cfq_add_rq_rb</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_blkiocg_update_io_add_stats\">cfq_blkiocg_update_io_add_stats</a>(&amp;(<a class=\"id\" href=\"#RQ_CFQG\">RQ_CFQG</a>(<a class=\"id\" href=\"#rq\">rq</a>))-><a class=\"id\" href=\"#blkg\">blkg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#serving_group\">serving_group</a>-><a class=\"id\" href=\"#blkg\">blkg</a>, <a class=\"id\" href=\"#rq_data_dir\">rq_data_dir</a>(<a class=\"id\" href=\"#rq\">rq</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_is_sync\">rq_is_sync</a>(<a class=\"id\" href=\"#rq\">rq</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_rq_enqueued\">cfq_rq_enqueued</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Update hw_tag based on peak queue depth over 50 samples under</span>", 
"<span class=\"comment\"> * sufficient load.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cfq_update_hw_tag\">cfq_update_hw_tag</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a> = <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#active_queue\">active_queue</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#rq_in_driver\">rq_in_driver</a> &gt; <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#hw_tag_est_depth\">hw_tag_est_depth</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#hw_tag_est_depth\">hw_tag_est_depth</a> = <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#rq_in_driver\">rq_in_driver</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#hw_tag\">hw_tag</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#rq_queued\">rq_queued</a> <= <a class=\"id\" href=\"#CFQ_HW_QUEUE_MIN\">CFQ_HW_QUEUE_MIN</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#rq_in_driver\">rq_in_driver</a> <= <a class=\"id\" href=\"#CFQ_HW_QUEUE_MIN\">CFQ_HW_QUEUE_MIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If active queue hasn't enough requests and can idle, cfq might not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dispatch sufficient requests to hardware. Don't zero hw_tag in this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqq\">cfqq</a> && <a class=\"id\" href=\"#cfq_cfqq_idle_window\">cfq_cfqq_idle_window</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#dispatched\">dispatched</a> + <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#queued\">queued</a>[0] + <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#queued\">queued</a>[1] &lt;", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#CFQ_HW_QUEUE_MIN\">CFQ_HW_QUEUE_MIN</a> && <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#rq_in_driver\">rq_in_driver</a> &lt; <a class=\"id\" href=\"#CFQ_HW_QUEUE_MIN\">CFQ_HW_QUEUE_MIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#hw_tag_samples\">hw_tag_samples</a>++ &lt; 50)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#hw_tag_est_depth\">hw_tag_est_depth</a> >= <a class=\"id\" href=\"#CFQ_HW_QUEUE_MIN\">CFQ_HW_QUEUE_MIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#hw_tag\">hw_tag</a> = 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#hw_tag\">hw_tag</a> = 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cfq_should_wait_busy\">cfq_should_wait_busy</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a> = <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#active_cic\">active_cic</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If there are other queues in the group, don't wait */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#nr_cfqq\">nr_cfqq</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_slice_used\">cfq_slice_used</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if slice left is less than think time, wait busy */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cic\">cic</a> && <a class=\"id\" href=\"#sample_valid\">sample_valid</a>(<a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ttime_samples\">ttime_samples</a>)", 
"<span class=\"ts\"/>    && (<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#slice_end\">slice_end</a> - <a class=\"id\" href=\"#jiffies\">jiffies</a> &lt; <a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#ttime_mean\">ttime_mean</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If think times is less than a jiffy than ttime_mean=0 and above</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will not be true. It might happen that slice has not expired yet</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but will expire soon (4-5 ns) during select_queue(). To cover the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case where think time is less than a jiffy, mark the queue wait</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * busy if only 1 jiffy is left in the slice.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#slice_end\">slice_end</a> - <a class=\"id\" href=\"#jiffies\">jiffies</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cfq_completed_request\">cfq_completed_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a> = <a class=\"id\" href=\"#RQ_CFQQ\">RQ_CFQQ</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a> = <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#cfqd\">cfqd</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#sync\">sync</a> = <a class=\"id\" href=\"#rq_is_sync\">rq_is_sync</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_log_cfqq\">cfq_log_cfqq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, \"complete rqnoidle %d\",", 
"<span class=\"ts\"/><span class=\"ts\"/>     !!(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_NOIDLE\">REQ_NOIDLE</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_update_hw_tag\">cfq_update_hw_tag</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#rq_in_driver\">rq_in_driver</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#dispatched\">dispatched</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#rq_in_driver\">rq_in_driver</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#dispatched\">dispatched</a>--;", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#RQ_CFQG\">RQ_CFQG</a>(<a class=\"id\" href=\"#rq\">rq</a>))-><a class=\"id\" href=\"#dispatched\">dispatched</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_blkiocg_update_completion_stats\">cfq_blkiocg_update_completion_stats</a>(&amp;<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#blkg\">blkg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_start_time_ns\">rq_start_time_ns</a>(<a class=\"id\" href=\"#rq\">rq</a>), <a class=\"id\" href=\"#rq_io_start_time_ns\">rq_io_start_time_ns</a>(<a class=\"id\" href=\"#rq\">rq</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_data_dir\">rq_data_dir</a>(<a class=\"id\" href=\"#rq\">rq</a>), <a class=\"id\" href=\"#rq_is_sync\">rq_is_sync</a>(<a class=\"id\" href=\"#rq\">rq</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#rq_in_flight\">rq_in_flight</a>[<a class=\"id\" href=\"#cfq_cfqq_sync\">cfq_cfqq_sync</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>)]--;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sync\">sync</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RQ_CIC\">RQ_CIC</a>(<a class=\"id\" href=\"#rq\">rq</a>)-><a class=\"id\" href=\"#last_end_request\">last_end_request</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#start_time\">start_time</a> + <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_fifo_expire\">cfq_fifo_expire</a>[1], <a class=\"id\" href=\"#now\">now</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#last_delayed_sync\">last_delayed_sync</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is the active queue, check if it needs to be expired,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or if we want to idle in case it has no pending requests.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#active_queue\">active_queue</a> == <a class=\"id\" href=\"#cfqq\">cfqq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cfqq_empty\">cfqq_empty</a> = <a class=\"id\" href=\"#RB_EMPTY_ROOT\">RB_EMPTY_ROOT</a>(&amp;<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#sort_list\">sort_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_cfqq_slice_new\">cfq_cfqq_slice_new</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_set_prio_slice\">cfq_set_prio_slice</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_clear_cfqq_slice_new\">cfq_clear_cfqq_slice_new</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Should we wait for next request to come in before we expire</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the queue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_should_wait_busy\">cfq_should_wait_busy</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#extend_sl\">extend_sl</a> = <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_slice_idle\">cfq_slice_idle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_slice_idle\">cfq_slice_idle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#extend_sl\">extend_sl</a> = <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_group_idle\">cfq_group_idle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#slice_end\">slice_end</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#extend_sl\">extend_sl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_mark_cfqq_wait_busy\">cfq_mark_cfqq_wait_busy</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_log_cfqq\">cfq_log_cfqq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, \"will busy wait\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Idling is not enabled on:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * - expired queues</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * - idle-priority queues</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * - async queues</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * - queues with still some requests queued</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * - when there is a close cooperator</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_slice_used\">cfq_slice_used</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>) || <a class=\"id\" href=\"#cfq_class_idle\">cfq_class_idle</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_slice_expired\">cfq_slice_expired</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#sync\">sync</a> && <a class=\"id\" href=\"#cfqq_empty\">cfqq_empty</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> !<a class=\"id\" href=\"#cfq_close_cooperator\">cfq_close_cooperator</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#noidle_tree_requires_idle\">noidle_tree_requires_idle</a> |=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_NOIDLE\">REQ_NOIDLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Idling is enabled for SYNC_WORKLOAD.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * SYNC_NOIDLE_WORKLOAD idles at the end of the tree</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * only if we processed at least one !REQ_NOIDLE request</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#serving_type\">serving_type</a> == <a class=\"id\" href=\"#SYNC_WORKLOAD\">SYNC_WORKLOAD</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    || <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#noidle_tree_requires_idle\">noidle_tree_requires_idle</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    || <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#nr_cfqq\">nr_cfqq</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_arm_slice_timer\">cfq_arm_slice_timer</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#rq_in_driver\">rq_in_driver</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_schedule_dispatch\">cfq_schedule_dispatch</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * we temporarily boost lower priority queues if they are holding fs exclusive</span>", 
"<span class=\"comment\"> * resources. they are boosted to normal prio (CLASS_BE/4)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cfq_prio_boost\">cfq_prio_boost</a>(struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
];
xr_frag_insert('l/8f/e10ebede897d5e004d8f2b99a161098bf596d6.xr', __xr_tmp);
