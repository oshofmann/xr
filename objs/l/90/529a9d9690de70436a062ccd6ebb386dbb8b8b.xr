var __xr_tmp = [
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>) {", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_NOTAVAILABLE\">ODEBUG_STATE_NOTAVAILABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is not really a fixup. The work struct was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * statically initialized. We just make sure that it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is tracked in the object tracker.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#WORK_STRUCT_STATIC_BIT\">WORK_STRUCT_STATIC_BIT</a>, <a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(<a class=\"id\" href=\"#work\">work</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_init\">debug_object_init</a>(<a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#work_debug_descr\">work_debug_descr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_activate\">debug_object_activate</a>(<a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#work_debug_descr\">work_debug_descr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_ACTIVE\">ODEBUG_STATE_ACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fixup_free is called when:</span>", 
"<span class=\"comment\"> * - an active object is freed</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#work_fixup_free\">work_fixup_free</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, enum <a class=\"id\" href=\"#debug_obj_state\">debug_obj_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ODEBUG_STATE_ACTIVE\">ODEBUG_STATE_ACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cancel_work_sync\">cancel_work_sync</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_free\">debug_object_free</a>(<a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#work_debug_descr\">work_debug_descr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#debug_obj_descr\">debug_obj_descr</a> <a class=\"id\" href=\"#work_debug_descr\">work_debug_descr</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"work_struct\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fixup_init\">fixup_init</a><span class=\"ts\"/>= <a class=\"id\" href=\"#work_fixup_init\">work_fixup_init</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fixup_activate\">fixup_activate</a><span class=\"ts\"/>= <a class=\"id\" href=\"#work_fixup_activate\">work_fixup_activate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fixup_free\">fixup_free</a><span class=\"ts\"/>= <a class=\"id\" href=\"#work_fixup_free\">work_fixup_free</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_work_activate\">debug_work_activate</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_activate\">debug_object_activate</a>(<a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#work_debug_descr\">work_debug_descr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_work_deactivate\">debug_work_deactivate</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_deactivate\">debug_object_deactivate</a>(<a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#work_debug_descr\">work_debug_descr</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init_work\">__init_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>, int <a class=\"id\" href=\"#onstack\">onstack</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#onstack\">onstack</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_init_on_stack\">debug_object_init_on_stack</a>(<a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#work_debug_descr\">work_debug_descr</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_object_init\">debug_object_init</a>(<a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#work_debug_descr\">work_debug_descr</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__init_work\">__init_work</a>);", 
"", 
"void <a class=\"id\" href=\"#destroy_work_on_stack\">destroy_work_on_stack</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_object_free\">debug_object_free</a>(<a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#work_debug_descr\">work_debug_descr</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#destroy_work_on_stack\">destroy_work_on_stack</a>);", 
"", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_work_activate\">debug_work_activate</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#debug_work_deactivate\">debug_work_deactivate</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Serializes the accesses to the list of workqueues. */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#workqueue_lock\">workqueue_lock</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#workqueues\">workqueues</a>);", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#workqueue_freezing\">workqueue_freezing</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* W: have wqs started freezing? */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The almighty global cpu workqueues.  nr_running is the only field</span>", 
"<span class=\"comment\"> * which is expected to be used frequently by other cpus via</span>", 
"<span class=\"comment\"> * try_to_wake_up().  Put it in a separate cacheline.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a>, <a class=\"id\" href=\"#global_cwq\">global_cwq</a>);", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU_SHARED_ALIGNED\">DEFINE_PER_CPU_SHARED_ALIGNED</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a>, <a class=\"id\" href=\"#gcwq_nr_running\">gcwq_nr_running</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Global cpu workqueue and nr_running counter for unbound gcwq.  The</span>", 
"<span class=\"comment\"> * gcwq is always online, has GCWQ_DISASSOCIATED set, and all its</span>", 
"<span class=\"comment\"> * workers have WORKER_UNBOUND set.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> <a class=\"id\" href=\"#unbound_global_cwq\">unbound_global_cwq</a>;", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#unbound_gcwq_nr_running\">unbound_gcwq_nr_running</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);<span class=\"ts\"/><span class=\"comment\">/* always 0 */</span>", 
"", 
"static int <a class=\"id\" href=\"#worker_thread\">worker_thread</a>(void *<a class=\"id\" href=\"#__worker\">__worker</a>);", 
"", 
"static struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#get_gcwq\">get_gcwq</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#WORK_CPU_UNBOUND\">WORK_CPU_UNBOUND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#global_cwq\">global_cwq</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#unbound_global_cwq\">unbound_global_cwq</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#get_gcwq_nr_running\">get_gcwq_nr_running</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#WORK_CPU_UNBOUND\">WORK_CPU_UNBOUND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#gcwq_nr_running\">gcwq_nr_running</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#unbound_gcwq_nr_running\">unbound_gcwq_nr_running</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#get_cwq\">get_cwq</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#wq\">wq</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#WQ_UNBOUND\">WQ_UNBOUND</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#cpu\">cpu</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#cpu_wq\">cpu_wq</a>.<a class=\"id\" href=\"#pcpu\">pcpu</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#cpu_wq\">cpu_wq</a>.<a class=\"id\" href=\"#single\">single</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#WORK_CPU_UNBOUND\">WORK_CPU_UNBOUND</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#cpu_wq\">cpu_wq</a>.<a class=\"id\" href=\"#single\">single</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#work_color_to_flags\">work_color_to_flags</a>(int <a class=\"id\" href=\"#color\">color</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#color\">color</a> << <a class=\"id\" href=\"#WORK_STRUCT_COLOR_SHIFT\">WORK_STRUCT_COLOR_SHIFT</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#get_work_color\">get_work_color</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>return (*<a class=\"id\" href=\"#work_data_bits\">work_data_bits</a>(<a class=\"id\" href=\"#work\">work</a>) >> <a class=\"id\" href=\"#WORK_STRUCT_COLOR_SHIFT\">WORK_STRUCT_COLOR_SHIFT</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/>((1 << <a class=\"id\" href=\"#WORK_STRUCT_COLOR_BITS\">WORK_STRUCT_COLOR_BITS</a>) - 1);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#work_next_color\">work_next_color</a>(int <a class=\"id\" href=\"#color\">color</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#color\">color</a> + 1) % <a class=\"id\" href=\"#WORK_NR_COLORS\">WORK_NR_COLORS</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A work's data points to the cwq with WORK_STRUCT_CWQ set while the</span>", 
"<span class=\"comment\"> * work is on queue.  Once execution starts, WORK_STRUCT_CWQ is</span>", 
"<span class=\"comment\"> * cleared and the work data contains the cpu number it was last on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * set_work_{cwq|cpu}() and clear_work_data() can be used to set the</span>", 
"<span class=\"comment\"> * cwq, cpu or clear work-&gt;data.  These functions should only be</span>", 
"<span class=\"comment\"> * called while the work is owned - ie. while the PENDING bit is set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * get_work_[g]cwq() can be used to obtain the gcwq or cwq</span>", 
"<span class=\"comment\"> * corresponding to a work.  gcwq is available once the work has been</span>", 
"<span class=\"comment\"> * queued anywhere after initialization.  cwq is available only from</span>", 
"<span class=\"comment\"> * queueing until execution starts.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_work_data\">set_work_data</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>, unsigned long <a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#work_pending\">work_pending</a>(<a class=\"id\" href=\"#work\">work</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_set\">atomic_long_set</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#data\">data</a> | <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#work_static\">work_static</a>(<a class=\"id\" href=\"#work\">work</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_work_cwq\">set_work_cwq</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#cwq\">cwq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#extra_flags\">extra_flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_work_data\">set_work_data</a>(<a class=\"id\" href=\"#work\">work</a>, (unsigned long)<a class=\"id\" href=\"#cwq\">cwq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#WORK_STRUCT_PENDING\">WORK_STRUCT_PENDING</a> | <a class=\"id\" href=\"#WORK_STRUCT_CWQ\">WORK_STRUCT_CWQ</a> | <a class=\"id\" href=\"#extra_flags\">extra_flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_work_cpu\">set_work_cpu</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_work_data\">set_work_data</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#cpu\">cpu</a> << <a class=\"id\" href=\"#WORK_STRUCT_FLAG_BITS\">WORK_STRUCT_FLAG_BITS</a>, <a class=\"id\" href=\"#WORK_STRUCT_PENDING\">WORK_STRUCT_PENDING</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clear_work_data\">clear_work_data</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_work_data\">set_work_data</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#WORK_STRUCT_NO_CPU\">WORK_STRUCT_NO_CPU</a>, 0);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#cpu_workqueue_struct\">cpu_workqueue_struct</a> *<a class=\"id\" href=\"#get_work_cwq\">get_work_cwq</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#atomic_long_read\">atomic_long_read</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a> &amp; <a class=\"id\" href=\"#WORK_STRUCT_CWQ\">WORK_STRUCT_CWQ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (void *)(<a class=\"id\" href=\"#data\">data</a> &amp; <a class=\"id\" href=\"#WORK_STRUCT_WQ_DATA_MASK\">WORK_STRUCT_WQ_DATA_MASK</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#global_cwq\">global_cwq</a> *<a class=\"id\" href=\"#get_work_gcwq\">get_work_gcwq</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
];
xr_frag_insert('l/90/529a9d9690de70436a062ccd6ebb386dbb8b8b.xr', __xr_tmp);
