var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#hypervisor\">hypervisor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#interface\">interface</a>/<a class=\"id\" href=\"#xen\">xen</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#interface\">interface</a>/<a class=\"id\" href=\"#event_channel\">event_channel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#events\">events</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#grant_table\">grant_table</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#xenbus\">xenbus</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"const char *<a class=\"id\" href=\"#xenbus_strstate\">xenbus_strstate</a>(enum <a class=\"id\" href=\"#xenbus_state\">xenbus_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>static const char *const <a class=\"id\" href=\"#name\">name</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#XenbusStateUnknown\">XenbusStateUnknown</a>      ] = \"Unknown\",", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#XenbusStateInitialising\">XenbusStateInitialising</a> ] = \"Initialising\",", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#XenbusStateInitWait\">XenbusStateInitWait</a>     ] = \"InitWait\",", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#XenbusStateInitialised\">XenbusStateInitialised</a>  ] = \"Initialised\",", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#XenbusStateConnected\">XenbusStateConnected</a>    ] = \"Connected\",", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#XenbusStateClosing\">XenbusStateClosing</a>      ] = \"Closing\",", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#XenbusStateClosed\">XenbusStateClosed</a><span class=\"ts\"/>  ] = \"Closed\",", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#state\">state</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#name\">name</a>)) ? <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#state\">state</a>] : \"INVALID\";", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_strstate\">xenbus_strstate</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * xenbus_watch_path - register a watch</span>", 
"<span class=\"comment\"> * @dev: xenbus device</span>", 
"<span class=\"comment\"> * @path: path to watch</span>", 
"<span class=\"comment\"> * @watch: watch to register</span>", 
"<span class=\"comment\"> * @callback: callback to register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Register a @watch on the given path, using the given xenbus_watch structure</span>", 
"<span class=\"comment\"> * for storage, and the given @callback function as the callback.  Return 0 on</span>", 
"<span class=\"comment\"> * success, or -errno on error.  On success, the given @path will be saved as</span>", 
"<span class=\"comment\"> * @watch-&gt;node, and remains the caller's to free.  On error, @watch-&gt;node will</span>", 
"<span class=\"comment\"> * be NULL, the device will switch to %XenbusStateClosing, and the error will</span>", 
"<span class=\"comment\"> * be saved in the store.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#xenbus_watch_path\">xenbus_watch_path</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const char *<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#xenbus_watch\">xenbus_watch</a> *<a class=\"id\" href=\"#watch\">watch</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      void (*<a class=\"id\" href=\"#callback\">callback</a>)(struct <a class=\"id\" href=\"#xenbus_watch\">xenbus_watch</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const char **, unsigned int))", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#watch\">watch</a>-><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#watch\">watch</a>-><a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#callback\">callback</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#register_xenbus_watch\">register_xenbus_watch</a>(<a class=\"id\" href=\"#watch\">watch</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#watch\">watch</a>-><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#watch\">watch</a>-><a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xenbus_dev_fatal\">xenbus_dev_fatal</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#err\">err</a>, \"adding watch on %s\", <a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_watch_path\">xenbus_watch_path</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * xenbus_watch_pathfmt - register a watch on a sprintf-formatted path</span>", 
"<span class=\"comment\"> * @dev: xenbus device</span>", 
"<span class=\"comment\"> * @watch: watch to register</span>", 
"<span class=\"comment\"> * @callback: callback to register</span>", 
"<span class=\"comment\"> * @pathfmt: format of path to watch</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Register a watch on the given @path, using the given xenbus_watch</span>", 
"<span class=\"comment\"> * structure for storage, and the given @callback function as the callback.</span>", 
"<span class=\"comment\"> * Return 0 on success, or -errno on error.  On success, the watched path</span>", 
"<span class=\"comment\"> * (@path/@path2) will be saved as @watch-&gt;node, and becomes the caller's to</span>", 
"<span class=\"comment\"> * kfree().  On error, watch-&gt;node will be NULL, so the caller has nothing to</span>", 
"<span class=\"comment\"> * free, the device will switch to %XenbusStateClosing, and the error will be</span>", 
"<span class=\"comment\"> * saved in the store.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#xenbus_watch_pathfmt\">xenbus_watch_pathfmt</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#xenbus_watch\">xenbus_watch</a> *<a class=\"id\" href=\"#watch\">watch</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void (*<a class=\"id\" href=\"#callback\">callback</a>)(struct <a class=\"id\" href=\"#xenbus_watch\">xenbus_watch</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char **, unsigned int),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#pathfmt\">pathfmt</a>, ...)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#path\">path</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#pathfmt\">pathfmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#kvasprintf\">kvasprintf</a>(<a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a> | <a class=\"id\" href=\"#__GFP_HIGH\">__GFP_HIGH</a>, <a class=\"id\" href=\"#pathfmt\">pathfmt</a>, <a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#path\">path</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xenbus_dev_fatal\">xenbus_dev_fatal</a>(<a class=\"id\" href=\"#dev\">dev</a>, -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>, \"allocating path for watch\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xenbus_watch_path\">xenbus_watch_path</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#watch\">watch</a>, <a class=\"id\" href=\"#callback\">callback</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_watch_pathfmt\">xenbus_watch_pathfmt</a>);", 
"", 
"static void <a class=\"id\" href=\"#xenbus_switch_fatal\">xenbus_switch_fatal</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *, int, int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *, ...);", 
"", 
"static int", 
"<a class=\"id\" href=\"#__xenbus_switch_state\">__xenbus_switch_state</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      enum <a class=\"id\" href=\"#xenbus_state\">xenbus_state</a> <a class=\"id\" href=\"#state\">state</a>, int <a class=\"id\" href=\"#depth\">depth</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* We check whether the state is currently set to the given value, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   if not, then the state is set.  We don't want to unconditionally</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   write the given state, because we don't want to fire watches</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   unnecessarily.  Furthermore, if the node has gone, we don't write</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   to it, as the device will be tearing down, and we don't want to</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   resurrect that directory.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Note that, because of this cached value of our state, this</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   function will not take a caller's Xenstore transaction</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   (something it was trying to in the past) because dev-&gt;state</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   would not get reset if the transaction was aborted.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xenbus_transaction\">xenbus_transaction</a> <a class=\"id\" href=\"#xbt\">xbt</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#current_state\">current_state</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#abort\">abort</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state\">state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#abort\">abort</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xenbus_transaction_start\">xenbus_transaction_start</a>(&amp;<a class=\"id\" href=\"#xbt\">xbt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xenbus_switch_fatal\">xenbus_switch_fatal</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#depth\">depth</a>, <a class=\"id\" href=\"#err\">err</a>, \"starting transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xenbus_scanf\">xenbus_scanf</a>(<a class=\"id\" href=\"#xbt\">xbt</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#nodename\">nodename</a>, \"state\", \"%d\", &amp;<a class=\"id\" href=\"#current_state\">current_state</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#abort\">abort</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xenbus_printf\">xenbus_printf</a>(<a class=\"id\" href=\"#xbt\">xbt</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#nodename\">nodename</a>, \"state\", \"%d\", <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xenbus_switch_fatal\">xenbus_switch_fatal</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#depth\">depth</a>, <a class=\"id\" href=\"#err\">err</a>, \"writing new state\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#abort\">abort</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#abort\">abort</a> = 0;", 
"<a class=\"id\" href=\"#abort\">abort</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xenbus_transaction_end\">xenbus_transaction_end</a>(<a class=\"id\" href=\"#xbt\">xbt</a>, <a class=\"id\" href=\"#abort\">abort</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a> && !<a class=\"id\" href=\"#abort\">abort</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xenbus_switch_fatal\">xenbus_switch_fatal</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#depth\">depth</a>, <a class=\"id\" href=\"#err\">err</a>, \"ending transaction\");", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * xenbus_switch_state</span>", 
"<span class=\"comment\"> * @dev: xenbus device</span>", 
"<span class=\"comment\"> * @state: new state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Advertise in the store a change of the given driver to the given new_state.</span>", 
"<span class=\"comment\"> * Return 0 on success, or -errno on error.  On error, the device will switch</span>", 
"<span class=\"comment\"> * to XenbusStateClosing, and the error will be saved in the store.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#xenbus_switch_state\">xenbus_switch_state</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, enum <a class=\"id\" href=\"#xenbus_state\">xenbus_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__xenbus_switch_state\">__xenbus_switch_state</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#state\">state</a>, 0);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_switch_state\">xenbus_switch_state</a>);", 
"", 
"int <a class=\"id\" href=\"#xenbus_frontend_closed\">xenbus_frontend_closed</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xenbus_switch_state\">xenbus_switch_state</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#XenbusStateClosed\">XenbusStateClosed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#down\">down</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_frontend_closed\">xenbus_frontend_closed</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Return the path to the error node for the given device, or NULL on failure.</span>", 
"<span class=\"comment\"> * If the value returned is non-NULL, then it is the caller's to kfree.</span>", 
"<span class=\"comment\"> */</span>", 
"static char *<a class=\"id\" href=\"#error_path\">error_path</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kasprintf\">kasprintf</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, \"error/%s\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#nodename\">nodename</a>);", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#xenbus_va_dev_error\">xenbus_va_dev_error</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#err\">err</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#printf_buffer\">printf_buffer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#path_buffer\">path_buffer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PRINTF_BUFFER_SIZE\">PRINTF_BUFFER_SIZE</a> 4096", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printf_buffer\">printf_buffer</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#PRINTF_BUFFER_SIZE\">PRINTF_BUFFER_SIZE</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#printf_buffer\">printf_buffer</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#printf_buffer\">printf_buffer</a>, \"%i \", -<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#printf_buffer\">printf_buffer</a>+<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#PRINTF_BUFFER_SIZE\">PRINTF_BUFFER_SIZE</a>-<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#len\">len</a> + <a class=\"id\" href=\"#ret\">ret</a> &gt; <a class=\"id\" href=\"#PRINTF_BUFFER_SIZE\">PRINTF_BUFFER_SIZE</a>-1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"%s\\n\", <a class=\"id\" href=\"#printf_buffer\">printf_buffer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_buffer\">path_buffer</a> = <a class=\"id\" href=\"#error_path\">error_path</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path_buffer\">path_buffer</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"failed to write error node for %s (%s)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#nodename\">nodename</a>, <a class=\"id\" href=\"#printf_buffer\">printf_buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xenbus_write\">xenbus_write</a>(<a class=\"id\" href=\"#XBT_NIL\">XBT_NIL</a>, <a class=\"id\" href=\"#path_buffer\">path_buffer</a>, \"error\", <a class=\"id\" href=\"#printf_buffer\">printf_buffer</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"failed to write error node for %s (%s)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#nodename\">nodename</a>, <a class=\"id\" href=\"#printf_buffer\">printf_buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#printf_buffer\">printf_buffer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#path_buffer\">path_buffer</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * xenbus_dev_error</span>", 
"<span class=\"comment\"> * @dev: xenbus device</span>", 
"<span class=\"comment\"> * @err: error to report</span>", 
"<span class=\"comment\"> * @fmt: error message format</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Report the given negative errno into the store, along with the given</span>", 
"<span class=\"comment\"> * formatted message.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#xenbus_dev_error\">xenbus_dev_error</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#err\">err</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xenbus_va_dev_error\">xenbus_va_dev_error</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_dev_error\">xenbus_dev_error</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * xenbus_dev_fatal</span>", 
"<span class=\"comment\"> * @dev: xenbus device</span>", 
"<span class=\"comment\"> * @err: error to report</span>", 
"<span class=\"comment\"> * @fmt: error message format</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Equivalent to xenbus_dev_error(dev, err, fmt, args), followed by</span>", 
"<span class=\"comment\"> * xenbus_switch_state(dev, XenbusStateClosing) to schedule an orderly</span>", 
"<span class=\"comment\"> * closedown of this driver and its peer.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#xenbus_dev_fatal\">xenbus_dev_fatal</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#err\">err</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xenbus_va_dev_error\">xenbus_va_dev_error</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xenbus_switch_state\">xenbus_switch_state</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#XenbusStateClosing\">XenbusStateClosing</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_dev_fatal\">xenbus_dev_fatal</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Equivalent to xenbus_dev_fatal(dev, err, fmt, args), but helps</span>", 
"<span class=\"comment\"> * avoiding recursion within xenbus_switch_state.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#xenbus_switch_fatal\">xenbus_switch_fatal</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#depth\">depth</a>, int <a class=\"id\" href=\"#err\">err</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xenbus_va_dev_error\">xenbus_va_dev_error</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#depth\">depth</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__xenbus_switch_state\">__xenbus_switch_state</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#XenbusStateClosing\">XenbusStateClosing</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * xenbus_grant_ring</span>", 
"<span class=\"comment\"> * @dev: xenbus device</span>", 
"<span class=\"comment\"> * @ring_mfn: mfn of ring to grant</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> * Grant access to the given @ring_mfn to the peer of the given device.  Return</span>", 
"<span class=\"comment\"> * 0 on success, or -errno on error.  On error, the device will switch to</span>", 
"<span class=\"comment\"> * XenbusStateClosing, and the error will be saved in the store.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#xenbus_grant_ring\">xenbus_grant_ring</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned long <a class=\"id\" href=\"#ring_mfn\">ring_mfn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#gnttab_grant_foreign_access\">gnttab_grant_foreign_access</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#otherend_id\">otherend_id</a>, <a class=\"id\" href=\"#ring_mfn\">ring_mfn</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xenbus_dev_fatal\">xenbus_dev_fatal</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#err\">err</a>, \"granting access to ring page\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_grant_ring\">xenbus_grant_ring</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Allocate an event channel for the given xenbus_device, assigning the newly</span>", 
"<span class=\"comment\"> * created local port to *port.  Return 0 on success, or -errno on error.  On</span>", 
"<span class=\"comment\"> * error, the device will switch to XenbusStateClosing, and the error will be</span>", 
"<span class=\"comment\"> * saved in the store.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#xenbus_alloc_evtchn\">xenbus_alloc_evtchn</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int *<a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#evtchn_alloc_unbound\">evtchn_alloc_unbound</a> <a class=\"id\" href=\"#alloc_unbound\">alloc_unbound</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_unbound\">alloc_unbound</a>.<a class=\"id\" href=\"#dom\">dom</a> = <a class=\"id\" href=\"#DOMID_SELF\">DOMID_SELF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_unbound\">alloc_unbound</a>.<a class=\"id\" href=\"#remote_dom\">remote_dom</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#otherend_id\">otherend_id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#HYPERVISOR_event_channel_op\">HYPERVISOR_event_channel_op</a>(<a class=\"id\" href=\"#EVTCHNOP_alloc_unbound\">EVTCHNOP_alloc_unbound</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#alloc_unbound\">alloc_unbound</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xenbus_dev_fatal\">xenbus_dev_fatal</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#err\">err</a>, \"allocating event channel\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#port\">port</a> = <a class=\"id\" href=\"#alloc_unbound\">alloc_unbound</a>.<a class=\"id\" href=\"#port\">port</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_alloc_evtchn\">xenbus_alloc_evtchn</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Bind to an existing interdomain event channel in another domain. Returns 0</span>", 
"<span class=\"comment\"> * on success and stores the local port in *port. On error, returns -errno,</span>", 
"<span class=\"comment\"> * switches the device to XenbusStateClosing, and saves the error in XenStore.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#xenbus_bind_evtchn\">xenbus_bind_evtchn</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#remote_port\">remote_port</a>, int *<a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#evtchn_bind_interdomain\">evtchn_bind_interdomain</a> <a class=\"id\" href=\"#bind_interdomain\">bind_interdomain</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bind_interdomain\">bind_interdomain</a>.<a class=\"id\" href=\"#remote_dom\">remote_dom</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#otherend_id\">otherend_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bind_interdomain\">bind_interdomain</a>.<a class=\"id\" href=\"#remote_port\">remote_port</a> = <a class=\"id\" href=\"#remote_port\">remote_port</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#HYPERVISOR_event_channel_op\">HYPERVISOR_event_channel_op</a>(<a class=\"id\" href=\"#EVTCHNOP_bind_interdomain\">EVTCHNOP_bind_interdomain</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#bind_interdomain\">bind_interdomain</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xenbus_dev_fatal\">xenbus_dev_fatal</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#err\">err</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"binding to event channel %d from domain %d\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#remote_port\">remote_port</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#otherend_id\">otherend_id</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#port\">port</a> = <a class=\"id\" href=\"#bind_interdomain\">bind_interdomain</a>.<a class=\"id\" href=\"#local_port\">local_port</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_bind_evtchn\">xenbus_bind_evtchn</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Free an existing event channel. Returns 0 on success or -errno on error.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#xenbus_free_evtchn\">xenbus_free_evtchn</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#evtchn_close\">evtchn_close</a> <a class=\"id\" href=\"#close\">close</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#close\">close</a>.<a class=\"id\" href=\"#port\">port</a> = <a class=\"id\" href=\"#port\">port</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#HYPERVISOR_event_channel_op\">HYPERVISOR_event_channel_op</a>(<a class=\"id\" href=\"#EVTCHNOP_close\">EVTCHNOP_close</a>, &amp;<a class=\"id\" href=\"#close\">close</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xenbus_dev_error\">xenbus_dev_error</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#err\">err</a>, \"freeing event channel %d\", <a class=\"id\" href=\"#port\">port</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_free_evtchn\">xenbus_free_evtchn</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * xenbus_map_ring_valloc</span>", 
"<span class=\"comment\"> * @dev: xenbus device</span>", 
"<span class=\"comment\"> * @gnt_ref: grant reference</span>", 
"<span class=\"comment\"> * @vaddr: pointer to address to be filled out by mapping</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on Rusty Russell's skeleton driver's map_page.</span>", 
"<span class=\"comment\"> * Map a page of memory into this domain from another domain's grant table.</span>", 
"<span class=\"comment\"> * xenbus_map_ring_valloc allocates a page of virtual address space, maps the</span>", 
"<span class=\"comment\"> * page to that address, and sets *vaddr to that address.</span>", 
"<span class=\"comment\"> * Returns 0 on success, and GNTST_* (see xen/include/interface/grant_table.h)</span>", 
"<span class=\"comment\"> * or -ENOMEM on error. If an error is returned, device will switch to</span>", 
"<span class=\"comment\"> * XenbusStateClosing and the error message will be saved in XenStore.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#xenbus_map_ring_valloc\">xenbus_map_ring_valloc</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#gnt_ref\">gnt_ref</a>, void **<a class=\"id\" href=\"#vaddr\">vaddr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gnttab_map_grant_ref\">gnttab_map_grant_ref</a> <a class=\"id\" href=\"#op\">op</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#GNTMAP_host_map\">GNTMAP_host_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ref\">ref</a>   = <a class=\"id\" href=\"#gnt_ref\">gnt_ref</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#dom\">dom</a>   = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#otherend_id\">otherend_id</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#area\">area</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a> = <a class=\"id\" href=\"#xen_alloc_vm_area\">xen_alloc_vm_area</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#area\">area</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#host_addr\">host_addr</a> = (unsigned long)<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_grant_table_op\">HYPERVISOR_grant_table_op</a>(<a class=\"id\" href=\"#GNTTABOP_map_grant_ref\">GNTTABOP_map_grant_ref</a>, &amp;<a class=\"id\" href=\"#op\">op</a>, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#GNTST_okay\">GNTST_okay</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_free_vm_area\">xen_free_vm_area</a>(<a class=\"id\" href=\"#area\">area</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xenbus_dev_fatal\">xenbus_dev_fatal</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"mapping in shared page %d from domain %d\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#gnt_ref\">gnt_ref</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#otherend_id\">otherend_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Stuff the handle in an unused field */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#phys_addr\">phys_addr</a> = (unsigned long)<a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#handle\">handle</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_map_ring_valloc\">xenbus_map_ring_valloc</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * xenbus_map_ring</span>", 
"<span class=\"comment\"> * @dev: xenbus device</span>", 
"<span class=\"comment\"> * @gnt_ref: grant reference</span>", 
"<span class=\"comment\"> * @handle: pointer to grant handle to be filled</span>", 
"<span class=\"comment\"> * @vaddr: address to be mapped to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Map a page of memory into this domain from another domain's grant table.</span>", 
"<span class=\"comment\"> * xenbus_map_ring does not allocate the virtual address space (you must do</span>", 
"<span class=\"comment\"> * this yourself!). It only maps in the page to the specified address.</span>", 
"<span class=\"comment\"> * Returns 0 on success, and GNTST_* (see xen/include/interface/grant_table.h)</span>", 
"<span class=\"comment\"> * or -ENOMEM on error. If an error is returned, device will switch to</span>", 
"<span class=\"comment\"> * XenbusStateClosing and the error message will be saved in XenStore.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#xenbus_map_ring\">xenbus_map_ring</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#gnt_ref\">gnt_ref</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#grant_handle_t\">grant_handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, void *<a class=\"id\" href=\"#vaddr\">vaddr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gnttab_map_grant_ref\">gnttab_map_grant_ref</a> <a class=\"id\" href=\"#op\">op</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#host_addr\">host_addr</a> = (unsigned long)<a class=\"id\" href=\"#vaddr\">vaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a>     = <a class=\"id\" href=\"#GNTMAP_host_map\">GNTMAP_host_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ref\">ref</a>       = <a class=\"id\" href=\"#gnt_ref\">gnt_ref</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#dom\">dom</a>       = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#otherend_id\">otherend_id</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_grant_table_op\">HYPERVISOR_grant_table_op</a>(<a class=\"id\" href=\"#GNTTABOP_map_grant_ref\">GNTTABOP_map_grant_ref</a>, &amp;<a class=\"id\" href=\"#op\">op</a>, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#GNTST_okay\">GNTST_okay</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xenbus_dev_fatal\">xenbus_dev_fatal</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"mapping in shared page %d from domain %d\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#gnt_ref\">gnt_ref</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#otherend_id\">otherend_id</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#handle\">handle</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_map_ring\">xenbus_map_ring</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * xenbus_unmap_ring_vfree</span>", 
"<span class=\"comment\"> * @dev: xenbus device</span>", 
"<span class=\"comment\"> * @vaddr: addr to unmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on Rusty Russell's skeleton driver's unmap_page.</span>", 
"<span class=\"comment\"> * Unmap a page of memory in this domain that was imported from another domain.</span>", 
"<span class=\"comment\"> * Use xenbus_unmap_ring_vfree if you mapped in your memory with</span>", 
"<span class=\"comment\"> * xenbus_map_ring_valloc (it will free the virtual address space).</span>", 
"<span class=\"comment\"> * Returns 0 on success and returns GNTST_* on error</span>", 
"<span class=\"comment\"> * (see xen/include/interface/grant_table.h).</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#xenbus_unmap_ring_vfree\">xenbus_unmap_ring_vfree</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#vaddr\">vaddr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#area\">area</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gnttab_unmap_grant_ref\">gnttab_unmap_grant_ref</a> <a class=\"id\" href=\"#op\">op</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#host_addr\">host_addr</a> = (unsigned long)<a class=\"id\" href=\"#vaddr\">vaddr</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* It'd be nice if linux/vmalloc.h provided a find_vm_area(void *addr)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * method so that we don't have to muck with vmalloc internals here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We could force the user to hang on to their struct vm_struct from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * xenbus_map_ring_valloc, but these 6 lines considerably simplify</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this API.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#vmlist_lock\">vmlist_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#area\">area</a> = <a class=\"id\" href=\"#vmlist\">vmlist</a>; <a class=\"id\" href=\"#area\">area</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#area\">area</a> = <a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#vaddr\">vaddr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#vmlist_lock\">vmlist_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#area\">area</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xenbus_dev_error\">xenbus_dev_error</a>(<a class=\"id\" href=\"#dev\">dev</a>, -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"can't find mapped virtual address %p\", <a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#GNTST_bad_virt_addr\">GNTST_bad_virt_addr</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#handle\">handle</a> = (<a class=\"id\" href=\"#grant_handle_t\">grant_handle_t</a>)<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#phys_addr\">phys_addr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_grant_table_op\">HYPERVISOR_grant_table_op</a>(<a class=\"id\" href=\"#GNTTABOP_unmap_grant_ref\">GNTTABOP_unmap_grant_ref</a>, &amp;<a class=\"id\" href=\"#op\">op</a>, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#GNTST_okay\">GNTST_okay</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_free_vm_area\">xen_free_vm_area</a>(<a class=\"id\" href=\"#area\">area</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xenbus_dev_error\">xenbus_dev_error</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"unmapping page at handle %d error %d\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#int16_t\">int16_t</a>)<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#status\">status</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_unmap_ring_vfree\">xenbus_unmap_ring_vfree</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * xenbus_unmap_ring</span>", 
"<span class=\"comment\"> * @dev: xenbus device</span>", 
"<span class=\"comment\"> * @handle: grant handle</span>", 
"<span class=\"comment\"> * @vaddr: addr to unmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unmap a page of memory in this domain that was imported from another domain.</span>", 
"<span class=\"comment\"> * Returns 0 on success and returns GNTST_* on error</span>", 
"<span class=\"comment\"> * (see xen/include/interface/grant_table.h).</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#xenbus_unmap_ring\">xenbus_unmap_ring</a>(struct <a class=\"id\" href=\"#xenbus_device\">xenbus_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#grant_handle_t\">grant_handle_t</a> <a class=\"id\" href=\"#handle\">handle</a>, void *<a class=\"id\" href=\"#vaddr\">vaddr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gnttab_unmap_grant_ref\">gnttab_unmap_grant_ref</a> <a class=\"id\" href=\"#op\">op</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#host_addr\">host_addr</a> = (unsigned long)<a class=\"id\" href=\"#vaddr\">vaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#handle\">handle</a>    = <a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_grant_table_op\">HYPERVISOR_grant_table_op</a>(<a class=\"id\" href=\"#GNTTABOP_unmap_grant_ref\">GNTTABOP_unmap_grant_ref</a>, &amp;<a class=\"id\" href=\"#op\">op</a>, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#GNTST_okay\">GNTST_okay</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xenbus_dev_error\">xenbus_dev_error</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"unmapping page at handle %d error %d\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#status\">status</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_unmap_ring\">xenbus_unmap_ring</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * xenbus_read_driver_state</span>", 
"<span class=\"comment\"> * @path: path for driver</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return the state of the driver rooted at the given store path, or</span>", 
"<span class=\"comment\"> * XenbusStateUnknown if no state can be read.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#xenbus_state\">xenbus_state</a> <a class=\"id\" href=\"#xenbus_read_driver_state\">xenbus_read_driver_state</a>(const char *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#xenbus_state\">xenbus_state</a> <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xenbus_gather\">xenbus_gather</a>(<a class=\"id\" href=\"#XBT_NIL\">XBT_NIL</a>, <a class=\"id\" href=\"#path\">path</a>, \"state\", \"%d\", &amp;<a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#XenbusStateUnknown\">XenbusStateUnknown</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xenbus_read_driver_state\">xenbus_read_driver_state</a>);", 
];
xr_frag_insert('l/90/70cbb8d9b45bcb8e65e680d3119160ff4fb440.xr', __xr_tmp);
