var __xr_tmp = [
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#scsi_target\">scsi_target</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#single_lun\">single_lun</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#starget_sdev_user\">starget_sdev_user</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#starget_sdev_user\">starget_sdev_user</a> != <a class=\"id\" href=\"#sdev\">sdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#starget_sdev_user\">starget_sdev_user</a> = <a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#target_busy\">target_busy</a> == 0 && <a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#target_blocked\">target_blocked</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unblock after target_blocked iterates to zero</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#target_blocked\">target_blocked</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_MLQUEUE\">SCSI_LOG_MLQUEUE</a>(3, <a class=\"id\" href=\"#starget_printk\">starget_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#starget\">starget</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"unblocking target at zero depth\\n\"));", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_target_is_busy\">scsi_target_is_busy</a>(<a class=\"id\" href=\"#starget\">starget</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#starved_entry\">starved_entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#starved_entry\">starved_entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#starved_list\">starved_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We're OK to process the command, so we can't be starved */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#starved_entry\">starved_entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#starved_entry\">starved_entry</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * scsi_host_queue_ready: if we can send requests to shost, return 1 else</span>", 
"<span class=\"comment\"> * return 0. We must end up running the queue again whenever 0 is</span>", 
"<span class=\"comment\"> * returned, else IO can hang.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with host_lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#scsi_host_queue_ready\">scsi_host_queue_ready</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_host_in_recovery\">scsi_host_in_recovery</a>(<a class=\"id\" href=\"#shost\">shost</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_busy\">host_busy</a> == 0 && <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_blocked\">host_blocked</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unblock after host_blocked iterates to zero</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_blocked\">host_blocked</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_MLQUEUE\">SCSI_LOG_MLQUEUE</a>(3,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"scsi%d unblocking host at zero depth\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_no\">host_no</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_host_is_busy\">scsi_host_is_busy</a>(<a class=\"id\" href=\"#shost\">shost</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#starved_entry\">starved_entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#starved_entry\">starved_entry</a>, &amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#starved_list\">starved_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We're OK to process the command, so we can't be starved */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#starved_entry\">starved_entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#starved_entry\">starved_entry</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Busy state exporting function for request stacking drivers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For efficiency, no lock is taken to check the busy state of</span>", 
"<span class=\"comment\"> * shost/starget/sdev, since the returned value is not guaranteed and</span>", 
"<span class=\"comment\"> * may be changed after request stacking drivers call the function,</span>", 
"<span class=\"comment\"> * regardless of taking lock or not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When scsi can't dispatch I/Os anymore and needs to kill I/Os</span>", 
"<span class=\"comment\"> * (e.g. !sdev), scsi needs to return 'not busy'.</span>", 
"<span class=\"comment\"> * Otherwise, request stacking drivers may hold requests forever.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_lld_busy\">scsi_lld_busy</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queuedata\">queuedata</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#scsi_target\">scsi_target</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_host_in_recovery\">scsi_host_in_recovery</a>(<a class=\"id\" href=\"#shost\">shost</a>) || <a class=\"id\" href=\"#scsi_host_is_busy\">scsi_host_is_busy</a>(<a class=\"id\" href=\"#shost\">shost</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#scsi_target_is_busy\">scsi_target_is_busy</a>(<a class=\"id\" href=\"#starget\">starget</a>) || <a class=\"id\" href=\"#scsi_device_is_busy\">scsi_device_is_busy</a>(<a class=\"id\" href=\"#sdev\">sdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kill a request for a dead device</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_kill_request\">scsi_kill_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>, struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#special\">special</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_start_request\">blk_start_request</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a> = <a class=\"id\" href=\"#scsi_target\">scsi_target</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_init_cmd_errh\">scsi_init_cmd_errh</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#DID_NO_CONNECT\">DID_NO_CONNECT</a> << 16;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#iorequest_cnt\">iorequest_cnt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SCSI request completion path will do scsi_device_unbusy(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bump busy counts.  To bump the counters, we need to dance</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with the locks as normal issue path does.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#device_busy\">device_busy</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_busy\">host_busy</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#target_busy\">target_busy</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_complete_request\">blk_complete_request</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#scsi_softirq_done\">scsi_softirq_done</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#special\">special</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#wait_for\">wait_for</a> = (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#allowed\">allowed</a> + 1) * <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#disposition\">disposition</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#eh_entry\">eh_entry</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set the serial numbers back to zero</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#serial_number\">serial_number</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#iodone_cnt\">iodone_cnt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#ioerr_cnt\">ioerr_cnt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#scsi_decide_disposition\">scsi_decide_disposition</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disposition\">disposition</a> != <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#jiffies_at_alloc\">jiffies_at_alloc</a> + <a class=\"id\" href=\"#wait_for\">wait_for</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"timing out command, waited %lus\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#wait_for\">wait_for</a>/<a class=\"id\" href=\"#HZ\">HZ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disposition\">disposition</a> = <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_log_completion\">scsi_log_completion</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#disposition\">disposition</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#disposition\">disposition</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_finish_command\">scsi_finish_command</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_queue_insert\">scsi_queue_insert</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#SCSI_MLQUEUE_EH_RETRY\">SCSI_MLQUEUE_EH_RETRY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ADD_TO_MLQUEUE\">ADD_TO_MLQUEUE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_queue_insert\">scsi_queue_insert</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#SCSI_MLQUEUE_DEVICE_BUSY\">SCSI_MLQUEUE_DEVICE_BUSY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_eh_scmd_add\">scsi_eh_scmd_add</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_finish_command\">scsi_finish_command</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function:    scsi_request_fn()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:     Main strategy routine for SCSI.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments:   q       - Pointer to actual queue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:     Nothing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock status: IO request lock assumed to be held when called.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_request_fn\">scsi_request_fn</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queuedata\">queuedata</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sdev\">sdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"scsi: killing requests for dead queue\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#blk_peek_request\">blk_peek_request</a>(<a class=\"id\" href=\"#q\">q</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_kill_request\">scsi_kill_request</a>(<a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if(!<a class=\"id\" href=\"#get_device\">get_device</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We must be tearing the block queue down already */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To start with, we keep looping until the queue is empty, or until</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the host is no longer able to accept any more requests.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#blk_queue_plugged\">blk_queue_plugged</a>(<a class=\"id\" href=\"#q\">q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * get next queueable request.  We do this early to make sure</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that the request is fully prepared even if we cannot </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * accept it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#blk_peek_request\">blk_peek_request</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#req\">req</a> || !<a class=\"id\" href=\"#scsi_dev_queue_ready\">scsi_dev_queue_ready</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#sdev\">sdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#scsi_device_online\">scsi_device_online</a>(<a class=\"id\" href=\"#sdev\">sdev</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"rejecting I/O to offline device\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_kill_request\">scsi_kill_request</a>(<a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Remove the request from the request list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#blk_queue_tagged\">blk_queue_tagged</a>(<a class=\"id\" href=\"#q\">q</a>) && !<a class=\"id\" href=\"#blk_queue_start_tag\">blk_queue_start_tag</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_start_request\">blk_start_request</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#device_busy\">device_busy</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#special\">special</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cmd\">cmd</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"impossible request in %s.\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"please mail a stack trace to \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"linux-scsi@vger.kernel.org\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_dump_rq_flags\">blk_dump_rq_flags</a>(<a class=\"id\" href=\"#req\">req</a>, \"foo\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We hit this when the driver is using a host wide</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tag map. For device level tag maps the queue_depth check</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in the device ready fn would prevent us from trying</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to allocate a tag. Since the map is a shared host resource</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we add the dev to the starved list so it eventually gets</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a run when a tag is freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_queue_tagged\">blk_queue_tagged</a>(<a class=\"id\" href=\"#q\">q</a>) && !<a class=\"id\" href=\"#blk_rq_tagged\">blk_rq_tagged</a>(<a class=\"id\" href=\"#req\">req</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#starved_entry\">starved_entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#starved_entry\">starved_entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#starved_list\">starved_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#not_ready\">not_ready</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_target_queue_ready\">scsi_target_queue_ready</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#sdev\">sdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#not_ready\">not_ready</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_host_queue_ready\">scsi_host_queue_ready</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#sdev\">sdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#not_ready\">not_ready</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_target\">scsi_target</a>(<a class=\"id\" href=\"#sdev\">sdev</a>)-><a class=\"id\" href=\"#target_busy\">target_busy</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_busy\">host_busy</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * XXX(hch): This is rather suboptimal, scsi_dispatch_cmd will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/>take the lock again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Finally, initialize any error handling parameters, and set up</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the timers for timeouts.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_init_cmd_errh\">scsi_init_cmd_errh</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Dispatch the command to the low-level driver.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_dispatch_cmd\">scsi_dispatch_cmd</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#rtn\">rtn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we're refusing the command; because of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the way locks get dropped, we need to </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * check here if plugging is required */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#device_busy\">device_busy</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_plug_device\">blk_plug_device</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
" <a class=\"id\" href=\"#not_ready\">not_ready</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock q, handle tag, requeue req, and decrement device_busy. We</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * must return with queue_lock held.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Decrementing device_busy without checking it is OK, as all such</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cases (host limits or settings) should run the queue at some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * later time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_requeue_request\">blk_requeue_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#device_busy\">device_busy</a>--;", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#device_busy\">device_busy</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_plug_device\">blk_plug_device</a>(<a class=\"id\" href=\"#q\">q</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* must be careful here...if we trigger the -&gt;remove() function</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we cannot be holding the q lock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#scsi_calculate_bounce_limit\">scsi_calculate_bounce_limit</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#host_dev\">host_dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#bounce_limit\">bounce_limit</a> = 0xffffffff;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#unchecked_isa_dma\">unchecked_isa_dma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#BLK_BOUNCE_ISA\">BLK_BOUNCE_ISA</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Platforms with virtual-DMA translation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hardware have no practical limit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PCI_DMA_BUS_IS_PHYS\">PCI_DMA_BUS_IS_PHYS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#BLK_BOUNCE_ANY\">BLK_BOUNCE_ANY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host_dev\">host_dev</a> = <a class=\"id\" href=\"#scsi_get_device\">scsi_get_device</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#host_dev\">host_dev</a> && <a class=\"id\" href=\"#host_dev\">host_dev</a>-><a class=\"id\" href=\"#dma_mask\">dma_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bounce_limit\">bounce_limit</a> = *<a class=\"id\" href=\"#host_dev\">host_dev</a>-><a class=\"id\" href=\"#dma_mask\">dma_mask</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bounce_limit\">bounce_limit</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_calculate_bounce_limit\">scsi_calculate_bounce_limit</a>);", 
"", 
"struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#__scsi_alloc_queue\">__scsi_alloc_queue</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#request_fn_proc\">request_fn_proc</a> *<a class=\"id\" href=\"#request_fn\">request_fn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#shost_gendev\">shost_gendev</a>.<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#blk_init_queue\">blk_init_queue</a>(<a class=\"id\" href=\"#request_fn\">request_fn</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this limit is imposed by hardware restrictions</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_max_segments\">blk_queue_max_segments</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned short, <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#sg_tablesize\">sg_tablesize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_MAX_SG_CHAIN_SEGMENTS\">SCSI_MAX_SG_CHAIN_SEGMENTS</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_max_hw_sectors\">blk_queue_max_hw_sectors</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#max_sectors\">max_sectors</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_bounce_limit\">blk_queue_bounce_limit</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#scsi_calculate_bounce_limit\">scsi_calculate_bounce_limit</a>(<a class=\"id\" href=\"#shost\">shost</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_segment_boundary\">blk_queue_segment_boundary</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#dma_boundary\">dma_boundary</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_set_seg_boundary\">dma_set_seg_boundary</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#dma_boundary\">dma_boundary</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_max_segment_size\">blk_queue_max_segment_size</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#dma_get_max_seg_size\">dma_get_max_seg_size</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* New queue, no concurrency on queue_flags */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#use_clustering\">use_clustering</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_clear_unlocked\">queue_flag_clear_unlocked</a>(<a class=\"id\" href=\"#QUEUE_FLAG_CLUSTER\">QUEUE_FLAG_CLUSTER</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set a reasonable default alignment on word boundaries: the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * host and device may alter it using</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * blk_queue_update_dma_alignment() later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_dma_alignment\">blk_queue_dma_alignment</a>(<a class=\"id\" href=\"#q\">q</a>, 0x03);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#q\">q</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__scsi_alloc_queue\">__scsi_alloc_queue</a>);", 
"", 
"struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#scsi_alloc_queue\">scsi_alloc_queue</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#__scsi_alloc_queue\">__scsi_alloc_queue</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#scsi_request_fn\">scsi_request_fn</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_prep_rq\">blk_queue_prep_rq</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#scsi_prep_fn\">scsi_prep_fn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_softirq_done\">blk_queue_softirq_done</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#scsi_softirq_done\">scsi_softirq_done</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_rq_timed_out\">blk_queue_rq_timed_out</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#scsi_times_out\">scsi_times_out</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_lld_busy\">blk_queue_lld_busy</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#scsi_lld_busy\">scsi_lld_busy</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#q\">q</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#scsi_free_queue\">scsi_free_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_cleanup_queue\">blk_cleanup_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function:    scsi_block_requests()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:     Utility function used by low-level drivers to prevent further</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>commands from being queued to the device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments:   shost       - Host in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:     Nothing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock status: No locks are assumed held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:       There is no timer nor any other means by which the requests</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>get unblocked other than the low-level driver calling</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>scsi_unblock_requests().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_block_requests\">scsi_block_requests</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_self_blocked\">host_self_blocked</a> = 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_block_requests\">scsi_block_requests</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function:    scsi_unblock_requests()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:     Utility function used by low-level drivers to allow further</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>commands from being queued to the device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments:   shost       - Host in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:     Nothing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock status: No locks are assumed held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:       There is no timer nor any other means by which the requests</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>get unblocked other than the low-level driver calling</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>scsi_unblock_requests().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This is done as an API function so that changes to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>internals of the scsi mid-layer won't require wholesale</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>changes to drivers that use this feature.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_unblock_requests\">scsi_unblock_requests</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_self_blocked\">host_self_blocked</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_run_host_queues\">scsi_run_host_queues</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_unblock_requests\">scsi_unblock_requests</a>);", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#scsi_init_queue\">scsi_init_queue</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_sdb_cache\">scsi_sdb_cache</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"scsi_data_buffer\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   sizeof(struct <a class=\"id\" href=\"#scsi_data_buffer\">scsi_data_buffer</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   0, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_sdb_cache\">scsi_sdb_cache</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SCSI: can't init scsi sdb cache\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#SG_MEMPOOL_NR\">SG_MEMPOOL_NR</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_host_sg_pool\">scsi_host_sg_pool</a> *<a class=\"id\" href=\"#sgp\">sgp</a> = <a class=\"id\" href=\"#scsi_sg_pools\">scsi_sg_pools</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#size\">size</a> * sizeof(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#slab\">slab</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(<a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#size\">size</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#slab\">slab</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SCSI: can't init sg slab %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup_sdb\">cleanup_sdb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#pool\">pool</a> = <a class=\"id\" href=\"#mempool_create_slab_pool\">mempool_create_slab_pool</a>(<a class=\"id\" href=\"#SG_MEMPOOL_SIZE\">SG_MEMPOOL_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#slab\">slab</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#pool\">pool</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SCSI: can't init sg mempool %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup_sdb\">cleanup_sdb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#cleanup_sdb\">cleanup_sdb</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#SG_MEMPOOL_NR\">SG_MEMPOOL_NR</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_host_sg_pool\">scsi_host_sg_pool</a> *<a class=\"id\" href=\"#sgp\">sgp</a> = <a class=\"id\" href=\"#scsi_sg_pools\">scsi_sg_pools</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#pool\">pool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_destroy\">mempool_destroy</a>(<a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#pool\">pool</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#slab\">slab</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#slab\">slab</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#scsi_sdb_cache\">scsi_sdb_cache</a>);", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#scsi_exit_queue\">scsi_exit_queue</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#scsi_sdb_cache\">scsi_sdb_cache</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#SG_MEMPOOL_NR\">SG_MEMPOOL_NR</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_host_sg_pool\">scsi_host_sg_pool</a> *<a class=\"id\" href=\"#sgp\">sgp</a> = <a class=\"id\" href=\"#scsi_sg_pools\">scsi_sg_pools</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_destroy\">mempool_destroy</a>(<a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#pool\">pool</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#slab\">slab</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>scsi_mode_select - issue a mode select</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev:<span class=\"ts\"/>SCSI device to be queried</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pf:<span class=\"ts\"/>Page format bit (1 == standard, 0 == vendor specific)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sp:<span class=\"ts\"/>Save page bit (0 == don't save, 1 == save)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@modepage: mode page being requested</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buffer: request buffer (may not be smaller than eight bytes)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len:<span class=\"ts\"/>length of request buffer.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@timeout: command timeout</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@retries: number of retries before failing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@data: returns a structure abstracting the mode header data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sshdr: place to put sense data (or NULL if no sense to be collected).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>must be SCSI_SENSE_BUFFERSIZE big.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns zero if successful; negative error number or scsi</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>status on error</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#scsi_mode_select\">scsi_mode_select</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, int <a class=\"id\" href=\"#pf\">pf</a>, int <a class=\"id\" href=\"#sp\">sp</a>, int <a class=\"id\" href=\"#modepage\">modepage</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#timeout\">timeout</a>, int <a class=\"id\" href=\"#retries\">retries</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#scsi_mode_data\">scsi_mode_data</a> *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> *<a class=\"id\" href=\"#sshdr\">sshdr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#cmd\">cmd</a>[10];", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#real_buffer\">real_buffer</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, 0, sizeof(<a class=\"id\" href=\"#cmd\">cmd</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[1] = (<a class=\"id\" href=\"#pf\">pf</a> ? 0x10 : 0) | (<a class=\"id\" href=\"#sp\">sp</a> ? 0x01 : 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#use_10_for_ms\">use_10_for_ms</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; 65535)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_buffer\">real_buffer</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(8 + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#real_buffer\">real_buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#real_buffer\">real_buffer</a> + 8, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_buffer\">real_buffer</a>[0] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_buffer\">real_buffer</a>[1] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_buffer\">real_buffer</a>[2] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#medium_type\">medium_type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_buffer\">real_buffer</a>[3] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#device_specific\">device_specific</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_buffer\">real_buffer</a>[4] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#longlba\">longlba</a> ? 0x01 : 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_buffer\">real_buffer</a>[5] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_buffer\">real_buffer</a>[6] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block_descriptor_length\">block_descriptor_length</a> >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_buffer\">real_buffer</a>[7] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block_descriptor_length\">block_descriptor_length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[0] = <a class=\"id\" href=\"#MODE_SELECT_10\">MODE_SELECT_10</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[7] = <a class=\"id\" href=\"#len\">len</a> >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[8] = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; 255 || <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block_descriptor_length\">block_descriptor_length</a> &gt; 255 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#longlba\">longlba</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_buffer\">real_buffer</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(4 + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#real_buffer\">real_buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#real_buffer\">real_buffer</a> + 4, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_buffer\">real_buffer</a>[0] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_buffer\">real_buffer</a>[1] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#medium_type\">medium_type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_buffer\">real_buffer</a>[2] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#device_specific\">device_specific</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#real_buffer\">real_buffer</a>[3] = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block_descriptor_length\">block_descriptor_length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[0] = <a class=\"id\" href=\"#MODE_SELECT\">MODE_SELECT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[4] = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#scsi_execute_req\">scsi_execute_req</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>, <a class=\"id\" href=\"#real_buffer\">real_buffer</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#sshdr\">sshdr</a>, <a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#retries\">retries</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#real_buffer\">real_buffer</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#scsi_mode_select\">scsi_mode_select</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>scsi_mode_sense - issue a mode sense, falling back from 10 to six bytes if necessary.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev:<span class=\"ts\"/>SCSI device to be queried</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dbd:<span class=\"ts\"/>set if mode sense will allow block descriptors to be returned</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@modepage: mode page being requested</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buffer: request buffer (may not be smaller than eight bytes)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len:<span class=\"ts\"/>length of request buffer.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@timeout: command timeout</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@retries: number of retries before failing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@data: returns a structure abstracting the mode header data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sshdr: place to put sense data (or NULL if no sense to be collected).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>must be SCSI_SENSE_BUFFERSIZE big.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns zero if unsuccessful, or the header offset (either 4</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or 8 depending on whether a six or ten byte command was</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>issued) if successful.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#scsi_mode_sense\">scsi_mode_sense</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, int <a class=\"id\" href=\"#dbd\">dbd</a>, int <a class=\"id\" href=\"#modepage\">modepage</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#timeout\">timeout</a>, int <a class=\"id\" href=\"#retries\">retries</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#scsi_mode_data\">scsi_mode_data</a> *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> *<a class=\"id\" href=\"#sshdr\">sshdr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#cmd\">cmd</a>[12];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#use_10_for_ms\">use_10_for_ms</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#header_length\">header_length</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#my_sshdr\">my_sshdr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#data\">data</a>, 0, sizeof(*<a class=\"id\" href=\"#data\">data</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>[0], 0, 12);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[1] = <a class=\"id\" href=\"#dbd\">dbd</a> &amp; 0x18;<span class=\"ts\"/><span class=\"comment\">/* allows DBD and LLBA bits */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[2] = <a class=\"id\" href=\"#modepage\">modepage</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* caller might not be interested in sense, but we need it */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sshdr\">sshdr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sshdr\">sshdr</a> = &amp;<a class=\"id\" href=\"#my_sshdr\">my_sshdr</a>;", 
"", 
" <a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#use_10_for_ms\">use_10_for_ms</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#use_10_for_ms\">use_10_for_ms</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#use_10_for_ms\">use_10_for_ms</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 8)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 8;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[0] = <a class=\"id\" href=\"#MODE_SENSE_10\">MODE_SENSE_10</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[8] = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header_length\">header_length</a> = 8;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 4;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[0] = <a class=\"id\" href=\"#MODE_SENSE\">MODE_SENSE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[4] = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header_length\">header_length</a> = 4;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, 0, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#scsi_execute_req\">scsi_execute_req</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sshdr\">sshdr</a>, <a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#retries\">retries</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This code looks awful: what it's doing is making sure an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ILLEGAL REQUEST sense return identifies the actual command</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * byte as the problem.  MODE_SENSE commands can return</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ILLEGAL REQUEST if the code page isn't supported */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#use_10_for_ms\">use_10_for_ms</a> && !<a class=\"id\" href=\"#scsi_status_is_good\">scsi_status_is_good</a>(<a class=\"id\" href=\"#result\">result</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#driver_byte\">driver_byte</a>(<a class=\"id\" href=\"#result\">result</a>) &amp; <a class=\"id\" href=\"#DRIVER_SENSE\">DRIVER_SENSE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_sense_valid\">scsi_sense_valid</a>(<a class=\"id\" href=\"#sshdr\">sshdr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#asc\">asc</a> == 0x20) && (<a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#ascq\">ascq</a> == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Invalid command operation code</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#use_10_for_ms\">use_10_for_ms</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#scsi_status_is_good\">scsi_status_is_good</a>(<a class=\"id\" href=\"#result\">result</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#buffer\">buffer</a>[0] == 0x86 && <a class=\"id\" href=\"#buffer\">buffer</a>[1] == 0x0b &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#modepage\">modepage</a> == 6 || <a class=\"id\" href=\"#modepage\">modepage</a> == 8))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Initio breakage? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header_length\">header_length</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#length\">length</a> = 13;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#medium_type\">medium_type</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#device_specific\">device_specific</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#longlba\">longlba</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block_descriptor_length\">block_descriptor_length</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if(<a class=\"id\" href=\"#use_10_for_ms\">use_10_for_ms</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#buffer\">buffer</a>[0]*256 + <a class=\"id\" href=\"#buffer\">buffer</a>[1] + 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#medium_type\">medium_type</a> = <a class=\"id\" href=\"#buffer\">buffer</a>[2];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#device_specific\">device_specific</a> = <a class=\"id\" href=\"#buffer\">buffer</a>[3];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#longlba\">longlba</a> = <a class=\"id\" href=\"#buffer\">buffer</a>[4] &amp; 0x01;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block_descriptor_length\">block_descriptor_length</a> = <a class=\"id\" href=\"#buffer\">buffer</a>[6]*256", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#buffer\">buffer</a>[7];", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#buffer\">buffer</a>[0] + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#medium_type\">medium_type</a> = <a class=\"id\" href=\"#buffer\">buffer</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#device_specific\">device_specific</a> = <a class=\"id\" href=\"#buffer\">buffer</a>[2];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#block_descriptor_length\">block_descriptor_length</a> = <a class=\"id\" href=\"#buffer\">buffer</a>[3];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#header_length\">header_length</a> = <a class=\"id\" href=\"#header_length\">header_length</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_mode_sense\">scsi_mode_sense</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>scsi_test_unit_ready - test if unit is ready</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev:<span class=\"ts\"/>scsi device to change the state of.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@timeout: command timeout</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@retries: number of retries before failing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sshdr_external: Optional pointer to struct scsi_sense_hdr for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>returning sense. Make sure that this is cleared before passing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>in.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns zero if unsuccessful or an error if TUR failed.  For</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>removable media, a return of NOT_READY or UNIT_ATTENTION is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>translated to success, with the -&gt;changed flag updated.</span>", 
"<span class=\"comment\"> **/</span>", 
"int", 
"<a class=\"id\" href=\"#scsi_test_unit_ready\">scsi_test_unit_ready</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, int <a class=\"id\" href=\"#timeout\">timeout</a>, int <a class=\"id\" href=\"#retries\">retries</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> *<a class=\"id\" href=\"#sshdr_external\">sshdr_external</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#cmd\">cmd</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TEST_UNIT_READY\">TEST_UNIT_READY</a>, 0, 0, 0, 0, 0,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> *<a class=\"id\" href=\"#sshdr\">sshdr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sshdr_external\">sshdr_external</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sshdr\">sshdr</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#sshdr\">sshdr</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sshdr\">sshdr</a> = <a class=\"id\" href=\"#sshdr_external\">sshdr_external</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* try to eat the UNIT_ATTENTION if there are enough retries */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#scsi_execute_req\">scsi_execute_req</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, <a class=\"id\" href=\"#sshdr\">sshdr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#retries\">retries</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#removable\">removable</a> && <a class=\"id\" href=\"#scsi_sense_valid\">scsi_sense_valid</a>(<a class=\"id\" href=\"#sshdr\">sshdr</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#UNIT_ATTENTION\">UNIT_ATTENTION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#changed\">changed</a> = 1;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#scsi_sense_valid\">scsi_sense_valid</a>(<a class=\"id\" href=\"#sshdr\">sshdr</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#UNIT_ATTENTION\">UNIT_ATTENTION</a> && --<a class=\"id\" href=\"#retries\">retries</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sshdr\">sshdr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* could not allocate sense buffer, so can't process it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#removable\">removable</a> && <a class=\"id\" href=\"#scsi_sense_valid\">scsi_sense_valid</a>(<a class=\"id\" href=\"#sshdr\">sshdr</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#UNIT_ATTENTION\">UNIT_ATTENTION</a> ||", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#NOT_READY\">NOT_READY</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#changed\">changed</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sshdr_external\">sshdr_external</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_test_unit_ready\">scsi_test_unit_ready</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>scsi_device_set_state - Take the given device through the device state model.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev:<span class=\"ts\"/>scsi device to change the state of.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@state:<span class=\"ts\"/>state to change to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns zero if unsuccessful or an error if the requested </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>transition is illegal.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#scsi_device_set_state\">scsi_device_set_state</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, enum <a class=\"id\" href=\"#scsi_device_state\">scsi_device_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#scsi_device_state\">scsi_device_state</a> <a class=\"id\" href=\"#oldstate\">oldstate</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_state\">sdev_state</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#oldstate\">oldstate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_CREATED\">SDEV_CREATED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#oldstate\">oldstate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_CREATED_BLOCK\">SDEV_CREATED_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#illegal\">illegal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_RUNNING\">SDEV_RUNNING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#oldstate\">oldstate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_CREATED\">SDEV_CREATED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_OFFLINE\">SDEV_OFFLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_QUIESCE\">SDEV_QUIESCE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_BLOCK\">SDEV_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#illegal\">illegal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_QUIESCE\">SDEV_QUIESCE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#oldstate\">oldstate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_RUNNING\">SDEV_RUNNING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_OFFLINE\">SDEV_OFFLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#illegal\">illegal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_OFFLINE\">SDEV_OFFLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#oldstate\">oldstate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_CREATED\">SDEV_CREATED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_RUNNING\">SDEV_RUNNING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_QUIESCE\">SDEV_QUIESCE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_BLOCK\">SDEV_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#illegal\">illegal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_BLOCK\">SDEV_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#oldstate\">oldstate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_RUNNING\">SDEV_RUNNING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_CREATED_BLOCK\">SDEV_CREATED_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#illegal\">illegal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_CREATED_BLOCK\">SDEV_CREATED_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#oldstate\">oldstate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_CREATED\">SDEV_CREATED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#illegal\">illegal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_CANCEL\">SDEV_CANCEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#oldstate\">oldstate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_CREATED\">SDEV_CREATED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_RUNNING\">SDEV_RUNNING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_QUIESCE\">SDEV_QUIESCE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_OFFLINE\">SDEV_OFFLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_BLOCK\">SDEV_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#illegal\">illegal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_DEL\">SDEV_DEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#oldstate\">oldstate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_CREATED\">SDEV_CREATED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_RUNNING\">SDEV_RUNNING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_OFFLINE\">SDEV_OFFLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_CANCEL\">SDEV_CANCEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#illegal\">illegal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_state\">sdev_state</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#illegal\">illegal</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(1, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Illegal state transition %s->%s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#scsi_device_state_name\">scsi_device_state_name</a>(<a class=\"id\" href=\"#oldstate\">oldstate</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#scsi_device_state_name\">scsi_device_state_name</a>(<a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_device_set_state\">scsi_device_set_state</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>sdev_evt_emit - emit a single SCSI device uevent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev: associated SCSI device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@evt: event to emit</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Send a single uevent (scsi_event) to the associated scsi_device.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_evt_emit\">scsi_evt_emit</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, struct <a class=\"id\" href=\"#scsi_event\">scsi_event</a> *<a class=\"id\" href=\"#evt\">evt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#envp\">envp</a>[3];", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#evt\">evt</a>-><a class=\"id\" href=\"#evt_type\">evt_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SDEV_EVT_MEDIA_CHANGE\">SDEV_EVT_MEDIA_CHANGE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#envp\">envp</a>[<a class=\"id\" href=\"#idx\">idx</a>++] = \"SDEV_MEDIA_CHANGE=1\";", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* do nothing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#envp\">envp</a>[<a class=\"id\" href=\"#idx\">idx</a>++] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_uevent_env\">kobject_uevent_env</a>(&amp;<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>.<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#KOBJ_CHANGE\">KOBJ_CHANGE</a>, <a class=\"id\" href=\"#envp\">envp</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>sdev_evt_thread - send a uevent for each scsi event</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@work: work struct for scsi_device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Dispatch queued events to their associated scsi_device kobjects</span>", 
];
xr_frag_insert('l/90/b508331b0cd6187fb24152f85a9dc7aa48a1d9.xr', __xr_tmp);
