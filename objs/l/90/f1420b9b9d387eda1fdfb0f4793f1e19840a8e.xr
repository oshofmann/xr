var __xr_tmp = [
"<span class=\"comment\"> * sections blocking the current preemptible-RCU expedited grace period.</span>", 
"<span class=\"comment\"> * If there is no preemptible-RCU expedited grace period currently in</span>", 
"<span class=\"comment\"> * progress, returns zero unconditionally.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcu_preempted_readers_exp\">rcu_preempted_readers_exp</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[2]) ||", 
"<span class=\"ts\"/>       !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[3]);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * return non-zero if there is no RCU expedited grace period in progress</span>", 
"<span class=\"comment\"> * for the specified rcu_node structure, in other words, if all CPUs and</span>", 
"<span class=\"comment\"> * tasks covered by the specified rcu_node structure have done their bit</span>", 
"<span class=\"comment\"> * for the current expedited grace period.  Works only for preemptible</span>", 
"<span class=\"comment\"> * RCU -- other RCU implementation use other means.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller must hold sync_rcu_preempt_exp_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#sync_rcu_preempt_exp_done\">sync_rcu_preempt_exp_done</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#rcu_preempted_readers_exp\">rcu_preempted_readers_exp</a>(<a class=\"id\" href=\"#rnp\">rnp</a>) &&", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#expmask\">expmask</a>) == 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Report the exit from RCU read-side critical section for the last task</span>", 
"<span class=\"comment\"> * that queued itself during or before the current expedited preemptible-RCU</span>", 
"<span class=\"comment\"> * grace period.  This event is reported either to the rcu_node structure on</span>", 
"<span class=\"comment\"> * which the task was queued or to one of that rcu_node structure's ancestors,</span>", 
"<span class=\"comment\"> * recursively up the tree.  (Calm down, calm down, we do the recursion</span>", 
"<span class=\"comment\"> * iteratively!)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller must hold sync_rcu_preempt_exp_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_report_exp_rnp\">rcu_report_exp_rnp</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sync_rcu_preempt_exp_done\">sync_rcu_preempt_exp_done</a>(<a class=\"id\" href=\"#rnp\">rnp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#parent\">parent</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#sync_rcu_preempt_exp_wq\">sync_rcu_preempt_exp_wq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grpmask\">grpmask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>); <span class=\"comment\">/* irqs remain disabled */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>); <span class=\"comment\">/* irqs already disabled */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#expmask\">expmask</a> &= ~<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Snapshot the tasks blocking the newly started preemptible-RCU expedited</span>", 
"<span class=\"comment\"> * grace period for the specified rcu_node structure.  If there are no such</span>", 
"<span class=\"comment\"> * tasks, report it up the rcu_node hierarchy.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller must hold sync_rcu_preempt_exp_mutex and rsp-&gt;onofflock.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#sync_rcu_preempt_exp_init\">sync_rcu_preempt_exp_init</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#must_wait\">must_wait</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>); <span class=\"comment\">/* irqs already disabled */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_splice_init\">list_splice_init</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[0], &amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[2]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_splice_init\">list_splice_init</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[1], &amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[3]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#must_wait\">must_wait</a> = <a class=\"id\" href=\"#rcu_preempted_readers_exp\">rcu_preempted_readers_exp</a>(<a class=\"id\" href=\"#rnp\">rnp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>); <span class=\"comment\">/* irqs remain disabled */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#must_wait\">must_wait</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_report_exp_rnp\">rcu_report_exp_rnp</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wait for an rcu-preempt grace period, but expedite it.  The basic idea</span>", 
"<span class=\"comment\"> * is to invoke synchronize_sched_expedited() to push all the tasks to</span>", 
"<span class=\"comment\"> * the -&gt;blocked_tasks[] lists, move all entries from the first set of</span>", 
"<span class=\"comment\"> * -&gt;blocked_tasks[] lists to the second set, and finally wait for this</span>", 
"<span class=\"comment\"> * second set to drain.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#synchronize_rcu_expedited\">synchronize_rcu_expedited</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a> = &amp;<a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#snap\">snap</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#trycount\">trycount</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* Caller's modifications seen first by other CPUs. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snap\">snap</a> = <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#sync_rcu_preempt_exp_count\">sync_rcu_preempt_exp_count</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* Above access cannot bleed into critical section. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Acquire lock, falling back to synchronize_rcu() if too many</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock-acquisition failures.  Of course, if someone does the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * expedited grace period for us, just leave.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#mutex_trylock\">mutex_trylock</a>(&amp;<a class=\"id\" href=\"#sync_rcu_preempt_exp_mutex\">sync_rcu_preempt_exp_mutex</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#trycount\">trycount</a>++ &lt; 10)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(<a class=\"id\" href=\"#trycount\">trycount</a> * <a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#sync_rcu_preempt_exp_count\">sync_rcu_preempt_exp_count</a>) - <a class=\"id\" href=\"#snap\">snap</a>) &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#mb_ret\">mb_ret</a>; <span class=\"comment\">/* Others did our work for us. */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#sync_rcu_preempt_exp_count\">sync_rcu_preempt_exp_count</a>) - <a class=\"id\" href=\"#snap\">snap</a>) &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_mb_ret\">unlock_mb_ret</a>; <span class=\"comment\">/* Others did our work for us. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* force all RCU readers onto blocked_tasks[]. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched_expedited\">synchronize_sched_expedited</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#onofflock\">onofflock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize -&gt;expmask for all non-leaf rcu_node structures. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_for_each_nonleaf_node_breadth_first\">rcu_for_each_nonleaf_node_breadth_first</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>); <span class=\"comment\">/* irqs already disabled. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#expmask\">expmask</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmaskinit\">qsmaskinit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>); <span class=\"comment\">/* irqs remain disabled. */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Snapshot current state of -&gt;blocked_tasks[] lists. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_for_each_leaf_node\">rcu_for_each_leaf_node</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_rcu_preempt_exp_init\">sync_rcu_preempt_exp_init</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#NUM_RCU_NODES\">NUM_RCU_NODES</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_rcu_preempt_exp_init\">sync_rcu_preempt_exp_init</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(<a class=\"id\" href=\"#rsp\">rsp</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#onofflock\">onofflock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for snapshotted -&gt;blocked_tasks[] lists to drain. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_event\">wait_event</a>(<a class=\"id\" href=\"#sync_rcu_preempt_exp_wq\">sync_rcu_preempt_exp_wq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sync_rcu_preempt_exp_done\">sync_rcu_preempt_exp_done</a>(<a class=\"id\" href=\"#rnp\">rnp</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clean up and exit. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* ensure expedited GP seen before counter increment. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#sync_rcu_preempt_exp_count\">sync_rcu_preempt_exp_count</a>)++;", 
"<a class=\"id\" href=\"#unlock_mb_ret\">unlock_mb_ret</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sync_rcu_preempt_exp_mutex\">sync_rcu_preempt_exp_mutex</a>);", 
"<a class=\"id\" href=\"#mb_ret\">mb_ret</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* ensure subsequent action seen after grace period. */</span>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#synchronize_rcu_expedited\">synchronize_rcu_expedited</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check to see if there is any immediate preemptable-RCU-related work</span>", 
"<span class=\"comment\"> * to be done.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcu_preempt_pending\">rcu_preempt_pending</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__rcu_pending\">__rcu_pending</a>(&amp;<a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_preempt_data\">rcu_preempt_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Does preemptable RCU need the CPU to stay out of dynticks mode?</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcu_preempt_needs_cpu\">rcu_preempt_needs_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return !!<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_preempt_data\">rcu_preempt_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#nxtlist\">nxtlist</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_barrier - Wait until all in-flight call_rcu() callbacks complete.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_barrier\">rcu_barrier</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_rcu_barrier\">_rcu_barrier</a>(&amp;<a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>, <a class=\"id\" href=\"#call_rcu\">call_rcu</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_barrier\">rcu_barrier</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize preemptable RCU's per-CPU data.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#rcu_preempt_init_percpu_data\">rcu_preempt_init_percpu_data</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_init_percpu_data\">rcu_init_percpu_data</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Move preemptable RCU's callbacks to -&gt;orphan_cbs_list.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_preempt_send_cbs_to_orphanage\">rcu_preempt_send_cbs_to_orphanage</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_send_cbs_to_orphanage\">rcu_send_cbs_to_orphanage</a>(&amp;<a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize preemptable RCU's state structures.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__rcu_init_preempt\">__rcu_init_preempt</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RCU_INIT_FLAVOR\">RCU_INIT_FLAVOR</a>(&amp;<a class=\"id\" href=\"#rcu_preempt_state\">rcu_preempt_state</a>, <a class=\"id\" href=\"#rcu_preempt_data\">rcu_preempt_data</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check for a task exiting while in a preemptable-RCU read-side</span>", 
"<span class=\"comment\"> * critical section, clean up if so.  No need to issue warnings,</span>", 
"<span class=\"comment\"> * as debug_check_no_locks_held() already does this if lockdep</span>", 
"<span class=\"comment\"> * is enabled.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#exit_rcu\">exit_rcu</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_read_lock_nesting\">rcu_read_lock_nesting</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#rcu_read_lock_nesting\">rcu_read_lock_nesting</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"#else <span class=\"comment\">/* #ifdef CONFIG_TREE_PREEMPT_RCU */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tell them what RCU they are running.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#rcu_bootup_announce\">rcu_bootup_announce</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Hierarchical RCU implementation.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_bootup_announce_oddness\">rcu_bootup_announce_oddness</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the number of RCU batches processed thus far for debug &amp; stats.</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#rcu_batches_completed\">rcu_batches_completed</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_batches_completed_sched\">rcu_batches_completed_sched</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_batches_completed\">rcu_batches_completed</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Force a quiescent state for RCU, which, because there is no preemptible</span>", 
"<span class=\"comment\"> * RCU, becomes the same as rcu-sched.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_force_quiescent_state\">rcu_force_quiescent_state</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_sched_force_quiescent_state\">rcu_sched_force_quiescent_state</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_force_quiescent_state\">rcu_force_quiescent_state</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because preemptable RCU does not exist, we never have to check for</span>", 
"<span class=\"comment\"> * CPUs being in quiescent states.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_preempt_note_context_switch\">rcu_preempt_note_context_switch</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because preemptable RCU does not exist, there are never any preempted</span>", 
"<span class=\"comment\"> * RCU readers.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcu_preempted_readers\">rcu_preempted_readers</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"", 
"<span class=\"comment\">/* Because preemptible RCU does not exist, no quieting of tasks. */</span>", 
"static void <a class=\"id\" href=\"#rcu_report_unblock_qs_rnp\">rcu_report_unblock_qs_rnp</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_HOTPLUG_CPU */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RCU_CPU_STALL_DETECTOR\">CONFIG_RCU_CPU_STALL_DETECTOR</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because preemptable RCU does not exist, we never have to check for</span>", 
"<span class=\"comment\"> * tasks blocked within RCU read-side critical sections.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_print_detail_task_stall\">rcu_print_detail_task_stall</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because preemptable RCU does not exist, we never have to check for</span>", 
"<span class=\"comment\"> * tasks blocked within RCU read-side critical sections.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_print_task_stall\">rcu_print_task_stall</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_RCU_CPU_STALL_DETECTOR */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because there is no preemptable RCU, there can be no readers blocked,</span>", 
"<span class=\"comment\"> * so there is no need to check for blocked tasks.  So check only for</span>", 
"<span class=\"comment\"> * bogus qsmask values.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_preempt_check_blocked_tasks\">rcu_preempt_check_blocked_tasks</a>(struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because preemptable RCU does not exist, it never needs to migrate</span>", 
"<span class=\"comment\"> * tasks that were blocked within RCU read-side critical sections, and</span>", 
"<span class=\"comment\"> * such non-existent tasks cannot possibly have been blocking the current</span>", 
"<span class=\"comment\"> * grace period.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcu_preempt_offline_tasks\">rcu_preempt_offline_tasks</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because preemptable RCU does not exist, it never needs CPU-offline</span>", 
"<span class=\"comment\"> * processing.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_preempt_offline_cpu\">rcu_preempt_offline_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_HOTPLUG_CPU */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because preemptable RCU does not exist, it never has any callbacks</span>", 
"<span class=\"comment\"> * to check.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_preempt_check_callbacks\">rcu_preempt_check_callbacks</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because preemptable RCU does not exist, it never has any callbacks</span>", 
"<span class=\"comment\"> * to process.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_preempt_process_callbacks\">rcu_preempt_process_callbacks</a>(void)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In classic RCU, call_rcu() is just call_rcu_sched().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#call_rcu\">call_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>, void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu\">rcu</a>))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu_sched\">call_rcu_sched</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#func\">func</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#call_rcu\">call_rcu</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wait for an rcu-preempt grace period, but make it happen quickly.</span>", 
"<span class=\"comment\"> * But because preemptable RCU does not exist, map to rcu-sched.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#synchronize_rcu_expedited\">synchronize_rcu_expedited</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched_expedited\">synchronize_sched_expedited</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#synchronize_rcu_expedited\">synchronize_rcu_expedited</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because preemptable RCU does not exist, there is never any need to</span>", 
"<span class=\"comment\"> * report on tasks preempted in RCU read-side critical sections during</span>", 
"<span class=\"comment\"> * expedited RCU grace periods.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_report_exp_rnp\">rcu_report_exp_rnp</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>)", 
"{", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_HOTPLUG_CPU */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because preemptable RCU does not exist, it never has any work to do.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcu_preempt_pending\">rcu_preempt_pending</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because preemptable RCU does not exist, it never needs any CPU.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcu_preempt_needs_cpu\">rcu_preempt_needs_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because preemptable RCU does not exist, rcu_barrier() is just</span>", 
"<span class=\"comment\"> * another name for rcu_barrier_sched().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_barrier\">rcu_barrier</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_barrier_sched\">rcu_barrier_sched</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_barrier\">rcu_barrier</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because preemptable RCU does not exist, there is no per-CPU</span>", 
"<span class=\"comment\"> * data to initialize.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#rcu_preempt_init_percpu_data\">rcu_preempt_init_percpu_data</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because there is no preemptable RCU, there are no callbacks to move.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_preempt_send_cbs_to_orphanage\">rcu_preempt_send_cbs_to_orphanage</a>(void)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because preemptable RCU does not exist, it need not be initialized.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__rcu_init_preempt\">__rcu_init_preempt</a>(void)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifdef CONFIG_TREE_PREEMPT_RCU */</span>", 
"", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_RCU_FAST_NO_HZ\">CONFIG_RCU_FAST_NO_HZ</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check to see if any future RCU-related work will need to be done</span>", 
"<span class=\"comment\"> * by the current CPU, even if none need be done immediately, returning</span>", 
"<span class=\"comment\"> * 1 if so.  This function is part of the RCU implementation; it is -not-</span>", 
"<span class=\"comment\"> * an exported member of the RCU API.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Because we have preemptible RCU, just check whether this CPU needs</span>", 
"<span class=\"comment\"> * any flavor of RCU.  Do not chew up lots of CPU cycles with preemption</span>", 
"<span class=\"comment\"> * disabled in a most-likely vain attempt to cause RCU not to need this CPU.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#rcu_needs_cpu\">rcu_needs_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_needs_cpu_quick_check\">rcu_needs_cpu_quick_check</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check to see if we need to continue a callback-flush operations to</span>", 
"<span class=\"comment\"> * allow the last CPU to enter dyntick-idle mode.  But fast dyntick-idle</span>", 
"<span class=\"comment\"> * entry is not configured, so we never do need to.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_needs_cpu_flush\">rcu_needs_cpu_flush</a>(void)", 
"{", 
"}", 
"", 
"#else <span class=\"comment\">/* #if !defined(CONFIG_RCU_FAST_NO_HZ) */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_NEEDS_CPU_FLUSHES\">RCU_NEEDS_CPU_FLUSHES</a> 5", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(int, <a class=\"id\" href=\"#rcu_dyntick_drain\">rcu_dyntick_drain</a>);", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#rcu_dyntick_holdoff\">rcu_dyntick_holdoff</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check to see if any future RCU-related work will need to be done</span>", 
"<span class=\"comment\"> * by the current CPU, even if none need be done immediately, returning</span>", 
"<span class=\"comment\"> * 1 if so.  This function is part of the RCU implementation; it is -not-</span>", 
"<span class=\"comment\"> * an exported member of the RCU API.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Because we are not supporting preemptible RCU, attempt to accelerate</span>", 
"<span class=\"comment\"> * any current grace periods so that RCU no longer needs this CPU, but</span>", 
"<span class=\"comment\"> * only if all other CPUs are already in dynticks-idle mode.  This will</span>", 
"<span class=\"comment\"> * allow the CPU cores to be powered down immediately, as opposed to after</span>", 
"<span class=\"comment\"> * waiting many milliseconds for grace periods to elapse.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Because it is not legal to invoke rcu_process_callbacks() with irqs</span>", 
"<span class=\"comment\"> * disabled, we do one pass of force_quiescent_state(), then do a</span>", 
"<span class=\"comment\"> * raise_softirq() to cause rcu_process_callbacks() to be invoked later.</span>", 
"<span class=\"comment\"> * The per-cpu rcu_dyntick_drain variable controls the sequencing.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#rcu_needs_cpu\">rcu_needs_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#c\">c</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#snap\">snap</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#snap_nmi\">snap_nmi</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#thatcpu\">thatcpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for being in the holdoff period. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_dyntick_holdoff\">rcu_dyntick_holdoff</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) == <a class=\"id\" href=\"#jiffies\">jiffies</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_needs_cpu_quick_check\">rcu_needs_cpu_quick_check</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't bother unless we are the last non-dyntick-idle CPU. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#thatcpu\">thatcpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#thatcpu\">thatcpu</a> == <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snap\">snap</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a>, <a class=\"id\" href=\"#thatcpu\">thatcpu</a>).<a class=\"id\" href=\"#dynticks\">dynticks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snap_nmi\">snap_nmi</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a>, <a class=\"id\" href=\"#thatcpu\">thatcpu</a>).<a class=\"id\" href=\"#dynticks_nmi\">dynticks_nmi</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* Order sampling of snap with end of grace period. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (((<a class=\"id\" href=\"#snap\">snap</a> &amp; 0x1) != 0) || ((<a class=\"id\" href=\"#snap_nmi\">snap_nmi</a> &amp; 0x1) != 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_dyntick_drain\">rcu_dyntick_drain</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_dyntick_holdoff\">rcu_dyntick_holdoff</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#jiffies\">jiffies</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_needs_cpu_quick_check\">rcu_needs_cpu_quick_check</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check and update the rcu_dyntick_drain sequencing. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_dyntick_drain\">rcu_dyntick_drain</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* First time through, initialize the counter. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_dyntick_drain\">rcu_dyntick_drain</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#RCU_NEEDS_CPU_FLUSHES\">RCU_NEEDS_CPU_FLUSHES</a>;", 
"<span class=\"ts\"/>} else if (--<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_dyntick_drain\">rcu_dyntick_drain</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have hit the limit, so time to give up. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_dyntick_holdoff\">rcu_dyntick_holdoff</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_needs_cpu_quick_check\">rcu_needs_cpu_quick_check</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do one step pushing remaining RCU callbacks through. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_sched_data\">rcu_sched_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#nxtlist\">nxtlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_sched_qs\">rcu_sched_qs</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_quiescent_state\">force_quiescent_state</a>(&amp;<a class=\"id\" href=\"#rcu_sched_state\">rcu_sched_state</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#c\">c</a> || <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_sched_data\">rcu_sched_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#nxtlist\">nxtlist</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_bh_data\">rcu_bh_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#nxtlist\">nxtlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_bh_qs\">rcu_bh_qs</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_quiescent_state\">force_quiescent_state</a>(&amp;<a class=\"id\" href=\"#rcu_bh_state\">rcu_bh_state</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#c\">c</a> || <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_bh_data\">rcu_bh_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#nxtlist\">nxtlist</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If RCU callbacks are still pending, RCU still needs this CPU. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raise_softirq\">raise_softirq</a>(<a class=\"id\" href=\"#RCU_SOFTIRQ\">RCU_SOFTIRQ</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check to see if we need to continue a callback-flush operations to</span>", 
"<span class=\"comment\"> * allow the last CPU to enter dyntick-idle mode.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_needs_cpu_flush\">rcu_needs_cpu_flush</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_dyntick_drain\">rcu_dyntick_drain</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#rcu_needs_cpu\">rcu_needs_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #if !defined(CONFIG_RCU_FAST_NO_HZ) */</span>", 
];
xr_frag_insert('l/90/f1420b9b9d387eda1fdfb0f4793f1e19840a8e.xr', __xr_tmp);
