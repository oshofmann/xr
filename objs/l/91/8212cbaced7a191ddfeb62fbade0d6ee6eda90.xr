var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * net/core/dev_addr_lists.c - Functions for handling net device lists</span>", 
"<span class=\"comment\"> * Copyright (c) 2010 Jiri Pirko &lt;jpirko@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file contains functions for working with unicast, multicast and device</span>", 
"<span class=\"comment\"> * addresses lists.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rtnetlink\">rtnetlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * General list handling functions</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#__hw_addr_add_ex\">__hw_addr_add_ex</a>(struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned char *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#addr_len\">addr_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned char <a class=\"id\" href=\"#addr_type\">addr_type</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#global\">global</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a> *<a class=\"id\" href=\"#ha\">ha</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#alloc_size\">alloc_size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr_len\">addr_len</a> &gt; <a class=\"id\" href=\"#MAX_ADDR_LEN\">MAX_ADDR_LEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#ha\">ha</a>, &amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr_len\">addr_len</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#addr_type\">addr_type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#global\">global</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* check if addr is already used as global */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#global_use\">global_use</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#global_use\">global_use</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#refcount\">refcount</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_size\">alloc_size</a> = sizeof(*<a class=\"id\" href=\"#ha\">ha</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_size\">alloc_size</a> &lt; <a class=\"id\" href=\"#L1_CACHE_BYTES\">L1_CACHE_BYTES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_size\">alloc_size</a> = <a class=\"id\" href=\"#L1_CACHE_BYTES\">L1_CACHE_BYTES</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ha\">ha</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#alloc_size\">alloc_size</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ha\">ha</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr_len\">addr_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#addr_type\">addr_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#refcount\">refcount</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#global_use\">global_use</a> = <a class=\"id\" href=\"#global\">global</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#synced\">synced</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__hw_addr_add\">__hw_addr_add</a>(struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a> *<a class=\"id\" href=\"#list\">list</a>, unsigned char *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#addr_len\">addr_len</a>, unsigned char <a class=\"id\" href=\"#addr_type\">addr_type</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__hw_addr_add_ex\">__hw_addr_add_ex</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr_len\">addr_len</a>, <a class=\"id\" href=\"#addr_type\">addr_type</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ha_rcu_free\">ha_rcu_free</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a> *<a class=\"id\" href=\"#ha\">ha</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ha\">ha</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ha\">ha</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__hw_addr_del_ex\">__hw_addr_del_ex</a>(struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned char *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#addr_len\">addr_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned char <a class=\"id\" href=\"#addr_type\">addr_type</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#global\">global</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a> *<a class=\"id\" href=\"#ha\">ha</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#ha\">ha</a>, &amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr_len\">addr_len</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#addr_type\">addr_type</a> || !<a class=\"id\" href=\"#addr_type\">addr_type</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#global\">global</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#global_use\">global_use</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#global_use\">global_use</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#refcount\">refcount</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#ha_rcu_free\">ha_rcu_free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__hw_addr_del\">__hw_addr_del</a>(struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a> *<a class=\"id\" href=\"#list\">list</a>, unsigned char *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#addr_len\">addr_len</a>, unsigned char <a class=\"id\" href=\"#addr_type\">addr_type</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__hw_addr_del_ex\">__hw_addr_del_ex</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr_len\">addr_len</a>, <a class=\"id\" href=\"#addr_type\">addr_type</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__hw_addr_add_multiple\">__hw_addr_add_multiple</a>(struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a> *<a class=\"id\" href=\"#to_list\">to_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a> *<a class=\"id\" href=\"#from_list\">from_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#addr_len\">addr_len</a>, unsigned char <a class=\"id\" href=\"#addr_type\">addr_type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a> *<a class=\"id\" href=\"#ha\">ha</a>, *<a class=\"id\" href=\"#ha2\">ha2</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#ha\">ha</a>, &amp;<a class=\"id\" href=\"#from_list\">from_list</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#addr_type\">addr_type</a> ? <a class=\"id\" href=\"#addr_type\">addr_type</a> : <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__hw_addr_add\">__hw_addr_add</a>(<a class=\"id\" href=\"#to_list\">to_list</a>, <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr_len\">addr_len</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unroll\">unroll</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#unroll\">unroll</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#ha2\">ha2</a>, &amp;<a class=\"id\" href=\"#from_list\">from_list</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ha2\">ha2</a> == <a class=\"id\" href=\"#ha\">ha</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#addr_type\">addr_type</a> ? <a class=\"id\" href=\"#addr_type\">addr_type</a> : <a class=\"id\" href=\"#ha2\">ha2</a>-><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__hw_addr_del\">__hw_addr_del</a>(<a class=\"id\" href=\"#to_list\">to_list</a>, <a class=\"id\" href=\"#ha2\">ha2</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr_len\">addr_len</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__hw_addr_add_multiple\">__hw_addr_add_multiple</a>);", 
"", 
"void <a class=\"id\" href=\"#__hw_addr_del_multiple\">__hw_addr_del_multiple</a>(struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a> *<a class=\"id\" href=\"#to_list\">to_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a> *<a class=\"id\" href=\"#from_list\">from_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#addr_len\">addr_len</a>, unsigned char <a class=\"id\" href=\"#addr_type\">addr_type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a> *<a class=\"id\" href=\"#ha\">ha</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#ha\">ha</a>, &amp;<a class=\"id\" href=\"#from_list\">from_list</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#addr_type\">addr_type</a> ? <a class=\"id\" href=\"#addr_type\">addr_type</a> : <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__hw_addr_del\">__hw_addr_del</a>(<a class=\"id\" href=\"#to_list\">to_list</a>, <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr_len\">addr_len</a>, <a class=\"id\" href=\"#addr_type\">addr_type</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__hw_addr_del_multiple\">__hw_addr_del_multiple</a>);", 
"", 
"int <a class=\"id\" href=\"#__hw_addr_sync\">__hw_addr_sync</a>(struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a> *<a class=\"id\" href=\"#to_list\">to_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a> *<a class=\"id\" href=\"#from_list\">from_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#addr_len\">addr_len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a> *<a class=\"id\" href=\"#ha\">ha</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#ha\">ha</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#from_list\">from_list</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#synced\">synced</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__hw_addr_add\">__hw_addr_add</a>(<a class=\"id\" href=\"#to_list\">to_list</a>, <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#addr_len\">addr_len</a>, <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#synced\">synced</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#refcount\">refcount</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#refcount\">refcount</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__hw_addr_del\">__hw_addr_del</a>(<a class=\"id\" href=\"#to_list\">to_list</a>, <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr_len\">addr_len</a>, <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__hw_addr_del\">__hw_addr_del</a>(<a class=\"id\" href=\"#from_list\">from_list</a>, <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr_len\">addr_len</a>, <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__hw_addr_sync\">__hw_addr_sync</a>);", 
"", 
"void <a class=\"id\" href=\"#__hw_addr_unsync\">__hw_addr_unsync</a>(struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a> *<a class=\"id\" href=\"#to_list\">to_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a> *<a class=\"id\" href=\"#from_list\">from_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#addr_len\">addr_len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a> *<a class=\"id\" href=\"#ha\">ha</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#ha\">ha</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#from_list\">from_list</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#synced\">synced</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__hw_addr_del\">__hw_addr_del</a>(<a class=\"id\" href=\"#to_list\">to_list</a>, <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#addr_len\">addr_len</a>, <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#synced\">synced</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__hw_addr_del\">__hw_addr_del</a>(<a class=\"id\" href=\"#from_list\">from_list</a>, <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#addr_len\">addr_len</a>, <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__hw_addr_unsync\">__hw_addr_unsync</a>);", 
"", 
"void <a class=\"id\" href=\"#__hw_addr_flush\">__hw_addr_flush</a>(struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a> *<a class=\"id\" href=\"#ha\">ha</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#ha\">ha</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#ha_rcu_free\">ha_rcu_free</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__hw_addr_flush\">__hw_addr_flush</a>);", 
"", 
"void <a class=\"id\" href=\"#__hw_addr_init\">__hw_addr_init</a>(struct <a class=\"id\" href=\"#netdev_hw_addr_list\">netdev_hw_addr_list</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__hw_addr_init\">__hw_addr_init</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Device addresses handling functions</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_addr_flush - Flush device address list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Flush device address list and reset -&gt;dev_addr.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The caller must hold the rtnl_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dev_addr_flush\">dev_addr_flush</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* rtnl_mutex must be held here */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hw_addr_flush\">__hw_addr_flush</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addrs\">dev_addrs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addr\">dev_addr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_addr_flush\">dev_addr_flush</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_addr_init - Init device address list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Init device address list and create the first element,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>used by -&gt;dev_addr.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The caller must hold the rtnl_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_addr_init\">dev_addr_init</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#MAX_ADDR_LEN\">MAX_ADDR_LEN</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a> *<a class=\"id\" href=\"#ha\">ha</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* rtnl_mutex must be held here */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hw_addr_init\">__hw_addr_init</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addrs\">dev_addrs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0, sizeof(<a class=\"id\" href=\"#addr\">addr</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__hw_addr_add\">__hw_addr_add</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addrs\">dev_addrs</a>, <a class=\"id\" href=\"#addr\">addr</a>, sizeof(<a class=\"id\" href=\"#addr\">addr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#NETDEV_HW_ADDR_T_LAN\">NETDEV_HW_ADDR_T_LAN</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get the first (previously created) address from the list</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and set dev_addr pointer to this location.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ha\">ha</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addrs\">dev_addrs</a>.<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addr\">dev_addr</a> = <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_addr_init\">dev_addr_init</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_addr_add - Add a device address</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr: address to add</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr_type: address type</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Add a device address to the device or increase the reference count if</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it already exists.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The caller must hold the rtnl_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_addr_add\">dev_addr_add</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned char *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> unsigned char <a class=\"id\" href=\"#addr_type\">addr_type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__hw_addr_add\">__hw_addr_add</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addrs\">dev_addrs</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>, <a class=\"id\" href=\"#addr_type\">addr_type</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_CHANGEADDR\">NETDEV_CHANGEADDR</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_addr_add\">dev_addr_add</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_addr_del - Release a device address.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr: address to delete</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr_type: address type</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Release reference to a device address and remove it from the device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if the reference count drops to zero.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The caller must hold the rtnl_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_addr_del\">dev_addr_del</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned char *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> unsigned char <a class=\"id\" href=\"#addr_type\">addr_type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a> *<a class=\"id\" href=\"#ha\">ha</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can not remove the first address from the list because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dev-&gt;dev_addr points to that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ha\">ha</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addrs\">dev_addrs</a>.<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addr\">dev_addr</a> && <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#refcount\">refcount</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__hw_addr_del\">__hw_addr_del</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addrs\">dev_addrs</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#addr_type\">addr_type</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_CHANGEADDR\">NETDEV_CHANGEADDR</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_addr_del\">dev_addr_del</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_addr_add_multiple - Add device addresses from another device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@to_dev: device to which addresses will be added</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@from_dev: device from which addresses will be added</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr_type: address type - 0 means type will be used from from_dev</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Add device addresses of the one device to another.</span>", 
"<span class=\"comment\"> **</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The caller must hold the rtnl_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_addr_add_multiple\">dev_addr_add_multiple</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#to_dev\">to_dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#from_dev\">from_dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned char <a class=\"id\" href=\"#addr_type\">addr_type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#from_dev\">from_dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a> != <a class=\"id\" href=\"#to_dev\">to_dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__hw_addr_add_multiple\">__hw_addr_add_multiple</a>(&amp;<a class=\"id\" href=\"#to_dev\">to_dev</a>-><a class=\"id\" href=\"#dev_addrs\">dev_addrs</a>, &amp;<a class=\"id\" href=\"#from_dev\">from_dev</a>-><a class=\"id\" href=\"#dev_addrs\">dev_addrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#to_dev\">to_dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>, <a class=\"id\" href=\"#addr_type\">addr_type</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_CHANGEADDR\">NETDEV_CHANGEADDR</a>, <a class=\"id\" href=\"#to_dev\">to_dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_addr_add_multiple\">dev_addr_add_multiple</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_addr_del_multiple - Delete device addresses by another device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@to_dev: device where the addresses will be deleted</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@from_dev: device by which addresses the addresses will be deleted</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr_type: address type - 0 means type will used from from_dev</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Deletes addresses in to device by the list of addresses in from device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The caller must hold the rtnl_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_addr_del_multiple\">dev_addr_del_multiple</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#to_dev\">to_dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#from_dev\">from_dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned char <a class=\"id\" href=\"#addr_type\">addr_type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#from_dev\">from_dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a> != <a class=\"id\" href=\"#to_dev\">to_dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hw_addr_del_multiple\">__hw_addr_del_multiple</a>(&amp;<a class=\"id\" href=\"#to_dev\">to_dev</a>-><a class=\"id\" href=\"#dev_addrs\">dev_addrs</a>, &amp;<a class=\"id\" href=\"#from_dev\">from_dev</a>-><a class=\"id\" href=\"#dev_addrs\">dev_addrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#to_dev\">to_dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>, <a class=\"id\" href=\"#addr_type\">addr_type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_netdevice_notifiers\">call_netdevice_notifiers</a>(<a class=\"id\" href=\"#NETDEV_CHANGEADDR\">NETDEV_CHANGEADDR</a>, <a class=\"id\" href=\"#to_dev\">to_dev</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_addr_del_multiple\">dev_addr_del_multiple</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unicast list handling functions</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_uc_add - Add a secondary unicast address</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr: address to add</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Add a secondary unicast address to the device or increase</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the reference count if it already exists.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_uc_add\">dev_uc_add</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned char *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_lock_bh\">netif_addr_lock_bh</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__hw_addr_add\">__hw_addr_add</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#uc\">uc</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#NETDEV_HW_ADDR_T_UNICAST\">NETDEV_HW_ADDR_T_UNICAST</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dev_set_rx_mode\">__dev_set_rx_mode</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_unlock_bh\">netif_addr_unlock_bh</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_uc_add\">dev_uc_add</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_uc_del - Release secondary unicast address.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr: address to delete</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Release reference to a secondary unicast address and remove it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from the device if the reference count drops to zero.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_uc_del\">dev_uc_del</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned char *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_lock_bh\">netif_addr_lock_bh</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__hw_addr_del\">__hw_addr_del</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#uc\">uc</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#NETDEV_HW_ADDR_T_UNICAST\">NETDEV_HW_ADDR_T_UNICAST</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dev_set_rx_mode\">__dev_set_rx_mode</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_unlock_bh\">netif_addr_unlock_bh</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_uc_del\">dev_uc_del</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_uc_sync - Synchronize device's unicast list to another device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@to: destination device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@from: source device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Add newly added addresses to the destination device and release</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>addresses that have no users left. The source device must be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>locked by netif_tx_lock_bh.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is intended to be called from the dev-&gt;set_rx_mode</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>function of layered software devices.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_uc_sync\">dev_uc_sync</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#to\">to</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a> != <a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_lock_bh\">netif_addr_lock_bh</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__hw_addr_sync\">__hw_addr_sync</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#uc\">uc</a>, &amp;<a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#uc\">uc</a>, <a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dev_set_rx_mode\">__dev_set_rx_mode</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_unlock_bh\">netif_addr_unlock_bh</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_uc_sync\">dev_uc_sync</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_uc_unsync - Remove synchronized addresses from the destination device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@to: destination device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@from: source device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remove all addresses that were added to the destination device by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_uc_sync(). This function is intended to be called from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev-&gt;stop function of layered software devices.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dev_uc_unsync\">dev_uc_unsync</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#to\">to</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a> != <a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_lock_bh\">netif_addr_lock_bh</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_lock\">netif_addr_lock</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hw_addr_unsync\">__hw_addr_unsync</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#uc\">uc</a>, &amp;<a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#uc\">uc</a>, <a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__dev_set_rx_mode\">__dev_set_rx_mode</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_unlock\">netif_addr_unlock</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_unlock_bh\">netif_addr_unlock_bh</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_uc_unsync\">dev_uc_unsync</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_uc_flush - Flush unicast addresses</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Flush unicast addresses.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dev_uc_flush\">dev_uc_flush</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_lock_bh\">netif_addr_lock_bh</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hw_addr_flush\">__hw_addr_flush</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#uc\">uc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_unlock_bh\">netif_addr_unlock_bh</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_uc_flush\">dev_uc_flush</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_uc_flush - Init unicast address list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Init unicast address list.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dev_uc_init\">dev_uc_init</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hw_addr_init\">__hw_addr_init</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#uc\">uc</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_uc_init\">dev_uc_init</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Multicast list handling functions</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#__dev_mc_add\">__dev_mc_add</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned char *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#global\">global</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_lock_bh\">netif_addr_lock_bh</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__hw_addr_add_ex\">__hw_addr_add_ex</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mc\">mc</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#NETDEV_HW_ADDR_T_MULTICAST\">NETDEV_HW_ADDR_T_MULTICAST</a>, <a class=\"id\" href=\"#global\">global</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dev_set_rx_mode\">__dev_set_rx_mode</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_unlock_bh\">netif_addr_unlock_bh</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_mc_add - Add a multicast address</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr: address to add</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Add a multicast address to the device or increase</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the reference count if it already exists.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_mc_add\">dev_mc_add</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned char *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__dev_mc_add\">__dev_mc_add</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_mc_add\">dev_mc_add</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_mc_add_global - Add a global multicast address</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr: address to add</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Add a global multicast address to the device.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_mc_add_global\">dev_mc_add_global</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned char *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__dev_mc_add\">__dev_mc_add</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_mc_add_global\">dev_mc_add_global</a>);", 
"", 
"static int <a class=\"id\" href=\"#__dev_mc_del\">__dev_mc_del</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned char *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#global\">global</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_lock_bh\">netif_addr_lock_bh</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__hw_addr_del_ex\">__hw_addr_del_ex</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mc\">mc</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#NETDEV_HW_ADDR_T_MULTICAST\">NETDEV_HW_ADDR_T_MULTICAST</a>, <a class=\"id\" href=\"#global\">global</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dev_set_rx_mode\">__dev_set_rx_mode</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_unlock_bh\">netif_addr_unlock_bh</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_mc_del - Delete a multicast address.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr: address to delete</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Release reference to a multicast address and remove it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from the device if the reference count drops to zero.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_mc_del\">dev_mc_del</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned char *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__dev_mc_del\">__dev_mc_del</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_mc_del\">dev_mc_del</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_mc_del_global - Delete a global multicast address.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr: address to delete</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Release reference to a multicast address and remove it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from the device if the reference count drops to zero.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_mc_del_global\">dev_mc_del_global</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned char *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__dev_mc_del\">__dev_mc_del</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_mc_del_global\">dev_mc_del_global</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_mc_sync - Synchronize device's unicast list to another device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@to: destination device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@from: source device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Add newly added addresses to the destination device and release</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>addresses that have no users left. The source device must be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>locked by netif_tx_lock_bh.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is intended to be called from the dev-&gt;set_multicast_list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or dev-&gt;set_rx_mode function of layered software devices.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_mc_sync\">dev_mc_sync</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#to\">to</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a> != <a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_lock_bh\">netif_addr_lock_bh</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__hw_addr_sync\">__hw_addr_sync</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#mc\">mc</a>, &amp;<a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#mc\">mc</a>, <a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dev_set_rx_mode\">__dev_set_rx_mode</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_unlock_bh\">netif_addr_unlock_bh</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_mc_sync\">dev_mc_sync</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_mc_unsync - Remove synchronized addresses from the destination device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@to: destination device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@from: source device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remove all addresses that were added to the destination device by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_mc_sync(). This function is intended to be called from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev-&gt;stop function of layered software devices.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dev_mc_unsync\">dev_mc_unsync</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#to\">to</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a> != <a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_lock_bh\">netif_addr_lock_bh</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_lock\">netif_addr_lock</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hw_addr_unsync\">__hw_addr_unsync</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#mc\">mc</a>, &amp;<a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#mc\">mc</a>, <a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__dev_set_rx_mode\">__dev_set_rx_mode</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_unlock\">netif_addr_unlock</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_unlock_bh\">netif_addr_unlock_bh</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_mc_unsync\">dev_mc_unsync</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_mc_flush - Flush multicast addresses</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Flush multicast addresses.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dev_mc_flush\">dev_mc_flush</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_lock_bh\">netif_addr_lock_bh</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hw_addr_flush\">__hw_addr_flush</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mc\">mc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_unlock_bh\">netif_addr_unlock_bh</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_mc_flush\">dev_mc_flush</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_mc_flush - Init multicast address list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Init multicast address list.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dev_mc_init\">dev_mc_init</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hw_addr_init\">__hw_addr_init</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mc\">mc</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_mc_init\">dev_mc_init</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static int <a class=\"id\" href=\"#dev_mc_seq_show\">dev_mc_seq_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_hw_addr\">netdev_hw_addr</a> *<a class=\"id\" href=\"#ha\">ha</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a> == <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_lock_bh\">netif_addr_lock_bh</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netdev_for_each_mc_addr\">netdev_for_each_mc_addr</a>(<a class=\"id\" href=\"#ha\">ha</a>, <a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"%-4d %-15s %-5d %-5d \", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#refcount\">refcount</a>, <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#global_use\">global_use</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"%02x\", <a class=\"id\" href=\"#ha\">ha</a>-><a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#seq\">seq</a>, '\\n');", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif_addr_unlock_bh\">netif_addr_unlock_bh</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#dev_mc_seq_ops\">dev_mc_seq_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#dev_seq_start\">dev_seq_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a>  = <a class=\"id\" href=\"#dev_seq_next\">dev_seq_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a>  = <a class=\"id\" href=\"#dev_seq_stop\">dev_seq_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a>  = <a class=\"id\" href=\"#dev_mc_seq_show\">dev_mc_seq_show</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#dev_mc_seq_open\">dev_mc_seq_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open_net\">seq_open_net</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#dev_mc_seq_ops\">dev_mc_seq_ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    sizeof(struct <a class=\"id\" href=\"#seq_net_private\">seq_net_private</a>));", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#dev_mc_seq_fops\">dev_mc_seq_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a><span class=\"ts\"/> = <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a>    = <a class=\"id\" href=\"#dev_mc_seq_open\">dev_mc_seq_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a>    = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a>  = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#seq_release_net\">seq_release_net</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#__net_init\">__net_init</a> <a class=\"id\" href=\"#dev_mc_net_init\">dev_mc_net_init</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#proc_net_fops_create\">proc_net_fops_create</a>(<a class=\"id\" href=\"#net\">net</a>, \"dev_mcast\", 0, &amp;<a class=\"id\" href=\"#dev_mc_seq_fops\">dev_mc_seq_fops</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__net_exit\">__net_exit</a> <a class=\"id\" href=\"#dev_mc_net_exit\">dev_mc_net_exit</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_net_remove\">proc_net_remove</a>(<a class=\"id\" href=\"#net\">net</a>, \"dev_mcast\");", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pernet_operations\">pernet_operations</a> <a class=\"id\" href=\"#__net_initdata\">__net_initdata</a> <a class=\"id\" href=\"#dev_mc_net_ops\">dev_mc_net_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#init\">init</a> = <a class=\"id\" href=\"#dev_mc_net_init\">dev_mc_net_init</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#exit\">exit</a> = <a class=\"id\" href=\"#dev_mc_net_exit\">dev_mc_net_exit</a>,", 
"};", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dev_mcast_init\">dev_mcast_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_pernet_subsys\">register_pernet_subsys</a>(&amp;<a class=\"id\" href=\"#dev_mc_net_ops\">dev_mc_net_ops</a>);", 
"}", 
"", 
];
xr_frag_insert('l/91/8212cbaced7a191ddfeb62fbade0d6ee6eda90.xr', __xr_tmp);
