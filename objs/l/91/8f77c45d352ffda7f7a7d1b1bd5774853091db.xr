var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic waiting primitives.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) 2004 William Irwin, Oracle</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"void <a class=\"id\" href=\"#__init_waitqueue_head\">__init_waitqueue_head</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#task_list\">task_list</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__init_waitqueue_head\">__init_waitqueue_head</a>);", 
"", 
"void <a class=\"id\" href=\"#add_wait_queue\">add_wait_queue</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#WQ_FLAG_EXCLUSIVE\">WQ_FLAG_EXCLUSIVE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__add_wait_queue\">__add_wait_queue</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#add_wait_queue\">add_wait_queue</a>);", 
"", 
"void <a class=\"id\" href=\"#add_wait_queue_exclusive\">add_wait_queue_exclusive</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#WQ_FLAG_EXCLUSIVE\">WQ_FLAG_EXCLUSIVE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__add_wait_queue_tail\">__add_wait_queue_tail</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#add_wait_queue_exclusive\">add_wait_queue_exclusive</a>);", 
"", 
"void <a class=\"id\" href=\"#remove_wait_queue\">remove_wait_queue</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__remove_wait_queue\">__remove_wait_queue</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#remove_wait_queue\">remove_wait_queue</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note: we use \"set_current_state()\" _after_ the wait-queue add,</span>", 
"<span class=\"comment\"> * because we need a memory barrier there on SMP, so that any</span>", 
"<span class=\"comment\"> * wake-function that tests for the wait-queue being active</span>", 
"<span class=\"comment\"> * will be guaranteed to see waitqueue addition _or_ subsequent</span>", 
"<span class=\"comment\"> * tests in this thread will see the wakeup having taken place.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The spin_unlock() itself is semi-permeable and only protects</span>", 
"<span class=\"comment\"> * one way (it only protects stuff inside the critical region and</span>", 
"<span class=\"comment\"> * stops them from bleeding out - it would still allow subsequent</span>", 
"<span class=\"comment\"> * loads to move into the critical region).</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>, int <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#WQ_FLAG_EXCLUSIVE\">WQ_FLAG_EXCLUSIVE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#task_list\">task_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__add_wait_queue\">__add_wait_queue</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>);", 
"", 
"void", 
"<a class=\"id\" href=\"#prepare_to_wait_exclusive\">prepare_to_wait_exclusive</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>, int <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#WQ_FLAG_EXCLUSIVE\">WQ_FLAG_EXCLUSIVE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#task_list\">task_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__add_wait_queue_tail\">__add_wait_queue_tail</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#prepare_to_wait_exclusive\">prepare_to_wait_exclusive</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * finish_wait - clean up after waiting in a queue</span>", 
"<span class=\"comment\"> * @q: waitqueue waited on</span>", 
"<span class=\"comment\"> * @wait: wait descriptor</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sets current thread back to running state and removes</span>", 
"<span class=\"comment\"> * the wait descriptor from the given waitqueue if still</span>", 
"<span class=\"comment\"> * queued.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#finish_wait\">finish_wait</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can check for list emptiness outside the lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IFF:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - we use the \"careful\" check that verifies both</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    the next and prev pointers, so that there cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    be any half-pending updates in progress on other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    CPU's that we haven't seen yet (and that might</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    still change the stack area.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - all other users take the lock (ie we can only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    have _one_ other CPU that looks at or modifies</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    the list).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty_careful\">list_empty_careful</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#task_list\">task_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#task_list\">task_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#finish_wait\">finish_wait</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * abort_exclusive_wait - abort exclusive waiting in a queue</span>", 
"<span class=\"comment\"> * @q: waitqueue waited on</span>", 
"<span class=\"comment\"> * @wait: wait descriptor</span>", 
"<span class=\"comment\"> * @state: runstate of the waiter to be woken</span>", 
"<span class=\"comment\"> * @key: key to identify a wait bit queue or %NULL</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sets current thread back to running state and removes</span>", 
"<span class=\"comment\"> * the wait descriptor from the given waitqueue if still</span>", 
"<span class=\"comment\"> * queued.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Wakes up the next waiter if the caller is concurrently</span>", 
"<span class=\"comment\"> * woken up through the queue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This prevents waiter starvation where an exclusive waiter</span>", 
"<span class=\"comment\"> * aborts and is woken up concurrently and noone wakes up</span>", 
"<span class=\"comment\"> * the next waiter.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#abort_exclusive_wait\">abort_exclusive_wait</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mode\">mode</a>, void *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#task_list\">task_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#task_list\">task_list</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_locked_key\">__wake_up_locked_key</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#abort_exclusive_wait\">abort_exclusive_wait</a>);", 
"", 
"int <a class=\"id\" href=\"#autoremove_wake_function\">autoremove_wake_function</a>(<a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>, unsigned <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#sync\">sync</a>, void *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#default_wake_function\">default_wake_function</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#sync\">sync</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#task_list\">task_list</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#autoremove_wake_function\">autoremove_wake_function</a>);", 
"", 
"int <a class=\"id\" href=\"#wake_bit_function\">wake_bit_function</a>(<a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>, unsigned <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#sync\">sync</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wait_bit_key\">wait_bit_key</a> *<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wait_bit_queue\">wait_bit_queue</a> *<a class=\"id\" href=\"#wait_bit\">wait_bit</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#wait\">wait</a>, struct <a class=\"id\" href=\"#wait_bit_queue\">wait_bit_queue</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wait_bit\">wait_bit</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#flags\">flags</a> != <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_bit\">wait_bit</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#bit_nr\">bit_nr</a> != <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#bit_nr\">bit_nr</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#bit_nr\">bit_nr</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#autoremove_wake_function\">autoremove_wake_function</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#sync\">sync</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#wake_bit_function\">wake_bit_function</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * To allow interruptible waiting and asynchronous (i.e. nonblocking)</span>", 
"<span class=\"comment\"> * waiting, the actions of __wait_on_bit() and __wait_on_bit_lock() are</span>", 
"<span class=\"comment\"> * permitted return codes. Nonzero return codes halt waiting and return.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__sched\">__sched</a>", 
"<a class=\"id\" href=\"#__wait_on_bit\">__wait_on_bit</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wq\">wq</a>, struct <a class=\"id\" href=\"#wait_bit_queue\">wait_bit_queue</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#action\">action</a>)(void *), unsigned <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#bit_nr\">bit_nr</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (*<a class=\"id\" href=\"#action\">action</a>)(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#bit_nr\">bit_nr</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#flags\">flags</a>) && !<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__wait_on_bit\">__wait_on_bit</a>);", 
"", 
"int <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#out_of_line_wait_on_bit\">out_of_line_wait_on_bit</a>(void *<a class=\"id\" href=\"#word\">word</a>, int <a class=\"id\" href=\"#bit\">bit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#action\">action</a>)(void *), unsigned <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wq\">wq</a> = <a class=\"id\" href=\"#bit_waitqueue\">bit_waitqueue</a>(<a class=\"id\" href=\"#word\">word</a>, <a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT_BIT\">DEFINE_WAIT_BIT</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#word\">word</a>, <a class=\"id\" href=\"#bit\">bit</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__wait_on_bit\">__wait_on_bit</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#action\">action</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#out_of_line_wait_on_bit\">out_of_line_wait_on_bit</a>);", 
"", 
"int <a class=\"id\" href=\"#__sched\">__sched</a>", 
"<a class=\"id\" href=\"#__wait_on_bit_lock\">__wait_on_bit_lock</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wq\">wq</a>, struct <a class=\"id\" href=\"#wait_bit_queue\">wait_bit_queue</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#action\">action</a>)(void *), unsigned <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait_exclusive\">prepare_to_wait_exclusive</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#bit_nr\">bit_nr</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#action\">action</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#abort_exclusive_wait\">abort_exclusive_wait</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#mode\">mode</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#bit_nr\">bit_nr</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#flags\">flags</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__wait_on_bit_lock\">__wait_on_bit_lock</a>);", 
"", 
"int <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#out_of_line_wait_on_bit_lock\">out_of_line_wait_on_bit_lock</a>(void *<a class=\"id\" href=\"#word\">word</a>, int <a class=\"id\" href=\"#bit\">bit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#action\">action</a>)(void *), unsigned <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wq\">wq</a> = <a class=\"id\" href=\"#bit_waitqueue\">bit_waitqueue</a>(<a class=\"id\" href=\"#word\">word</a>, <a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT_BIT\">DEFINE_WAIT_BIT</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#word\">word</a>, <a class=\"id\" href=\"#bit\">bit</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__wait_on_bit_lock\">__wait_on_bit_lock</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#action\">action</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#out_of_line_wait_on_bit_lock\">out_of_line_wait_on_bit_lock</a>);", 
"", 
"void <a class=\"id\" href=\"#__wake_up_bit\">__wake_up_bit</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wq\">wq</a>, void *<a class=\"id\" href=\"#word\">word</a>, int <a class=\"id\" href=\"#bit\">bit</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wait_bit_key\">wait_bit_key</a> <a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#__WAIT_BIT_KEY_INITIALIZER\">__WAIT_BIT_KEY_INITIALIZER</a>(<a class=\"id\" href=\"#word\">word</a>, <a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(<a class=\"id\" href=\"#wq\">wq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wake_up\">__wake_up</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#TASK_NORMAL\">TASK_NORMAL</a>, 1, &amp;<a class=\"id\" href=\"#key\">key</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__wake_up_bit\">__wake_up_bit</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wake_up_bit - wake up a waiter on a bit</span>", 
"<span class=\"comment\"> * @word: the word being waited on, a kernel virtual address</span>", 
"<span class=\"comment\"> * @bit: the bit of the word being waited on</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There is a standard hashed waitqueue table for generic use. This</span>", 
"<span class=\"comment\"> * is the part of the hashtable's accessor API that wakes up waiters</span>", 
"<span class=\"comment\"> * on a bit. For instance, if one were to have waiters on a bitflag,</span>", 
"<span class=\"comment\"> * one would call wake_up_bit() after clearing the bit.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In order for this to function properly, as it uses waitqueue_active()</span>", 
"<span class=\"comment\"> * internally, some kind of memory barrier must be done prior to calling</span>", 
"<span class=\"comment\"> * this. Typically, this will be smp_mb__after_clear_bit(), but in some</span>", 
"<span class=\"comment\"> * cases where bitflags are manipulated non-atomically under a lock, one</span>", 
"<span class=\"comment\"> * may need to use a less regular barrier, such fs/inode.c's smp_mb(),</span>", 
"<span class=\"comment\"> * because spin_unlock() does not guarantee a memory barrier.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#wake_up_bit\">wake_up_bit</a>(void *<a class=\"id\" href=\"#word\">word</a>, int <a class=\"id\" href=\"#bit\">bit</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_bit\">__wake_up_bit</a>(<a class=\"id\" href=\"#bit_waitqueue\">bit_waitqueue</a>(<a class=\"id\" href=\"#word\">word</a>, <a class=\"id\" href=\"#bit\">bit</a>), <a class=\"id\" href=\"#word\">word</a>, <a class=\"id\" href=\"#bit\">bit</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#wake_up_bit\">wake_up_bit</a>);", 
"", 
"<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#bit_waitqueue\">bit_waitqueue</a>(void *<a class=\"id\" href=\"#word\">word</a>, int <a class=\"id\" href=\"#bit\">bit</a>)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32 ? 5 : 6;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#word\">word</a>));", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a> = (unsigned long)<a class=\"id\" href=\"#word\">word</a> << <a class=\"id\" href=\"#shift\">shift</a> | <a class=\"id\" href=\"#bit\">bit</a>;", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#wait_table\">wait_table</a>[<a class=\"id\" href=\"#hash_long\">hash_long</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#wait_table_bits\">wait_table_bits</a>)];", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bit_waitqueue\">bit_waitqueue</a>);", 
];
xr_frag_insert('l/91/8f77c45d352ffda7f7a7d1b1bd5774853091db.xr', __xr_tmp);
