var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_DCACHE_H\">__LINUX_DCACHE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_DCACHE_H\">__LINUX_DCACHE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rculist\">rculist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#nameidata\">nameidata</a>;", 
"struct <a class=\"id\" href=\"#path\">path</a>;", 
"struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/include/linux/dcache.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Dirent cache data structures</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) Copyright 1997 Thomas Schoebel-Theuer,</span>", 
"<span class=\"comment\"> * with heavy changes by Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_ROOT\">IS_ROOT</a>(<a class=\"id\" href=\"#x\">x</a>) ((<a class=\"id\" href=\"#x\">x</a>) == (<a class=\"id\" href=\"#x\">x</a>)-><a class=\"id\" href=\"#d_parent\">d_parent</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * \"quick string\" -- eases parameter passing, but more importantly</span>", 
"<span class=\"comment\"> * saves \"metadata\" about the string (ie length and the hash).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * hash comes first so it snuggles against d_parent in the</span>", 
"<span class=\"comment\"> * dentry.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#qstr\">qstr</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#name\">name</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#dentry_stat_t\">dentry_stat_t</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_dentry\">nr_dentry</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_unused\">nr_unused</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#age_limit\">age_limit</a>;          <span class=\"comment\">/* age in seconds */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#want_pages\">want_pages</a>;         <span class=\"comment\">/* pages requested by system */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dummy\">dummy</a>[2];", 
"};", 
"extern struct <a class=\"id\" href=\"#dentry_stat_t\">dentry_stat_t</a> <a class=\"id\" href=\"#dentry_stat\">dentry_stat</a>;", 
"", 
"<span class=\"comment\">/* Name hashing routines. Initial hash value */</span>", 
"<span class=\"comment\">/* Hash courtesy of the R5 hash in reiserfs modulo sign bits */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#init_name_hash\">init_name_hash</a>()<span class=\"ts\"/><span class=\"ts\"/>0", 
"", 
"<span class=\"comment\">/* partial hash update function. Assume roughly 4 bits per character */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long", 
"<a class=\"id\" href=\"#partial_name_hash\">partial_name_hash</a>(unsigned long <a class=\"id\" href=\"#c\">c</a>, unsigned long <a class=\"id\" href=\"#prevhash\">prevhash</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#prevhash\">prevhash</a> + (<a class=\"id\" href=\"#c\">c</a> << 4) + (<a class=\"id\" href=\"#c\">c</a> >> 4)) * 11;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Finally: cut down the number of bits to a int value (and try to avoid</span>", 
"<span class=\"comment\"> * losing bits)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#end_name_hash\">end_name_hash</a>(unsigned long <a class=\"id\" href=\"#hash\">hash</a>)", 
"{", 
"<span class=\"ts\"/>return (unsigned int) <a class=\"id\" href=\"#hash\">hash</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Compute the hash for a name string. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int", 
"<a class=\"id\" href=\"#full_name_hash\">full_name_hash</a>(const unsigned char *<a class=\"id\" href=\"#name\">name</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#init_name_hash\">init_name_hash</a>();", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#partial_name_hash\">partial_name_hash</a>(*<a class=\"id\" href=\"#name\">name</a>++, <a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#end_name_hash\">end_name_hash</a>(<a class=\"id\" href=\"#hash\">hash</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to keep struct dentry aligned on 64 byte cachelines (this will</span>", 
"<span class=\"comment\"> * give reasonable cacheline footprint with larger lines without the</span>", 
"<span class=\"comment\"> * large memory footprint increase).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_64BIT\">CONFIG_64BIT</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DNAME_INLINE_LEN_MIN\">DNAME_INLINE_LEN_MIN</a> 32 <span class=\"comment\">/* 192 bytes */</span>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DNAME_INLINE_LEN_MIN\">DNAME_INLINE_LEN_MIN</a> 40 <span class=\"comment\">/* 128 bytes */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#d_count\">d_count</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#d_flags\">d_flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* protected by d_lock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#d_lock\">d_lock</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* per dentry lock */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#d_mounted\">d_mounted</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#d_inode\">d_inode</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Where the name belongs to - NULL is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * negative */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The next three fields are touched by __d_lookup.  Place them here</span>", 
];
xr_frag_insert('l/92/980da333769b9f68832aac329450625a31f78f.xr', __xr_tmp);
