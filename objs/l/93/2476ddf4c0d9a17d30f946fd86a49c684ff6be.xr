var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_RING_BUFFER_H\">_LINUX_RING_BUFFER_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_RING_BUFFER_H\">_LINUX_RING_BUFFER_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmemcheck\">kmemcheck</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a>;", 
"struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Don't refer to this struct directly, use functions below.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_bitfield_begin\">kmemcheck_bitfield_begin</a>(<a class=\"id\" href=\"#bitfield\">bitfield</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type_len\">type_len</a>:5, <a class=\"id\" href=\"#time_delta\">time_delta</a>:27;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_bitfield_end\">kmemcheck_bitfield_end</a>(<a class=\"id\" href=\"#bitfield\">bitfield</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#array\">array</a>[];", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum ring_buffer_type - internal ring buffer types</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @RINGBUF_TYPE_PADDING:<span class=\"ts\"/>Left over page padding or discarded event</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> If time_delta is 0:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  array is ignored</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  size is variable depending on how much</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  padding is needed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> If time_delta is non zero:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  array[0] holds the actual length</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  size = 4 + length (bytes)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @RINGBUF_TYPE_TIME_EXTEND:<span class=\"ts\"/>Extend the time delta</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> array[0] = time delta (28 .. 59)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> size = 8 bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @RINGBUF_TYPE_TIME_STAMP:<span class=\"ts\"/>Sync time stamp with external clock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> array[0]    = tv_nsec</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> array[1..2] = tv_sec</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> size = 16 bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * &lt;= @RINGBUF_TYPE_DATA_TYPE_LEN_MAX:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Data record</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> If type_len is zero:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  array[0] holds the actual length</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  array[1..(length+3)/4] holds data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  size = 4 + length (bytes)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> else</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  length = type_len &lt;&lt; 2</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  array[0..(length+3)/4-1] holds data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  size = 4 + length (bytes)</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#ring_buffer_type\">ring_buffer_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RINGBUF_TYPE_DATA_TYPE_LEN_MAX\">RINGBUF_TYPE_DATA_TYPE_LEN_MAX</a> = 28,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RINGBUF_TYPE_TIME_EXTEND\">RINGBUF_TYPE_TIME_EXTEND</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME: RINGBUF_TYPE_TIME_STAMP not implemented */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RINGBUF_TYPE_TIME_STAMP\">RINGBUF_TYPE_TIME_STAMP</a>,", 
"};", 
"", 
"unsigned <a class=\"id\" href=\"#ring_buffer_event_length\">ring_buffer_event_length</a>(struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"void *<a class=\"id\" href=\"#ring_buffer_event_data\">ring_buffer_event_data</a>(struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_event_time_delta - return the delta timestamp of the event</span>", 
"<span class=\"comment\"> * @event: the event to get the delta timestamp of</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The delta timestamp is the 27 bit timestamp since the last event.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned", 
"<a class=\"id\" href=\"#ring_buffer_event_time_delta\">ring_buffer_event_time_delta</a>(struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ring_buffer_discard_commit will remove an event that has not</span>", 
"<span class=\"comment\"> *   ben committed yet. If this is used, then ring_buffer_unlock_commit</span>", 
"<span class=\"comment\"> *   must not be called on the discarded event. This function</span>", 
"<span class=\"comment\"> *   will try to remove the event from the ring buffer completely</span>", 
"<span class=\"comment\"> *   if another event has not been written after it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Example use:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  if (some_condition)</span>", 
"<span class=\"comment\"> *    ring_buffer_discard_commit(buffer, event);</span>", 
"<span class=\"comment\"> *  else</span>", 
"<span class=\"comment\"> *    ring_buffer_unlock_commit(buffer, event);</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ring_buffer_discard_commit\">ring_buffer_discard_commit</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * size is in bytes for each per CPU buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *", 
"<a class=\"id\" href=\"#__ring_buffer_alloc\">__ring_buffer_alloc</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because the ring buffer is generic, if other users of the ring buffer get</span>", 
"<span class=\"comment\"> * traced by ftrace, it can produce lockdep warnings. We need to keep each</span>", 
"<span class=\"comment\"> * ring buffer's lock class separate.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ring_buffer_alloc\">ring_buffer_alloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#__key\">__key</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ring_buffer_alloc\">__ring_buffer_alloc</a>((<a class=\"id\" href=\"#size\">size</a>), (<a class=\"id\" href=\"#flags\">flags</a>), &amp;<a class=\"id\" href=\"#__key\">__key</a>);<span class=\"ts\"/>\\", 
"})", 
"", 
"void <a class=\"id\" href=\"#ring_buffer_free\">ring_buffer_free</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"int <a class=\"id\" href=\"#ring_buffer_resize\">ring_buffer_resize</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#ring_buffer_lock_reserve\">ring_buffer_lock_reserve</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#length\">length</a>);", 
"int <a class=\"id\" href=\"#ring_buffer_unlock_commit\">ring_buffer_unlock_commit</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"int <a class=\"id\" href=\"#ring_buffer_write\">ring_buffer_write</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#length\">length</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#ring_buffer_peek\">ring_buffer_peek</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ts\">ts</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> unsigned long *<a class=\"id\" href=\"#lost_events\">lost_events</a>);", 
"struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#ring_buffer_consume\">ring_buffer_consume</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ts\">ts</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned long *<a class=\"id\" href=\"#lost_events\">lost_events</a>);", 
"", 
"struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *", 
"<a class=\"id\" href=\"#ring_buffer_read_prepare\">ring_buffer_read_prepare</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"void <a class=\"id\" href=\"#ring_buffer_read_prepare_sync\">ring_buffer_read_prepare_sync</a>(void);", 
"void <a class=\"id\" href=\"#ring_buffer_read_start\">ring_buffer_read_start</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>);", 
"void <a class=\"id\" href=\"#ring_buffer_read_finish\">ring_buffer_read_finish</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>);", 
"", 
"struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#ring_buffer_iter_peek\">ring_buffer_iter_peek</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ts\">ts</a>);", 
"struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#ring_buffer_read\">ring_buffer_read</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ts\">ts</a>);", 
"void <a class=\"id\" href=\"#ring_buffer_iter_reset\">ring_buffer_iter_reset</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>);", 
"int <a class=\"id\" href=\"#ring_buffer_iter_empty\">ring_buffer_iter_empty</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#ring_buffer_size\">ring_buffer_size</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"void <a class=\"id\" href=\"#ring_buffer_reset_cpu\">ring_buffer_reset_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"void <a class=\"id\" href=\"#ring_buffer_reset\">ring_buffer_reset</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RING_BUFFER_ALLOW_SWAP\">CONFIG_RING_BUFFER_ALLOW_SWAP</a>", 
"int <a class=\"id\" href=\"#ring_buffer_swap_cpu\">ring_buffer_swap_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer_a\">buffer_a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer_b\">buffer_b</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#ring_buffer_swap_cpu\">ring_buffer_swap_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer_a\">buffer_a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer_b\">buffer_b</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#ring_buffer_empty\">ring_buffer_empty</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"int <a class=\"id\" href=\"#ring_buffer_empty_cpu\">ring_buffer_empty_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"void <a class=\"id\" href=\"#ring_buffer_record_disable\">ring_buffer_record_disable</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"void <a class=\"id\" href=\"#ring_buffer_record_enable\">ring_buffer_record_enable</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"void <a class=\"id\" href=\"#ring_buffer_record_disable_cpu\">ring_buffer_record_disable_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"void <a class=\"id\" href=\"#ring_buffer_record_enable_cpu\">ring_buffer_record_enable_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#ring_buffer_entries\">ring_buffer_entries</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"unsigned long <a class=\"id\" href=\"#ring_buffer_overruns\">ring_buffer_overruns</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"unsigned long <a class=\"id\" href=\"#ring_buffer_entries_cpu\">ring_buffer_entries_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"unsigned long <a class=\"id\" href=\"#ring_buffer_overrun_cpu\">ring_buffer_overrun_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"unsigned long <a class=\"id\" href=\"#ring_buffer_commit_overrun_cpu\">ring_buffer_commit_overrun_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ring_buffer_time_stamp\">ring_buffer_time_stamp</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"void <a class=\"id\" href=\"#ring_buffer_normalize_time_stamp\">ring_buffer_normalize_time_stamp</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ts\">ts</a>);", 
"void <a class=\"id\" href=\"#ring_buffer_set_clock\">ring_buffer_set_clock</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u64\">u64</a> (*<a class=\"id\" href=\"#clock\">clock</a>)(void));", 
"", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ring_buffer_page_len\">ring_buffer_page_len</a>(void *<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"", 
"void *<a class=\"id\" href=\"#ring_buffer_alloc_read_page\">ring_buffer_alloc_read_page</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"void <a class=\"id\" href=\"#ring_buffer_free_read_page\">ring_buffer_free_read_page</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"int <a class=\"id\" href=\"#ring_buffer_read_page\">ring_buffer_read_page</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, void **<a class=\"id\" href=\"#data_page\">data_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#full\">full</a>);", 
"", 
"struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a>;", 
"", 
"int <a class=\"id\" href=\"#ring_buffer_print_entry_header\">ring_buffer_print_entry_header</a>(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>);", 
"int <a class=\"id\" href=\"#ring_buffer_print_page_header\">ring_buffer_print_page_header</a>(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>);", 
"", 
"enum <a class=\"id\" href=\"#ring_buffer_flags\">ring_buffer_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RB_FL_OVERWRITE\">RB_FL_OVERWRITE</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 0,", 
"};", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_RING_BUFFER_H */</span>", 
];
xr_frag_insert('l/93/2476ddf4c0d9a17d30f946fd86a49c684ff6be.xr', __xr_tmp);
