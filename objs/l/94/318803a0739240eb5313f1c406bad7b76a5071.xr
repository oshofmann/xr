var __xr_tmp = [
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_config_interrupt - configure the PHY device for the requested interrupts</span>", 
"<span class=\"comment\"> * @phydev: the phy_device struct</span>", 
"<span class=\"comment\"> * @interrupts: interrupt flags to configure for this @phydev</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success on &lt; 0 on error.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#phy_config_interrupt\">phy_config_interrupt</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#interrupts\">interrupts</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#interrupts\">interrupts</a> = <a class=\"id\" href=\"#interrupts\">interrupts</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#config_intr\">config_intr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#config_intr\">config_intr</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_aneg_done - return auto-negotiation status</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Reads the status register and returns 0 either if</span>", 
"<span class=\"comment\"> *   auto-negotiation is incomplete, or if there was an error.</span>", 
"<span class=\"comment\"> *   Returns BMSR_ANEGCOMPLETE if auto-negotiation is done.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#phy_aneg_done\">phy_aneg_done</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_BMSR\">MII_BMSR</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0) ? <a class=\"id\" href=\"#retval\">retval</a> : (<a class=\"id\" href=\"#retval\">retval</a> &amp; <a class=\"id\" href=\"#BMSR_ANEGCOMPLETE\">BMSR_ANEGCOMPLETE</a>);", 
"}", 
"", 
"<span class=\"comment\">/* A structure for mapping a particular speed and duplex</span>", 
"<span class=\"comment\"> * combination to a particular SUPPORTED and ADVERTISED value */</span>", 
"struct <a class=\"id\" href=\"#phy_setting\">phy_setting</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#speed\">speed</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#duplex\">duplex</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#setting\">setting</a>;", 
"};", 
"", 
"<span class=\"comment\">/* A mapping of all SUPPORTED settings to speed/duplex */</span>", 
"static const struct <a class=\"id\" href=\"#phy_setting\">phy_setting</a> <a class=\"id\" href=\"#settings\">settings</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#speed\">speed</a> = 10000,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#DUPLEX_FULL\">DUPLEX_FULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#setting\">setting</a> = <a class=\"id\" href=\"#SUPPORTED_10000baseT_Full\">SUPPORTED_10000baseT_Full</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#SPEED_1000\">SPEED_1000</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#DUPLEX_FULL\">DUPLEX_FULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#setting\">setting</a> = <a class=\"id\" href=\"#SUPPORTED_1000baseT_Full\">SUPPORTED_1000baseT_Full</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#SPEED_1000\">SPEED_1000</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#DUPLEX_HALF\">DUPLEX_HALF</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#setting\">setting</a> = <a class=\"id\" href=\"#SUPPORTED_1000baseT_Half\">SUPPORTED_1000baseT_Half</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#SPEED_100\">SPEED_100</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#DUPLEX_FULL\">DUPLEX_FULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#setting\">setting</a> = <a class=\"id\" href=\"#SUPPORTED_100baseT_Full\">SUPPORTED_100baseT_Full</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#SPEED_100\">SPEED_100</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#DUPLEX_HALF\">DUPLEX_HALF</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#setting\">setting</a> = <a class=\"id\" href=\"#SUPPORTED_100baseT_Half\">SUPPORTED_100baseT_Half</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#SPEED_10\">SPEED_10</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#DUPLEX_FULL\">DUPLEX_FULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#setting\">setting</a> = <a class=\"id\" href=\"#SUPPORTED_10baseT_Full\">SUPPORTED_10baseT_Full</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#SPEED_10\">SPEED_10</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#DUPLEX_HALF\">DUPLEX_HALF</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#setting\">setting</a> = <a class=\"id\" href=\"#SUPPORTED_10baseT_Half\">SUPPORTED_10baseT_Half</a>,", 
"<span class=\"ts\"/>},", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_NUM_SETTINGS\">MAX_NUM_SETTINGS</a> <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#settings\">settings</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_find_setting - find a PHY settings array entry that matches speed &amp; duplex</span>", 
"<span class=\"comment\"> * @speed: speed to match</span>", 
"<span class=\"comment\"> * @duplex: duplex to match</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Searches the settings array for the setting which</span>", 
"<span class=\"comment\"> *   matches the desired speed and duplex, and returns the index</span>", 
"<span class=\"comment\"> *   of that setting.  Returns the index of the last setting if</span>", 
"<span class=\"comment\"> *   none of the others match.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#phy_find_setting\">phy_find_setting</a>(int <a class=\"id\" href=\"#speed\">speed</a>, int <a class=\"id\" href=\"#duplex\">duplex</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a> = 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#settings\">settings</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#settings\">settings</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#speed\">speed</a> != <a class=\"id\" href=\"#speed\">speed</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#settings\">settings</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#duplex\">duplex</a> != <a class=\"id\" href=\"#duplex\">duplex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a>++;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#MAX_NUM_SETTINGS\">MAX_NUM_SETTINGS</a> ? <a class=\"id\" href=\"#idx\">idx</a> : <a class=\"id\" href=\"#MAX_NUM_SETTINGS\">MAX_NUM_SETTINGS</a> - 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_find_valid - find a PHY setting that matches the requested features mask</span>", 
"<span class=\"comment\"> * @idx: The first index in settings[] to search</span>", 
"<span class=\"comment\"> * @features: A mask of the valid settings</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Returns the index of the first valid setting less</span>", 
"<span class=\"comment\"> *   than or equal to the one pointed to by idx, as determined by</span>", 
"<span class=\"comment\"> *   the mask in features.  Returns the index of the last setting</span>", 
"<span class=\"comment\"> *   if nothing else matches.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#phy_find_valid\">phy_find_valid</a>(int <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#features\">features</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#MAX_NUM_SETTINGS\">MAX_NUM_SETTINGS</a> && !(<a class=\"id\" href=\"#settings\">settings</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#setting\">setting</a> &amp; <a class=\"id\" href=\"#features\">features</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a>++;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#MAX_NUM_SETTINGS\">MAX_NUM_SETTINGS</a> ? <a class=\"id\" href=\"#idx\">idx</a> : <a class=\"id\" href=\"#MAX_NUM_SETTINGS\">MAX_NUM_SETTINGS</a> - 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_sanitize_settings - make sure the PHY is set to supported speed and duplex</span>", 
"<span class=\"comment\"> * @phydev: the target phy_device struct</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Make sure the PHY is set to supported speeds and</span>", 
"<span class=\"comment\"> *   duplexes.  Drop down by one in this order:  1000/FULL,</span>", 
"<span class=\"comment\"> *   1000/HALF, 100/FULL, 100/HALF, 10/FULL, 10/HALF.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#phy_sanitize_settings\">phy_sanitize_settings</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#features\">features</a> = <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#supported\">supported</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Sanitize settings based on PHY capabilities */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#SUPPORTED_Autoneg\">SUPPORTED_Autoneg</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a> = <a class=\"id\" href=\"#AUTONEG_DISABLE\">AUTONEG_DISABLE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#phy_find_valid\">phy_find_valid</a>(<a class=\"id\" href=\"#phy_find_setting\">phy_find_setting</a>(<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a>, <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#features\">features</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#settings\">settings</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#speed\">speed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#settings\">settings</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#duplex\">duplex</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_sanitize_settings\">phy_sanitize_settings</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_ethtool_sset - generic ethtool sset function, handles all the details</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> * @cmd: ethtool_cmd</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A few notes about parameter checking:</span>", 
"<span class=\"comment\"> * - We don't set port or transceiver, so we don't care what they</span>", 
"<span class=\"comment\"> *   were set to.</span>", 
"<span class=\"comment\"> * - phy_start_aneg() will make sure forced settings are sane, and</span>", 
"<span class=\"comment\"> *   choose the next best ones from the ones selected, so we don't</span>", 
"<span class=\"comment\"> *   care if ethtool tries to give us bad values.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#phy_ethtool_sset\">phy_ethtool_sset</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>, struct <a class=\"id\" href=\"#ethtool_cmd\">ethtool_cmd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#phy_address\">phy_address</a> != <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We make sure that we don't pass unsupported</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * values in to the PHY */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#advertising\">advertising</a> &= <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#supported\">supported</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Verify the settings we care about. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a> != <a class=\"id\" href=\"#AUTONEG_ENABLE\">AUTONEG_ENABLE</a> && <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a> != <a class=\"id\" href=\"#AUTONEG_DISABLE\">AUTONEG_DISABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a> == <a class=\"id\" href=\"#AUTONEG_ENABLE\">AUTONEG_ENABLE</a> && <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#advertising\">advertising</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a> == <a class=\"id\" href=\"#AUTONEG_DISABLE\">AUTONEG_DISABLE</a> &&", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#speed\">speed</a> != <a class=\"id\" href=\"#SPEED_1000\">SPEED_1000</a> &&", 
"<span class=\"ts\"/>      <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#speed\">speed</a> != <a class=\"id\" href=\"#SPEED_100\">SPEED_100</a> &&", 
"<span class=\"ts\"/>      <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#speed\">speed</a> != <a class=\"id\" href=\"#SPEED_10\">SPEED_10</a>) ||", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#duplex\">duplex</a> != <a class=\"id\" href=\"#DUPLEX_HALF\">DUPLEX_HALF</a> &&", 
"<span class=\"ts\"/>      <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#duplex\">duplex</a> != <a class=\"id\" href=\"#DUPLEX_FULL\">DUPLEX_FULL</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#speed\">speed</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#advertising\">advertising</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#advertising\">advertising</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#AUTONEG_ENABLE\">AUTONEG_ENABLE</a> == <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#advertising\">advertising</a> |= <a class=\"id\" href=\"#ADVERTISED_Autoneg\">ADVERTISED_Autoneg</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#advertising\">advertising</a> &= ~<a class=\"id\" href=\"#ADVERTISED_Autoneg\">ADVERTISED_Autoneg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#duplex\">duplex</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Restart the PHY */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phy_start_aneg\">phy_start_aneg</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_ethtool_sset\">phy_ethtool_sset</a>);", 
"", 
"int <a class=\"id\" href=\"#phy_ethtool_gset\">phy_ethtool_gset</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>, struct <a class=\"id\" href=\"#ethtool_cmd\">ethtool_cmd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#supported\">supported</a> = <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#supported\">supported</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#advertising\">advertising</a> = <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#advertising\">advertising</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#port\">port</a> = <a class=\"id\" href=\"#PORT_MII\">PORT_MII</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#phy_address\">phy_address</a> = <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#transceiver\">transceiver</a> = <a class=\"id\" href=\"#XCVR_EXTERNAL\">XCVR_EXTERNAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a> = <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_ethtool_gset\">phy_ethtool_gset</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_mii_ioctl - generic PHY MII ioctl interface</span>", 
"<span class=\"comment\"> * @phydev: the phy_device struct</span>", 
"<span class=\"comment\"> * @ifr: &amp;struct ifreq for socket ioctl's</span>", 
"<span class=\"comment\"> * @cmd: ioctl cmd to execute</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this function is currently incompatible with the</span>", 
"<span class=\"comment\"> * PHYCONTROL layer.  It changes registers without regard to</span>", 
"<span class=\"comment\"> * current state.  Use at own risk.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#phy_mii_ioctl\">phy_mii_ioctl</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ifreq\">ifreq</a> *<a class=\"id\" href=\"#ifr\">ifr</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mii_ioctl_data\">mii_ioctl_data</a> *<a class=\"id\" href=\"#mii_data\">mii_data</a> = <a class=\"id\" href=\"#if_mii\">if_mii</a>(<a class=\"id\" href=\"#ifr\">ifr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#mii_data\">mii_data</a>-><a class=\"id\" href=\"#val_in\">val_in</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCGMIIPHY\">SIOCGMIIPHY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mii_data\">mii_data</a>-><a class=\"id\" href=\"#phy_id\">phy_id</a> = <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCGMIIREG\">SIOCGMIIREG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mii_data\">mii_data</a>-><a class=\"id\" href=\"#val_out\">val_out</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#mii_data\">mii_data</a>-><a class=\"id\" href=\"#reg_num\">reg_num</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSMIIREG\">SIOCSMIIREG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mii_data\">mii_data</a>-><a class=\"id\" href=\"#phy_id\">phy_id</a> == <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch(<a class=\"id\" href=\"#mii_data\">mii_data</a>-><a class=\"id\" href=\"#reg_num\">reg_num</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MII_BMCR\">MII_BMCR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#val\">val</a> &amp; (<a class=\"id\" href=\"#BMCR_RESET\">BMCR_RESET</a>|<a class=\"id\" href=\"#BMCR_ANENABLE\">BMCR_ANENABLE</a>)) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a> = <a class=\"id\" href=\"#AUTONEG_DISABLE\">AUTONEG_DISABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a> = <a class=\"id\" href=\"#AUTONEG_ENABLE\">AUTONEG_ENABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((!<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a>) && (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#BMCR_FULLDPLX\">BMCR_FULLDPLX</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#DUPLEX_FULL\">DUPLEX_FULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#DUPLEX_HALF\">DUPLEX_HALF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((!<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#BMCR_SPEED1000\">BMCR_SPEED1000</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#SPEED_1000\">SPEED_1000</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if ((!<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#BMCR_SPEED100\">BMCR_SPEED100</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#SPEED_100\">SPEED_100</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MII_ADVERTISE\">MII_ADVERTISE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#advertising\">advertising</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* do nothing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phy_write\">phy_write</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#mii_data\">mii_data</a>-><a class=\"id\" href=\"#reg_num\">reg_num</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mii_data\">mii_data</a>-><a class=\"id\" href=\"#reg_num\">reg_num</a> == <a class=\"id\" href=\"#MII_BMCR\">MII_BMCR</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#BMCR_RESET\">BMCR_RESET</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#config_init\">config_init</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phy_scan_fixups\">phy_scan_fixups</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#config_init\">config_init</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSHWTSTAMP\">SIOCSHWTSTAMP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#hwtstamp\">hwtstamp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#hwtstamp\">hwtstamp</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#ifr\">ifr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_mii_ioctl\">phy_mii_ioctl</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_start_aneg - start auto-negotiation for this PHY device</span>", 
"<span class=\"comment\"> * @phydev: the phy_device struct</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Sanitizes the settings (if we're not autonegotiating</span>", 
"<span class=\"comment\"> *   them), and then calls the driver's config_aneg function.</span>", 
"<span class=\"comment\"> *   If the PHYCONTROL Layer is operating, we change the state to</span>", 
"<span class=\"comment\"> *   reflect the beginning of Auto-negotiation or forcing.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#phy_start_aneg\">phy_start_aneg</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#AUTONEG_DISABLE\">AUTONEG_DISABLE</a> == <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phy_sanitize_settings\">phy_sanitize_settings</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#config_aneg\">config_aneg</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#PHY_HALTED\">PHY_HALTED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#AUTONEG_ENABLE\">AUTONEG_ENABLE</a> == <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PHY_AN\">PHY_AN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#link_timeout\">link_timeout</a> = <a class=\"id\" href=\"#PHY_AN_TIMEOUT\">PHY_AN_TIMEOUT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PHY_FORCING\">PHY_FORCING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#link_timeout\">link_timeout</a> = <a class=\"id\" href=\"#PHY_FORCE_TIMEOUT\">PHY_FORCE_TIMEOUT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_start_aneg\">phy_start_aneg</a>);", 
"", 
"", 
"static void <a class=\"id\" href=\"#phy_change\">phy_change</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_start_machine - start PHY state machine tracking</span>", 
"<span class=\"comment\"> * @phydev: the phy_device struct</span>", 
"<span class=\"comment\"> * @handler: callback function for state change notifications</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: The PHY infrastructure can run a state machine</span>", 
"<span class=\"comment\"> *   which tracks whether the PHY is starting up, negotiating,</span>", 
"<span class=\"comment\"> *   etc.  This function starts the timer which tracks the state</span>", 
"<span class=\"comment\"> *   of the PHY.  If you want to be notified when the state changes,</span>", 
"<span class=\"comment\"> *   pass in the callback @handler, otherwise, pass NULL.  If you</span>", 
"<span class=\"comment\"> *   want to maintain your own state machine, do not call this</span>", 
"<span class=\"comment\"> *   function.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#phy_start_machine\">phy_start_machine</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#handler\">handler</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#adjust_state\">adjust_state</a> = <a class=\"id\" href=\"#handler\">handler</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_delayed_work\">schedule_delayed_work</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#state_queue\">state_queue</a>, <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_stop_machine - stop the PHY state machine tracking</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Stops the state machine timer, sets the state to UP</span>", 
"<span class=\"comment\"> *   (unless it wasn't up yet). This function must be called BEFORE</span>", 
"<span class=\"comment\"> *   phy_detach.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#phy_stop_machine\">phy_stop_machine</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cancel_delayed_work_sync\">cancel_delayed_work_sync</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#state_queue\">state_queue</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#state\">state</a> &gt; <a class=\"id\" href=\"#PHY_UP\">PHY_UP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PHY_UP\">PHY_UP</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#adjust_state\">adjust_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_force_reduction - reduce PHY speed/duplex settings by one step</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Reduces the speed/duplex settings by one notch,</span>", 
"<span class=\"comment\"> *   in this order--</span>", 
"<span class=\"comment\"> *   1000/FULL, 1000/HALF, 100/FULL, 100/HALF, 10/FULL, 10/HALF.</span>", 
"<span class=\"comment\"> *   The function bottoms out at 10/HALF.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#phy_force_reduction\">phy_force_reduction</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#phy_find_setting\">phy_find_setting</a>(<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a>, <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a>);", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#phy_find_valid\">phy_find_valid</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#supported\">supported</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#settings\">settings</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#speed\">speed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#settings\">settings</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#duplex\">duplex</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Trying %d/%s\\n\", <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DUPLEX_FULL\">DUPLEX_FULL</a> == <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"FULL\" : \"HALF\");", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_error - enter HALTED state for this PHY device</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Moves the PHY to the HALTED state in response to a read</span>", 
"<span class=\"comment\"> * or write error, and tells the controller the link is down.</span>", 
"<span class=\"comment\"> * Must not be called from interrupt context, or while the</span>", 
"<span class=\"comment\"> * phydev-&gt;lock is held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#phy_error\">phy_error</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PHY_HALTED\">PHY_HALTED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_interrupt - PHY interrupt handler</span>", 
"<span class=\"comment\"> * @irq: interrupt line</span>", 
"<span class=\"comment\"> * @phy_dat: phy_device pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: When a PHY interrupt occurs, the handler disables</span>", 
"<span class=\"comment\"> * interrupts, and schedules a work task to clear the interrupt.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#irqreturn_t\">irqreturn_t</a> <a class=\"id\" href=\"#phy_interrupt\">phy_interrupt</a>(int <a class=\"id\" href=\"#irq\">irq</a>, void *<a class=\"id\" href=\"#phy_dat\">phy_dat</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a> = <a class=\"id\" href=\"#phy_dat\">phy_dat</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PHY_HALTED\">PHY_HALTED</a> == <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#state\">state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#IRQ_NONE\">IRQ_NONE</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* It can't be ours.  */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The MDIO bus is not allowed to be written in interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * context, so we need to disable the irq here.  A work</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * queue will write the PHY to disable and clear the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupt, and then reenable the irq line. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disable_irq_nosync\">disable_irq_nosync</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#irq_disable\">irq_disable</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#phy_queue\">phy_queue</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#IRQ_HANDLED\">IRQ_HANDLED</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_enable_interrupts - Enable the interrupts from the PHY side</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#phy_enable_interrupts\">phy_enable_interrupts</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#phy_clear_interrupt\">phy_clear_interrupt</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#phy_config_interrupt\">phy_config_interrupt</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#PHY_INTERRUPT_ENABLED\">PHY_INTERRUPT_ENABLED</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_enable_interrupts\">phy_enable_interrupts</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_disable_interrupts - Disable the PHY interrupts from the PHY side</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#phy_disable_interrupts\">phy_disable_interrupts</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Disable PHY interrupts */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#phy_config_interrupt\">phy_config_interrupt</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#PHY_INTERRUPT_DISABLED\">PHY_INTERRUPT_DISABLED</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#phy_err\">phy_err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the interrupt */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#phy_clear_interrupt\">phy_clear_interrupt</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#phy_err\">phy_err</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#phy_err\">phy_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phy_error\">phy_error</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_disable_interrupts\">phy_disable_interrupts</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_start_interrupts - request and enable interrupts for a PHY device</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Request the interrupt for the given PHY.</span>", 
"<span class=\"comment\"> *   If this fails, then we set irq to PHY_POLL.</span>", 
"<span class=\"comment\"> *   Otherwise, we enable the interrupts in the PHY.</span>", 
"<span class=\"comment\"> *   This should only be called with a valid IRQ number.</span>", 
"<span class=\"comment\"> *   Returns 0 on success or &lt; 0 on error.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#phy_start_interrupts\">phy_start_interrupts</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#phy_queue\">phy_queue</a>, <a class=\"id\" href=\"#phy_change\">phy_change</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#irq_disable\">irq_disable</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#request_irq\">request_irq</a>(<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#phy_interrupt\">phy_interrupt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IRQF_SHARED\">IRQF_SHARED</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"phy_interrupt\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: Can't get IRQ %d (PHY)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#PHY_POLL\">PHY_POLL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#phy_enable_interrupts\">phy_enable_interrupts</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_start_interrupts\">phy_start_interrupts</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_stop_interrupts - disable interrupts from a PHY device</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#phy_stop_interrupts\">phy_stop_interrupts</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#phy_disable_interrupts\">phy_disable_interrupts</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phy_error\">phy_error</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_irq\">free_irq</a>(<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Cannot call flush_scheduled_work() here as desired because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of rtnl_lock(), but we do not really care about what would</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be done, except from enable_irq(), so cancel any work</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * possibly pending and take care of the matter below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cancel_work_sync\">cancel_work_sync</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#phy_queue\">phy_queue</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If work indeed has been cancelled, disable_irq() will have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * been left unbalanced from phy_interrupt() and enable_irq()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * has to be called so that other devices on the line work.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#atomic_dec_return\">atomic_dec_return</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#irq_disable\">irq_disable</a>) >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_irq\">enable_irq</a>(<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_stop_interrupts\">phy_stop_interrupts</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_change - Scheduled by the phy_interrupt/timer to handle PHY changes</span>", 
"<span class=\"comment\"> * @work: work_struct that describes the work to be done</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#phy_change\">phy_change</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
];
xr_frag_insert('l/94/318803a0739240eb5313f1c406bad7b76a5071.xr', __xr_tmp);
