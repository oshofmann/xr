var __xr_tmp = [
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from journal_try_to_free_buffers().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called under jbd_lock_bh_state(bh)</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#__journal_try_to_free_buffer\">__journal_try_to_free_buffer</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_locked\">buffer_locked</a>(<a class=\"id\" href=\"#bh\">bh</a>) || <a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_cp_transaction\">b_cp_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> == <a class=\"id\" href=\"#BJ_SyncData\">BJ_SyncData</a> || <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> == <a class=\"id\" href=\"#BJ_Locked\">BJ_Locked</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* A written-back ordered data buffer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"release data\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_unfile_buffer\">__journal_unfile_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_remove_journal_head\">journal_remove_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_cp_transaction\">b_cp_transaction</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* written-back checkpointed metadata buffer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> == <a class=\"id\" href=\"#BJ_None\">BJ_None</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"remove from checkpoint list\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_remove_checkpoint\">__journal_remove_checkpoint</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_remove_journal_head\">journal_remove_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int journal_try_to_free_buffers() - try to free page buffers.</span>", 
"<span class=\"comment\"> * @journal: journal for operation</span>", 
"<span class=\"comment\"> * @page: to try and free</span>", 
"<span class=\"comment\"> * @gfp_mask: we use the mask to detect how hard should we try to release</span>", 
"<span class=\"comment\"> * buffers. If __GFP_WAIT and __GFP_FS is set, we wait for commit code to</span>", 
"<span class=\"comment\"> * release the buffers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For all the buffers on this page,</span>", 
"<span class=\"comment\"> * if they are fully written out ordered data, move them onto BUF_CLEAN</span>", 
"<span class=\"comment\"> * so try_to_free_buffers() can reap them.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns non-zero if we wish try_to_free_buffers()</span>", 
"<span class=\"comment\"> * to be called. We do this if the page is releasable by try_to_free_buffers().</span>", 
"<span class=\"comment\"> * We also do it if the page has locked or dirty buffers and the caller wants</span>", 
"<span class=\"comment\"> * us to perform sync or async writeout.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This complicates JBD locking somewhat.  We aren't protected by the</span>", 
"<span class=\"comment\"> * BKL here.  We wish to remove the buffer from its committing or</span>", 
"<span class=\"comment\"> * running transaction's -&gt;t_datalist via __journal_unfile_buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This may *change* the value of transaction_t-&gt;t_datalist, so anyone</span>", 
"<span class=\"comment\"> * who looks at t_datalist needs to lock against this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Even worse, someone may be doing a journal_dirty_data on this</span>", 
"<span class=\"comment\"> * buffer.  So we need to lock against that.  journal_dirty_data()</span>", 
"<span class=\"comment\"> * will come out of the lock with the buffer dirty, which makes it</span>", 
"<span class=\"comment\"> * ineligible for release here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Who else is affected by this?  hmm...  Really the only contender</span>", 
"<span class=\"comment\"> * is do_get_write_access() - it could be looking at the buffer while</span>", 
"<span class=\"comment\"> * journal_try_to_free_buffer() is changing its state.  But that</span>", 
"<span class=\"comment\"> * cannot happen because we never reallocate freed data as metadata</span>", 
"<span class=\"comment\"> * while the data is part of a transaction.  Yes?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 on failure, 1 on success</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#journal_try_to_free_buffers\">journal_try_to_free_buffers</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We take our own ref against the journal_head here to avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * having to add tons of locking around each instance of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * journal_remove_journal_head() and journal_put_journal_head().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#journal_grab_journal_head\">journal_grab_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#jh\">jh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_try_to_free_buffer\">__journal_try_to_free_buffer</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_put_journal_head\">journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_jbd\">buffer_jbd</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#busy\">busy</a>;", 
"<span class=\"ts\"/>} while ((<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>) != <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#try_to_free_buffers\">try_to_free_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<a class=\"id\" href=\"#busy\">busy</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This buffer is no longer needed.  If it is on an older transaction's</span>", 
"<span class=\"comment\"> * checkpoint list we need to record it on this transaction's forget list</span>", 
"<span class=\"comment\"> * to pin this buffer (and hence its checkpointing transaction) down until</span>", 
"<span class=\"comment\"> * this transaction commits.  If the buffer isn't on a checkpoint list, we</span>", 
"<span class=\"comment\"> * release it.</span>", 
"<span class=\"comment\"> * Returns non-zero if JBD no longer has an interest in the buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called under j_list_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called under jbd_lock_bh_state(bh).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__dispose_buffer\">__dispose_buffer</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may_free\">may_free</a> = 1;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__journal_unfile_buffer\">__journal_unfile_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_cp_transaction\">b_cp_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"on running+cp transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We don't want to write the buffer anymore, clear the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bit so that we don't confuse checks in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * __journal_file_buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_file_buffer\">__journal_file_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a>, <a class=\"id\" href=\"#BJ_Forget\">BJ_Forget</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may_free\">may_free</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"on running transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_remove_journal_head\">journal_remove_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#may_free\">may_free</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * journal_invalidatepage</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This code is tricky.  It has a number of cases to deal with.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are two invariants which this code relies on:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * i_size must be updated on disk before we start calling invalidatepage on the</span>", 
"<span class=\"comment\"> * data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This is done in ext3 by defining an ext3_setattr method which</span>", 
"<span class=\"comment\"> *  updates i_size before truncate gets going.  By maintaining this</span>", 
"<span class=\"comment\"> *  invariant, we can be sure that it is safe to throw away any buffers</span>", 
"<span class=\"comment\"> *  attached to the current transaction: once the transaction commits,</span>", 
"<span class=\"comment\"> *  we know that the data will not be needed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Note however that we can *not* throw away data belonging to the</span>", 
"<span class=\"comment\"> *  previous, committing transaction!</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Any disk blocks which *are* part of the previous, committing</span>", 
"<span class=\"comment\"> * transaction (and which therefore cannot be discarded immediately) are</span>", 
"<span class=\"comment\"> * not going to be reused in the new running transaction</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  The bitmap committed_data images guarantee this: any block which is</span>", 
"<span class=\"comment\"> *  allocated in one transaction and removed in the next will be marked</span>", 
"<span class=\"comment\"> *  as in-use in the committed_data bitmap, so cannot be reused until</span>", 
"<span class=\"comment\"> *  the next transaction to delete the block commits.  This means that</span>", 
"<span class=\"comment\"> *  leaving committing buffers dirty is quite safe: the disk blocks</span>", 
"<span class=\"comment\"> *  cannot be reallocated to a different file and so buffer aliasing is</span>", 
"<span class=\"comment\"> *  not possible.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The above applies mainly to ordered data mode.  In writeback mode we</span>", 
"<span class=\"comment\"> * don't make guarantees about the order in which data hits disk --- in</span>", 
"<span class=\"comment\"> * particular we don't guarantee that new dirty data is flushed before</span>", 
"<span class=\"comment\"> * transaction commit --- so it is always safe just to discard data</span>", 
"<span class=\"comment\"> * immediately in that mode.  --sct</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The journal_unmap_buffer helper function returns zero if the buffer</span>", 
"<span class=\"comment\"> * concerned remains pinned as an anonymous buffer belonging to an older</span>", 
"<span class=\"comment\"> * transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We're outside-transaction here.  Either or both of j_running_transaction</span>", 
"<span class=\"comment\"> * and j_committing_transaction may be NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#journal_unmap_buffer\">journal_unmap_buffer</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may_free\">may_free</a> = 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"entry\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is safe to proceed here without the j_list_lock because the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buffers cannot be stolen by try_to_free_buffers as long as we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * holding the page lock. --sct</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_jbd\">buffer_jbd</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#zap_buffer_unlocked\">zap_buffer_unlocked</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#journal_grab_journal_head\">journal_grab_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#jh\">jh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#zap_buffer_no_jh\">zap_buffer_no_jh</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We cannot remove the buffer from checkpoint lists until the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transaction adding inode to orphan list (let's call it T)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is committed.  Otherwise if the transaction changing the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buffer would be cleaned from the journal before T is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * committed, a crash will cause that the correct contents of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the buffer will be lost.  On the other hand we have to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * clear the buffer dirty bit at latest at the moment when the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transaction marking the buffer as freed in the filesystem</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * structures is committed because from that moment on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buffer can be reallocated and used by a different page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since the block hasn't been freed yet but the inode has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already been added to orphan list, it is safe for us to add</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the buffer to BJ_Forget list of the newest transaction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#transaction\">transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* First case: not on any transaction.  If it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * has no checkpoint link, then we can zap it:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it's a writeback-mode buffer so we don't care</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if it hits disk safely. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_cp_transaction\">b_cp_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"not on any transaction: zap\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#zap_buffer\">zap_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* bdflush has written it.  We can drop it now */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#zap_buffer\">zap_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* OK, it must be in the journal but still not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * written fully to disk: it's metadata or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * journaled data... */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ... and once the current transaction has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * committed, the buffer won't be needed any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * longer. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"checkpointed: add to BJ_Forget\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__dispose_buffer\">__dispose_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_put_journal_head\">journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* There is no currently-running transaction. So the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * orphan record which we wrote for this file must have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * passed into commit.  We must attach this buffer to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the committing transaction, if it exists. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"give to committing trans\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__dispose_buffer\">__dispose_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_put_journal_head\">journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The orphan record's transaction has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * committed.  We can cleanse this buffer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_jbddirty\">clear_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#zap_buffer\">zap_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#transaction\">transaction</a> == <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"on committing transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> == <a class=\"id\" href=\"#BJ_Locked\">BJ_Locked</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The buffer is on the committing transaction's locked</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * list.  We have the buffer locked, so I/O has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * completed.  So we can nail the buffer now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may_free\">may_free</a> = <a class=\"id\" href=\"#__dispose_buffer\">__dispose_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#zap_buffer\">zap_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The buffer is committing, we simply cannot touch</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it. So we just set j_next_transaction to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * running transaction (if there is one) and mark</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * buffer as freed so that commit code knows it should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * clear dirty bits when it is done with the buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_freed\">set_buffer_freed</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a> && <a class=\"id\" href=\"#buffer_jbddirty\">buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal_put_journal_head\">journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Good, the buffer belongs to the running transaction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are writing our own transaction's data, not any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * previous one's, so it is safe to throw it away</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (remember that we expect the filesystem to have set</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * i_size already for this truncate so recovery will not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * expose the disk blocks we are discarding here.) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a> == <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"on running transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may_free\">may_free</a> = <a class=\"id\" href=\"#__dispose_buffer\">__dispose_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#zap_buffer\">zap_buffer</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_put_journal_head\">journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<a class=\"id\" href=\"#zap_buffer_no_jh\">zap_buffer_no_jh</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<a class=\"id\" href=\"#zap_buffer_unlocked\">zap_buffer_unlocked</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_BH\">J_ASSERT_BH</a>(<a class=\"id\" href=\"#bh\">bh</a>, !<a class=\"id\" href=\"#buffer_jbddirty\">buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_mapped\">clear_buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_req\">clear_buffer_req</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_new\">clear_buffer_new</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#may_free\">may_free</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * void journal_invalidatepage() - invalidate a journal page</span>", 
"<span class=\"comment\"> * @journal: journal to use for flush</span>", 
"<span class=\"comment\"> * @page:    page to flush</span>", 
"<span class=\"comment\"> * @offset:  length of page to invalidate.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reap page buffers containing data after offset in page.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#journal_invalidatepage\">journal_invalidatepage</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#bh\">bh</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#curr_off\">curr_off</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may_free\">may_free</a> = 1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We will potentially be playing with lists other than just the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * data lists (especially for journaled data mode), so be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cautious in our locking. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#next_off\">next_off</a> = <a class=\"id\" href=\"#curr_off\">curr_off</a> + <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> <= <a class=\"id\" href=\"#curr_off\">curr_off</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This block is wholly outside the truncation point */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may_free\">may_free</a> &= <a class=\"id\" href=\"#journal_unmap_buffer\">journal_unmap_buffer</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr_off\">curr_off</a> = <a class=\"id\" href=\"#next_off\">next_off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#may_free\">may_free</a> && <a class=\"id\" href=\"#try_to_free_buffers\">try_to_free_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * File a buffer on the given transaction list.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__journal_file_buffer\">__journal_file_buffer</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>, int <a class=\"id\" href=\"#jlist\">jlist</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> **<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#was_dirty\">was_dirty</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jbd_is_locked_bh_state\">jbd_is_locked_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> &lt; <a class=\"id\" href=\"#BJ_Types\">BJ_Types</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> && <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> == <a class=\"id\" href=\"#jlist\">jlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jlist\">jlist</a> == <a class=\"id\" href=\"#BJ_Metadata\">BJ_Metadata</a> || <a class=\"id\" href=\"#jlist\">jlist</a> == <a class=\"id\" href=\"#BJ_Reserved\">BJ_Reserved</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#jlist\">jlist</a> == <a class=\"id\" href=\"#BJ_Shadow\">BJ_Shadow</a> || <a class=\"id\" href=\"#jlist\">jlist</a> == <a class=\"id\" href=\"#BJ_Forget\">BJ_Forget</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For metadata buffers, we track dirty bit in buffer_jbddirty</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * instead of buffer_dirty. We should not see a dirty bit set</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * here because we clear it in do_get_write_access but e.g.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tune2fs can modify the sb and set the dirty bit at any time</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so we try to gracefully handle that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn_dirty_buffer\">warn_dirty_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_clear_buffer_dirty\">test_clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#test_clear_buffer_jbddirty\">test_clear_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#was_dirty\">was_dirty</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_temp_unlink_buffer\">__journal_temp_unlink_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> = <a class=\"id\" href=\"#transaction\">transaction</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#jlist\">jlist</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_None\">BJ_None</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, !<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, !<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_frozen_data\">b_frozen_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_SyncData\">BJ_SyncData</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_sync_datalist\">t_sync_datalist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_Metadata\">BJ_Metadata</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_nr_buffers\">t_nr_buffers</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_buffers\">t_buffers</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_Forget\">BJ_Forget</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_forget\">t_forget</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_IO\">BJ_IO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_iobuf_list\">t_iobuf_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_Shadow\">BJ_Shadow</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_shadow_list\">t_shadow_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_LogCtl\">BJ_LogCtl</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_log_list\">t_log_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_Reserved\">BJ_Reserved</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_reserved_list\">t_reserved_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_Locked\">BJ_Locked</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> =  &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_locked_list\">t_locked_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__blist_add_buffer\">__blist_add_buffer</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> = <a class=\"id\" href=\"#jlist\">jlist</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#was_dirty\">was_dirty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_jbddirty\">set_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#journal_file_buffer\">journal_file_buffer</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>, int <a class=\"id\" href=\"#jlist\">jlist</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__journal_file_buffer\">__journal_file_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a>, <a class=\"id\" href=\"#jlist\">jlist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove a buffer from its current buffer list in preparation for</span>", 
"<span class=\"comment\"> * dropping it from its current transaction entirely.  If the buffer has</span>", 
"<span class=\"comment\"> * already started to be used by a subsequent transaction, refile the</span>", 
"<span class=\"comment\"> * buffer on that transaction's metadata list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called under journal-&gt;j_list_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called under jbd_lock_bh_state(jh2bh(jh))</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__journal_refile_buffer\">__journal_refile_buffer</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#was_dirty\">was_dirty</a>, <a class=\"id\" href=\"#jlist\">jlist</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jbd_is_locked_bh_state\">jbd_is_locked_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the buffer is now unused, just drop it. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_unfile_buffer\">__journal_unfile_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It has been modified by a later transaction: add it to the new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transaction's metadata list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#was_dirty\">was_dirty</a> = <a class=\"id\" href=\"#test_clear_buffer_jbddirty\">test_clear_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__journal_temp_unlink_buffer\">__journal_temp_unlink_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> = <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_freed\">buffer_freed</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jlist\">jlist</a> = <a class=\"id\" href=\"#BJ_Forget\">BJ_Forget</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_modified\">b_modified</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jlist\">jlist</a> = <a class=\"id\" href=\"#BJ_Metadata\">BJ_Metadata</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jlist\">jlist</a> = <a class=\"id\" href=\"#BJ_Reserved\">BJ_Reserved</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__journal_file_buffer\">__journal_file_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>, <a class=\"id\" href=\"#jlist\">jlist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>-><a class=\"id\" href=\"#t_state\">t_state</a> == <a class=\"id\" href=\"#T_RUNNING\">T_RUNNING</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#was_dirty\">was_dirty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_jbddirty\">set_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For the unlocked version of this call, also make sure that any</span>", 
"<span class=\"comment\"> * hanging journal_head is cleaned up if necessary.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * __journal_refile_buffer is usually called as part of a single locked</span>", 
"<span class=\"comment\"> * operation on a buffer_head, in which the caller is probably going to</span>", 
"<span class=\"comment\"> * be hooking the journal_head onto other lists.  In that case it is up</span>", 
"<span class=\"comment\"> * to the caller to remove the journal_head if necessary.  For the</span>", 
"<span class=\"comment\"> * unlocked journal_refile_buffer call, the caller isn't going to be</span>", 
"<span class=\"comment\"> * doing anything else to the buffer so we need to do the cleanup</span>", 
"<span class=\"comment\"> * ourselves to avoid a jh leak.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * *** The journal_head may be freed by this call! ***</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#journal_refile_buffer\">journal_refile_buffer</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>, struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__journal_refile_buffer\">__journal_refile_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_remove_journal_head\">journal_remove_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
];
xr_frag_insert('l/94/ff0db12ba47758681aae9652cf8690778a75d5.xr', __xr_tmp);
