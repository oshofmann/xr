var __xr_tmp = [
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#rcu_init_one\">rcu_init_one</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"<span class=\"ts\"/>static char *<a class=\"id\" href=\"#buf\">buf</a>[] = { \"rcu_node_level_0\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"rcu_node_level_1\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"rcu_node_level_2\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"rcu_node_level_3\" };  <span class=\"comment\">/* Match MAX_RCU_LVLS */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpustride\">cpustride</a> = 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#MAX_RCU_LVLS\">MAX_RCU_LVLS</a> &gt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#buf\">buf</a>));  <span class=\"comment\">/* Fix buf[] init! */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the level-tracking arrays. */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NUM_RCU_LVLS\">NUM_RCU_LVLS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#level\">level</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#level\">level</a>[<a class=\"id\" href=\"#i\">i</a> - 1] + <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#levelcnt\">levelcnt</a>[<a class=\"id\" href=\"#i\">i</a> - 1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_init_levelspread\">rcu_init_levelspread</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the elements themselves, starting from the leaves. */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#NUM_RCU_LVLS\">NUM_RCU_LVLS</a> - 1; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpustride\">cpustride</a> *= <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#levelspread\">levelspread</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#level\">level</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#levelcnt\">levelcnt</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#j\">j</a>++, <a class=\"id\" href=\"#rnp\">rnp</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_init\">raw_spin_lock_init</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class_and_name\">lockdep_set_class_and_name</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#rcu_node_class\">rcu_node_class</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmaskinit\">qsmaskinit</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grplo\">grplo</a> = <a class=\"id\" href=\"#j\">j</a> * <a class=\"id\" href=\"#cpustride\">cpustride</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grphi\">grphi</a> = (<a class=\"id\" href=\"#j\">j</a> + 1) * <a class=\"id\" href=\"#cpustride\">cpustride</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grphi\">grphi</a> >= <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grphi\">grphi</a> = <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grpnum\">grpnum</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grpmask\">grpmask</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grpnum\">grpnum</a> = <a class=\"id\" href=\"#j\">j</a> % <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#levelspread\">levelspread</a>[<a class=\"id\" href=\"#i\">i</a> - 1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grpmask\">grpmask</a> = 1UL << <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grpnum\">grpnum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#level\">level</a>[<a class=\"id\" href=\"#i\">i</a> - 1] +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#j\">j</a> / <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#levelspread\">levelspread</a>[<a class=\"id\" href=\"#i\">i</a> - 1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[2]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#blocked_tasks\">blocked_tasks</a>[3]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#level\">level</a>[<a class=\"id\" href=\"#NUM_RCU_LVLS\">NUM_RCU_LVLS</a> - 1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &gt; <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grphi\">grphi</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#rda\">rda</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#mynode\">mynode</a> = <a class=\"id\" href=\"#rnp\">rnp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_boot_init_percpu_data\">rcu_boot_init_percpu_data</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rsp\">rsp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helper macro for __rcu_init() and __rcu_init_preempt().  To be used</span>", 
"<span class=\"comment\"> * nowhere else!  Assigns leaf node pointers into each CPU's rcu_data</span>", 
"<span class=\"comment\"> * structure.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_INIT_FLAVOR\">RCU_INIT_FLAVOR</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rcu_data\">rcu_data</a>) \\", 
"do { \\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>; \\", 
"<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) { \\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#rsp\">rsp</a>)-><a class=\"id\" href=\"#rda\">rda</a>[<a class=\"id\" href=\"#i\">i</a>] = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_data\">rcu_data</a>, <a class=\"id\" href=\"#i\">i</a>); \\", 
"<span class=\"ts\"/>} \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_init_one\">rcu_init_one</a>(<a class=\"id\" href=\"#rsp\">rsp</a>); \\", 
"} while (0)", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#rcu_init\">rcu_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_bootup_announce\">rcu_bootup_announce</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RCU_INIT_FLAVOR\">RCU_INIT_FLAVOR</a>(&amp;<a class=\"id\" href=\"#rcu_sched_state\">rcu_sched_state</a>, <a class=\"id\" href=\"#rcu_sched_data\">rcu_sched_data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RCU_INIT_FLAVOR\">RCU_INIT_FLAVOR</a>(&amp;<a class=\"id\" href=\"#rcu_bh_state\">rcu_bh_state</a>, <a class=\"id\" href=\"#rcu_bh_data\">rcu_bh_data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rcu_init_preempt\">__rcu_init_preempt</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#open_softirq\">open_softirq</a>(<a class=\"id\" href=\"#RCU_SOFTIRQ\">RCU_SOFTIRQ</a>, <a class=\"id\" href=\"#rcu_process_callbacks\">rcu_process_callbacks</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't need protection against CPU-hotplug here because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this is called early in boot, before either interrupts</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or the scheduler are operational.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_notifier\">cpu_notifier</a>(<a class=\"id\" href=\"#rcu_cpu_notify\">rcu_cpu_notify</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_cpu_notify\">rcu_cpu_notify</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>, (void *)(long)<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_cpu_stall_init\">check_cpu_stall_init</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"rcutree_plugin.h\"", 
];
xr_frag_insert('l/95/1d705ed115262eec666132f8c004d54a79513b.xr', __xr_tmp);
