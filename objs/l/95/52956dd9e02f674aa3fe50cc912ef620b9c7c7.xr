var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#silent\">silent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(<a class=\"id\" href=\"#FW_BUG\">FW_BUG</a> <a class=\"id\" href=\"#ACPI_PFX\">ACPI_PFX</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Invalid address space type in GAR [0x%llx/%u/%u]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   *<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#width\">width</a>, <a class=\"id\" href=\"#space_id\">space_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Pre-map, working on GAR */</span>", 
"int <a class=\"id\" href=\"#acpi_pre_map_gar\">acpi_pre_map_gar</a>(struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#reg\">reg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a> != <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_MEMORY\">ACPI_ADR_SPACE_SYSTEM_MEMORY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#acpi_check_gar\">acpi_check_gar</a>(<a class=\"id\" href=\"#reg\">reg</a>, &amp;<a class=\"id\" href=\"#paddr\">paddr</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#acpi_pre_map\">acpi_pre_map</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a> / 8);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vaddr\">vaddr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#acpi_pre_map_gar\">acpi_pre_map_gar</a>);", 
"", 
"<span class=\"comment\">/* Post-unmap, working on GAR */</span>", 
"int <a class=\"id\" href=\"#acpi_post_unmap_gar\">acpi_post_unmap_gar</a>(struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#reg\">reg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a> != <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_MEMORY\">ACPI_ADR_SPACE_SYSTEM_MEMORY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#acpi_check_gar\">acpi_check_gar</a>(<a class=\"id\" href=\"#reg\">reg</a>, &amp;<a class=\"id\" href=\"#paddr\">paddr</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_post_unmap\">acpi_post_unmap</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a> / 8);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#acpi_post_unmap_gar\">acpi_post_unmap_gar</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Can be used in atomic (including NMI) or process context. RCU read</span>", 
"<span class=\"comment\"> * lock can only be released after the IO memory area accessing.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acpi_atomic_read_mem\">acpi_atomic_read_mem</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#width\">width</a>)", 
"{", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#__acpi_ioremap_fast\">__acpi_ioremap_fast</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#width\">width</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#width\">width</a>) {", 
"<span class=\"ts\"/>case 8:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#readb\">readb</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 16:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#readw\">readw</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 32:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 64:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#readq\">readq</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#acpi_atomic_write_mem\">acpi_atomic_write_mem</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#width\">width</a>)", 
"{", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#__acpi_ioremap_fast\">__acpi_ioremap_fast</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#width\">width</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#width\">width</a>) {", 
"<span class=\"ts\"/>case 8:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writeb\">writeb</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 16:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writew\">writew</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 32:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 64:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writeq\">writeq</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* GAR accessing in atomic (including NMI) or process context */</span>", 
"int <a class=\"id\" href=\"#acpi_atomic_read\">acpi_atomic_read</a>(<a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#val\">val</a>, struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#reg\">reg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#acpi_check_gar\">acpi_check_gar</a>(<a class=\"id\" href=\"#reg\">reg</a>, &amp;<a class=\"id\" href=\"#paddr\">paddr</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = 0;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_MEMORY\">ACPI_ADR_SPACE_SYSTEM_MEMORY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#acpi_atomic_read_mem\">acpi_atomic_read_mem</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_IO\">ACPI_ADR_SPACE_SYSTEM_IO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#acpi_os_read_port\">acpi_os_read_port</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, (<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>);", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#acpi_atomic_read\">acpi_atomic_read</a>);", 
"", 
"int <a class=\"id\" href=\"#acpi_atomic_write\">acpi_atomic_write</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>, struct <a class=\"id\" href=\"#acpi_generic_address\">acpi_generic_address</a> *<a class=\"id\" href=\"#reg\">reg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#acpi_check_gar\">acpi_check_gar</a>(<a class=\"id\" href=\"#reg\">reg</a>, &amp;<a class=\"id\" href=\"#paddr\">paddr</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#space_id\">space_id</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_MEMORY\">ACPI_ADR_SPACE_SYSTEM_MEMORY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#acpi_atomic_write_mem\">acpi_atomic_write_mem</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_ADR_SPACE_SYSTEM_IO\">ACPI_ADR_SPACE_SYSTEM_IO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#acpi_os_write_port\">acpi_os_write_port</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_width\">bit_width</a>);", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#acpi_atomic_write\">acpi_atomic_write</a>);", 
];
xr_frag_insert('l/95/52956dd9e02f674aa3fe50cc912ef620b9c7c7.xr', __xr_tmp);
