var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * tracing clocks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2009 Red Hat, Inc., Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Implements 3 trace clock variants, with differing scalability/precision</span>", 
"<span class=\"comment\"> * tradeoffs:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  -   local: CPU-local trace clock</span>", 
"<span class=\"comment\"> *  -  medium: scalable global clock with some jitter</span>", 
"<span class=\"comment\"> *  -  global: globally monotonic, serialized clock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Tracer plugins will chose a default from these clocks.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#irqflags\">irqflags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ktime\">ktime</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#trace_clock\">trace_clock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"trace.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * trace_clock_local(): the simplest and least coherent tracing clock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Useful for tracing that does not cross to other CPUs nor</span>", 
"<span class=\"comment\"> * does it go through idle events.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#trace_clock_local\">trace_clock_local</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#clock\">clock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sched_clock() is an architecture implemented, fast, scalable,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lockless clock. It is not guaranteed to be coherent across</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPUs, nor across CPU idle events.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable_notrace\">preempt_disable_notrace</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clock\">clock</a> = <a class=\"id\" href=\"#sched_clock\">sched_clock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_notrace\">preempt_enable_notrace</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#clock\">clock</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * trace_clock(): 'inbetween' trace clock. Not completely serialized,</span>", 
"<span class=\"comment\"> * but not completely incorrect when crossing CPUs either.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is based on cpu_clock(), which will allow at most ~1 jiffy of</span>", 
"<span class=\"comment\"> * jitter between CPUs. So it's a pretty scalable clock, but there</span>", 
"<span class=\"comment\"> * can be offsets in the trace data.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#trace_clock\">trace_clock</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#local_clock\">local_clock</a>();", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * trace_clock_global(): special globally coherent trace clock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It has higher overhead than the other trace clocks but is still</span>", 
"<span class=\"comment\"> * an order of magnitude faster than GTOD derived hardware clocks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used by plugins that need globally coherent timestamps.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* keep prev_time and lock in the same cacheline. */</span>", 
"static struct {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#prev_time\">prev_time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"} <a class=\"id\" href=\"#trace_clock_struct\">trace_clock_struct</a> <a class=\"id\" href=\"#____cacheline_aligned_in_smp\">____cacheline_aligned_in_smp</a> =", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#lock\">lock</a> = (<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a>)<a class=\"id\" href=\"#__ARCH_SPIN_LOCK_UNLOCKED\">__ARCH_SPIN_LOCK_UNLOCKED</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#trace_clock_global\">trace_clock_global</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#cpu_clock\">cpu_clock</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If in an NMI context then dont risk lockups and return the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpu_clock() time:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#in_nmi\">in_nmi</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(&amp;<a class=\"id\" href=\"#trace_clock_struct\">trace_clock_struct</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TODO: if this happens often then maybe we should reset</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * my_scd-&gt;clock to prev_time+1, to make sure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we start ticking with the local clock from now on?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#s64\">s64</a>)(<a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#trace_clock_struct\">trace_clock_struct</a>.<a class=\"id\" href=\"#prev_time\">prev_time</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#trace_clock_struct\">trace_clock_struct</a>.<a class=\"id\" href=\"#prev_time\">prev_time</a> + 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_clock_struct\">trace_clock_struct</a>.<a class=\"id\" href=\"#prev_time\">prev_time</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_unlock\">arch_spin_unlock</a>(&amp;<a class=\"id\" href=\"#trace_clock_struct\">trace_clock_struct</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#now\">now</a>;", 
"}", 
];
xr_frag_insert('l/95/a70c929666d7b8bffed55cdc287aa7dbb93198.xr', __xr_tmp);
