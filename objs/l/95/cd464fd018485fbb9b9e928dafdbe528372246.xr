var __xr_tmp = [
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_lapic\">acpi_lapic</a> && <a class=\"id\" href=\"#early\">early</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MPS doesn't support hyperthreading, aka only have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thread 0 apic id in MPS table</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_lapic\">acpi_lapic</a> && <a class=\"id\" href=\"#acpi_ioapic\">acpi_ioapic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Intel MultiProcessor Specification v1.%d\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#specification\">specification</a>);", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>)", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#feature2\">feature2</a> &amp; (1 << 7)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"    IMCR and PIC compatibility mode.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pic_mode\">pic_mode</a> = 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"    Virtual Wire compatibility mode.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pic_mode\">pic_mode</a> = 0;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now see if we need to read further.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#feature1\">feature1</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#early\">early</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * local APIC has default address</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mp_lapic_addr\">mp_lapic_addr</a> = <a class=\"id\" href=\"#APIC_DEFAULT_PHYS_BASE\">APIC_DEFAULT_PHYS_BASE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Default MP configuration #%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#feature1\">feature1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#construct_default_ISA_mptable\">construct_default_ISA_mptable</a>(<a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#feature1\">feature1</a>);", 
"", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#physptr\">physptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#check_physptr\">check_physptr</a>(<a class=\"id\" href=\"#mpf\">mpf</a>, <a class=\"id\" href=\"#early\">early</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#early\">early</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Processors: %d\\n\", <a class=\"id\" href=\"#num_processors\">num_processors</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only use the first configuration found.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#smp_reserve_memory\">smp_reserve_memory</a>(struct <a class=\"id\" href=\"#mpf_intel\">mpf_intel</a> *<a class=\"id\" href=\"#mpf\">mpf</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#get_mpc_size\">get_mpc_size</a>(<a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#physptr\">physptr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reserve_early_overlap_ok\">reserve_early_overlap_ok</a>(<a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#physptr\">physptr</a>, <a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#physptr\">physptr</a>+<a class=\"id\" href=\"#size\">size</a>, \"MP-table mpc\");", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#smp_scan_config\">smp_scan_config</a>(unsigned long <a class=\"id\" href=\"#base\">base</a>, unsigned long <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mpf_intel\">mpf_intel</a> *<a class=\"id\" href=\"#mpf\">mpf</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mem\">mem</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"Scan SMP from %p for %ld bytes.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(sizeof(*<a class=\"id\" href=\"#mpf\">mpf</a>) != 16);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#length\">length</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpf\">mpf</a> = (struct <a class=\"id\" href=\"#mpf_intel\">mpf_intel</a> *)<a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#bp\">bp</a> == <a class=\"id\" href=\"#SMP_MAGIC_IDENT\">SMP_MAGIC_IDENT</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#length\">length</a> == 1) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#mpf_checksum\">mpf_checksum</a>((unsigned char *)<a class=\"id\" href=\"#bp\">bp</a>, 16) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#specification\">specification</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>     || (<a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#specification\">specification</a> == 4))) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_found_config\">smp_found_config</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpf_found\">mpf_found</a> = <a class=\"id\" href=\"#mpf\">mpf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"found SMP MP-table at [%p] %llx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#mpf\">mpf</a>, (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#mpf\">mpf</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#mpf\">mpf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserve_early_overlap_ok\">reserve_early_overlap_ok</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#mem\">mem</a> + sizeof(*<a class=\"id\" href=\"#mpf\">mpf</a>), \"MP-table mpf\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#physptr\">physptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_reserve_memory\">smp_reserve_memory</a>(<a class=\"id\" href=\"#mpf\">mpf</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> += 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> -= 16;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#default_find_smp_config\">default_find_smp_config</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#address\">address</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * FIXME: Linux assumes you have 640K of base ram..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this continues the error...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) Scan the bottom 1K for a signature</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) Scan the top 1K of base RAM</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3) Scan the 64K of bios</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_scan_config\">smp_scan_config</a>(0x0, 0x400) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#smp_scan_config\">smp_scan_config</a>(639 * 0x400, 0x400) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#smp_scan_config\">smp_scan_config</a>(0xF0000, 0x10000))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If it is an SMP machine we should know now, unless the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * configuration is in an EISA/MCA bus machine with an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * extended bios data area.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there is a real-mode segmented pointer pointing to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 4K EBDA area at 0x40E, calculate and scan it here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE! There are Linux loaders that will corrupt the EBDA</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * area, and as such this kind of SMP config may be less</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * trustworthy, simply because the SMP table may have been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stomped on during early boot. These loaders are buggy and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should be fixed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MP1.4 SPEC states to only scan first 1K of 4K EBDA.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#get_bios_ebda\">get_bios_ebda</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_scan_config\">smp_scan_config</a>(<a class=\"id\" href=\"#address\">address</a>, 0x400);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a>", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#irq_used\">irq_used</a>[<a class=\"id\" href=\"#MAX_IRQ_SOURCES\">MAX_IRQ_SOURCES</a>];", 
"", 
"static int  <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#get_MP_intsrc_index\">get_MP_intsrc_index</a>(struct <a class=\"id\" href=\"#mpc_intsrc\">mpc_intsrc</a> *<a class=\"id\" href=\"#m\">m</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#irqtype\">irqtype</a> != <a class=\"id\" href=\"#mp_INT\">mp_INT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#irqflag\">irqflag</a> != 0x0f)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* not legacy */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#mp_irq_entries\">mp_irq_entries</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mp_irqs\">mp_irqs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#irqtype\">irqtype</a> != <a class=\"id\" href=\"#mp_INT\">mp_INT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mp_irqs\">mp_irqs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#irqflag\">irqflag</a> != 0x0f)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mp_irqs\">mp_irqs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#srcbus\">srcbus</a> != <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#srcbus\">srcbus</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mp_irqs\">mp_irqs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#srcbusirq\">srcbusirq</a> != <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#srcbusirq\">srcbusirq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#irq_used\">irq_used</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* already claimed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -2;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_used\">irq_used</a>[<a class=\"id\" href=\"#i\">i</a>] = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* not found */</span>", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SPARE_SLOT_NUM\">SPARE_SLOT_NUM</a> 20", 
"", 
"static struct <a class=\"id\" href=\"#mpc_intsrc\">mpc_intsrc</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> *<a class=\"id\" href=\"#m_spare\">m_spare</a>[<a class=\"id\" href=\"#SPARE_SLOT_NUM\">SPARE_SLOT_NUM</a>];", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#check_irq_src\">check_irq_src</a>(struct <a class=\"id\" href=\"#mpc_intsrc\">mpc_intsrc</a> *<a class=\"id\" href=\"#m\">m</a>, int *<a class=\"id\" href=\"#nr_m_spare\">nr_m_spare</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"OLD \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_MP_intsrc_info\">print_MP_intsrc_info</a>(<a class=\"id\" href=\"#m\">m</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#get_MP_intsrc_index\">get_MP_intsrc_index</a>(<a class=\"id\" href=\"#m\">m</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#assign_to_mpc_intsrc\">assign_to_mpc_intsrc</a>(&amp;<a class=\"id\" href=\"#mp_irqs\">mp_irqs</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#m\">m</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"NEW \");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_mp_irq_info\">print_mp_irq_info</a>(&amp;<a class=\"id\" href=\"#mp_irqs\">mp_irqs</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* legacy, do nothing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#nr_m_spare\">nr_m_spare</a> &lt; <a class=\"id\" href=\"#SPARE_SLOT_NUM\">SPARE_SLOT_NUM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not found (-1), or duplicated (-2) are invalid entries,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we need to use the slot later</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m_spare\">m_spare</a>[*<a class=\"id\" href=\"#nr_m_spare\">nr_m_spare</a>] = <a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nr_m_spare\">nr_m_spare</a> += 1;", 
"<span class=\"ts\"/>}", 
"}", 
"#else <span class=\"comment\">/* CONFIG_X86_IO_APIC */</span>", 
"static", 
"<a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#check_irq_src\">check_irq_src</a>(struct <a class=\"id\" href=\"#mpc_intsrc\">mpc_intsrc</a> *<a class=\"id\" href=\"#m\">m</a>, int *<a class=\"id\" href=\"#nr_m_spare\">nr_m_spare</a>) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_IO_APIC */</span>", 
"", 
"static int", 
"<a class=\"id\" href=\"#check_slot\">check_slot</a>(unsigned long <a class=\"id\" href=\"#mpc_new_phys\">mpc_new_phys</a>, unsigned long <a class=\"id\" href=\"#mpc_new_length\">mpc_new_length</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mpc_new_phys\">mpc_new_phys</a> || <a class=\"id\" href=\"#count\">count</a> <= <a class=\"id\" href=\"#mpc_new_length\">mpc_new_length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"update_mptable: No spare slots (length: %x)\\n\", <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int  <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#replace_intsrc_all\">replace_intsrc_all</a>(struct <a class=\"id\" href=\"#mpc_table\">mpc_table</a> *<a class=\"id\" href=\"#mpc\">mpc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mpc_new_phys\">mpc_new_phys</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mpc_new_length\">mpc_new_length</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = sizeof(*<a class=\"id\" href=\"#mpc\">mpc</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_m_spare\">nr_m_spare</a> = 0;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#mpt\">mpt</a> = ((unsigned char *)<a class=\"id\" href=\"#mpc\">mpc</a>) + <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"mpc_length %x\\n\", <a class=\"id\" href=\"#mpc\">mpc</a>-><a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#mpc\">mpc</a>-><a class=\"id\" href=\"#length\">length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (*<a class=\"id\" href=\"#mpt\">mpt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MP_PROCESSOR\">MP_PROCESSOR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skip_entry\">skip_entry</a>(&amp;<a class=\"id\" href=\"#mpt\">mpt</a>, &amp;<a class=\"id\" href=\"#count\">count</a>, sizeof(struct <a class=\"id\" href=\"#mpc_cpu\">mpc_cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MP_BUS\">MP_BUS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skip_entry\">skip_entry</a>(&amp;<a class=\"id\" href=\"#mpt\">mpt</a>, &amp;<a class=\"id\" href=\"#count\">count</a>, sizeof(struct <a class=\"id\" href=\"#mpc_bus\">mpc_bus</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MP_IOAPIC\">MP_IOAPIC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skip_entry\">skip_entry</a>(&amp;<a class=\"id\" href=\"#mpt\">mpt</a>, &amp;<a class=\"id\" href=\"#count\">count</a>, sizeof(struct <a class=\"id\" href=\"#mpc_ioapic\">mpc_ioapic</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MP_INTSRC\">MP_INTSRC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_irq_src\">check_irq_src</a>((struct <a class=\"id\" href=\"#mpc_intsrc\">mpc_intsrc</a> *)<a class=\"id\" href=\"#mpt\">mpt</a>, &amp;<a class=\"id\" href=\"#nr_m_spare\">nr_m_spare</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skip_entry\">skip_entry</a>(&amp;<a class=\"id\" href=\"#mpt\">mpt</a>, &amp;<a class=\"id\" href=\"#count\">count</a>, sizeof(struct <a class=\"id\" href=\"#mpc_intsrc\">mpc_intsrc</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#MP_LINTSRC\">MP_LINTSRC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skip_entry\">skip_entry</a>(&amp;<a class=\"id\" href=\"#mpt\">mpt</a>, &amp;<a class=\"id\" href=\"#count\">count</a>, sizeof(struct <a class=\"id\" href=\"#mpc_lintsrc\">mpc_lintsrc</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* wrong mptable */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_dump_mptable\">smp_dump_mptable</a>(<a class=\"id\" href=\"#mpc\">mpc</a>, <a class=\"id\" href=\"#mpt\">mpt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#mp_irq_entries\">mp_irq_entries</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#irq_used\">irq_used</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mp_irqs\">mp_irqs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#irqtype\">irqtype</a> != <a class=\"id\" href=\"#mp_INT\">mp_INT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mp_irqs\">mp_irqs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#irqflag\">irqflag</a> != 0x0f)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_m_spare\">nr_m_spare</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"*NEW* found\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_m_spare\">nr_m_spare</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#assign_to_mpc_intsrc\">assign_to_mpc_intsrc</a>(&amp;<a class=\"id\" href=\"#mp_irqs\">mp_irqs</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#m_spare\">m_spare</a>[<a class=\"id\" href=\"#nr_m_spare\">nr_m_spare</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m_spare\">m_spare</a>[<a class=\"id\" href=\"#nr_m_spare\">nr_m_spare</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mpc_intsrc\">mpc_intsrc</a> *<a class=\"id\" href=\"#m\">m</a> = (struct <a class=\"id\" href=\"#mpc_intsrc\">mpc_intsrc</a> *)<a class=\"id\" href=\"#mpt\">mpt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += sizeof(struct <a class=\"id\" href=\"#mpc_intsrc\">mpc_intsrc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#check_slot\">check_slot</a>(<a class=\"id\" href=\"#mpc_new_phys\">mpc_new_phys</a>, <a class=\"id\" href=\"#mpc_new_length\">mpc_new_length</a>, <a class=\"id\" href=\"#count\">count</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#assign_to_mpc_intsrc\">assign_to_mpc_intsrc</a>(&amp;<a class=\"id\" href=\"#mp_irqs\">mp_irqs</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#m\">m</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpc\">mpc</a>-><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpt\">mpt</a> += sizeof(struct <a class=\"id\" href=\"#mpc_intsrc\">mpc_intsrc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_mp_irq_info\">print_mp_irq_info</a>(&amp;<a class=\"id\" href=\"#mp_irqs\">mp_irqs</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* update checksum */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpc\">mpc</a>-><a class=\"id\" href=\"#checksum\">checksum</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpc\">mpc</a>-><a class=\"id\" href=\"#checksum\">checksum</a> -= <a class=\"id\" href=\"#mpf_checksum\">mpf_checksum</a>((unsigned char *)<a class=\"id\" href=\"#mpc\">mpc</a>, <a class=\"id\" href=\"#mpc\">mpc</a>-><a class=\"id\" href=\"#length\">length</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#enable_update_mptable\">enable_update_mptable</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#update_mptable_setup\">update_mptable_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_update_mptable\">enable_update_mptable</a> = 1;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_routeirq\">pci_routeirq</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"update_mptable\", <a class=\"id\" href=\"#update_mptable_setup\">update_mptable_setup</a>);", 
"", 
"static unsigned long <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#mpc_new_phys\">mpc_new_phys</a>;", 
"static unsigned long <a class=\"id\" href=\"#mpc_new_length\">mpc_new_length</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> = 4096;", 
"", 
"<span class=\"comment\">/* alloc_mptable or alloc_mptable=4k */</span>", 
"static int <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#alloc_mptable\">alloc_mptable</a>;", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_alloc_mptable_opt\">parse_alloc_mptable_opt</a>(char *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_update_mptable\">enable_update_mptable</a> = 1;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_routeirq\">pci_routeirq</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_mptable\">alloc_mptable</a> = 1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpc_new_length\">mpc_new_length</a> = <a class=\"id\" href=\"#memparse\">memparse</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"alloc_mptable\", <a class=\"id\" href=\"#parse_alloc_mptable_opt\">parse_alloc_mptable_opt</a>);", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_reserve_e820_mpc_new\">early_reserve_e820_mpc_new</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enable_update_mptable\">enable_update_mptable</a> && <a class=\"id\" href=\"#alloc_mptable\">alloc_mptable</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#startt\">startt</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpc_new_phys\">mpc_new_phys</a> = <a class=\"id\" href=\"#early_reserve_e820\">early_reserve_e820</a>(<a class=\"id\" href=\"#startt\">startt</a>, <a class=\"id\" href=\"#mpc_new_length\">mpc_new_length</a>, 4);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#update_mp_table\">update_mp_table</a>(void)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#str\">str</a>[16];", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#oem\">oem</a>[10];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mpf_intel\">mpf_intel</a> *<a class=\"id\" href=\"#mpf\">mpf</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mpc_table\">mpc_table</a> *<a class=\"id\" href=\"#mpc\">mpc</a>, *<a class=\"id\" href=\"#mpc_new\">mpc_new</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#enable_update_mptable\">enable_update_mptable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpf\">mpf</a> = <a class=\"id\" href=\"#mpf_found\">mpf_found</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mpf\">mpf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now see if we need to go further.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#feature1\">feature1</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#physptr\">physptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpc\">mpc</a> = <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#physptr\">physptr</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#smp_check_mpc\">smp_check_mpc</a>(<a class=\"id\" href=\"#mpc\">mpc</a>, <a class=\"id\" href=\"#oem\">oem</a>, <a class=\"id\" href=\"#str\">str</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"mpf: %llx\\n\", (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#mpf\">mpf</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"physptr: %x\\n\", <a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#physptr\">physptr</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mpc_new_phys\">mpc_new_phys</a> && <a class=\"id\" href=\"#mpc\">mpc</a>-><a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#mpc_new_length\">mpc_new_length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpc_new_phys\">mpc_new_phys</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"mpc_new_length is %ld, please use alloc_mptable=8k\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#mpc_new_length\">mpc_new_length</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mpc_new_phys\">mpc_new_phys</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* check if we can change the postion */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpc\">mpc</a>-><a class=\"id\" href=\"#checksum\">checksum</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#mpf_checksum\">mpf_checksum</a>((unsigned char *)<a class=\"id\" href=\"#mpc\">mpc</a>, <a class=\"id\" href=\"#mpc\">mpc</a>-><a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpc\">mpc</a>-><a class=\"id\" href=\"#checksum\">checksum</a> = 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#mpf_checksum\">mpf_checksum</a>((unsigned char *)<a class=\"id\" href=\"#mpc\">mpc</a>, <a class=\"id\" href=\"#mpc\">mpc</a>-><a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a> == <a class=\"id\" href=\"#new\">new</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"mpc is readonly, please try alloc_mptable instead\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"use in-positon replacing\\n\");", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#physptr\">physptr</a> = <a class=\"id\" href=\"#mpc_new_phys\">mpc_new_phys</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpc_new\">mpc_new</a> = <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#mpc_new_phys\">mpc_new_phys</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#mpc_new\">mpc_new</a>, <a class=\"id\" href=\"#mpc\">mpc</a>, <a class=\"id\" href=\"#mpc\">mpc</a>-><a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpc\">mpc</a> = <a class=\"id\" href=\"#mpc_new\">mpc_new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* check if we can modify that */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mpc_new_phys\">mpc_new_phys</a> - <a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#physptr\">physptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mpf_intel\">mpf_intel</a> *<a class=\"id\" href=\"#mpf_new\">mpf_new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* steal 16 bytes from [0, 1k) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"mpf new: %x\\n\", 0x400 - 16);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpf_new\">mpf_new</a> = <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(0x400 - 16);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#mpf_new\">mpf_new</a>, <a class=\"id\" href=\"#mpf\">mpf</a>, 16);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpf\">mpf</a> = <a class=\"id\" href=\"#mpf_new\">mpf_new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#physptr\">physptr</a> = <a class=\"id\" href=\"#mpc_new_phys\">mpc_new_phys</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#checksum\">checksum</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#checksum\">checksum</a> -= <a class=\"id\" href=\"#mpf_checksum\">mpf_checksum</a>((unsigned char *)<a class=\"id\" href=\"#mpf\">mpf</a>, 16);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"physptr new: %x\\n\", <a class=\"id\" href=\"#mpf\">mpf</a>-><a class=\"id\" href=\"#physptr\">physptr</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only replace the one with mp_INT and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/> MP_IRQ_TRIGGER_LEVEL|MP_IRQ_POLARITY_LOW,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already in mp_irqs , stored by ... and mp_config_acpi_gsi,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * may need pci=routeirq for all coverage</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#replace_intsrc_all\">replace_intsrc_all</a>(<a class=\"id\" href=\"#mpc\">mpc</a>, <a class=\"id\" href=\"#mpc_new_phys\">mpc_new_phys</a>, <a class=\"id\" href=\"#mpc_new_length\">mpc_new_length</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#update_mp_table\">update_mp_table</a>);", 
];
xr_frag_insert('l/95/cd464fd018485fbb9b9e928dafdbe528372246.xr', __xr_tmp);
