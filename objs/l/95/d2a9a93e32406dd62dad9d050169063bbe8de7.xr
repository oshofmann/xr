var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ex_convert_to_integer\">acpi_ex_convert_to_integer</a>(<a class=\"id\" href=\"#operand1\">operand1</a>, &amp;<a class=\"id\" href=\"#local_operand1\">local_operand1</a>, 16);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_STRING\">ACPI_TYPE_STRING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ex_convert_to_string\">acpi_ex_convert_to_string</a>(<a class=\"id\" href=\"#operand1\">operand1</a>, &amp;<a class=\"id\" href=\"#local_operand1\">local_operand1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ACPI_IMPLICIT_CONVERT_HEX\">ACPI_IMPLICIT_CONVERT_HEX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_BUFFER\">ACPI_TYPE_BUFFER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ex_convert_to_buffer\">acpi_ex_convert_to_buffer</a>(<a class=\"id\" href=\"#operand1\">operand1</a>, &amp;<a class=\"id\" href=\"#local_operand1\">local_operand1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Invalid object type: 0x%X\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_AML_INTERNAL\">AE_AML_INTERNAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Both operands are now known to be the same object type</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (Both are Integer, String, or Buffer), and we can now perform the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * concatenation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There are three cases to handle:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) Two Integers concatenated to produce a new Buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) Two Strings concatenated to produce a new String</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3) Two Buffers concatenated to produce a new Buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_INTEGER\">ACPI_TYPE_INTEGER</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Result of two Integers is a Buffer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Need enough buffer space for two integers */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_desc\">return_desc</a> = <a class=\"id\" href=\"#acpi_ut_create_buffer_object\">acpi_ut_create_buffer_object</a>((<a class=\"id\" href=\"#acpi_size\">acpi_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ACPI_MUL_2\">ACPI_MUL_2</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#acpi_gbl_integer_byte_width\">acpi_gbl_integer_byte_width</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#return_desc\">return_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_buf\">new_buf</a> = (char *)<a class=\"id\" href=\"#return_desc\">return_desc</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Copy the first integer, LSB first */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MEMCPY\">ACPI_MEMCPY</a>(<a class=\"id\" href=\"#new_buf\">new_buf</a>, &amp;<a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_gbl_integer_byte_width\">acpi_gbl_integer_byte_width</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Copy the second integer (LSB first) after the first */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MEMCPY\">ACPI_MEMCPY</a>(<a class=\"id\" href=\"#new_buf\">new_buf</a> + <a class=\"id\" href=\"#acpi_gbl_integer_byte_width\">acpi_gbl_integer_byte_width</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#local_operand1\">local_operand1</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_gbl_integer_byte_width\">acpi_gbl_integer_byte_width</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_STRING\">ACPI_TYPE_STRING</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Result of two Strings is a String */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_desc\">return_desc</a> = <a class=\"id\" href=\"#acpi_ut_create_string_object\">acpi_ut_create_string_object</a>(((<a class=\"id\" href=\"#acpi_size\">acpi_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#string\">string</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#length\">length</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#local_operand1\">local_operand1</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#length\">length</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#return_desc\">return_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_buf\">new_buf</a> = <a class=\"id\" href=\"#return_desc\">return_desc</a>-><a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#pointer\">pointer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Concatenate the strings */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_STRCPY\">ACPI_STRCPY</a>(<a class=\"id\" href=\"#new_buf\">new_buf</a>, <a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#pointer\">pointer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_STRCPY\">ACPI_STRCPY</a>(<a class=\"id\" href=\"#new_buf\">new_buf</a> + <a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#length\">length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#local_operand1\">local_operand1</a>-><a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#pointer\">pointer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_BUFFER\">ACPI_TYPE_BUFFER</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Result of two Buffers is a Buffer */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_desc\">return_desc</a> = <a class=\"id\" href=\"#acpi_ut_create_buffer_object\">acpi_ut_create_buffer_object</a>(((<a class=\"id\" href=\"#acpi_size\">acpi_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#length\">length</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#local_operand1\">local_operand1</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#return_desc\">return_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_buf\">new_buf</a> = (char *)<a class=\"id\" href=\"#return_desc\">return_desc</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Concatenate the buffers */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MEMCPY\">ACPI_MEMCPY</a>(<a class=\"id\" href=\"#new_buf\">new_buf</a>, <a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MEMCPY\">ACPI_MEMCPY</a>(<a class=\"id\" href=\"#new_buf\">new_buf</a> + <a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#local_operand1\">local_operand1</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#local_operand1\">local_operand1</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Invalid object type, should not happen here */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Invalid object type: 0x%X\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_AML_INTERNAL\">AE_AML_INTERNAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#actual_return_desc\">actual_return_desc</a> = <a class=\"id\" href=\"#return_desc\">return_desc</a>;", 
"", 
"      <a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local_operand1\">local_operand1</a> != <a class=\"id\" href=\"#operand1\">operand1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#local_operand1\">local_operand1</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_do_math_op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Opcode              - AML opcode</span>", 
"<span class=\"comment\"> *              Integer0            - Integer operand #0</span>", 
"<span class=\"comment\"> *              Integer1            - Integer operand #1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Integer result of the operation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Execute a math AML opcode. The purpose of having all of the</span>", 
"<span class=\"comment\"> *              math functions here is to prevent a lot of pointer dereferencing</span>", 
"<span class=\"comment\"> *              to obtain the operands.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#acpi_ex_do_math_op\">acpi_ex_do_math_op</a>(<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#opcode\">opcode</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#integer0\">integer0</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#integer1\">integer1</a>)", 
"{", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#opcode\">opcode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_ADD_OP\">AML_ADD_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* Add (Integer0, Integer1, Result) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#integer0\">integer0</a> + <a class=\"id\" href=\"#integer1\">integer1</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_BIT_AND_OP\">AML_BIT_AND_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* And (Integer0, Integer1, Result) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#integer0\">integer0</a> &amp; <a class=\"id\" href=\"#integer1\">integer1</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_BIT_NAND_OP\">AML_BIT_NAND_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* NAnd (Integer0, Integer1, Result) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (~(<a class=\"id\" href=\"#integer0\">integer0</a> &amp; <a class=\"id\" href=\"#integer1\">integer1</a>));", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_BIT_OR_OP\">AML_BIT_OR_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* Or (Integer0, Integer1, Result) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#integer0\">integer0</a> | <a class=\"id\" href=\"#integer1\">integer1</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_BIT_NOR_OP\">AML_BIT_NOR_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* NOr (Integer0, Integer1, Result) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (~(<a class=\"id\" href=\"#integer0\">integer0</a> | <a class=\"id\" href=\"#integer1\">integer1</a>));", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_BIT_XOR_OP\">AML_BIT_XOR_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* XOr (Integer0, Integer1, Result) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#integer0\">integer0</a> ^ <a class=\"id\" href=\"#integer1\">integer1</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_MULTIPLY_OP\">AML_MULTIPLY_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* Multiply (Integer0, Integer1, Result) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#integer0\">integer0</a> * <a class=\"id\" href=\"#integer1\">integer1</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_SHIFT_LEFT_OP\">AML_SHIFT_LEFT_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* shift_left (Operand, shift_count, Result) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We need to check if the shiftcount is larger than the integer bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * width since the behavior of this is not well-defined in the C language.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#integer1\">integer1</a> >= <a class=\"id\" href=\"#acpi_gbl_integer_bit_width\">acpi_gbl_integer_bit_width</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#integer0\">integer0</a> << <a class=\"id\" href=\"#integer1\">integer1</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_SHIFT_RIGHT_OP\">AML_SHIFT_RIGHT_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* shift_right (Operand, shift_count, Result) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We need to check if the shiftcount is larger than the integer bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * width since the behavior of this is not well-defined in the C language.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#integer1\">integer1</a> >= <a class=\"id\" href=\"#acpi_gbl_integer_bit_width\">acpi_gbl_integer_bit_width</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#integer0\">integer0</a> >> <a class=\"id\" href=\"#integer1\">integer1</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_SUBTRACT_OP\">AML_SUBTRACT_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* Subtract (Integer0, Integer1, Result) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#integer0\">integer0</a> - <a class=\"id\" href=\"#integer1\">integer1</a>);", 
"", 
"<span class=\"ts\"/>default:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (0);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_do_logical_numeric_op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Opcode              - AML opcode</span>", 
"<span class=\"comment\"> *              Integer0            - Integer operand #0</span>", 
"<span class=\"comment\"> *              Integer1            - Integer operand #1</span>", 
"<span class=\"comment\"> *              logical_result      - TRUE/FALSE result of the operation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Execute a logical \"Numeric\" AML opcode. For these Numeric</span>", 
"<span class=\"comment\"> *              operators (LAnd and LOr), both operands must be integers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *              Note: cleanest machine code seems to be produced by the code</span>", 
"<span class=\"comment\"> *              below, rather than using statements of the form:</span>", 
"<span class=\"comment\"> *                  Result = (Integer0 &amp;&amp; Integer1);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ex_do_logical_numeric_op\">acpi_ex_do_logical_numeric_op</a>(<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#opcode\">opcode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#integer0\">integer0</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#integer1\">integer1</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#logical_result\">logical_result</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#local_result\">local_result</a> = <a class=\"id\" href=\"#FALSE\">FALSE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ex_do_logical_numeric_op\">ex_do_logical_numeric_op</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#opcode\">opcode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_LAND_OP\">AML_LAND_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* LAnd (Integer0, Integer1) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#integer0\">integer0</a> && <a class=\"id\" href=\"#integer1\">integer1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_result\">local_result</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AML_LOR_OP\">AML_LOR_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* LOr (Integer0, Integer1) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#integer0\">integer0</a> || <a class=\"id\" href=\"#integer1\">integer1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_result\">local_result</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_AML_INTERNAL\">AE_AML_INTERNAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return the logical result and status */</span>", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#logical_result\">logical_result</a> = <a class=\"id\" href=\"#local_result\">local_result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_do_logical_op</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Opcode              - AML opcode</span>", 
"<span class=\"comment\"> *              Operand0            - operand #0</span>", 
"<span class=\"comment\"> *              Operand1            - operand #1</span>", 
"<span class=\"comment\"> *              logical_result      - TRUE/FALSE result of the operation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Execute a logical AML opcode. The purpose of having all of the</span>", 
"<span class=\"comment\"> *              functions here is to prevent a lot of pointer dereferencing</span>", 
"<span class=\"comment\"> *              to obtain the operands and to simplify the generation of the</span>", 
"<span class=\"comment\"> *              logical value. For the Numeric operators (LAnd and LOr), both</span>", 
"<span class=\"comment\"> *              operands must be integers. For the other logical operators,</span>", 
"<span class=\"comment\"> *              operands can be any combination of Integer/String/Buffer. The</span>", 
"<span class=\"comment\"> *              first operand determines the type to which the second operand</span>", 
"<span class=\"comment\"> *              will be converted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *              Note: cleanest machine code seems to be produced by the code</span>", 
"<span class=\"comment\"> *              below, rather than using statements of the form:</span>", 
"<span class=\"comment\"> *                  Result = (Operand0 == Operand1);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ex_do_logical_op\">acpi_ex_do_logical_op</a>(<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#opcode\">opcode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#operand0\">operand0</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#operand1\">operand1</a>, <a class=\"id\" href=\"#u8\">u8</a> * <a class=\"id\" href=\"#logical_result\">logical_result</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#local_operand1\">local_operand1</a> = <a class=\"id\" href=\"#operand1\">operand1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#integer0\">integer0</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#integer1\">integer1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#length0\">length0</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#length1\">length1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#local_result\">local_result</a> = <a class=\"id\" href=\"#FALSE\">FALSE</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#compare\">compare</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ex_do_logical_op\">ex_do_logical_op</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Convert the second operand if necessary.  The first operand</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * determines the type of the second operand, (See the Data Types</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * section of the ACPI 3.0+ specification.)  Both object types are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * guaranteed to be either Integer/String/Buffer by the operand</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * resolution mechanism.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_INTEGER\">ACPI_TYPE_INTEGER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ex_convert_to_integer\">acpi_ex_convert_to_integer</a>(<a class=\"id\" href=\"#operand1\">operand1</a>, &amp;<a class=\"id\" href=\"#local_operand1\">local_operand1</a>, 16);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_STRING\">ACPI_TYPE_STRING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ex_convert_to_string\">acpi_ex_convert_to_string</a>(<a class=\"id\" href=\"#operand1\">operand1</a>, &amp;<a class=\"id\" href=\"#local_operand1\">local_operand1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ACPI_IMPLICIT_CONVERT_HEX\">ACPI_IMPLICIT_CONVERT_HEX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_BUFFER\">ACPI_TYPE_BUFFER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ex_convert_to_buffer\">acpi_ex_convert_to_buffer</a>(<a class=\"id\" href=\"#operand1\">operand1</a>, &amp;<a class=\"id\" href=\"#local_operand1\">local_operand1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_AML_INTERNAL\">AE_AML_INTERNAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Two cases: 1) Both Integers, 2) Both Strings or Buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ACPI_TYPE_INTEGER\">ACPI_TYPE_INTEGER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 1) Both operands are of type integer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *    Note: local_operand1 may have changed above</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#integer0\">integer0</a> = <a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#integer1\">integer1</a> = <a class=\"id\" href=\"#local_operand1\">local_operand1</a>-><a class=\"id\" href=\"#integer\">integer</a>.<a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#opcode\">opcode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#AML_LEQUAL_OP\">AML_LEQUAL_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* LEqual (Operand0, Operand1) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#integer0\">integer0</a> == <a class=\"id\" href=\"#integer1\">integer1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_result\">local_result</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#AML_LGREATER_OP\">AML_LGREATER_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* LGreater (Operand0, Operand1) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#integer0\">integer0</a> &gt; <a class=\"id\" href=\"#integer1\">integer1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_result\">local_result</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#AML_LLESS_OP\">AML_LLESS_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* LLess (Operand0, Operand1) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#integer0\">integer0</a> &lt; <a class=\"id\" href=\"#integer1\">integer1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_result\">local_result</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_AML_INTERNAL\">AE_AML_INTERNAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 2) Both operands are Strings or both are Buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *    Note: Code below takes advantage of common Buffer/String</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *          object fields. local_operand1 may have changed above. Use</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *          memcmp to handle nulls in buffers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length0\">length0</a> = <a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length1\">length1</a> = <a class=\"id\" href=\"#local_operand1\">local_operand1</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Lexicographic compare: compare the data bytes */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#compare\">compare</a> = <a class=\"id\" href=\"#ACPI_MEMCMP\">ACPI_MEMCMP</a>(<a class=\"id\" href=\"#operand0\">operand0</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#local_operand1\">local_operand1</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (<a class=\"id\" href=\"#length0\">length0</a> &gt; <a class=\"id\" href=\"#length1\">length1</a>) ? <a class=\"id\" href=\"#length1\">length1</a> : <a class=\"id\" href=\"#length0\">length0</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#opcode\">opcode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#AML_LEQUAL_OP\">AML_LEQUAL_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* LEqual (Operand0, Operand1) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Length and all bytes must be equal */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#length0\">length0</a> == <a class=\"id\" href=\"#length1\">length1</a>) && (<a class=\"id\" href=\"#compare\">compare</a> == 0)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Length and all bytes match ==&gt; TRUE */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_result\">local_result</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#AML_LGREATER_OP\">AML_LGREATER_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* LGreater (Operand0, Operand1) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#compare\">compare</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_result\">local_result</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;<span class=\"ts\"/><span class=\"comment\">/* TRUE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#compare\">compare</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;<span class=\"ts\"/><span class=\"comment\">/* FALSE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Bytes match (to shortest length), compare lengths */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#length0\">length0</a> &gt; <a class=\"id\" href=\"#length1\">length1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_result\">local_result</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#AML_LLESS_OP\">AML_LLESS_OP</a>:<span class=\"ts\"/><span class=\"comment\">/* LLess (Operand0, Operand1) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#compare\">compare</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;<span class=\"ts\"/><span class=\"comment\">/* FALSE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#compare\">compare</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_result\">local_result</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;<span class=\"ts\"/><span class=\"comment\">/* TRUE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Bytes match (to shortest length), compare lengths */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#length0\">length0</a> &lt; <a class=\"id\" href=\"#length1\">length1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_result\">local_result</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_AML_INTERNAL\">AE_AML_INTERNAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"      <a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* New object was created if implicit conversion performed - delete */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local_operand1\">local_operand1</a> != <a class=\"id\" href=\"#operand1\">operand1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#local_operand1\">local_operand1</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return the logical result and status */</span>", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#logical_result\">logical_result</a> = <a class=\"id\" href=\"#local_result\">local_result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
];
xr_frag_insert('l/95/d2a9a93e32406dd62dad9d050169063bbe8de7.xr', __xr_tmp);
