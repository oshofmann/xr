var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: nspredef - Validation of ACPI predefined methods and objects</span>", 
"<span class=\"comment\"> *              $Revision: 1.1 $</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_CREATE_PREDEFINED_TABLE\">ACPI_CREATE_PREDEFINED_TABLE</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acpredef.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_NAMESPACE\">ACPI_NAMESPACE</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"nspredef\")", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This module validates predefined ACPI objects that appear in the namespace,</span>", 
"<span class=\"comment\"> * at the time they are evaluated (via acpi_evaluate_object). The purpose of this</span>", 
"<span class=\"comment\"> * validation is to detect problems with BIOS-exposed predefined ACPI objects</span>", 
"<span class=\"comment\"> * before the results are returned to the ACPI-related drivers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are several areas that are validated:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  1) The number of input arguments as defined by the method/object in the</span>", 
"<span class=\"comment\"> *      ASL is validated against the ACPI specification.</span>", 
"<span class=\"comment\"> *  2) The type of the return object (if any) is validated against the ACPI</span>", 
"<span class=\"comment\"> *      specification.</span>", 
"<span class=\"comment\"> *  3) For returned package objects, the count of package elements is</span>", 
"<span class=\"comment\"> *      validated, as well as the type of each package element. Nested</span>", 
"<span class=\"comment\"> *      packages are supported.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For any problems found, a warning message is issued.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_check_package\">acpi_ns_check_package</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>);", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_check_package_list\">acpi_ns_check_package_list</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const union <a class=\"id\" href=\"#acpi_predefined_info\">acpi_predefined_info</a> *<a class=\"id\" href=\"#package\">package</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#elements\">elements</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_check_package_elements\">acpi_ns_check_package_elements</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#elements\">elements</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type1\">type1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#count1\">count1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type2\">type2</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#count2\">count2</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#start_index\">start_index</a>);", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_check_object_type\">acpi_ns_check_object_type</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#expected_btypes\">expected_btypes</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#package_index\">package_index</a>);", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_check_reference\">acpi_ns_check_reference</a>(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#return_object\">return_object</a>);", 
"", 
"static void <a class=\"id\" href=\"#acpi_ns_get_expected_types\">acpi_ns_get_expected_types</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#expected_btypes\">expected_btypes</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Names for the types that can be returned by the predefined objects.</span>", 
"<span class=\"comment\"> * Used for warning messages. Must be in the same order as the ACPI_RTYPEs</span>", 
"<span class=\"comment\"> */</span>", 
"static const char *<a class=\"id\" href=\"#acpi_rtype_names\">acpi_rtype_names</a>[] = {", 
"<span class=\"ts\"/>\"/Integer\",", 
"<span class=\"ts\"/>\"/String\",", 
"<span class=\"ts\"/>\"/Buffer\",", 
"<span class=\"ts\"/>\"/Package\",", 
"<span class=\"ts\"/>\"/Reference\",", 
"};", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_check_predefined_names</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Node            - Namespace node for the method/object</span>", 
"<span class=\"comment\"> *              user_param_count - Number of parameters actually passed</span>", 
"<span class=\"comment\"> *              return_status   - Status from the object evaluation</span>", 
"<span class=\"comment\"> *              return_object_ptr - Pointer to the object returned from the</span>", 
"<span class=\"comment\"> *                                evaluation of a method or object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Check an ACPI name for a match in the predefined name list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_check_predefined_names\">acpi_ns_check_predefined_names</a>(struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#user_param_count\">user_param_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#return_status\">return_status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> **<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#return_object\">return_object</a> = *<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/>const union <a class=\"id\" href=\"#acpi_predefined_info\">acpi_predefined_info</a> *<a class=\"id\" href=\"#predefined\">predefined</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#pathname\">pathname</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Match the name for this method/object against the predefined list */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#predefined\">predefined</a> = <a class=\"id\" href=\"#acpi_ns_check_for_predefined_name\">acpi_ns_check_for_predefined_name</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the full pathname to the object, for use in warning messages */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pathname\">pathname</a> = <a class=\"id\" href=\"#acpi_ns_get_external_pathname\">acpi_ns_get_external_pathname</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pathname\">pathname</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;<span class=\"ts\"/><span class=\"comment\">/* Could not get pathname, ignore */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check that the parameter count for this method matches the ASL</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * definition. For predefined names, ensure that both the caller and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the method itself are in accordance with the ACPI specification.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ns_check_parameter_count\">acpi_ns_check_parameter_count</a>(<a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#user_param_count\">user_param_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#predefined\">predefined</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If not a predefined name, we cannot validate the return object */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#predefined\">predefined</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the method failed or did not actually return an object, we cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * validate the return object</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#return_status\">return_status</a> != <a class=\"id\" href=\"#AE_OK\">AE_OK</a>) && (<a class=\"id\" href=\"#return_status\">return_status</a> != <a class=\"id\" href=\"#AE_CTRL_RETURN_VALUE\">AE_CTRL_RETURN_VALUE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there is no return value, check if we require a return value for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this predefined name. Either one return value is expected, or none,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for both methods and other objects.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Exit now if there is no return object. Warning if one was expected.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#return_object\">return_object</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#predefined\">predefined</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#expected_btypes\">expected_btypes</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (!(<a class=\"id\" href=\"#predefined\">predefined</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#expected_btypes\">expected_btypes</a> &amp; <a class=\"id\" href=\"#ACPI_RTYPE_NONE\">ACPI_RTYPE_NONE</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARN_PREDEFINED\">ACPI_WARN_PREDEFINED</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#pathname\">pathname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ACPI_WARN_ALWAYS\">ACPI_WARN_ALWAYS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"Missing expected return value\"));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_AML_NO_RETURN_VALUE\">AE_AML_NO_RETURN_VALUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) We have a return value, but if one wasn't expected, just exit, this is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not a problem. For example, if the \"Implicit Return\" feature is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enabled, methods will always return a value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) If the return value can be of any type, then we cannot perform any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * validation, exit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#predefined\">predefined</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#expected_btypes\">expected_btypes</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#predefined\">predefined</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#expected_btypes\">expected_btypes</a> == <a class=\"id\" href=\"#ACPI_RTYPE_ALL\">ACPI_RTYPE_ALL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Create the parameter data block for object validation */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE_ZEROED\">ACPI_ALLOCATE_ZEROED</a>(sizeof(struct <a class=\"id\" href=\"#acpi_predefined_data\">acpi_predefined_data</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#predefined\">predefined</a> = <a class=\"id\" href=\"#predefined\">predefined</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#node_flags\">node_flags</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#pathname\">pathname</a> = <a class=\"id\" href=\"#pathname\">pathname</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check that the type of the main return object is what is expected</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for this predefined name</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_check_object_type\">acpi_ns_check_object_type</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#predefined\">predefined</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#expected_btypes\">expected_btypes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ACPI_NOT_PACKAGE_ELEMENT\">ACPI_NOT_PACKAGE_ELEMENT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For returned Package objects, check the type of all sub-objects.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: Package may have been newly created by call above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((*<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>)-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ACPI_TYPE_PACKAGE\">ACPI_TYPE_PACKAGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#parent_package\">parent_package</a> = *<a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_check_package\">acpi_ns_check_package</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exit\">exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The return object was OK, or it was successfully repaired above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now make some additional checks such as verifying that package</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * objects are sorted correctly (if required) or buffer objects have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the correct data width (bytes vs. dwords). These repairs are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * performed on a per-name basis, i.e., the code is specific to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * particular predefined names.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_complex_repairs\">acpi_ns_complex_repairs</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#return_object_ptr\">return_object_ptr</a>);", 
"", 
"<a class=\"id\" href=\"#exit\">exit</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the object validation failed or if we successfully repaired one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or more objects, mark the parent node to suppress further warning</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * messages during the next evaluation of the same method/object.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>) || (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_OBJECT_REPAIRED\">ACPI_OBJECT_REPAIRED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ANOBJ_EVALUATED\">ANOBJ_EVALUATED</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#pathname\">pathname</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_check_parameter_count</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Pathname        - Full pathname to the node (for error msgs)</span>", 
"<span class=\"comment\"> *              Node            - Namespace node for the method/object</span>", 
"<span class=\"comment\"> *              user_param_count - Number of args passed in by the caller</span>", 
"<span class=\"comment\"> *              Predefined      - Pointer to entry in predefined name table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Check that the declared (in ASL/AML) parameter count for a</span>", 
"<span class=\"comment\"> *              predefined name is what is expected (i.e., what is defined in</span>", 
"<span class=\"comment\"> *              the ACPI specification for this predefined name.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#acpi_ns_check_parameter_count\">acpi_ns_check_parameter_count</a>(char *<a class=\"id\" href=\"#pathname\">pathname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#user_param_count\">user_param_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const union <a class=\"id\" href=\"#acpi_predefined_info\">acpi_predefined_info</a> *<a class=\"id\" href=\"#predefined\">predefined</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#param_count\">param_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#required_params_current\">required_params_current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#required_params_old\">required_params_old</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Methods have 0-7 parameters. All other types have zero. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#param_count\">param_count</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ACPI_TYPE_METHOD\">ACPI_TYPE_METHOD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#param_count\">param_count</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#object\">object</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#param_count\">param_count</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#predefined\">predefined</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check the parameter count for non-predefined methods/objects.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Warning if too few or too many arguments have been passed by the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * caller. An incorrect number of arguments may not cause the method</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to fail. However, the method will fail if there are too few</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * arguments and the method attempts to use one of the missing ones.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#user_param_count\">user_param_count</a> &lt; <a class=\"id\" href=\"#param_count\">param_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARN_PREDEFINED\">ACPI_WARN_PREDEFINED</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#pathname\">pathname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ACPI_WARN_ALWAYS\">ACPI_WARN_ALWAYS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"Insufficient arguments - needs %u, found %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#param_count\">param_count</a>, <a class=\"id\" href=\"#user_param_count\">user_param_count</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#user_param_count\">user_param_count</a> &gt; <a class=\"id\" href=\"#param_count\">param_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARN_PREDEFINED\">ACPI_WARN_PREDEFINED</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#pathname\">pathname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ACPI_WARN_ALWAYS\">ACPI_WARN_ALWAYS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"Excess arguments - needs %u, found %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#param_count\">param_count</a>, <a class=\"id\" href=\"#user_param_count\">user_param_count</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Validate the user-supplied parameter count.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allow two different legal argument counts (_SCP, etc.)</span>", 
];
xr_frag_insert('l/95/d3f2ef2c692ffaac303433d54f7e65aa99e02d.xr', __xr_tmp);
