var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Copyright 2010</span>", 
"<span class=\"comment\"> *  by Konrad Rzeszutek Wilk &lt;konrad.wilk@oracle.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This code provides a IOMMU for Xen PV guests with PCI passthrough.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License v2.0 as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PV guests under Xen are running in an non-contiguous memory architecture.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When PCI pass-through is utilized, this necessitates an IOMMU for</span>", 
"<span class=\"comment\"> * translating bus (DMA) to virtual and vice-versa and also providing a</span>", 
"<span class=\"comment\"> * mechanism to have contiguous pages for device drivers operations (say DMA</span>", 
"<span class=\"comment\"> * operations).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Specifically, under Xen the Linux idea of pages is an illusion. It</span>", 
"<span class=\"comment\"> * assumes that pages start at zero and go up to the available memory. To</span>", 
"<span class=\"comment\"> * help with that, the Linux Xen MMU provides a lookup mechanism to</span>", 
"<span class=\"comment\"> * translate the page frame numbers (PFN) to machine frame numbers (MFN)</span>", 
"<span class=\"comment\"> * and vice-versa. The MFN are the \"real\" frame numbers. Furthermore</span>", 
"<span class=\"comment\"> * memory is not contiguous. Xen hypervisor stitches memory for guests</span>", 
"<span class=\"comment\"> * from different pools, which means there is no guarantee that PFN==MFN</span>", 
"<span class=\"comment\"> * and PFN+1==MFN+1. Lastly with Xen 4.0, pages (in debug mode) are</span>", 
"<span class=\"comment\"> * allocated in descending order (high to low), meaning the guest might</span>", 
"<span class=\"comment\"> * never get any MFN's under the 4GB mark.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dma\">dma</a>-<a class=\"id\" href=\"#mapping\">mapping</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#swiotlb\">swiotlb</a>-<a class=\"id\" href=\"#xen\">xen</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#xen\">xen</a>-<a class=\"id\" href=\"#ops\">ops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Used to do a quick range check in swiotlb_tbl_unmap_single and</span>", 
"<span class=\"comment\"> * swiotlb_tbl_sync_single_*, to see if the memory was in fact allocated by this</span>", 
"<span class=\"comment\"> * API.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static char *<a class=\"id\" href=\"#xen_io_tlb_start\">xen_io_tlb_start</a>, *<a class=\"id\" href=\"#xen_io_tlb_end\">xen_io_tlb_end</a>;", 
"static unsigned long <a class=\"id\" href=\"#xen_io_tlb_nslabs\">xen_io_tlb_nslabs</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Quick lookup value of the bus address of the IOTLB.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start_dma_addr\">start_dma_addr</a>;", 
"", 
"static <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#xen_phys_to_bus\">xen_phys_to_bus</a>(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#phys_to_machine\">phys_to_machine</a>(<a class=\"id\" href=\"#XPADDR\">XPADDR</a>(<a class=\"id\" href=\"#paddr\">paddr</a>)).<a class=\"id\" href=\"#maddr\">maddr</a>;;", 
"}", 
"", 
"static <a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#xen_bus_to_phys\">xen_bus_to_phys</a>(<a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#baddr\">baddr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#machine_to_phys\">machine_to_phys</a>(<a class=\"id\" href=\"#XMADDR\">XMADDR</a>(<a class=\"id\" href=\"#baddr\">baddr</a>)).<a class=\"id\" href=\"#paddr\">paddr</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#xen_virt_to_bus\">xen_virt_to_bus</a>(void *<a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xen_phys_to_bus\">xen_phys_to_bus</a>(<a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#address\">address</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#check_pages_physically_contiguous\">check_pages_physically_contiguous</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next_mfn\">next_mfn</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_mfn\">next_mfn</a> = <a class=\"id\" href=\"#pfn_to_mfn\">pfn_to_mfn</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = (<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#length\">length</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>-1) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn_to_mfn\">pfn_to_mfn</a>(++<a class=\"id\" href=\"#pfn\">pfn</a>) != ++<a class=\"id\" href=\"#next_mfn\">next_mfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#range_straddles_page_boundary\">range_straddles_page_boundary</a>(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#p\">p</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#check_pages_physically_contiguous\">check_pages_physically_contiguous</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#is_xen_swiotlb_buffer\">is_xen_swiotlb_buffer</a>(<a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma_addr\">dma_addr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mfn\">mfn</a> = <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#dma_addr\">dma_addr</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#mfn_to_local_pfn\">mfn_to_local_pfn</a>(<a class=\"id\" href=\"#mfn\">mfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the address is outside our domain, it CAN</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have the same virtual address as another address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in our domain. Therefore _only_ check address within our domain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#PFN_PHYS\">PFN_PHYS</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#paddr\">paddr</a> >= <a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#xen_io_tlb_start\">xen_io_tlb_start</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#paddr\">paddr</a> &lt; <a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#xen_io_tlb_end\">xen_io_tlb_end</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#max_dma_bits\">max_dma_bits</a> = 32;", 
"", 
"static int", 
"<a class=\"id\" href=\"#xen_swiotlb_fixup\">xen_swiotlb_fixup</a>(void *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#nslabs\">nslabs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dma_bits\">dma_bits</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_bits\">dma_bits</a> = <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#IO_TLB_SEGSIZE\">IO_TLB_SEGSIZE</a> << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>) + <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#slabs\">slabs</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#nslabs\">nslabs</a> - <a class=\"id\" href=\"#i\">i</a>, (unsigned long)<a class=\"id\" href=\"#IO_TLB_SEGSIZE\">IO_TLB_SEGSIZE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#xen_create_contiguous_region\">xen_create_contiguous_region</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#buf\">buf</a> + (<a class=\"id\" href=\"#i\">i</a> << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#slabs\">slabs</a> << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_bits\">dma_bits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#rc\">rc</a> && <a class=\"id\" href=\"#dma_bits\">dma_bits</a>++ &lt; <a class=\"id\" href=\"#max_dma_bits\">max_dma_bits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#slabs\">slabs</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nslabs\">nslabs</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#xen_swiotlb_init\">xen_swiotlb_init</a>(int <a class=\"id\" href=\"#verbose\">verbose</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_io_tlb_nslabs\">xen_io_tlb_nslabs</a> = (64 * 1024 * 1024 >> <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_io_tlb_nslabs\">xen_io_tlb_nslabs</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#xen_io_tlb_nslabs\">xen_io_tlb_nslabs</a>, <a class=\"id\" href=\"#IO_TLB_SEGSIZE\">IO_TLB_SEGSIZE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#xen_io_tlb_nslabs\">xen_io_tlb_nslabs</a> << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get IO TLB memory from any location.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_io_tlb_start\">xen_io_tlb_start</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#bytes\">bytes</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#xen_io_tlb_start\">xen_io_tlb_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Cannot allocate SWIOTLB buffer\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_io_tlb_end\">xen_io_tlb_end</a> = <a class=\"id\" href=\"#xen_io_tlb_start\">xen_io_tlb_start</a> + <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * And replace that memory with pages under 4GB.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#xen_swiotlb_fixup\">xen_swiotlb_fixup</a>(<a class=\"id\" href=\"#xen_io_tlb_start\">xen_io_tlb_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bytes\">bytes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#xen_io_tlb_nslabs\">xen_io_tlb_nslabs</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_dma_addr\">start_dma_addr</a> = <a class=\"id\" href=\"#xen_virt_to_bus\">xen_virt_to_bus</a>(<a class=\"id\" href=\"#xen_io_tlb_start\">xen_io_tlb_start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_init_with_tbl\">swiotlb_init_with_tbl</a>(<a class=\"id\" href=\"#xen_io_tlb_start\">xen_io_tlb_start</a>, <a class=\"id\" href=\"#xen_io_tlb_nslabs\">xen_io_tlb_nslabs</a>, <a class=\"id\" href=\"#verbose\">verbose</a>);", 
"", 
"<span class=\"ts\"/>return;", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"DMA(%d): Failed to exchange pages allocated for DMA with Xen! \"\\", 
"<span class=\"ts\"/>      \"We either don't have the permission or you do not have enough\"\\", 
"<span class=\"ts\"/>      \"free memory under 4GB!\\n\", <a class=\"id\" href=\"#rc\">rc</a>);", 
"}", 
"", 
"void *", 
"<a class=\"id\" href=\"#xen_swiotlb_alloc_coherent\">xen_swiotlb_alloc_coherent</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> *<a class=\"id\" href=\"#dma_handle\">dma_handle</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dma_mask\">dma_mask</a> = <a class=\"id\" href=\"#DMA_BIT_MASK\">DMA_BIT_MASK</a>(32);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vstart\">vstart</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/>* Ignore region specifiers - the kernel's ideas of</span>", 
"<span class=\"comment\"><span class=\"ts\"/>* pseudo-phys memory layout has nothing to do with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/>* machine physical layout.  We can't allocate highmem</span>", 
"<span class=\"comment\"><span class=\"ts\"/>* because we can't return a pointer to it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= ~(<a class=\"id\" href=\"#__GFP_DMA\">__GFP_DMA</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_alloc_from_coherent\">dma_alloc_from_coherent</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dma_handle\">dma_handle</a>, &amp;<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vstart\">vstart</a> = <a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (void *)<a class=\"id\" href=\"#vstart\">vstart</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwdev\">hwdev</a> && <a class=\"id\" href=\"#hwdev\">hwdev</a>-><a class=\"id\" href=\"#coherent_dma_mask\">coherent_dma_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_mask\">dma_mask</a> = <a class=\"id\" href=\"#dma_alloc_coherent_mask\">dma_alloc_coherent_mask</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#xen_create_contiguous_region\">xen_create_contiguous_region</a>(<a class=\"id\" href=\"#vstart\">vstart</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#fls64\">fls64</a>(<a class=\"id\" href=\"#dma_mask\">dma_mask</a>)) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>(<a class=\"id\" href=\"#vstart\">vstart</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ret\">ret</a>, 0, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dma_handle\">dma_handle</a> = <a class=\"id\" href=\"#virt_to_machine\">virt_to_machine</a>(<a class=\"id\" href=\"#ret\">ret</a>).<a class=\"id\" href=\"#maddr\">maddr</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_swiotlb_alloc_coherent\">xen_swiotlb_alloc_coherent</a>);", 
"", 
"void", 
"<a class=\"id\" href=\"#xen_swiotlb_free_coherent\">xen_swiotlb_free_coherent</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, void *<a class=\"id\" href=\"#vaddr\">vaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_release_from_coherent\">dma_release_from_coherent</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#vaddr\">vaddr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_destroy_contiguous_region\">xen_destroy_contiguous_region</a>((unsigned long)<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_swiotlb_free_coherent\">xen_swiotlb_free_coherent</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Map a single buffer of the indicated size for DMA in streaming mode.  The</span>", 
"<span class=\"comment\"> * physical address to use is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Once the device is given the dma address, the device owns this memory until</span>", 
"<span class=\"comment\"> * either xen_swiotlb_unmap_page or xen_swiotlb_dma_sync_single is performed.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#xen_swiotlb_map_page\">xen_swiotlb_map_page</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#phys\">phys</a> = <a class=\"id\" href=\"#page_to_phys\">page_to_phys</a>(<a class=\"id\" href=\"#page\">page</a>) + <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a> = <a class=\"id\" href=\"#xen_phys_to_bus\">xen_phys_to_bus</a>(<a class=\"id\" href=\"#phys\">phys</a>);", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#map\">map</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the address happens to be in the device's DMA window,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we can safely return the device addr and not worry about bounce</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buffering it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_capable\">dma_capable</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#size\">size</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#range_straddles_page_boundary\">range_straddles_page_boundary</a>(<a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#size\">size</a>) && !<a class=\"id\" href=\"#swiotlb_force\">swiotlb_force</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev_addr\">dev_addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Oh well, have to allocate and map a bounce buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#swiotlb_tbl_map_single\">swiotlb_tbl_map_single</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#start_dma_addr\">start_dma_addr</a>, <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#map\">map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DMA_ERROR_CODE\">DMA_ERROR_CODE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_addr\">dev_addr</a> = <a class=\"id\" href=\"#xen_virt_to_bus\">xen_virt_to_bus</a>(<a class=\"id\" href=\"#map\">map</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ensure that the address returned is DMA'ble</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_capable\">dma_capable</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"map_single: bounce buffer is not DMA'ble\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev_addr\">dev_addr</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_swiotlb_map_page\">xen_swiotlb_map_page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unmap a single streaming mode DMA translation.  The dma_addr and size must</span>", 
"<span class=\"comment\"> * match what was provided for in a previous xen_swiotlb_map_page call.  All</span>", 
"<span class=\"comment\"> * other usages are undefined.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After this call, reads by the cpu to the buffer are guaranteed to see</span>", 
"<span class=\"comment\"> * whatever the device wrote there.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#xen_unmap_single\">xen_unmap_single</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#xen_bus_to_phys\">xen_bus_to_phys</a>(<a class=\"id\" href=\"#dev_addr\">dev_addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NOTE: We use dev_addr here, not paddr! */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_xen_swiotlb_buffer\">is_xen_swiotlb_buffer</a>(<a class=\"id\" href=\"#dev_addr\">dev_addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_tbl_unmap_single\">swiotlb_tbl_unmap_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#paddr\">paddr</a>), <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a> != <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * phys_to_virt doesn't work with hihgmem page but we could</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * call dma_mark_clean() with hihgmem page here. However, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are fine since dma_mark_clean() is null on POWERPC. We can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make dma_mark_clean() take a physical address if necessary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_mark_clean\">dma_mark_clean</a>(<a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#paddr\">paddr</a>), <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_swiotlb_unmap_page\">xen_swiotlb_unmap_page</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_unmap_single\">xen_unmap_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_swiotlb_unmap_page\">xen_swiotlb_unmap_page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Make physical memory consistent for a single streaming mode DMA translation</span>", 
"<span class=\"comment\"> * after a transfer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If you perform a xen_swiotlb_map_page() but wish to interrogate the buffer</span>", 
"<span class=\"comment\"> * using the cpu, yet do not wish to teardown the dma mapping, you must</span>", 
"<span class=\"comment\"> * call this function before doing so.  At the next point you give the dma</span>", 
"<span class=\"comment\"> * address back to the card, you must first perform a</span>", 
"<span class=\"comment\"> * xen_swiotlb_dma_sync_for_device, and then the device again owns the buffer</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#xen_swiotlb_sync_single\">xen_swiotlb_sync_single</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_sync_target\">dma_sync_target</a> <a class=\"id\" href=\"#target\">target</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#xen_bus_to_phys\">xen_bus_to_phys</a>(<a class=\"id\" href=\"#dev_addr\">dev_addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NOTE: We use dev_addr here, not paddr! */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_xen_swiotlb_buffer\">is_xen_swiotlb_buffer</a>(<a class=\"id\" href=\"#dev_addr\">dev_addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_tbl_sync_single\">swiotlb_tbl_sync_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#paddr\">paddr</a>), <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#target\">target</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a> != <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_mark_clean\">dma_mark_clean</a>(<a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#paddr\">paddr</a>), <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#xen_swiotlb_sync_single_for_cpu\">xen_swiotlb_sync_single_for_cpu</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_swiotlb_sync_single\">xen_swiotlb_sync_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#SYNC_FOR_CPU\">SYNC_FOR_CPU</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_swiotlb_sync_single_for_cpu\">xen_swiotlb_sync_single_for_cpu</a>);", 
"", 
"void", 
"<a class=\"id\" href=\"#xen_swiotlb_sync_single_for_device\">xen_swiotlb_sync_single_for_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_swiotlb_sync_single\">xen_swiotlb_sync_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#SYNC_FOR_DEVICE\">SYNC_FOR_DEVICE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_swiotlb_sync_single_for_device\">xen_swiotlb_sync_single_for_device</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Map a set of buffers described by scatterlist in streaming mode for DMA.</span>", 
"<span class=\"comment\"> * This is the scatter-gather version of the above xen_swiotlb_map_page</span>", 
"<span class=\"comment\"> * interface.  Here the scatter gather list elements are each tagged with the</span>", 
"<span class=\"comment\"> * appropriate dma address and length.  They are obtained via</span>", 
"<span class=\"comment\"> * sg_dma_{address,length}(SG).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: An implementation may be able to use a smaller number of</span>", 
"<span class=\"comment\"> *       DMA address/length pairs than there are SG table elements.</span>", 
"<span class=\"comment\"> *       (for example via virtual mapping capabilities)</span>", 
"<span class=\"comment\"> *       The routine returns the number of addr/length pairs actually</span>", 
"<span class=\"comment\"> *       used, at most nents.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Device ownership issues as mentioned above for xen_swiotlb_map_page are the</span>", 
"<span class=\"comment\"> * same here.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#xen_swiotlb_map_sg_attrs\">xen_swiotlb_map_sg_attrs</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#nelems\">nelems</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#sg_phys\">sg_phys</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a> = <a class=\"id\" href=\"#xen_phys_to_bus\">xen_phys_to_bus</a>(<a class=\"id\" href=\"#paddr\">paddr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#swiotlb_force\">swiotlb_force</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#dma_capable\">dma_capable</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#range_straddles_page_boundary\">range_straddles_page_boundary</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#swiotlb_tbl_map_single\">swiotlb_tbl_map_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#start_dma_addr\">start_dma_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sg_phys\">sg_phys</a>(<a class=\"id\" href=\"#sg\">sg</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#map\">map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't panic here, we expect map_sg users</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   to do proper error handling. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_swiotlb_unmap_sg_attrs\">xen_swiotlb_unmap_sg_attrs</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#attrs\">attrs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgl\">sgl</a>[0].<a class=\"id\" href=\"#dma_length\">dma_length</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DMA_ERROR_CODE\">DMA_ERROR_CODE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a> = <a class=\"id\" href=\"#xen_virt_to_bus\">xen_virt_to_bus</a>(<a class=\"id\" href=\"#map\">map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a> = <a class=\"id\" href=\"#dev_addr\">dev_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a> = <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nelems\">nelems</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_swiotlb_map_sg_attrs\">xen_swiotlb_map_sg_attrs</a>);", 
"", 
"int", 
"<a class=\"id\" href=\"#xen_swiotlb_map_sg\">xen_swiotlb_map_sg</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, int <a class=\"id\" href=\"#nelems\">nelems</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xen_swiotlb_map_sg_attrs\">xen_swiotlb_map_sg_attrs</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_swiotlb_map_sg\">xen_swiotlb_map_sg</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unmap a set of streaming mode DMA translations.  Again, cpu read rules</span>", 
"<span class=\"comment\"> * concerning calls here are the same as for swiotlb_unmap_page() above.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#xen_swiotlb_unmap_sg_attrs\">xen_swiotlb_unmap_sg_attrs</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#nelems\">nelems</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_unmap_single\">xen_unmap_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a>, <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_swiotlb_unmap_sg_attrs\">xen_swiotlb_unmap_sg_attrs</a>);", 
"", 
"void", 
"<a class=\"id\" href=\"#xen_swiotlb_unmap_sg\">xen_swiotlb_unmap_sg</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, int <a class=\"id\" href=\"#nelems\">nelems</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xen_swiotlb_unmap_sg_attrs\">xen_swiotlb_unmap_sg_attrs</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_swiotlb_unmap_sg\">xen_swiotlb_unmap_sg</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Make physical memory consistent for a set of streaming mode DMA translations</span>", 
"<span class=\"comment\"> * after a transfer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The same as swiotlb_sync_single_* but for a scatter-gather list, same rules</span>", 
"<span class=\"comment\"> * and usage.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#xen_swiotlb_sync_sg\">xen_swiotlb_sync_sg</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#nelems\">nelems</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    enum <a class=\"id\" href=\"#dma_sync_target\">dma_sync_target</a> <a class=\"id\" href=\"#target\">target</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_swiotlb_sync_single\">xen_swiotlb_sync_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#target\">target</a>);", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#xen_swiotlb_sync_sg_for_cpu\">xen_swiotlb_sync_sg_for_cpu</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#nelems\">nelems</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_swiotlb_sync_sg\">xen_swiotlb_sync_sg</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#SYNC_FOR_CPU\">SYNC_FOR_CPU</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_swiotlb_sync_sg_for_cpu\">xen_swiotlb_sync_sg_for_cpu</a>);", 
"", 
"void", 
"<a class=\"id\" href=\"#xen_swiotlb_sync_sg_for_device\">xen_swiotlb_sync_sg_for_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#nelems\">nelems</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_swiotlb_sync_sg\">xen_swiotlb_sync_sg</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#SYNC_FOR_DEVICE\">SYNC_FOR_DEVICE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_swiotlb_sync_sg_for_device\">xen_swiotlb_sync_sg_for_device</a>);", 
"", 
"int", 
"<a class=\"id\" href=\"#xen_swiotlb_dma_mapping_error\">xen_swiotlb_dma_mapping_error</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma_addr\">dma_addr</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#dma_addr\">dma_addr</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_swiotlb_dma_mapping_error\">xen_swiotlb_dma_mapping_error</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return whether the given device DMA address mask can be supported</span>", 
"<span class=\"comment\"> * properly.  For example, if your device can only drive the low 24-bits</span>", 
"<span class=\"comment\"> * during bus mastering, then you would pass 0x00ffffff as the mask to</span>", 
"<span class=\"comment\"> * this function.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#xen_swiotlb_dma_supported\">xen_swiotlb_dma_supported</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xen_virt_to_bus\">xen_virt_to_bus</a>(<a class=\"id\" href=\"#xen_io_tlb_end\">xen_io_tlb_end</a> - 1) <= <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_swiotlb_dma_supported\">xen_swiotlb_dma_supported</a>);", 
];
xr_frag_insert('l/96/58e1352009706f77b53ee91204afce8b51fe15.xr', __xr_tmp);
