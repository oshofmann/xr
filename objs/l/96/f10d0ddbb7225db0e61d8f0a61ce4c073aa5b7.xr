var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#update_ts_time_stats\">update_ts_time_stats</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#ktime_get\">ktime_get</a>(), <a class=\"id\" href=\"#last_update_time\">last_update_time</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ktime_to_us\">ktime_to_us</a>(<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#iowait_sleeptime\">iowait_sleeptime</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#get_cpu_iowait_time_us\">get_cpu_iowait_time_us</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tick_nohz_stop_sched_tick - stop the idle tick from the idle task</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When the next event is more than a tick into the future, stop the idle tick</span>", 
"<span class=\"comment\"> * Called either from the idle loop or from irq_exit() when an idle period was</span>", 
"<span class=\"comment\"> * just interrupted by an interrupt which did not cause a reschedule.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tick_nohz_stop_sched_tick\">tick_nohz_stop_sched_tick</a>(int <a class=\"id\" href=\"#inidle\">inidle</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#last_jiffies\">last_jiffies</a>, <a class=\"id\" href=\"#next_jiffies\">next_jiffies</a>, <a class=\"id\" href=\"#delta_jiffies\">delta_jiffies</a>, <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#last_update\">last_update</a>, <a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#tick_cpu_device\">tick_cpu_device</a>).<a class=\"id\" href=\"#evtdev\">evtdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#time_delta\">time_delta</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_sched\">tick_cpu_sched</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Call to tick_nohz_start_idle stops the last_update_time from being</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * updated. Thus, it must not be called in the event we are called from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * irq_exit() with the prior state different than idle.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inidle\">inidle</a> && !<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#inidle\">inidle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set ts-&gt;inidle unconditionally. Even if the system did not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * switch to NOHZ mode the cpu frequency governers rely on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * update of the idle time accounting in tick_nohz_start_idle().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#inidle\">inidle</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#tick_nohz_start_idle\">tick_nohz_start_idle</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ts\">ts</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this cpu is offline and it is the one which updates</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * jiffies, then give up the assignment and let it be taken by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the cpu which runs the tick timer next. If we don't drop</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this here the jiffies might be stale and do_timer() never</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invoked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a> = <a class=\"id\" href=\"#TICK_DO_TIMER_NONE\">TICK_DO_TIMER_NONE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#nohz_mode\">nohz_mode</a> == <a class=\"id\" href=\"#NOHZ_MODE_INACTIVE\">NOHZ_MODE_INACTIVE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_resched\">need_resched</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#local_softirq_pending\">local_softirq_pending</a>() && <a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>static int <a class=\"id\" href=\"#ratelimit\">ratelimit</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ratelimit\">ratelimit</a> &lt; 10) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"NOHZ: local_softirq_pending %02x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned int) <a class=\"id\" href=\"#local_softirq_pending\">local_softirq_pending</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ratelimit\">ratelimit</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_calls\">idle_calls</a>++;", 
"<span class=\"ts\"/><span class=\"comment\">/* Read jiffies and the time when jiffies were updated last */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#read_seqbegin\">read_seqbegin</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_update\">last_update</a> = <a class=\"id\" href=\"#last_jiffies_update\">last_jiffies_update</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_jiffies\">last_jiffies</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time_delta\">time_delta</a> = <a class=\"id\" href=\"#timekeeping_max_deferment\">timekeeping_max_deferment</a>();", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#read_seqretry\">read_seqretry</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>, <a class=\"id\" href=\"#seq\">seq</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_needs_cpu\">rcu_needs_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) || <a class=\"id\" href=\"#printk_needs_cpu\">printk_needs_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#arch_needs_cpu\">arch_needs_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_jiffies\">next_jiffies</a> = <a class=\"id\" href=\"#last_jiffies\">last_jiffies</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta_jiffies\">delta_jiffies</a> = 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get the next timer wheel timer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_jiffies\">next_jiffies</a> = <a class=\"id\" href=\"#get_next_timer_interrupt\">get_next_timer_interrupt</a>(<a class=\"id\" href=\"#last_jiffies\">last_jiffies</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta_jiffies\">delta_jiffies</a> = <a class=\"id\" href=\"#next_jiffies\">next_jiffies</a> - <a class=\"id\" href=\"#last_jiffies\">last_jiffies</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do not stop the tick, if we are only one off</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or if the cpu is required for rcu</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#tick_stopped\">tick_stopped</a> && <a class=\"id\" href=\"#delta_jiffies\">delta_jiffies</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Schedule the tick, if we are at least one jiffie off */</span>", 
"<span class=\"ts\"/>if ((long)<a class=\"id\" href=\"#delta_jiffies\">delta_jiffies</a> >= 1) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this cpu is the one which updates jiffies, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * give up the assignment and let it be taken by the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cpu which runs the tick timer next, which might be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this cpu as well. If we don't drop this here the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * jiffies might be stale and do_timer() never</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * invoked. Keep track of the fact that it was the one</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * which had the do_timer() duty last. If this cpu is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the one which had the do_timer() duty last, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * limit the sleep time to the timekeeping</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * max_deferement value which we retrieved</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * above. Otherwise we can sleep as long as we want.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a> = <a class=\"id\" href=\"#TICK_DO_TIMER_NONE\">TICK_DO_TIMER_NONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#do_timer_last\">do_timer_last</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a> != <a class=\"id\" href=\"#TICK_DO_TIMER_NONE\">TICK_DO_TIMER_NONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time_delta\">time_delta</a> = <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#do_timer_last\">do_timer_last</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#do_timer_last\">do_timer_last</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time_delta\">time_delta</a> = <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * calculate the expiry time for the next timer wheel</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * timer. delta_jiffies &gt;= NEXT_TIMER_MAX_DELTA signals</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that there is no timer pending or at least extremely</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * far into the future (12 days for HZ=1000). In this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * case we set the expiry to the end of time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#delta_jiffies\">delta_jiffies</a> &lt; <a class=\"id\" href=\"#NEXT_TIMER_MAX_DELTA\">NEXT_TIMER_MAX_DELTA</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Calculate the time delta for the next timer event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If the time delta exceeds the maximum time delta</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * permitted by the current clocksource then adjust</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the time delta accordingly to ensure the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * clocksource does not wrap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time_delta\">time_delta</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#u64\">u64</a>, <a class=\"id\" href=\"#time_delta\">time_delta</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#tick_period\">tick_period</a>.<a class=\"id\" href=\"#tv64\">tv64</a> * <a class=\"id\" href=\"#delta_jiffies\">delta_jiffies</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_delta\">time_delta</a> &lt; <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#ktime_add_ns\">ktime_add_ns</a>(<a class=\"id\" href=\"#last_update\">last_update</a>, <a class=\"id\" href=\"#time_delta\">time_delta</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta_jiffies\">delta_jiffies</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#nohz_cpu_mask\">nohz_cpu_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip reprogram of event if its not changed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#tick_stopped\">tick_stopped</a> && <a class=\"id\" href=\"#ktime_equal\">ktime_equal</a>(<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#next_event\">next_event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * nohz_stop_sched_tick can be called several times before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the nohz_restart_sched_tick is called. This happens when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * interrupts arrive which do not cause a reschedule. In the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * first call we save the current tick time, so we can restart</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the scheduler tick in nohz_restart_sched_tick.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#tick_stopped\">tick_stopped</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#select_nohz_load_balancer\">select_nohz_load_balancer</a>(1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_tick\">idle_tick</a> = <a class=\"id\" href=\"#hrtimer_get_expires\">hrtimer_get_expires</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#tick_stopped\">tick_stopped</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_jiffies\">idle_jiffies</a> = <a class=\"id\" href=\"#last_jiffies\">last_jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_enter_nohz\">rcu_enter_nohz</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_sleeps\">idle_sleeps</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Mark expires */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_expires\">idle_expires</a> = <a class=\"id\" href=\"#expires\">expires</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the expiration time == KTIME_MAX, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in this case we simply stop the tick timer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/> if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#expires\">expires</a>.<a class=\"id\" href=\"#tv64\">tv64</a> == <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#nohz_mode\">nohz_mode</a> == <a class=\"id\" href=\"#NOHZ_MODE_HIGHRES\">NOHZ_MODE_HIGHRES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_cancel\">hrtimer_cancel</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#nohz_mode\">nohz_mode</a> == <a class=\"id\" href=\"#NOHZ_MODE_HIGHRES\">NOHZ_MODE_HIGHRES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_start\">hrtimer_start</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>, <a class=\"id\" href=\"#expires\">expires</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#HRTIMER_MODE_ABS_PINNED\">HRTIMER_MODE_ABS_PINNED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check, if the timer was already in the past */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hrtimer_active\">hrtimer_active</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#tick_program_event\">tick_program_event</a>(<a class=\"id\" href=\"#expires\">expires</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are past the event already. So we crossed a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * jiffie boundary. Update jiffies and raise the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * softirq.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_do_update_jiffies64\">tick_do_update_jiffies64</a>(<a class=\"id\" href=\"#ktime_get\">ktime_get</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#nohz_cpu_mask\">nohz_cpu_mask</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raise_softirq_irqoff\">raise_softirq_irqoff</a>(<a class=\"id\" href=\"#TIMER_SOFTIRQ\">TIMER_SOFTIRQ</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#next_jiffies\">next_jiffies</a> = <a class=\"id\" href=\"#next_jiffies\">next_jiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#last_jiffies\">last_jiffies</a> = <a class=\"id\" href=\"#last_jiffies\">last_jiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sleep_length\">sleep_length</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#next_event\">next_event</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"<a class=\"id\" href=\"#end\">end</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tick_nohz_get_sleep_length - return the length of the current sleep</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called from power state control code with interrupts disabled</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#tick_nohz_get_sleep_length\">tick_nohz_get_sleep_length</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#tick_cpu_sched\">tick_cpu_sched</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sleep_length\">sleep_length</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tick_nohz_restart\">tick_nohz_restart</a>(struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_cancel\">hrtimer_cancel</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_set_expires\">hrtimer_set_expires</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>, <a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_tick\">idle_tick</a>);", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Forward the time to expire in the future */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_forward\">hrtimer_forward</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>, <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#tick_period\">tick_period</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#nohz_mode\">nohz_mode</a> == <a class=\"id\" href=\"#NOHZ_MODE_HIGHRES\">NOHZ_MODE_HIGHRES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_start_expires\">hrtimer_start_expires</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#HRTIMER_MODE_ABS_PINNED\">HRTIMER_MODE_ABS_PINNED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check, if the timer was already in the past */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hrtimer_active\">hrtimer_active</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tick_program_event\">tick_program_event</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_get_expires\">hrtimer_get_expires</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>), 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update jiffies and reread time */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_do_update_jiffies64\">tick_do_update_jiffies64</a>(<a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tick_nohz_restart_sched_tick - restart the idle tick from the idle task</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Restart the idle tick when the CPU is woken up from idle</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tick_nohz_restart_sched_tick\">tick_nohz_restart_sched_tick</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_sched\">tick_cpu_sched</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_VIRT_CPU_ACCOUNTING\">CONFIG_VIRT_CPU_ACCOUNTING</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ticks\">ticks</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_active\">idle_active</a> || (<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#inidle\">inidle</a> && <a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#tick_stopped\">tick_stopped</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_active\">idle_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_nohz_stop_idle\">tick_nohz_stop_idle</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#inidle\">inidle</a> || !<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#tick_stopped\">tick_stopped</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#inidle\">inidle</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#inidle\">inidle</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_exit_nohz\">rcu_exit_nohz</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update jiffies first */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#select_nohz_load_balancer\">select_nohz_load_balancer</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_do_update_jiffies64\">tick_do_update_jiffies64</a>(<a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#nohz_cpu_mask\">nohz_cpu_mask</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_VIRT_CPU_ACCOUNTING\">CONFIG_VIRT_CPU_ACCOUNTING</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We stopped the tick in idle. Update process times would miss the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time we slept as update_process_times does only a 1 tick</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * accounting. Enforce that this is accounted to idle !</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ticks\">ticks</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_jiffies\">idle_jiffies</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We might be one off. Do not randomly account a huge number of ticks!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ticks\">ticks</a> && <a class=\"id\" href=\"#ticks\">ticks</a> &lt; <a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#account_idle_ticks\">account_idle_ticks</a>(<a class=\"id\" href=\"#ticks\">ticks</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#touch_softlockup_watchdog\">touch_softlockup_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Cancel the scheduled timer and restore the tick</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#tick_stopped\">tick_stopped</a>  = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_exittime\">idle_exittime</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_nohz_restart\">tick_nohz_restart</a>(<a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#tick_nohz_reprogram\">tick_nohz_reprogram</a>(struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_forward\">hrtimer_forward</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>, <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#tick_period\">tick_period</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tick_program_event\">tick_program_event</a>(<a class=\"id\" href=\"#hrtimer_get_expires\">hrtimer_get_expires</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>), 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The nohz low res interrupt handler</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_nohz_handler\">tick_nohz_handler</a>(struct <a class=\"id\" href=\"#clock_event_device\">clock_event_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#tick_cpu_sched\">tick_cpu_sched</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#get_irq_regs\">get_irq_regs</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#next_event\">next_event</a>.<a class=\"id\" href=\"#tv64\">tv64</a> = <a class=\"id\" href=\"#KTIME_MAX\">KTIME_MAX</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if the do_timer duty was dropped. We don't care about</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * concurrency: This happens only when the cpu in charge went</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * into a long sleep. If two cpus happen to assign themself to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this duty, then the jiffies update is still serialized by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * xtime_lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a> == <a class=\"id\" href=\"#TICK_DO_TIMER_NONE\">TICK_DO_TIMER_NONE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check, if the jiffies need an update */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a> == <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_do_update_jiffies64\">tick_do_update_jiffies64</a>(<a class=\"id\" href=\"#now\">now</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When we are idle and the tick is stopped, we have to touch</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the watchdog as we might not schedule for a really long</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time. This happens on complete idle SMP systems while</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * waiting on the login prompt. We also increment the \"start</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of idle\" jiffy stamp so the idle accounting adjustment we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do when we go busy again does not account too much ticks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#tick_stopped\">tick_stopped</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_softlockup_watchdog\">touch_softlockup_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_jiffies\">idle_jiffies</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_process_times\">update_process_times</a>(<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#profile_tick\">profile_tick</a>(<a class=\"id\" href=\"#CPU_PROFILING\">CPU_PROFILING</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#tick_nohz_reprogram\">tick_nohz_reprogram</a>(<a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#now\">now</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_do_update_jiffies64\">tick_do_update_jiffies64</a>(<a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tick_nohz_switch_to_nohz - switch to nohz mode</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_nohz_switch_to_nohz\">tick_nohz_switch_to_nohz</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#tick_cpu_sched\">tick_cpu_sched</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tick_nohz_enabled\">tick_nohz_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tick_switch_to_oneshot\">tick_switch_to_oneshot</a>(<a class=\"id\" href=\"#tick_nohz_handler\">tick_nohz_handler</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#nohz_mode\">nohz_mode</a> = <a class=\"id\" href=\"#NOHZ_MODE_LOWRES\">NOHZ_MODE_LOWRES</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Recycle the hrtimer in ts, so we can share the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hrtimer_forward with the highres code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_init\">hrtimer_init</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>, <a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a>, <a class=\"id\" href=\"#HRTIMER_MODE_ABS\">HRTIMER_MODE_ABS</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the next period */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#tick_init_jiffy_update\">tick_init_jiffy_update</a>();", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_set_expires\">hrtimer_set_expires</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tick_program_event\">tick_program_event</a>(<a class=\"id\" href=\"#next\">next</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#ktime_add\">ktime_add</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#tick_period\">tick_period</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Switched to NOHz mode on CPU #%d\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When NOHZ is enabled and the tick is stopped, we need to kick the</span>", 
"<span class=\"comment\"> * tick timer from irq_enter() so that the jiffies update is kept</span>", 
"<span class=\"comment\"> * alive during long running softirqs. That's ugly as hell, but</span>", 
"<span class=\"comment\"> * correctness is key even if we need to fix the offending softirq in</span>", 
"<span class=\"comment\"> * the first place.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, this is different to tick_nohz_restart. We just kick the</span>", 
"<span class=\"comment\"> * timer and do not touch the other magic bits which need to be done</span>", 
"<span class=\"comment\"> * when idle is left.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#tick_nohz_kick_tick\">tick_nohz_kick_tick</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a>)", 
"{", 
"#if 0", 
"<span class=\"ts\"/><span class=\"comment\">/* Switch back to 2.6.27 behaviour */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_sched\">tick_cpu_sched</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do not touch the tick device, when the next expiry is either</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already reached or less/equal than the tick period.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> =<span class=\"ts\"/><a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#hrtimer_get_expires\">hrtimer_get_expires</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>), <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a>.<a class=\"id\" href=\"#tv64\">tv64</a> <= <a class=\"id\" href=\"#tick_period\">tick_period</a>.<a class=\"id\" href=\"#tv64\">tv64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_nohz_restart\">tick_nohz_restart</a>(<a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tick_check_nohz\">tick_check_nohz</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#tick_cpu_sched\">tick_cpu_sched</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_active\">idle_active</a> && !<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#tick_stopped\">tick_stopped</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_active\">idle_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_nohz_stop_idle\">tick_nohz_stop_idle</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#tick_stopped\">tick_stopped</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_nohz_update_jiffies\">tick_nohz_update_jiffies</a>(<a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_nohz_kick_tick\">tick_nohz_kick_tick</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tick_nohz_switch_to_nohz\">tick_nohz_switch_to_nohz</a>(void) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tick_check_nohz\">tick_check_nohz</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>) { }", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* NO_HZ */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from irq_enter to notify about the possible interruption of idle()</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tick_check_idle\">tick_check_idle</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_check_oneshot_broadcast\">tick_check_oneshot_broadcast</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_check_nohz\">tick_check_nohz</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * High resolution timer specific code</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGH_RES_TIMERS\">CONFIG_HIGH_RES_TIMERS</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We rearm the timer until we get disabled by the idle code.</span>", 
"<span class=\"comment\"> * Called with interrupts disabled and timer-&gt;base-&gt;cpu_base-&gt;lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static enum <a class=\"id\" href=\"#hrtimer_restart\">hrtimer_restart</a> <a class=\"id\" href=\"#tick_sched_timer\">tick_sched_timer</a>(struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> *<a class=\"id\" href=\"#timer\">timer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#timer\">timer</a>, struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a>, <a class=\"id\" href=\"#sched_timer\">sched_timer</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#get_irq_regs\">get_irq_regs</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if the do_timer duty was dropped. We don't care about</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * concurrency: This happens only when the cpu in charge went</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * into a long sleep. If two cpus happen to assign themself to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this duty, then the jiffies update is still serialized by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * xtime_lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a> == <a class=\"id\" href=\"#TICK_DO_TIMER_NONE\">TICK_DO_TIMER_NONE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check, if the jiffies need an update */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tick_do_timer_cpu\">tick_do_timer_cpu</a> == <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tick_do_update_jiffies64\">tick_do_update_jiffies64</a>(<a class=\"id\" href=\"#now\">now</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do not call, when we are not in irq context and have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no valid regs pointer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When we are idle and the tick is stopped, we have to touch</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the watchdog as we might not schedule for a really long</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * time. This happens on complete idle SMP systems while</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * waiting on the login prompt. We also increment the \"start of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * idle\" jiffy stamp so the idle accounting adjustment we do</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when we go busy again does not account too much ticks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#tick_stopped\">tick_stopped</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_softlockup_watchdog\">touch_softlockup_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#idle_jiffies\">idle_jiffies</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_process_times\">update_process_times</a>(<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#profile_tick\">profile_tick</a>(<a class=\"id\" href=\"#CPU_PROFILING\">CPU_PROFILING</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_forward\">hrtimer_forward</a>(<a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#tick_period\">tick_period</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#HRTIMER_RESTART\">HRTIMER_RESTART</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tick_setup_sched_timer - setup the tick emulation timer</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tick_setup_sched_timer\">tick_setup_sched_timer</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tick_sched\">tick_sched</a> *<a class=\"id\" href=\"#ts\">ts</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#tick_cpu_sched\">tick_cpu_sched</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Emulate tick processing via per-CPU hrtimers:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_init\">hrtimer_init</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>, <a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a>, <a class=\"id\" href=\"#HRTIMER_MODE_ABS\">HRTIMER_MODE_ABS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#sched_timer\">sched_timer</a>.<a class=\"id\" href=\"#function\">function</a> = <a class=\"id\" href=\"#tick_sched_timer\">tick_sched_timer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the next period (per cpu) */</span>", 
];
xr_frag_insert('l/96/f10d0ddbb7225db0e61d8f0a61ce4c073aa5b7.xr', __xr_tmp);
