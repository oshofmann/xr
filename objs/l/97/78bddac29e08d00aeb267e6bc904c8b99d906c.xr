var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgalloc\">pgalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlb\">tlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#fixmap\">fixmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PGALLOC_GFP\">PGALLOC_GFP</a> <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_NOTRACK\">__GFP_NOTRACK</a> | <a class=\"id\" href=\"#__GFP_REPEAT\">__GFP_REPEAT</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHPTE\">CONFIG_HIGHPTE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PGALLOC_USER_GFP\">PGALLOC_USER_GFP</a> <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PGALLOC_USER_GFP\">PGALLOC_USER_GFP</a> 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#__userpte_alloc_gfp\">__userpte_alloc_gfp</a> = <a class=\"id\" href=\"#PGALLOC_GFP\">PGALLOC_GFP</a> | <a class=\"id\" href=\"#PGALLOC_USER_GFP\">PGALLOC_USER_GFP</a>;", 
"", 
"<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte_alloc_one_kernel\">pte_alloc_one_kernel</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#pte_t\">pte_t</a> *)<a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#PGALLOC_GFP\">PGALLOC_GFP</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#pgtable_t\">pgtable_t</a> <a class=\"id\" href=\"#pte_alloc_one\">pte_alloc_one</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#__userpte_alloc_gfp\">__userpte_alloc_gfp</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pte\">pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgtable_page_ctor\">pgtable_page_ctor</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pte\">pte</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_userpte\">setup_userpte</a>(char *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#arg\">arg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \"userpte=nohigh\" disables allocation of user pagetables in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * high memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#arg\">arg</a>, \"nohigh\") == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__userpte_alloc_gfp\">__userpte_alloc_gfp</a> &= ~<a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"userpte\", <a class=\"id\" href=\"#setup_userpte\">setup_userpte</a>);", 
"", 
"void <a class=\"id\" href=\"#___pte_free_tlb\">___pte_free_tlb</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgtable_page_dtor\">pgtable_page_dtor</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#paravirt_release_pte\">paravirt_release_pte</a>(<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#pte\">pte</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tlb_remove_page\">tlb_remove_page</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"}", 
"", 
"#if <a class=\"id\" href=\"#PAGETABLE_LEVELS\">PAGETABLE_LEVELS</a> &gt; 2", 
"void <a class=\"id\" href=\"#___pmd_free_tlb\">___pmd_free_tlb</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#paravirt_release_pmd\">paravirt_release_pmd</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#pmd\">pmd</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tlb_remove_page\">tlb_remove_page</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#pmd\">pmd</a>));", 
"}", 
"", 
"#if <a class=\"id\" href=\"#PAGETABLE_LEVELS\">PAGETABLE_LEVELS</a> &gt; 3", 
"void <a class=\"id\" href=\"#___pud_free_tlb\">___pud_free_tlb</a>(struct <a class=\"id\" href=\"#mmu_gather\">mmu_gather</a> *<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#paravirt_release_pud\">paravirt_release_pud</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#pud\">pud</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tlb_remove_page\">tlb_remove_page</a>(<a class=\"id\" href=\"#tlb\">tlb</a>, <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#pud\">pud</a>));", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* PAGETABLE_LEVELS &gt; 3 */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* PAGETABLE_LEVELS &gt; 2 */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pgd_list_add\">pgd_list_add</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#pgd_list\">pgd_list</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pgd_list_del\">pgd_list_del</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UNSHARED_PTRS_PER_PGD\">UNSHARED_PTRS_PER_PGD</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#SHARED_KERNEL_PMD\">SHARED_KERNEL_PMD</a> ? <a class=\"id\" href=\"#KERNEL_PGD_BOUNDARY\">KERNEL_PGD_BOUNDARY</a> : <a class=\"id\" href=\"#PTRS_PER_PGD\">PTRS_PER_PGD</a>)", 
"", 
"static void <a class=\"id\" href=\"#pgd_ctor\">pgd_ctor</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* If the pgd points to a shared pagetable level (either the</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   ptes in non-PAE, or shared PMD in PAE), then just copy the</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   references from swapper_pg_dir. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PAGETABLE_LEVELS\">PAGETABLE_LEVELS</a> == 2 ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#PAGETABLE_LEVELS\">PAGETABLE_LEVELS</a> == 3 && <a class=\"id\" href=\"#SHARED_KERNEL_PMD\">SHARED_KERNEL_PMD</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#PAGETABLE_LEVELS\">PAGETABLE_LEVELS</a> == 4) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone_pgd_range\">clone_pgd_range</a>(<a class=\"id\" href=\"#pgd\">pgd</a> + <a class=\"id\" href=\"#KERNEL_PGD_BOUNDARY\">KERNEL_PGD_BOUNDARY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swapper_pg_dir\">swapper_pg_dir</a> + <a class=\"id\" href=\"#KERNEL_PGD_BOUNDARY\">KERNEL_PGD_BOUNDARY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#KERNEL_PGD_PTRS\">KERNEL_PGD_PTRS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#paravirt_alloc_pmd_clone\">paravirt_alloc_pmd_clone</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#pgd\">pgd</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#swapper_pg_dir\">swapper_pg_dir</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#KERNEL_PGD_BOUNDARY\">KERNEL_PGD_BOUNDARY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#KERNEL_PGD_PTRS\">KERNEL_PGD_PTRS</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* list required to sync kernel mapping updates */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#SHARED_KERNEL_PMD\">SHARED_KERNEL_PMD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd_list_add\">pgd_list_add</a>(<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pgd_dtor\">pgd_dtor</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>; <span class=\"comment\">/* can be called from interrupt context */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#SHARED_KERNEL_PMD\">SHARED_KERNEL_PMD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_list_del\">pgd_list_del</a>(<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * List of all pgd's needed for non-PAE so it can invalidate entries</span>", 
"<span class=\"comment\"> * in both cached and uncached pgd's; not needed for PAE since the</span>", 
"<span class=\"comment\"> * kernel pmd is shared. If PAE were not to share the pmd a similar</span>", 
"<span class=\"comment\"> * tactic would be needed. This is essentially codepath-based locking</span>", 
"<span class=\"comment\"> * against pageattr.c; it is the unique case in which a valid change</span>", 
"<span class=\"comment\"> * of kernel pagetables can't be lazily synchronized by vmalloc faults.</span>", 
"<span class=\"comment\"> * vmalloc faults work because attached pagetables are never freed.</span>", 
"<span class=\"comment\"> * -- wli</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_PAE\">CONFIG_X86_PAE</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In PAE mode, we need to do a cr3 reload (=tlb flush) when</span>", 
"<span class=\"comment\"> * updating the top-level pagetable entries to guarantee the</span>", 
"<span class=\"comment\"> * processor notices the update.  Since this is expensive, and</span>", 
"<span class=\"comment\"> * all 4 top-level entries are used almost immediately in a</span>", 
"<span class=\"comment\"> * new process's life, we just pre-populate them here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also, if we're in a paravirt environment where the kernel pmd is</span>", 
"<span class=\"comment\"> * not shared between pagetables (!SHARED_KERNEL_PMDS), we allocate</span>", 
"<span class=\"comment\"> * and initialize the kernel pmds here.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PREALLOCATED_PMDS\">PREALLOCATED_PMDS</a><span class=\"ts\"/><a class=\"id\" href=\"#UNSHARED_PTRS_PER_PGD\">UNSHARED_PTRS_PER_PGD</a>", 
"", 
"void <a class=\"id\" href=\"#pud_populate\">pud_populate</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pudp\">pudp</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#paravirt_alloc_pmd\">paravirt_alloc_pmd</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#pmd\">pmd</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Note: almost everything apart from _PAGE_PRESENT is</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   reserved at the pmd (PDPT) level. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pud\">set_pud</a>(<a class=\"id\" href=\"#pudp\">pudp</a>, <a class=\"id\" href=\"#__pud\">__pud</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#pmd\">pmd</a>) | <a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * According to Intel App note \"TLBs, Paging-Structure Caches,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and Their Invalidation\", April 2007, document 317080-001,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * section 8.1: in PAE mode we explicitly have to flush the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TLB via cr3 if the top-level pgd is changed...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_cr3\">write_cr3</a>(<a class=\"id\" href=\"#read_cr3\">read_cr3</a>());", 
"}", 
"#else  <span class=\"comment\">/* !CONFIG_X86_PAE */</span>", 
"", 
"<span class=\"comment\">/* No need to prepopulate any pagetable entries in non-PAE modes. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PREALLOCATED_PMDS\">PREALLOCATED_PMDS</a><span class=\"ts\"/>0", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_X86_PAE */</span>", 
"", 
"static void <a class=\"id\" href=\"#free_pmds\">free_pmds</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmds\">pmds</a>[])", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PREALLOCATED_PMDS\">PREALLOCATED_PMDS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pmds\">pmds</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#pmds\">pmds</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#preallocate_pmds\">preallocate_pmds</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmds\">pmds</a>[])", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#failed\">failed</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PREALLOCATED_PMDS\">PREALLOCATED_PMDS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a> = (<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *)<a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#PGALLOC_GFP\">PGALLOC_GFP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd\">pmd</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#failed\">failed</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmds\">pmds</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#failed\">failed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pmds\">free_pmds</a>(<a class=\"id\" href=\"#pmds\">pmds</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Mop up any pmd pages which may still be attached to the pgd.</span>", 
"<span class=\"comment\"> * Normally they will be freed by munmap/exit_mmap, but any pmd we</span>", 
"<span class=\"comment\"> * preallocate which never got a corresponding vma will need to be</span>", 
"<span class=\"comment\"> * freed manually.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pgd_mop_up_pmds\">pgd_mop_up_pmds</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgdp\">pgdp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PREALLOCATED_PMDS\">PREALLOCATED_PMDS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> <a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgdp\">pgdp</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_val\">pgd_val</a>(<a class=\"id\" href=\"#pgd\">pgd</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a> = (<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *)<a class=\"id\" href=\"#pgd_page_vaddr\">pgd_page_vaddr</a>(<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgdp\">pgdp</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#native_make_pgd\">native_make_pgd</a>(0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#paravirt_release_pmd\">paravirt_release_pmd</a>(<a class=\"id\" href=\"#pgd_val\">pgd_val</a>(<a class=\"id\" href=\"#pgd\">pgd</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_free\">pmd_free</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pgd_prepopulate_pmd\">pgd_prepopulate_pmd</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmds\">pmds</a>[])", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PREALLOCATED_PMDS\">PREALLOCATED_PMDS</a> == 0) <span class=\"comment\">/* Work around gcc-3.4.x bug */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, 0);", 
"", 
" <span class=\"ts\"/>for (<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PREALLOCATED_PMDS\">PREALLOCATED_PMDS</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#pud\">pud</a>++, <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PUD_SIZE\">PUD_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmds\">pmds</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#KERNEL_PGD_BOUNDARY\">KERNEL_PGD_BOUNDARY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, (<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *)<a class=\"id\" href=\"#pgd_page_vaddr\">pgd_page_vaddr</a>(<a class=\"id\" href=\"#swapper_pg_dir\">swapper_pg_dir</a>[<a class=\"id\" href=\"#i\">i</a>]),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       sizeof(<a class=\"id\" href=\"#pmd_t\">pmd_t</a>) * <a class=\"id\" href=\"#PTRS_PER_PMD\">PTRS_PER_PMD</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pud_populate\">pud_populate</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#pmd\">pmd</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd_alloc\">pgd_alloc</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmds\">pmds</a>[<a class=\"id\" href=\"#PREALLOCATED_PMDS\">PREALLOCATED_PMDS</a>];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = (<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *)<a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#PGALLOC_GFP\">PGALLOC_GFP</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd\">pgd</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd\">pgd</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#preallocate_pmds\">preallocate_pmds</a>(<a class=\"id\" href=\"#pmds\">pmds</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_pgd\">out_free_pgd</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#paravirt_pgd_alloc\">paravirt_pgd_alloc</a>(<a class=\"id\" href=\"#mm\">mm</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_pmds\">out_free_pmds</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure that pre-populating the pmds is atomic with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * respect to anything walking the pgd_list, so that they</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * never see a partially populated pgd.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_ctor\">pgd_ctor</a>(<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_prepopulate_pmd\">pgd_prepopulate_pmd</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#pmds\">pmds</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pgd\">pgd</a>;", 
"", 
"<a class=\"id\" href=\"#out_free_pmds\">out_free_pmds</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pmds\">free_pmds</a>(<a class=\"id\" href=\"#pmds\">pmds</a>);", 
"<a class=\"id\" href=\"#out_free_pgd\">out_free_pgd</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#pgd_free\">pgd_free</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_mop_up_pmds\">pgd_mop_up_pmds</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd\">pgd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_dtor\">pgd_dtor</a>(<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#paravirt_pgd_free\">paravirt_pgd_free</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd\">pgd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#ptep_set_access_flags\">ptep_set_access_flags</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#entry\">entry</a>, int <a class=\"id\" href=\"#dirty\">dirty</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#changed\">changed</a> = !<a class=\"id\" href=\"#pte_same\">pte_same</a>(*<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#changed\">changed</a> && <a class=\"id\" href=\"#dirty\">dirty</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_update_defer\">pte_update_defer</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_page\">flush_tlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#changed\">changed</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ptep_test_and_clear_young\">ptep_test_and_clear_young</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_young\">pte_young</a>(*<a class=\"id\" href=\"#ptep\">ptep</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#_PAGE_BIT_ACCESSED\">_PAGE_BIT_ACCESSED</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long *) &amp;<a class=\"id\" href=\"#ptep\">ptep</a>-><a class=\"id\" href=\"#pte\">pte</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_update\">pte_update</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptep\">ptep</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ptep_clear_flush_young\">ptep_clear_flush_young</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#young\">young</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#young\">young</a> = <a class=\"id\" href=\"#ptep_test_and_clear_young\">ptep_test_and_clear_young</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#young\">young</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_page\">flush_tlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#young\">young</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * reserve_top_address - reserves a hole in the top of kernel address space</span>", 
"<span class=\"comment\"> * @reserve - size of hole to reserve</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Can be used to relocate the fixmap area and poke a hole in the top</span>", 
"<span class=\"comment\"> * of kernel address space to make room for a hypervisor.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#reserve_top_address\">reserve_top_address</a>(unsigned long <a class=\"id\" href=\"#reserve\">reserve</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#fixmaps_set\">fixmaps_set</a> &gt; 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Reserving virtual address space above 0x%08x\\n\",", 
"<span class=\"ts\"/>       (int)-<a class=\"id\" href=\"#reserve\">reserve</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__FIXADDR_TOP\">__FIXADDR_TOP</a> = -<a class=\"id\" href=\"#reserve\">reserve</a> - <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"int <a class=\"id\" href=\"#fixmaps_set\">fixmaps_set</a>;", 
"", 
"void <a class=\"id\" href=\"#__native_set_fixmap\">__native_set_fixmap</a>(enum <a class=\"id\" href=\"#fixed_addresses\">fixed_addresses</a> <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#__fix_to_virt\">__fix_to_virt</a>(<a class=\"id\" href=\"#idx\">idx</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> >= <a class=\"id\" href=\"#__end_of_fixed_addresses\">__end_of_fixed_addresses</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_vaddr\">set_pte_vaddr</a>(<a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fixmaps_set\">fixmaps_set</a>++;", 
"}", 
"", 
"void <a class=\"id\" href=\"#native_set_fixmap\">native_set_fixmap</a>(enum <a class=\"id\" href=\"#fixed_addresses\">fixed_addresses</a> <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#phys\">phys</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__native_set_fixmap\">__native_set_fixmap</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#pfn_pte\">pfn_pte</a>(<a class=\"id\" href=\"#phys\">phys</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, <a class=\"id\" href=\"#flags\">flags</a>));", 
"}", 
];
xr_frag_insert('l/97/78bddac29e08d00aeb267e6bc904c8b99d906c.xr', __xr_tmp);
