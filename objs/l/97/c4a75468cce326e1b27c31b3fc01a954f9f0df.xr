var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2001-2003 Sistina Software (UK) Limited.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPL.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"dm.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>-<a class=\"id\" href=\"#mapper\">mapper</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DM_MSG_PREFIX\">DM_MSG_PREFIX</a> \"linear\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Linear: maps a linear range of a device.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#linear_c\">linear_c</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_dev\">dm_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#start\">start</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Construct a linear mapping: &lt;dev_path&gt; &lt;offset&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#linear_ctr\">linear_ctr</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, unsigned int <a class=\"id\" href=\"#argc\">argc</a>, char **<a class=\"id\" href=\"#argv\">argv</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linear_c\">linear_c</a> *<a class=\"id\" href=\"#lc\">lc</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#argc\">argc</a> != 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#error\">error</a> = \"Invalid argument count\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lc\">lc</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#lc\">lc</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lc\">lc</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#error\">error</a> = \"dm-linear: Cannot allocate linear context\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#argv\">argv</a>[1], \"%llu\", &amp;<a class=\"id\" href=\"#tmp\">tmp</a>) != 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#error\">error</a> = \"dm-linear: Invalid device sector\";", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lc\">lc</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dm_get_device\">dm_get_device</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#argv\">argv</a>[0], <a class=\"id\" href=\"#dm_table_get_mode\">dm_table_get_mode</a>(<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#table\">table</a>), &amp;<a class=\"id\" href=\"#lc\">lc</a>-><a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#error\">error</a> = \"dm-linear: Device lookup failed\";", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad\">bad</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#num_flush_requests\">num_flush_requests</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#num_discard_requests\">num_discard_requests</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#lc\">lc</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"      <a class=\"id\" href=\"#bad\">bad</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#lc\">lc</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#linear_dtr\">linear_dtr</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linear_c\">linear_c</a> *<a class=\"id\" href=\"#lc\">lc</a> = (struct <a class=\"id\" href=\"#linear_c\">linear_c</a> *) <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_put_device\">dm_put_device</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#lc\">lc</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#lc\">lc</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#linear_map_sector\">linear_map_sector</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#bi_sector\">bi_sector</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linear_c\">linear_c</a> *<a class=\"id\" href=\"#lc\">lc</a> = <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#lc\">lc</a>-><a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#dm_target_offset\">dm_target_offset</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#bi_sector\">bi_sector</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#linear_map_bio\">linear_map_bio</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linear_c\">linear_c</a> *<a class=\"id\" href=\"#lc\">lc</a> = <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a> = <a class=\"id\" href=\"#lc\">lc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_sectors\">bio_sectors</a>(<a class=\"id\" href=\"#bio\">bio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> = <a class=\"id\" href=\"#linear_map_sector\">linear_map_sector</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#linear_map\">linear_map</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      union <a class=\"id\" href=\"#map_info\">map_info</a> *<a class=\"id\" href=\"#map_context\">map_context</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#linear_map_bio\">linear_map_bio</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#DM_MAPIO_REMAPPED\">DM_MAPIO_REMAPPED</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#linear_status\">linear_status</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#status_type_t\">status_type_t</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char *<a class=\"id\" href=\"#result\">result</a>, unsigned int <a class=\"id\" href=\"#maxlen\">maxlen</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linear_c\">linear_c</a> *<a class=\"id\" href=\"#lc\">lc</a> = (struct <a class=\"id\" href=\"#linear_c\">linear_c</a> *) <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#STATUSTYPE_INFO\">STATUSTYPE_INFO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a>[0] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#STATUSTYPE_TABLE\">STATUSTYPE_TABLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#maxlen\">maxlen</a>, \"%s %llu\", <a class=\"id\" href=\"#lc\">lc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#lc\">lc</a>-><a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#linear_ioctl\">linear_ioctl</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linear_c\">linear_c</a> *<a class=\"id\" href=\"#lc\">lc</a> = (struct <a class=\"id\" href=\"#linear_c\">linear_c</a> *) <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__blkdev_driver_ioctl\">__blkdev_driver_ioctl</a>(<a class=\"id\" href=\"#lc\">lc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#lc\">lc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#linear_merge\">linear_merge</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#bvec_merge_data\">bvec_merge_data</a> *<a class=\"id\" href=\"#bvm\">bvm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#biovec\">biovec</a>, int <a class=\"id\" href=\"#max_size\">max_size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linear_c\">linear_c</a> *<a class=\"id\" href=\"#lc\">lc</a> = <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#lc\">lc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bdev\">bdev</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#merge_bvec_fn\">merge_bvec_fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#max_size\">max_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bvm\">bvm</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a> = <a class=\"id\" href=\"#lc\">lc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bvm\">bvm</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> = <a class=\"id\" href=\"#linear_map_sector\">linear_map_sector</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#bvm\">bvm</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#max_size\">max_size</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#merge_bvec_fn\">merge_bvec_fn</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bvm\">bvm</a>, <a class=\"id\" href=\"#biovec\">biovec</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#linear_iterate_devices\">linear_iterate_devices</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#iterate_devices_callout_fn\">iterate_devices_callout_fn</a> <a class=\"id\" href=\"#fn\">fn</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linear_c\">linear_c</a> *<a class=\"id\" href=\"#lc\">lc</a> = <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#lc\">lc</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#lc\">lc</a>-><a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#target_type\">target_type</a> <a class=\"id\" href=\"#linear_target\">linear_target</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a>   = \"linear\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#version\">version</a> = {1, 1, 0},", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#module\">module</a> = <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ctr\">ctr</a>    = <a class=\"id\" href=\"#linear_ctr\">linear_ctr</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#dtr\">dtr</a>    = <a class=\"id\" href=\"#linear_dtr\">linear_dtr</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#map\">map</a>    = <a class=\"id\" href=\"#linear_map\">linear_map</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#linear_status\">linear_status</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ioctl\">ioctl</a>  = <a class=\"id\" href=\"#linear_ioctl\">linear_ioctl</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#merge\">merge</a>  = <a class=\"id\" href=\"#linear_merge\">linear_merge</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#iterate_devices\">iterate_devices</a> = <a class=\"id\" href=\"#linear_iterate_devices\">linear_iterate_devices</a>,", 
"};", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dm_linear_init\">dm_linear_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#dm_register_target\">dm_register_target</a>(&amp;<a class=\"id\" href=\"#linear_target\">linear_target</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMERR\">DMERR</a>(\"register failed %d\", <a class=\"id\" href=\"#r\">r</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#dm_linear_exit\">dm_linear_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_unregister_target\">dm_unregister_target</a>(&amp;<a class=\"id\" href=\"#linear_target\">linear_target</a>);", 
"}", 
];
xr_frag_insert('l/97/c4a75468cce326e1b27c31b3fc01a954f9f0df.xr', __xr_tmp);
