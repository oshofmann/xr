var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Userspace API for hardware time stamping of network packets</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2008,2009 Intel Corporation</span>", 
"<span class=\"comment\"> * Author: Patrick Ohly &lt;patrick.ohly@intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_NET_TIMESTAMPING_H\">_NET_TIMESTAMPING_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_NET_TIMESTAMPING_H\">_NET_TIMESTAMPING_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#h\">h</a>&gt;   <span class=\"comment\">/* for SO_TIMESTAMPING */</span>", 
"", 
"<span class=\"comment\">/* SO_TIMESTAMPING gets an integer bit field comprised of these values */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SOF_TIMESTAMPING_TX_HARDWARE\">SOF_TIMESTAMPING_TX_HARDWARE</a> = (1<<0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SOF_TIMESTAMPING_TX_SOFTWARE\">SOF_TIMESTAMPING_TX_SOFTWARE</a> = (1<<1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SOF_TIMESTAMPING_RX_HARDWARE\">SOF_TIMESTAMPING_RX_HARDWARE</a> = (1<<2),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SOF_TIMESTAMPING_RX_SOFTWARE\">SOF_TIMESTAMPING_RX_SOFTWARE</a> = (1<<3),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SOF_TIMESTAMPING_SOFTWARE\">SOF_TIMESTAMPING_SOFTWARE</a> = (1<<4),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SOF_TIMESTAMPING_SYS_HARDWARE\">SOF_TIMESTAMPING_SYS_HARDWARE</a> = (1<<5),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SOF_TIMESTAMPING_RAW_HARDWARE\">SOF_TIMESTAMPING_RAW_HARDWARE</a> = (1<<6),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SOF_TIMESTAMPING_MASK\">SOF_TIMESTAMPING_MASK</a> =", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#SOF_TIMESTAMPING_RAW_HARDWARE\">SOF_TIMESTAMPING_RAW_HARDWARE</a> - 1) |", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SOF_TIMESTAMPING_RAW_HARDWARE\">SOF_TIMESTAMPING_RAW_HARDWARE</a>", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct hwtstamp_config - %SIOCSHWTSTAMP parameter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @flags:<span class=\"ts\"/>no flags defined right now, must be zero</span>", 
"<span class=\"comment\"> * @tx_type:<span class=\"ts\"/>one of HWTSTAMP_TX_*</span>", 
"<span class=\"comment\"> * @rx_type:<span class=\"ts\"/>one of one of HWTSTAMP_FILTER_*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %SIOCSHWTSTAMP expects a &amp;struct ifreq with a ifr_data pointer to</span>", 
"<span class=\"comment\"> * this structure. dev_ifsioc() in the kernel takes care of the</span>", 
"<span class=\"comment\"> * translation between 32 bit userspace and 64 bit kernel. The</span>", 
"<span class=\"comment\"> * structure is intentionally chosen so that it has the same layout on</span>", 
"<span class=\"comment\"> * 32 and 64 bit systems, don't break this!</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#hwtstamp_config\">hwtstamp_config</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tx_type\">tx_type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rx_filter\">rx_filter</a>;", 
"};", 
"", 
"<span class=\"comment\">/* possible values for hwtstamp_config-&gt;tx_type */</span>", 
"enum {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No outgoing packet will need hardware time stamping;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should a packet arrive which asks for it, no hardware</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time stamping will be done.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_TX_OFF\">HWTSTAMP_TX_OFF</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enables hardware time stamping for outgoing packets;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the sender of the packet decides which are to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time stamped by setting %SOF_TIMESTAMPING_TX_SOFTWARE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before sending the packet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_TX_ON\">HWTSTAMP_TX_ON</a>,", 
"};", 
"", 
"<span class=\"comment\">/* possible values for hwtstamp_config-&gt;rx_filter */</span>", 
"enum {", 
"<span class=\"ts\"/><span class=\"comment\">/* time stamp no incoming packet at all */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_FILTER_NONE\">HWTSTAMP_FILTER_NONE</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* time stamp any incoming packet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_FILTER_ALL\">HWTSTAMP_FILTER_ALL</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* return value: time stamp all packets requested plus some others */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_FILTER_SOME\">HWTSTAMP_FILTER_SOME</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* PTP v1, UDP, any kind of event packet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_FILTER_PTP_V1_L4_EVENT\">HWTSTAMP_FILTER_PTP_V1_L4_EVENT</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* PTP v1, UDP, Sync packet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_FILTER_PTP_V1_L4_SYNC\">HWTSTAMP_FILTER_PTP_V1_L4_SYNC</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* PTP v1, UDP, Delay_req packet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ\">HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* PTP v2, UDP, any kind of event packet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_FILTER_PTP_V2_L4_EVENT\">HWTSTAMP_FILTER_PTP_V2_L4_EVENT</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* PTP v2, UDP, Sync packet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_FILTER_PTP_V2_L4_SYNC\">HWTSTAMP_FILTER_PTP_V2_L4_SYNC</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* PTP v2, UDP, Delay_req packet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ\">HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 802.AS1, Ethernet, any kind of event packet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_FILTER_PTP_V2_L2_EVENT\">HWTSTAMP_FILTER_PTP_V2_L2_EVENT</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* 802.AS1, Ethernet, Sync packet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_FILTER_PTP_V2_L2_SYNC\">HWTSTAMP_FILTER_PTP_V2_L2_SYNC</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* 802.AS1, Ethernet, Delay_req packet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ\">HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* PTP v2/802.AS1, any layer, any kind of event packet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_FILTER_PTP_V2_EVENT\">HWTSTAMP_FILTER_PTP_V2_EVENT</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* PTP v2/802.AS1, any layer, Sync packet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_FILTER_PTP_V2_SYNC\">HWTSTAMP_FILTER_PTP_V2_SYNC</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* PTP v2/802.AS1, any layer, Delay_req packet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HWTSTAMP_FILTER_PTP_V2_DELAY_REQ\">HWTSTAMP_FILTER_PTP_V2_DELAY_REQ</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _NET_TIMESTAMPING_H */</span>", 
];
xr_frag_insert('l/97/e8e6b65c0d26e408aa69428a6eed132de41fc8.xr', __xr_tmp);
