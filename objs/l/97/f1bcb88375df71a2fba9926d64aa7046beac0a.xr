var __xr_tmp = [
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOT exported to modules - patching kernel text is a really delicate matter.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> <a class=\"id\" href=\"#__start___ex_table\">__start___ex_table</a>[];", 
"extern struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> <a class=\"id\" href=\"#__stop___ex_table\">__stop___ex_table</a>[];", 
"", 
"<span class=\"comment\">/* Sort the kernel's built-in exception table */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sort_main_extable\">sort_main_extable</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sort_extable\">sort_extable</a>(<a class=\"id\" href=\"#__start___ex_table\">__start___ex_table</a>, <a class=\"id\" href=\"#__stop___ex_table\">__stop___ex_table</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Given an address, look for it in the exception tables. */</span>", 
"const struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#search_exception_tables\">search_exception_tables</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#e\">e</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a> = <a class=\"id\" href=\"#search_extable\">search_extable</a>(<a class=\"id\" href=\"#__start___ex_table\">__start___ex_table</a>, <a class=\"id\" href=\"#__stop___ex_table\">__stop___ex_table</a>-1, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#e\">e</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a> = <a class=\"id\" href=\"#search_module_extables\">search_module_extables</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#e\">e</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#init_kernel_text\">init_kernel_text</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> >= (unsigned long)<a class=\"id\" href=\"#_sinittext\">_sinittext</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#addr\">addr</a> <= (unsigned long)<a class=\"id\" href=\"#_einittext\">_einittext</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#core_kernel_text\">core_kernel_text</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> >= (unsigned long)<a class=\"id\" href=\"#_stext\">_stext</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#addr\">addr</a> <= (unsigned long)<a class=\"id\" href=\"#_etext\">_etext</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#system_state\">system_state</a> == <a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#init_kernel_text\">init_kernel_text</a>(<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__kernel_text_address\">__kernel_text_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#core_kernel_text\">core_kernel_text</a>(<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_module_text_address\">is_module_text_address</a>(<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There might be init symbols in saved stacktraces.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Give those symbols a chance to be printed in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * backtraces (such as lockdep traces).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since we are after the module-symbols check, there's</span>", 
];
xr_frag_insert('l/97/f1bcb88375df71a2fba9926d64aa7046beac0a.xr', __xr_tmp);
