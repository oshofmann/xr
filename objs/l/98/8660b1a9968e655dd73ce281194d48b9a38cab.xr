var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2005 David Brownell</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_SPI_H\">__LINUX_SPI_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_SPI_H\">__LINUX_SPI_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mod_devicetable\">mod_devicetable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * INTERFACES between SPI master-side drivers and SPI infrastructure.</span>", 
"<span class=\"comment\"> * (There's no SPI slave support for Linux yet...)</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#bus_type\">bus_type</a> <a class=\"id\" href=\"#spi_bus_type\">spi_bus_type</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct spi_device - Master side proxy for an SPI slave device</span>", 
"<span class=\"comment\"> * @dev: Driver model representation of the device.</span>", 
"<span class=\"comment\"> * @master: SPI controller used with the device.</span>", 
"<span class=\"comment\"> * @max_speed_hz: Maximum clock rate to be used with this chip</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(on this board); may be changed by the device's driver.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The spi_transfer.speed_hz can override this for each transfer.</span>", 
"<span class=\"comment\"> * @chip_select: Chipselect, distinguishing chips handled by @master.</span>", 
"<span class=\"comment\"> * @mode: The spi mode defines how data is clocked out and in.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This may be changed by the device's driver.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The \"active low\" default for chipselect mode can be overridden</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(by specifying SPI_CS_HIGH) as can the \"MSB first\" default for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>each word in a transfer (by specifying SPI_LSB_FIRST).</span>", 
"<span class=\"comment\"> * @bits_per_word: Data transfers involve one or more words; word sizes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>like eight or 12 bits are common.  In-memory wordsizes are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>powers of two bytes (e.g. 20 bit samples use 32 bits).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This may be changed by the device's driver, or left at the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>default (0) indicating protocol words are eight bit bytes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The spi_transfer.bits_per_word can override this for each transfer.</span>", 
"<span class=\"comment\"> * @irq: Negative, or the number passed to request_irq() to receive</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interrupts from this device.</span>", 
"<span class=\"comment\"> * @controller_state: Controller's runtime state</span>", 
"<span class=\"comment\"> * @controller_data: Board-specific definitions for controller, such as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>FIFO initialization parameters; from board_info.controller_data</span>", 
"<span class=\"comment\"> * @modalias: Name of the driver to use with this device, or an alias</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for that name.  This appears in the sysfs \"modalias\" attribute</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for driver coldplugging, and in uevents used for hotplugging</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A @spi_device is used to interchange data between an SPI slave</span>", 
"<span class=\"comment\"> * (usually a discrete chip) and CPU memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In @dev, the platform_data is used to hold information about this</span>", 
"<span class=\"comment\"> * device that's meaningful to the device's protocol driver, but not</span>", 
"<span class=\"comment\"> * to its controller.  One example might be an identifier for a chip</span>", 
"<span class=\"comment\"> * variant with slightly different functionality; another might be</span>", 
"<span class=\"comment\"> * information about how this particular board wires the chip's pins.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#spi_device\">spi_device</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#spi_master\">spi_master</a><span class=\"ts\"/>*<a class=\"id\" href=\"#master\">master</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_speed_hz\">max_speed_hz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chip_select\">chip_select</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a>;", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SPI_CPHA\">SPI_CPHA</a><span class=\"ts\"/>0x01<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* clock phase */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SPI_CPOL\">SPI_CPOL</a><span class=\"ts\"/>0x02<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* clock polarity */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SPI_MODE_0\">SPI_MODE_0</a><span class=\"ts\"/>(0|0)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (original MicroWire) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SPI_MODE_1\">SPI_MODE_1</a><span class=\"ts\"/>(0|<a class=\"id\" href=\"#SPI_CPHA\">SPI_CPHA</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SPI_MODE_2\">SPI_MODE_2</a><span class=\"ts\"/>(<a class=\"id\" href=\"#SPI_CPOL\">SPI_CPOL</a>|0)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SPI_MODE_3\">SPI_MODE_3</a><span class=\"ts\"/>(<a class=\"id\" href=\"#SPI_CPOL\">SPI_CPOL</a>|<a class=\"id\" href=\"#SPI_CPHA\">SPI_CPHA</a>)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SPI_CS_HIGH\">SPI_CS_HIGH</a><span class=\"ts\"/>0x04<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* chipselect active high? */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SPI_LSB_FIRST\">SPI_LSB_FIRST</a><span class=\"ts\"/>0x08<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* per-word bits-on-wire */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SPI_3WIRE\">SPI_3WIRE</a><span class=\"ts\"/>0x10<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SI/SO signals shared */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SPI_LOOP\">SPI_LOOP</a><span class=\"ts\"/>0x20<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* loopback mode */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SPI_NO_CS\">SPI_NO_CS</a><span class=\"ts\"/>0x40<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 1 dev/bus, no chipselect */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#SPI_READY\">SPI_READY</a><span class=\"ts\"/>0x80<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* slave pulls low to pause */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bits_per_word\">bits_per_word</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq\">irq</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#controller_state\">controller_state</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#controller_data\">controller_data</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#modalias\">modalias</a>[<a class=\"id\" href=\"#SPI_NAME_SIZE\">SPI_NAME_SIZE</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * likely need more hooks for more protocol options affecting how</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the controller talks to each chip, like:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - memory packing (12 bit samples into low bits, others zeroed)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - priority</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - drop chipselect after each word</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - chipselect delays</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - ...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#to_spi_device\">to_spi_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a> ? <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#spi_device\">spi_device</a>, <a class=\"id\" href=\"#dev\">dev</a>) : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* most drivers won't need to care about device refcounting */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi_dev_get\">spi_dev_get</a>(struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi\">spi</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#spi\">spi</a> && <a class=\"id\" href=\"#get_device\">get_device</a>(&amp;<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>)) ? <a class=\"id\" href=\"#spi\">spi</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#spi_dev_put\">spi_dev_put</a>(struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi\">spi</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spi\">spi</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/* ctldata is for the bus_master driver's runtime state */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#spi_get_ctldata\">spi_get_ctldata</a>(struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi\">spi</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#controller_state\">controller_state</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#spi_set_ctldata\">spi_set_ctldata</a>(struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi\">spi</a>, void *<a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#controller_state\">controller_state</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"}", 
"", 
"<span class=\"comment\">/* device driver data */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#spi_set_drvdata\">spi_set_drvdata</a>(struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi\">spi</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_drvdata\">dev_set_drvdata</a>(&amp;<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#spi_get_drvdata\">spi_get_drvdata</a>(struct <a class=\"id\" href=\"#spi_device\">spi_device</a> *<a class=\"id\" href=\"#spi\">spi</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(&amp;<a class=\"id\" href=\"#spi\">spi</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#spi_message\">spi_message</a>;", 
"", 
"", 
"", 
];
xr_frag_insert('l/98/8660b1a9968e655dd73ce281194d48b9a38cab.xr', __xr_tmp);
