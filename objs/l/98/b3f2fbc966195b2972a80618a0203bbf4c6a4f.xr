var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> *  Copyright (C) 2000, 2001, 2002 Andi Kleen, SuSE Labs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Pentium III FXSR, SSE support</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Gareth Hughes &lt;gareth@valinux.com&gt;, May 2000</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle hardware traps and faults.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kprobes\">kprobes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdebug\">kdebug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kgdb\">kgdb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kexec\">kexec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bug\">bug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nmi\">nmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_EISA\">CONFIG_EISA</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioport\">ioport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#eisa\">eisa</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MCA\">CONFIG_MCA</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mca\">mca</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_EDAC\">CONFIG_EDAC</a>)", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#edac\">edac</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#kmemcheck\">kmemcheck</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#stacktrace\">stacktrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#debugreg\">debugreg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#traps\">traps</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#desc\">desc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#i387\">i387</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mce\">mce</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mach_traps\">mach_traps</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgalloc\">pgalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#proto\">proto</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#else", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>-<a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#setup\">setup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> int <a class=\"id\" href=\"#system_call\">system_call</a>(void);", 
"", 
"<span class=\"comment\">/* Do we ignore FPU interrupts ? */</span>", 
"char <a class=\"id\" href=\"#ignore_fpu_irq\">ignore_fpu_irq</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The IDT has to be page-aligned to simplify the Pentium</span>", 
"<span class=\"comment\"> * F0 0F bug workaround.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#gate_desc\">gate_desc</a> <a class=\"id\" href=\"#idt_table\">idt_table</a>[<a class=\"id\" href=\"#NR_VECTORS\">NR_VECTORS</a>] <a class=\"id\" href=\"#__page_aligned_data\">__page_aligned_data</a> = { { { { 0, 0 } } }, };", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#used_vectors\">used_vectors</a>, <a class=\"id\" href=\"#NR_VECTORS\">NR_VECTORS</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#used_vectors\">used_vectors</a>);", 
"", 
"static int <a class=\"id\" href=\"#ignore_nmis\">ignore_nmis</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#conditional_sti\">conditional_sti</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#preempt_conditional_sti\">preempt_conditional_sti</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_preempt_count\">inc_preempt_count</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#conditional_cli\">conditional_cli</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#preempt_conditional_cli\">preempt_conditional_cli</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dec_preempt_count\">dec_preempt_count</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a>", 
"<a class=\"id\" href=\"#do_trap\">do_trap</a>(int <a class=\"id\" href=\"#trapnr\">trapnr</a>, int <a class=\"id\" href=\"#signr\">signr</a>, char *<a class=\"id\" href=\"#str\">str</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#X86_VM_MASK\">X86_VM_MASK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * traps 0, 1, 3, 4, and 5 should be forwarded to vm86.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * On nmi (interrupt 2), do_trap should not be called.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#trapnr\">trapnr</a> &lt; 6)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#vm86_trap\">vm86_trap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#trap_signal\">trap_signal</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#kernel_trap\">kernel_trap</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<a class=\"id\" href=\"#trap_signal\">trap_signal</a>:", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We want error_code and trap_no set for userspace faults and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernelspace faults which result in die(), but not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernelspace faults which are fixed up.  die() gives the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * process no chance to handle the signal and notice the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernel fault information, so that won't result in polluting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the information about previously queued, but not yet</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * delivered, faults.  See also do_general_protection below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#error_code\">error_code</a> = <a class=\"id\" href=\"#error_code\">error_code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#trap_no\">trap_no</a> = <a class=\"id\" href=\"#trapnr\">trapnr</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#show_unhandled_signals\">show_unhandled_signals</a> && <a class=\"id\" href=\"#unhandled_signal\">unhandled_signal</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#signr\">signr</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"%s[%d] trap %s ip:%lx sp:%lx error:%lx\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#str\">str</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#error_code\">error_code</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_vma_addr\">print_vma_addr</a>(\" in \", <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_sig_info\">force_sig_info</a>(<a class=\"id\" href=\"#signr\">signr</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_sig\">force_sig</a>(<a class=\"id\" href=\"#signr\">signr</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#kernel_trap\">kernel_trap</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fixup_exception\">fixup_exception</a>(<a class=\"id\" href=\"#regs\">regs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#error_code\">error_code</a> = <a class=\"id\" href=\"#error_code\">error_code</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#trap_no\">trap_no</a> = <a class=\"id\" href=\"#trapnr\">trapnr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#die\">die</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<a class=\"id\" href=\"#vm86_trap\">vm86_trap</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle_vm86_trap\">handle_vm86_trap</a>((struct <a class=\"id\" href=\"#kernel_vm86_regs\">kernel_vm86_regs</a> *) <a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#trapnr\">trapnr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#trap_signal\">trap_signal</a>;", 
"<span class=\"ts\"/>return;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DO_ERROR\">DO_ERROR</a>(<a class=\"id\" href=\"#trapnr\">trapnr</a>, <a class=\"id\" href=\"#signr\">signr</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#dotraplinkage\">dotraplinkage</a> void <a class=\"id\" href=\"#do_\">do_</a>##<a class=\"id\" href=\"#name\">name</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#error_code\">error_code</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_TRAP\">DIE_TRAP</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#trapnr\">trapnr</a>, <a class=\"id\" href=\"#signr\">signr</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>== <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#conditional_sti\">conditional_sti</a>(<a class=\"id\" href=\"#regs\">regs</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_trap\">do_trap</a>(<a class=\"id\" href=\"#trapnr\">trapnr</a>, <a class=\"id\" href=\"#signr\">signr</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DO_ERROR_INFO\">DO_ERROR_INFO</a>(<a class=\"id\" href=\"#trapnr\">trapnr</a>, <a class=\"id\" href=\"#signr\">signr</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#sicode\">sicode</a>, <a class=\"id\" href=\"#siaddr\">siaddr</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#dotraplinkage\">dotraplinkage</a> void <a class=\"id\" href=\"#do_\">do_</a>##<a class=\"id\" href=\"#name\">name</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#error_code\">error_code</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> <a class=\"id\" href=\"#info\">info</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a> = <a class=\"id\" href=\"#signr\">signr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_errno\">si_errno</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#sicode\">sicode</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_addr\">si_addr</a> = (void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#siaddr\">siaddr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_TRAP\">DIE_TRAP</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#trapnr\">trapnr</a>, <a class=\"id\" href=\"#signr\">signr</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>== <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#conditional_sti\">conditional_sti</a>(<a class=\"id\" href=\"#regs\">regs</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_trap\">do_trap</a>(<a class=\"id\" href=\"#trapnr\">trapnr</a>, <a class=\"id\" href=\"#signr\">signr</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, &amp;<a class=\"id\" href=\"#info\">info</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"<a class=\"id\" href=\"#DO_ERROR_INFO\">DO_ERROR_INFO</a>(0, <a class=\"id\" href=\"#SIGFPE\">SIGFPE</a>, \"divide error\", <a class=\"id\" href=\"#divide_error\">divide_error</a>, <a class=\"id\" href=\"#FPE_INTDIV\">FPE_INTDIV</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>)", 
"<a class=\"id\" href=\"#DO_ERROR\">DO_ERROR</a>(4, <a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>, \"overflow\", <a class=\"id\" href=\"#overflow\">overflow</a>)", 
"<a class=\"id\" href=\"#DO_ERROR\">DO_ERROR</a>(5, <a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>, \"bounds\", <a class=\"id\" href=\"#bounds\">bounds</a>)", 
"<a class=\"id\" href=\"#DO_ERROR_INFO\">DO_ERROR_INFO</a>(6, <a class=\"id\" href=\"#SIGILL\">SIGILL</a>, \"invalid opcode\", <a class=\"id\" href=\"#invalid_op\">invalid_op</a>, <a class=\"id\" href=\"#ILL_ILLOPN\">ILL_ILLOPN</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>)", 
"<a class=\"id\" href=\"#DO_ERROR\">DO_ERROR</a>(9, <a class=\"id\" href=\"#SIGFPE\">SIGFPE</a>, \"coprocessor segment overrun\", <a class=\"id\" href=\"#coprocessor_segment_overrun\">coprocessor_segment_overrun</a>)", 
"<a class=\"id\" href=\"#DO_ERROR\">DO_ERROR</a>(10, <a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>, \"invalid TSS\", <a class=\"id\" href=\"#invalid_TSS\">invalid_TSS</a>)", 
"<a class=\"id\" href=\"#DO_ERROR\">DO_ERROR</a>(11, <a class=\"id\" href=\"#SIGBUS\">SIGBUS</a>, \"segment not present\", <a class=\"id\" href=\"#segment_not_present\">segment_not_present</a>)", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<a class=\"id\" href=\"#DO_ERROR\">DO_ERROR</a>(12, <a class=\"id\" href=\"#SIGBUS\">SIGBUS</a>, \"stack segment\", <a class=\"id\" href=\"#stack_segment\">stack_segment</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<a class=\"id\" href=\"#DO_ERROR_INFO\">DO_ERROR_INFO</a>(17, <a class=\"id\" href=\"#SIGBUS\">SIGBUS</a>, \"alignment check\", <a class=\"id\" href=\"#alignment_check\">alignment_check</a>, <a class=\"id\" href=\"#BUS_ADRALN\">BUS_ADRALN</a>, 0)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"comment\">/* Runs on IST stack */</span>", 
"<a class=\"id\" href=\"#dotraplinkage\">dotraplinkage</a> void <a class=\"id\" href=\"#do_stack_segment\">do_stack_segment</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_TRAP\">DIE_TRAP</a>, \"stack segment\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>12, <a class=\"id\" href=\"#SIGBUS\">SIGBUS</a>) == <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_conditional_sti\">preempt_conditional_sti</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_trap\">do_trap</a>(12, <a class=\"id\" href=\"#SIGBUS\">SIGBUS</a>, \"stack segment\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_conditional_cli\">preempt_conditional_cli</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#dotraplinkage\">dotraplinkage</a> void <a class=\"id\" href=\"#do_double_fault\">do_double_fault</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"<span class=\"ts\"/>static const char <a class=\"id\" href=\"#str\">str</a>[] = \"double fault\";", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return not checked because double check cannot be ignored */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_TRAP\">DIE_TRAP</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, 8, <a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#error_code\">error_code</a> = <a class=\"id\" href=\"#error_code\">error_code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#trap_no\">trap_no</a> = 8;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is always a kernel trap and never fixable (and thus must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * never return).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (;;)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#die\">die</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#dotraplinkage\">dotraplinkage</a> void <a class=\"id\" href=\"#__kprobes\">__kprobes</a>", 
"<a class=\"id\" href=\"#do_general_protection\">do_general_protection</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#conditional_sti\">conditional_sti</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#X86_VM_MASK\">X86_VM_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#gp_in_vm86\">gp_in_vm86</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#gp_in_kernel\">gp_in_kernel</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#error_code\">error_code</a> = <a class=\"id\" href=\"#error_code\">error_code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#trap_no\">trap_no</a> = 13;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#show_unhandled_signals\">show_unhandled_signals</a> && <a class=\"id\" href=\"#unhandled_signal\">unhandled_signal</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%s[%d] general protection ip:%lx sp:%lx error:%lx\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#tsk\">tsk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#error_code\">error_code</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_vma_addr\">print_vma_addr</a>(\" in \", <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_sig\">force_sig</a>(<a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>return;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<a class=\"id\" href=\"#gp_in_vm86\">gp_in_vm86</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_vm86_fault\">handle_vm86_fault</a>((struct <a class=\"id\" href=\"#kernel_vm86_regs\">kernel_vm86_regs</a> *) <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>);", 
"<span class=\"ts\"/>return;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#gp_in_kernel\">gp_in_kernel</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fixup_exception\">fixup_exception</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#error_code\">error_code</a> = <a class=\"id\" href=\"#error_code\">error_code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#trap_no\">trap_no</a> = 13;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_GPF\">DIE_GPF</a>, \"general protection fault\", <a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_code\">error_code</a>, 13, <a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>) == <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#die\">die</a>(\"general protection fault\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void", 
"<a class=\"id\" href=\"#mem_parity_error\">mem_parity_error</a>(unsigned char <a class=\"id\" href=\"#reason\">reason</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"Uhhuh. NMI received for unknown reason %02x on CPU %d.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reason\">reason</a>, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"You have some hardware problem, likely on the PCI bus.\\n\");", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_EDAC\">CONFIG_EDAC</a>)", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#edac_handler_set\">edac_handler_set</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#edac_atomic_assert_error\">edac_atomic_assert_error</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#panic_on_unrecovered_nmi\">panic_on_unrecovered_nmi</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"NMI: Not continuing\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"Dazed and confused, but trying to continue\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear and disable the memory parity error line. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reason\">reason</a> = (<a class=\"id\" href=\"#reason\">reason</a> &amp; 0xf) | 4;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(<a class=\"id\" href=\"#reason\">reason</a>, 0x61);", 
"}", 
"", 
"static <a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void", 
"<a class=\"id\" href=\"#io_check_error\">io_check_error</a>(unsigned char <a class=\"id\" href=\"#reason\">reason</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"NMI: IOCK error (debug interrupt?)\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_registers\">show_registers</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#panic_on_io_nmi\">panic_on_io_nmi</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"NMI IOCK error: Not continuing\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Re-enable the IOCK line, wait for a few seconds */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reason\">reason</a> = (<a class=\"id\" href=\"#reason\">reason</a> &amp; 0xf) | 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(<a class=\"id\" href=\"#reason\">reason</a>, 0x61);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 2000;", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(1000);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reason\">reason</a> &= ~8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(<a class=\"id\" href=\"#reason\">reason</a>, 0x61);", 
"}", 
"", 
"static <a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void", 
"<a class=\"id\" href=\"#unknown_nmi_error\">unknown_nmi_error</a>(unsigned char <a class=\"id\" href=\"#reason\">reason</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_NMIUNKNOWN\">DIE_NMIUNKNOWN</a>, \"nmi\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#reason\">reason</a>, 2, <a class=\"id\" href=\"#SIGINT\">SIGINT</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MCA\">CONFIG_MCA</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Might actually be able to figure out what the guilty party</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#MCA_bus\">MCA_bus</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mca_handle_nmi\">mca_handle_nmi</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"Uhhuh. NMI received for unknown reason %02x on CPU %d.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reason\">reason</a>, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"Do you have a strange power saving mode enabled?\\n\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#panic_on_unrecovered_nmi\">panic_on_unrecovered_nmi</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"NMI: Not continuing\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"Dazed and confused, but trying to continue\\n\");", 
"}", 
"", 
"static <a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#default_do_nmi\">default_do_nmi</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#reason\">reason</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only the BSP gets external NMIs from the system. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reason\">reason</a> = <a class=\"id\" href=\"#get_nmi_reason\">get_nmi_reason</a>();", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#reason\">reason</a> &amp; 0xc0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_NMI_IPI\">DIE_NMI_IPI</a>, \"nmi_ipi\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#reason\">reason</a>, 2, <a class=\"id\" href=\"#SIGINT\">SIGINT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>== <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_NMI\">DIE_NMI</a>, \"nmi\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#reason\">reason</a>, 2, <a class=\"id\" href=\"#SIGINT\">SIGINT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>== <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_LOCKUP_DETECTOR\">CONFIG_LOCKUP_DETECTOR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ok, so this is none of the documented NMI sources,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so it must be the NMI watchdog.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog_tick\">nmi_watchdog_tick</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#reason\">reason</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#do_nmi_callback\">do_nmi_callback</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#cpu\">cpu</a>))", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_LOCKUP_DETECTOR */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unknown_nmi_error\">unknown_nmi_error</a>(<a class=\"id\" href=\"#reason\">reason</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unknown_nmi_error\">unknown_nmi_error</a>(<a class=\"id\" href=\"#reason\">reason</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_NMI\">DIE_NMI</a>, \"nmi\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#reason\">reason</a>, 2, <a class=\"id\" href=\"#SIGINT\">SIGINT</a>) == <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* AK: following checks seem to be broken on modern chipsets. FIXME */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reason\">reason</a> &amp; 0x80)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_parity_error\">mem_parity_error</a>(<a class=\"id\" href=\"#reason\">reason</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reason\">reason</a> &amp; 0x40)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_check_error\">io_check_error</a>(<a class=\"id\" href=\"#reason\">reason</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reassert NMI in case it became active meanwhile</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as it's edge-triggered:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reassert_nmi\">reassert_nmi</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<a class=\"id\" href=\"#dotraplinkage\">dotraplinkage</a> <a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void", 
"<a class=\"id\" href=\"#do_nmi\">do_nmi</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nmi_enter\">nmi_enter</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_irq_stat\">inc_irq_stat</a>(<a class=\"id\" href=\"#__nmi_count\">__nmi_count</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ignore_nmis\">ignore_nmis</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#default_do_nmi\">default_do_nmi</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nmi_exit\">nmi_exit</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#stop_nmi\">stop_nmi</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_nmi_disable\">acpi_nmi_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ignore_nmis\">ignore_nmis</a>++;", 
"}", 
"", 
"void <a class=\"id\" href=\"#restart_nmi\">restart_nmi</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ignore_nmis\">ignore_nmis</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_nmi_enable\">acpi_nmi_enable</a>();", 
"}", 
"", 
"<span class=\"comment\">/* May run on IST stack. */</span>", 
"<a class=\"id\" href=\"#dotraplinkage\">dotraplinkage</a> void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#do_int3\">do_int3</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KGDB_LOW_LEVEL_TRAP\">CONFIG_KGDB_LOW_LEVEL_TRAP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_ll_trap\">kgdb_ll_trap</a>(<a class=\"id\" href=\"#DIE_INT3\">DIE_INT3</a>, \"int3\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, 3, <a class=\"id\" href=\"#SIGTRAP\">SIGTRAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>== <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_KGDB_LOW_LEVEL_TRAP */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KPROBES\">CONFIG_KPROBES</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_INT3\">DIE_INT3</a>, \"int3\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, 3, <a class=\"id\" href=\"#SIGTRAP\">SIGTRAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>== <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"#else", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_TRAP\">DIE_TRAP</a>, \"int3\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, 3, <a class=\"id\" href=\"#SIGTRAP\">SIGTRAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>== <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_conditional_sti\">preempt_conditional_sti</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_trap\">do_trap</a>(3, <a class=\"id\" href=\"#SIGTRAP\">SIGTRAP</a>, \"int3\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_conditional_cli\">preempt_conditional_cli</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Help handler running on IST stack to switch back to user stack</span>", 
"<span class=\"comment\"> * for scheduling or signal handling. The actual stack switch is done in</span>", 
"<span class=\"comment\"> * entry.S</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> <a class=\"id\" href=\"#__kprobes\">__kprobes</a> struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#sync_regs\">sync_regs</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#eregs\">eregs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#eregs\">eregs</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Did already sync */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#eregs\">eregs</a> == (struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *)<a class=\"id\" href=\"#eregs\">eregs</a>-><a class=\"id\" href=\"#sp\">sp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Exception from user space */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#eregs\">eregs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Exception from kernel and interrupts are enabled. Move to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernel process stack.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#eregs\">eregs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a> = (struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *)(<a class=\"id\" href=\"#eregs\">eregs</a>-><a class=\"id\" href=\"#sp\">sp</a> -= sizeof(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#eregs\">eregs</a> != <a class=\"id\" href=\"#regs\">regs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#regs\">regs</a> = *<a class=\"id\" href=\"#eregs\">eregs</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#regs\">regs</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Our handling of the processor debug registers is non-trivial.</span>", 
"<span class=\"comment\"> * We do not clear them on entry and exit from the kernel. Therefore</span>", 
"<span class=\"comment\"> * it is possible to get a watchpoint trap here from inside the kernel.</span>", 
"<span class=\"comment\"> * However, the code in ./ptrace.c has ensured that the user can</span>", 
"<span class=\"comment\"> * only set watchpoints on userspace addresses. Therefore the in-kernel</span>", 
"<span class=\"comment\"> * watchpoint trap can only occur in code which is reading/writing</span>", 
"<span class=\"comment\"> * from user space. Such code must not hold kernel locks (since it</span>", 
"<span class=\"comment\"> * can equally take a page fault), therefore it is safe to call</span>", 
"<span class=\"comment\"> * force_sig_info even though that claims and releases locks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Code in ./signal.c ensures that the debug control register</span>", 
"<span class=\"comment\"> * is restored before we deliver any signal, and therefore that</span>", 
"<span class=\"comment\"> * user code runs with the correct debug control register even though</span>", 
"<span class=\"comment\"> * we clear it here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Being careful here means that we don't have to be as careful in a</span>", 
"<span class=\"comment\"> * lot of more complicated places (task switching can be a bit lazy</span>", 
"<span class=\"comment\"> * about restoring all the debug state, and ptrace doesn't have to</span>", 
"<span class=\"comment\"> * find every occurrence of the TF bit that could be saved away even</span>", 
"<span class=\"comment\"> * by user code)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * May run on IST stack.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#dotraplinkage\">dotraplinkage</a> void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#do_debug\">do_debug</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#user_icebp\">user_icebp</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dr6\">dr6</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#si_code\">si_code</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_debugreg\">get_debugreg</a>(<a class=\"id\" href=\"#dr6\">dr6</a>, 6);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Filter out all the reserved bits which are preset to 1 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr6\">dr6</a> &= ~<a class=\"id\" href=\"#DR6_RESERVED\">DR6_RESERVED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If dr6 has no reason to give us about the origin of this trap,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then it's very likely the result of an icebp/int01 trap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * User wants a sigtrap for that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dr6\">dr6</a> && <a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user_icebp\">user_icebp</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Catch kmemcheck conditions first of all! */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dr6\">dr6</a> &amp; <a class=\"id\" href=\"#DR_STEP\">DR_STEP</a>) && <a class=\"id\" href=\"#kmemcheck_trap\">kmemcheck_trap</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* DR6 may or may not be cleared by the CPU */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(0, 6);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The processor cleared BTF, so don't mark that we need it set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_thread_flag\">clear_tsk_thread_flag</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#TIF_BLOCKSTEP\">TIF_BLOCKSTEP</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Store the virtualized DR6 value */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#debugreg6\">debugreg6</a> = <a class=\"id\" href=\"#dr6\">dr6</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_DEBUG\">DIE_DEBUG</a>, \"debug\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(&amp;<a class=\"id\" href=\"#dr6\">dr6</a>), <a class=\"id\" href=\"#error_code\">error_code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SIGTRAP\">SIGTRAP</a>) == <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* It's safe to allow irq's after DR6 has been saved */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_conditional_sti\">preempt_conditional_sti</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#X86_VM_MASK\">X86_VM_MASK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle_vm86_trap\">handle_vm86_trap</a>((struct <a class=\"id\" href=\"#kernel_vm86_regs\">kernel_vm86_regs</a> *) <a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_code\">error_code</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Single-stepping through system calls: ignore any exceptions in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernel space, but re-enable TF when returning to user mode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We already checked v86 mode above, so we can check for kernel mode</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by just checking the CPL of CS.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dr6\">dr6</a> &amp; <a class=\"id\" href=\"#DR_STEP\">DR_STEP</a>) && !<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#debugreg6\">debugreg6</a> &= ~<a class=\"id\" href=\"#DR_STEP\">DR_STEP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#TIF_SINGLESTEP\">TIF_SINGLESTEP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#get_si_code\">get_si_code</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#debugreg6\">debugreg6</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#debugreg6\">debugreg6</a> &amp; (<a class=\"id\" href=\"#DR_STEP\">DR_STEP</a> | <a class=\"id\" href=\"#DR_TRAP_BITS\">DR_TRAP_BITS</a>) || <a class=\"id\" href=\"#user_icebp\">user_icebp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sigtrap\">send_sigtrap</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#si_code\">si_code</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_conditional_cli\">preempt_conditional_cli</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note that we play around with the 'TS' bit in an attempt to get</span>", 
"<span class=\"comment\"> * the correct behaviour even in the presence of the asynchronous</span>", 
"<span class=\"comment\"> * IRQ13 behaviour</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#math_error\">math_error</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, int <a class=\"id\" href=\"#error_code\">error_code</a>, int <a class=\"id\" href=\"#trapnr\">trapnr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#str\">str</a> = (<a class=\"id\" href=\"#trapnr\">trapnr</a> == 16) ? \"fpu exception\" : \"simd exception\";", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_TRAP\">DIE_TRAP</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, <a class=\"id\" href=\"#trapnr\">trapnr</a>, <a class=\"id\" href=\"#SIGFPE\">SIGFPE</a>) == <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#conditional_sti\">conditional_sti</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#user_mode_vm\">user_mode_vm</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fixup_exception\">fixup_exception</a>(<a class=\"id\" href=\"#regs\">regs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#error_code\">error_code</a> = <a class=\"id\" href=\"#error_code\">error_code</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#trap_no\">trap_no</a> = <a class=\"id\" href=\"#trapnr\">trapnr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#die\">die</a>(<a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Save the info for the exception handler and clear the error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_init_fpu\">save_init_fpu</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#trap_no\">trap_no</a> = <a class=\"id\" href=\"#trapnr\">trapnr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#error_code\">error_code</a> = <a class=\"id\" href=\"#error_code\">error_code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a> = <a class=\"id\" href=\"#SIGFPE\">SIGFPE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_errno\">si_errno</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_addr\">si_addr</a> = (void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#trapnr\">trapnr</a> == 16) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#cwd\">cwd</a>, <a class=\"id\" href=\"#swd\">swd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (~cwd &amp; swd) will mask out exceptions that are not set to unmasked</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * status.  0x3f is the exception bits in these regs, 0x200 is the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * C1 reg you need in case of a stack fault, 0x040 is the stack</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fault bit.  We should only be taking one exception at a time,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so if this combination doesn't produce any single exception,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then we have a bad program that isn't synchronizing its FPU usage</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and it will suffer the consequences since we won't be able to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fully reproduce the context of the exception</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cwd\">cwd</a> = <a class=\"id\" href=\"#get_fpu_cwd\">get_fpu_cwd</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swd\">swd</a> = <a class=\"id\" href=\"#get_fpu_swd\">get_fpu_swd</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#swd\">swd</a> &amp; ~<a class=\"id\" href=\"#cwd\">cwd</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The SIMD FPU exceptions are handled a little differently, as there</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is only a single status/control register.  Thus, to determine which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unmasked exception was caught we must mask the exception mask bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * at 0x1f80, and then use these to mask the exception bits at 0x3f.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#mxcsr\">mxcsr</a> = <a class=\"id\" href=\"#get_fpu_mxcsr\">get_fpu_mxcsr</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = ~(<a class=\"id\" href=\"#mxcsr\">mxcsr</a> >> 7) &amp; <a class=\"id\" href=\"#mxcsr\">mxcsr</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &amp; 0x001) {<span class=\"ts\"/><span class=\"comment\">/* Invalid op */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * swd &amp; 0x240 == 0x040: Stack Underflow</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * swd &amp; 0x240 == 0x240: Stack Overflow</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * User must clear the SF bit (0x40) if set</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#FPE_FLTINV\">FPE_FLTINV</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#err\">err</a> &amp; 0x004) { <span class=\"comment\">/* Divide by Zero */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#FPE_FLTDIV\">FPE_FLTDIV</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#err\">err</a> &amp; 0x008) { <span class=\"comment\">/* Overflow */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#FPE_FLTOVF\">FPE_FLTOVF</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#err\">err</a> &amp; 0x012) { <span class=\"comment\">/* Denormal, Underflow */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#FPE_FLTUND\">FPE_FLTUND</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#err\">err</a> &amp; 0x020) { <span class=\"comment\">/* Precision */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#FPE_FLTRES\">FPE_FLTRES</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we're using IRQ 13, or supposedly even some trap 16</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * implementations, it's possible we get a spurious trap...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Spurious trap, no error */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_sig_info\">force_sig_info</a>(<a class=\"id\" href=\"#SIGFPE\">SIGFPE</a>, &amp;<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#task\">task</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#dotraplinkage\">dotraplinkage</a> void <a class=\"id\" href=\"#do_coprocessor_error\">do_coprocessor_error</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ignore_fpu_irq\">ignore_fpu_irq</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#math_error\">math_error</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, 16);", 
"}", 
"", 
"<a class=\"id\" href=\"#dotraplinkage\">dotraplinkage</a> void", 
"<a class=\"id\" href=\"#do_simd_coprocessor_error\">do_simd_coprocessor_error</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#math_error\">math_error</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, 19);", 
"}", 
"", 
"<a class=\"id\" href=\"#dotraplinkage\">dotraplinkage</a> void", 
"<a class=\"id\" href=\"#do_spurious_interrupt_bug\">do_spurious_interrupt_bug</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#conditional_sti\">conditional_sti</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"#if 0", 
"<span class=\"ts\"/><span class=\"comment\">/* No need to warn about this any longer. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Ignoring P6 Local APIC Spurious Interrupt Bug...\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>)) <a class=\"id\" href=\"#smp_thermal_interrupt\">smp_thermal_interrupt</a>(void)", 
"{", 
"}", 
"", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>)) <a class=\"id\" href=\"#smp_threshold_interrupt\">smp_threshold_interrupt</a>(void)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __math_state_restore assumes that cr0.TS is already clear and the</span>", 
"<span class=\"comment\"> * fpu state is all ready for use.  Used during context switch.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__math_state_restore\">__math_state_restore</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Paranoid restore. send a SIGSEGV if we fail to restore the state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#restore_fpu_checking\">restore_fpu_checking</a>(<a class=\"id\" href=\"#tsk\">tsk</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stts\">stts</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_sig\">force_sig</a>(<a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#TS_USEDFPU\">TS_USEDFPU</a>;<span class=\"ts\"/><span class=\"comment\">/* So we fnsave on switch_to() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#fpu_counter\">fpu_counter</a>++;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * 'math_state_restore()' saves the current math information in the</span>", 
"<span class=\"comment\"> * old math state array, and gets the new ones from the current task</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Careful.. There are problems with IBM-designed IRQ13 behaviour.</span>", 
"<span class=\"comment\"> * Don't touch unless you *really* know how it works.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with kernel preemption disabled (in this case,</span>", 
"<span class=\"comment\"> * local interrupts are disabled at the call-site in entry.S).</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#math_state_restore\">math_state_restore</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk_used_math\">tsk_used_math</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * does a slab alloc which can sleep</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#init_fpu\">init_fpu</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ran out of memory!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_group_exit\">do_group_exit</a>(<a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clts\">clts</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Allow maths ops (or we recurse) */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__math_state_restore\">__math_state_restore</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#math_state_restore\">math_state_restore</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_MATH_EMULATION\">CONFIG_MATH_EMULATION</a>", 
"void <a class=\"id\" href=\"#math_emulate\">math_emulate</a>(struct <a class=\"id\" href=\"#math_emu_info\">math_emu_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"math-emulation not enabled and no coprocessor found.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"killing %s.\\n\", <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_sig\">force_sig</a>(<a class=\"id\" href=\"#SIGFPE\">SIGFPE</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MATH_EMULATION */</span>", 
"", 
"<a class=\"id\" href=\"#dotraplinkage\">dotraplinkage</a> void <a class=\"id\" href=\"#__kprobes\">__kprobes</a>", 
"<a class=\"id\" href=\"#do_device_not_available\">do_device_not_available</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_cr0\">read_cr0</a>() &amp; <a class=\"id\" href=\"#X86_CR0_EM\">X86_CR0_EM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#math_emu_info\">math_emu_info</a> <a class=\"id\" href=\"#info\">info</a> = { };", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#conditional_sti\">conditional_sti</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#regs\">regs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#math_emulate\">math_emulate</a>(&amp;<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#math_state_restore\">math_state_restore</a>(); <span class=\"comment\">/* interrupts still off */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#conditional_sti\">conditional_sti</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/>}", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#math_state_restore\">math_state_restore</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<a class=\"id\" href=\"#dotraplinkage\">dotraplinkage</a> void <a class=\"id\" href=\"#do_iret_error\">do_iret_error</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#error_code\">error_code</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a> = <a class=\"id\" href=\"#SIGILL\">SIGILL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_errno\">si_errno</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_code\">si_code</a> = <a class=\"id\" href=\"#ILL_BADSTK\">ILL_BADSTK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#si_addr\">si_addr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_die\">notify_die</a>(<a class=\"id\" href=\"#DIE_TRAP\">DIE_TRAP</a>, \"iret exception\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, 32, <a class=\"id\" href=\"#SIGILL\">SIGILL</a>) == <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_trap\">do_trap</a>(32, <a class=\"id\" href=\"#SIGILL\">SIGILL</a>, \"iret exception\", <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#error_code\">error_code</a>, &amp;<a class=\"id\" href=\"#info\">info</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Set of traps needed for early debugging. */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_trap_init\">early_trap_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate_ist\">set_intr_gate_ist</a>(1, &amp;<a class=\"id\" href=\"#debug\">debug</a>, <a class=\"id\" href=\"#DEBUG_STACK\">DEBUG_STACK</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* int3 can be called from all */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_system_intr_gate_ist\">set_system_intr_gate_ist</a>(3, &amp;<a class=\"id\" href=\"#int3\">int3</a>, <a class=\"id\" href=\"#DEBUG_STACK\">DEBUG_STACK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(14, &amp;<a class=\"id\" href=\"#page_fault\">page_fault</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_idt\">load_idt</a>(&amp;<a class=\"id\" href=\"#idt_descr\">idt_descr</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#trap_init\">trap_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_EISA\">CONFIG_EISA</a>", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#early_ioremap\">early_ioremap</a>(0x0FFFD9, 4);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#p\">p</a>) == 'E' + ('I'<<8) + ('S'<<16) + ('A'<<24))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EISA_bus\">EISA_bus</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_iounmap\">early_iounmap</a>(<a class=\"id\" href=\"#p\">p</a>, 4);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(0, &amp;<a class=\"id\" href=\"#divide_error\">divide_error</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate_ist\">set_intr_gate_ist</a>(2, &amp;<a class=\"id\" href=\"#nmi\">nmi</a>, <a class=\"id\" href=\"#NMI_STACK\">NMI_STACK</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* int4 can be called from all */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_system_intr_gate\">set_system_intr_gate</a>(4, &amp;<a class=\"id\" href=\"#overflow\">overflow</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(5, &amp;<a class=\"id\" href=\"#bounds\">bounds</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(6, &amp;<a class=\"id\" href=\"#invalid_op\">invalid_op</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(7, &amp;<a class=\"id\" href=\"#device_not_available\">device_not_available</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_task_gate\">set_task_gate</a>(8, <a class=\"id\" href=\"#GDT_ENTRY_DOUBLEFAULT_TSS\">GDT_ENTRY_DOUBLEFAULT_TSS</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate_ist\">set_intr_gate_ist</a>(8, &amp;<a class=\"id\" href=\"#double_fault\">double_fault</a>, <a class=\"id\" href=\"#DOUBLEFAULT_STACK\">DOUBLEFAULT_STACK</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(9, &amp;<a class=\"id\" href=\"#coprocessor_segment_overrun\">coprocessor_segment_overrun</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(10, &amp;<a class=\"id\" href=\"#invalid_TSS\">invalid_TSS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(11, &amp;<a class=\"id\" href=\"#segment_not_present\">segment_not_present</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate_ist\">set_intr_gate_ist</a>(12, &amp;<a class=\"id\" href=\"#stack_segment\">stack_segment</a>, <a class=\"id\" href=\"#STACKFAULT_STACK\">STACKFAULT_STACK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(13, &amp;<a class=\"id\" href=\"#general_protection\">general_protection</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(15, &amp;<a class=\"id\" href=\"#spurious_interrupt_bug\">spurious_interrupt_bug</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(16, &amp;<a class=\"id\" href=\"#coprocessor_error\">coprocessor_error</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(17, &amp;<a class=\"id\" href=\"#alignment_check\">alignment_check</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_MCE\">CONFIG_X86_MCE</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate_ist\">set_intr_gate_ist</a>(18, &amp;<a class=\"id\" href=\"#machine_check\">machine_check</a>, <a class=\"id\" href=\"#MCE_STACK\">MCE_STACK</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(19, &amp;<a class=\"id\" href=\"#simd_coprocessor_error\">simd_coprocessor_error</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reserve all the builtin and the syscall vector: */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#FIRST_EXTERNAL_VECTOR\">FIRST_EXTERNAL_VECTOR</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#used_vectors\">used_vectors</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IA32_EMULATION\">CONFIG_IA32_EMULATION</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_system_intr_gate\">set_system_intr_gate</a>(<a class=\"id\" href=\"#IA32_SYSCALL_VECTOR\">IA32_SYSCALL_VECTOR</a>, <a class=\"id\" href=\"#ia32_syscall\">ia32_syscall</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#IA32_SYSCALL_VECTOR\">IA32_SYSCALL_VECTOR</a>, <a class=\"id\" href=\"#used_vectors\">used_vectors</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_fxsr\">cpu_has_fxsr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Enabling fast FPU save and restore... \");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_in_cr4\">set_in_cr4</a>(<a class=\"id\" href=\"#X86_CR4_OSFXSR\">X86_CR4_OSFXSR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"done.\\n\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_xmm\">cpu_has_xmm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Enabling unmasked SIMD FPU exception support... \");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_in_cr4\">set_in_cr4</a>(<a class=\"id\" href=\"#X86_CR4_OSXMMEXCPT\">X86_CR4_OSXMMEXCPT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"done.\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_system_trap_gate\">set_system_trap_gate</a>(<a class=\"id\" href=\"#SYSCALL_VECTOR\">SYSCALL_VECTOR</a>, &amp;<a class=\"id\" href=\"#system_call\">system_call</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#SYSCALL_VECTOR\">SYSCALL_VECTOR</a>, <a class=\"id\" href=\"#used_vectors\">used_vectors</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Should be a barrier for any external CPU state:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_init\">cpu_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#irqs\">irqs</a>.<a class=\"id\" href=\"#trap_init\">trap_init</a>();", 
"}", 
];
xr_frag_insert('l/98/b3f2fbc966195b2972a80618a0203bbf4c6a4f.xr', __xr_tmp);
