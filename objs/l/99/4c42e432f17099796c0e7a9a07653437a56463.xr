var __xr_tmp = [
"static void <a class=\"id\" href=\"#release_tgcred\">release_tgcred</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEYS\">CONFIG_KEYS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_group_cred\">thread_group_cred</a> *<a class=\"id\" href=\"#tgcred\">tgcred</a> = <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#tgcred\">tgcred</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#tgcred\">tgcred</a>-><a class=\"id\" href=\"#usage\">usage</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#tgcred\">tgcred</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#release_tgcred_rcu\">release_tgcred_rcu</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The RCU callback to actually dispose of a set of credentials</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#put_cred_rcu\">put_cred_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu\">rcu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#rcu\">rcu</a>, struct <a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"put_cred_rcu(%p)\", <a class=\"id\" href=\"#cred\">cred</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_CREDENTIALS\">CONFIG_DEBUG_CREDENTIALS</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#magic\">magic</a> != <a class=\"id\" href=\"#CRED_MAGIC_DEAD\">CRED_MAGIC_DEAD</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#usage\">usage</a>) != 0 ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#cred\">cred</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"CRED: put_cred_rcu() sees %p with\"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \" mag %x, put %p, usage %d, subscr %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#magic\">magic</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#put_addr\">put_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#usage\">usage</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#cred\">cred</a>));", 
"#else", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#usage\">usage</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"CRED: put_cred_rcu() sees %p with usage %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#usage\">usage</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_cred_free\">security_cred_free</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#thread_keyring\">thread_keyring</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#request_key_auth\">request_key_auth</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_tgcred\">release_tgcred</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#group_info\">group_info</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_group_info\">put_group_info</a>(<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#group_info\">group_info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_uid\">free_uid</a>(<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#user\">user</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#cred_jar\">cred_jar</a>, <a class=\"id\" href=\"#cred\">cred</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __put_cred - Destroy a set of credentials</span>", 
"<span class=\"comment\"> * @cred: The record to release</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Destroy a set of credentials on which no references remain.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__put_cred\">__put_cred</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"__put_cred(%p{%d,%d})\", <a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#usage\">usage</a>),", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#cred\">cred</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#usage\">usage</a>) != 0);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_CREDENTIALS\">CONFIG_DEBUG_CREDENTIALS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#cred\">cred</a>) != 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#magic\">magic</a> = <a class=\"id\" href=\"#CRED_MAGIC_DEAD\">CRED_MAGIC_DEAD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#put_addr\">put_addr</a> = <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cred\">cred</a> == <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cred\">cred</a> == <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#put_cred_rcu\">put_cred_rcu</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__put_cred\">__put_cred</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clean up a task's credentials when it exits</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#exit_creds\">exit_creds</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"exit_creds(%u,%p,%p,{%d,%d})\", <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#usage\">usage</a>),", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a> = (struct <a class=\"id\" href=\"#cred\">cred</a> *) <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alter_cred_subscribers\">alter_cred_subscribers</a>(<a class=\"id\" href=\"#cred\">cred</a>, -1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a> = (struct <a class=\"id\" href=\"#cred\">cred</a> *) <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alter_cred_subscribers\">alter_cred_subscribers</a>(<a class=\"id\" href=\"#cred\">cred</a>, -1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a> = (struct <a class=\"id\" href=\"#cred\">cred</a> *) <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#replacement_session_keyring\">replacement_session_keyring</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cred\">cred</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#replacement_session_keyring\">replacement_session_keyring</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_task_cred - Get another task's objective credentials</span>", 
"<span class=\"comment\"> * @task: The task to query</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Get the objective credentials of a task, pinning them so that they can't go</span>", 
"<span class=\"comment\"> * away.  Accessing a task's credentials directly is not permitted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must also make sure task doesn't get deleted, either by holding a</span>", 
"<span class=\"comment\"> * ref on task or by holding tasklist_lock to prevent it from being unlinked.</span>", 
"<span class=\"comment\"> */</span>", 
"const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#get_task_cred\">get_task_cred</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>((<a class=\"id\" href=\"#task\">task</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/>} while (!<a class=\"id\" href=\"#atomic_inc_not_zero\">atomic_inc_not_zero</a>(&amp;((struct <a class=\"id\" href=\"#cred\">cred</a> *)<a class=\"id\" href=\"#cred\">cred</a>)-><a class=\"id\" href=\"#usage\">usage</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cred\">cred</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate blank credentials, such that the credentials can be filled in at a</span>", 
"<span class=\"comment\"> * later date without risk of ENOMEM.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred_alloc_blank\">cred_alloc_blank</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#cred_jar\">cred_jar</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEYS\">CONFIG_KEYS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#tgcred\">tgcred</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#tgcred\">tgcred</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#tgcred\">tgcred</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#cred_jar\">cred_jar</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#tgcred\">tgcred</a>-><a class=\"id\" href=\"#usage\">usage</a>, 1);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#usage\">usage</a>, 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#security_cred_alloc_blank\">security_cred_alloc_blank</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_CREDENTIALS\">CONFIG_DEBUG_CREDENTIALS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#magic\">magic</a> = <a class=\"id\" href=\"#CRED_MAGIC\">CRED_MAGIC</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#abort_creds\">abort_creds</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * prepare_creds - Prepare a new set of credentials for modification</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Prepare a new set of task credentials for modification.  A task's creds</span>", 
"<span class=\"comment\"> * shouldn't generally be modified directly, therefore this function is used to</span>", 
"<span class=\"comment\"> * prepare a new copy, which the caller then modifies and then commits by</span>", 
"<span class=\"comment\"> * calling commit_creds().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Preparation involves making a copy of the objective creds for modification.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer to the new creds-to-be if successful, NULL otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call commit_creds() or abort_creds() to clean up.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#prepare_creds\">prepare_creds</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_process_creds\">validate_process_creds</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#cred_jar\">cred_jar</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"prepare_creds() alloc %p\", <a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#cred\">cred</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>, sizeof(struct <a class=\"id\" href=\"#cred\">cred</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#usage\">usage</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cred_subscribers\">set_cred_subscribers</a>(<a class=\"id\" href=\"#new\">new</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_group_info\">get_group_info</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#group_info\">group_info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_uid\">get_uid</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#user\">user</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEYS\">CONFIG_KEYS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_get\">key_get</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread_keyring\">thread_keyring</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_get\">key_get</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#request_key_auth\">request_key_auth</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#tgcred\">tgcred</a>-><a class=\"id\" href=\"#usage\">usage</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SECURITY\">CONFIG_SECURITY</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#security_prepare_creds\">security_prepare_creds</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#abort_creds\">abort_creds</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#prepare_creds\">prepare_creds</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prepare credentials for current to perform an execve()</span>", 
"<span class=\"comment\"> * - The caller must hold current-&gt;cred_guard_mutex</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#prepare_exec_creds\">prepare_exec_creds</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_group_cred\">thread_group_cred</a> *<a class=\"id\" href=\"#tgcred\">tgcred</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEYS\">CONFIG_KEYS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tgcred\">tgcred</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#tgcred\">tgcred</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tgcred\">tgcred</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#prepare_creds\">prepare_creds</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tgcred\">tgcred</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEYS\">CONFIG_KEYS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* newly exec'd tasks don't get a thread keyring */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread_keyring\">thread_keyring</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread_keyring\">thread_keyring</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* create a new per-thread-group creds for all this set of threads to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * share */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#tgcred\">tgcred</a>, <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#tgcred\">tgcred</a>, sizeof(struct <a class=\"id\" href=\"#thread_group_cred\">thread_group_cred</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#tgcred\">tgcred</a>-><a class=\"id\" href=\"#usage\">usage</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#tgcred\">tgcred</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* inherit the session keyring; new process keyring */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_get\">key_get</a>(<a class=\"id\" href=\"#tgcred\">tgcred</a>-><a class=\"id\" href=\"#session_keyring\">session_keyring</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tgcred\">tgcred</a>-><a class=\"id\" href=\"#process_keyring\">process_keyring</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_tgcred\">release_tgcred</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#tgcred\">tgcred</a> = <a class=\"id\" href=\"#tgcred\">tgcred</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new\">new</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copy credentials for the new process created by fork()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We share if we can, but under some circumstances we have to generate a new</span>", 
"<span class=\"comment\"> * set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The new process gets the current process's subjective credentials as its</span>", 
"<span class=\"comment\"> * objective and subjective credentials</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#copy_creds\">copy_creds</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEYS\">CONFIG_KEYS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_group_cred\">thread_group_cred</a> *<a class=\"id\" href=\"#tgcred\">tgcred</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cred_guard_mutex\">cred_guard_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEYS\">CONFIG_KEYS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#thread_keyring\">thread_keyring</a> &&", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_THREAD\">CLONE_THREAD</a>", 
"<span class=\"ts\"/>    ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a> = <a class=\"id\" href=\"#get_cred\">get_cred</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_cred\">get_cred</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alter_cred_subscribers\">alter_cred_subscribers</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cred\">cred</a>, 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"share_creds(%p{%d,%d})\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#usage\">usage</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cred\">cred</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#processes\">processes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#prepare_creds\">prepare_creds</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_NEWUSER\">CLONE_NEWUSER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#create_user_ns\">create_user_ns</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_put\">error_put</a>;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEYS\">CONFIG_KEYS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* new threads get their own thread keyrings if their parent already</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * had one */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread_keyring\">thread_keyring</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread_keyring\">thread_keyring</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread_keyring\">thread_keyring</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_THREAD\">CLONE_THREAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#install_thread_keyring_to_cred\">install_thread_keyring_to_cred</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we share the process and session keyrings between all the threads in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a process - this is slightly icky as we violate COW credentials a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bit */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_THREAD\">CLONE_THREAD</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tgcred\">tgcred</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#tgcred\">tgcred</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tgcred\">tgcred</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_put\">error_put</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#tgcred\">tgcred</a>-><a class=\"id\" href=\"#usage\">usage</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#tgcred\">tgcred</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tgcred\">tgcred</a>-><a class=\"id\" href=\"#process_keyring\">process_keyring</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tgcred\">tgcred</a>-><a class=\"id\" href=\"#session_keyring\">session_keyring</a> = <a class=\"id\" href=\"#key_get\">key_get</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#tgcred\">tgcred</a>-><a class=\"id\" href=\"#session_keyring\">session_keyring</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_tgcred\">release_tgcred</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#tgcred\">tgcred</a> = <a class=\"id\" href=\"#tgcred\">tgcred</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#processes\">processes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a> = <a class=\"id\" href=\"#get_cred\">get_cred</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alter_cred_subscribers\">alter_cred_subscribers</a>(<a class=\"id\" href=\"#new\">new</a>, 2);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#error_put\">error_put</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * commit_creds - Install new credentials upon the current task</span>", 
"<span class=\"comment\"> * @new: The credentials to be assigned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Install a new set of credentials to the current task, using RCU to replace</span>", 
"<span class=\"comment\"> * the old set.  Both the objective and the subjective credentials pointers are</span>", 
"<span class=\"comment\"> * updated.  This function may not be called if the subjective credentials are</span>", 
"<span class=\"comment\"> * in an overridden state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function eats the caller's reference to the new credentials.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Always returns 0 thus allowing this function to be tail-called at the end</span>", 
"<span class=\"comment\"> * of, say, sys_setgid().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#commit_creds\">commit_creds</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"commit_creds(%p{%d,%d})\", <a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#usage\">usage</a>),", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#new\">new</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#cred\">cred</a> != <a class=\"id\" href=\"#old\">old</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_CREDENTIALS\">CONFIG_DEBUG_CREDENTIALS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#old\">old</a>) &lt; 2);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#usage\">usage</a>) &lt; 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_cred\">get_cred</a>(<a class=\"id\" href=\"#new\">new</a>); <span class=\"comment\">/* we will require a ref for the subj creds too */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* dumpability changes */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#euid\">euid</a> != <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#euid\">euid</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#egid\">egid</a> != <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#egid\">egid</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a> != <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#fsgid\">fsgid</a> != <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fsgid\">fsgid</a> ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#cap_issubset\">cap_issubset</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>, <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_dumpable\">set_dumpable</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#suid_dumpable\">suid_dumpable</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pdeath_signal\">pdeath_signal</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* alter the thread keyring */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a> != <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_fsuid_changed\">key_fsuid_changed</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fsgid\">fsgid</a> != <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#fsgid\">fsgid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_fsgid_changed\">key_fsgid_changed</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - What if a process setreuid()'s and this brings the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   new uid over his NPROC rlimit?  We can check this now</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   cheaply with the new uid cache, so if it matters</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   we should be checking for it.  -DaveM</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alter_cred_subscribers\">alter_cred_subscribers</a>(<a class=\"id\" href=\"#new\">new</a>, 2);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#user\">user</a> != <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#user\">user</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#processes\">processes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#user\">user</a> != <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#user\">user</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#processes\">processes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alter_cred_subscribers\">alter_cred_subscribers</a>(<a class=\"id\" href=\"#old\">old</a>, -2);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* send notifications */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#uid\">uid</a>   != <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#uid\">uid</a>  ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#euid\">euid</a>  != <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#euid\">euid</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#suid\">suid</a>  != <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#suid\">suid</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a> != <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#proc_id_connector\">proc_id_connector</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#PROC_EVENT_UID\">PROC_EVENT_UID</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#gid\">gid</a>   != <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#gid\">gid</a>  ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#egid\">egid</a>  != <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#egid\">egid</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#sgid\">sgid</a>  != <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#sgid\">sgid</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fsgid\">fsgid</a> != <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#fsgid\">fsgid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#proc_id_connector\">proc_id_connector</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#PROC_EVENT_GID\">PROC_EVENT_GID</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* release the old obj and subj refs both */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#commit_creds\">commit_creds</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * abort_creds - Discard a set of credentials and unlock the current task</span>", 
"<span class=\"comment\"> * @new: The credentials that were going to be applied</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Discard a set of credentials that were under construction and unlock the</span>", 
"<span class=\"comment\"> * current task.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#abort_creds\">abort_creds</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"abort_creds(%p{%d,%d})\", <a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#usage\">usage</a>),", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#new\">new</a>));", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_CREDENTIALS\">CONFIG_DEBUG_CREDENTIALS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#new\">new</a>) != 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#usage\">usage</a>) &lt; 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#abort_creds\">abort_creds</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * override_creds - Override the current process's subjective credentials</span>", 
"<span class=\"comment\"> * @new: The credentials to be assigned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Install a set of temporary override subjective credentials on the current</span>", 
"<span class=\"comment\"> * process, returning the old set for later reversion.</span>", 
"<span class=\"comment\"> */</span>", 
"const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#override_creds\">override_creds</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cred\">cred</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"override_creds(%p{%d,%d})\", <a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#usage\">usage</a>),", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#new\">new</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_cred\">get_cred</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alter_cred_subscribers\">alter_cred_subscribers</a>(<a class=\"id\" href=\"#new\">new</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alter_cred_subscribers\">alter_cred_subscribers</a>(<a class=\"id\" href=\"#old\">old</a>, -1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"override_creds() = %p{%d,%d}\", <a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#usage\">usage</a>),", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#old\">old</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#old\">old</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#override_creds\">override_creds</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * revert_creds - Revert a temporary subjective credentials override</span>", 
"<span class=\"comment\"> * @old: The credentials to be restored</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Revert a temporary set of override subjective credentials to an old set,</span>", 
"<span class=\"comment\"> * discarding the override set.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#revert_creds\">revert_creds</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#override\">override</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cred\">cred</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"revert_creds(%p{%d,%d})\", <a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#usage\">usage</a>),", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#old\">old</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#override\">override</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alter_cred_subscribers\">alter_cred_subscribers</a>(<a class=\"id\" href=\"#old\">old</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alter_cred_subscribers\">alter_cred_subscribers</a>(<a class=\"id\" href=\"#override\">override</a>, -1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#override\">override</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#revert_creds\">revert_creds</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * initialise the credentials stuff</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cred_init\">cred_init</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate a slab in which we can store credentials */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred_jar\">cred_jar</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"cred_jar\", sizeof(struct <a class=\"id\" href=\"#cred\">cred</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     0, <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * prepare_kernel_cred - Prepare a set of credentials for a kernel service</span>", 
"<span class=\"comment\"> * @daemon: A userspace daemon to be used as a reference</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Prepare a set of credentials for a kernel service.  This can then be used to</span>", 
"<span class=\"comment\"> * override a task's own credentials so that work can be done on behalf of that</span>", 
"<span class=\"comment\"> * task that requires a different subjective context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @daemon is used to provide a base for the security record, but can be NULL.</span>", 
"<span class=\"comment\"> * If @daemon is supplied, then the security data will be derived from that;</span>", 
"<span class=\"comment\"> * otherwise they'll be set to 0 and no groups, full capabilities and no keys.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller may change these controls afterwards if desired.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the new credentials or NULL if out of memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Does not take, and does not return holding current-&gt;cred_replace_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#prepare_kernel_cred\">prepare_kernel_cred</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#daemon\">daemon</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#cred_jar\">cred_jar</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"prepare_kernel_cred() alloc %p\", <a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#daemon\">daemon</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#get_task_cred\">get_task_cred</a>(<a class=\"id\" href=\"#daemon\">daemon</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#get_cred\">get_cred</a>(&amp;<a class=\"id\" href=\"#init_cred\">init_cred</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#new\">new</a> = *<a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_uid\">get_uid</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#user\">user</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_group_info\">get_group_info</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#group_info\">group_info</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEYS\">CONFIG_KEYS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#init_tgcred\">init_tgcred</a>.<a class=\"id\" href=\"#usage\">usage</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#tgcred\">tgcred</a> = &amp;<a class=\"id\" href=\"#init_tgcred\">init_tgcred</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#request_key_auth\">request_key_auth</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread_keyring\">thread_keyring</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#jit_keyring\">jit_keyring</a> = <a class=\"id\" href=\"#KEY_REQKEY_DEFL_THREAD_KEYRING\">KEY_REQKEY_DEFL_THREAD_KEYRING</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SECURITY\">CONFIG_SECURITY</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#security_prepare_creds\">security_prepare_creds</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#usage\">usage</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cred_subscribers\">set_cred_subscribers</a>(<a class=\"id\" href=\"#new\">new</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#prepare_kernel_cred\">prepare_kernel_cred</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * set_security_override - Set the security ID in a set of credentials</span>", 
"<span class=\"comment\"> * @new: The credentials to alter</span>", 
"<span class=\"comment\"> * @secid: The LSM security ID to set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set the LSM security ID in a set of credentials so that the subjective</span>", 
"<span class=\"comment\"> * security is overridden when an alternative set of credentials is used.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#set_security_override\">set_security_override</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#security_kernel_act_as\">security_kernel_act_as</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#secid\">secid</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_security_override\">set_security_override</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * set_security_override_from_ctx - Set the security ID in a set of credentials</span>", 
"<span class=\"comment\"> * @new: The credentials to alter</span>", 
"<span class=\"comment\"> * @secctx: The LSM security context to generate the security ID from.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set the LSM security ID in a set of credentials so that the subjective</span>", 
"<span class=\"comment\"> * security is overridden when an alternative set of credentials is used.  The</span>", 
"<span class=\"comment\"> * security ID is specified in string form as a security context to be</span>", 
"<span class=\"comment\"> * interpreted by the LSM.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#set_security_override_from_ctx\">set_security_override_from_ctx</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, const char *<a class=\"id\" href=\"#secctx\">secctx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_secctx_to_secid\">security_secctx_to_secid</a>(<a class=\"id\" href=\"#secctx\">secctx</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#secctx\">secctx</a>), &amp;<a class=\"id\" href=\"#secid\">secid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#set_security_override\">set_security_override</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#secid\">secid</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_security_override_from_ctx\">set_security_override_from_ctx</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * set_create_files_as - Set the LSM file create context in a set of credentials</span>", 
"<span class=\"comment\"> * @new: The credentials to alter</span>", 
"<span class=\"comment\"> * @inode: The inode to take the context from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Change the LSM file creation context in a set of credentials to be the same</span>", 
"<span class=\"comment\"> * as the object context of the specified inode, so that the new inodes have</span>", 
"<span class=\"comment\"> * the same MAC context as that inode.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#set_create_files_as\">set_create_files_as</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#fsgid\">fsgid</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#security_kernel_create_files_as\">security_kernel_create_files_as</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_create_files_as\">set_create_files_as</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_CREDENTIALS\">CONFIG_DEBUG_CREDENTIALS</a>", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#creds_are_invalid\">creds_are_invalid</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#magic\">magic</a> != <a class=\"id\" href=\"#CRED_MAGIC\">CRED_MAGIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SECURITY_SELINUX\">CONFIG_SECURITY_SELINUX</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#selinux_is_enabled\">selinux_is_enabled</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((unsigned long) <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a> &lt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*(<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a> &amp; 0xffffff00) ==", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#POISON_FREE\">POISON_FREE</a> << 24 | <a class=\"id\" href=\"#POISON_FREE\">POISON_FREE</a> << 16 | <a class=\"id\" href=\"#POISON_FREE\">POISON_FREE</a> << 8))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#creds_are_invalid\">creds_are_invalid</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * dump invalid credentials</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dump_invalid_creds\">dump_invalid_creds</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>, const char *<a class=\"id\" href=\"#label\">label</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"CRED: %s credentials: %p %s%s%s\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#label\">label</a>, <a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#cred\">cred</a> == &amp;<a class=\"id\" href=\"#init_cred\">init_cred</a> ? \"[init]\" : \"\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#cred\">cred</a> == <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a> ? \"[real]\" : \"\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#cred\">cred</a> == <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a> ? \"[eff]\" : \"\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"CRED: ->magic=%x, put_addr=%p\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#magic\">magic</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#put_addr\">put_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"CRED: ->usage=%d, subscr=%d\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#usage\">usage</a>),", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#cred\">cred</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"CRED: ->*uid = { %d,%d,%d,%d }\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#suid\">suid</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"CRED: ->*gid = { %d,%d,%d,%d }\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#gid\">gid</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#egid\">egid</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#sgid\">sgid</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#fsgid\">fsgid</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SECURITY\">CONFIG_SECURITY</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"CRED: ->security is %p\\n\", <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a>);", 
"<span class=\"ts\"/>if ((unsigned long) <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a> >= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> &&", 
"<span class=\"ts\"/>    (((unsigned long) <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a> &amp; 0xffffff00) !=", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#POISON_FREE\">POISON_FREE</a> << 24 | <a class=\"id\" href=\"#POISON_FREE\">POISON_FREE</a> << 16 | <a class=\"id\" href=\"#POISON_FREE\">POISON_FREE</a> << 8)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"CRED: ->security {%x, %x}\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       ((<a class=\"id\" href=\"#u32\">u32</a>*)<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a>)[0],", 
"<span class=\"ts\"/><span class=\"ts\"/>       ((<a class=\"id\" href=\"#u32\">u32</a>*)<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a>)[1]);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * report use of invalid credentials</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__invalid_creds\">__invalid_creds</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>, const char *<a class=\"id\" href=\"#file\">file</a>, unsigned <a class=\"id\" href=\"#line\">line</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"CRED: Invalid credentials\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"CRED: At %s:%u\\n\", <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#line\">line</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_invalid_creds\">dump_invalid_creds</a>(<a class=\"id\" href=\"#cred\">cred</a>, \"Specified\", <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__invalid_creds\">__invalid_creds</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * check the credentials on a process</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__validate_process_creds\">__validate_process_creds</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#file\">file</a>, unsigned <a class=\"id\" href=\"#line\">line</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a> == <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a>) &lt; 2 ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#creds_are_invalid\">creds_are_invalid</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_creds\">invalid_creds</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a>) &lt; 1 ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a>) &lt; 1 ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#creds_are_invalid\">creds_are_invalid</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#creds_are_invalid\">creds_are_invalid</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_creds\">invalid_creds</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#invalid_creds\">invalid_creds</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"CRED: Invalid process credentials\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"CRED: At %s:%u\\n\", <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#line\">line</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_invalid_creds\">dump_invalid_creds</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a>, \"Real\", <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a> != <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_invalid_creds\">dump_invalid_creds</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a>, \"Effective\", <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"CRED: Effective creds == Real creds\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__validate_process_creds\">__validate_process_creds</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * check creds for do_exit()</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#validate_creds_for_do_exit\">validate_creds_for_do_exit</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"validate_creds_for_do_exit(%p,%p{%d,%d})\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#real_cred\">real_cred</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#usage\">usage</a>),", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#read_cred_subscribers\">read_cred_subscribers</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__validate_process_creds\">__validate_process_creds</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#__FILE__\">__FILE__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_DEBUG_CREDENTIALS */</span>", 
];
xr_frag_insert('l/99/4c42e432f17099796c0e7a9a07653437a56463.xr', __xr_tmp);
