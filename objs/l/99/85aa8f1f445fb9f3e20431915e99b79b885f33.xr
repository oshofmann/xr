var __xr_tmp = [
"<span class=\"comment\">/* thread_info.h: common low-level thread information accessors</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2002  David Howells (dhowells@redhat.com)</span>", 
"<span class=\"comment\"> * - Incorporating suggestions made by Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_THREAD_INFO_H\">_LINUX_THREAD_INFO_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_THREAD_INFO_H\">_LINUX_THREAD_INFO_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#timespec\">timespec</a>;", 
"struct <a class=\"id\" href=\"#compat_timespec\">compat_timespec</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * System call restart block.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#restart_block\">restart_block</a> {", 
"<span class=\"ts\"/>long (*<a class=\"id\" href=\"#fn\">fn</a>)(struct <a class=\"id\" href=\"#restart_block\">restart_block</a> *);", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#arg0\">arg0</a>, <a class=\"id\" href=\"#arg1\">arg1</a>, <a class=\"id\" href=\"#arg2\">arg2</a>, <a class=\"id\" href=\"#arg3\">arg3</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* For futex_wait and futex_wait_requeue_pi */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bitset\">bitset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#uaddr2\">uaddr2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#futex\">futex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* For nanosleep */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clockid_t\">clockid_t</a> <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#rmtp\">rmtp</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#compat_timespec\">compat_timespec</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#compat_rmtp\">compat_rmtp</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#expires\">expires</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#nanosleep\">nanosleep</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* For poll */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pollfd\">pollfd</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ufds\">ufds</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nfds\">nfds</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#has_timeout\">has_timeout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tv_sec\">tv_sec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#poll\">poll</a>;", 
"<span class=\"ts\"/>};", 
"};", 
"", 
"extern long <a class=\"id\" href=\"#do_no_restart_syscall\">do_no_restart_syscall</a>(struct <a class=\"id\" href=\"#restart_block\">restart_block</a> *<a class=\"id\" href=\"#parm\">parm</a>);", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#thread_info\">thread_info</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * flag set/clear/test wrappers</span>", 
"<span class=\"comment\"> * - pass TIF_xxxx constants to these functions</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_ti_thread_flag\">set_ti_thread_flag</a>(struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#ti\">ti</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#flag\">flag</a>, (unsigned long *)&amp;<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_ti_thread_flag\">clear_ti_thread_flag</a>(struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#ti\">ti</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#flag\">flag</a>, (unsigned long *)&amp;<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#test_and_set_ti_thread_flag\">test_and_set_ti_thread_flag</a>(struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#ti\">ti</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#flag\">flag</a>, (unsigned long *)&amp;<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#test_and_clear_ti_thread_flag\">test_and_clear_ti_thread_flag</a>(struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#ti\">ti</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#flag\">flag</a>, (unsigned long *)&amp;<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#test_ti_thread_flag\">test_ti_thread_flag</a>(struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#ti\">ti</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#flag\">flag</a>, (unsigned long *)&amp;<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_thread_flag\">set_thread_flag</a>(<a class=\"id\" href=\"#flag\">flag</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_ti_thread_flag\">set_ti_thread_flag</a>(<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>(), <a class=\"id\" href=\"#flag\">flag</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#clear_thread_flag\">clear_thread_flag</a>(<a class=\"id\" href=\"#flag\">flag</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_ti_thread_flag\">clear_ti_thread_flag</a>(<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>(), <a class=\"id\" href=\"#flag\">flag</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#test_and_set_thread_flag\">test_and_set_thread_flag</a>(<a class=\"id\" href=\"#flag\">flag</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#test_and_set_ti_thread_flag\">test_and_set_ti_thread_flag</a>(<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>(), <a class=\"id\" href=\"#flag\">flag</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#test_and_clear_thread_flag\">test_and_clear_thread_flag</a>(<a class=\"id\" href=\"#flag\">flag</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#test_and_clear_ti_thread_flag\">test_and_clear_ti_thread_flag</a>(<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>(), <a class=\"id\" href=\"#flag\">flag</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#flag\">flag</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#test_ti_thread_flag\">test_ti_thread_flag</a>(<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>(), <a class=\"id\" href=\"#flag\">flag</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_need_resched\">set_need_resched</a>()<span class=\"ts\"/><a class=\"id\" href=\"#set_thread_flag\">set_thread_flag</a>(<a class=\"id\" href=\"#TIF_NEED_RESCHED\">TIF_NEED_RESCHED</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#clear_need_resched\">clear_need_resched</a>()<span class=\"ts\"/><a class=\"id\" href=\"#clear_thread_flag\">clear_thread_flag</a>(<a class=\"id\" href=\"#TIF_NEED_RESCHED\">TIF_NEED_RESCHED</a>)", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#TIF_RESTORE_SIGMASK\">TIF_RESTORE_SIGMASK</a> && !<a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#HAVE_SET_RESTORE_SIGMASK\">HAVE_SET_RESTORE_SIGMASK</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * An arch can define its own version of set_restore_sigmask() to get the</span>", 
"<span class=\"comment\"> * job done however works, with or without TIF_RESTORE_SIGMASK.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_SET_RESTORE_SIGMASK\">HAVE_SET_RESTORE_SIGMASK</a><span class=\"ts\"/>1", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * set_restore_sigmask() - make sure saved_sigmask processing gets done</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This sets TIF_RESTORE_SIGMASK and ensures that the arch signal code</span>", 
"<span class=\"comment\"> * will run before returning to user mode, to process the flag.  For</span>", 
"<span class=\"comment\"> * all callers, TIF_SIGPENDING is already set or it's no harm to set</span>", 
"<span class=\"comment\"> * it.  TIF_RESTORE_SIGMASK need not be in the set of bits that the</span>", 
"<span class=\"comment\"> * arch code will notice on return to user mode, in case those bits</span>", 
"<span class=\"comment\"> * are scarce.  We set TIF_SIGPENDING here to ensure that the arch</span>", 
"<span class=\"comment\"> * signal code always gets run when TIF_RESTORE_SIGMASK is set.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_restore_sigmask\">set_restore_sigmask</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_thread_flag\">set_thread_flag</a>(<a class=\"id\" href=\"#TIF_RESTORE_SIGMASK\">TIF_RESTORE_SIGMASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_thread_flag\">set_thread_flag</a>(<a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* TIF_RESTORE_SIGMASK &amp;&amp; !HAVE_SET_RESTORE_SIGMASK */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_THREAD_INFO_H */</span>", 
];
xr_frag_insert('l/99/85aa8f1f445fb9f3e20431915e99b79b885f33.xr', __xr_tmp);
