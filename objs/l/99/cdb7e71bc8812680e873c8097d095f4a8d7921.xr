var __xr_tmp = [
"char *<a class=\"id\" href=\"#smack_from_secid\">smack_from_secid</a>(const <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_known\">smack_known</a> *<a class=\"id\" href=\"#skp\">skp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#skp\">skp</a>, &amp;<a class=\"id\" href=\"#smack_known_list\">smack_known_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_secid\">smk_secid</a> == <a class=\"id\" href=\"#secid\">secid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_known\">smk_known</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we got this far someone asked for the translation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of a secid that is not on the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smack_known_invalid\">smack_known_invalid</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_to_secid - find the secid associated with a Smack label</span>", 
"<span class=\"comment\"> * @smack: the Smack label</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the appropriate secid if there is one,</span>", 
"<span class=\"comment\"> * otherwise 0</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#smack_to_secid\">smack_to_secid</a>(const char *<a class=\"id\" href=\"#smack\">smack</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_known\">smack_known</a> *<a class=\"id\" href=\"#skp\">skp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#skp\">skp</a>, &amp;<a class=\"id\" href=\"#smack_known_list\">smack_known_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_known\">smk_known</a>, <a class=\"id\" href=\"#smack\">smack</a>, <a class=\"id\" href=\"#SMK_MAXLEN\">SMK_MAXLEN</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#skp\">skp</a>-><a class=\"id\" href=\"#smk_secid\">smk_secid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_from_cipso - find the Smack label associated with a CIPSO option</span>", 
"<span class=\"comment\"> * @level: Bell &amp; LaPadula level from the network</span>", 
"<span class=\"comment\"> * @cp: Bell &amp; LaPadula categories from the network</span>", 
"<span class=\"comment\"> * @result: where to put the Smack value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a simple lookup in the label table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is an odd duck as far as smack handling goes in that</span>", 
"<span class=\"comment\"> * it sends back a copy of the smack label rather than a pointer</span>", 
"<span class=\"comment\"> * to the master list. This is done because it is possible for</span>", 
"<span class=\"comment\"> * a foreign host to send a smack label that is new to this</span>", 
"<span class=\"comment\"> * machine and hence not on the list. That would not be an</span>", 
"<span class=\"comment\"> * issue except that adding an entry to the master list can't</span>", 
"<span class=\"comment\"> * be done at that point.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#smack_from_cipso\">smack_from_cipso</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#level\">level</a>, char *<a class=\"id\" href=\"#cp\">cp</a>, char *<a class=\"id\" href=\"#result\">result</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_known\">smack_known</a> *<a class=\"id\" href=\"#kp\">kp</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#kp\">kp</a>, &amp;<a class=\"id\" href=\"#smack_known_list\">smack_known_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#smk_cipso\">smk_cipso</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#smk_cipsolock\">smk_cipsolock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#smk_cipso\">smk_cipso</a>-><a class=\"id\" href=\"#smk_level\">smk_level</a> == <a class=\"id\" href=\"#level\">level</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#smk_cipso\">smk_cipso</a>-><a class=\"id\" href=\"#smk_catset\">smk_catset</a>, <a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#smk_known\">smk_known</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#smk_cipsolock\">smk_cipsolock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#final\">final</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#smack_known_huh\">smack_known_huh</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#final\">final</a>, <a class=\"id\" href=\"#SMK_MAXLEN\">SMK_MAXLEN</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_to_cipso - find the CIPSO option to go with a Smack label</span>", 
"<span class=\"comment\"> * @smack: a pointer to the smack label in question</span>", 
"<span class=\"comment\"> * @cp: where to put the result</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns zero if a value is available, non-zero otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#smack_to_cipso\">smack_to_cipso</a>(const char *<a class=\"id\" href=\"#smack\">smack</a>, struct <a class=\"id\" href=\"#smack_cipso\">smack_cipso</a> *<a class=\"id\" href=\"#cp\">cp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_known\">smack_known</a> *<a class=\"id\" href=\"#kp\">kp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#found\">found</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#kp\">kp</a>, &amp;<a class=\"id\" href=\"#smack_known_list\">smack_known_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#smk_known\">smk_known</a> == <a class=\"id\" href=\"#smack\">smack</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#smk_known\">smk_known</a>, <a class=\"id\" href=\"#smack\">smack</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a> == 0 || <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#smk_cipso\">smk_cipso</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#smk_cipso\">smk_cipso</a>, sizeof(struct <a class=\"id\" href=\"#smack_cipso\">smack_cipso</a>));", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/99/cdb7e71bc8812680e873c8097d095f4a8d7921.xr', __xr_tmp);
