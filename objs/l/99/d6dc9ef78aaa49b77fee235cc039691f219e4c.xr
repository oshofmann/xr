var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sbsec\">sbsec</a>-><a class=\"id\" href=\"#isec_lock\">isec_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#sbsec\">sbsec</a>-><a class=\"id\" href=\"#isec_head\">isec_head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sbsec\">sbsec</a>-><a class=\"id\" href=\"#isec_lock\">isec_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#sbsec\">sbsec</a>-><a class=\"id\" href=\"#behavior\">behavior</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SECURITY_FS_USE_XATTR\">SECURITY_FS_USE_XATTR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#getxattr\">getxattr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#sbsec\">sbsec</a>-><a class=\"id\" href=\"#def_sid\">def_sid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Need a dentry, since the xattr API requires one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   Life would be simpler if we could just pass the inode. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#opt_dentry\">opt_dentry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Called from d_instantiate or d_splice_alias. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#opt_dentry\">opt_dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Called from selinux_complete_init, try to find a dentry. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#d_find_alias\">d_find_alias</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dentry\">dentry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * this is can be hit on boot when a file is accessed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * before the policy is loaded.  When we load policy we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * may find inodes that have no dentry on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * sbsec-&gt;isec_head list.  No reason to complain as these</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * will get fixed up the next time we go through</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * inode_doinit with a dentry, before these inodes could</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * be used again by userspace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#INITCONTEXTLEN\">INITCONTEXTLEN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#context\">context</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#len\">len</a>+1, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#context\">context</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#context\">context</a>[<a class=\"id\" href=\"#len\">len</a>] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#getxattr\">getxattr</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#XATTR_NAME_SELINUX\">XATTR_NAME_SELINUX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#context\">context</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#context\">context</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Need a larger buffer.  Query for the right size. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#getxattr\">getxattr</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#XATTR_NAME_SELINUX\">XATTR_NAME_SELINUX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#context\">context</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#len\">len</a>+1, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#context\">context</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#context\">context</a>[<a class=\"id\" href=\"#len\">len</a>] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#getxattr\">getxattr</a>(<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#XATTR_NAME_SELINUX\">XATTR_NAME_SELINUX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#context\">context</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != -<a class=\"id\" href=\"#ENODATA\">ENODATA</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"SELinux: %s:  getxattr returned \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"%d for dev=%s ino=%ld\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       -<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_id\">s_id</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#context\">context</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Map ENODATA to the default file SID */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#sbsec\">sbsec</a>-><a class=\"id\" href=\"#def_sid\">def_sid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#security_context_to_sid_default\">security_context_to_sid_default</a>(<a class=\"id\" href=\"#context\">context</a>, <a class=\"id\" href=\"#rc\">rc</a>, &amp;<a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#sbsec\">sbsec</a>-><a class=\"id\" href=\"#def_sid\">def_sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_id\">s_id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ino\">ino</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"SELinux: inode=%lu on dev=%s was found to have an invalid \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"context=%s.  This indicates you may need to relabel the inode or the \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"filesystem in question.\\n\", <a class=\"id\" href=\"#ino\">ino</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#context\">context</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"SELinux: %s:  context_to_sid(%s) \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"returned %d for dev=%s ino=%ld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#context\">context</a>, -<a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#ino\">ino</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#context\">context</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Leave with the unlabeled SID */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#context\">context</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SECURITY_FS_USE_TASK\">SECURITY_FS_USE_TASK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#task_sid\">task_sid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SECURITY_FS_USE_TRANS\">SECURITY_FS_USE_TRANS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Default to the fs SID. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#sbsec\">sbsec</a>-><a class=\"id\" href=\"#sid\">sid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Try to obtain a transition SID. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sclass\">sclass</a> = <a class=\"id\" href=\"#inode_mode_to_security_class\">inode_mode_to_security_class</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#security_transition_sid\">security_transition_sid</a>(<a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#task_sid\">task_sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#sbsec\">sbsec</a>-><a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sclass\">sclass</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#sid\">sid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SECURITY_FS_USE_MNTPOINT\">SECURITY_FS_USE_MNTPOINT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#sbsec\">sbsec</a>-><a class=\"id\" href=\"#mntpoint_sid\">mntpoint_sid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Default to the fs superblock SID. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#sbsec\">sbsec</a>-><a class=\"id\" href=\"#sid\">sid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#sbsec\">sbsec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SE_SBPROC\">SE_SBPROC</a>) && !<a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_inode\">proc_inode</a> *<a class=\"id\" href=\"#proci\">proci</a> = <a class=\"id\" href=\"#PROC_I\">PROC_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#proci\">proci</a>-><a class=\"id\" href=\"#pde\">pde</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sclass\">sclass</a> = <a class=\"id\" href=\"#inode_mode_to_security_class\">inode_mode_to_security_class</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#selinux_proc_get_sid\">selinux_proc_get_sid</a>(<a class=\"id\" href=\"#proci\">proci</a>-><a class=\"id\" href=\"#pde\">pde</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sclass\">sclass</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#sid\">sid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#initialized\">initialized</a> = 1;", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sclass\">sclass</a> == <a class=\"id\" href=\"#SECCLASS_FILE\">SECCLASS_FILE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sclass\">sclass</a> = <a class=\"id\" href=\"#inode_mode_to_security_class\">inode_mode_to_security_class</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Convert a Linux signal to an access vector. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#signal_to_av\">signal_to_av</a>(int <a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perm\">perm</a> = 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#sig\">sig</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Commonly granted from child to parent. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> = <a class=\"id\" href=\"#PROCESS__SIGCHLD\">PROCESS__SIGCHLD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Cannot be caught or ignored */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> = <a class=\"id\" href=\"#PROCESS__SIGKILL\">PROCESS__SIGKILL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIGSTOP\">SIGSTOP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Cannot be caught or ignored */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> = <a class=\"id\" href=\"#PROCESS__SIGSTOP\">PROCESS__SIGSTOP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* All other signals. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> = <a class=\"id\" href=\"#PROCESS__SIGNAL\">PROCESS__SIGNAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#perm\">perm</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check permission between a pair of credentials</span>", 
"<span class=\"comment\"> * fork check, ptrace check, etc.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cred_has_perm\">cred_has_perm</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#actor\">actor</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perms\">perms</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#asid\">asid</a> = <a class=\"id\" href=\"#cred_sid\">cred_sid</a>(<a class=\"id\" href=\"#actor\">actor</a>), <a class=\"id\" href=\"#tsid\">tsid</a> = <a class=\"id\" href=\"#cred_sid\">cred_sid</a>(<a class=\"id\" href=\"#target\">target</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#asid\">asid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#SECCLASS_PROCESS\">SECCLASS_PROCESS</a>, <a class=\"id\" href=\"#perms\">perms</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check permission between a pair of tasks, e.g. signal checks,</span>", 
"<span class=\"comment\"> * fork check, ptrace check, etc.</span>", 
"<span class=\"comment\"> * tsk1 is the actor and tsk2 is the target</span>", 
"<span class=\"comment\"> * - this uses the default subjective creds of tsk1</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#task_has_perm\">task_has_perm</a>(const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk1\">tsk1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk2\">tsk2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perms\">perms</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#__tsec1\">__tsec1</a>, *<a class=\"id\" href=\"#__tsec2\">__tsec2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid1\">sid1</a>, <a class=\"id\" href=\"#sid2\">sid2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__tsec1\">__tsec1</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#tsk1\">tsk1</a>)-><a class=\"id\" href=\"#security\">security</a>;<span class=\"ts\"/><a class=\"id\" href=\"#sid1\">sid1</a> = <a class=\"id\" href=\"#__tsec1\">__tsec1</a>-><a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__tsec2\">__tsec2</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#tsk2\">tsk2</a>)-><a class=\"id\" href=\"#security\">security</a>;<span class=\"ts\"/><a class=\"id\" href=\"#sid2\">sid2</a> = <a class=\"id\" href=\"#__tsec2\">__tsec2</a>-><a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid1\">sid1</a>, <a class=\"id\" href=\"#sid2\">sid2</a>, <a class=\"id\" href=\"#SECCLASS_PROCESS\">SECCLASS_PROCESS</a>, <a class=\"id\" href=\"#perms\">perms</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check permission between current and another task, e.g. signal checks,</span>", 
"<span class=\"comment\"> * fork check, ptrace check, etc.</span>", 
"<span class=\"comment\"> * current is the actor and tsk2 is the target</span>", 
"<span class=\"comment\"> * - this uses current's subjective creds</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#current_has_perm\">current_has_perm</a>(const struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perms\">perms</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#current_sid\">current_sid</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsid\">tsid</a> = <a class=\"id\" href=\"#task_sid\">task_sid</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#SECCLASS_PROCESS\">SECCLASS_PROCESS</a>, <a class=\"id\" href=\"#perms\">perms</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"#if <a class=\"id\" href=\"#CAP_LAST_CAP\">CAP_LAST_CAP</a> &gt; 63", 
"#<a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#Fix\">Fix</a> <a class=\"id\" href=\"#SELinux\">SELinux</a> <a class=\"id\" href=\"#to\">to</a> <a class=\"id\" href=\"#handle\">handle</a> <a class=\"id\" href=\"#capabilities\">capabilities</a> &gt; 63.", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Check whether a task is allowed to use a capability. */</span>", 
"static int <a class=\"id\" href=\"#task_has_capability\">task_has_capability</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#cap\">cap</a>, int <a class=\"id\" href=\"#audit\">audit</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#av_decision\">av_decision</a> <a class=\"id\" href=\"#avd\">avd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#sclass\">sclass</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#cred_sid\">cred_sid</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#av\">av</a> = <a class=\"id\" href=\"#CAP_TO_MASK\">CAP_TO_MASK</a>(<a class=\"id\" href=\"#cap\">cap</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#COMMON_AUDIT_DATA_INIT\">COMMON_AUDIT_DATA_INIT</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#CAP\">CAP</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#cap\">cap</a> = <a class=\"id\" href=\"#cap\">cap</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#CAP_TO_INDEX\">CAP_TO_INDEX</a>(<a class=\"id\" href=\"#cap\">cap</a>)) {", 
"<span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sclass\">sclass</a> = <a class=\"id\" href=\"#SECCLASS_CAPABILITY\">SECCLASS_CAPABILITY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sclass\">sclass</a> = <a class=\"id\" href=\"#SECCLASS_CAPABILITY2\">SECCLASS_CAPABILITY2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"SELinux:  out of range capability %d\\n\", <a class=\"id\" href=\"#cap\">cap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm_noaudit\">avc_has_perm_noaudit</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#sclass\">sclass</a>, <a class=\"id\" href=\"#av\">av</a>, 0, &amp;<a class=\"id\" href=\"#avd\">avd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#audit\">audit</a> == <a class=\"id\" href=\"#SECURITY_CAP_AUDIT\">SECURITY_CAP_AUDIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avc_audit\">avc_audit</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#sclass\">sclass</a>, <a class=\"id\" href=\"#av\">av</a>, &amp;<a class=\"id\" href=\"#avd\">avd</a>, <a class=\"id\" href=\"#rc\">rc</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Check whether a task is allowed to use a system operation. */</span>", 
"static int <a class=\"id\" href=\"#task_has_system\">task_has_system</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perms\">perms</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#task_sid\">task_sid</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#SECINITSID_KERNEL\">SECINITSID_KERNEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#SECCLASS_SYSTEM\">SECCLASS_SYSTEM</a>, <a class=\"id\" href=\"#perms\">perms</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Check whether a task has a particular permission to an inode.</span>", 
"<span class=\"comment\">   The 'adp' parameter is optional and allows other audit</span>", 
"<span class=\"comment\">   data to be passed (e.g. the dentry). */</span>", 
"static int <a class=\"id\" href=\"#inode_has_perm\">inode_has_perm</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perms\">perms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> *<a class=\"id\" href=\"#adp\">adp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_security_struct\">inode_security_struct</a> *<a class=\"id\" href=\"#isec\">isec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#IS_PRIVATE\">IS_PRIVATE</a>(<a class=\"id\" href=\"#inode\">inode</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#cred_sid\">cred_sid</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#adp\">adp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adp\">adp</a> = &amp;<a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#COMMON_AUDIT_DATA_INIT\">COMMON_AUDIT_DATA_INIT</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#FS\">FS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sclass\">sclass</a>, <a class=\"id\" href=\"#perms\">perms</a>, <a class=\"id\" href=\"#adp\">adp</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Same as inode_has_perm, but pass explicit audit data containing</span>", 
"<span class=\"comment\">   the dentry to help the auditing code to more easily generate the</span>", 
"<span class=\"comment\">   pathname if needed. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#dentry_has_perm\">dentry_has_perm</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#av\">av</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#COMMON_AUDIT_DATA_INIT\">COMMON_AUDIT_DATA_INIT</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#FS\">FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode_has_perm\">inode_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#av\">av</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Check whether a task can use an open file descriptor to</span>", 
"<span class=\"comment\">   access an inode in a given way.  Check access to the</span>", 
"<span class=\"comment\">   descriptor itself, and then use dentry_has_perm to</span>", 
"<span class=\"comment\">   check a particular permission to the file.</span>", 
"<span class=\"comment\">   Access to the descriptor is implicitly granted if it</span>", 
"<span class=\"comment\">   has the same SID as the process.  If av is zero, then</span>", 
"<span class=\"comment\">   access to the file is not checked, e.g. for cases</span>", 
"<span class=\"comment\">   where only the descriptor is affected like seek. */</span>", 
"static int <a class=\"id\" href=\"#file_has_perm\">file_has_perm</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#av\">av</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_security_struct\">file_security_struct</a> *<a class=\"id\" href=\"#fsec\">fsec</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#cred_sid\">cred_sid</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#COMMON_AUDIT_DATA_INIT\">COMMON_AUDIT_DATA_INIT</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#FS\">FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sid\">sid</a> != <a class=\"id\" href=\"#fsec\">fsec</a>-><a class=\"id\" href=\"#sid\">sid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#fsec\">fsec</a>-><a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#SECCLASS_FD\">SECCLASS_FD</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#FD__USE\">FD__USE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* av is zero if only checking access to the descriptor. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#av\">av</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#inode_has_perm\">inode_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#av\">av</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Check whether a task can create a file. */</span>", 
"static int <a class=\"id\" href=\"#may_create\">may_create</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#tsec\">tsec</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_security_struct\">inode_security_struct</a> *<a class=\"id\" href=\"#dsec\">dsec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#superblock_security_struct\">superblock_security_struct</a> *<a class=\"id\" href=\"#sbsec\">sbsec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#newsid\">newsid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dsec\">dsec</a> = <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbsec\">sbsec</a> = <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_security\">s_security</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#tsec\">tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newsid\">newsid</a> = <a class=\"id\" href=\"#tsec\">tsec</a>-><a class=\"id\" href=\"#create_sid\">create_sid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#COMMON_AUDIT_DATA_INIT\">COMMON_AUDIT_DATA_INIT</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#FS\">FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#dsec\">dsec</a>-><a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#SECCLASS_DIR\">SECCLASS_DIR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#DIR__ADD_NAME\">DIR__ADD_NAME</a> | <a class=\"id\" href=\"#DIR__SEARCH\">DIR__SEARCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#newsid\">newsid</a> || !(<a class=\"id\" href=\"#sbsec\">sbsec</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SE_SBLABELSUPP\">SE_SBLABELSUPP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#security_transition_sid\">security_transition_sid</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#dsec\">dsec</a>-><a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#tclass\">tclass</a>, &amp;<a class=\"id\" href=\"#newsid\">newsid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#newsid\">newsid</a>, <a class=\"id\" href=\"#tclass\">tclass</a>, <a class=\"id\" href=\"#FILE__CREATE\">FILE__CREATE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#newsid\">newsid</a>, <a class=\"id\" href=\"#sbsec\">sbsec</a>-><a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#SECCLASS_FILESYSTEM\">SECCLASS_FILESYSTEM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#FILESYSTEM__ASSOCIATE\">FILESYSTEM__ASSOCIATE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Check whether a task can create a key. */</span>", 
"static int <a class=\"id\" href=\"#may_create_key\">may_create_key</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ksid\">ksid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#task_sid\">task_sid</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#ksid\">ksid</a>, <a class=\"id\" href=\"#SECCLASS_KEY\">SECCLASS_KEY</a>, <a class=\"id\" href=\"#KEY__CREATE\">KEY__CREATE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAY_LINK\">MAY_LINK</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAY_UNLINK\">MAY_UNLINK</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAY_RMDIR\">MAY_RMDIR</a><span class=\"ts\"/>2", 
"", 
"<span class=\"comment\">/* Check whether a task can link, unlink, or rmdir a file/directory. */</span>", 
"static int <a class=\"id\" href=\"#may_link\">may_link</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#kind\">kind</a>)", 
"", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_security_struct\">inode_security_struct</a> *<a class=\"id\" href=\"#dsec\">dsec</a>, *<a class=\"id\" href=\"#isec\">isec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#current_sid\">current_sid</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#av\">av</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dsec\">dsec</a> = <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#COMMON_AUDIT_DATA_INIT\">COMMON_AUDIT_DATA_INIT</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#FS\">FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> = <a class=\"id\" href=\"#DIR__SEARCH\">DIR__SEARCH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= (<a class=\"id\" href=\"#kind\">kind</a> ? <a class=\"id\" href=\"#DIR__REMOVE_NAME\">DIR__REMOVE_NAME</a> : <a class=\"id\" href=\"#DIR__ADD_NAME\">DIR__ADD_NAME</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#dsec\">dsec</a>-><a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#SECCLASS_DIR\">SECCLASS_DIR</a>, <a class=\"id\" href=\"#av\">av</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#kind\">kind</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MAY_LINK\">MAY_LINK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> = <a class=\"id\" href=\"#FILE__LINK\">FILE__LINK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MAY_UNLINK\">MAY_UNLINK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> = <a class=\"id\" href=\"#FILE__UNLINK\">FILE__UNLINK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MAY_RMDIR\">MAY_RMDIR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> = <a class=\"id\" href=\"#DIR__RMDIR\">DIR__RMDIR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"SELinux: %s:  unrecognized kind %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#kind\">kind</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sclass\">sclass</a>, <a class=\"id\" href=\"#av\">av</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#may_rename\">may_rename</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#old_dir\">old_dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old_dentry\">old_dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#new_dir\">new_dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new_dentry\">new_dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_security_struct\">inode_security_struct</a> *<a class=\"id\" href=\"#old_dsec\">old_dsec</a>, *<a class=\"id\" href=\"#new_dsec\">new_dsec</a>, *<a class=\"id\" href=\"#old_isec\">old_isec</a>, *<a class=\"id\" href=\"#new_isec\">new_isec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#current_sid\">current_sid</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#av\">av</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_is_dir\">old_is_dir</a>, <a class=\"id\" href=\"#new_is_dir\">new_is_dir</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_dsec\">old_dsec</a> = <a class=\"id\" href=\"#old_dir\">old_dir</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_isec\">old_isec</a> = <a class=\"id\" href=\"#old_dentry\">old_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_is_dir\">old_is_dir</a> = <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#old_dentry\">old_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_dsec\">new_dsec</a> = <a class=\"id\" href=\"#new_dir\">new_dir</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#COMMON_AUDIT_DATA_INIT\">COMMON_AUDIT_DATA_INIT</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#FS\">FS</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#old_dentry\">old_dentry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#old_dsec\">old_dsec</a>-><a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#SECCLASS_DIR\">SECCLASS_DIR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#DIR__REMOVE_NAME\">DIR__REMOVE_NAME</a> | <a class=\"id\" href=\"#DIR__SEARCH\">DIR__SEARCH</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#old_isec\">old_isec</a>-><a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#old_isec\">old_isec</a>-><a class=\"id\" href=\"#sclass\">sclass</a>, <a class=\"id\" href=\"#FILE__RENAME\">FILE__RENAME</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_is_dir\">old_is_dir</a> && <a class=\"id\" href=\"#new_dir\">new_dir</a> != <a class=\"id\" href=\"#old_dir\">old_dir</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#old_isec\">old_isec</a>-><a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#old_isec\">old_isec</a>-><a class=\"id\" href=\"#sclass\">sclass</a>, <a class=\"id\" href=\"#DIR__REPARENT\">DIR__REPARENT</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#new_dentry\">new_dentry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> = <a class=\"id\" href=\"#DIR__ADD_NAME\">DIR__ADD_NAME</a> | <a class=\"id\" href=\"#DIR__SEARCH\">DIR__SEARCH</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_dentry\">new_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#DIR__REMOVE_NAME\">DIR__REMOVE_NAME</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#new_dsec\">new_dsec</a>-><a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#SECCLASS_DIR\">SECCLASS_DIR</a>, <a class=\"id\" href=\"#av\">av</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_dentry\">new_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_isec\">new_isec</a> = <a class=\"id\" href=\"#new_dentry\">new_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_is_dir\">new_is_dir</a> = <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#new_dentry\">new_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#new_isec\">new_isec</a>-><a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#new_isec\">new_isec</a>-><a class=\"id\" href=\"#sclass\">sclass</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#new_is_dir\">new_is_dir</a> ? <a class=\"id\" href=\"#DIR__RMDIR\">DIR__RMDIR</a> : <a class=\"id\" href=\"#FILE__UNLINK\">FILE__UNLINK</a>), &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Check whether a task can perform a filesystem operation. */</span>", 
"static int <a class=\"id\" href=\"#superblock_has_perm\">superblock_has_perm</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perms\">perms</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> *<a class=\"id\" href=\"#ad\">ad</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#superblock_security_struct\">superblock_security_struct</a> *<a class=\"id\" href=\"#sbsec\">sbsec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#cred_sid\">cred_sid</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbsec\">sbsec</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_security\">s_security</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#sbsec\">sbsec</a>-><a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#SECCLASS_FILESYSTEM\">SECCLASS_FILESYSTEM</a>, <a class=\"id\" href=\"#perms\">perms</a>, <a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Convert a Linux mode and permission mask to an access vector. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#file_mask_to_av\">file_mask_to_av</a>(int <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#av\">av</a> = 0;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IFMT\">S_IFMT</a>) != <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#FILE__EXECUTE\">FILE__EXECUTE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#FILE__READ\">FILE__READ</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#MAY_APPEND\">MAY_APPEND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#FILE__APPEND\">FILE__APPEND</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#FILE__WRITE\">FILE__WRITE</a>;", 
"", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#DIR__SEARCH\">DIR__SEARCH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#DIR__WRITE\">DIR__WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#DIR__READ\">DIR__READ</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#av\">av</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Convert a Linux file to an access vector. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#file_to_av\">file_to_av</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#av\">av</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#FILE__READ\">FILE__READ</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_APPEND\">O_APPEND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#FILE__APPEND\">FILE__APPEND</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#FILE__WRITE\">FILE__WRITE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#av\">av</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Special file opened with flags 3 for ioctl-only use.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> = <a class=\"id\" href=\"#FILE__IOCTL\">FILE__IOCTL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#av\">av</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Convert a file to an access vector and include the correct open</span>", 
"<span class=\"comment\"> * open permission.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#open_file_to_av\">open_file_to_av</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#av\">av</a> = <a class=\"id\" href=\"#file_to_av\">file_to_av</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#selinux_policycap_openperm\">selinux_policycap_openperm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#FILE__OPEN\">FILE__OPEN</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#av\">av</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Hook functions begin here. */</span>", 
"", 
"static int <a class=\"id\" href=\"#selinux_ptrace_access_check\">selinux_ptrace_access_check</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_ptrace_access_check\">cap_ptrace_access_check</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#PTRACE_MODE_READ\">PTRACE_MODE_READ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#current_sid\">current_sid</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#csid\">csid</a> = <a class=\"id\" href=\"#task_sid\">task_sid</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#csid\">csid</a>, <a class=\"id\" href=\"#SECCLASS_FILE\">SECCLASS_FILE</a>, <a class=\"id\" href=\"#FILE__READ\">FILE__READ</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#current_has_perm\">current_has_perm</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#PROCESS__PTRACE\">PROCESS__PTRACE</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_ptrace_traceme\">selinux_ptrace_traceme</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_ptrace_traceme\">cap_ptrace_traceme</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_has_perm\">task_has_perm</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#PROCESS__PTRACE\">PROCESS__PTRACE</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_capget\">selinux_capget</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#effective\">effective</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#inheritable\">inheritable</a>, <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#permitted\">permitted</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#current_has_perm\">current_has_perm</a>(<a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#PROCESS__GETCAP\">PROCESS__GETCAP</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_capget\">cap_capget</a>(<a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#effective\">effective</a>, <a class=\"id\" href=\"#inheritable\">inheritable</a>, <a class=\"id\" href=\"#permitted\">permitted</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_capset\">selinux_capset</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#effective\">effective</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#inheritable\">inheritable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#permitted\">permitted</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#cap_capset\">cap_capset</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#effective\">effective</a>, <a class=\"id\" href=\"#inheritable\">inheritable</a>, <a class=\"id\" href=\"#permitted\">permitted</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cred_has_perm\">cred_has_perm</a>(<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#PROCESS__SETCAP\">PROCESS__SETCAP</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * (This comment used to live with the selinux_task_setuid hook,</span>", 
"<span class=\"comment\"> * which was removed).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Since setuid only affects the current process, and since the SELinux</span>", 
"<span class=\"comment\"> * controls are not based on the Linux identity attributes, SELinux does not</span>", 
"<span class=\"comment\"> * need to control this operation.  However, SELinux does control the use of</span>", 
"<span class=\"comment\"> * the CAP_SETUID and CAP_SETGID capabilities using the capable hook.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#selinux_capable\">selinux_capable</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#cap\">cap</a>, int <a class=\"id\" href=\"#audit\">audit</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_capable\">cap_capable</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#cap\">cap</a>, <a class=\"id\" href=\"#audit\">audit</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_has_capability\">task_has_capability</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#cap\">cap</a>, <a class=\"id\" href=\"#audit\">audit</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_sysctl_get_sid\">selinux_sysctl_get_sid</a>(<a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tclass\">tclass</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#sid\">sid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#buflen\">buflen</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#buffer\">buffer</a>, *<a class=\"id\" href=\"#path\">path</a>, *<a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = (char *)<a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buflen\">buflen</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#buffer\">buffer</a>+<a class=\"id\" href=\"#buflen\">buflen</a>;", 
"<span class=\"ts\"/>*--<a class=\"id\" href=\"#end\">end</a> = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buflen\">buflen</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#end\">end</a>-1;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#path\">path</a> = '/';", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#table\">table</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#procname\">procname</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#namelen\">namelen</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buflen\">buflen</a> -= <a class=\"id\" href=\"#namelen\">namelen</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buflen\">buflen</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> -= <a class=\"id\" href=\"#namelen\">namelen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#namelen\">namelen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*--<a class=\"id\" href=\"#end\">end</a> = '/';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a> = <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buflen\">buflen</a> -= 4;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buflen\">buflen</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> -= 4;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#end\">end</a>, \"/sys\", 4);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#security_genfs_sid\">security_genfs_sid</a>(\"proc\", <a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#tclass\">tclass</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_sysctl\">selinux_sysctl</a>(<a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#av\">av</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>, <a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#current_sid\">current_sid</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#selinux_sysctl_get_sid\">selinux_sysctl_get_sid</a>(<a class=\"id\" href=\"#table\">table</a>, (<a class=\"id\" href=\"#op\">op</a> == 0001) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#SECCLASS_DIR\">SECCLASS_DIR</a> : <a class=\"id\" href=\"#SECCLASS_FILE\">SECCLASS_FILE</a>, &amp;<a class=\"id\" href=\"#tsid\">tsid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Default to the well-defined sysctl SID. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsid\">tsid</a> = <a class=\"id\" href=\"#SECINITSID_SYSCTL\">SECINITSID_SYSCTL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The op values are \"defined\" in sysctl.c, thereby creating</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a bad coupling between this module and sysctl.c */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a> == 001) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#SECCLASS_DIR\">SECCLASS_DIR</a>, <a class=\"id\" href=\"#DIR__SEARCH\">DIR__SEARCH</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a> &amp; 004)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#FILE__READ\">FILE__READ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a> &amp; 002)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#FILE__WRITE\">FILE__WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#av\">av</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#tsid\">tsid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#SECCLASS_FILE\">SECCLASS_FILE</a>, <a class=\"id\" href=\"#av\">av</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_quotactl\">selinux_quotactl</a>(int <a class=\"id\" href=\"#cmds\">cmds</a>, int <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#id\">id</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sb\">sb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmds\">cmds</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#Q_SYNC\">Q_SYNC</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#Q_QUOTAON\">Q_QUOTAON</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#Q_QUOTAOFF\">Q_QUOTAOFF</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#Q_SETINFO\">Q_SETINFO</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#Q_SETQUOTA\">Q_SETQUOTA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#superblock_has_perm\">superblock_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#FILESYSTEM__QUOTAMOD\">FILESYSTEM__QUOTAMOD</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#Q_GETFMT\">Q_GETFMT</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#Q_GETINFO\">Q_GETINFO</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#Q_GETQUOTA\">Q_GETQUOTA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#superblock_has_perm\">superblock_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#FILESYSTEM__QUOTAGET\">FILESYSTEM__QUOTAGET</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;  <span class=\"comment\">/* let the kernel handle invalid cmds */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_quota_on\">selinux_quota_on</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry_has_perm\">dentry_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#FILE__QUOTAON\">FILE__QUOTAON</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_syslog\">selinux_syslog</a>(int <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#from_file\">from_file</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_syslog\">cap_syslog</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#from_file\">from_file</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_READ_ALL\">SYSLOG_ACTION_READ_ALL</a>:<span class=\"ts\"/><span class=\"comment\">/* Read last kernel messages */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_SIZE_BUFFER\">SYSLOG_ACTION_SIZE_BUFFER</a>:<span class=\"ts\"/><span class=\"comment\">/* Return size of the log buffer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#task_has_system\">task_has_system</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#SYSTEM__SYSLOG_READ\">SYSTEM__SYSLOG_READ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_CONSOLE_OFF\">SYSLOG_ACTION_CONSOLE_OFF</a>:<span class=\"ts\"/><span class=\"comment\">/* Disable logging to console */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_CONSOLE_ON\">SYSLOG_ACTION_CONSOLE_ON</a>:<span class=\"ts\"/><span class=\"comment\">/* Enable logging to console */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Set level of messages printed to console */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_CONSOLE_LEVEL\">SYSLOG_ACTION_CONSOLE_LEVEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#task_has_system\">task_has_system</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#SYSTEM__SYSLOG_CONSOLE\">SYSTEM__SYSLOG_CONSOLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_CLOSE\">SYSLOG_ACTION_CLOSE</a>:<span class=\"ts\"/><span class=\"comment\">/* Close log */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_OPEN\">SYSLOG_ACTION_OPEN</a>:<span class=\"ts\"/><span class=\"comment\">/* Open log */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_READ\">SYSLOG_ACTION_READ</a>:<span class=\"ts\"/><span class=\"comment\">/* Read from log */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_READ_CLEAR\">SYSLOG_ACTION_READ_CLEAR</a>:<span class=\"ts\"/><span class=\"comment\">/* Read/clear last kernel messages */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_CLEAR\">SYSLOG_ACTION_CLEAR</a>:<span class=\"ts\"/><span class=\"comment\">/* Clear ring buffer */</span>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#task_has_system\">task_has_system</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#SYSTEM__SYSLOG_MOD\">SYSTEM__SYSLOG_MOD</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check that a process has enough memory to allocate a new virtual</span>", 
"<span class=\"comment\"> * mapping. 0 means there is enough memory for the allocation to</span>", 
"<span class=\"comment\"> * succeed and -ENOMEM implies there is not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Do not audit the selinux permission check, as this is applied to all</span>", 
"<span class=\"comment\"> * processes that allocate mappings.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#selinux_vm_enough_memory\">selinux_vm_enough_memory</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#cap_sys_admin\">cap_sys_admin</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#selinux_capable\">selinux_capable</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#current_cred\">current_cred</a>(), <a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#SECURITY_CAP_NOAUDIT\">SECURITY_CAP_NOAUDIT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cap_sys_admin\">cap_sys_admin</a> = 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__vm_enough_memory\">__vm_enough_memory</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#cap_sys_admin\">cap_sys_admin</a>);", 
"}", 
"", 
"<span class=\"comment\">/* binprm security operations */</span>", 
"", 
"static int <a class=\"id\" href=\"#selinux_bprm_set_creds\">selinux_bprm_set_creds</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#old_tsec\">old_tsec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#new_tsec\">new_tsec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_security_struct\">inode_security_struct</a> *<a class=\"id\" href=\"#isec\">isec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_bprm_set_creds\">cap_bprm_set_creds</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* SELinux context only depends on initial program or script and not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the script interpreter */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred_prepared\">cred_prepared</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_tsec\">old_tsec</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_tsec\">new_tsec</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Default to the current task SID. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#old_tsec\">old_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#osid\">osid</a> = <a class=\"id\" href=\"#old_tsec\">old_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reset fs, key, and sock SIDs on execve. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#create_sid\">create_sid</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#keycreate_sid\">keycreate_sid</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#sockcreate_sid\">sockcreate_sid</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_tsec\">old_tsec</a>-><a class=\"id\" href=\"#exec_sid\">exec_sid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#old_tsec\">old_tsec</a>-><a class=\"id\" href=\"#exec_sid\">exec_sid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reset exec SID on execve. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#exec_sid\">exec_sid</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check for a default transition on this program. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#security_transition_sid\">security_transition_sid</a>(<a class=\"id\" href=\"#old_tsec\">old_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#SECCLASS_PROCESS\">SECCLASS_PROCESS</a>, &amp;<a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#COMMON_AUDIT_DATA_INIT\">COMMON_AUDIT_DATA_INIT</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#FS\">FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_NOSUID\">MNT_NOSUID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#old_tsec\">old_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a> == <a class=\"id\" href=\"#old_tsec\">old_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#old_tsec\">old_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#SECCLASS_FILE\">SECCLASS_FILE</a>, <a class=\"id\" href=\"#FILE__EXECUTE_NO_TRANS\">FILE__EXECUTE_NO_TRANS</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check permissions for the transition. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#old_tsec\">old_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#SECCLASS_PROCESS\">SECCLASS_PROCESS</a>, <a class=\"id\" href=\"#PROCESS__TRANSITION\">PROCESS__TRANSITION</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#SECCLASS_FILE\">SECCLASS_FILE</a>, <a class=\"id\" href=\"#FILE__ENTRYPOINT\">FILE__ENTRYPOINT</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check for shared state */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#unsafe\">unsafe</a> &amp; <a class=\"id\" href=\"#LSM_UNSAFE_SHARE\">LSM_UNSAFE_SHARE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#old_tsec\">old_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#SECCLASS_PROCESS\">SECCLASS_PROCESS</a>, <a class=\"id\" href=\"#PROCESS__SHARE\">PROCESS__SHARE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure that anyone attempting to ptrace over a task that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * changes its SID has the appropriate permit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#unsafe\">unsafe</a> &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#LSM_UNSAFE_PTRACE\">LSM_UNSAFE_PTRACE</a> | <a class=\"id\" href=\"#LSM_UNSAFE_PTRACE_CAP\">LSM_UNSAFE_PTRACE_CAP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tracer\">tracer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#sec\">sec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ptsid\">ptsid</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracer\">tracer</a> = <a class=\"id\" href=\"#tracehook_tracer_task\">tracehook_tracer_task</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#tracer\">tracer</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sec\">sec</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#tracer\">tracer</a>)-><a class=\"id\" href=\"#security\">security</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptsid\">ptsid</a> = <a class=\"id\" href=\"#sec\">sec</a>-><a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptsid\">ptsid</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#ptsid\">ptsid</a>, <a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#SECCLASS_PROCESS\">SECCLASS_PROCESS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#PROCESS__PTRACE\">PROCESS__PTRACE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Clear any possibly unsafe personality bits on exec: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#per_clear\">per_clear</a> |= <a class=\"id\" href=\"#PER_CLEAR_ON_SETID\">PER_CLEAR_ON_SETID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_bprm_secureexec\">selinux_bprm_secureexec</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#tsec\">tsec</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#osid\">osid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#atsecure\">atsecure</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#tsec\">tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#osid\">osid</a> = <a class=\"id\" href=\"#tsec\">tsec</a>-><a class=\"id\" href=\"#osid\">osid</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#osid\">osid</a> != <a class=\"id\" href=\"#sid\">sid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Enable secure mode for SIDs transitions unless</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   the noatsecure permission is granted between</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   the two SIDs, i.e. ahp returns 0. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atsecure\">atsecure</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#osid\">osid</a>, <a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SECCLASS_PROCESS\">SECCLASS_PROCESS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PROCESS__NOATSECURE\">PROCESS__NOATSECURE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#atsecure\">atsecure</a> || <a class=\"id\" href=\"#cap_bprm_secureexec\">cap_bprm_secureexec</a>(<a class=\"id\" href=\"#bprm\">bprm</a>));", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#selinuxfs_mount\">selinuxfs_mount</a>;", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#selinux_null\">selinux_null</a>;", 
"", 
"<span class=\"comment\">/* Derived from fs/exec.c:flush_old_files. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#flush_unauthorized_files\">flush_unauthorized_files</a>(const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#files\">files</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, *<a class=\"id\" href=\"#devnull\">devnull</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#j\">j</a> = -1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#drop_tty\">drop_tty</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#get_current_tty\">get_current_tty</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tty\">tty</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#tty_files_lock\">tty_files_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#tty_files\">tty_files</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_file_private\">tty_file_private</a> *<a class=\"id\" href=\"#file_priv\">file_priv</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Revalidate access to controlling tty.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   Use inode_has_perm on the tty inode directly rather</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   than using file_has_perm, as this particular open</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   file may belong to another process and we are only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   interested in the inode-based check here. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_priv\">file_priv</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#tty_files\">tty_files</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_file_private\">tty_file_private</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#file_priv\">file_priv</a>-><a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode_has_perm\">inode_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#FILE__READ\">FILE__READ</a> | <a class=\"id\" href=\"#FILE__WRITE\">FILE__WRITE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_tty\">drop_tty</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#tty_files_lock\">tty_files_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_kref_put\">tty_kref_put</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Reset controlling tty. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drop_tty\">drop_tty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#no_tty\">no_tty</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Revalidate access to inherited open files. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#COMMON_AUDIT_DATA_INIT\">COMMON_AUDIT_DATA_INIT</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#FS\">FS</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#set\">set</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#fd\">fd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#j\">j</a> * <a class=\"id\" href=\"#__NFDBITS\">__NFDBITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a> = <a class=\"id\" href=\"#files_fdtable\">files_fdtable</a>(<a class=\"id\" href=\"#files\">files</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>-><a class=\"id\" href=\"#fds_bits\">fds_bits</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#set\">set</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for ( ; <a class=\"id\" href=\"#set\">set</a> ; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#set\">set</a> >>= 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#set\">set</a> &amp; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file_has_perm\">file_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#file_to_av\">file_to_av</a>(<a class=\"id\" href=\"#file\">file</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sys_close\">sys_close</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fd\">fd</a> = <a class=\"id\" href=\"#get_unused_fd\">get_unused_fd</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fd\">fd</a> != <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fd\">fd</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_unused_fd\">put_unused_fd</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#devnull\">devnull</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_file\">get_file</a>(<a class=\"id\" href=\"#devnull\">devnull</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devnull\">devnull</a> = <a class=\"id\" href=\"#dentry_open\">dentry_open</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#selinux_null\">selinux_null</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mntget\">mntget</a>(<a class=\"id\" href=\"#selinuxfs_mount\">selinuxfs_mount</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#O_RDWR\">O_RDWR</a>, <a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#devnull\">devnull</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devnull\">devnull</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_unused_fd\">put_unused_fd</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fd_install\">fd_install</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#devnull\">devnull</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prepare a process for imminent new credential changes due to exec</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#selinux_bprm_committing_creds\">selinux_bprm_committing_creds</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#new_tsec\">new_tsec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rlimit\">rlimit</a> *<a class=\"id\" href=\"#rlim\">rlim</a>, *<a class=\"id\" href=\"#initrlim\">initrlim</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_tsec\">new_tsec</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a> == <a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#osid\">osid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Close files for which the new task SID is not authorized. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_unauthorized_files\">flush_unauthorized_files</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Always clear parent death signal on SID transitions. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pdeath_signal\">pdeath_signal</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check whether the new SID can inherit resource limits from the old</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SID.  If not, reset all soft limits to the lower of the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task's hard limit and the init task's soft limit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that the setting of hard limits (even to lower them) can be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * controlled by the setrlimit check.  The inclusion of the init task's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * soft limit into the computation is to avoid resetting soft limits</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * higher than the default soft limit for cases where the default is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lower than the hard limit, e.g. RLIMIT_CORE or RLIMIT_STACK.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#osid\">osid</a>, <a class=\"id\" href=\"#new_tsec\">new_tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#SECCLASS_PROCESS\">SECCLASS_PROCESS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#PROCESS__RLIMITINH\">PROCESS__RLIMITINH</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* protect against do_prlimit() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#RLIM_NLIMITS\">RLIM_NLIMITS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rlim\">rlim</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#initrlim\">initrlim</a> = <a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rlim\">rlim</a>-><a class=\"id\" href=\"#rlim_cur\">rlim_cur</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#rlim\">rlim</a>-><a class=\"id\" href=\"#rlim_max\">rlim_max</a>, <a class=\"id\" href=\"#initrlim\">initrlim</a>-><a class=\"id\" href=\"#rlim_cur\">rlim_cur</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_rlimit_cpu\">update_rlimit_cpu</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#rlimit\">rlimit</a>(<a class=\"id\" href=\"#RLIMIT_CPU\">RLIMIT_CPU</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clean up the process immediately after the installation of new credentials</span>", 
"<span class=\"comment\"> * due to exec</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#selinux_bprm_committed_creds\">selinux_bprm_committed_creds</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#tsec\">tsec</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#itimerval\">itimerval</a> <a class=\"id\" href=\"#itimer\">itimer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#osid\">osid</a>, <a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#osid\">osid</a> = <a class=\"id\" href=\"#tsec\">tsec</a>-><a class=\"id\" href=\"#osid\">osid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#tsec\">tsec</a>-><a class=\"id\" href=\"#sid\">sid</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sid\">sid</a> == <a class=\"id\" href=\"#osid\">osid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check whether the new SID can inherit signal state from the old SID.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If not, clear itimers to avoid subsequent signal generation and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * flush and unblock signals.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This must occur _after_ the task SID has been updated so that any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kill done after the flush will be checked against the new SID.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#osid\">osid</a>, <a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#SECCLASS_PROCESS\">SECCLASS_PROCESS</a>, <a class=\"id\" href=\"#PROCESS__SIGINH\">PROCESS__SIGINH</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#itimer\">itimer</a>, 0, sizeof <a class=\"id\" href=\"#itimer\">itimer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 3; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_setitimer\">do_setitimer</a>(<a class=\"id\" href=\"#i\">i</a>, &amp;<a class=\"id\" href=\"#itimer\">itimer</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SIGNAL_GROUP_EXIT\">SIGNAL_GROUP_EXIT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__flush_signals\">__flush_signals</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_signal_handlers\">flush_signal_handlers</a>(<a class=\"id\" href=\"#current\">current</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sigemptyset\">sigemptyset</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#blocked\">blocked</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wake up the parent if it is waiting so that it can recheck</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wait permission to the new task SID. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_parent\">__wake_up_parent</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/* superblock security operations */</span>", 
"", 
"static int <a class=\"id\" href=\"#selinux_sb_alloc_security\">selinux_sb_alloc_security</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#superblock_alloc_security\">superblock_alloc_security</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#selinux_sb_free_security\">selinux_sb_free_security</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#superblock_free_security\">superblock_free_security</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#match_prefix\">match_prefix</a>(char *<a class=\"id\" href=\"#prefix\">prefix</a>, int <a class=\"id\" href=\"#plen\">plen</a>, char *<a class=\"id\" href=\"#option\">option</a>, int <a class=\"id\" href=\"#olen\">olen</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#plen\">plen</a> &gt; <a class=\"id\" href=\"#olen\">olen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#prefix\">prefix</a>, <a class=\"id\" href=\"#option\">option</a>, <a class=\"id\" href=\"#plen\">plen</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#selinux_option\">selinux_option</a>(char *<a class=\"id\" href=\"#option\">option</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#match_prefix\">match_prefix</a>(<a class=\"id\" href=\"#CONTEXT_STR\">CONTEXT_STR</a>, sizeof(<a class=\"id\" href=\"#CONTEXT_STR\">CONTEXT_STR</a>)-1, <a class=\"id\" href=\"#option\">option</a>, <a class=\"id\" href=\"#len\">len</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match_prefix\">match_prefix</a>(<a class=\"id\" href=\"#FSCONTEXT_STR\">FSCONTEXT_STR</a>, sizeof(<a class=\"id\" href=\"#FSCONTEXT_STR\">FSCONTEXT_STR</a>)-1, <a class=\"id\" href=\"#option\">option</a>, <a class=\"id\" href=\"#len\">len</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match_prefix\">match_prefix</a>(<a class=\"id\" href=\"#DEFCONTEXT_STR\">DEFCONTEXT_STR</a>, sizeof(<a class=\"id\" href=\"#DEFCONTEXT_STR\">DEFCONTEXT_STR</a>)-1, <a class=\"id\" href=\"#option\">option</a>, <a class=\"id\" href=\"#len\">len</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match_prefix\">match_prefix</a>(<a class=\"id\" href=\"#ROOTCONTEXT_STR\">ROOTCONTEXT_STR</a>, sizeof(<a class=\"id\" href=\"#ROOTCONTEXT_STR\">ROOTCONTEXT_STR</a>)-1, <a class=\"id\" href=\"#option\">option</a>, <a class=\"id\" href=\"#len\">len</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match_prefix\">match_prefix</a>(<a class=\"id\" href=\"#LABELSUPP_STR\">LABELSUPP_STR</a>, sizeof(<a class=\"id\" href=\"#LABELSUPP_STR\">LABELSUPP_STR</a>)-1, <a class=\"id\" href=\"#option\">option</a>, <a class=\"id\" href=\"#len\">len</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#take_option\">take_option</a>(char **<a class=\"id\" href=\"#to\">to</a>, char *<a class=\"id\" href=\"#from\">from</a>, int *<a class=\"id\" href=\"#first\">first</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#first\">first</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>**<a class=\"id\" href=\"#to\">to</a> = ',';", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#to\">to</a> += 1;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#first\">first</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(*<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#to\">to</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#take_selinux_option\">take_selinux_option</a>(char **<a class=\"id\" href=\"#to\">to</a>, char *<a class=\"id\" href=\"#from\">from</a>, int *<a class=\"id\" href=\"#first\">first</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#current_size\">current_size</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#first\">first</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>**<a class=\"id\" href=\"#to\">to</a> = '|';", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#to\">to</a> += 1;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#first\">first</a> = 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#current_size\">current_size</a> &lt; <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#from\">from</a> != '\"') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>**<a class=\"id\" href=\"#to\">to</a> = *<a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#to\">to</a> += 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a> += 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_size\">current_size</a> += 1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_sb_copy_data\">selinux_sb_copy_data</a>(char *<a class=\"id\" href=\"#orig\">orig</a>, char *<a class=\"id\" href=\"#copy\">copy</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fnosec\">fnosec</a>, <a class=\"id\" href=\"#fsec\">fsec</a>, <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#in_save\">in_save</a>, *<a class=\"id\" href=\"#in_curr\">in_curr</a>, *<a class=\"id\" href=\"#in_end\">in_end</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#sec_curr\">sec_curr</a>, *<a class=\"id\" href=\"#nosec_save\">nosec_save</a>, *<a class=\"id\" href=\"#nosec\">nosec</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#open_quote\">open_quote</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_curr\">in_curr</a> = <a class=\"id\" href=\"#orig\">orig</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sec_curr\">sec_curr</a> = <a class=\"id\" href=\"#copy\">copy</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nosec\">nosec</a> = (char *)<a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nosec\">nosec</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nosec_save\">nosec_save</a> = <a class=\"id\" href=\"#nosec\">nosec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fnosec\">fnosec</a> = <a class=\"id\" href=\"#fsec\">fsec</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_save\">in_save</a> = <a class=\"id\" href=\"#in_end\">in_end</a> = <a class=\"id\" href=\"#orig\">orig</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#in_end\">in_end</a> == '\"')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#open_quote\">open_quote</a> = !<a class=\"id\" href=\"#open_quote\">open_quote</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#in_end\">in_end</a> == ',' && <a class=\"id\" href=\"#open_quote\">open_quote</a> == 0) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#in_end\">in_end</a> == '\\0') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#in_end\">in_end</a> - <a class=\"id\" href=\"#in_curr\">in_curr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#selinux_option\">selinux_option</a>(<a class=\"id\" href=\"#in_curr\">in_curr</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#take_selinux_option\">take_selinux_option</a>(&amp;<a class=\"id\" href=\"#sec_curr\">sec_curr</a>, <a class=\"id\" href=\"#in_curr\">in_curr</a>, &amp;<a class=\"id\" href=\"#fsec\">fsec</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#take_option\">take_option</a>(&amp;<a class=\"id\" href=\"#nosec\">nosec</a>, <a class=\"id\" href=\"#in_curr\">in_curr</a>, &amp;<a class=\"id\" href=\"#fnosec\">fnosec</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_curr\">in_curr</a> = <a class=\"id\" href=\"#in_end\">in_end</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (*<a class=\"id\" href=\"#in_end\">in_end</a>++);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#in_save\">in_save</a>, <a class=\"id\" href=\"#nosec_save\">nosec_save</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#nosec_save\">nosec_save</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_sb_kern_mount\">selinux_sb_kern_mount</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#superblock_doinit\">superblock_doinit</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allow all mounts performed by the kernel */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_KERNMOUNT\">MS_KERNMOUNT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#COMMON_AUDIT_DATA_INIT\">COMMON_AUDIT_DATA_INIT</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#FS\">FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#superblock_has_perm\">superblock_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#FILESYSTEM__MOUNT\">FILESYSTEM__MOUNT</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_sb_statfs\">selinux_sb_statfs</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#COMMON_AUDIT_DATA_INIT\">COMMON_AUDIT_DATA_INIT</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#FS\">FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_sb\">d_sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#superblock_has_perm\">superblock_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_sb\">d_sb</a>, <a class=\"id\" href=\"#FILESYSTEM__GETATTR\">FILESYSTEM__GETATTR</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_mount\">selinux_mount</a>(char *<a class=\"id\" href=\"#dev_name\">dev_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_REMOUNT\">MS_REMOUNT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#superblock_has_perm\">superblock_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#FILESYSTEM__REMOUNT\">FILESYSTEM__REMOUNT</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dentry_has_perm\">dentry_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#FILE__MOUNTON\">FILE__MOUNTON</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_umount\">selinux_umount</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#superblock_has_perm\">superblock_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#FILESYSTEM__UNMOUNT\">FILESYSTEM__UNMOUNT</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/* inode security operations */</span>", 
"", 
"static int <a class=\"id\" href=\"#selinux_inode_alloc_security\">selinux_inode_alloc_security</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode_alloc_security\">inode_alloc_security</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#selinux_inode_free_security\">selinux_inode_free_security</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode_free_security\">inode_free_security</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
];
xr_frag_insert('l/99/d6dc9ef78aaa49b77fee235cc039691f219e4c.xr', __xr_tmp);
