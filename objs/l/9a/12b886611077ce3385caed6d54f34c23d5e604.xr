var __xr_tmp = [
"<span class=\"comment\"> * @pid: pid of the process</span>", 
"<span class=\"comment\"> * @len: length in bytes of the bitmask pointed to by user_mask_ptr</span>", 
"<span class=\"comment\"> * @user_mask_ptr: user-space pointer to the new cpu mask</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#sched_setaffinity\">sched_setaffinity</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a>, <a class=\"id\" href=\"#pid\">pid</a>, unsigned int, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#user_mask_ptr\">user_mask_ptr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#new_mask\">new_mask</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#new_mask\">new_mask</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#get_user_cpu_mask\">get_user_cpu_mask</a>(<a class=\"id\" href=\"#user_mask_ptr\">user_mask_ptr</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#new_mask\">new_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#sched_setaffinity\">sched_setaffinity</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#new_mask\">new_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#new_mask\">new_mask</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"long <a class=\"id\" href=\"#sched_getaffinity\">sched_getaffinity</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>, struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#find_process_by_pid\">find_process_by_pid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#security_task_getscheduler\">security_task_getscheduler</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq_lock\">task_rq_lock</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#mask\">mask</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sys_sched_getaffinity - get the cpu affinity of a process</span>", 
"<span class=\"comment\"> * @pid: pid of the process</span>", 
"<span class=\"comment\"> * @len: length in bytes of the bitmask pointed to by user_mask_ptr</span>", 
"<span class=\"comment\"> * @user_mask_ptr: user-space pointer to hold the current cpu mask</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#sched_getaffinity\">sched_getaffinity</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a>, <a class=\"id\" href=\"#pid\">pid</a>, unsigned int, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#user_mask_ptr\">user_mask_ptr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> * <a class=\"id\" href=\"#BITS_PER_BYTE\">BITS_PER_BYTE</a>) &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &amp; (sizeof(unsigned long)-1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sched_getaffinity\">sched_getaffinity</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#retlen\">retlen</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#cpumask_size\">cpumask_size</a>());", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#user_mask_ptr\">user_mask_ptr</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#retlen\">retlen</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#retlen\">retlen</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sys_sched_yield - yield the current processor to other threads.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function yields the current CPU to other tasks. If there are no</span>", 
"<span class=\"comment\"> * other threads running on this CPU then this function will return.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE0\">SYSCALL_DEFINE0</a>(<a class=\"id\" href=\"#sched_yield\">sched_yield</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#this_rq_lock\">this_rq_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#yld_count\">yld_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#yield_task\">yield_task</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since we are going to call schedule() anyway, there's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no need to preempt or enable interrupts:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__release\">__release</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_release\">spin_release</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>.<a class=\"id\" href=\"#dep_map\">dep_map</a>, 1, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_raw_spin_unlock\">do_raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#should_resched\">should_resched</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#need_resched\">need_resched</a>() && !(<a class=\"id\" href=\"#preempt_count\">preempt_count</a>() &amp; <a class=\"id\" href=\"#PREEMPT_ACTIVE\">PREEMPT_ACTIVE</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cond_resched\">__cond_resched</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_preempt_count\">add_preempt_count</a>(<a class=\"id\" href=\"#PREEMPT_ACTIVE\">PREEMPT_ACTIVE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sub_preempt_count\">sub_preempt_count</a>(<a class=\"id\" href=\"#PREEMPT_ACTIVE\">PREEMPT_ACTIVE</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#_cond_resched\">_cond_resched</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#should_resched\">should_resched</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__cond_resched\">__cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#_cond_resched\">_cond_resched</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __cond_resched_lock() - if a reschedule is pending, drop the given lock,</span>", 
"<span class=\"comment\"> * call schedule, and on return reacquire the lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This works OK both with and without CONFIG_PREEMPT. We do strange low-level</span>", 
"<span class=\"comment\"> * operations here to prevent schedule() from being called twice (once via</span>", 
"<span class=\"comment\"> * spin_unlock(), once by hand).</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__cond_resched_lock\">__cond_resched_lock</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#resched\">resched</a> = <a class=\"id\" href=\"#should_resched\">should_resched</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_assert_held\">lockdep_assert_held</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spin_needbreak\">spin_needbreak</a>(<a class=\"id\" href=\"#lock\">lock</a>) || <a class=\"id\" href=\"#resched\">resched</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#resched\">resched</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__cond_resched\">__cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__cond_resched_lock\">__cond_resched_lock</a>);", 
"", 
"int <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#__cond_resched_softirq\">__cond_resched_softirq</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#in_softirq\">in_softirq</a>());", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#should_resched\">should_resched</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_bh_enable\">local_bh_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__cond_resched\">__cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_bh_disable\">local_bh_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__cond_resched_softirq\">__cond_resched_softirq</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * yield - yield the current processor to other threads.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a shortcut for kernel-space yielding - it marks the</span>", 
"<span class=\"comment\"> * thread runnable and calls sys_sched_yield().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#yield\">yield</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sys_sched_yield\">sys_sched_yield</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#yield\">yield</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This task is about to go to sleep on IO. Increment rq-&gt;nr_iowait so</span>", 
"<span class=\"comment\"> * that process accounting knows that this is a task in IO wait state.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#io_schedule\">io_schedule</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#raw_rq\">raw_rq</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delayacct_blkio_start\">delayacct_blkio_start</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_iowait\">nr_iowait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#in_iowait\">in_iowait</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#in_iowait\">in_iowait</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_iowait\">nr_iowait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delayacct_blkio_end\">delayacct_blkio_end</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#io_schedule\">io_schedule</a>);", 
"", 
"long <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#io_schedule_timeout\">io_schedule_timeout</a>(long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#raw_rq\">raw_rq</a>();", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delayacct_blkio_start\">delayacct_blkio_start</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_iowait\">nr_iowait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#in_iowait\">in_iowait</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#in_iowait\">in_iowait</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_iowait\">nr_iowait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delayacct_blkio_end\">delayacct_blkio_end</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sys_sched_get_priority_max - return maximum RT priority.</span>", 
"<span class=\"comment\"> * @policy: scheduling class.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * this syscall returns the maximum rt_priority that can be used</span>", 
"<span class=\"comment\"> * by a given scheduling class.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#sched_get_priority_max\">sched_get_priority_max</a>, int, <a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#policy\">policy</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCHED_FIFO\">SCHED_FIFO</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCHED_RR\">SCHED_RR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#MAX_USER_RT_PRIO\">MAX_USER_RT_PRIO</a>-1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCHED_NORMAL\">SCHED_NORMAL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCHED_BATCH\">SCHED_BATCH</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCHED_IDLE\">SCHED_IDLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sys_sched_get_priority_min - return minimum RT priority.</span>", 
"<span class=\"comment\"> * @policy: scheduling class.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * this syscall returns the minimum rt_priority that can be used</span>", 
"<span class=\"comment\"> * by a given scheduling class.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#sched_get_priority_min\">sched_get_priority_min</a>, int, <a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#policy\">policy</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCHED_FIFO\">SCHED_FIFO</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCHED_RR\">SCHED_RR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCHED_NORMAL\">SCHED_NORMAL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCHED_BATCH\">SCHED_BATCH</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCHED_IDLE\">SCHED_IDLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sys_sched_rr_get_interval - return the default timeslice of a process.</span>", 
"<span class=\"comment\"> * @pid: pid of the process.</span>", 
"<span class=\"comment\"> * @interval: userspace pointer to the timeslice value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * this syscall writes the default timeslice value of a given process</span>", 
"<span class=\"comment\"> * into the user-space timespec buffer. A value of '0' means infinity.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#sched_rr_get_interval\">sched_rr_get_interval</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a>, <a class=\"id\" href=\"#pid\">pid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#interval\">interval</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#time_slice\">time_slice</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pid\">pid</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#find_process_by_pid\">find_process_by_pid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#security_task_getscheduler\">security_task_getscheduler</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq_lock\">task_rq_lock</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time_slice\">time_slice</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#get_rr_interval\">get_rr_interval</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_rq_unlock\">task_rq_unlock</a>(<a class=\"id\" href=\"#rq\">rq</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jiffies_to_timespec\">jiffies_to_timespec</a>(<a class=\"id\" href=\"#time_slice\">time_slice</a>, &amp;<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#interval\">interval</a>, &amp;<a class=\"id\" href=\"#t\">t</a>, sizeof(<a class=\"id\" href=\"#t\">t</a>)) ? -<a class=\"id\" href=\"#EFAULT\">EFAULT</a> : 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static const char <a class=\"id\" href=\"#stat_nam\">stat_nam</a>[] = <a class=\"id\" href=\"#TASK_STATE_TO_CHAR_STR\">TASK_STATE_TO_CHAR_STR</a>;", 
"", 
"void <a class=\"id\" href=\"#sched_show_task\">sched_show_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#free\">free</a> = 0;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> ? <a class=\"id\" href=\"#__ffs\">__ffs</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a>) + 1 : 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%-13.13s %c\", <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#comm\">comm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> &lt; sizeof(<a class=\"id\" href=\"#stat_nam\">stat_nam</a>) - 1 ? <a class=\"id\" href=\"#stat_nam\">stat_nam</a>[<a class=\"id\" href=\"#state\">state</a>] : '?');", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \" running  \");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \" %08lx \", <a class=\"id\" href=\"#thread_saved_pc\">thread_saved_pc</a>(<a class=\"id\" href=\"#p\">p</a>));", 
"#else", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"  running task    \");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \" %016lx \", <a class=\"id\" href=\"#thread_saved_pc\">thread_saved_pc</a>(<a class=\"id\" href=\"#p\">p</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_STACK_USAGE\">CONFIG_DEBUG_STACK_USAGE</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a> = <a class=\"id\" href=\"#stack_not_used\">stack_not_used</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"%5lu %5d %6d 0x%08lx\\n\", <a class=\"id\" href=\"#free\">free</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>),", 
];
xr_frag_insert('l/9a/12b886611077ce3385caed6d54f34c23d5e604.xr', __xr_tmp);
