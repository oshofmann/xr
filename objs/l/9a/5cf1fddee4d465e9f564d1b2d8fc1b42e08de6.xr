var __xr_tmp = [
"<a class=\"id\" href=\"#DEFINE_SIMPLE_ATTRIBUTE\">DEFINE_SIMPLE_ATTRIBUTE</a>(<a class=\"id\" href=\"#fops_size_t\">fops_size_t</a>, <a class=\"id\" href=\"#debugfs_size_t_get\">debugfs_size_t_get</a>, <a class=\"id\" href=\"#debugfs_size_t_set\">debugfs_size_t_set</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%llu\\n\");<span class=\"ts\"/><span class=\"comment\">/* %llu and %zu are more or less the same */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * debugfs_create_size_t - create a debugfs file that is used to read and write an size_t value</span>", 
"<span class=\"comment\"> * @name: a pointer to a string containing the name of the file to create.</span>", 
"<span class=\"comment\"> * @mode: the permission that the file should have</span>", 
"<span class=\"comment\"> * @parent: a pointer to the parent dentry for this file.  This should be a</span>", 
"<span class=\"comment\"> *          directory dentry if set.  If this parameter is %NULL, then the</span>", 
"<span class=\"comment\"> *          file will be created in the root of the debugfs filesystem.</span>", 
"<span class=\"comment\"> * @value: a pointer to the variable that the file should read to and write</span>", 
"<span class=\"comment\"> *         from.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#debugfs_create_size_t\">debugfs_create_size_t</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#fops_size_t\">fops_size_t</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#debugfs_create_size_t\">debugfs_create_size_t</a>);", 
"", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#read_file_bool\">read_file_bool</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#user_buf\">user_buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[3];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[0] = 'Y';", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[0] = 'N';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[1] = '\\n';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[2] = 0x00;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#user_buf\">user_buf</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#buf\">buf</a>, 2);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#write_file_bool\">write_file_bool</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#user_buf\">user_buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[32];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#buf_size\">buf_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf_size\">buf_size</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#count\">count</a>, (sizeof(<a class=\"id\" href=\"#buf\">buf</a>)-1));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#user_buf\">user_buf</a>, <a class=\"id\" href=\"#buf_size\">buf_size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#buf\">buf</a>[0]) {", 
"<span class=\"ts\"/>case 'y':", 
"<span class=\"ts\"/>case 'Y':", 
"<span class=\"ts\"/>case '1':", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 'n':", 
"<span class=\"ts\"/>case 'N':", 
"<span class=\"ts\"/>case '0':", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#fops_bool\">fops_bool</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_file_bool\">read_file_bool</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a> =<span class=\"ts\"/><a class=\"id\" href=\"#write_file_bool\">write_file_bool</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#default_open\">default_open</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * debugfs_create_bool - create a debugfs file that is used to read and write a boolean value</span>", 
"<span class=\"comment\"> * @name: a pointer to a string containing the name of the file to create.</span>", 
"<span class=\"comment\"> * @mode: the permission that the file should have</span>", 
"<span class=\"comment\"> * @parent: a pointer to the parent dentry for this file.  This should be a</span>", 
"<span class=\"comment\"> *          directory dentry if set.  If this parameter is %NULL, then the</span>", 
"<span class=\"comment\"> *          file will be created in the root of the debugfs filesystem.</span>", 
"<span class=\"comment\"> * @value: a pointer to the variable that the file should read to and write</span>", 
"<span class=\"comment\"> *         from.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function creates a file in debugfs with the given name that</span>", 
"<span class=\"comment\"> * contains the value of the variable @value.  If the @mode variable is so</span>", 
"<span class=\"comment\"> * set, it can be read from, and written to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will return a pointer to a dentry if it succeeds.  This</span>", 
"<span class=\"comment\"> * pointer must be passed to the debugfs_remove() function when the file is</span>", 
"<span class=\"comment\"> * to be removed (no automatic cleanup happens if your module is unloaded,</span>", 
"<span class=\"comment\"> * you are responsible here.)  If an error occurs, %NULL will be returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If debugfs is not enabled in the kernel, the value -%ENODEV will be</span>", 
"<span class=\"comment\"> * returned.  It is not wise to check for this value, but rather, check for</span>", 
"<span class=\"comment\"> * %NULL or !%NULL instead as to eliminate the need for #ifdef in the calling</span>", 
"<span class=\"comment\"> * code.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#debugfs_create_bool\">debugfs_create_bool</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#fops_bool\">fops_bool</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#debugfs_create_bool\">debugfs_create_bool</a>);", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#read_file_blob\">read_file_blob</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#user_buf\">user_buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#debugfs_blob_wrapper\">debugfs_blob_wrapper</a> *<a class=\"id\" href=\"#blob\">blob</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#user_buf\">user_buf</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#blob\">blob</a>-><a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blob\">blob</a>-><a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#fops_blob\">fops_blob</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_file_blob\">read_file_blob</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#default_open\">default_open</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * debugfs_create_blob - create a debugfs file that is used to read a binary blob</span>", 
"<span class=\"comment\"> * @name: a pointer to a string containing the name of the file to create.</span>", 
"<span class=\"comment\"> * @mode: the permission that the file should have</span>", 
"<span class=\"comment\"> * @parent: a pointer to the parent dentry for this file.  This should be a</span>", 
"<span class=\"comment\"> *          directory dentry if set.  If this parameter is %NULL, then the</span>", 
"<span class=\"comment\"> *          file will be created in the root of the debugfs filesystem.</span>", 
"<span class=\"comment\"> * @blob: a pointer to a struct debugfs_blob_wrapper which contains a pointer</span>", 
"<span class=\"comment\"> *        to the blob data and the size of the data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function creates a file in debugfs with the given name that exports</span>", 
"<span class=\"comment\"> * @blob-&gt;data as a binary blob. If the @mode variable is so set it can be</span>", 
"<span class=\"comment\"> * read from. Writing is not supported.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will return a pointer to a dentry if it succeeds.  This</span>", 
"<span class=\"comment\"> * pointer must be passed to the debugfs_remove() function when the file is</span>", 
"<span class=\"comment\"> * to be removed (no automatic cleanup happens if your module is unloaded,</span>", 
"<span class=\"comment\"> * you are responsible here.)  If an error occurs, %NULL will be returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If debugfs is not enabled in the kernel, the value -%ENODEV will be</span>", 
"<span class=\"comment\"> * returned.  It is not wise to check for this value, but rather, check for</span>", 
"<span class=\"comment\"> * %NULL or !%NULL instead as to eliminate the need for #ifdef in the calling</span>", 
"<span class=\"comment\"> * code.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#debugfs_create_blob\">debugfs_create_blob</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#debugfs_blob_wrapper\">debugfs_blob_wrapper</a> *<a class=\"id\" href=\"#blob\">blob</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#blob\">blob</a>, &amp;<a class=\"id\" href=\"#fops_blob\">fops_blob</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#debugfs_create_blob\">debugfs_create_blob</a>);", 
];
xr_frag_insert('l/9a/5cf1fddee4d465e9f564d1b2d8fc1b42e08de6.xr', __xr_tmp);
