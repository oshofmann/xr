var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/mm/oom_kill.c</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> *  Copyright (C)  1998,2000  Rik van Riel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Thanks go out to Claus Fischer for some serious inspiration and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for goading me into coding this file...</span>", 
"<span class=\"comment\"> *  Copyright (C)  2010  Google, Inc.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Rewritten by David Rientjes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  The routines in this file are used to kill a process when</span>", 
"<span class=\"comment\"> *  we're seriously out of memory. This gets called from __alloc_pages()</span>", 
"<span class=\"comment\"> *  in mm/page_alloc.c when we really run out of memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Since we won't call these routines often (on a well-configured</span>", 
"<span class=\"comment\"> *  machine) this file will double as a 'coding guide' and a signpost</span>", 
"<span class=\"comment\"> *  for newbie kernel hackers. It features several pointers to major</span>", 
"<span class=\"comment\"> *  kernel subsystems and hints as to where to find out what things do.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#oom\">oom</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timex\">timex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpuset\">cpuset</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memcontrol\">memcontrol</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempolicy\">mempolicy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"int <a class=\"id\" href=\"#sysctl_panic_on_oom\">sysctl_panic_on_oom</a>;", 
"int <a class=\"id\" href=\"#sysctl_oom_kill_allocating_task\">sysctl_oom_kill_allocating_task</a>;", 
"int <a class=\"id\" href=\"#sysctl_oom_dump_tasks\">sysctl_oom_dump_tasks</a> = 1;", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#zone_scan_lock\">zone_scan_lock</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * has_intersects_mems_allowed() - check task eligiblity for kill</span>", 
"<span class=\"comment\"> * @tsk: task struct of which task to consider</span>", 
"<span class=\"comment\"> * @mask: nodemask passed to page allocator for mempolicy ooms</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Task eligibility is determined by whether or not a candidate task, @tsk,</span>", 
"<span class=\"comment\"> * shares the same mempolicy nodes as current if it is bound by such a policy</span>", 
"<span class=\"comment\"> * and whether or not it has the same set of allowed cpuset nodes.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#has_intersects_mems_allowed\">has_intersects_mems_allowed</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#tsk\">tsk</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If this is a mempolicy constrained oom, tsk's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * cpuset is irrelevant.  Only return true if its</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * mempolicy intersects current, otherwise it may be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * needlessly killed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mempolicy_nodemask_intersects\">mempolicy_nodemask_intersects</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#mask\">mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This is not a mempolicy constrained oom, so only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * check the mems of tsk's cpuset.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuset_mems_allowed_intersects\">cpuset_mems_allowed_intersects</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#tsk\">tsk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#has_intersects_mems_allowed\">has_intersects_mems_allowed</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NUMA */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If this is a system OOM (not a memcg OOM) and the task selected to be</span>", 
"<span class=\"comment\"> * killed is not already running at high (RT) priorities, speed up the</span>", 
"<span class=\"comment\"> * recovery by boosting the dying task to the lowest FIFO priority.</span>", 
"<span class=\"comment\"> * That helps with the recovery and avoids interfering with RT tasks.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#boost_dying_task_prio\">boost_dying_task_prio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_param\">sched_param</a> <a class=\"id\" href=\"#param\">param</a> = { .<a class=\"id\" href=\"#sched_priority\">sched_priority</a> = 1 };", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_task\">rt_task</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_setscheduler_nocheck\">sched_setscheduler_nocheck</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#SCHED_FIFO\">SCHED_FIFO</a>, &amp;<a class=\"id\" href=\"#param\">param</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The process p may have detached its own -&gt;mm while exiting or through</span>", 
"<span class=\"comment\"> * use_mm(), but one or more of its subthreads may still have a valid</span>", 
"<span class=\"comment\"> * pointer.  Return p, or any of its subthreads with a valid -&gt;mm, with</span>", 
"<span class=\"comment\"> * task_lock() held.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#find_lock_task_mm\">find_lock_task_mm</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* return true if the task is not adequate as candidate victim task. */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#oom_unkillable_task\">oom_unkillable_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_global_init\">is_global_init</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_KTHREAD\">PF_KTHREAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* When mem_cgroup_out_of_memory() and p is not member of the group */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a> && !<a class=\"id\" href=\"#task_in_mem_cgroup\">task_in_mem_cgroup</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#mem\">mem</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* p may not have freeable memory in nodemask */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#has_intersects_mems_allowed\">has_intersects_mems_allowed</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * oom_badness - heuristic function to determine which candidate task to kill</span>", 
"<span class=\"comment\"> * @p: task struct of which task we should calculate</span>", 
"<span class=\"comment\"> * @totalpages: total present RAM allowed for page allocation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The heuristic for determining which task to kill is made to be as simple and</span>", 
"<span class=\"comment\"> * predictable as possible.  The goal is to return the highest value for the</span>", 
"<span class=\"comment\"> * task consuming the most memory to avoid subsequent oom failures.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#oom_badness\">oom_badness</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>, unsigned long <a class=\"id\" href=\"#totalpages\">totalpages</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#points\">points</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oom_unkillable_task\">oom_unkillable_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#find_lock_task_mm\">find_lock_task_mm</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Shortcut check for OOM_SCORE_ADJ_MIN so the entire heuristic doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to be executed for something that cannot be killed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#oom_score_adj\">oom_score_adj</a> == <a class=\"id\" href=\"#OOM_SCORE_ADJ_MIN\">OOM_SCORE_ADJ_MIN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When the PF_OOM_ORIGIN bit is set, it indicates the task should have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * priority for oom killing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_OOM_ORIGIN\">PF_OOM_ORIGIN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1000;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The memory controller may have a limit of 0 bytes, so avoid a divide</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by zero, if necessary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#totalpages\">totalpages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#totalpages\">totalpages</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The baseline for the badness score is the proportion of RAM that each</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task's rss and swap space use.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#points\">points</a> = (<a class=\"id\" href=\"#get_mm_rss\">get_mm_rss</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mm\">mm</a>) + <a class=\"id\" href=\"#get_mm_counter\">get_mm_counter</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_SWAPENTS\">MM_SWAPENTS</a>)) * 1000 /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#totalpages\">totalpages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Root processes get 3% bonus, just like the __vm_enough_memory()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * implementation used by LSMs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#has_capability_noaudit\">has_capability_noaudit</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#points\">points</a> -= 30;", 
"", 
];
xr_frag_insert('l/9a/64451aeb51d772c2b22138746f860d4dcf671a.xr', __xr_tmp);
