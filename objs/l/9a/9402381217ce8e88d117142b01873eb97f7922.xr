var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions related to mapping data to requests</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#sg\">sg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for struct sg_iovec */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"blk.h\"", 
"", 
"int <a class=\"id\" href=\"#blk_rq_append_bio\">blk_rq_append_bio</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_bio_prep\">blk_rq_bio_prep</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#ll_back_merge_fn\">ll_back_merge_fn</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#bio\">bio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#biotail\">biotail</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#biotail\">biotail</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#__data_len\">__data_len</a> += <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__blk_rq_unmap_user\">__blk_rq_unmap_user</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_flagged\">bio_flagged</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#BIO_USER_MAPPED\">BIO_USER_MAPPED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_unmap_user\">bio_unmap_user</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#bio_uncopy_user\">bio_uncopy_user</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__blk_rq_map_user\">__blk_rq_map_user</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#rq_map_data\">rq_map_data</a> *<a class=\"id\" href=\"#map_data\">map_data</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#uaddr\">uaddr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, *<a class=\"id\" href=\"#orig_bio\">orig_bio</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#reading\">reading</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reading\">reading</a> = <a class=\"id\" href=\"#rq_data_dir\">rq_data_dir</a>(<a class=\"id\" href=\"#rq\">rq</a>) == <a class=\"id\" href=\"#READ\">READ</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if alignment requirement is satisfied, map in user pages for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * direct dma. else, set up kernel bounce buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uaddr\">uaddr</a> = (unsigned long) <a class=\"id\" href=\"#ubuf\">ubuf</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_rq_aligned\">blk_rq_aligned</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#len\">len</a>) && !<a class=\"id\" href=\"#map_data\">map_data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio_map_user\">bio_map_user</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#reading\">reading</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio_copy_user\">bio_copy_user</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#map_data\">map_data</a>, <a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#reading\">reading</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#bio\">bio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#map_data\">map_data</a> && <a class=\"id\" href=\"#map_data\">map_data</a>-><a class=\"id\" href=\"#null_mapped\">null_mapped</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a> |= (1 << <a class=\"id\" href=\"#BIO_NULL_MAPPED\">BIO_NULL_MAPPED</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#orig_bio\">orig_bio</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_bounce\">blk_queue_bounce</a>(<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We link the bounce buffer in and could have to traverse it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * later so we have to get a ref to prevent it from being freed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_get\">bio_get</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#blk_rq_append_bio\">blk_rq_append_bio</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if it was boucned we must call the end io function */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_endio\">bio_endio</a>(<a class=\"id\" href=\"#bio\">bio</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__blk_rq_unmap_user\">__blk_rq_unmap_user</a>(<a class=\"id\" href=\"#orig_bio\">orig_bio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_rq_map_user - map user data to a request, for REQ_TYPE_BLOCK_PC usage</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/><span class=\"ts\"/>request queue where request should be inserted</span>", 
"<span class=\"comment\"> * @rq:<span class=\"ts\"/><span class=\"ts\"/>request structure to fill</span>", 
"<span class=\"comment\"> * @map_data:   pointer to the rq_map_data holding pages (if necessary)</span>", 
"<span class=\"comment\"> * @ubuf:<span class=\"ts\"/>the user buffer</span>", 
"<span class=\"comment\"> * @len:<span class=\"ts\"/>length of user data</span>", 
"<span class=\"comment\"> * @gfp_mask:<span class=\"ts\"/>memory allocation flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Data will be mapped directly for zero copy I/O, if possible. Otherwise</span>", 
"<span class=\"comment\"> *    a kernel bounce buffer is used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    A matching blk_rq_unmap_user() must be issued at the end of I/O, while</span>", 
"<span class=\"comment\"> *    still in process context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    Note: The mapped bio may need to be bounced through blk_queue_bounce()</span>", 
"<span class=\"comment\"> *    before being submitted to the device, as pages mapped may be out of</span>", 
"<span class=\"comment\"> *    reach. It's the callers responsibility to make sure this happens. The</span>", 
"<span class=\"comment\"> *    original bio must be passed back in to blk_rq_unmap_user() for proper</span>", 
"<span class=\"comment\"> *    unmapping.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#blk_rq_map_user\">blk_rq_map_user</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#rq_map_data\">rq_map_data</a> *<a class=\"id\" href=\"#map_data\">map_data</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
];
xr_frag_insert('l/9a/9402381217ce8e88d117142b01873eb97f7922.xr', __xr_tmp);
