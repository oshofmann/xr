var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Precise Delay Loops for i386</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copyright (C) 1993 Linus Torvalds</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copyright (C) 1997 Martin Mares &lt;mj@atrey.karlin.mff.cuni.cz&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copyright (C) 2008 Jiri Hladky &lt;hladky _dot_ jiri _at_ gmail _dot_ com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The __delay function must _NOT_ be inlined as its execution time</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>depends wildly on alignment on many x86 processors. The additional</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>jump magic is needed to get the timing stable on all the CPU's</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>we have to worry about.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timex\">timex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#preempt\">preempt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"# <a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* simple loop based delay: */</span>", 
"static void <a class=\"id\" href=\"#delay_loop\">delay_loop</a>(unsigned long <a class=\"id\" href=\"#loops\">loops</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(", 
"<span class=\"ts\"/><span class=\"ts\"/>\" test %0,%0 \\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\" jz 3f  \\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\" jmp 1f  \\n\"", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>\".align 16  \\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"1: jmp 2f  \\n\"", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>\".align 16  \\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"2: dec %0  \\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\" jnz 2b  \\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"3: dec %0  \\n\"", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>: <span class=\"comment\">/* we don't need output */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>:\"a\" (<a class=\"id\" href=\"#loops\">loops</a>)", 
"<span class=\"ts\"/>);", 
"}", 
"", 
"<span class=\"comment\">/* TSC based delay: */</span>", 
"static void <a class=\"id\" href=\"#delay_tsc\">delay_tsc</a>(unsigned long <a class=\"id\" href=\"#loops\">loops</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bclock\">bclock</a>, <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtsc_barrier\">rdtsc_barrier</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtscl\">rdtscl</a>(<a class=\"id\" href=\"#bclock\">bclock</a>);", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdtsc_barrier\">rdtsc_barrier</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdtscl\">rdtscl</a>(<a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#bclock\">bclock</a>) >= <a class=\"id\" href=\"#loops\">loops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Allow RT tasks to run */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rep_nop\">rep_nop</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It is possible that we moved to another CPU, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * since TSC's are per-cpu we need to calculate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that. The delay must guarantee that we wait \"at</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * least\" the amount of time. Being moved to another</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * CPU could make the wait longer but we just need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * make sure we waited long enough. Rebalance the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * counter for this CPU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>())) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loops\">loops</a> -= (<a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#bclock\">bclock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdtsc_barrier\">rdtsc_barrier</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdtscl\">rdtscl</a>(<a class=\"id\" href=\"#bclock\">bclock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Since we calibrate only once at boot, this</span>", 
"<span class=\"comment\"> * function should be set once at boot and not changed</span>", 
"<span class=\"comment\"> */</span>", 
"static void (*<a class=\"id\" href=\"#delay_fn\">delay_fn</a>)(unsigned long) = <a class=\"id\" href=\"#delay_loop\">delay_loop</a>;", 
"", 
"void <a class=\"id\" href=\"#use_tsc_delay\">use_tsc_delay</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delay_fn\">delay_fn</a> = <a class=\"id\" href=\"#delay_tsc\">delay_tsc</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#read_current_timer\">read_current_timer</a>(unsigned long *<a class=\"id\" href=\"#timer_val\">timer_val</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delay_fn\">delay_fn</a> == <a class=\"id\" href=\"#delay_tsc\">delay_tsc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdtscll\">rdtscll</a>(*<a class=\"id\" href=\"#timer_val\">timer_val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__delay\">__delay</a>(unsigned long <a class=\"id\" href=\"#loops\">loops</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delay_fn\">delay_fn</a>(<a class=\"id\" href=\"#loops\">loops</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__delay\">__delay</a>);", 
"", 
"<a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__const_udelay\">__const_udelay</a>(unsigned long <a class=\"id\" href=\"#xloops\">xloops</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#d0\">d0</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xloops\">xloops</a> *= 4;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"mull %%edx\"", 
"<span class=\"ts\"/><span class=\"ts\"/>:\"=d\" (<a class=\"id\" href=\"#xloops\">xloops</a>), \"=&a\" (<a class=\"id\" href=\"#d0\">d0</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>:\"1\" (<a class=\"id\" href=\"#xloops\">xloops</a>), \"0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>()).<a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a> * (<a class=\"id\" href=\"#HZ\">HZ</a>/4)));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__delay\">__delay</a>(++<a class=\"id\" href=\"#xloops\">xloops</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__const_udelay\">__const_udelay</a>);", 
"", 
"void <a class=\"id\" href=\"#__udelay\">__udelay</a>(unsigned long <a class=\"id\" href=\"#usecs\">usecs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__const_udelay\">__const_udelay</a>(<a class=\"id\" href=\"#usecs\">usecs</a> * 0x000010c7); <span class=\"comment\">/* 2**32 / 1000000 (rounded up) */</span>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__udelay\">__udelay</a>);", 
"", 
"void <a class=\"id\" href=\"#__ndelay\">__ndelay</a>(unsigned long <a class=\"id\" href=\"#nsecs\">nsecs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__const_udelay\">__const_udelay</a>(<a class=\"id\" href=\"#nsecs\">nsecs</a> * 0x00005); <span class=\"comment\">/* 2**32 / 1000000000 (rounded up) */</span>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__ndelay\">__ndelay</a>);", 
];
xr_frag_insert('l/9a/d30c887ce7947c66bc711fa6d7a4f66cc588a3.xr', __xr_tmp);
