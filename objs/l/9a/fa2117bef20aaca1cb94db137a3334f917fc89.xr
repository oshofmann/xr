var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_SMP_H\">__LINUX_SMP_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_SMP_H\">__LINUX_SMP_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Generic SMP support</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox. &lt;alan@redhat.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpumask\">cpumask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"extern void <a class=\"id\" href=\"#cpu_idle\">cpu_idle</a>(void);", 
"", 
"struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#func\">func</a>) (void *<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#priv\">priv</a>;", 
"};", 
"", 
"<span class=\"comment\">/* total number of cpus in this system (may exceed NR_CPUS) */</span>", 
"extern unsigned int <a class=\"id\" href=\"#total_cpus\">total_cpus</a>;", 
"", 
"int <a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(int <a class=\"id\" href=\"#cpuid\">cpuid</a>, void (*<a class=\"id\" href=\"#func\">func</a>) (void *<a class=\"id\" href=\"#info\">info</a>), void *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#preempt\">preempt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#thread_info\">thread_info</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * main cross-CPU interfaces, handles INIT, TLB flush, STOP, etc.</span>", 
"<span class=\"comment\"> * (defined in asm header):</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * stops all CPUs but the current one:</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#smp_send_stop\">smp_send_stop</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sends a 'reschedule' event to another CPU:</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#smp_send_reschedule\">smp_send_reschedule</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prepare machine for booting other CPUs.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#smp_prepare_cpus\">smp_prepare_cpus</a>(unsigned int <a class=\"id\" href=\"#max_cpus\">max_cpus</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bring a CPU up</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#__cpu_up\">__cpu_up</a>(unsigned int <a class=\"id\" href=\"#cpunum\">cpunum</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Final polishing of CPUs</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#smp_cpus_done\">smp_cpus_done</a>(unsigned int <a class=\"id\" href=\"#max_cpus\">max_cpus</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call a function on all other processors</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#smp_call_function\">smp_call_function</a>(void(*<a class=\"id\" href=\"#func\">func</a>)(void *<a class=\"id\" href=\"#info\">info</a>), void *<a class=\"id\" href=\"#info\">info</a>, int <a class=\"id\" href=\"#wait\">wait</a>);", 
"void <a class=\"id\" href=\"#smp_call_function_many\">smp_call_function_many</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void (*<a class=\"id\" href=\"#func\">func</a>)(void *<a class=\"id\" href=\"#info\">info</a>), void *<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"void <a class=\"id\" href=\"#__smp_call_function_single\">__smp_call_function_single</a>(int <a class=\"id\" href=\"#cpuid\">cpuid</a>, struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"int <a class=\"id\" href=\"#smp_call_function_any\">smp_call_function_any</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void (*<a class=\"id\" href=\"#func\">func</a>)(void *<a class=\"id\" href=\"#info\">info</a>), void *<a class=\"id\" href=\"#info\">info</a>, int <a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic and arch helpers</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_USE_GENERIC_SMP_HELPERS\">CONFIG_USE_GENERIC_SMP_HELPERS</a>", 
"void <a class=\"id\" href=\"#generic_smp_call_function_single_interrupt\">generic_smp_call_function_single_interrupt</a>(void);", 
"void <a class=\"id\" href=\"#generic_smp_call_function_interrupt\">generic_smp_call_function_interrupt</a>(void);", 
"void <a class=\"id\" href=\"#ipi_call_lock\">ipi_call_lock</a>(void);", 
"void <a class=\"id\" href=\"#ipi_call_unlock\">ipi_call_unlock</a>(void);", 
"void <a class=\"id\" href=\"#ipi_call_lock_irq\">ipi_call_lock_irq</a>(void);", 
"void <a class=\"id\" href=\"#ipi_call_unlock_irq\">ipi_call_unlock_irq</a>(void);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call a function on all processors</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(void (*<a class=\"id\" href=\"#func\">func</a>) (void *<a class=\"id\" href=\"#info\">info</a>), void *<a class=\"id\" href=\"#info\">info</a>, int <a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MSG_ALL_BUT_SELF\">MSG_ALL_BUT_SELF</a><span class=\"ts\"/>0x8000<span class=\"ts\"/><span class=\"comment\">/* Assume &lt;32768 CPU's */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MSG_ALL\">MSG_ALL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x8001", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MSG_INVALIDATE_TLB\">MSG_INVALIDATE_TLB</a><span class=\"ts\"/>0x0001<span class=\"ts\"/><span class=\"comment\">/* Remote processor TLB invalidate */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MSG_STOP_CPU\">MSG_STOP_CPU</a><span class=\"ts\"/><span class=\"ts\"/>0x0002<span class=\"ts\"/><span class=\"comment\">/* Sent to shut down slave CPU's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * when rebooting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MSG_RESCHEDULE\">MSG_RESCHEDULE</a><span class=\"ts\"/><span class=\"ts\"/>0x0003<span class=\"ts\"/><span class=\"comment\">/* Reschedule request from master CPU*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MSG_CALL_FUNCTION\">MSG_CALL_FUNCTION</a>       0x0004  <span class=\"comment\">/* Call function on all other CPUs */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Mark the boot cpu \"online\" so that it can call console drivers in</span>", 
"<span class=\"comment\"> * printk() and can access its per-cpu storage.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#smp_prepare_boot_cpu\">smp_prepare_boot_cpu</a>(void);", 
"", 
"extern unsigned int <a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a>;", 
"", 
"#else <span class=\"comment\">/* !SMP */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#smp_send_stop\">smp_send_stop</a>(void) { }", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>These macros fold the SMP functionality into a single CPU system</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#up_smp_call_function\">up_smp_call_function</a>(void (*<a class=\"id\" href=\"#func\">func</a>)(void *), void *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_call_function\">smp_call_function</a>(<a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#wait\">wait</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#up_smp_call_function\">up_smp_call_function</a>(<a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#info\">info</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#func\">func</a>,<a class=\"id\" href=\"#info\">info</a>,<a class=\"id\" href=\"#wait\">wait</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#info\">info</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>})", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#smp_send_reschedule\">smp_send_reschedule</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>) { }", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#num_booting_cpus\">num_booting_cpus</a>()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_prepare_boot_cpu\">smp_prepare_boot_cpu</a>()<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_call_function_many\">smp_call_function_many</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#wait\">wait</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#up_smp_call_function\">up_smp_call_function</a>(<a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#info\">info</a>))", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_call_single_data\">init_call_single_data</a>(void) { }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#smp_call_function_any\">smp_call_function_any</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>, void (*<a class=\"id\" href=\"#func\">func</a>)(void *<a class=\"id\" href=\"#info\">info</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#info\">info</a>, int <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(0, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !SMP */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * smp_processor_id(): get the current CPU ID.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * if DEBUG_PREEMPT is enabled then we check whether it is</span>", 
"<span class=\"comment\"> * used in a preemption-safe way. (smp_processor_id() is safe</span>", 
"<span class=\"comment\"> * if it's used in a preemption-off critical section, or in</span>", 
"<span class=\"comment\"> * a thread that is bound to the current CPU.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: raw_smp_processor_id() is for internal use only</span>", 
"<span class=\"comment\"> * (smp_processor_id() is the preferred variant), but in rare</span>", 
"<span class=\"comment\"> * instances it might also be used to turn off false positives</span>", 
"<span class=\"comment\"> * (i.e. smp_processor_id() use that the debugging code reports but</span>", 
"<span class=\"comment\"> * which use for some reason is legal). Don't use this to hack around</span>", 
"<span class=\"comment\"> * the warning message, as your code might not work under PREEMPT.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PREEMPT\">CONFIG_DEBUG_PREEMPT</a>", 
"  extern unsigned int <a class=\"id\" href=\"#debug_smp_processor_id\">debug_smp_processor_id</a>(void);", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>() <a class=\"id\" href=\"#debug_smp_processor_id\">debug_smp_processor_id</a>()", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>() <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>()", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_cpu\">get_cpu</a>()<span class=\"ts\"/><span class=\"ts\"/>({ <a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>(); <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(); })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#put_cpu\">put_cpu</a>()<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>()", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Callback to arch code if there's nosmp or maxcpus=0 on the</span>", 
"<span class=\"comment\"> * boot command line:</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#arch_disable_smp_support\">arch_disable_smp_support</a>(void);", 
"", 
"void <a class=\"id\" href=\"#smp_setup_processor_id\">smp_setup_processor_id</a>(void);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX_SMP_H */</span>", 
];
xr_frag_insert('l/9a/fa2117bef20aaca1cb94db137a3334f917fc89.xr', __xr_tmp);
