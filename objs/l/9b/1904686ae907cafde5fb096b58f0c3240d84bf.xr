var __xr_tmp = [
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#root\">root</a> != <a class=\"id\" href=\"#subsys\">subsys</a>-><a class=\"id\" href=\"#root\">root</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#parent\">parent</a> != <a class=\"id\" href=\"#task_cgroup\">task_cgroup</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#subsys\">subsys</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Aargh, we raced ... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_css_set\">put_css_set</a>(<a class=\"id\" href=\"#cg\">cg</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_super\">deactivate_super</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The cgroup is still accessible in the VFS, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we're not going to try to rmdir() it at this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * point. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"Race in cgroup_clone() - leaking cgroup %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#nodename\">nodename</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do any required auto-setup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_subsys\">for_each_subsys</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ss\">ss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#post_clone\">post_clone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#post_clone\">post_clone</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All seems fine. Finish by moving the task into the new cgroup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cgroup_attach_task\">cgroup_attach_task</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"", 
" <a class=\"id\" href=\"#out_release\">out_release</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_css_set\">put_css_set</a>(<a class=\"id\" href=\"#cg\">cg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deactivate_super\">deactivate_super</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_is_descendant - see if @cgrp is a descendant of @task's cgrp</span>", 
"<span class=\"comment\"> * @cgrp: the cgroup in question</span>", 
"<span class=\"comment\"> * @task: the task in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See if @cgrp is a descendant of @task's cgroup in the appropriate</span>", 
"<span class=\"comment\"> * hierarchy.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If we are sending in dummytop, then presumably we are creating</span>", 
"<span class=\"comment\"> * the top cgroup in the subsystem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called only by the ns (nsproxy) cgroup.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cgroup_is_descendant\">cgroup_is_descendant</a>(const struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#target\">target</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cgrp\">cgrp</a> == <a class=\"id\" href=\"#dummytop\">dummytop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a> = <a class=\"id\" href=\"#task_cgroup_from_root\">task_cgroup_from_root</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cgrp\">cgrp</a> != <a class=\"id\" href=\"#target\">target</a> && <a class=\"id\" href=\"#cgrp\">cgrp</a>!= <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#top_cgroup\">top_cgroup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (<a class=\"id\" href=\"#cgrp\">cgrp</a> == <a class=\"id\" href=\"#target\">target</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#check_for_release\">check_for_release</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* All of these checks rely on RCU to keep the cgroup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * structure alive */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cgroup_is_releasable\">cgroup_is_releasable</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>) && !<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/>    && <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#children\">children</a>) && !<a class=\"id\" href=\"#cgroup_has_css_refs\">cgroup_has_css_refs</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Control Group is currently removeable. If it's not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * already queued for a userspace notification, queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it now */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#need_schedule_work\">need_schedule_work</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#release_list_lock\">release_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cgroup_is_removed\">cgroup_is_removed</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#release_list\">release_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#release_list\">release_list</a>, &amp;<a class=\"id\" href=\"#release_list\">release_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_schedule_work\">need_schedule_work</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#release_list_lock\">release_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#need_schedule_work\">need_schedule_work</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#release_agent_work\">release_agent_work</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Caller must verify that the css is not for root cgroup */</span>", 
"void <a class=\"id\" href=\"#__css_put\">__css_put</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#cgroup\">cgroup</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#atomic_sub_return\">atomic_sub_return</a>(<a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_on_release\">notify_on_release</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#CGRP_RELEASABLE\">CGRP_RELEASABLE</a>, &amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_for_release\">check_for_release</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgroup_wakeup_rmdir_waiter\">cgroup_wakeup_rmdir_waiter</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#val\">val</a> &lt; 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__css_put\">__css_put</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Notify userspace when a cgroup is released, by running the</span>", 
"<span class=\"comment\"> * configured release agent with the name of the cgroup (path</span>", 
"<span class=\"comment\"> * relative to the root of cgroup file system) as the argument.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Most likely, this user command will try to rmdir this cgroup.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This races with the possibility that some other task will be</span>", 
"<span class=\"comment\"> * attached to this cgroup before it is removed, or that some other</span>", 
"<span class=\"comment\"> * user task will 'mkdir' a child cgroup of this cgroup.  That's ok.</span>", 
"<span class=\"comment\"> * The presumed 'rmdir' will fail quietly if this cgroup is no longer</span>", 
"<span class=\"comment\"> * unused, and this cgroup will be reprieved from its death sentence,</span>", 
"<span class=\"comment\"> * to continue to serve a useful existence.  Next time it's released,</span>", 
"<span class=\"comment\"> * we will get notified again, if it still has 'notify_on_release' set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The final arg to call_usermodehelper() is UMH_WAIT_EXEC, which</span>", 
"<span class=\"comment\"> * means only wait until the task is successfully execve()'d.  The</span>", 
"<span class=\"comment\"> * separate release agent task is forked by call_usermodehelper(),</span>", 
"<span class=\"comment\"> * then control in this thread returns here, without waiting for the</span>", 
"<span class=\"comment\"> * release agent task.  We don't bother to wait because the caller of</span>", 
"<span class=\"comment\"> * this routine has no use for the exit status of the release agent</span>", 
"<span class=\"comment\"> * task, so no sense holding our caller up for that.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cgroup_release_agent\">cgroup_release_agent</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#work\">work</a> != &amp;<a class=\"id\" href=\"#release_agent_work\">release_agent_work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#release_list_lock\">release_list_lock</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#release_list\">release_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#argv\">argv</a>[3], *<a class=\"id\" href=\"#envp\">envp</a>[3];", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#pathbuf\">pathbuf</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#agentbuf\">agentbuf</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#release_list\">release_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#cgroup\">cgroup</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#release_list\">release_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#release_list\">release_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#release_list_lock\">release_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pathbuf\">pathbuf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pathbuf\">pathbuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#continue_free\">continue_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cgroup_path\">cgroup_path</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#pathbuf\">pathbuf</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#continue_free\">continue_free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#agentbuf\">agentbuf</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#release_agent_path\">release_agent_path</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#agentbuf\">agentbuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#continue_free\">continue_free</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#argv\">argv</a>[<a class=\"id\" href=\"#i\">i</a>++] = <a class=\"id\" href=\"#agentbuf\">agentbuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#argv\">argv</a>[<a class=\"id\" href=\"#i\">i</a>++] = <a class=\"id\" href=\"#pathbuf\">pathbuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#argv\">argv</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* minimal command environment */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#envp\">envp</a>[<a class=\"id\" href=\"#i\">i</a>++] = \"HOME=/\";", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#envp\">envp</a>[<a class=\"id\" href=\"#i\">i</a>++] = \"PATH=/sbin:/bin:/usr/sbin:/usr/bin\";", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#envp\">envp</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Drop the lock while we invoke the usermode helper,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * since the exec could involve hitting disk and hence</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be a slow process */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_usermodehelper\">call_usermodehelper</a>(<a class=\"id\" href=\"#argv\">argv</a>[0], <a class=\"id\" href=\"#argv\">argv</a>, <a class=\"id\" href=\"#envp\">envp</a>, <a class=\"id\" href=\"#UMH_WAIT_EXEC\">UMH_WAIT_EXEC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
" <a class=\"id\" href=\"#continue_free\">continue_free</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pathbuf\">pathbuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#agentbuf\">agentbuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#release_list_lock\">release_list_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#release_list_lock\">release_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cgroup_disable\">cgroup_disable</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#token\">token</a>;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#token\">token</a> = <a class=\"id\" href=\"#strsep\">strsep</a>(&amp;<a class=\"id\" href=\"#str\">str</a>, \",\")) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#token\">token</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cgroup_disable, being at boot time, can't know about module</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * subsystems, so we don't worry about them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_BUILTIN_SUBSYS_COUNT\">CGROUP_BUILTIN_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#token\">token</a>, <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#disabled\">disabled</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Disabling %s control group\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" subsystem\\n\", <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"cgroup_disable=\", <a class=\"id\" href=\"#cgroup_disable\">cgroup_disable</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functons for CSS ID.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *To get ID other than 0, this should be called when !cgroup_is_removed().</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned short <a class=\"id\" href=\"#css_id\">css_id</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_id\">css_id</a> *<a class=\"id\" href=\"#cssid\">cssid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This css_id() can return correct value when somone has refcnt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on this or this is under rcu_read_lock(). Once css-&gt;id is allocated,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it's unchanged until freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cssid\">cssid</a> = <a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#id\">id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>() || <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cssid\">cssid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cssid\">cssid</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#css_id\">css_id</a>);", 
"", 
"unsigned short <a class=\"id\" href=\"#css_depth\">css_depth</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_id\">css_id</a> *<a class=\"id\" href=\"#cssid\">cssid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cssid\">cssid</a> = <a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#id\">id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>() || <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cssid\">cssid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cssid\">cssid</a>-><a class=\"id\" href=\"#depth\">depth</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#css_depth\">css_depth</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *  css_is_ancestor - test \"root\" css is an ancestor of \"child\"</span>", 
"<span class=\"comment\"> * @child: the css to be tested.</span>", 
"<span class=\"comment\"> * @root: the css supporsed to be an ancestor of the child.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if \"root\" is an ancestor of \"child\" in its hierarchy. Because</span>", 
"<span class=\"comment\"> * this function reads css-&gt;id, this use rcu_dereference() and rcu_read_lock().</span>", 
"<span class=\"comment\"> * But, considering usual usage, the csses should be valid objects after test.</span>", 
"<span class=\"comment\"> * Assuming that the caller will do some action to the child if this returns</span>", 
"<span class=\"comment\"> * returns true, the caller must take \"child\";s reference count.</span>", 
"<span class=\"comment\"> * If \"child\" is valid object and this returns true, \"root\" is valid, too.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#css_is_ancestor\">css_is_ancestor</a>(struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_id\">css_id</a> *<a class=\"id\" href=\"#child_id\">child_id</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_id\">css_id</a> *<a class=\"id\" href=\"#root_id\">root_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child_id\">child_id</a>  = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root_id\">root_id</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#child_id\">child_id</a>", 
"<span class=\"ts\"/>    || !<a class=\"id\" href=\"#root_id\">root_id</a>", 
"<span class=\"ts\"/>    || (<a class=\"id\" href=\"#child_id\">child_id</a>-><a class=\"id\" href=\"#depth\">depth</a> &lt; <a class=\"id\" href=\"#root_id\">root_id</a>-><a class=\"id\" href=\"#depth\">depth</a>)", 
"<span class=\"ts\"/>    || (<a class=\"id\" href=\"#child_id\">child_id</a>-><a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#root_id\">root_id</a>-><a class=\"id\" href=\"#depth\">depth</a>] != <a class=\"id\" href=\"#root_id\">root_id</a>-><a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__free_css_id_cb\">__free_css_id_cb</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_id\">css_id</a> *<a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#css_id\">css_id</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#id\">id</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_css_id\">free_css_id</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#css_id\">css_id</a> *<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#css\">css</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* When this is called before css_id initialization, id can be NULL */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#use_id\">use_id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#css\">css</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
];
xr_frag_insert('l/9b/1904686ae907cafde5fb096b58f0c3240d84bf.xr', __xr_tmp);
