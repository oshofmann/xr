var __xr_tmp = [
"<span class=\"comment\"> * @nr: Bit to clear</span>", 
"<span class=\"comment\"> * @addr: Address to count from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This operation is non-atomic and can be reordered.</span>", 
"<span class=\"comment\"> * If two examples of this operation race, one can appear to succeed</span>", 
"<span class=\"comment\"> * but actually fail.  You must protect multiple accesses with a lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__test_and_clear_bit\">__test_and_clear_bit</a>(int <a class=\"id\" href=\"#nr\">nr</a>, volatile unsigned long *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#oldbit\">oldbit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"btr %2,%1\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"sbb %0,%0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=r\" (<a class=\"id\" href=\"#oldbit\">oldbit</a>), <a class=\"id\" href=\"#ADDR\">ADDR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"Ir\" (<a class=\"id\" href=\"#nr\">nr</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#oldbit\">oldbit</a>;", 
"}", 
"", 
"<span class=\"comment\">/* WARNING: non atomic and it can be reordered! */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__test_and_change_bit\">__test_and_change_bit</a>(int <a class=\"id\" href=\"#nr\">nr</a>, volatile unsigned long *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#oldbit\">oldbit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"btc %2,%1\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"sbb %0,%0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=r\" (<a class=\"id\" href=\"#oldbit\">oldbit</a>), <a class=\"id\" href=\"#ADDR\">ADDR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"Ir\" (<a class=\"id\" href=\"#nr\">nr</a>) : \"memory\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#oldbit\">oldbit</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * test_and_change_bit - Change a bit and return its old value</span>", 
"<span class=\"comment\"> * @nr: Bit to change</span>", 
"<span class=\"comment\"> * @addr: Address to count from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This operation is atomic and cannot be reordered.</span>", 
"<span class=\"comment\"> * It also implies a memory barrier.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#test_and_change_bit\">test_and_change_bit</a>(int <a class=\"id\" href=\"#nr\">nr</a>, volatile unsigned long *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#oldbit\">oldbit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"btc %2,%1\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"sbb %0,%0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=r\" (<a class=\"id\" href=\"#oldbit\">oldbit</a>), <a class=\"id\" href=\"#ADDR\">ADDR</a> : \"Ir\" (<a class=\"id\" href=\"#nr\">nr</a>) : \"memory\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#oldbit\">oldbit</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> int <a class=\"id\" href=\"#constant_test_bit\">constant_test_bit</a>(unsigned int <a class=\"id\" href=\"#nr\">nr</a>, const volatile unsigned long *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return ((1UL << (<a class=\"id\" href=\"#nr\">nr</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#nr\">nr</a> / <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>])) != 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#variable_test_bit\">variable_test_bit</a>(int <a class=\"id\" href=\"#nr\">nr</a>, volatile const unsigned long *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#oldbit\">oldbit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"bt %2,%1\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"sbb %0,%0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=r\" (<a class=\"id\" href=\"#oldbit\">oldbit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"m\" (*(unsigned long *)<a class=\"id\" href=\"#addr\">addr</a>), \"Ir\" (<a class=\"id\" href=\"#nr\">nr</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#oldbit\">oldbit</a>;", 
"}", 
"", 
"#if 0 <span class=\"comment\">/* Fool kernel-doc since it doesn't do macros yet */</span>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * test_bit - Determine whether a bit is set</span>", 
"<span class=\"comment\"> * @nr: bit number to test</span>", 
"<span class=\"comment\"> * @addr: Address to start counting from</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#test_bit\">test_bit</a>(int <a class=\"id\" href=\"#nr\">nr</a>, const volatile unsigned long *<a class=\"id\" href=\"#addr\">addr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#addr\">addr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>((<a class=\"id\" href=\"#nr\">nr</a>))<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/> ? <a class=\"id\" href=\"#constant_test_bit\">constant_test_bit</a>((<a class=\"id\" href=\"#nr\">nr</a>), (<a class=\"id\" href=\"#addr\">addr</a>))<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> : <a class=\"id\" href=\"#variable_test_bit\">variable_test_bit</a>((<a class=\"id\" href=\"#nr\">nr</a>), (<a class=\"id\" href=\"#addr\">addr</a>)))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __ffs - find first set bit in word</span>", 
"<span class=\"comment\"> * @word: The word to search</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Undefined if no bit exists, so code should check against 0 first.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#__ffs\">__ffs</a>(unsigned long <a class=\"id\" href=\"#word\">word</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"bsf %1,%0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>: \"=r\" (<a class=\"id\" href=\"#word\">word</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>: \"rm\" (<a class=\"id\" href=\"#word\">word</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#word\">word</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ffz - find first zero bit in word</span>", 
"<span class=\"comment\"> * @word: The word to search</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Undefined if no zero exists, so code should check against ~0UL first.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#ffz\">ffz</a>(unsigned long <a class=\"id\" href=\"#word\">word</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"bsf %1,%0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>: \"=r\" (<a class=\"id\" href=\"#word\">word</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>: \"r\" (~<a class=\"id\" href=\"#word\">word</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#word\">word</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __fls: find last set bit in word</span>", 
"<span class=\"comment\"> * @word: The word to search</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Undefined if no set bit exists, so code should check against 0 first.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#__fls\">__fls</a>(unsigned long <a class=\"id\" href=\"#word\">word</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"bsr %1,%0\"", 
"<span class=\"ts\"/>    : \"=r\" (<a class=\"id\" href=\"#word\">word</a>)", 
"<span class=\"ts\"/>    : \"rm\" (<a class=\"id\" href=\"#word\">word</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#word\">word</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ffs - find first set bit in word</span>", 
"<span class=\"comment\"> * @x: the word to search</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is defined the same way as the libc and compiler builtin ffs</span>", 
"<span class=\"comment\"> * routines, therefore differs in spirit from the other bitops.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ffs(value) returns 0 if value is 0 or the position of the first</span>", 
"<span class=\"comment\"> * set bit if value is nonzero. The first (least significant) bit</span>", 
"<span class=\"comment\"> * is at position 1.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ffs\">ffs</a>(int <a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_CMOV\">CONFIG_X86_CMOV</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"bsfl %1,%0\\n\\t\"", 
"<span class=\"ts\"/>    \"cmovzl %2,%0\"", 
"<span class=\"ts\"/>    : \"=r\" (<a class=\"id\" href=\"#r\">r</a>) : \"rm\" (<a class=\"id\" href=\"#x\">x</a>), \"r\" (-1));", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"bsfl %1,%0\\n\\t\"", 
"<span class=\"ts\"/>    \"jnz 1f\\n\\t\"", 
"<span class=\"ts\"/>    \"movl $-1,%0\\n\"", 
"<span class=\"ts\"/>    \"1:\" : \"=r\" (<a class=\"id\" href=\"#r\">r</a>) : \"rm\" (<a class=\"id\" href=\"#x\">x</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a> + 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * fls - find last set bit in word</span>", 
"<span class=\"comment\"> * @x: the word to search</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is defined in a similar way as the libc and compiler builtin</span>", 
"<span class=\"comment\"> * ffs, but returns the position of the most significant set bit.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * fls(value) returns 0 if value is 0 or the position of the last</span>", 
"<span class=\"comment\"> * set bit if value is nonzero. The last (most significant) bit is</span>", 
"<span class=\"comment\"> * at position 32.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fls\">fls</a>(int <a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_CMOV\">CONFIG_X86_CMOV</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"bsrl %1,%0\\n\\t\"", 
"<span class=\"ts\"/>    \"cmovzl %2,%0\"", 
"<span class=\"ts\"/>    : \"=&r\" (<a class=\"id\" href=\"#r\">r</a>) : \"rm\" (<a class=\"id\" href=\"#x\">x</a>), \"rm\" (-1));", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"bsrl %1,%0\\n\\t\"", 
"<span class=\"ts\"/>    \"jnz 1f\\n\\t\"", 
"<span class=\"ts\"/>    \"movl $-1,%0\\n\"", 
"<span class=\"ts\"/>    \"1:\" : \"=r\" (<a class=\"id\" href=\"#r\">r</a>) : \"rm\" (<a class=\"id\" href=\"#x\">x</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a> + 1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#ADDR\">ADDR</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>-<a class=\"id\" href=\"#generic\">generic</a>/<a class=\"id\" href=\"#bitops\">bitops</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_HAS_FAST_MULTIPLIER\">ARCH_HAS_FAST_MULTIPLIER</a> 1", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#arch_hweight\">arch_hweight</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>-<a class=\"id\" href=\"#generic\">generic</a>/<a class=\"id\" href=\"#bitops\">bitops</a>/<a class=\"id\" href=\"#const_hweight\">const_hweight</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>-<a class=\"id\" href=\"#generic\">generic</a>/<a class=\"id\" href=\"#bitops\">bitops</a>/<a class=\"id\" href=\"#fls64\">fls64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>-<a class=\"id\" href=\"#generic\">generic</a>/<a class=\"id\" href=\"#bitops\">bitops</a>/<a class=\"id\" href=\"#ext2\">ext2</a>-<a class=\"id\" href=\"#non\">non</a>-<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ext2_set_bit_atomic\">ext2_set_bit_atomic</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#addr\">addr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>((<a class=\"id\" href=\"#nr\">nr</a>), (unsigned long *)(<a class=\"id\" href=\"#addr\">addr</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ext2_clear_bit_atomic\">ext2_clear_bit_atomic</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#addr\">addr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>((<a class=\"id\" href=\"#nr\">nr</a>), (unsigned long *)(<a class=\"id\" href=\"#addr\">addr</a>))", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>-<a class=\"id\" href=\"#generic\">generic</a>/<a class=\"id\" href=\"#bitops\">bitops</a>/<a class=\"id\" href=\"#minix\">minix</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_BITOPS_H */</span>", 
];
xr_frag_insert('l/9b/366ab5b82ae24a20ab04893d9cd3034ad067a1.xr', __xr_tmp);
