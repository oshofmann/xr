var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/kernel/exit.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#personality\">personality</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty\">tty</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#iocontext\">iocontext</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acct\">acct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tsacct_kern\">tsacct_kern</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fdtable\">fdtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#binfmts\">binfmts</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nsproxy\">nsproxy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#profile\">profile</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempolicy\">mempolicy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#taskstats_kern\">taskstats_kern</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delayacct\">delayacct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#freezer\">freezer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cgroup\">cgroup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#signal\">signal</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#posix\">posix</a>-<a class=\"id\" href=\"#timers\">timers</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cn_proc\">cn_proc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pipe_fs_i\">pipe_fs_i</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* for audit_free() */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#resource\">resource</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#task_io_accounting_ops\">task_io_accounting_ops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tracehook\">tracehook</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs_struct\">fs_struct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#perf_event\">perf_event</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hw_breakpoint\">hw_breakpoint</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mmu_context\">mmu_context</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static void <a class=\"id\" href=\"#exit_mm\">exit_mm</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> * <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"static void <a class=\"id\" href=\"#__unhash_process\">__unhash_process</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#group_dead\">group_dead</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_threads\">nr_threads</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#detach_pid\">detach_pid</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group_dead\">group_dead</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detach_pid\">detach_pid</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detach_pid\">detach_pid</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#PIDTYPE_SID\">PIDTYPE_SID</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sibling\">sibling</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#process_counts\">process_counts</a>)--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread_group\">thread_group</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function expects the tasklist_lock write-locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__exit_signal\">__exit_signal</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#group_dead\">group_dead</a> = <a class=\"id\" href=\"#thread_group_leader\">thread_group_leader</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *<a class=\"id\" href=\"#sighand\">sighand</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sighand\">sighand</a> = <a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>() ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_tasklist_lock_is_held\">lockdep_tasklist_lock_is_held</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#posix_cpu_timers_exit\">posix_cpu_timers_exit</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group_dead\">group_dead</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#posix_cpu_timers_exit_group\">posix_cpu_timers_exit_group</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#tty\">tty</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If there is any task waiting for the group exit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then notify it:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#notify_count\">notify_count</a> &gt; 0 && !--<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#notify_count\">notify_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#group_exit_task\">group_exit_task</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a> == <a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#curr_target\">curr_target</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#curr_target\">curr_target</a> = <a class=\"id\" href=\"#next_thread\">next_thread</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Accumulate here the counters for all threads but the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * group leader as they die, so they can be added into</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the process-wide totals when those are taken.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The group leader stays around as a zombie as long</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as there are other threads.  When it gets reaped,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the exit.c code will add its counts into these totals.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We won't ever get here for the group leader, since it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will have been the last reference on the signal_struct.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#utime\">utime</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#utime\">utime</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#utime\">utime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#stime\">stime</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#stime\">stime</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#stime\">stime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#gtime\">gtime</a> = <a class=\"id\" href=\"#cputime_add\">cputime_add</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#gtime\">gtime</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#gtime\">gtime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#min_flt\">min_flt</a> += <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#min_flt\">min_flt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#maj_flt\">maj_flt</a> += <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#maj_flt\">maj_flt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#nvcsw\">nvcsw</a> += <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#nvcsw\">nvcsw</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#nivcsw\">nivcsw</a> += <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#nivcsw\">nivcsw</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#inblock\">inblock</a> += <a class=\"id\" href=\"#task_io_get_inblock\">task_io_get_inblock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#oublock\">oublock</a> += <a class=\"id\" href=\"#task_io_get_oublock\">task_io_get_oublock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_io_accounting_add\">task_io_accounting_add</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#ioac\">ioac</a>, &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#ioac\">ioac</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#sum_sched_runtime\">sum_sched_runtime</a> += <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#nr_threads\">nr_threads</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__unhash_process\">__unhash_process</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#group_dead\">group_dead</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do this under -&gt;siglock, we can race with another thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * doing sigqueue_free() if we have SIGQUEUE_PREALLOC signals.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_sigqueue\">flush_sigqueue</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pending\">pending</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__cleanup_sighand\">__cleanup_sighand</a>(<a class=\"id\" href=\"#sighand\">sighand</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_thread_flag\">clear_tsk_thread_flag</a>(<a class=\"id\" href=\"#tsk\">tsk</a>,<a class=\"id\" href=\"#TIF_SIGPENDING\">TIF_SIGPENDING</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group_dead\">group_dead</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_sigqueue\">flush_sigqueue</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#shared_pending\">shared_pending</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_kref_put\">tty_kref_put</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#delayed_put_task_struct\">delayed_put_task_struct</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rhp\">rhp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#rhp\">rhp</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_EVENTS\">CONFIG_PERF_EVENTS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_sched_process_free\">trace_sched_process_free</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"}", 
"", 
"", 
"void <a class=\"id\" href=\"#release_task\">release_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> * <a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#leader\">leader</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#zap_leader\">zap_leader</a>;", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracehook_prepare_release_task\">tracehook_prepare_release_task</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* don't need to get the RCU readlock here - the process is dead and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can't be modifying its own credentials. But shut RCU-lockdep up */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#processes\">processes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_flush_task\">proc_flush_task</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irq\">write_lock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracehook_finish_release_task\">tracehook_finish_release_task</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__exit_signal\">__exit_signal</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are the last non-leader member of the thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * group, and the leader is zombie, then notify the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * group leader's parent process. (if it wants notification.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zap_leader\">zap_leader</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#leader\">leader</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#leader\">leader</a> != <a class=\"id\" href=\"#p\">p</a> && <a class=\"id\" href=\"#thread_group_empty\">thread_group_empty</a>(<a class=\"id\" href=\"#leader\">leader</a>) && <a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a> == <a class=\"id\" href=\"#EXIT_ZOMBIE\">EXIT_ZOMBIE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#task_detached\">task_detached</a>(<a class=\"id\" href=\"#leader\">leader</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_notify_parent\">do_notify_parent</a>(<a class=\"id\" href=\"#leader\">leader</a>, <a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#exit_signal\">exit_signal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we were the last child thread and the leader has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * exited already, and the leader's parent ignores SIGCHLD,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then we are the one who should release the leader.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * do_notify_parent() will have marked it self-reaping in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zap_leader\">zap_leader</a> = <a class=\"id\" href=\"#task_detached\">task_detached</a>(<a class=\"id\" href=\"#leader\">leader</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This maintains the invariant that release_task()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * only runs on a task in EXIT_DEAD, just for sanity.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zap_leader\">zap_leader</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a> = <a class=\"id\" href=\"#EXIT_DEAD\">EXIT_DEAD</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irq\">write_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_thread\">release_thread</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#delayed_put_task_struct\">delayed_put_task_struct</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#leader\">leader</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#zap_leader\">zap_leader</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This checks not only the pgrp, but falls back on the pid if no</span>", 
"<span class=\"comment\"> * satisfactory pgrp is found. I dunno - gdb doesn't work correctly</span>", 
"<span class=\"comment\"> * without this...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must hold rcu lock or the tasklist lock.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#session_of_pgrp\">session_of_pgrp</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pgrp\">pgrp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pid_task\">pid_task</a>(<a class=\"id\" href=\"#pgrp\">pgrp</a>, <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pid_task\">pid_task</a>(<a class=\"id\" href=\"#pgrp\">pgrp</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#task_session\">task_session</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sid\">sid</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Determine if a process group is \"orphaned\", according to the POSIX</span>", 
"<span class=\"comment\"> * definition in 2.2.2.52.  Orphaned process groups are not to be affected</span>", 
"<span class=\"comment\"> * by terminal-generated stop signals.  Newly orphaned process groups are</span>", 
"<span class=\"comment\"> * to receive a SIGHUP and a SIGCONT.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * \"I ask you, have you ever known what it is to be an orphan?\"</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#will_become_orphaned_pgrp\">will_become_orphaned_pgrp</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pgrp\">pgrp</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#ignored_task\">ignored_task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_pid_task\">do_each_pid_task</a>(<a class=\"id\" href=\"#pgrp\">pgrp</a>, <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>, <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#ignored_task\">ignored_task</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a> && <a class=\"id\" href=\"#thread_group_empty\">thread_group_empty</a>(<a class=\"id\" href=\"#p\">p</a>)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#is_global_init\">is_global_init</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task_pgrp\">task_pgrp</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>) != <a class=\"id\" href=\"#pgrp\">pgrp</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#task_session\">task_session</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>) == <a class=\"id\" href=\"#task_session\">task_session</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_pid_task\">while_each_pid_task</a>(<a class=\"id\" href=\"#pgrp\">pgrp</a>, <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"int <a class=\"id\" href=\"#is_current_pgrp_orphaned\">is_current_pgrp_orphaned</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#will_become_orphaned_pgrp\">will_become_orphaned_pgrp</a>(<a class=\"id\" href=\"#task_pgrp\">task_pgrp</a>(<a class=\"id\" href=\"#current\">current</a>), <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#has_stopped_jobs\">has_stopped_jobs</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pgrp\">pgrp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_pid_task\">do_each_pid_task</a>(<a class=\"id\" href=\"#pgrp\">pgrp</a>, <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>, <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#task_is_stopped\">task_is_stopped</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_pid_task\">while_each_pid_task</a>(<a class=\"id\" href=\"#pgrp\">pgrp</a>, <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check to see if any process groups have become orphaned as</span>", 
"<span class=\"comment\"> * a result of our exiting, and if they have any stopped jobs,</span>", 
"<span class=\"comment\"> * send them a SIGHUP and then a SIGCONT. (POSIX 3.2.2.2)</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#kill_orphaned_pgrp\">kill_orphaned_pgrp</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pgrp\">pgrp</a> = <a class=\"id\" href=\"#task_pgrp\">task_pgrp</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#ignored_task\">ignored_task</a> = <a class=\"id\" href=\"#tsk\">tsk</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/> <span class=\"comment\">/* exit: our father is in a different pgrp than</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>  * we are and we were the only connection outside.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reparent: our child is in a different pgrp than</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we are, and it was the only connection outside.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ignored_task\">ignored_task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_pgrp\">task_pgrp</a>(<a class=\"id\" href=\"#parent\">parent</a>) != <a class=\"id\" href=\"#pgrp\">pgrp</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#task_session\">task_session</a>(<a class=\"id\" href=\"#parent\">parent</a>) == <a class=\"id\" href=\"#task_session\">task_session</a>(<a class=\"id\" href=\"#tsk\">tsk</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#will_become_orphaned_pgrp\">will_become_orphaned_pgrp</a>(<a class=\"id\" href=\"#pgrp\">pgrp</a>, <a class=\"id\" href=\"#ignored_task\">ignored_task</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#has_stopped_jobs\">has_stopped_jobs</a>(<a class=\"id\" href=\"#pgrp\">pgrp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kill_pgrp_info\">__kill_pgrp_info</a>(<a class=\"id\" href=\"#SIGHUP\">SIGHUP</a>, <a class=\"id\" href=\"#SEND_SIG_PRIV\">SEND_SIG_PRIV</a>, <a class=\"id\" href=\"#pgrp\">pgrp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kill_pgrp_info\">__kill_pgrp_info</a>(<a class=\"id\" href=\"#SIGCONT\">SIGCONT</a>, <a class=\"id\" href=\"#SEND_SIG_PRIV\">SEND_SIG_PRIV</a>, <a class=\"id\" href=\"#pgrp\">pgrp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * reparent_to_kthreadd - Reparent the calling kernel thread to kthreadd</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If a kernel thread is launched as a result of a system call, or if</span>", 
"<span class=\"comment\"> * it ever exits, it should generally reparent itself to kthreadd so it</span>", 
"<span class=\"comment\"> * isn't in the way of other processes and is correctly cleaned up on exit.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The various task state such as scheduling policy and priority may have</span>", 
"<span class=\"comment\"> * been inherited from a user process, so we reset them to sane values here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE that reparent_to_kthreadd() gives the caller full capabilities.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#reparent_to_kthreadd\">reparent_to_kthreadd</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irq\">write_lock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptrace_unlink\">ptrace_unlink</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Reparent to init */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#kthreadd_task\">kthreadd_task</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sibling\">sibling</a>, &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>-><a class=\"id\" href=\"#children\">children</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the exit signal to SIGCHLD so we signal init on exit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#exit_signal\">exit_signal</a> = <a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_nice\">task_nice</a>(<a class=\"id\" href=\"#current\">current</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_user_nice\">set_user_nice</a>(<a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/><span class=\"comment\">/* cpus_allowed? */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* rt_priority? */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* signals? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a>, <a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a>,", 
"<span class=\"ts\"/>       sizeof(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#init_cred\">init_cred</a>.<a class=\"id\" href=\"#usage\">usage</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#commit_creds\">commit_creds</a>(&amp;<a class=\"id\" href=\"#init_cred\">init_cred</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irq\">write_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__set_special_pids\">__set_special_pids</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_session\">task_session</a>(<a class=\"id\" href=\"#curr\">curr</a>) != <a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_pid\">change_pid</a>(<a class=\"id\" href=\"#curr\">curr</a>, <a class=\"id\" href=\"#PIDTYPE_SID\">PIDTYPE_SID</a>, <a class=\"id\" href=\"#pid\">pid</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_pgrp\">task_pgrp</a>(<a class=\"id\" href=\"#curr\">curr</a>) != <a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_pid\">change_pid</a>(<a class=\"id\" href=\"#curr\">curr</a>, <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>, <a class=\"id\" href=\"#pid\">pid</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_special_pids\">set_special_pids</a>(struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irq\">write_lock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_special_pids\">__set_special_pids</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irq\">write_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Let kernel threads use this to say that they allow a certain signal.</span>", 
"<span class=\"comment\"> * Must not be used if kthread was cloned with CLONE_SIGHAND.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#allow_signal\">allow_signal</a>(int <a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#valid_signal\">valid_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>) || <a class=\"id\" href=\"#sig\">sig</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* This is only needed for daemonize()'ed kthreads */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigdelset\">sigdelset</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#blocked\">blocked</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Kernel threads handle their own signals. Let the signal code</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * know it'll be handled, so that they don't get converted to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SIGKILL or just silently dropped.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#action\">action</a>[(<a class=\"id\" href=\"#sig\">sig</a>)-1].<a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_handler\">sa_handler</a> = (void <a class=\"id\" href=\"#__user\">__user</a> *)2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#recalc_sigpending\">recalc_sigpending</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#allow_signal\">allow_signal</a>);", 
"", 
"int <a class=\"id\" href=\"#disallow_signal\">disallow_signal</a>(int <a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#valid_signal\">valid_signal</a>(<a class=\"id\" href=\"#sig\">sig</a>) || <a class=\"id\" href=\"#sig\">sig</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#action\">action</a>[(<a class=\"id\" href=\"#sig\">sig</a>)-1].<a class=\"id\" href=\"#sa\">sa</a>.<a class=\"id\" href=\"#sa_handler\">sa_handler</a> = <a class=\"id\" href=\"#SIG_IGN\">SIG_IGN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#recalc_sigpending\">recalc_sigpending</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#disallow_signal\">disallow_signal</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Put all the gunge required to become a kernel thread without</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>attached user resources in one place where it belongs.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#daemonize\">daemonize</a>(const char *<a class=\"id\" href=\"#name\">name</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigset_t\">sigset_t</a> <a class=\"id\" href=\"#blocked\">blocked</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, sizeof(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>), <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we were started as result of loading a module, close all of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * user space pages.  We don't need them, and if we didn't close them</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * they would be locked into memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_mm\">exit_mm</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't want to have TIF_FREEZE set if the system-wide hibernation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or suspend transition begins right now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> |= (<a class=\"id\" href=\"#PF_NOFREEZE\">PF_NOFREEZE</a> | <a class=\"id\" href=\"#PF_KTHREAD\">PF_KTHREAD</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a> != &amp;<a class=\"id\" href=\"#init_nsproxy\">init_nsproxy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_nsproxy\">get_nsproxy</a>(&amp;<a class=\"id\" href=\"#init_nsproxy\">init_nsproxy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#switch_task_namespaces\">switch_task_namespaces</a>(<a class=\"id\" href=\"#current\">current</a>, &amp;<a class=\"id\" href=\"#init_nsproxy\">init_nsproxy</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_special_pids\">set_special_pids</a>(&amp;<a class=\"id\" href=\"#init_struct_pid\">init_struct_pid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_clear_tty\">proc_clear_tty</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Block and flush all signals */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigfillset\">sigfillset</a>(&amp;<a class=\"id\" href=\"#blocked\">blocked</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigprocmask\">sigprocmask</a>(<a class=\"id\" href=\"#SIG_BLOCK\">SIG_BLOCK</a>, &amp;<a class=\"id\" href=\"#blocked\">blocked</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_signals\">flush_signals</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Become as one with the init task */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#daemonize_fs_struct\">daemonize_fs_struct</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_files\">exit_files</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a> = <a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reparent_to_kthreadd\">reparent_to_kthreadd</a>();", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#daemonize\">daemonize</a>);", 
"", 
"static void <a class=\"id\" href=\"#close_files\">close_files</a>(struct <a class=\"id\" href=\"#files_struct\">files_struct</a> * <a class=\"id\" href=\"#files\">files</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is safe to dereference the fd table without RCU or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -&gt;file_lock because this is the last reference to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * files structure.  But use RCU to shut RCU-lockdep up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a> = <a class=\"id\" href=\"#files_fdtable\">files_fdtable</a>(<a class=\"id\" href=\"#files\">files</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#set\">set</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#j\">j</a> * <a class=\"id\" href=\"#__NFDBITS\">__NFDBITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>-><a class=\"id\" href=\"#fds_bits\">fds_bits</a>[<a class=\"id\" href=\"#j\">j</a>++];", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#set\">set</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#set\">set</a> &amp; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#xchg\">xchg</a>(&amp;<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#fd\">fd</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp_close\">filp_close</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#files\">files</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set\">set</a> >>= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#get_files_struct\">get_files_struct</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#files\">files</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#files\">files</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#files\">files</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#files\">files</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#put_files_struct\">put_files_struct</a>(struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#files\">files</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#count\">count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#close_files\">close_files</a>(<a class=\"id\" href=\"#files\">files</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Free the fd and fdset arrays if we expanded them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the fdtable was embedded, pass files for freeing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * at the end of the RCU grace period. Otherwise,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * you can free files immediately.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a> = <a class=\"id\" href=\"#files_fdtable\">files_fdtable</a>(<a class=\"id\" href=\"#files\">files</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fdt\">fdt</a> != &amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#fdtab\">fdtab</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#files_cachep\">files_cachep</a>, <a class=\"id\" href=\"#files\">files</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_fdtable\">free_fdtable</a>(<a class=\"id\" href=\"#fdt\">fdt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#reset_files_struct\">reset_files_struct</a>(struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#files\">files</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#old\">old</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#files\">files</a> = <a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_files_struct\">put_files_struct</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#exit_files\">exit_files</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> * <a class=\"id\" href=\"#files\">files</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#files\">files</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#files\">files</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_files_struct\">put_files_struct</a>(<a class=\"id\" href=\"#files\">files</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MM_OWNER\">CONFIG_MM_OWNER</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Task p is exiting and it owned mm, lets find a new owner for it</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#mm_need_new_owner\">mm_need_new_owner</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there are other users of the mm and the owner (us) is exiting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we need to find a new owner to take on the responsibility.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>) <= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#owner\">owner</a> != <a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"void <a class=\"id\" href=\"#mm_update_next_owner\">mm_update_next_owner</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#c\">c</a>, *<a class=\"id\" href=\"#g\">g</a>, *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm_need_new_owner\">mm_need_new_owner</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Search in the children</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#c\">c</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#children\">children</a>, <a class=\"id\" href=\"#sibling\">sibling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#assign_new_owner\">assign_new_owner</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Search in the siblings</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#c\">c</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>-><a class=\"id\" href=\"#children\">children</a>, <a class=\"id\" href=\"#sibling\">sibling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#assign_new_owner\">assign_new_owner</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Search through everything else. We should not get</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here often</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_each_thread\">do_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#c\">c</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#assign_new_owner\">assign_new_owner</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#g\">g</a>, <a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We found no owner yet mm_users &gt; 1: this implies that we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * most likely racing with swapoff (try_to_unuse()) or /proc or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ptrace or page migration (get_task_mm()).  Mark owner as NULL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#assign_new_owner\">assign_new_owner</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#c\">c</a> == <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The task_lock protects c-&gt;mm from changing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We always want mm-&gt;owner-&gt;mm == mm</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Delay read_unlock() till we have the task_lock()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to ensure that c does not slip away underneath us</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#mm\">mm</a> != <a class=\"id\" href=\"#mm\">mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MM_OWNER */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Turn us into a lazy TLB process if we</span>", 
"<span class=\"comment\"> * aren't already..</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#exit_mm\">exit_mm</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> * <a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#core_state\">core_state</a> *<a class=\"id\" href=\"#core_state\">core_state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_release\">mm_release</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Serialize with any possible pending coredump.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must hold mmap_sem around checking core_state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and clearing tsk-&gt;mm.  The core-inducing thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will increment -&gt;nr_threads for each thread in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * group with -&gt;mm != NULL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#core_state\">core_state</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#core_state\">core_state</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#core_state\">core_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#core_thread\">core_thread</a> <a class=\"id\" href=\"#self\">self</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#self\">self</a>.<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#self\">self</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#xchg\">xchg</a>(&amp;<a class=\"id\" href=\"#core_state\">core_state</a>-><a class=\"id\" href=\"#dumper\">dumper</a>.<a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#self\">self</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Implies mb(), the result of xchg() must be visible</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to core_state-&gt;dumper.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#core_state\">core_state</a>-><a class=\"id\" href=\"#nr_threads\">nr_threads</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#core_state\">core_state</a>-><a class=\"id\" href=\"#startup\">startup</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_task_state\">set_task_state</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#self\">self</a>.<a class=\"id\" href=\"#task\">task</a>) <span class=\"comment\">/* see coredump_finish() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_task_state\">__set_task_state</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_count\">mm_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#mm\">mm</a> != <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* more a memory barrier than a real lock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enter_lazy_tlb\">enter_lazy_tlb</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't want this task to be frozen prematurely */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_freeze_flag\">clear_freeze_flag</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_update_next_owner\">mm_update_next_owner</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When we die, we re-parent all our children.</span>", 
"<span class=\"comment\"> * Try to give them to another thread in our thread</span>", 
"<span class=\"comment\"> * group, and if no such member exists, give it to</span>", 
"<span class=\"comment\"> * the child reaper process (ie \"init\") in our pid</span>", 
"<span class=\"comment\"> * space.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#find_new_reaper\">find_new_reaper</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#father\">father</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid_namespace\">pid_namespace</a> *<a class=\"id\" href=\"#pid_ns\">pid_ns</a> = <a class=\"id\" href=\"#task_active_pid_ns\">task_active_pid_ns</a>(<a class=\"id\" href=\"#father\">father</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#thread\">thread</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#father\">father</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#father\">father</a>, <a class=\"id\" href=\"#thread\">thread</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_EXITING\">PF_EXITING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pid_ns\">pid_ns</a>-><a class=\"id\" href=\"#child_reaper\">child_reaper</a> == <a class=\"id\" href=\"#father\">father</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid_ns\">pid_ns</a>-><a class=\"id\" href=\"#child_reaper\">child_reaper</a> = <a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pid_ns\">pid_ns</a>-><a class=\"id\" href=\"#child_reaper\">child_reaper</a> == <a class=\"id\" href=\"#father\">father</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irq\">write_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pid_ns\">pid_ns</a> == &amp;<a class=\"id\" href=\"#init_pid_ns\">init_pid_ns</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Attempted to kill init!\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zap_pid_ns_processes\">zap_pid_ns_processes</a>(<a class=\"id\" href=\"#pid_ns\">pid_ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irq\">write_lock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can not clear -&gt;child_reaper or leave it alone.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * There may by stealth EXIT_DEAD tasks on -&gt;children,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * forget_original_parent() must move them somewhere.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid_ns\">pid_ns</a>-><a class=\"id\" href=\"#child_reaper\">child_reaper</a> = <a class=\"id\" href=\"#init_pid_ns\">init_pid_ns</a>.<a class=\"id\" href=\"#child_reaper\">child_reaper</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pid_ns\">pid_ns</a>-><a class=\"id\" href=\"#child_reaper\">child_reaper</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">* Any that need to be release_task'd are put on the @dead list.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#reparent_leader\">reparent_leader</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#father\">father</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#dead\">dead</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sibling\">sibling</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>-><a class=\"id\" href=\"#children\">children</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_detached\">task_detached</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is a threaded reparent there is no need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * notify anyone anything has happened.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#same_thread_group\">same_thread_group</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>, <a class=\"id\" href=\"#father\">father</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't want people slaying init.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_signal\">exit_signal</a> = <a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If it has exited notify the new parent about this child's death. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#task_ptrace\">task_ptrace</a>(<a class=\"id\" href=\"#p\">p</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a> == <a class=\"id\" href=\"#EXIT_ZOMBIE\">EXIT_ZOMBIE</a> && <a class=\"id\" href=\"#thread_group_empty\">thread_group_empty</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_notify_parent\">do_notify_parent</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_signal\">exit_signal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task_detached\">task_detached</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a> = <a class=\"id\" href=\"#EXIT_DEAD\">EXIT_DEAD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sibling\">sibling</a>, <a class=\"id\" href=\"#dead\">dead</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kill_orphaned_pgrp\">kill_orphaned_pgrp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#father\">father</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#forget_original_parent\">forget_original_parent</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#father\">father</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#n\">n</a>, *<a class=\"id\" href=\"#reaper\">reaper</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#dead_children\">dead_children</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irq\">write_lock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that exit_ptrace() and find_new_reaper() might</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * drop tasklist_lock and reacquire it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_ptrace\">exit_ptrace</a>(<a class=\"id\" href=\"#father\">father</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reaper\">reaper</a> = <a class=\"id\" href=\"#find_new_reaper\">find_new_reaper</a>(<a class=\"id\" href=\"#father\">father</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#father\">father</a>-><a class=\"id\" href=\"#children\">children</a>, <a class=\"id\" href=\"#sibling\">sibling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a> = <a class=\"id\" href=\"#reaper\">reaper</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#parent\">parent</a> == <a class=\"id\" href=\"#father\">father</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#task_ptrace\">task_ptrace</a>(<a class=\"id\" href=\"#t\">t</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#pdeath_signal\">pdeath_signal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_send_sig_info\">group_send_sig_info</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#pdeath_signal\">pdeath_signal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#SEND_SIG_NOINFO\">SEND_SIG_NOINFO</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#while_each_thread\">while_each_thread</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reparent_leader\">reparent_leader</a>(<a class=\"id\" href=\"#father\">father</a>, <a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#dead_children\">dead_children</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irq\">write_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#father\">father</a>-><a class=\"id\" href=\"#children\">children</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#dead_children\">dead_children</a>, <a class=\"id\" href=\"#sibling\">sibling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sibling\">sibling</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_task\">release_task</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Send signals to all our closest relatives so that they know</span>", 
"<span class=\"comment\"> * to properly mourn us..</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#exit_notify\">exit_notify</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#group_dead\">group_dead</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#cookie\">cookie</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This does two things:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\">  <span class=\"ts\"/> * A.  Make init inherit all the child processes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * B.  Check to see if any process groups have become orphaned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>as a result of our exiting, and if they have any stopped</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>jobs, send them a SIGHUP and then a SIGCONT.  (POSIX 3.2.2.2)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#forget_original_parent\">forget_original_parent</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_task_namespaces\">exit_task_namespaces</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irq\">write_lock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group_dead\">group_dead</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_orphaned_pgrp\">kill_orphaned_pgrp</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Let father know we died</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Thread signals are configurable, but you aren't going to use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that to send signals to arbitary processes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * That stops right now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the parent exec id doesn't match the exec id we saved</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when we started then we know the parent has changed security</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * domain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If our self_exec id doesn't match our parent_exec_id then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we have changed execution domain as these two values started</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the same after a fork.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#exit_signal\">exit_signal</a> != <a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a> && !<a class=\"id\" href=\"#task_detached\">task_detached</a>(<a class=\"id\" href=\"#tsk\">tsk</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#parent_exec_id\">parent_exec_id</a> != <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>-><a class=\"id\" href=\"#self_exec_id\">self_exec_id</a> ||", 
];
xr_frag_insert('l/9b/6ca99d77e9781ab89e841ee3b45c55ad4d3953.xr', __xr_tmp);
