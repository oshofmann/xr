var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>drivers/pci/bus.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * From setup-res.c, by:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Dave Rusling (david.rusling@reo.mts.dec.com)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>David Mosberger (davidm@cs.arizona.edu)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>David Miller (davem@redhat.com)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Ivan Kokshaysky (ink@jurassic.park.msu.ru)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioport\">ioport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"pci.h\"", 
"", 
"void <a class=\"id\" href=\"#pci_bus_add_resource\">pci_bus_add_resource</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus_resource\">pci_bus_resource</a> *<a class=\"id\" href=\"#bus_res\">bus_res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus_res\">bus_res</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#pci_bus_resource\">pci_bus_resource</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bus_res\">bus_res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"can't add %pR resource\\n\", <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus_res\">bus_res</a>-><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus_res\">bus_res</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#bus_res\">bus_res</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#resources\">resources</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#pci_bus_resource_n\">pci_bus_resource_n</a>(const struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus_resource\">pci_bus_resource</a> *<a class=\"id\" href=\"#bus_res\">bus_res</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCE_NUM\">PCI_BRIDGE_RESOURCE_NUM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#n\">n</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCE_NUM\">PCI_BRIDGE_RESOURCE_NUM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#bus_res\">bus_res</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#resources\">resources</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>-- == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bus_res\">bus_res</a>-><a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_bus_resource_n\">pci_bus_resource_n</a>);", 
"", 
"void <a class=\"id\" href=\"#pci_bus_remove_resources\">pci_bus_remove_resources</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus_resource\">pci_bus_resource</a> *<a class=\"id\" href=\"#bus_res\">bus_res</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCE_NUM\">PCI_BRIDGE_RESOURCE_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#bus_res\">bus_res</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#resources\">resources</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#bus_res\">bus_res</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bus_res\">bus_res</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_bus_alloc_resource - allocate a resource from a parent bus</span>", 
"<span class=\"comment\"> * @bus: PCI bus</span>", 
"<span class=\"comment\"> * @res: resource to allocate</span>", 
"<span class=\"comment\"> * @size: size of resource to allocate</span>", 
"<span class=\"comment\"> * @align: alignment of resource to allocate</span>", 
"<span class=\"comment\"> * @min: minimum /proc/iomem address to allocate</span>", 
"<span class=\"comment\"> * @type_mask: IORESOURCE_* type flags</span>", 
"<span class=\"comment\"> * @alignf: resource alignment function</span>", 
"<span class=\"comment\"> * @alignf_data: data argument for resource alignment function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Given the PCI bus a device resides on, the size, minimum address,</span>", 
"<span class=\"comment\"> * alignment and type, try to find an acceptable resource allocation</span>", 
"<span class=\"comment\"> * for a specific device resource.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#pci_bus_alloc_resource\">pci_bus_alloc_resource</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#min\">min</a>, unsigned int <a class=\"id\" href=\"#type_mask\">type_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> (*<a class=\"id\" href=\"#alignf\">alignf</a>)(void *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#resource\">resource</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#alignf_data\">alignf_data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#max\">max</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type_mask\">type_mask</a> |= <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a> | <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* don't allocate too high if the pref mem doesn't support 64bit*/</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_MEM_64\">IORESOURCE_MEM_64</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#PCIBIOS_MAX_MEM_32\">PCIBIOS_MAX_MEM_32</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_bus_for_each_resource\">pci_bus_for_each_resource</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#r\">r</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* type_mask must match */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> ^ <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a>) &amp; <a class=\"id\" href=\"#type_mask\">type_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We cannot allocate a non-prefetching resource</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   from a pre-fetching area */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_PREFETCH\">IORESOURCE_PREFETCH</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IORESOURCE_PREFETCH\">IORESOURCE_PREFETCH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ok, try it out.. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#allocate_resource\">allocate_resource</a>(<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> ? : <a class=\"id\" href=\"#min\">min</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alignf\">alignf</a>, <a class=\"id\" href=\"#alignf_data\">alignf_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_bus_add_device - add a single device</span>", 
"<span class=\"comment\"> * @dev: device to add</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This adds a single pci device to the global</span>", 
"<span class=\"comment\"> * device list and adds sysfs and procfs entries</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_bus_add_device\">pci_bus_add_device</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#device_add\">device_add</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#is_added\">is_added</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_proc_attach_device\">pci_proc_attach_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_create_sysfs_dev_files\">pci_create_sysfs_dev_files</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_bus_add_child - add a child bus</span>", 
"<span class=\"comment\"> * @bus: bus to add</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This adds sysfs entries for a single bus</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_bus_add_child\">pci_bus_add_child</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#bridge\">bridge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#bridge\">bridge</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#device_register\">device_register</a>(&amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#is_added\">is_added</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#device_create_file\">device_create_file</a>(&amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dev_attr_cpuaffinity\">dev_attr_cpuaffinity</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#device_create_file\">device_create_file</a>(&amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#dev_attr_cpulistaffinity\">dev_attr_cpulistaffinity</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Create legacy_io and legacy_mem files for this bus */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_create_legacy_files\">pci_create_legacy_files</a>(<a class=\"id\" href=\"#bus\">bus</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_bus_add_devices - insert newly discovered PCI devices</span>", 
"<span class=\"comment\"> * @bus: bus to check for new devices</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Add newly discovered PCI devices (which are on the bus-&gt;devices</span>", 
"<span class=\"comment\"> * list) to the global PCI device list, add the sysfs and procfs</span>", 
"<span class=\"comment\"> * entries.  Where a bridge is found, add the discovered bus to</span>", 
"<span class=\"comment\"> * the parents list of child buses, and recurse (breadth-first</span>", 
"<span class=\"comment\"> * to be compatible with 2.4)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call hotplug for each new devices.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_bus_add_devices\">pci_bus_add_devices</a>(const struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#bus_list\">bus_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip already-added devices */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#is_added\">is_added</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pci_bus_add_device\">pci_bus_add_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Error adding device, continuing\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#bus_list\">bus_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#is_added\">is_added</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If there is an unattached subordinate bus, attach</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it and then scan for unattached PCI devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#child\">child</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#node\">node</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#pci_bus_sem\">pci_bus_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#children\">children</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#pci_bus_sem\">pci_bus_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_bus_add_devices\">pci_bus_add_devices</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * register the bus with sysfs as the parent is now</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * properly registered.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#is_added\">is_added</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pci_bus_add_child\">pci_bus_add_child</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Error adding bus, continuing\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#pci_enable_bridges\">pci_enable_bridges</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#bus_list\">bus_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_is_enabled\">pci_is_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#pci_enable_device\">pci_enable_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Error enabling bridge (%d), continuing\\n\", <a class=\"id\" href=\"#retval\">retval</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_set_master\">pci_set_master</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_enable_bridges\">pci_enable_bridges</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/** pci_walk_bus - walk devices on/under bus, calling callback.</span>", 
"<span class=\"comment\"> *  @top      bus whose devices should be walked</span>", 
"<span class=\"comment\"> *  @cb       callback to be called for each device found</span>", 
"<span class=\"comment\"> *  @userdata arbitrary pointer to be passed to callback.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Walk the given bus, including any bridged devices</span>", 
"<span class=\"comment\"> *  on buses under this bus.  Call the provided callback</span>", 
"<span class=\"comment\"> *  on each device found.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  We check the return of @cb each time. If it returns anything</span>", 
"<span class=\"comment\"> *  other than 0, we break out.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_walk_bus\">pci_walk_bus</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#top\">top</a>, int (*<a class=\"id\" href=\"#cb\">cb</a>)(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *, void *),", 
"<span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#userdata\">userdata</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#top\">top</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#pci_bus_sem\">pci_bus_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#top\">top</a>-><a class=\"id\" href=\"#devices\">devices</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> == &amp;<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#devices\">devices</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* end of this bus, go up or finish */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bus\">bus</a> == <a class=\"id\" href=\"#top\">top</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>-><a class=\"id\" href=\"#bus_list\">bus_list</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>-><a class=\"id\" href=\"#bus\">bus</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a>, <a class=\"id\" href=\"#bus_list\">bus_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this is a pci-pci bridge, do its devices next */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>-><a class=\"id\" href=\"#devices\">devices</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus_list\">bus_list</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Run device routines with the device locked */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_lock\">device_lock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#cb\">cb</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#userdata\">userdata</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unlock\">device_unlock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#pci_bus_sem\">pci_bus_sem</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_bus_alloc_resource\">pci_bus_alloc_resource</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_bus_add_device\">pci_bus_add_device</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_bus_add_devices\">pci_bus_add_devices</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_enable_bridges\">pci_enable_bridges</a>);", 
];
xr_frag_insert('l/9b/6d39c902eaa576564063b8328eb423cab5ccae.xr', __xr_tmp);
