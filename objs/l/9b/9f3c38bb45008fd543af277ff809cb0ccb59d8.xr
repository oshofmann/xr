var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#BLK_INTERNAL_H\">BLK_INTERNAL_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLK_INTERNAL_H\">BLK_INTERNAL_H</a>", 
"", 
"<span class=\"comment\">/* Amount of time in which a process may batch requests */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLK_BATCH_TIME\">BLK_BATCH_TIME</a><span class=\"ts\"/>(<a class=\"id\" href=\"#HZ\">HZ</a>/50UL)", 
"", 
"<span class=\"comment\">/* Number of requests a \"batching\" process may submit */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BLK_BATCH_REQ\">BLK_BATCH_REQ</a><span class=\"ts\"/>32", 
"", 
"extern struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#blk_requestq_cachep\">blk_requestq_cachep</a>;", 
"extern struct <a class=\"id\" href=\"#kobj_type\">kobj_type</a> <a class=\"id\" href=\"#blk_queue_ktype\">blk_queue_ktype</a>;", 
"", 
"void <a class=\"id\" href=\"#init_request_from_bio\">init_request_from_bio</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>);", 
"void <a class=\"id\" href=\"#blk_rq_bio_prep\">blk_rq_bio_prep</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>);", 
"int <a class=\"id\" href=\"#blk_rq_append_bio\">blk_rq_append_bio</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>);", 
"void <a class=\"id\" href=\"#blk_dequeue_request\">blk_dequeue_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"void <a class=\"id\" href=\"#__blk_queue_free_tags\">__blk_queue_free_tags</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"void <a class=\"id\" href=\"#blk_unplug_work\">blk_unplug_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"void <a class=\"id\" href=\"#blk_unplug_timeout\">blk_unplug_timeout</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>);", 
"void <a class=\"id\" href=\"#blk_rq_timed_out_timer\">blk_rq_timed_out_timer</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>);", 
"void <a class=\"id\" href=\"#blk_delete_timer\">blk_delete_timer</a>(struct <a class=\"id\" href=\"#request\">request</a> *);", 
"void <a class=\"id\" href=\"#blk_add_timer\">blk_add_timer</a>(struct <a class=\"id\" href=\"#request\">request</a> *);", 
"void <a class=\"id\" href=\"#__generic_unplug_device\">__generic_unplug_device</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Internal atomic flags for request handling</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#rq_atomic_flags\">rq_atomic_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REQ_ATOM_COMPLETE\">REQ_ATOM_COMPLETE</a> = 0,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * EH timer and IO completion will both attempt to 'grab' the request, make</span>", 
"<span class=\"comment\"> * sure that only one of them suceeds</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#blk_mark_rq_complete\">blk_mark_rq_complete</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#REQ_ATOM_COMPLETE\">REQ_ATOM_COMPLETE</a>, &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#atomic_flags\">atomic_flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#blk_clear_rq_complete\">blk_clear_rq_complete</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#REQ_ATOM_COMPLETE\">REQ_ATOM_COMPLETE</a>, &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#atomic_flags\">atomic_flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Internal elevator interface</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ELV_ON_HASH\">ELV_ON_HASH</a>(<a class=\"id\" href=\"#rq\">rq</a>)<span class=\"ts\"/><span class=\"ts\"/>(!<a class=\"id\" href=\"#hlist_unhashed\">hlist_unhashed</a>(&amp;(<a class=\"id\" href=\"#rq\">rq</a>)-><a class=\"id\" href=\"#hash\">hash</a>))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#__elv_next_request\">__elv_next_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_head\">queue_head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#list_entry_rq\">list_entry_rq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_head\">queue_head</a>.<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_do_ordered\">blk_do_ordered</a>(<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#rq\">rq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#elevator\">elevator</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#elevator_dispatch_fn\">elevator_dispatch_fn</a>(<a class=\"id\" href=\"#q\">q</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#elv_activate_rq\">elv_activate_rq</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elevator_queue\">elevator_queue</a> *<a class=\"id\" href=\"#e\">e</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#elevator\">elevator</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#elevator_activate_req_fn\">elevator_activate_req_fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#elevator_activate_req_fn\">elevator_activate_req_fn</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#elv_deactivate_rq\">elv_deactivate_rq</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elevator_queue\">elevator_queue</a> *<a class=\"id\" href=\"#e\">e</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#elevator\">elevator</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#elevator_deactivate_req_fn\">elevator_deactivate_req_fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#elevator_deactivate_req_fn\">elevator_deactivate_req_fn</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIL_IO_TIMEOUT\">CONFIG_FAIL_IO_TIMEOUT</a>", 
"int <a class=\"id\" href=\"#blk_should_fake_timeout\">blk_should_fake_timeout</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *);", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#part_timeout_show\">part_timeout_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *, char *);", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#part_timeout_store\">part_timeout_store</a>(struct <a class=\"id\" href=\"#device\">device</a> *, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *, <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#blk_should_fake_timeout\">blk_should_fake_timeout</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#current_io_context\">current_io_context</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"int <a class=\"id\" href=\"#ll_back_merge_fn\">ll_back_merge_fn</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>);", 
"int <a class=\"id\" href=\"#ll_front_merge_fn\">ll_front_merge_fn</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>);", 
"int <a class=\"id\" href=\"#attempt_back_merge\">attempt_back_merge</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"int <a class=\"id\" href=\"#attempt_front_merge\">attempt_front_merge</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"void <a class=\"id\" href=\"#blk_recalc_rq_segments\">blk_recalc_rq_segments</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"void <a class=\"id\" href=\"#blk_rq_set_mixed_merge\">blk_rq_set_mixed_merge</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"void <a class=\"id\" href=\"#blk_queue_congestion_threshold\">blk_queue_congestion_threshold</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"int <a class=\"id\" href=\"#blk_dev_init\">blk_dev_init</a>(void);", 
"", 
"void <a class=\"id\" href=\"#elv_quiesce_start\">elv_quiesce_start</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>);", 
"void <a class=\"id\" href=\"#elv_quiesce_end\">elv_quiesce_end</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the threshold (number of used requests) at which the queue is</span>", 
"<span class=\"comment\"> * considered to be congested.  It include a little hysteresis to keep the</span>", 
"<span class=\"comment\"> * context switch rate down.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#queue_congestion_on_threshold\">queue_congestion_on_threshold</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_congestion_on\">nr_congestion_on</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The threshold at which a queue is considered to be uncongested</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#queue_congestion_off_threshold\">queue_congestion_off_threshold</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_congestion_off\">nr_congestion_off</a>;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_BLK_DEV_INTEGRITY\">CONFIG_BLK_DEV_INTEGRITY</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rq_for_each_integrity_segment\">rq_for_each_integrity_segment</a>(<a class=\"id\" href=\"#bvl\">bvl</a>, <a class=\"id\" href=\"#_rq\">_rq</a>, <a class=\"id\" href=\"#_iter\">_iter</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rq_for_each_bio\">__rq_for_each_bio</a>(<a class=\"id\" href=\"#_iter\">_iter</a>.<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#_rq\">_rq</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bip_for_each_vec\">bip_for_each_vec</a>(<a class=\"id\" href=\"#bvl\">bvl</a>, <a class=\"id\" href=\"#_iter\">_iter</a>.<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_integrity\">bi_integrity</a>, <a class=\"id\" href=\"#_iter\">_iter</a>.<a class=\"id\" href=\"#i\">i</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* BLK_DEV_INTEGRITY */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#blk_cpu_to_group\">blk_cpu_to_group</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#cpu_coregroup_mask\">cpu_coregroup_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#mask\">mask</a>);", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHED_SMT\">CONFIG_SCHED_SMT</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#topology_thread_cpumask\">topology_thread_cpumask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#group\">group</a> &lt; <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Contribute to IO statistics IFF:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a) it's attached to a gendisk, and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>b) the queue had IO stats enabled when this request was started, and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>c) it's a file system request or a discard request</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#blk_do_io_stat\">blk_do_io_stat</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a> &&", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_IO_STAT\">REQ_IO_STAT</a>) &&", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> == <a class=\"id\" href=\"#REQ_TYPE_FS\">REQ_TYPE_FS</a> ||", 
"<span class=\"ts\"/>        (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/9b/9f3c38bb45008fd543af277ff809cb0ccb59d8.xr', __xr_tmp);
