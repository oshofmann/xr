var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  gendisk handling</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#genhd\">genhd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdev_t\">kdev_t</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmod\">kmod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kobj_map\">kobj_map</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"blk.h\"", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#block_class_lock\">block_class_lock</a>);", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_SYSFS_DEPRECATED\">CONFIG_SYSFS_DEPRECATED</a>", 
"struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#block_depr\">block_depr</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* for extended dynamic devt allocation, currently only one major is used */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_EXT_DEVT\">MAX_EXT_DEVT</a><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#MINORBITS\">MINORBITS</a>)", 
"", 
"<span class=\"comment\">/* For extended devt allocation.  ext_devt_mutex prevents look up</span>", 
"<span class=\"comment\"> * results from going away underneath its user.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#ext_devt_mutex\">ext_devt_mutex</a>);", 
"static <a class=\"id\" href=\"#DEFINE_IDR\">DEFINE_IDR</a>(<a class=\"id\" href=\"#ext_devt_idr\">ext_devt_idr</a>);", 
"", 
"static struct <a class=\"id\" href=\"#device_type\">device_type</a> <a class=\"id\" href=\"#disk_type\">disk_type</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * disk_get_part - get partition</span>", 
"<span class=\"comment\"> * @disk: disk to look partition from</span>", 
"<span class=\"comment\"> * @partno: partition number</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Look for partition @partno from @disk.  If found, increment</span>", 
"<span class=\"comment\"> * reference count and return it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Don't care.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to the found partition on success, NULL if not found.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#disk_get_part\">disk_get_part</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>, int <a class=\"id\" href=\"#partno\">partno</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#disk_part_tbl\">disk_part_tbl</a> *<a class=\"id\" href=\"#ptbl\">ptbl</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#partno\">partno</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptbl\">ptbl</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part_tbl\">part_tbl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#partno\">partno</a> &lt; <a class=\"id\" href=\"#ptbl\">ptbl</a>-><a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#ptbl\">ptbl</a>-><a class=\"id\" href=\"#part\">part</a>[<a class=\"id\" href=\"#partno\">partno</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#part\">part</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_device\">get_device</a>(<a class=\"id\" href=\"#part_to_dev\">part_to_dev</a>(<a class=\"id\" href=\"#part\">part</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#part\">part</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#disk_get_part\">disk_get_part</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * disk_part_iter_init - initialize partition iterator</span>", 
"<span class=\"comment\"> * @piter: iterator to initialize</span>", 
"<span class=\"comment\"> * @disk: disk to iterate over</span>", 
"<span class=\"comment\"> * @flags: DISK_PITER_* flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initialize @piter so that it iterates over partitions of @disk.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Don't care.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#disk_part_iter_init\">disk_part_iter_init</a>(struct <a class=\"id\" href=\"#disk_part_iter\">disk_part_iter</a> *<a class=\"id\" href=\"#piter\">piter</a>, struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#disk_part_tbl\">disk_part_tbl</a> *<a class=\"id\" href=\"#ptbl\">ptbl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptbl\">ptbl</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part_tbl\">part_tbl</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#disk\">disk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DISK_PITER_REVERSE\">DISK_PITER_REVERSE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#ptbl\">ptbl</a>-><a class=\"id\" href=\"#len\">len</a> - 1;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#DISK_PITER_INCL_PART0\">DISK_PITER_INCL_PART0</a> | <a class=\"id\" href=\"#DISK_PITER_INCL_EMPTY_PART0\">DISK_PITER_INCL_EMPTY_PART0</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#idx\">idx</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#idx\">idx</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#disk_part_iter_init\">disk_part_iter_init</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * disk_part_iter_next - proceed iterator to the next partition and return it</span>", 
"<span class=\"comment\"> * @piter: iterator of interest</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Proceed @piter to the next partition and return it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Don't care.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#disk_part_iter_next\">disk_part_iter_next</a>(struct <a class=\"id\" href=\"#disk_part_iter\">disk_part_iter</a> *<a class=\"id\" href=\"#piter\">piter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#disk_part_tbl\">disk_part_tbl</a> *<a class=\"id\" href=\"#ptbl\">ptbl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#inc\">inc</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* put the last partition */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk_put_part\">disk_put_part</a>(<a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#part\">part</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* get part_tbl */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptbl\">ptbl</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part_tbl\">part_tbl</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* determine iteration parameters */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DISK_PITER_REVERSE\">DISK_PITER_REVERSE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc\">inc</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#DISK_PITER_INCL_PART0\">DISK_PITER_INCL_PART0</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#DISK_PITER_INCL_EMPTY_PART0\">DISK_PITER_INCL_EMPTY_PART0</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc\">inc</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#ptbl\">ptbl</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* iterate to the next partition */</span>", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#idx\">idx</a> != <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#idx\">idx</a> += <a class=\"id\" href=\"#inc\">inc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#ptbl\">ptbl</a>-><a class=\"id\" href=\"#part\">part</a>[<a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#idx\">idx</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#part\">part</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#nr_sects\">nr_sects</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DISK_PITER_INCL_EMPTY\">DISK_PITER_INCL_EMPTY</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DISK_PITER_INCL_EMPTY_PART0\">DISK_PITER_INCL_EMPTY_PART0</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#idx\">idx</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_device\">get_device</a>(<a class=\"id\" href=\"#part_to_dev\">part_to_dev</a>(<a class=\"id\" href=\"#part\">part</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#part\">part</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#idx\">idx</a> += <a class=\"id\" href=\"#inc\">inc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#part\">part</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#disk_part_iter_next\">disk_part_iter_next</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * disk_part_iter_exit - finish up partition iteration</span>", 
"<span class=\"comment\"> * @piter: iter of interest</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called when iteration is over.  Cleans up @piter.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Don't care.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#disk_part_iter_exit\">disk_part_iter_exit</a>(struct <a class=\"id\" href=\"#disk_part_iter\">disk_part_iter</a> *<a class=\"id\" href=\"#piter\">piter</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk_put_part\">disk_put_part</a>(<a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#part\">part</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#piter\">piter</a>-><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#disk_part_iter_exit\">disk_part_iter_exit</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sector_in_part\">sector_in_part</a>(struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#start_sect\">start_sect</a> <= <a class=\"id\" href=\"#sector\">sector</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector\">sector</a> &lt; <a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#start_sect\">start_sect</a> + <a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#nr_sects\">nr_sects</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * disk_map_sector_rcu - map sector to partition</span>", 
"<span class=\"comment\"> * @disk: gendisk of interest</span>", 
"<span class=\"comment\"> * @sector: sector to map</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find out which partition @sector maps to on @disk.  This is</span>", 
"<span class=\"comment\"> * primarily used for stats accounting.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * RCU read locked.  The returned partition pointer is valid only</span>", 
"<span class=\"comment\"> * while preemption is disabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Found partition on success, part0 is returned if no partition matches</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#disk_map_sector_rcu\">disk_map_sector_rcu</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#disk_part_tbl\">disk_part_tbl</a> *<a class=\"id\" href=\"#ptbl\">ptbl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptbl\">ptbl</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part_tbl\">part_tbl</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#ptbl\">ptbl</a>-><a class=\"id\" href=\"#last_lookup\">last_lookup</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#part\">part</a> && <a class=\"id\" href=\"#sector_in_part\">sector_in_part</a>(<a class=\"id\" href=\"#part\">part</a>, <a class=\"id\" href=\"#sector\">sector</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#part\">part</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ptbl\">ptbl</a>-><a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#ptbl\">ptbl</a>-><a class=\"id\" href=\"#part\">part</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#part\">part</a> && <a class=\"id\" href=\"#sector_in_part\">sector_in_part</a>(<a class=\"id\" href=\"#part\">part</a>, <a class=\"id\" href=\"#sector\">sector</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#ptbl\">ptbl</a>-><a class=\"id\" href=\"#last_lookup\">last_lookup</a>, <a class=\"id\" href=\"#part\">part</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#part\">part</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part0\">part0</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#disk_map_sector_rcu\">disk_map_sector_rcu</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Can be deleted altogether. Later.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#blk_major_name\">blk_major_name</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#blk_major_name\">blk_major_name</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#major\">major</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[16];", 
"} *<a class=\"id\" href=\"#major_names\">major_names</a>[<a class=\"id\" href=\"#BLKDEV_MAJOR_HASH_SIZE\">BLKDEV_MAJOR_HASH_SIZE</a>];", 
"", 
"<span class=\"comment\">/* index in the above - for now: assume no multimajor ranges */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#major_to_index\">major_to_index</a>(int <a class=\"id\" href=\"#major\">major</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#major\">major</a> % <a class=\"id\" href=\"#BLKDEV_MAJOR_HASH_SIZE\">BLKDEV_MAJOR_HASH_SIZE</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"void <a class=\"id\" href=\"#blkdev_show\">blkdev_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seqf\">seqf</a>, <a class=\"id\" href=\"#off_t\">off_t</a> <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#blk_major_name\">blk_major_name</a> *<a class=\"id\" href=\"#dp\">dp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#BLKDEV_MAJOR_HASH_SIZE\">BLKDEV_MAJOR_HASH_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#block_class_lock\">block_class_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#dp\">dp</a> = <a class=\"id\" href=\"#major_names\">major_names</a>[<a class=\"id\" href=\"#offset\">offset</a>]; <a class=\"id\" href=\"#dp\">dp</a>; <a class=\"id\" href=\"#dp\">dp</a> = <a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seqf\">seqf</a>, \"%3d %s\\n\", <a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#dp\">dp</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#block_class_lock\">block_class_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PROC_FS */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * register_blkdev - register a new block device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @major: the requested major device number [1..255]. If @major=0, try to</span>", 
"<span class=\"comment\"> *         allocate any unused major number.</span>", 
"<span class=\"comment\"> * @name: the name of the new block device as a zero terminated string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The @name must be unique within the system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The return value depends on the @major input parameter.</span>", 
"<span class=\"comment\"> *  - if a major device number was requested in range [1..255] then the</span>", 
"<span class=\"comment\"> *    function returns zero on success, or a negative error code</span>", 
"<span class=\"comment\"> *  - if any unused major number was requested with @major=0 parameter</span>", 
"<span class=\"comment\"> *    then the return value is the allocated major number in range</span>", 
"<span class=\"comment\"> *    [1..255] or a negative error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#register_blkdev\">register_blkdev</a>(unsigned int <a class=\"id\" href=\"#major\">major</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#blk_major_name\">blk_major_name</a> **<a class=\"id\" href=\"#n\">n</a>, *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#block_class_lock\">block_class_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* temporary */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#major\">major</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#major_names\">major_names</a>)-1; <a class=\"id\" href=\"#index\">index</a> &gt; 0; <a class=\"id\" href=\"#index\">index</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#major_names\">major_names</a>[<a class=\"id\" href=\"#index\">index</a>] == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"register_blkdev: failed to get major for %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#major\">major</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#major\">major</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#blk_major_name\">blk_major_name</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#major\">major</a> = <a class=\"id\" href=\"#major\">major</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, sizeof(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#name\">name</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#major_to_index\">major_to_index</a>(<a class=\"id\" href=\"#major\">major</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = &amp;<a class=\"id\" href=\"#major_names\">major_names</a>[<a class=\"id\" href=\"#index\">index</a>]; *<a class=\"id\" href=\"#n\">n</a>; <a class=\"id\" href=\"#n\">n</a> = &amp;(*<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#major\">major</a> == <a class=\"id\" href=\"#major\">major</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"register_blkdev: cannot get major %d for %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#block_class_lock\">block_class_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_blkdev\">register_blkdev</a>);", 
"", 
"void <a class=\"id\" href=\"#unregister_blkdev\">unregister_blkdev</a>(unsigned int <a class=\"id\" href=\"#major\">major</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#blk_major_name\">blk_major_name</a> **<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#blk_major_name\">blk_major_name</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#major_to_index\">major_to_index</a>(<a class=\"id\" href=\"#major\">major</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#block_class_lock\">block_class_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = &amp;<a class=\"id\" href=\"#major_names\">major_names</a>[<a class=\"id\" href=\"#index\">index</a>]; *<a class=\"id\" href=\"#n\">n</a>; <a class=\"id\" href=\"#n\">n</a> = &amp;(*<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#major\">major</a> == <a class=\"id\" href=\"#major\">major</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#n\">n</a> || <a class=\"id\" href=\"#strcmp\">strcmp</a>((*<a class=\"id\" href=\"#n\">n</a>)-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#block_class_lock\">block_class_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_blkdev\">unregister_blkdev</a>);", 
"", 
"static struct <a class=\"id\" href=\"#kobj_map\">kobj_map</a> *<a class=\"id\" href=\"#bdev_map\">bdev_map</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_mangle_minor - scatter minor numbers apart</span>", 
"<span class=\"comment\"> * @minor: minor number to mangle</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Scatter consecutively allocated @minor number apart if MANGLE_DEVT</span>", 
"<span class=\"comment\"> * is enabled.  Mangling twice gives the original value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Mangled value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Don't care.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#blk_mangle_minor\">blk_mangle_minor</a>(int <a class=\"id\" href=\"#minor\">minor</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_BLOCK_EXT_DEVT\">CONFIG_DEBUG_BLOCK_EXT_DEVT</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MINORBITS\">MINORBITS</a> / 2; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#low\">low</a> = <a class=\"id\" href=\"#minor\">minor</a> &amp; (1 << <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#high\">high</a> = <a class=\"id\" href=\"#minor\">minor</a> &amp; (1 << (<a class=\"id\" href=\"#MINORBITS\">MINORBITS</a> - 1 - <a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#distance\">distance</a> = <a class=\"id\" href=\"#MINORBITS\">MINORBITS</a> - 1 - 2 * <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#minor\">minor</a> ^= <a class=\"id\" href=\"#low\">low</a> | <a class=\"id\" href=\"#high\">high</a>;<span class=\"ts\"/><span class=\"comment\">/* clear both bits */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#low\">low</a> <<= <a class=\"id\" href=\"#distance\">distance</a>;<span class=\"ts\"/><span class=\"comment\">/* swap the positions */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#high\">high</a> >>= <a class=\"id\" href=\"#distance\">distance</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#minor\">minor</a> |= <a class=\"id\" href=\"#low\">low</a> | <a class=\"id\" href=\"#high\">high</a>;<span class=\"ts\"/><span class=\"comment\">/* and set */</span>", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#minor\">minor</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_alloc_devt - allocate a dev_t for a partition</span>", 
"<span class=\"comment\"> * @part: partition to allocate dev_t for</span>", 
"<span class=\"comment\"> * @devt: out parameter for resulting dev_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate a dev_t for block device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 0 on success, allocated dev_t is returned in *@devt.  -errno on</span>", 
"<span class=\"comment\"> * failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Might sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#blk_alloc_devt\">blk_alloc_devt</a>(struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a>, <a class=\"id\" href=\"#dev_t\">dev_t</a> *<a class=\"id\" href=\"#devt\">devt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#part_to_disk\">part_to_disk</a>(<a class=\"id\" href=\"#part\">part</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* in consecutive minor range? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#partno\">partno</a> &lt; <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#minors\">minors</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#devt\">devt</a> = <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#major\">major</a>, <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#first_minor\">first_minor</a> + <a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#partno\">partno</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate ext devt */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#idr_pre_get\">idr_pre_get</a>(&amp;<a class=\"id\" href=\"#ext_devt_idr\">ext_devt_idr</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#idr_get_new\">idr_get_new</a>(&amp;<a class=\"id\" href=\"#ext_devt_idr\">ext_devt_idr</a>, <a class=\"id\" href=\"#part\">part</a>, &amp;<a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#rc\">rc</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> &gt; <a class=\"id\" href=\"#MAX_EXT_DEVT\">MAX_EXT_DEVT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idr_remove\">idr_remove</a>(&amp;<a class=\"id\" href=\"#ext_devt_idr\">ext_devt_idr</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#devt\">devt</a> = <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#BLOCK_EXT_MAJOR\">BLOCK_EXT_MAJOR</a>, <a class=\"id\" href=\"#blk_mangle_minor\">blk_mangle_minor</a>(<a class=\"id\" href=\"#idx\">idx</a>));", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_free_devt - free a dev_t</span>", 
"<span class=\"comment\"> * @devt: dev_t to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Free @devt which was allocated using blk_alloc_devt().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Might sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_free_devt\">blk_free_devt</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#devt\">devt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#devt\">devt</a> == <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(0, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#devt\">devt</a>) == <a class=\"id\" href=\"#BLOCK_EXT_MAJOR\">BLOCK_EXT_MAJOR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ext_devt_mutex\">ext_devt_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idr_remove\">idr_remove</a>(&amp;<a class=\"id\" href=\"#ext_devt_idr\">ext_devt_idr</a>, <a class=\"id\" href=\"#blk_mangle_minor\">blk_mangle_minor</a>(<a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#devt\">devt</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ext_devt_mutex\">ext_devt_mutex</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static char *<a class=\"id\" href=\"#bdevt_str\">bdevt_str</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#devt\">devt</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#devt\">devt</a>) <= 0xff && <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#devt\">devt</a>) <= 0xff) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#tbuf\">tbuf</a>[<a class=\"id\" href=\"#BDEVT_SIZE\">BDEVT_SIZE</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#tbuf\">tbuf</a>, <a class=\"id\" href=\"#BDEVT_SIZE\">BDEVT_SIZE</a>, \"%02x%02x\", <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#devt\">devt</a>), <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#devt\">devt</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#BDEVT_SIZE\">BDEVT_SIZE</a>, \"%-9s\", <a class=\"id\" href=\"#tbuf\">tbuf</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#BDEVT_SIZE\">BDEVT_SIZE</a>, \"%03x:%05x\", <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#devt\">devt</a>), <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#devt\">devt</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Register device numbers dev..(dev+range-1)</span>", 
"<span class=\"comment\"> * range must be nonzero</span>", 
"<span class=\"comment\"> * The hash chain is sorted on range, so that subranges can override.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_register_region\">blk_register_region</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#devt\">devt</a>, unsigned long <a class=\"id\" href=\"#range\">range</a>, struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#module\">module</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#kobject\">kobject</a> *(*<a class=\"id\" href=\"#probe\">probe</a>)(<a class=\"id\" href=\"#dev_t\">dev_t</a>, int *, void *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int (*<a class=\"id\" href=\"#lock\">lock</a>)(<a class=\"id\" href=\"#dev_t\">dev_t</a>, void *), void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj_map\">kobj_map</a>(<a class=\"id\" href=\"#bdev_map\">bdev_map</a>, <a class=\"id\" href=\"#devt\">devt</a>, <a class=\"id\" href=\"#range\">range</a>, <a class=\"id\" href=\"#module\">module</a>, <a class=\"id\" href=\"#probe\">probe</a>, <a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_register_region\">blk_register_region</a>);", 
"", 
"void <a class=\"id\" href=\"#blk_unregister_region\">blk_unregister_region</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#devt\">devt</a>, unsigned long <a class=\"id\" href=\"#range\">range</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj_unmap\">kobj_unmap</a>(<a class=\"id\" href=\"#bdev_map\">bdev_map</a>, <a class=\"id\" href=\"#devt\">devt</a>, <a class=\"id\" href=\"#range\">range</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_unregister_region\">blk_unregister_region</a>);", 
"", 
"static struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#exact_match\">exact_match</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#devt\">devt</a>, int *<a class=\"id\" href=\"#partno\">partno</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#disk_to_dev\">disk_to_dev</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#kobj\">kobj</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#exact_lock\">exact_lock</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#devt\">devt</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#get_disk\">get_disk</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * add_disk - add partitioning information to kernel list</span>", 
"<span class=\"comment\"> * @disk: per-device partitioning information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function registers the partitioning information in @disk</span>", 
"<span class=\"comment\"> * with the kernel.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FIXME: error handling</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#add_disk\">add_disk</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#devt\">devt</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* minors == 0 indicates to use ext devt from part0 and should</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be accompanied with EXT_DEVT flag.  Make sure all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * parameters make sense.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#minors\">minors</a> && !(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#major\">major</a> || <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#first_minor\">first_minor</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#minors\">minors</a> && !(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GENHD_FL_EXT_DEVT\">GENHD_FL_EXT_DEVT</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#GENHD_FL_UP\">GENHD_FL_UP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#blk_alloc_devt\">blk_alloc_devt</a>(&amp;<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part0\">part0</a>, &amp;<a class=\"id\" href=\"#devt\">devt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk_to_dev\">disk_to_dev</a>(<a class=\"id\" href=\"#disk\">disk</a>)-><a class=\"id\" href=\"#devt\">devt</a> = <a class=\"id\" href=\"#devt\">devt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* -&gt;major and -&gt;first_minor aren't supposed to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dereferenced from here on, but set them just in case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#major\">major</a> = <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#devt\">devt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#first_minor\">first_minor</a> = <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#devt\">devt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_register_region\">blk_register_region</a>(<a class=\"id\" href=\"#disk_devt\">disk_devt</a>(<a class=\"id\" href=\"#disk\">disk</a>), <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#minors\">minors</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#exact_match\">exact_match</a>, <a class=\"id\" href=\"#exact_lock\">exact_lock</a>, <a class=\"id\" href=\"#disk\">disk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_disk\">register_disk</a>(<a class=\"id\" href=\"#disk\">disk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_register_queue\">blk_register_queue</a>(<a class=\"id\" href=\"#disk\">disk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a> = &amp;<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_register_dev\">bdi_register_dev</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#disk_devt\">disk_devt</a>(<a class=\"id\" href=\"#disk\">disk</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#sysfs_create_link\">sysfs_create_link</a>(&amp;<a class=\"id\" href=\"#disk_to_dev\">disk_to_dev</a>(<a class=\"id\" href=\"#disk\">disk</a>)-><a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"bdi\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#retval\">retval</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#add_disk\">add_disk</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#del_gendisk\">del_gendisk</a>);<span class=\"ts\"/><span class=\"comment\">/* in partitions/check.c */</span>", 
"", 
"void <a class=\"id\" href=\"#unlink_gendisk\">unlink_gendisk</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_link\">sysfs_remove_link</a>(&amp;<a class=\"id\" href=\"#disk_to_dev\">disk_to_dev</a>(<a class=\"id\" href=\"#disk\">disk</a>)-><a class=\"id\" href=\"#kobj\">kobj</a>, \"bdi\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_unregister\">bdi_unregister</a>(&amp;<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_unregister_queue\">blk_unregister_queue</a>(<a class=\"id\" href=\"#disk\">disk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_unregister_region\">blk_unregister_region</a>(<a class=\"id\" href=\"#disk_devt\">disk_devt</a>(<a class=\"id\" href=\"#disk\">disk</a>), <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#minors\">minors</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_gendisk - get partitioning information for a given device</span>", 
"<span class=\"comment\"> * @devt: device to get partitioning information for</span>", 
"<span class=\"comment\"> * @partno: returned partition index</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function gets the structure containing partitioning</span>", 
"<span class=\"comment\"> * information for the given device @devt.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#get_gendisk\">get_gendisk</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#devt\">devt</a>, int *<a class=\"id\" href=\"#partno\">partno</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#devt\">devt</a>) != <a class=\"id\" href=\"#BLOCK_EXT_MAJOR\">BLOCK_EXT_MAJOR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#kobj_lookup\">kobj_lookup</a>(<a class=\"id\" href=\"#bdev_map\">bdev_map</a>, <a class=\"id\" href=\"#devt\">devt</a>, <a class=\"id\" href=\"#partno\">partno</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#kobj_to_dev\">kobj_to_dev</a>(<a class=\"id\" href=\"#kobj\">kobj</a>));", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ext_devt_mutex\">ext_devt_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#idr_find\">idr_find</a>(&amp;<a class=\"id\" href=\"#ext_devt_idr\">ext_devt_idr</a>, <a class=\"id\" href=\"#blk_mangle_minor\">blk_mangle_minor</a>(<a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#devt\">devt</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#part\">part</a> && <a class=\"id\" href=\"#get_disk\">get_disk</a>(<a class=\"id\" href=\"#part_to_disk\">part_to_disk</a>(<a class=\"id\" href=\"#part\">part</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#partno\">partno</a> = <a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#partno\">partno</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#part_to_disk\">part_to_disk</a>(<a class=\"id\" href=\"#part\">part</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ext_devt_mutex\">ext_devt_mutex</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#disk\">disk</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_gendisk\">get_gendisk</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bdget_disk - do bdget() by gendisk and partition number</span>", 
"<span class=\"comment\"> * @disk: gendisk of interest</span>", 
"<span class=\"comment\"> * @partno: partition number</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find partition @partno from @disk, do bdget() on it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Don't care.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Resulting block_device on success, NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdget_disk\">bdget_disk</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>, int <a class=\"id\" href=\"#partno\">partno</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#disk_get_part\">disk_get_part</a>(<a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#partno\">partno</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#part\">part</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#bdget\">bdget</a>(<a class=\"id\" href=\"#part_devt\">part_devt</a>(<a class=\"id\" href=\"#part\">part</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk_put_part\">disk_put_part</a>(<a class=\"id\" href=\"#part\">part</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bdget_disk\">bdget_disk</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * print a full list of all partitions - intended for places where the root</span>", 
"<span class=\"comment\"> * filesystem can't be mounted and thus to give the victim some idea of what</span>", 
"<span class=\"comment\"> * went wrong</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#printk_all_partitions\">printk_all_partitions</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_dev_iter\">class_dev_iter</a> <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_dev_iter_init\">class_dev_iter_init</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>, &amp;<a class=\"id\" href=\"#block_class\">block_class</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#disk_type\">disk_type</a>);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#class_dev_iter_next\">class_dev_iter_next</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#disk_part_iter\">disk_part_iter</a> <a class=\"id\" href=\"#piter\">piter</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#name_buf\">name_buf</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#devt_buf\">devt_buf</a>[<a class=\"id\" href=\"#BDEVT_SIZE\">BDEVT_SIZE</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't show empty devices or things that have been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * surpressed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_capacity\">get_capacity</a>(<a class=\"id\" href=\"#disk\">disk</a>) == 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GENHD_FL_SUPPRESS_PARTITION_INFO\">GENHD_FL_SUPPRESS_PARTITION_INFO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note, unlike /proc/partitions, I am showing the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * numbers in hex - the same format as the root=</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * option takes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk_part_iter_init\">disk_part_iter_init</a>(&amp;<a class=\"id\" href=\"#piter\">piter</a>, <a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#DISK_PITER_INCL_PART0\">DISK_PITER_INCL_PART0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#disk_part_iter_next\">disk_part_iter_next</a>(&amp;<a class=\"id\" href=\"#piter\">piter</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_part0\">is_part0</a> = <a class=\"id\" href=\"#part\">part</a> == &amp;<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part0\">part0</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s%s %10llu %s\", <a class=\"id\" href=\"#is_part0\">is_part0</a> ? \"\" : \"  \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bdevt_str\">bdevt_str</a>(<a class=\"id\" href=\"#part_devt\">part_devt</a>(<a class=\"id\" href=\"#part\">part</a>), <a class=\"id\" href=\"#devt_buf\">devt_buf</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#nr_sects\">nr_sects</a> >> 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#disk_name\">disk_name</a>(<a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#partno\">partno</a>, <a class=\"id\" href=\"#name_buf\">name_buf</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_part0\">is_part0</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#driverfs_dev\">driverfs_dev</a> != <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#driverfs_dev\">driverfs_dev</a>-><a class=\"id\" href=\"#driver\">driver</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" driver: %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#driverfs_dev\">driverfs_dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" (driver?)\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk_part_iter_exit\">disk_part_iter_exit</a>(&amp;<a class=\"id\" href=\"#piter\">piter</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_dev_iter_exit\">class_dev_iter_exit</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"<span class=\"comment\">/* iterator */</span>", 
"static void *<a class=\"id\" href=\"#disk_seqf_start\">disk_seqf_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seqf\">seqf</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#skip\">skip</a> = *<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_dev_iter\">class_dev_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#iter\">iter</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#iter\">iter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seqf\">seqf</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_dev_iter_init\">class_dev_iter_init</a>(<a class=\"id\" href=\"#iter\">iter</a>, &amp;<a class=\"id\" href=\"#block_class\">block_class</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#disk_type\">disk_type</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#class_dev_iter_next\">class_dev_iter_next</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#skip\">skip</a>--);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#disk_seqf_next\">disk_seqf_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seqf\">seqf</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#pos\">pos</a>)++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#class_dev_iter_next\">class_dev_iter_next</a>(<a class=\"id\" href=\"#seqf\">seqf</a>-><a class=\"id\" href=\"#private\">private</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#disk_seqf_stop\">disk_seqf_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seqf\">seqf</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_dev_iter\">class_dev_iter</a> *<a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#seqf\">seqf</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* stop is called even after start failed :-( */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class_dev_iter_exit\">class_dev_iter_exit</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#show_partition_start\">show_partition_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seqf\">seqf</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>static void *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#disk_seqf_start\">disk_seqf_start</a>(<a class=\"id\" href=\"#seqf\">seqf</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#p\">p</a>) && <a class=\"id\" href=\"#p\">p</a> && !*<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#seqf\">seqf</a>, \"major minor  #blocks  name\\n\\n\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#show_partition\">show_partition</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seqf\">seqf</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#sgp\">sgp</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#disk_part_iter\">disk_part_iter</a> <a class=\"id\" href=\"#piter\">piter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't show non-partitionable removeable devices or empty devices */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#get_capacity\">get_capacity</a>(<a class=\"id\" href=\"#sgp\">sgp</a>) || (!<a class=\"id\" href=\"#disk_partitionable\">disk_partitionable</a>(<a class=\"id\" href=\"#sgp\">sgp</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GENHD_FL_REMOVABLE\">GENHD_FL_REMOVABLE</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sgp\">sgp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GENHD_FL_SUPPRESS_PARTITION_INFO\">GENHD_FL_SUPPRESS_PARTITION_INFO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* show the full disk and all non-0 size partitions of it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk_part_iter_init\">disk_part_iter_init</a>(&amp;<a class=\"id\" href=\"#piter\">piter</a>, <a class=\"id\" href=\"#sgp\">sgp</a>, <a class=\"id\" href=\"#DISK_PITER_INCL_PART0\">DISK_PITER_INCL_PART0</a>);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#disk_part_iter_next\">disk_part_iter_next</a>(&amp;<a class=\"id\" href=\"#piter\">piter</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seqf\">seqf</a>, \"%4d  %7d %10llu %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#part_devt\">part_devt</a>(<a class=\"id\" href=\"#part\">part</a>)), <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#part_devt\">part_devt</a>(<a class=\"id\" href=\"#part\">part</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (unsigned long long)<a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#nr_sects\">nr_sects</a> >> 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#disk_name\">disk_name</a>(<a class=\"id\" href=\"#sgp\">sgp</a>, <a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#partno\">partno</a>, <a class=\"id\" href=\"#buf\">buf</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk_part_iter_exit\">disk_part_iter_exit</a>(&amp;<a class=\"id\" href=\"#piter\">piter</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#partitions_op\">partitions_op</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/>= <a class=\"id\" href=\"#show_partition_start\">show_partition_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/>= <a class=\"id\" href=\"#disk_seqf_next\">disk_seqf_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a><span class=\"ts\"/>= <a class=\"id\" href=\"#disk_seqf_stop\">disk_seqf_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a><span class=\"ts\"/>= <a class=\"id\" href=\"#show_partition\">show_partition</a>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#partitions_open\">partitions_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#partitions_op\">partitions_op</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_partitions_operations\">proc_partitions_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#partitions_open\">partitions_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"static struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#base_probe\">base_probe</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#devt\">devt</a>, int *<a class=\"id\" href=\"#partno\">partno</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#request_module\">request_module</a>(\"block-major-%d-%d\", <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#devt\">devt</a>), <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#devt\">devt</a>)) &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make old-style 2.4 aliases work */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"block-major-%d\", <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#devt\">devt</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#genhd_device_init\">genhd_device_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_class\">block_class</a>.<a class=\"id\" href=\"#dev_kobj\">dev_kobj</a> = <a class=\"id\" href=\"#sysfs_dev_block_kobj\">sysfs_dev_block_kobj</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#class_register\">class_register</a>(&amp;<a class=\"id\" href=\"#block_class\">block_class</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev_map\">bdev_map</a> = <a class=\"id\" href=\"#kobj_map_init\">kobj_map_init</a>(<a class=\"id\" href=\"#base_probe\">base_probe</a>, &amp;<a class=\"id\" href=\"#block_class_lock\">block_class_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_dev_init\">blk_dev_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_blkdev\">register_blkdev</a>(<a class=\"id\" href=\"#BLOCK_EXT_MAJOR\">BLOCK_EXT_MAJOR</a>, \"blkext\");", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_SYSFS_DEPRECATED\">CONFIG_SYSFS_DEPRECATED</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* create top-level block dir */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_depr\">block_depr</a> = <a class=\"id\" href=\"#kobject_create_and_add\">kobject_create_and_add</a>(\"block\", <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#genhd_device_init\">genhd_device_init</a>);", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#disk_range_show\">disk_range_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#minors\">minors</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#disk_ext_range_show\">disk_ext_range_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#disk_max_parts\">disk_max_parts</a>(<a class=\"id\" href=\"#disk\">disk</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#disk_removable_show\">disk_removable_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GENHD_FL_REMOVABLE\">GENHD_FL_REMOVABLE</a> ? 1 : 0));", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#disk_ro_show\">disk_ro_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#get_disk_ro\">get_disk_ro</a>(<a class=\"id\" href=\"#disk\">disk</a>) ? 1 : 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#disk_capability_show\">disk_capability_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%x\\n\", <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#disk_alignment_offset_show\">disk_alignment_offset_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#queue_alignment_offset\">queue_alignment_offset</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#queue\">queue</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#disk_discard_alignment_show\">disk_discard_alignment_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#queue_discard_alignment\">queue_discard_alignment</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#queue\">queue</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#range\">range</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#disk_range_show\">disk_range_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#ext_range\">ext_range</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#disk_ext_range_show\">disk_ext_range_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#removable\">removable</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#disk_removable_show\">disk_removable_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#ro\">ro</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#disk_ro_show\">disk_ro_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#part_size_show\">part_size_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#alignment_offset\">alignment_offset</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#disk_alignment_offset_show\">disk_alignment_offset_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#discard_alignment\">discard_alignment</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#disk_discard_alignment_show\">disk_discard_alignment_show</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#capability\">capability</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#disk_capability_show\">disk_capability_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#stat\">stat</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#part_stat_show\">part_stat_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"static <a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#inflight\">inflight</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#part_inflight_show\">part_inflight_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIL_MAKE_REQUEST\">CONFIG_FAIL_MAKE_REQUEST</a>", 
"static struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> <a class=\"id\" href=\"#dev_attr_fail\">dev_attr_fail</a> =", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR\">__ATTR</a>(<a class=\"id\" href=\"#make\">make</a>-<a class=\"id\" href=\"#it\">it</a>-<a class=\"id\" href=\"#fail\">fail</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>|<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>, <a class=\"id\" href=\"#part_fail_show\">part_fail_show</a>, <a class=\"id\" href=\"#part_fail_store\">part_fail_store</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIL_IO_TIMEOUT\">CONFIG_FAIL_IO_TIMEOUT</a>", 
"static struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> <a class=\"id\" href=\"#dev_attr_fail_timeout\">dev_attr_fail_timeout</a> =", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR\">__ATTR</a>(<a class=\"id\" href=\"#io\">io</a>-<a class=\"id\" href=\"#timeout\">timeout</a>-<a class=\"id\" href=\"#fail\">fail</a>,  <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>|<a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>, <a class=\"id\" href=\"#part_timeout_show\">part_timeout_show</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_timeout_store\">part_timeout_store</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#disk_attrs\">disk_attrs</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_range\">dev_attr_range</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_ext_range\">dev_attr_ext_range</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_removable\">dev_attr_removable</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_ro\">dev_attr_ro</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_size\">dev_attr_size</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_alignment_offset\">dev_attr_alignment_offset</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_discard_alignment\">dev_attr_discard_alignment</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_capability\">dev_attr_capability</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_stat\">dev_attr_stat</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_inflight\">dev_attr_inflight</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIL_MAKE_REQUEST\">CONFIG_FAIL_MAKE_REQUEST</a>", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_fail\">dev_attr_fail</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIL_IO_TIMEOUT\">CONFIG_FAIL_IO_TIMEOUT</a>", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_fail_timeout\">dev_attr_fail_timeout</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> <a class=\"id\" href=\"#disk_attr_group\">disk_attr_group</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attrs\">attrs</a> = <a class=\"id\" href=\"#disk_attrs\">disk_attrs</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> *<a class=\"id\" href=\"#disk_attr_groups\">disk_attr_groups</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#disk_attr_group\">disk_attr_group</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"};", 
"", 
"static void <a class=\"id\" href=\"#disk_free_ptbl_rcu_cb\">disk_free_ptbl_rcu_cb</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#disk_part_tbl\">disk_part_tbl</a> *<a class=\"id\" href=\"#ptbl\">ptbl</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#disk_part_tbl\">disk_part_tbl</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ptbl\">ptbl</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * disk_replace_part_tbl - replace disk-&gt;part_tbl in RCU-safe way</span>", 
"<span class=\"comment\"> * @disk: disk to replace part_tbl for</span>", 
"<span class=\"comment\"> * @new_ptbl: new part_tbl to install</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Replace disk-&gt;part_tbl with @new_ptbl in RCU-safe way.  The</span>", 
"<span class=\"comment\"> * original ptbl is freed using RCU callback.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * Matching bd_mutx locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#disk_replace_part_tbl\">disk_replace_part_tbl</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#disk_part_tbl\">disk_part_tbl</a> *<a class=\"id\" href=\"#new_ptbl\">new_ptbl</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#disk_part_tbl\">disk_part_tbl</a> *<a class=\"id\" href=\"#old_ptbl\">old_ptbl</a> = <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part_tbl\">part_tbl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part_tbl\">part_tbl</a>, <a class=\"id\" href=\"#new_ptbl\">new_ptbl</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_ptbl\">old_ptbl</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#old_ptbl\">old_ptbl</a>-><a class=\"id\" href=\"#last_lookup\">last_lookup</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#old_ptbl\">old_ptbl</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#disk_free_ptbl_rcu_cb\">disk_free_ptbl_rcu_cb</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * disk_expand_part_tbl - expand disk-&gt;part_tbl</span>", 
"<span class=\"comment\"> * @disk: disk to expand part_tbl for</span>", 
"<span class=\"comment\"> * @partno: expand such that this partno can fit in</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Expand disk-&gt;part_tbl such that @partno can fit in.  disk-&gt;part_tbl</span>", 
"<span class=\"comment\"> * uses RCU to allow unlocked dereferencing for stats and other stuff.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * Matching bd_mutex locked, might sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 0 on success, -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#disk_expand_part_tbl\">disk_expand_part_tbl</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>, int <a class=\"id\" href=\"#partno\">partno</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#disk_part_tbl\">disk_part_tbl</a> *<a class=\"id\" href=\"#old_ptbl\">old_ptbl</a> = <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part_tbl\">part_tbl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#disk_part_tbl\">disk_part_tbl</a> *<a class=\"id\" href=\"#new_ptbl\">new_ptbl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#old_ptbl\">old_ptbl</a> ? <a class=\"id\" href=\"#old_ptbl\">old_ptbl</a>-><a class=\"id\" href=\"#len\">len</a> : 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#target\">target</a> = <a class=\"id\" href=\"#partno\">partno</a> + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* disk_max_parts() is zero during initialization, ignore if so */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disk_max_parts\">disk_max_parts</a>(<a class=\"id\" href=\"#disk\">disk</a>) && <a class=\"id\" href=\"#target\">target</a> &gt; <a class=\"id\" href=\"#disk_max_parts\">disk_max_parts</a>(<a class=\"id\" href=\"#disk\">disk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#target\">target</a> <= <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(*<a class=\"id\" href=\"#new_ptbl\">new_ptbl</a>) + <a class=\"id\" href=\"#target\">target</a> * sizeof(<a class=\"id\" href=\"#new_ptbl\">new_ptbl</a>-><a class=\"id\" href=\"#part\">part</a>[0]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_ptbl\">new_ptbl</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#node_id\">node_id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_ptbl\">new_ptbl</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_ptbl\">new_ptbl</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#target\">target</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#new_ptbl\">new_ptbl</a>-><a class=\"id\" href=\"#part\">part</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#old_ptbl\">old_ptbl</a>-><a class=\"id\" href=\"#part\">part</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk_replace_part_tbl\">disk_replace_part_tbl</a>(<a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#new_ptbl\">new_ptbl</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#disk_release\">disk_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#random\">random</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk_replace_part_tbl\">disk_replace_part_tbl</a>(<a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_part_stats\">free_part_stats</a>(&amp;<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part0\">part0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#disk\">disk</a>);", 
"}", 
"struct <a class=\"id\" href=\"#class\">class</a> <a class=\"id\" href=\"#block_class\">block_class</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"block\",", 
"};", 
"", 
"static char *<a class=\"id\" href=\"#block_devnode\">block_devnode</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> *<a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#devnode\">devnode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#devnode\">devnode</a>(<a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#device_type\">device_type</a> <a class=\"id\" href=\"#disk_type\">disk_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"disk\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#groups\">groups</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#disk_attr_groups\">disk_attr_groups</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#disk_release\">disk_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#devnode\">devnode</a><span class=\"ts\"/>= <a class=\"id\" href=\"#block_devnode\">block_devnode</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * aggregate disk stat collector.  Uses the same stats that the sysfs</span>", 
"<span class=\"comment\"> * entries do, above, but makes them available through one seq_file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The output looks suspiciously like /proc/partitions with a bunch of</span>", 
"<span class=\"comment\"> * extra fields.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#diskstats_show\">diskstats_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seqf\">seqf</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#gp\">gp</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#disk_part_iter\">disk_part_iter</a> <a class=\"id\" href=\"#piter\">piter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#hd\">hd</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/>if (&amp;disk_to_dev(gp)-&gt;kobj.entry == block_class.devices.next)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>seq_puts(seqf,<span class=\"ts\"/>\"major minor name\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"     rio rmerge rsect ruse wio wmerge \"</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"wsect wuse running use aveq\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"\\n\\n\");</span>", 
"<span class=\"comment\"><span class=\"ts\"/>*/</span>", 
" ", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk_part_iter_init\">disk_part_iter_init</a>(&amp;<a class=\"id\" href=\"#piter\">piter</a>, <a class=\"id\" href=\"#gp\">gp</a>, <a class=\"id\" href=\"#DISK_PITER_INCL_EMPTY_PART0\">DISK_PITER_INCL_EMPTY_PART0</a>);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#hd\">hd</a> = <a class=\"id\" href=\"#disk_part_iter_next\">disk_part_iter_next</a>(&amp;<a class=\"id\" href=\"#piter\">piter</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#part_stat_lock\">part_stat_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_round_stats\">part_round_stats</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#hd\">hd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_stat_unlock\">part_stat_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seqf\">seqf</a>, \"%4d %7d %s %lu %lu %llu \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"%u %lu %lu %llu %u %u %u %u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#part_devt\">part_devt</a>(<a class=\"id\" href=\"#hd\">hd</a>)), <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#part_devt\">part_devt</a>(<a class=\"id\" href=\"#hd\">hd</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#disk_name\">disk_name</a>(<a class=\"id\" href=\"#gp\">gp</a>, <a class=\"id\" href=\"#hd\">hd</a>-><a class=\"id\" href=\"#partno\">partno</a>, <a class=\"id\" href=\"#buf\">buf</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#part_stat_read\">part_stat_read</a>(<a class=\"id\" href=\"#hd\">hd</a>, <a class=\"id\" href=\"#ios\">ios</a>[0]),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#part_stat_read\">part_stat_read</a>(<a class=\"id\" href=\"#hd\">hd</a>, <a class=\"id\" href=\"#merges\">merges</a>[0]),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (unsigned long long)<a class=\"id\" href=\"#part_stat_read\">part_stat_read</a>(<a class=\"id\" href=\"#hd\">hd</a>, <a class=\"id\" href=\"#sectors\">sectors</a>[0]),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#jiffies_to_msecs\">jiffies_to_msecs</a>(<a class=\"id\" href=\"#part_stat_read\">part_stat_read</a>(<a class=\"id\" href=\"#hd\">hd</a>, <a class=\"id\" href=\"#ticks\">ticks</a>[0])),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#part_stat_read\">part_stat_read</a>(<a class=\"id\" href=\"#hd\">hd</a>, <a class=\"id\" href=\"#ios\">ios</a>[1]),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#part_stat_read\">part_stat_read</a>(<a class=\"id\" href=\"#hd\">hd</a>, <a class=\"id\" href=\"#merges\">merges</a>[1]),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (unsigned long long)<a class=\"id\" href=\"#part_stat_read\">part_stat_read</a>(<a class=\"id\" href=\"#hd\">hd</a>, <a class=\"id\" href=\"#sectors\">sectors</a>[1]),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#jiffies_to_msecs\">jiffies_to_msecs</a>(<a class=\"id\" href=\"#part_stat_read\">part_stat_read</a>(<a class=\"id\" href=\"#hd\">hd</a>, <a class=\"id\" href=\"#ticks\">ticks</a>[1])),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#part_in_flight\">part_in_flight</a>(<a class=\"id\" href=\"#hd\">hd</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#jiffies_to_msecs\">jiffies_to_msecs</a>(<a class=\"id\" href=\"#part_stat_read\">part_stat_read</a>(<a class=\"id\" href=\"#hd\">hd</a>, <a class=\"id\" href=\"#io_ticks\">io_ticks</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#jiffies_to_msecs\">jiffies_to_msecs</a>(<a class=\"id\" href=\"#part_stat_read\">part_stat_read</a>(<a class=\"id\" href=\"#hd\">hd</a>, <a class=\"id\" href=\"#time_in_queue\">time_in_queue</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk_part_iter_exit\">disk_part_iter_exit</a>(&amp;<a class=\"id\" href=\"#piter\">piter</a>);", 
" ", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#diskstats_op\">diskstats_op</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/>= <a class=\"id\" href=\"#disk_seqf_start\">disk_seqf_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/>= <a class=\"id\" href=\"#disk_seqf_next\">disk_seqf_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a><span class=\"ts\"/>= <a class=\"id\" href=\"#disk_seqf_stop\">disk_seqf_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a><span class=\"ts\"/>= <a class=\"id\" href=\"#diskstats_show\">diskstats_show</a>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#diskstats_open\">diskstats_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#diskstats_op\">diskstats_op</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_diskstats_operations\">proc_diskstats_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#diskstats_open\">diskstats_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#proc_genhd_init\">proc_genhd_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_create\">proc_create</a>(\"diskstats\", 0, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#proc_diskstats_operations\">proc_diskstats_operations</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_create\">proc_create</a>(\"partitions\", 0, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#proc_partitions_operations\">proc_partitions_operations</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#proc_genhd_init\">proc_genhd_init</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PROC_FS */</span>", 
"", 
"static void <a class=\"id\" href=\"#media_change_notify_thread\">media_change_notify_thread</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#gd\">gd</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#gendisk\">gendisk</a>, <a class=\"id\" href=\"#async_notify\">async_notify</a>);", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#event\">event</a>[] = \"MEDIA_CHANGE=1\";", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#envp\">envp</a>[] = { <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#NULL\">NULL</a> };", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set enviroment vars to indicate which event this is for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so that user space will know to go check the media status.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_uevent_env\">kobject_uevent_env</a>(&amp;<a class=\"id\" href=\"#disk_to_dev\">disk_to_dev</a>(<a class=\"id\" href=\"#gd\">gd</a>)-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#KOBJ_CHANGE\">KOBJ_CHANGE</a>, <a class=\"id\" href=\"#envp\">envp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(<a class=\"id\" href=\"#gd\">gd</a>-><a class=\"id\" href=\"#driverfs_dev\">driverfs_dev</a>);", 
"}", 
"", 
"#if 0", 
"void <a class=\"id\" href=\"#genhd_media_change_notify\">genhd_media_change_notify</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_device\">get_device</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#driverfs_dev\">driverfs_dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#async_notify\">async_notify</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#genhd_media_change_notify\">genhd_media_change_notify</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>  <span class=\"comment\">/*  0  */</span>", 
"", 
"<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#blk_lookup_devt\">blk_lookup_devt</a>(const char *<a class=\"id\" href=\"#name\">name</a>, int <a class=\"id\" href=\"#partno\">partno</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#devt\">devt</a> = <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(0, 0);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#class_dev_iter\">class_dev_iter</a> <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_dev_iter_init\">class_dev_iter_init</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>, &amp;<a class=\"id\" href=\"#block_class\">block_class</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#disk_type\">disk_type</a>);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#class_dev_iter_next\">class_dev_iter_next</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#dev_to_disk\">dev_to_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#partno\">partno</a> &lt; <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#minors\">minors</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We need to return the right devno, even</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if the partition doesn't exist yet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devt\">devt</a> = <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(<a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devt\">devt</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devt\">devt</a>) + <a class=\"id\" href=\"#partno\">partno</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#disk_get_part\">disk_get_part</a>(<a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#partno\">partno</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#part\">part</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devt\">devt</a> = <a class=\"id\" href=\"#part_devt\">part_devt</a>(<a class=\"id\" href=\"#part\">part</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk_put_part\">disk_put_part</a>(<a class=\"id\" href=\"#part\">part</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk_put_part\">disk_put_part</a>(<a class=\"id\" href=\"#part\">part</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_dev_iter_exit\">class_dev_iter_exit</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#devt\">devt</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_lookup_devt\">blk_lookup_devt</a>);", 
"", 
"struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#alloc_disk\">alloc_disk</a>(int <a class=\"id\" href=\"#minors\">minors</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_disk_node\">alloc_disk_node</a>(<a class=\"id\" href=\"#minors\">minors</a>, -1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#alloc_disk\">alloc_disk</a>);", 
"", 
"struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#alloc_disk_node\">alloc_disk_node</a>(int <a class=\"id\" href=\"#minors\">minors</a>, int <a class=\"id\" href=\"#node_id\">node_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(sizeof(struct <a class=\"id\" href=\"#gendisk\">gendisk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>, <a class=\"id\" href=\"#node_id\">node_id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disk\">disk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#init_part_stats\">init_part_stats</a>(&amp;<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part0\">part0</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#disk\">disk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#node_id\">node_id</a> = <a class=\"id\" href=\"#node_id\">node_id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#disk_expand_part_tbl\">disk_expand_part_tbl</a>(<a class=\"id\" href=\"#disk\">disk</a>, 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_part_stats\">free_part_stats</a>(&amp;<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part0\">part0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#disk\">disk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part_tbl\">part_tbl</a>-><a class=\"id\" href=\"#part\">part</a>[0] = &amp;<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part0\">part0</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#minors\">minors</a> = <a class=\"id\" href=\"#minors\">minors</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rand_initialize_disk\">rand_initialize_disk</a>(<a class=\"id\" href=\"#disk\">disk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk_to_dev\">disk_to_dev</a>(<a class=\"id\" href=\"#disk\">disk</a>)-><a class=\"id\" href=\"#class\">class</a> = &amp;<a class=\"id\" href=\"#block_class\">block_class</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk_to_dev\">disk_to_dev</a>(<a class=\"id\" href=\"#disk\">disk</a>)-><a class=\"id\" href=\"#type\">type</a> = &amp;<a class=\"id\" href=\"#disk_type\">disk_type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_initialize\">device_initialize</a>(<a class=\"id\" href=\"#disk_to_dev\">disk_to_dev</a>(<a class=\"id\" href=\"#disk\">disk</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#async_notify\">async_notify</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#media_change_notify_thread\">media_change_notify_thread</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#disk\">disk</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#alloc_disk_node\">alloc_disk_node</a>);", 
"", 
"struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#get_disk\">get_disk</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#fops\">fops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#fops\">fops</a>-><a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#owner\">owner</a> && !<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#owner\">owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#kobject_get\">kobject_get</a>(&amp;<a class=\"id\" href=\"#disk_to_dev\">disk_to_dev</a>(<a class=\"id\" href=\"#disk\">disk</a>)-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kobj\">kobj</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kobj\">kobj</a>;", 
"", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_disk\">get_disk</a>);", 
"", 
"void <a class=\"id\" href=\"#put_disk\">put_disk</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disk\">disk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(&amp;<a class=\"id\" href=\"#disk_to_dev\">disk_to_dev</a>(<a class=\"id\" href=\"#disk\">disk</a>)-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#put_disk\">put_disk</a>);", 
"", 
"static void <a class=\"id\" href=\"#set_disk_ro_uevent\">set_disk_ro_uevent</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#gd\">gd</a>, int <a class=\"id\" href=\"#ro\">ro</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#event\">event</a>[] = \"DISK_RO=1\";", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#envp\">envp</a>[] = { <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#NULL\">NULL</a> };", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ro\">ro</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>[8] = '0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_uevent_env\">kobject_uevent_env</a>(&amp;<a class=\"id\" href=\"#disk_to_dev\">disk_to_dev</a>(<a class=\"id\" href=\"#gd\">gd</a>)-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#KOBJ_CHANGE\">KOBJ_CHANGE</a>, <a class=\"id\" href=\"#envp\">envp</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#set_device_ro\">set_device_ro</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_part\">bd_part</a>-><a class=\"id\" href=\"#policy\">policy</a> = <a class=\"id\" href=\"#flag\">flag</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_device_ro\">set_device_ro</a>);", 
"", 
"void <a class=\"id\" href=\"#set_disk_ro\">set_disk_ro</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#disk_part_iter\">disk_part_iter</a> <a class=\"id\" href=\"#piter\">piter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part0\">part0</a>.<a class=\"id\" href=\"#policy\">policy</a> != <a class=\"id\" href=\"#flag\">flag</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_disk_ro_uevent\">set_disk_ro_uevent</a>(<a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#flag\">flag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#part0\">part0</a>.<a class=\"id\" href=\"#policy\">policy</a> = <a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk_part_iter_init\">disk_part_iter_init</a>(&amp;<a class=\"id\" href=\"#piter\">piter</a>, <a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#DISK_PITER_INCL_EMPTY\">DISK_PITER_INCL_EMPTY</a>);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#disk_part_iter_next\">disk_part_iter_next</a>(&amp;<a class=\"id\" href=\"#piter\">piter</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#policy\">policy</a> = <a class=\"id\" href=\"#flag\">flag</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk_part_iter_exit\">disk_part_iter_exit</a>(&amp;<a class=\"id\" href=\"#piter\">piter</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_disk_ro\">set_disk_ro</a>);", 
"", 
"int <a class=\"id\" href=\"#bdev_read_only\">bdev_read_only</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_part\">bd_part</a>-><a class=\"id\" href=\"#policy\">policy</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bdev_read_only\">bdev_read_only</a>);", 
"", 
"int <a class=\"id\" href=\"#invalidate_partition\">invalidate_partition</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>, int <a class=\"id\" href=\"#partno\">partno</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#bdget_disk\">bdget_disk</a>(<a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#partno\">partno</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsync_bdev\">fsync_bdev</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#__invalidate_device\">__invalidate_device</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdput\">bdput</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#invalidate_partition\">invalidate_partition</a>);", 
];
xr_frag_insert('l/9c/aa2980c5ff951d94adeeb046d4ffaa13c4ca10.xr', __xr_tmp);
