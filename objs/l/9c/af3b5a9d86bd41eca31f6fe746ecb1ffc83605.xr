var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#machine_shutdown\">machine_shutdown</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_power_off\">pm_power_off</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* a fallback in case there is no PM info available */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tboot_shutdown\">tboot_shutdown</a>(<a class=\"id\" href=\"#TB_SHUTDOWN_HALT\">TB_SHUTDOWN_HALT</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#machine_ops\">machine_ops</a> <a class=\"id\" href=\"#machine_ops\">machine_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#power_off\">power_off</a> = <a class=\"id\" href=\"#native_machine_power_off\">native_machine_power_off</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#shutdown\">shutdown</a> = <a class=\"id\" href=\"#native_machine_shutdown\">native_machine_shutdown</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#emergency_restart\">emergency_restart</a> = <a class=\"id\" href=\"#native_machine_emergency_restart\">native_machine_emergency_restart</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#restart\">restart</a> = <a class=\"id\" href=\"#native_machine_restart\">native_machine_restart</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#halt\">halt</a> = <a class=\"id\" href=\"#native_machine_halt\">native_machine_halt</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEXEC\">CONFIG_KEXEC</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#crash_shutdown\">crash_shutdown</a> = <a class=\"id\" href=\"#native_machine_crash_shutdown\">native_machine_crash_shutdown</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"void <a class=\"id\" href=\"#machine_power_off\">machine_power_off</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#machine_ops\">machine_ops</a>.<a class=\"id\" href=\"#power_off\">power_off</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#machine_shutdown\">machine_shutdown</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#machine_ops\">machine_ops</a>.<a class=\"id\" href=\"#shutdown\">shutdown</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#machine_emergency_restart\">machine_emergency_restart</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__machine_emergency_restart\">__machine_emergency_restart</a>(1);", 
"}", 
"", 
"void <a class=\"id\" href=\"#machine_restart\">machine_restart</a>(char *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#machine_ops\">machine_ops</a>.<a class=\"id\" href=\"#restart\">restart</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#machine_halt\">machine_halt</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#machine_ops\">machine_ops</a>.<a class=\"id\" href=\"#halt\">halt</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEXEC\">CONFIG_KEXEC</a>", 
"void <a class=\"id\" href=\"#machine_crash_shutdown\">machine_crash_shutdown</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#machine_ops\">machine_ops</a>.<a class=\"id\" href=\"#crash_shutdown\">crash_shutdown</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>)", 
"", 
"<span class=\"comment\">/* This keeps a track of which one is crashing cpu. */</span>", 
"static int <a class=\"id\" href=\"#crashing_cpu\">crashing_cpu</a>;", 
"static <a class=\"id\" href=\"#nmi_shootdown_cb\">nmi_shootdown_cb</a> <a class=\"id\" href=\"#shootdown_callback\">shootdown_callback</a>;", 
"", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#waiting_for_crash_ipi\">waiting_for_crash_ipi</a>;", 
"", 
"static int <a class=\"id\" href=\"#crash_nmi_callback\">crash_nmi_callback</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> != <a class=\"id\" href=\"#DIE_NMI_IPI\">DIE_NMI_IPI</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't do anything if this handler is invoked on crashing cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise, system will completely hang. Crashing cpu can get</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an NMI if system was initially booted with nmi_watchdog parameter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#crashing_cpu\">crashing_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shootdown_callback\">shootdown_callback</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, (struct <a class=\"id\" href=\"#die_args\">die_args</a> *)<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#waiting_for_crash_ipi\">waiting_for_crash_ipi</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Assume hlt works */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#halt\">halt</a>();", 
"<span class=\"ts\"/>for (;;)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#smp_send_nmi_allbutself\">smp_send_nmi_allbutself</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_allbutself\">send_IPI_allbutself</a>(<a class=\"id\" href=\"#NMI_VECTOR\">NMI_VECTOR</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#crash_nmi_nb\">crash_nmi_nb</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#crash_nmi_callback\">crash_nmi_callback</a>,", 
"};", 
"", 
"<span class=\"comment\">/* Halt all other CPUs, calling the specified function on each of them</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function can be used to halt all other CPUs on crash</span>", 
"<span class=\"comment\"> * or emergency reboot time. The function passed as parameter</span>", 
"<span class=\"comment\"> * will be called inside a NMI handler on all CPUs.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#nmi_shootdown_cpus\">nmi_shootdown_cpus</a>(<a class=\"id\" href=\"#nmi_shootdown_cb\">nmi_shootdown_cb</a> <a class=\"id\" href=\"#callback\">callback</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#msecs\">msecs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make a note of crashing cpu. Will be used in NMI callback.*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crashing_cpu\">crashing_cpu</a> = <a class=\"id\" href=\"#safe_smp_processor_id\">safe_smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shootdown_callback\">shootdown_callback</a> = <a class=\"id\" href=\"#callback\">callback</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#waiting_for_crash_ipi\">waiting_for_crash_ipi</a>, <a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() - 1);", 
"<span class=\"ts\"/><span class=\"comment\">/* Would it be better to replace the trap vector here? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#register_die_notifier\">register_die_notifier</a>(&amp;<a class=\"id\" href=\"#crash_nmi_nb\">crash_nmi_nb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* return what? */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Ensure the new callback function is set before sending</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * out the NMI</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wmb\">wmb</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_send_nmi_allbutself\">smp_send_nmi_allbutself</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msecs\">msecs</a> = 1000; <span class=\"comment\">/* Wait at most a second for the other cpus to stop */</span>", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#waiting_for_crash_ipi\">waiting_for_crash_ipi</a>) &gt; 0) && <a class=\"id\" href=\"#msecs\">msecs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdelay\">mdelay</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msecs\">msecs</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Leave the nmi callback set */</span>", 
"}", 
"#else <span class=\"comment\">/* !CONFIG_SMP */</span>", 
"void <a class=\"id\" href=\"#nmi_shootdown_cpus\">nmi_shootdown_cpus</a>(<a class=\"id\" href=\"#nmi_shootdown_cb\">nmi_shootdown_cb</a> <a class=\"id\" href=\"#callback\">callback</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* No other CPUs to shoot down */</span>", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/9c/af3b5a9d86bd41eca31f6fe746ecb1ffc83605.xr', __xr_tmp);
