var __xr_tmp = [
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CPU_SUP_AMD\">CONFIG_CPU_SUP_AMD</a>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_RAW_SPINLOCK\">DEFINE_RAW_SPINLOCK</a>(<a class=\"id\" href=\"#amd_nb_lock\">amd_nb_lock</a>);", 
"", 
"static <a class=\"id\" href=\"#__initconst\">__initconst</a> const <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#amd_hw_cache_event_ids\">amd_hw_cache_event_ids</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_MAX\">PERF_COUNT_HW_CACHE_MAX</a>]", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_OP_MAX\">PERF_COUNT_HW_CACHE_OP_MAX</a>]", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_RESULT_MAX\">PERF_COUNT_HW_CACHE_RESULT_MAX</a>] =", 
"{", 
" [ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#L1D\">L1D</a>) ] = {", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_READ\">OP_READ</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = 0x0040, <span class=\"comment\">/* Data Cache Accesses        */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = 0x0041, <span class=\"comment\">/* Data Cache Misses          */</span>", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_WRITE\">OP_WRITE</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = 0x0142, <span class=\"comment\">/* Data Cache Refills :system */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = 0,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_PREFETCH\">OP_PREFETCH</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = 0x0267, <span class=\"comment\">/* Data Prefetcher :attempts  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = 0x0167, <span class=\"comment\">/* Data Prefetcher :cancelled */</span>", 
"<span class=\"ts\"/>},", 
" },", 
" [ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#L1I\">L1I</a> ) ] = {", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_READ\">OP_READ</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = 0x0080, <span class=\"comment\">/* Instruction cache fetches  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = 0x0081, <span class=\"comment\">/* Instruction cache misses   */</span>", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_WRITE\">OP_WRITE</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = -1,", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = -1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_PREFETCH\">OP_PREFETCH</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = 0x014B, <span class=\"comment\">/* Prefetch Instructions :Load */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = 0,", 
"<span class=\"ts\"/>},", 
" },", 
" [ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#LL\">LL</a>  ) ] = {", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_READ\">OP_READ</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = 0x037D, <span class=\"comment\">/* Requests to L2 Cache :IC+DC */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = 0x037E, <span class=\"comment\">/* L2 Cache Misses : IC+DC     */</span>", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_WRITE\">OP_WRITE</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = 0x017F, <span class=\"comment\">/* L2 Fill/Writeback           */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = 0,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_PREFETCH\">OP_PREFETCH</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = 0,", 
"<span class=\"ts\"/>},", 
" },", 
" [ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#DTLB\">DTLB</a>) ] = {", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_READ\">OP_READ</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = 0x0040, <span class=\"comment\">/* Data Cache Accesses        */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = 0x0046, <span class=\"comment\">/* L1 DTLB and L2 DLTB Miss   */</span>", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_WRITE\">OP_WRITE</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = 0,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_PREFETCH\">OP_PREFETCH</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = 0,", 
"<span class=\"ts\"/>},", 
" },", 
" [ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#ITLB\">ITLB</a>) ] = {", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_READ\">OP_READ</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = 0x0080, <span class=\"comment\">/* Instruction fecthes        */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = 0x0085, <span class=\"comment\">/* Instr. fetch ITLB misses   */</span>", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_WRITE\">OP_WRITE</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = -1,", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = -1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_PREFETCH\">OP_PREFETCH</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = -1,", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = -1,", 
"<span class=\"ts\"/>},", 
" },", 
" [ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#BPU\">BPU</a> ) ] = {", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_READ\">OP_READ</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = 0x00c2, <span class=\"comment\">/* Retired Branch Instr.      */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = 0x00c3, <span class=\"comment\">/* Retired Mispredicted BI    */</span>", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_WRITE\">OP_WRITE</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = -1,", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = -1,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#OP_PREFETCH\">OP_PREFETCH</a>) ] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_ACCESS\">RESULT_ACCESS</a>) ] = -1,", 
"<span class=\"ts\"/><span class=\"ts\"/>[ <a class=\"id\" href=\"#C\">C</a>(<a class=\"id\" href=\"#RESULT_MISS\">RESULT_MISS</a>)   ] = -1,", 
"<span class=\"ts\"/>},", 
" },", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * AMD Performance Monitor K7 and later.</span>", 
"<span class=\"comment\"> */</span>", 
"static const <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#amd_perfmon_event_map\">amd_perfmon_event_map</a>[] =", 
"{", 
"  [<a class=\"id\" href=\"#PERF_COUNT_HW_CPU_CYCLES\">PERF_COUNT_HW_CPU_CYCLES</a>]<span class=\"ts\"/><span class=\"ts\"/>= 0x0076,", 
"  [<a class=\"id\" href=\"#PERF_COUNT_HW_INSTRUCTIONS\">PERF_COUNT_HW_INSTRUCTIONS</a>]<span class=\"ts\"/><span class=\"ts\"/>= 0x00c0,", 
"  [<a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_REFERENCES\">PERF_COUNT_HW_CACHE_REFERENCES</a>]<span class=\"ts\"/>= 0x0080,", 
"  [<a class=\"id\" href=\"#PERF_COUNT_HW_CACHE_MISSES\">PERF_COUNT_HW_CACHE_MISSES</a>]<span class=\"ts\"/><span class=\"ts\"/>= 0x0081,", 
"  [<a class=\"id\" href=\"#PERF_COUNT_HW_BRANCH_INSTRUCTIONS\">PERF_COUNT_HW_BRANCH_INSTRUCTIONS</a>]<span class=\"ts\"/>= 0x00c2,", 
"  [<a class=\"id\" href=\"#PERF_COUNT_HW_BRANCH_MISSES\">PERF_COUNT_HW_BRANCH_MISSES</a>]<span class=\"ts\"/><span class=\"ts\"/>= 0x00c3,", 
"};", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#amd_pmu_event_map\">amd_pmu_event_map</a>(int <a class=\"id\" href=\"#hw_event\">hw_event</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#amd_perfmon_event_map\">amd_perfmon_event_map</a>[<a class=\"id\" href=\"#hw_event\">hw_event</a>];", 
"}", 
"", 
"static int <a class=\"id\" href=\"#amd_pmu_hw_config\">amd_pmu_hw_config</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#x86_pmu_hw_config\">x86_pmu_hw_config</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#PERF_TYPE_RAW\">PERF_TYPE_RAW</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#config\">config</a> |= <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#config\">config</a> &amp; <a class=\"id\" href=\"#AMD64_RAW_EVENT_MASK\">AMD64_RAW_EVENT_MASK</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * AMD64 events are detected based on their event codes.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#amd_is_nb_event\">amd_is_nb_event</a>(struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#config\">config</a> &amp; 0xe0) == 0xe0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#amd_has_nb\">amd_has_nb</a>(struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_nb\">amd_nb</a> *<a class=\"id\" href=\"#nb\">nb</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#amd_nb\">amd_nb</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nb\">nb</a> && <a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#nb_id\">nb_id</a> != -1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#amd_put_event_constraints\">amd_put_event_constraints</a>(struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_nb\">amd_nb</a> *<a class=\"id\" href=\"#nb\">nb</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#amd_nb\">amd_nb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only care about NB events</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#amd_has_nb\">amd_has_nb</a>(<a class=\"id\" href=\"#cpuc\">cpuc</a>) && <a class=\"id\" href=\"#amd_is_nb_event\">amd_is_nb_event</a>(<a class=\"id\" href=\"#hwc\">hwc</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to scan whole list because event may not have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * been assigned during scheduling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no race condition possible because event can only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be removed on one CPU at a time AND PMU is disabled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when we come here</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#event\">event</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(<a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#owners\">owners</a>+<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
" <span class=\"comment\">/*</span>", 
"<span class=\"comment\">  * AMD64 NorthBridge events need special treatment because</span>", 
"<span class=\"comment\">  * counter access needs to be synchronized across all cores</span>", 
"<span class=\"comment\">  * of a package. Refer to BKDG section 3.12</span>", 
"<span class=\"comment\">  *</span>", 
"<span class=\"comment\">  * NB events are events measuring L3 cache, Hypertransport</span>", 
"<span class=\"comment\">  * traffic. They are identified by an event code &gt;= 0xe00.</span>", 
"<span class=\"comment\">  * They measure events on the NorthBride which is shared</span>", 
"<span class=\"comment\">  * by all cores on a package. NB events are counted on a</span>", 
"<span class=\"comment\">  * shared set of counters. When a NB event is programmed</span>", 
"<span class=\"comment\">  * in a counter, the data actually comes from a shared</span>", 
"<span class=\"comment\">  * counter. Thus, access to those counters needs to be</span>", 
"<span class=\"comment\">  * synchronized.</span>", 
"<span class=\"comment\">  *</span>", 
"<span class=\"comment\">  * We implement the synchronization such that no two cores</span>", 
"<span class=\"comment\">  * can be measuring NB events using the same counters. Thus,</span>", 
"<span class=\"comment\">  * we maintain a per-NB allocation table. The available slot</span>", 
"<span class=\"comment\">  * is propagated using the event_constraint structure.</span>", 
"<span class=\"comment\">  *</span>", 
"<span class=\"comment\">  * We provide only one choice for each NB event based on</span>", 
"<span class=\"comment\">  * the fact that only NB events have restrictions. Consequently,</span>", 
"<span class=\"comment\">  * if a counter is available, there is a guarantee the NB event</span>", 
"<span class=\"comment\">  * will be assigned to it. If no slot is available, an empty</span>", 
"<span class=\"comment\">  * constraint is returned and scheduling will eventually fail</span>", 
"<span class=\"comment\">  * for this event.</span>", 
"<span class=\"comment\">  *</span>", 
"<span class=\"comment\">  * Note that all cores attached the same NB compete for the same</span>", 
"<span class=\"comment\">  * counters to host NB events, this is why we use atomic ops. Some</span>", 
"<span class=\"comment\">  * multi-chip CPUs may have more than one NB.</span>", 
"<span class=\"comment\">  *</span>", 
"<span class=\"comment\">  * Given that resources are allocated (cmpxchg), they must be</span>", 
"<span class=\"comment\">  * eventually freed for others to use. This is accomplished by</span>", 
"<span class=\"comment\">  * calling amd_put_event_constraints().</span>", 
"<span class=\"comment\">  *</span>", 
"<span class=\"comment\">  * Non NB events are not impacted by this restriction.</span>", 
"<span class=\"comment\">  */</span>", 
"static struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> *", 
"<a class=\"id\" href=\"#amd_get_event_constraints\">amd_get_event_constraints</a>(struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a>, struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_nb\">amd_nb</a> *<a class=\"id\" href=\"#nb\">nb</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#amd_nb\">amd_nb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#k\">k</a> = -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if not NB event or no NB, then no constraints</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#amd_has_nb\">amd_has_nb</a>(<a class=\"id\" href=\"#cpuc\">cpuc</a>) && <a class=\"id\" href=\"#amd_is_nb_event\">amd_is_nb_event</a>(<a class=\"id\" href=\"#hwc\">hwc</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#unconstrained\">unconstrained</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * detect if already present, if so reuse</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cannot merge with actual allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because of possible holes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * event can already be present yet not assigned (in hwc-&gt;idx)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because of successive calls to x86_schedule_events() from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hw_perf_group_sched_in() without hw_perf_enable()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max\">max</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * keep track of first free slot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a> == -1 && !<a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* already present, reuse */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not present, so grab a new slot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * starting either at:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a> != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* previous assignment */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#k\">k</a> != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* start from free slot found */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * event not found, no slot found in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * first pass, try again from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * beginning</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>(<a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#owners\">owners</a>+<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#old\">old</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#max\">max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#j\">j</a>);", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#old\">old</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#event_constraints\">event_constraints</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#emptyconstraint\">emptyconstraint</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#amd_nb\">amd_nb</a> *<a class=\"id\" href=\"#amd_alloc_nb\">amd_alloc_nb</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#nb_id\">nb_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_nb\">amd_nb</a> *<a class=\"id\" href=\"#nb\">nb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nb\">nb</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#amd_nb\">amd_nb</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nb\">nb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#nb\">nb</a>, 0, sizeof(*<a class=\"id\" href=\"#nb\">nb</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#nb_id\">nb_id</a> = <a class=\"id\" href=\"#nb_id\">nb_id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * initialize all possible NB constraints</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#num_counters\">num_counters</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#event_constraints\">event_constraints</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#idxmsk\">idxmsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#event_constraints\">event_constraints</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#weight\">weight</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nb\">nb</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#amd_pmu_cpu_prepare\">amd_pmu_cpu_prepare</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#amd_nb\">amd_nb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_max_cores\">x86_max_cores</a> &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#amd_nb\">amd_nb</a> = <a class=\"id\" href=\"#amd_alloc_nb\">amd_alloc_nb</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, -1);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#amd_nb\">amd_nb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_BAD\">NOTIFY_BAD</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#amd_pmu_cpu_starting\">amd_pmu_cpu_starting</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_nb\">amd_nb</a> *<a class=\"id\" href=\"#nb\">nb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nb_id\">nb_id</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_max_cores\">x86_max_cores</a> &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nb_id\">nb_id</a> = <a class=\"id\" href=\"#amd_get_nb_id\">amd_get_nb_id</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#nb_id\">nb_id</a> == <a class=\"id\" href=\"#BAD_APICID\">BAD_APICID</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#amd_nb_lock\">amd_nb_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nb\">nb</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>, <a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#amd_nb\">amd_nb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#nb\">nb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#nb_id\">nb_id</a> == <a class=\"id\" href=\"#nb_id\">nb_id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#amd_nb\">amd_nb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#amd_nb\">amd_nb</a> = <a class=\"id\" href=\"#nb\">nb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#amd_nb\">amd_nb</a>-><a class=\"id\" href=\"#nb_id\">nb_id</a> = <a class=\"id\" href=\"#nb_id\">nb_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#amd_nb\">amd_nb</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#amd_nb_lock\">amd_nb_lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#amd_pmu_cpu_dead\">amd_pmu_cpu_dead</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuhw\">cpuhw</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_max_cores\">x86_max_cores</a> &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuhw\">cpuhw</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#amd_nb_lock\">amd_nb_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuhw\">cpuhw</a>-><a class=\"id\" href=\"#amd_nb\">amd_nb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_nb\">amd_nb</a> *<a class=\"id\" href=\"#nb\">nb</a> = <a class=\"id\" href=\"#cpuhw\">cpuhw</a>-><a class=\"id\" href=\"#amd_nb\">amd_nb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#nb_id\">nb_id</a> == -1 || --<a class=\"id\" href=\"#nb\">nb</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#nb\">nb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuhw\">cpuhw</a>-><a class=\"id\" href=\"#amd_nb\">amd_nb</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#amd_nb_lock\">amd_nb_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#__initconst\">__initconst</a> const struct <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a> <a class=\"id\" href=\"#amd_pmu\">amd_pmu</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= \"AMD\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#handle_irq\">handle_irq</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#x86_pmu_handle_irq\">x86_pmu_handle_irq</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#disable_all\">disable_all</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#x86_pmu_disable_all\">x86_pmu_disable_all</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enable_all\">enable_all</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#x86_pmu_enable_all\">x86_pmu_enable_all</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enable\">enable</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#x86_pmu_enable_event\">x86_pmu_enable_event</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#disable\">disable</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#x86_pmu_disable_event\">x86_pmu_disable_event</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#hw_config\">hw_config</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#amd_pmu_hw_config\">amd_pmu_hw_config</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#schedule_events\">schedule_events</a><span class=\"ts\"/>= <a class=\"id\" href=\"#x86_schedule_events\">x86_schedule_events</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#eventsel\">eventsel</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#MSR_K7_EVNTSEL0\">MSR_K7_EVNTSEL0</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#perfctr\">perfctr</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#MSR_K7_PERFCTR0\">MSR_K7_PERFCTR0</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#event_map\">event_map</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#amd_pmu_event_map\">amd_pmu_event_map</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#max_events\">max_events</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#amd_perfmon_event_map\">amd_perfmon_event_map</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#num_counters\">num_counters</a><span class=\"ts\"/><span class=\"ts\"/>= 4,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cntval_bits\">cntval_bits</a><span class=\"ts\"/><span class=\"ts\"/>= 48,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cntval_mask\">cntval_mask</a><span class=\"ts\"/><span class=\"ts\"/>= (1ULL << 48) - 1,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#apic\">apic</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><span class=\"comment\">/* use highest bit to detect overflow */</span>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#max_period\">max_period</a><span class=\"ts\"/><span class=\"ts\"/>= (1ULL << 47) - 1,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_event_constraints\">get_event_constraints</a><span class=\"ts\"/>= <a class=\"id\" href=\"#amd_get_event_constraints\">amd_get_event_constraints</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#put_event_constraints\">put_event_constraints</a><span class=\"ts\"/>= <a class=\"id\" href=\"#amd_put_event_constraints\">amd_put_event_constraints</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cpu_prepare\">cpu_prepare</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#amd_pmu_cpu_prepare\">amd_pmu_cpu_prepare</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cpu_starting\">cpu_starting</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#amd_pmu_cpu_starting\">amd_pmu_cpu_starting</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cpu_dead\">cpu_dead</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#amd_pmu_cpu_dead\">amd_pmu_cpu_dead</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#amd_pmu_init\">amd_pmu_init</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Performance-monitoring supported from K7 and later: */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> &lt; 6)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a> = <a class=\"id\" href=\"#amd_pmu\">amd_pmu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Events are common for all AMDs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#hw_cache_event_ids\">hw_cache_event_ids</a>, <a class=\"id\" href=\"#amd_hw_cache_event_ids\">amd_hw_cache_event_ids</a>,", 
"<span class=\"ts\"/>       sizeof(<a class=\"id\" href=\"#hw_cache_event_ids\">hw_cache_event_ids</a>));", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#else <span class=\"comment\">/* CONFIG_CPU_SUP_AMD */</span>", 
"", 
"static int <a class=\"id\" href=\"#amd_pmu_init\">amd_pmu_init</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/9d/1f8a8905b5b748bf468e546b8b82f674700605.xr', __xr_tmp);
