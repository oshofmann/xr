var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#ext2_get_block\">ext2_get_block</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0 && (<a class=\"id\" href=\"#rw\">rw</a> &amp; <a class=\"id\" href=\"#WRITE\">WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_write_failed\">ext2_write_failed</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#iov_length\">iov_length</a>(<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ext2_writepages\">ext2_writepages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mpage_writepages\">mpage_writepages</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#ext2_get_block\">ext2_get_block</a>);", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#ext2_aops\">ext2_aops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpage\">readpage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_readpage\">ext2_readpage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpages\">readpages</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_readpages\">ext2_readpages</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#writepage\">writepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_writepage\">ext2_writepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sync_page\">sync_page</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#block_sync_page\">block_sync_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_begin\">write_begin</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_write_begin\">ext2_write_begin</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_end\">write_end</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_write_end\">ext2_write_end</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bmap\">bmap</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_bmap\">ext2_bmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#direct_IO\">direct_IO</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_direct_IO\">ext2_direct_IO</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#writepages\">writepages</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_writepages\">ext2_writepages</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#migratepage\">migratepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#buffer_migrate_page\">buffer_migrate_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#is_partially_uptodate\">is_partially_uptodate</a><span class=\"ts\"/>= <a class=\"id\" href=\"#block_is_partially_uptodate\">block_is_partially_uptodate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#error_remove_page\">error_remove_page</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_error_remove_page\">generic_error_remove_page</a>,", 
"};", 
"", 
"const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#ext2_aops_xip\">ext2_aops_xip</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bmap\">bmap</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_bmap\">ext2_bmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_xip_mem\">get_xip_mem</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_get_xip_mem\">ext2_get_xip_mem</a>,", 
"};", 
"", 
"const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#ext2_nobh_aops\">ext2_nobh_aops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpage\">readpage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_readpage\">ext2_readpage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpages\">readpages</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_readpages\">ext2_readpages</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#writepage\">writepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_nobh_writepage\">ext2_nobh_writepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sync_page\">sync_page</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#block_sync_page\">block_sync_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_begin\">write_begin</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_nobh_write_begin\">ext2_nobh_write_begin</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_end\">write_end</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#nobh_write_end\">nobh_write_end</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bmap\">bmap</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_bmap\">ext2_bmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#direct_IO\">direct_IO</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_direct_IO\">ext2_direct_IO</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#writepages\">writepages</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ext2_writepages\">ext2_writepages</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#migratepage\">migratepage</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#buffer_migrate_page\">buffer_migrate_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#error_remove_page\">error_remove_page</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_error_remove_page\">generic_error_remove_page</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Probably it should be a library function... search for first non-zero word</span>", 
"<span class=\"comment\"> * or memcmp with zero_page, whatever is better for particular architecture.</span>", 
"<span class=\"comment\"> * Linus?</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#all_zeroes\">all_zeroes</a>(<a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext2_find_shared - find the indirect blocks for partial truncation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode:<span class=\"ts\"/>  inode in question</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@depth:<span class=\"ts\"/>  depth of the affected branch</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@offsets: offsets of pointers in that branch (see ext2_block_to_path)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chain:<span class=\"ts\"/>  place to store the pointers to partial indirect blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@top:<span class=\"ts\"/>  place to the (detached) top of branch</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is a helper function used by ext2_truncate().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>When we do truncate() we may have to clean the ends of several indirect</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>blocks but leave the blocks themselves alive. Block is partially</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>truncated if some data below the new i_size is refered from it (and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it is on the path to the first completely truncated data block, indeed).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We have to free the top of that path along with everything to the right</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of the path. Since no allocation past the truncation point is possible</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>until ext2_truncate() finishes, we may safely do the latter, but top</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of branch may require special attention - pageout below the truncation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>point might try to populate it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We atomically detach the top of branch from the tree, store the block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>number of its root in *@top, pointers to buffer_heads of partially</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>truncated blocks - in @chain[].bh and pointers to their last elements</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that should not be removed - in @chain[].p. Return value is the pointer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to last filled element of @chain.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The work left to caller to do the actual freeing of subtrees:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>a) free the subtree starting from *@top</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>b) free the subtrees whose roots are stored in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(@chain[i].p+1 .. end of @chain[i].bh-&gt;b_data)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>c) free the subtrees growing from the inode past the @chain[0].p</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(no partially truncated stuff there).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#ext2_find_shared\">ext2_find_shared</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#depth\">depth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offsets\">offsets</a>[4],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> <a class=\"id\" href=\"#chain\">chain</a>[4],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#top\">top</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#partial\">partial</a>, *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#top\">top</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#depth\">depth</a>; <a class=\"id\" href=\"#k\">k</a> &gt; 1 && !<a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#k\">k</a>-1]; <a class=\"id\" href=\"#k\">k</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#ext2_get_branch\">ext2_get_branch</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#chain\">chain</a>, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#partial\">partial</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#chain\">chain</a> + <a class=\"id\" href=\"#k\">k</a>-1;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the branch acquired continuation since we've looked at it -</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fine, it should all survive and (new) top doesn't belong to us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_meta_lock\">i_meta_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#key\">key</a> && *<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_meta_lock\">i_meta_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_top\">no_top</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a>=<a class=\"id\" href=\"#partial\">partial</a>; <a class=\"id\" href=\"#p\">p</a>&gt;<a class=\"id\" href=\"#chain\">chain</a> && <a class=\"id\" href=\"#all_zeroes\">all_zeroes</a>((<a class=\"id\" href=\"#__le32\">__le32</a>*)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>,<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p\">p</a>); <a class=\"id\" href=\"#p\">p</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * OK, we've found the last block that must survive. The rest of our</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * branch should be detached before unlocking. However, if that rest</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of branch is all ours and does not grow immediately from the inode</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it's easier to cheat and just decrement partial-&gt;p.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#chain\">chain</a> + <a class=\"id\" href=\"#k\">k</a> - 1 && <a class=\"id\" href=\"#p\">p</a> &gt; <a class=\"id\" href=\"#chain\">chain</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p\">p</a>--;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#top\">top</a> = *<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p\">p</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_meta_lock\">i_meta_lock</a>);", 
"", 
"<span class=\"ts\"/>while(<a class=\"id\" href=\"#partial\">partial</a> &gt; <a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>--;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#no_top\">no_top</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#partial\">partial</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext2_free_data - free a list of data blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode:<span class=\"ts\"/>inode we are dealing with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p:<span class=\"ts\"/>array of block numbers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@q:<span class=\"ts\"/>points immediately past the end of array</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We are freeing all blocks refered from that array (numbers are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>stored as little-endian 32-bit) and updating @inode-&gt;i_blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>appropriately.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ext2_free_data\">ext2_free_data</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#block_to_free\">block_to_free</a> = 0, <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/>for ( ; <a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#q\">q</a> ; <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* accumulate blocks to free if they're contiguous */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_this\">free_this</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#block_to_free\">block_to_free</a> == <a class=\"id\" href=\"#nr\">nr</a> - <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_free_blocks\">ext2_free_blocks</a> (<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#block_to_free\">block_to_free</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_this\">free_this</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_to_free\">block_to_free</a> = <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_free_blocks\">ext2_free_blocks</a> (<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#block_to_free\">block_to_free</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext2_free_branches - free an array of branches</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode:<span class=\"ts\"/>inode we are dealing with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p:<span class=\"ts\"/>array of block numbers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@q:<span class=\"ts\"/>pointer immediately past the end of array</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@depth:<span class=\"ts\"/>depth of the branches to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We are freeing all blocks refered from these branches (numbers are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>stored as little-endian 32-bit) and updating @inode-&gt;i_blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>appropriately.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext2_free_branches\">ext2_free_branches</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#q\">q</a>, int <a class=\"id\" href=\"#depth\">depth</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#depth\">depth</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#addr_per_block\">addr_per_block</a> = <a class=\"id\" href=\"#EXT2_ADDR_PER_BLOCK\">EXT2_ADDR_PER_BLOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for ( ; <a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#q\">q</a> ; <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr\">nr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_bread\">sb_bread</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * A read failure? Report error and clear slot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * (should be rare).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span> ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, \"ext2_free_branches\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Read failure, inode=%ld, block=%ld\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>, <a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_free_branches\">ext2_free_branches</a>(<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#__le32\">__le32</a>*)<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#__le32\">__le32</a>*)<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a> + <a class=\"id\" href=\"#addr_per_block\">addr_per_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#depth\">depth</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bforget\">bforget</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_free_blocks\">ext2_free_blocks</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#nr\">nr</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_free_data\">ext2_free_data</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__ext2_truncate_blocks\">__ext2_truncate_blocks</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#i_data\">i_data</a> = <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_data\">i_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_inode_info\">ext2_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#addr_per_block\">addr_per_block</a> = <a class=\"id\" href=\"#EXT2_ADDR_PER_BLOCK\">EXT2_ADDR_PER_BLOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offsets\">offsets</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> <a class=\"id\" href=\"#chain\">chain</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#partial\">partial</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> <a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#iblock\">iblock</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocksize\">blocksize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iblock\">iblock</a> = (<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#blocksize\">blocksize</a>-1) >> <a class=\"id\" href=\"#EXT2_BLOCK_SIZE_BITS\">EXT2_BLOCK_SIZE_BITS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#ext2_block_to_path\">ext2_block_to_path</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iblock\">iblock</a>, <a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * From here we block out all ext2_get_block() callers who want to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * modify the block allocation tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#truncate_mutex\">truncate_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_free_data\">ext2_free_data</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#i_data\">i_data</a>+<a class=\"id\" href=\"#offsets\">offsets</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_data\">i_data</a> + <a class=\"id\" href=\"#EXT2_NDIR_BLOCKS\">EXT2_NDIR_BLOCKS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#do_indirects\">do_indirects</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#ext2_find_shared\">ext2_find_shared</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#chain\">chain</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Kill the top of shared branch (already detached) */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#partial\">partial</a> == <a class=\"id\" href=\"#chain\">chain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty_inode\">mark_buffer_dirty_inode</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_free_branches\">ext2_free_branches</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>+1, (<a class=\"id\" href=\"#chain\">chain</a>+<a class=\"id\" href=\"#n\">n</a>-1) - <a class=\"id\" href=\"#partial\">partial</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the ends of indirect blocks on the shared branch */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#partial\">partial</a> &gt; <a class=\"id\" href=\"#chain\">chain</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_free_branches\">ext2_free_branches</a>(<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#p\">p</a> + 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#__le32\">__le32</a>*)<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>+<a class=\"id\" href=\"#addr_per_block\">addr_per_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#chain\">chain</a>+<a class=\"id\" href=\"#n\">n</a>-1) - <a class=\"id\" href=\"#partial\">partial</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty_inode\">mark_buffer_dirty_inode</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a> (<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>--;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#do_indirects\">do_indirects</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Kill the remaining (whole) subtrees */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#offsets\">offsets</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT2_IND_BLOCK\">EXT2_IND_BLOCK</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT2_IND_BLOCK\">EXT2_IND_BLOCK</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_free_branches\">ext2_free_branches</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>+1, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#EXT2_IND_BLOCK\">EXT2_IND_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT2_DIND_BLOCK\">EXT2_DIND_BLOCK</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT2_DIND_BLOCK\">EXT2_DIND_BLOCK</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_free_branches\">ext2_free_branches</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>+1, 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#EXT2_DIND_BLOCK\">EXT2_DIND_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT2_TIND_BLOCK\">EXT2_TIND_BLOCK</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_data\">i_data</a>[<a class=\"id\" href=\"#EXT2_TIND_BLOCK\">EXT2_TIND_BLOCK</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_free_branches\">ext2_free_branches</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>, &amp;<a class=\"id\" href=\"#nr\">nr</a>+1, 3);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#EXT2_TIND_BLOCK\">EXT2_TIND_BLOCK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_discard_reservation\">ext2_discard_reservation</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#truncate_mutex\">truncate_mutex</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ext2_truncate_blocks\">ext2_truncate_blocks</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
];
xr_frag_insert('l/9d/4c23a42037919758d4f881164d13cef1b5a9b7.xr', __xr_tmp);
