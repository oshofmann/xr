var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>     :", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"memory\", \"cc\");", 
"}", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TICKET_SHIFT\">TICKET_SHIFT</a> 16", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void <a class=\"id\" href=\"#__ticket_spin_lock\">__ticket_spin_lock</a>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#inc\">inc</a> = 0x00010000;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"xaddl %0, %1\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"movzwl %w0, %2\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"shrl $16, %0\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"1:\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"cmpl %0, %2\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"je 2f\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"rep ; nop\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"movzwl %1, %2\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     <span class=\"comment\">/* don't need lfence here, because loads are in-order */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"jmp 1b\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"2:\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+r\" (<a class=\"id\" href=\"#inc\">inc</a>), \"+m\" (<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#slock\">slock</a>), \"=&r\" (<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     :", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"memory\", \"cc\");", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> int <a class=\"id\" href=\"#__ticket_spin_trylock\">__ticket_spin_trylock</a>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"movl %2,%0\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"movl %0,%1\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"roll $16, %0\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"cmpl %0,%1\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"leal 0x00010000(%\" <a class=\"id\" href=\"#REG_PTR_MODE\">REG_PTR_MODE</a> \"0), %1\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"jne 1f\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"cmpxchgl %1,%2\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"1:\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"sete %b1\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"movzbl %b1,%0\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=&a\" (<a class=\"id\" href=\"#tmp\">tmp</a>), \"=&q\" (<a class=\"id\" href=\"#new\">new</a>), \"+m\" (<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#slock\">slock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     :", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"memory\", \"cc\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void <a class=\"id\" href=\"#__ticket_spin_unlock\">__ticket_spin_unlock</a>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#UNLOCK_LOCK_PREFIX\">UNLOCK_LOCK_PREFIX</a> \"incw %0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#slock\">slock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     :", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"memory\", \"cc\");", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__ticket_spin_is_locked\">__ticket_spin_is_locked</a>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#slock\">slock</a>);", 
"", 
"<span class=\"ts\"/>return !!(((<a class=\"id\" href=\"#tmp\">tmp</a> >> <a class=\"id\" href=\"#TICKET_SHIFT\">TICKET_SHIFT</a>) ^ <a class=\"id\" href=\"#tmp\">tmp</a>) &amp; ((1 << <a class=\"id\" href=\"#TICKET_SHIFT\">TICKET_SHIFT</a>) - 1));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__ticket_spin_is_contended\">__ticket_spin_is_contended</a>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#slock\">slock</a>);", 
"", 
"<span class=\"ts\"/>return (((<a class=\"id\" href=\"#tmp\">tmp</a> >> <a class=\"id\" href=\"#TICKET_SHIFT\">TICKET_SHIFT</a>) - <a class=\"id\" href=\"#tmp\">tmp</a>) &amp; ((1 << <a class=\"id\" href=\"#TICKET_SHIFT\">TICKET_SHIFT</a>) - 1)) &gt; 1;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_PARAVIRT_SPINLOCKS\">CONFIG_PARAVIRT_SPINLOCKS</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#arch_spin_is_locked\">arch_spin_is_locked</a>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__ticket_spin_is_locked\">__ticket_spin_is_locked</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#arch_spin_is_contended\">arch_spin_is_contended</a>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__ticket_spin_is_contended\">__ticket_spin_is_contended</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_spin_is_contended\">arch_spin_is_contended</a><span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_is_contended\">arch_spin_is_contended</a>", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void <a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ticket_spin_lock\">__ticket_spin_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> int <a class=\"id\" href=\"#arch_spin_trylock\">arch_spin_trylock</a>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__ticket_spin_trylock\">__ticket_spin_trylock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void <a class=\"id\" href=\"#arch_spin_unlock\">arch_spin_unlock</a>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ticket_spin_unlock\">__ticket_spin_unlock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void <a class=\"id\" href=\"#arch_spin_lock_flags\">arch_spin_lock_flags</a>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_PARAVIRT_SPINLOCKS */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#arch_spin_unlock_wait\">arch_spin_unlock_wait</a>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#arch_spin_is_locked\">arch_spin_is_locked</a>(<a class=\"id\" href=\"#lock\">lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Read-write spinlocks, allowing multiple readers</span>", 
"<span class=\"comment\"> * but only one writer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE! it is quite common to have readers in interrupts</span>", 
"<span class=\"comment\"> * but no interrupt writers. For those circumstances we</span>", 
"<span class=\"comment\"> * can \"mix\" irq-safe locks - any writer needs to get a</span>", 
"<span class=\"comment\"> * irq-safe write-lock, but readers can get non-irqsafe</span>", 
"<span class=\"comment\"> * read-locks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On x86, we implement read-write locks as a 32-bit counter</span>", 
"<span class=\"comment\"> * with the high bit (sign) being the \"contended\" bit.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * read_can_lock - would read_trylock() succeed?</span>", 
"<span class=\"comment\"> * @lock: the rwlock in question.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#arch_read_can_lock\">arch_read_can_lock</a>(<a class=\"id\" href=\"#arch_rwlock_t\">arch_rwlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return (int)(<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#lock\">lock</a> &gt; 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * write_can_lock - would write_trylock() succeed?</span>", 
"<span class=\"comment\"> * @lock: the rwlock in question.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#arch_write_can_lock\">arch_write_can_lock</a>(<a class=\"id\" href=\"#arch_rwlock_t\">arch_rwlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#lock\">lock</a>)-><a class=\"id\" href=\"#lock\">lock</a> == <a class=\"id\" href=\"#RW_LOCK_BIAS\">RW_LOCK_BIAS</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#arch_read_lock\">arch_read_lock</a>(<a class=\"id\" href=\"#arch_rwlock_t\">arch_rwlock_t</a> *<a class=\"id\" href=\"#rw\">rw</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \" subl $1,(%0)\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"jns 1f\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"call __read_lock_failed\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"1:\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     ::<a class=\"id\" href=\"#LOCK_PTR_REG\">LOCK_PTR_REG</a> (<a class=\"id\" href=\"#rw\">rw</a>) : \"memory\");", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#arch_write_lock\">arch_write_lock</a>(<a class=\"id\" href=\"#arch_rwlock_t\">arch_rwlock_t</a> *<a class=\"id\" href=\"#rw\">rw</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \" subl %1,(%0)\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"jz 1f\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"call __write_lock_failed\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"1:\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     ::<a class=\"id\" href=\"#LOCK_PTR_REG\">LOCK_PTR_REG</a> (<a class=\"id\" href=\"#rw\">rw</a>), \"i\" (<a class=\"id\" href=\"#RW_LOCK_BIAS\">RW_LOCK_BIAS</a>) : \"memory\");", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#arch_read_trylock\">arch_read_trylock</a>(<a class=\"id\" href=\"#arch_rwlock_t\">arch_rwlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#count\">count</a> = (<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *)<a class=\"id\" href=\"#lock\">lock</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_return\">atomic_dec_return</a>(<a class=\"id\" href=\"#count\">count</a>) >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(<a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#arch_write_trylock\">arch_write_trylock</a>(<a class=\"id\" href=\"#arch_rwlock_t\">arch_rwlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#count\">count</a> = (<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *)<a class=\"id\" href=\"#lock\">lock</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_sub_and_test\">atomic_sub_and_test</a>(<a class=\"id\" href=\"#RW_LOCK_BIAS\">RW_LOCK_BIAS</a>, <a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#RW_LOCK_BIAS\">RW_LOCK_BIAS</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#arch_read_unlock\">arch_read_unlock</a>(<a class=\"id\" href=\"#arch_rwlock_t\">arch_rwlock_t</a> *<a class=\"id\" href=\"#rw\">rw</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"incl %0\" :\"+m\" (<a class=\"id\" href=\"#rw\">rw</a>-><a class=\"id\" href=\"#lock\">lock</a>) : : \"memory\");", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#arch_write_unlock\">arch_write_unlock</a>(<a class=\"id\" href=\"#arch_rwlock_t\">arch_rwlock_t</a> *<a class=\"id\" href=\"#rw\">rw</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"addl %1, %0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#rw\">rw</a>-><a class=\"id\" href=\"#lock\">lock</a>) : \"i\" (<a class=\"id\" href=\"#RW_LOCK_BIAS\">RW_LOCK_BIAS</a>) : \"memory\");", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_read_lock_flags\">arch_read_lock_flags</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>) <a class=\"id\" href=\"#arch_read_lock\">arch_read_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_write_lock_flags\">arch_write_lock_flags</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>) <a class=\"id\" href=\"#arch_write_lock\">arch_write_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_spin_relax\">arch_spin_relax</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_read_relax\">arch_read_relax</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_write_relax\">arch_write_relax</a>(<a class=\"id\" href=\"#lock\">lock</a>)<span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>()", 
"", 
"<span class=\"comment\">/* The {read|write|spin}_lock() on x86 are full memory barriers. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#smp_mb__after_lock\">smp_mb__after_lock</a>(void) { }", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_HAS_SMP_MB_AFTER_LOCK\">ARCH_HAS_SMP_MB_AFTER_LOCK</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_SPINLOCK_H */</span>", 
];
xr_frag_insert('l/9d/6b5f7ff21c894a7641930f4076c4aa5e42b0ca.xr', __xr_tmp);
