var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Simplified MAC Kernel (smack) security module</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This file contains the smack hook function implementations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Author:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Casey Schaufler &lt;casey@schaufler-ca.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2007 Casey Schaufler &lt;casey@schaufler-ca.com&gt;</span>", 
"<span class=\"comment\"> *  Copyright (C) 2009 Hewlett-Packard Development Company, L.P.</span>", 
"<span class=\"comment\"> *                Paul Moore &lt;paul.moore@hp.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it under the terms of the GNU General Public License version 2,</span>", 
"<span class=\"comment\"> *      as published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#xattr\">xattr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stat\">stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kd\">kd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#ioctls\">ioctls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tcp\">tcp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#udp\">udp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pipe_fs_i\">pipe_fs_i</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netlabel\">netlabel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#cipso_ipv4\">cipso_ipv4</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"smack.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_security\">task_security</a>(<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#task_cred_xxx\">task_cred_xxx</a>((<a class=\"id\" href=\"#task\">task</a>), <a class=\"id\" href=\"#security\">security</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_fetch - Fetch the smack label from a file.</span>", 
"<span class=\"comment\"> * @ip: a pointer to the inode</span>", 
"<span class=\"comment\"> * @dp: a pointer to the dentry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer to the master list entry for the Smack label</span>", 
"<span class=\"comment\"> * or NULL if there was no label to fetch.</span>", 
"<span class=\"comment\"> */</span>", 
"static char *<a class=\"id\" href=\"#smk_fetch\">smk_fetch</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ip\">ip</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dp\">dp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#in\">in</a>[<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#getxattr\">getxattr</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#getxattr\">getxattr</a>(<a class=\"id\" href=\"#dp\">dp</a>, <a class=\"id\" href=\"#XATTR_NAME_SMACK\">XATTR_NAME_SMACK</a>, <a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_import\">smk_import</a>(<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#rc\">rc</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * new_inode_smack - allocate an inode security blob</span>", 
"<span class=\"comment\"> * @smack: a pointer to the Smack label to use in the blob</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the new blob or NULL if there's no memory available</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#inode_smack\">inode_smack</a> *<a class=\"id\" href=\"#new_inode_smack\">new_inode_smack</a>(char *<a class=\"id\" href=\"#smack\">smack</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_smack\">inode_smack</a> *<a class=\"id\" href=\"#isp\">isp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#inode_smack\">inode_smack</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#isp\">isp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_inode\">smk_inode</a> = <a class=\"id\" href=\"#smack\">smack</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_flags\">smk_flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_lock\">smk_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#isp\">isp</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * LSM hooks.</span>", 
"<span class=\"comment\"> * We he, that is fun!</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_ptrace_access_check - Smack approval on PTRACE_ATTACH</span>", 
"<span class=\"comment\"> * @ctp: child task pointer</span>", 
"<span class=\"comment\"> * @mode: ptrace attachment mode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if access is OK, an error code otherwise</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Do the capability checks, and require read and write.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_ptrace_access_check\">smack_ptrace_access_check</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#ctp\">ctp</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#sp\">sp</a>, *<a class=\"id\" href=\"#tsp\">tsp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_ptrace_access_check\">cap_ptrace_access_check</a>(<a class=\"id\" href=\"#ctp\">ctp</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsp\">tsp</a> = <a class=\"id\" href=\"#task_security\">task_security</a>(<a class=\"id\" href=\"#ctp\">ctp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_TASK\">LSM_AUDIT_DATA_TASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_tsk\">smk_ad_setfield_u_tsk</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#ctp\">ctp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we won't log here, because rc can be overriden */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_access\">smk_access</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#tsp\">tsp</a>, <a class=\"id\" href=\"#MAY_READWRITE\">MAY_READWRITE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0 && <a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_MAC_OVERRIDE\">CAP_MAC_OVERRIDE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smack_log\">smack_log</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#tsp\">tsp</a>, <a class=\"id\" href=\"#MAY_READWRITE\">MAY_READWRITE</a>, <a class=\"id\" href=\"#rc\">rc</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_ptrace_traceme - Smack approval on PTRACE_TRACEME</span>", 
"<span class=\"comment\"> * @ptp: parent task pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if access is OK, an error code otherwise</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Do the capability checks, and require read and write.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_ptrace_traceme\">smack_ptrace_traceme</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#ptp\">ptp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#sp\">sp</a>, *<a class=\"id\" href=\"#tsp\">tsp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_ptrace_traceme\">cap_ptrace_traceme</a>(<a class=\"id\" href=\"#ptp\">ptp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_TASK\">LSM_AUDIT_DATA_TASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_tsk\">smk_ad_setfield_u_tsk</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#ptp\">ptp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsp\">tsp</a> = <a class=\"id\" href=\"#task_security\">task_security</a>(<a class=\"id\" href=\"#ptp\">ptp</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* we won't log here, because rc can be overriden */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_access\">smk_access</a>(<a class=\"id\" href=\"#tsp\">tsp</a>, <a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#MAY_READWRITE\">MAY_READWRITE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0 && <a class=\"id\" href=\"#has_capability\">has_capability</a>(<a class=\"id\" href=\"#ptp\">ptp</a>, <a class=\"id\" href=\"#CAP_MAC_OVERRIDE\">CAP_MAC_OVERRIDE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smack_log\">smack_log</a>(<a class=\"id\" href=\"#tsp\">tsp</a>, <a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#MAY_READWRITE\">MAY_READWRITE</a>, <a class=\"id\" href=\"#rc\">rc</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_syslog - Smack approval on syslog</span>", 
"<span class=\"comment\"> * @type: message type</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Require that the task has the floor label</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, error code otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_syslog\">smack_syslog</a>(int <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#from_file\">from_file</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_syslog\">cap_syslog</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#from_file\">from_file</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_MAC_OVERRIDE\">CAP_MAC_OVERRIDE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/> if (<a class=\"id\" href=\"#sp\">sp</a> != <a class=\"id\" href=\"#smack_known_floor\">smack_known_floor</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Superblock Hooks.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_sb_alloc_security - allocate a superblock blob</span>", 
"<span class=\"comment\"> * @sb: the superblock getting the blob</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success or -ENOMEM on error.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_sb_alloc_security\">smack_sb_alloc_security</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#superblock_smack\">superblock_smack</a> *<a class=\"id\" href=\"#sbsp\">sbsp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbsp\">sbsp</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#superblock_smack\">superblock_smack</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbsp\">sbsp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbsp\">sbsp</a>-><a class=\"id\" href=\"#smk_root\">smk_root</a> = <a class=\"id\" href=\"#smack_known_floor\">smack_known_floor</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbsp\">sbsp</a>-><a class=\"id\" href=\"#smk_default\">smk_default</a> = <a class=\"id\" href=\"#smack_known_floor\">smack_known_floor</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbsp\">sbsp</a>-><a class=\"id\" href=\"#smk_floor\">smk_floor</a> = <a class=\"id\" href=\"#smack_known_floor\">smack_known_floor</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbsp\">sbsp</a>-><a class=\"id\" href=\"#smk_hat\">smk_hat</a> = <a class=\"id\" href=\"#smack_known_hat\">smack_known_hat</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbsp\">sbsp</a>-><a class=\"id\" href=\"#smk_initialized\">smk_initialized</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#sbsp\">sbsp</a>-><a class=\"id\" href=\"#smk_sblock\">smk_sblock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_security\">s_security</a> = <a class=\"id\" href=\"#sbsp\">sbsp</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_sb_free_security - free a superblock blob</span>", 
"<span class=\"comment\"> * @sb: the superblock getting the blob</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_sb_free_security\">smack_sb_free_security</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_security\">s_security</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_security\">s_security</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_sb_copy_data - copy mount options data for processing</span>", 
"<span class=\"comment\"> * @orig: where to start</span>", 
"<span class=\"comment\"> * @smackopts: mount options string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success or -ENOMEM on error.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copy the Smack specific mount options out of the mount</span>", 
"<span class=\"comment\"> * options list.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_sb_copy_data\">smack_sb_copy_data</a>(char *<a class=\"id\" href=\"#orig\">orig</a>, char *<a class=\"id\" href=\"#smackopts\">smackopts</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#cp\">cp</a>, *<a class=\"id\" href=\"#commap\">commap</a>, *<a class=\"id\" href=\"#otheropts\">otheropts</a>, *<a class=\"id\" href=\"#dp\">dp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#otheropts\">otheropts</a> = (char *)<a class=\"id\" href=\"#get_zeroed_page\">get_zeroed_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#otheropts\">otheropts</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#orig\">orig</a>, <a class=\"id\" href=\"#commap\">commap</a> = <a class=\"id\" href=\"#orig\">orig</a>; <a class=\"id\" href=\"#commap\">commap</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#commap\">commap</a> + 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#SMK_FSDEFAULT\">SMK_FSDEFAULT</a>) == <a class=\"id\" href=\"#cp\">cp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a> = <a class=\"id\" href=\"#smackopts\">smackopts</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#SMK_FSFLOOR\">SMK_FSFLOOR</a>) == <a class=\"id\" href=\"#cp\">cp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a> = <a class=\"id\" href=\"#smackopts\">smackopts</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#SMK_FSHAT\">SMK_FSHAT</a>) == <a class=\"id\" href=\"#cp\">cp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a> = <a class=\"id\" href=\"#smackopts\">smackopts</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#strstr\">strstr</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#SMK_FSROOT\">SMK_FSROOT</a>) == <a class=\"id\" href=\"#cp\">cp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a> = <a class=\"id\" href=\"#smackopts\">smackopts</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a> = <a class=\"id\" href=\"#otheropts\">otheropts</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#commap\">commap</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#cp\">cp</a>, ',');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#commap\">commap</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#commap\">commap</a> = '\\0';", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#dp\">dp</a> != '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcat\">strcat</a>(<a class=\"id\" href=\"#dp\">dp</a>, \",\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcat\">strcat</a>(<a class=\"id\" href=\"#dp\">dp</a>, <a class=\"id\" href=\"#cp\">cp</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#orig\">orig</a>, <a class=\"id\" href=\"#otheropts\">otheropts</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#otheropts\">otheropts</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_sb_kern_mount - Smack specific mount processing</span>", 
"<span class=\"comment\"> * @sb: the file system superblock</span>", 
"<span class=\"comment\"> * @flags: the mount flags</span>", 
"<span class=\"comment\"> * @data: the smack mount options</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, an error code on failure</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_sb_kern_mount\">smack_sb_kern_mount</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#superblock_smack\">superblock_smack</a> *<a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_security\">s_security</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_smack\">inode_smack</a> *<a class=\"id\" href=\"#isp\">isp</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#commap\">commap</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#nsp\">nsp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#smk_sblock\">smk_sblock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#smk_initialized\">smk_initialized</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#smk_sblock\">smk_sblock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#smk_initialized\">smk_initialized</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#smk_sblock\">smk_sblock</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#data\">data</a>; <a class=\"id\" href=\"#op\">op</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#commap\">commap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#commap\">commap</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#op\">op</a>, ',');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#commap\">commap</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#commap\">commap</a>++ = '\\0';", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#SMK_FSHAT\">SMK_FSHAT</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#SMK_FSHAT\">SMK_FSHAT</a>)) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#SMK_FSHAT\">SMK_FSHAT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsp\">nsp</a> = <a class=\"id\" href=\"#smk_import\">smk_import</a>(<a class=\"id\" href=\"#op\">op</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nsp\">nsp</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#smk_hat\">smk_hat</a> = <a class=\"id\" href=\"#nsp\">nsp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#SMK_FSFLOOR\">SMK_FSFLOOR</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#SMK_FSFLOOR\">SMK_FSFLOOR</a>)) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#SMK_FSFLOOR\">SMK_FSFLOOR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsp\">nsp</a> = <a class=\"id\" href=\"#smk_import\">smk_import</a>(<a class=\"id\" href=\"#op\">op</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nsp\">nsp</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#smk_floor\">smk_floor</a> = <a class=\"id\" href=\"#nsp\">nsp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#SMK_FSDEFAULT\">SMK_FSDEFAULT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#SMK_FSDEFAULT\">SMK_FSDEFAULT</a>)) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#SMK_FSDEFAULT\">SMK_FSDEFAULT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsp\">nsp</a> = <a class=\"id\" href=\"#smk_import\">smk_import</a>(<a class=\"id\" href=\"#op\">op</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nsp\">nsp</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#smk_default\">smk_default</a> = <a class=\"id\" href=\"#nsp\">nsp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#SMK_FSROOT\">SMK_FSROOT</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#SMK_FSROOT\">SMK_FSROOT</a>)) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#SMK_FSROOT\">SMK_FSROOT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsp\">nsp</a> = <a class=\"id\" href=\"#smk_import\">smk_import</a>(<a class=\"id\" href=\"#op\">op</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nsp\">nsp</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#smk_root\">smk_root</a> = <a class=\"id\" href=\"#nsp\">nsp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Initialize the root inode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#isp\">isp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a> = <a class=\"id\" href=\"#new_inode_smack\">new_inode_smack</a>(<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#smk_root\">smk_root</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_inode\">smk_inode</a> = <a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#smk_root\">smk_root</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_sb_statfs - Smack check on statfs</span>", 
"<span class=\"comment\"> * @dentry: identifies the file system in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current can read the floor of the filesystem,</span>", 
"<span class=\"comment\"> * and error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_sb_statfs\">smack_sb_statfs</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#superblock_smack\">superblock_smack</a> *<a class=\"id\" href=\"#sbp\">sbp</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_sb\">d_sb</a>-><a class=\"id\" href=\"#s_security\">s_security</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#sbp\">sbp</a>-><a class=\"id\" href=\"#smk_floor\">smk_floor</a>, <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_sb_mount - Smack check for mounting</span>", 
"<span class=\"comment\"> * @dev_name: unused</span>", 
"<span class=\"comment\"> * @path: mount point</span>", 
"<span class=\"comment\"> * @type: unused</span>", 
"<span class=\"comment\"> * @flags: unused</span>", 
"<span class=\"comment\"> * @data: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current can write the floor of the filesystem</span>", 
"<span class=\"comment\"> * being mounted on, an error code otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_sb_mount\">smack_sb_mount</a>(char *<a class=\"id\" href=\"#dev_name\">dev_name</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char *<a class=\"id\" href=\"#type\">type</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#superblock_smack\">superblock_smack</a> *<a class=\"id\" href=\"#sbp\">sbp</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_security\">s_security</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path\">smk_ad_setfield_u_fs_path</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, *<a class=\"id\" href=\"#path\">path</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#sbp\">sbp</a>-><a class=\"id\" href=\"#smk_floor\">smk_floor</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_sb_umount - Smack check for unmounting</span>", 
"<span class=\"comment\"> * @mnt: file system to unmount</span>", 
"<span class=\"comment\"> * @flags: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current can write the floor of the filesystem</span>", 
"<span class=\"comment\"> * being unmounted, an error code otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_sb_umount\">smack_sb_umount</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#superblock_smack\">superblock_smack</a> *<a class=\"id\" href=\"#sbp\">sbp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_mnt\">smk_ad_setfield_u_fs_path_mnt</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbp\">sbp</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_security\">s_security</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#sbp\">sbp</a>-><a class=\"id\" href=\"#smk_floor\">smk_floor</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Inode hooks</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_alloc_security - allocate an inode blob</span>", 
"<span class=\"comment\"> * @inode: the inode in need of a blob</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if it gets a blob, -ENOMEM otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inode_alloc_security\">smack_inode_alloc_security</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a> = <a class=\"id\" href=\"#new_inode_smack\">new_inode_smack</a>(<a class=\"id\" href=\"#current_security\">current_security</a>());", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_free_security - free an inode blob</span>", 
"<span class=\"comment\"> * @inode: the inode with a blob</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Clears the blob pointer in inode</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_inode_free_security\">smack_inode_free_security</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_init_security - copy out the smack from an inode</span>", 
"<span class=\"comment\"> * @inode: the inode</span>", 
"<span class=\"comment\"> * @dir: unused</span>", 
"<span class=\"comment\"> * @name: where to put the attribute name</span>", 
"<span class=\"comment\"> * @value: where to put the attribute value</span>", 
"<span class=\"comment\"> * @len: where to put the length of the attribute</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if it all works out, -ENOMEM if there's no memory</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inode_init_security\">smack_inode_init_security</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     char **<a class=\"id\" href=\"#name\">name</a>, void **<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#XATTR_SMACK_SUFFIX\">XATTR_SMACK_SUFFIX</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#name\">name</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#isp\">isp</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#value\">value</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#isp\">isp</a>) + 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_link - Smack check on link</span>", 
"<span class=\"comment\"> * @old_dentry: the existing object</span>", 
"<span class=\"comment\"> * @dir: unused</span>", 
"<span class=\"comment\"> * @new_dentry: the new object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if access is permitted, an error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inode_link\">smack_inode_link</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old_dentry\">old_dentry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new_dentry\">new_dentry</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#isp\">isp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#old_dentry\">old_dentry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#old_dentry\">old_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#isp\">isp</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0 && <a class=\"id\" href=\"#new_dentry\">new_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#new_dentry\">new_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#new_dentry\">new_dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#isp\">isp</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_unlink - Smack check on inode deletion</span>", 
"<span class=\"comment\"> * @dir: containing directory object</span>", 
"<span class=\"comment\"> * @dentry: file to unlink</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current can write the containing directory</span>", 
"<span class=\"comment\"> * and the object, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inode_unlink\">smack_inode_unlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * You need write access to the thing you're unlinking</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#ip\">ip</a>), <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * You also need write access to the containing directory</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_inode\">smk_ad_setfield_u_fs_inode</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#dir\">dir</a>), <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_rmdir - Smack check on directory deletion</span>", 
"<span class=\"comment\"> * @dir: containing directory object</span>", 
"<span class=\"comment\"> * @dentry: directory to unlink</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current can write the containing directory</span>", 
"<span class=\"comment\"> * and the directory, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inode_rmdir\">smack_inode_rmdir</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * You need write access to the thing you're removing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>), <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * You also need write access to the containing directory</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_inode\">smk_ad_setfield_u_fs_inode</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#dir\">dir</a>), <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_rename - Smack check on rename</span>", 
"<span class=\"comment\"> * @old_inode: the old directory</span>", 
"<span class=\"comment\"> * @old_dentry: unused</span>", 
"<span class=\"comment\"> * @new_inode: the new directory</span>", 
"<span class=\"comment\"> * @new_dentry: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Read and write access is required on both the old and</span>", 
"<span class=\"comment\"> * new directories.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if access is permitted, an error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inode_rename\">smack_inode_rename</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#old_inode\">old_inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old_dentry\">old_dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#new_inode\">new_inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new_dentry\">new_dentry</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#isp\">isp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#old_dentry\">old_dentry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#old_dentry\">old_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#isp\">isp</a>, <a class=\"id\" href=\"#MAY_READWRITE\">MAY_READWRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0 && <a class=\"id\" href=\"#new_dentry\">new_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#new_dentry\">new_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#new_dentry\">new_dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#isp\">isp</a>, <a class=\"id\" href=\"#MAY_READWRITE\">MAY_READWRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_permission - Smack version of permission()</span>", 
"<span class=\"comment\"> * @inode: the inode in question</span>", 
"<span class=\"comment\"> * @mask: the access requested</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the important Smack hook.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if access is permitted, -EACCES otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inode_permission\">smack_inode_permission</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> &= (<a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>|<a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>|<a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>|<a class=\"id\" href=\"#MAY_APPEND\">MAY_APPEND</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No permission to check. Existence test. Yup, it's there.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_inode\">smk_ad_setfield_u_fs_inode</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>), <a class=\"id\" href=\"#mask\">mask</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_setattr - Smack check for setting attributes</span>", 
"<span class=\"comment\"> * @dentry: the object</span>", 
"<span class=\"comment\"> * @iattr: for the force flag</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if access is permitted, an error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inode_setattr\">smack_inode_setattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#iattr\">iattr</a> *<a class=\"id\" href=\"#iattr\">iattr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Need to allow for clearing the setuid bit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iattr\">iattr</a>-><a class=\"id\" href=\"#ia_valid\">ia_valid</a> &amp; <a class=\"id\" href=\"#ATTR_FORCE\">ATTR_FORCE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>), <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_getattr - Smack check for getting attributes</span>", 
"<span class=\"comment\"> * @mnt: unused</span>", 
"<span class=\"comment\"> * @dentry: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if access is permitted, an error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inode_getattr\">smack_inode_getattr</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_mnt\">smk_ad_setfield_u_fs_path_mnt</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>), <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_setxattr - Smack check for setting xattrs</span>", 
"<span class=\"comment\"> * @dentry: the object</span>", 
"<span class=\"comment\"> * @name: name of the attribute</span>", 
"<span class=\"comment\"> * @value: unused</span>", 
"<span class=\"comment\"> * @size: unused</span>", 
"<span class=\"comment\"> * @flags: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This protects the Smack attribute explicitly.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if access is permitted, an error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inode_setxattr\">smack_inode_setxattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_NAME_SMACK\">XATTR_NAME_SMACK</a>) == 0 ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_NAME_SMACKIPIN\">XATTR_NAME_SMACKIPIN</a>) == 0 ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_NAME_SMACKIPOUT\">XATTR_NAME_SMACKIPOUT</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_MAC_ADMIN\">CAP_MAC_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * check label validity here so import wont fail on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * post_setxattr</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> == 0 || <a class=\"id\" href=\"#size\">size</a> >= <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#smk_import\">smk_import</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size\">size</a>) == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_inode_setxattr\">cap_inode_setxattr</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>), <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_post_setxattr - Apply the Smack update approved above</span>", 
"<span class=\"comment\"> * @dentry: object</span>", 
"<span class=\"comment\"> * @name: attribute name</span>", 
"<span class=\"comment\"> * @value: attribute value</span>", 
"<span class=\"comment\"> * @size: attribute size</span>", 
"<span class=\"comment\"> * @flags: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set the pointer in the inode blob to the entry found</span>", 
"<span class=\"comment\"> * in the master label list.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_inode_post_setxattr\">smack_inode_post_setxattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_smack\">inode_smack</a> *<a class=\"id\" href=\"#isp\">isp</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#nsp\">nsp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Not SMACK</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_NAME_SMACK\">XATTR_NAME_SMACK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No locking is done here. This is a pointer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * assignment.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nsp\">nsp</a> = <a class=\"id\" href=\"#smk_import\">smk_import</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nsp\">nsp</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_inode\">smk_inode</a> = <a class=\"id\" href=\"#nsp\">nsp</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_inode\">smk_inode</a> = <a class=\"id\" href=\"#smack_known_invalid\">smack_known_invalid</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>;", 
"", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * smack_inode_getxattr - Smack check on getxattr</span>", 
"<span class=\"comment\"> * @dentry: the object</span>", 
"<span class=\"comment\"> * @name: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if access is permitted, an error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inode_getxattr\">smack_inode_getxattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>), <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * smack_inode_removexattr - Smack check on removexattr</span>", 
"<span class=\"comment\"> * @dentry: the object</span>", 
"<span class=\"comment\"> * @name: name of the attribute</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Removing the Smack attribute requires CAP_MAC_ADMIN</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if access is permitted, an error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inode_removexattr\">smack_inode_removexattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_NAME_SMACK\">XATTR_NAME_SMACK</a>) == 0 ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_NAME_SMACKIPIN\">XATTR_NAME_SMACKIPIN</a>) == 0 ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_NAME_SMACKIPOUT\">XATTR_NAME_SMACKIPOUT</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_MAC_ADMIN\">CAP_MAC_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_inode_removexattr\">cap_inode_removexattr</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>), <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_getsecurity - get smack xattrs</span>", 
"<span class=\"comment\"> * @inode: the object</span>", 
"<span class=\"comment\"> * @name: attribute name</span>", 
"<span class=\"comment\"> * @buffer: where to put the result</span>", 
"<span class=\"comment\"> * @alloc: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the size of the attribute or an error code</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inode_getsecurity\">smack_inode_getsecurity</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const char *<a class=\"id\" href=\"#name\">name</a>, void **<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#alloc\">alloc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket_smack\">socket_smack</a> *<a class=\"id\" href=\"#ssp\">ssp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sbp\">sbp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ip\">ip</a> = (struct <a class=\"id\" href=\"#inode\">inode</a> *)<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#isp\">isp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ilen\">ilen</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_SMACK_SUFFIX\">XATTR_SMACK_SUFFIX</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ilen\">ilen</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#isp\">isp</a>) + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#isp\">isp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ilen\">ilen</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The rest of the Smack xattrs are only on sockets.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbp\">sbp</a> = <a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sbp\">sbp</a>-><a class=\"id\" href=\"#s_magic\">s_magic</a> != <a class=\"id\" href=\"#SOCKFS_MAGIC\">SOCKFS_MAGIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#SOCKET_I\">SOCKET_I</a>(<a class=\"id\" href=\"#ip\">ip</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sock\">sock</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssp\">ssp</a> = <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_security\">sk_security</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_SMACK_IPIN\">XATTR_SMACK_IPIN</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_in\">smk_in</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_SMACK_IPOUT\">XATTR_SMACK_IPOUT</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_out\">smk_out</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ilen\">ilen</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#isp\">isp</a>) + 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#isp\">isp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ilen\">ilen</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_listsecurity - list the Smack attributes</span>", 
"<span class=\"comment\"> * @inode: the object</span>", 
"<span class=\"comment\"> * @buffer: where they go</span>", 
"<span class=\"comment\"> * @buffer_size: size of buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, -EINVAL otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inode_listsecurity\">smack_inode_listsecurity</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#buffer_size\">buffer_size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#XATTR_NAME_SMACK\">XATTR_NAME_SMACK</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#buffer_size\">buffer_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#XATTR_NAME_SMACK\">XATTR_NAME_SMACK</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_getsecid - Extract inode's security id</span>", 
"<span class=\"comment\"> * @inode: inode to extract the info from</span>", 
"<span class=\"comment\"> * @secid: where result will be saved</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_inode_getsecid\">smack_inode_getsecid</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_smack\">inode_smack</a> *<a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#secid\">secid</a> = <a class=\"id\" href=\"#smack_to_secid\">smack_to_secid</a>(<a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_inode\">smk_inode</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * File Hooks</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_file_permission - Smack check on file operations</span>", 
"<span class=\"comment\"> * @file: unused</span>", 
"<span class=\"comment\"> * @mask: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Should access checks be done on each read or write?</span>", 
"<span class=\"comment\"> * UNICOS and SELinux say yes.</span>", 
"<span class=\"comment\"> * Trusted Solaris, Trusted Irix, and just about everyone else says no.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * I'll say no for now. Smack does not do the frequent</span>", 
"<span class=\"comment\"> * label changing that SELinux does.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_file_permission\">smack_file_permission</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_file_alloc_security - assign a file security blob</span>", 
"<span class=\"comment\"> * @file: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The security blob for a file is a pointer to the master</span>", 
"<span class=\"comment\"> * label list, so no allocation is done.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_file_alloc_security\">smack_file_alloc_security</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_file_free_security - clear a file security blob</span>", 
"<span class=\"comment\"> * @file: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The security blob for a file is a pointer to the master</span>", 
"<span class=\"comment\"> * label list, so no memory is freed.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_file_free_security\">smack_file_free_security</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_file_ioctl - Smack check on ioctls</span>", 
"<span class=\"comment\"> * @file: the object</span>", 
"<span class=\"comment\"> * @cmd: what to do</span>", 
"<span class=\"comment\"> * @arg: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Relies heavily on the correct use of the ioctl command conventions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if allowed, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_file_ioctl\">smack_file_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path\">smk_ad_setfield_u_fs_path</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#_IOC_DIR\">_IOC_DIR</a>(<a class=\"id\" href=\"#cmd\">cmd</a>) &amp; <a class=\"id\" href=\"#_IOC_WRITE\">_IOC_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0 && (<a class=\"id\" href=\"#_IOC_DIR\">_IOC_DIR</a>(<a class=\"id\" href=\"#cmd\">cmd</a>) &amp; <a class=\"id\" href=\"#_IOC_READ\">_IOC_READ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a>, <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_file_lock - Smack check on file locking</span>", 
"<span class=\"comment\"> * @file: the object</span>", 
"<span class=\"comment\"> * @cmd: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current has write access, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_file_lock\">smack_file_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path_dentry\">smk_ad_setfield_u_fs_path_dentry</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_file_fcntl - Smack check on fcntl</span>", 
"<span class=\"comment\"> * @file: the object</span>", 
"<span class=\"comment\"> * @cmd: what action to check</span>", 
"<span class=\"comment\"> * @arg: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current has access, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_file_fcntl\">smack_file_fcntl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_FS\">LSM_AUDIT_DATA_FS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path\">smk_ad_setfield_u_fs_path</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_DUPFD\">F_DUPFD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETFD\">F_GETFD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETFL\">F_GETFL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETLK\">F_GETLK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETOWN\">F_GETOWN</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETSIG\">F_GETSIG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a>, <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETFD\">F_SETFD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETFL\">F_SETFL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETLK\">F_SETLK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETLKW\">F_SETLKW</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETOWN\">F_SETOWN</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETSIG\">F_SETSIG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a>, <a class=\"id\" href=\"#MAY_READWRITE\">MAY_READWRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_file_set_fowner - set the file security blob value</span>", 
"<span class=\"comment\"> * @file: object in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0</span>", 
"<span class=\"comment\"> * Further research may be required on this one.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_file_set_fowner\">smack_file_set_fowner</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_file_send_sigiotask - Smack on sigio</span>", 
"<span class=\"comment\"> * @tsk: The target task</span>", 
"<span class=\"comment\"> * @fown: the object the signal come from</span>", 
"<span class=\"comment\"> * @signum: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allow a privileged task to get signals even if it shouldn't</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if a subject with the object's smack could</span>", 
"<span class=\"comment\"> * write to the task, an error code otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_file_send_sigiotask\">smack_file_send_sigiotask</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a> *<a class=\"id\" href=\"#fown\">fown</a>, int <a class=\"id\" href=\"#signum\">signum</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tsp\">tsp</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * struct fown_struct is never outside the context of a struct file</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#fown\">fown</a>, struct <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#f_owner\">f_owner</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* we don't log here as rc can be overriden */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_access\">smk_access</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a>, <a class=\"id\" href=\"#tsp\">tsp</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0 && <a class=\"id\" href=\"#has_capability\">has_capability</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#CAP_MAC_OVERRIDE\">CAP_MAC_OVERRIDE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_TASK\">LSM_AUDIT_DATA_TASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_tsk\">smk_ad_setfield_u_tsk</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smack_log\">smack_log</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a>, <a class=\"id\" href=\"#tsp\">tsp</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, <a class=\"id\" href=\"#rc\">rc</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_file_receive - Smack file receive check</span>", 
"<span class=\"comment\"> * @file: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current has access, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_file_receive\">smack_file_receive</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may\">may</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_TASK\">LSM_AUDIT_DATA_TASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_fs_path\">smk_ad_setfield_u_fs_path</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This code relies on bitmasks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> = <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> |= <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a>, <a class=\"id\" href=\"#may\">may</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Task hooks</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_cred_alloc_blank - \"allocate\" blank task-level security credentials</span>", 
"<span class=\"comment\"> * @new: the new credentials</span>", 
"<span class=\"comment\"> * @gfp: the atomicity of any memory allocations</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Prepare a blank set of credentials for modification.  This must allocate all</span>", 
"<span class=\"comment\"> * the memory the LSM module might require such that cred_transfer() can</span>", 
"<span class=\"comment\"> * complete without error.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_cred_alloc_blank\">smack_cred_alloc_blank</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_cred_free - \"free\" task-level security credentials</span>", 
"<span class=\"comment\"> * @cred: the credentials in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Smack isn't using copies of blobs. Everyone</span>", 
"<span class=\"comment\"> * points to an immutable list. The blobs never go away.</span>", 
"<span class=\"comment\"> * There is no leak here.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_cred_free\">smack_cred_free</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_cred_prepare - prepare new set of credentials for modification</span>", 
"<span class=\"comment\"> * @new: the new credentials</span>", 
"<span class=\"comment\"> * @old: the original credentials</span>", 
"<span class=\"comment\"> * @gfp: the atomicity of any memory allocations</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Prepare a new set of credentials for modification.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_cred_prepare\">smack_cred_prepare</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#security\">security</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_cred_transfer - Transfer the old credentials to the new credentials</span>", 
"<span class=\"comment\"> * @new: the new credentials</span>", 
"<span class=\"comment\"> * @old: the original credentials</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fill in a set of blank credentials from another set of credentials.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_cred_transfer\">smack_cred_transfer</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#security\">security</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_kernel_act_as - Set the subjective context in a set of credentials</span>", 
"<span class=\"comment\"> * @new: points to the set of credentials to be modified.</span>", 
"<span class=\"comment\"> * @secid: specifies the security ID to be set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set the security data for a kernel service.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_kernel_act_as\">smack_kernel_act_as</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#smack\">smack</a> = <a class=\"id\" href=\"#smack_from_secid\">smack_from_secid</a>(<a class=\"id\" href=\"#secid\">secid</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smack\">smack</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#smack\">smack</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_kernel_create_files_as - Set the file creation label in a set of creds</span>", 
"<span class=\"comment\"> * @new: points to the set of credentials to be modified</span>", 
"<span class=\"comment\"> * @inode: points to the inode to use as a reference</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set the file creation context in a set of credentials to the same</span>", 
"<span class=\"comment\"> * as the objective context of the specified inode</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_kernel_create_files_as\">smack_kernel_create_files_as</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_smack\">inode_smack</a> *<a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_inode\">smk_inode</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_curacc_on_task - helper to log task related access</span>", 
"<span class=\"comment\"> * @p: the task object</span>", 
"<span class=\"comment\"> * @access : the access requested</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 if access is permitted</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smk_curacc_on_task\">smk_curacc_on_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#access\">access</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_TASK\">LSM_AUDIT_DATA_TASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_tsk\">smk_ad_setfield_u_tsk</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#task_security\">task_security</a>(<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#access\">access</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_task_setpgid - Smack check on setting pgid</span>", 
"<span class=\"comment\"> * @p: the task object</span>", 
"<span class=\"comment\"> * @pgid: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 if write access is permitted</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_task_setpgid\">smack_task_setpgid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pgid\">pgid</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_on_task\">smk_curacc_on_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_task_getpgid - Smack access check for getpgid</span>", 
"<span class=\"comment\"> * @p: the object task</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current can read the object task, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_task_getpgid\">smack_task_getpgid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_on_task\">smk_curacc_on_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_task_getsid - Smack access check for getsid</span>", 
"<span class=\"comment\"> * @p: the object task</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current can read the object task, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_task_getsid\">smack_task_getsid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_on_task\">smk_curacc_on_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_task_getsecid - get the secid of the task</span>", 
"<span class=\"comment\"> * @p: the object task</span>", 
"<span class=\"comment\"> * @secid: where to put the result</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sets the secid to contain a u32 version of the smack label.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_task_getsecid\">smack_task_getsecid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#secid\">secid</a> = <a class=\"id\" href=\"#smack_to_secid\">smack_to_secid</a>(<a class=\"id\" href=\"#task_security\">task_security</a>(<a class=\"id\" href=\"#p\">p</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_task_setnice - Smack check on setting nice</span>", 
"<span class=\"comment\"> * @p: the task object</span>", 
"<span class=\"comment\"> * @nice: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 if write access is permitted</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_task_setnice\">smack_task_setnice</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#nice\">nice</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_task_setnice\">cap_task_setnice</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#nice\">nice</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc_on_task\">smk_curacc_on_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_task_setioprio - Smack check on setting ioprio</span>", 
"<span class=\"comment\"> * @p: the task object</span>", 
"<span class=\"comment\"> * @ioprio: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 if write access is permitted</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_task_setioprio\">smack_task_setioprio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#ioprio\">ioprio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_task_setioprio\">cap_task_setioprio</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#ioprio\">ioprio</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc_on_task\">smk_curacc_on_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_task_getioprio - Smack check on reading ioprio</span>", 
"<span class=\"comment\"> * @p: the task object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 if read access is permitted</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_task_getioprio\">smack_task_getioprio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_on_task\">smk_curacc_on_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_task_setscheduler - Smack check on setting scheduler</span>", 
"<span class=\"comment\"> * @p: the task object</span>", 
"<span class=\"comment\"> * @policy: unused</span>", 
"<span class=\"comment\"> * @lp: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 if read access is permitted</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_task_setscheduler\">smack_task_setscheduler</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#policy\">policy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#sched_param\">sched_param</a> *<a class=\"id\" href=\"#lp\">lp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_task_setscheduler\">cap_task_setscheduler</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#policy\">policy</a>, <a class=\"id\" href=\"#lp\">lp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_curacc_on_task\">smk_curacc_on_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_task_getscheduler - Smack check on reading scheduler</span>", 
"<span class=\"comment\"> * @p: the task object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 if read access is permitted</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_task_getscheduler\">smack_task_getscheduler</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_on_task\">smk_curacc_on_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_task_movememory - Smack check on moving memory</span>", 
"<span class=\"comment\"> * @p: the task object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 if write access is permitted</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_task_movememory\">smack_task_movememory</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_on_task\">smk_curacc_on_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_task_kill - Smack check on signal delivery</span>", 
"<span class=\"comment\"> * @p: the task object</span>", 
"<span class=\"comment\"> * @info: unused</span>", 
"<span class=\"comment\"> * @sig: unused</span>", 
"<span class=\"comment\"> * @secid: identifies the smack to use in lieu of current's</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 if write access is permitted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The secid behavior is an artifact of an SELinux hack</span>", 
"<span class=\"comment\"> * in the USB code. Someday it may go away.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_task_kill\">smack_task_kill</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_TASK\">LSM_AUDIT_DATA_TASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_tsk\">smk_ad_setfield_u_tsk</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sending a signal requires that the sender</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can write the receiver.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#secid\">secid</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#task_security\">task_security</a>(<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the secid isn't 0 we're dealing with some USB IO</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * specific behavior. This is not clean. For one thing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we can't take privilege into account.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_access\">smk_access</a>(<a class=\"id\" href=\"#smack_from_secid\">smack_from_secid</a>(<a class=\"id\" href=\"#secid\">secid</a>), <a class=\"id\" href=\"#task_security\">task_security</a>(<a class=\"id\" href=\"#p\">p</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_task_wait - Smack access check for waiting</span>", 
"<span class=\"comment\"> * @p: task to wait for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current can wait for p, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_task_wait\">smack_task_wait</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tsp\">tsp</a> = <a class=\"id\" href=\"#task_security\">task_security</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we don't log here, we can be overriden */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_access\">smk_access</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#tsp\">tsp</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_log\">out_log</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allow the operation to succeed if either task</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * has privilege to perform operations that might</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * account for the smack labels having gotten to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be different in the first place.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This breaks the strict subject/object access</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * control ideal, taking the object's privilege</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state into account in the decision as well as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the smack value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_MAC_OVERRIDE\">CAP_MAC_OVERRIDE</a>) || <a class=\"id\" href=\"#has_capability\">has_capability</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#CAP_MAC_OVERRIDE\">CAP_MAC_OVERRIDE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* we log only if we didn't get overriden */</span>", 
" <a class=\"id\" href=\"#out_log\">out_log</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_TASK\">LSM_AUDIT_DATA_TASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_tsk\">smk_ad_setfield_u_tsk</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smack_log\">smack_log</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#tsp\">tsp</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, <a class=\"id\" href=\"#rc\">rc</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_task_to_inode - copy task smack into the inode blob</span>", 
"<span class=\"comment\"> * @p: task to copy from</span>", 
"<span class=\"comment\"> * @inode: inode to copy to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sets the smack pointer in the inode security blob</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_task_to_inode\">smack_task_to_inode</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_smack\">inode_smack</a> *<a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_inode\">smk_inode</a> = <a class=\"id\" href=\"#task_security\">task_security</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Socket hooks.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_sk_alloc_security - Allocate a socket blob</span>", 
"<span class=\"comment\"> * @sk: the socket</span>", 
"<span class=\"comment\"> * @family: unused</span>", 
"<span class=\"comment\"> * @gfp_flags: memory allocation flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Assign Smack pointers to current</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, -ENOMEM is there's no memory</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_sk_alloc_security\">smack_sk_alloc_security</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#family\">family</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#csp\">csp</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket_smack\">socket_smack</a> *<a class=\"id\" href=\"#ssp\">ssp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssp\">ssp</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#socket_smack\">socket_smack</a>), <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ssp\">ssp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_in\">smk_in</a> = <a class=\"id\" href=\"#csp\">csp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_out\">smk_out</a> = <a class=\"id\" href=\"#csp\">csp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_packet\">smk_packet</a>[0] = '\\0';", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_security\">sk_security</a> = <a class=\"id\" href=\"#ssp\">ssp</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_sk_free_security - Free a socket blob</span>", 
"<span class=\"comment\"> * @sk: the socket</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Clears the blob pointer</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_sk_free_security\">smack_sk_free_security</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_security\">sk_security</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\">* smack_host_label - check host based restrictions</span>", 
"<span class=\"comment\">* @sip: the object end</span>", 
"<span class=\"comment\">*</span>", 
"<span class=\"comment\">* looks for host based access restrictions</span>", 
"<span class=\"comment\">*</span>", 
"<span class=\"comment\">* This version will only be appropriate for really small sets of single label</span>", 
"<span class=\"comment\">* hosts.  The caller is responsible for ensuring that the RCU read lock is</span>", 
"<span class=\"comment\">* taken before calling this function.</span>", 
"<span class=\"comment\">*</span>", 
"<span class=\"comment\">* Returns the label of the far end or NULL if it's not special.</span>", 
"<span class=\"comment\">*/</span>", 
"static char *<a class=\"id\" href=\"#smack_host_label\">smack_host_label</a>(struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *<a class=\"id\" href=\"#sip\">sip</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_netlbladdr\">smk_netlbladdr</a> *<a class=\"id\" href=\"#snp\">snp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#in_addr\">in_addr</a> *<a class=\"id\" href=\"#siap\">siap</a> = &amp;<a class=\"id\" href=\"#sip\">sip</a>-><a class=\"id\" href=\"#sin_addr\">sin_addr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#siap\">siap</a>-><a class=\"id\" href=\"#s_addr\">s_addr</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#snp\">snp</a>, &amp;<a class=\"id\" href=\"#smk_netlbladdr_list\">smk_netlbladdr_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>* we break after finding the first match because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>* the list is sorted from longest to shortest mask</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>* so we have found the most specific match</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((&amp;<a class=\"id\" href=\"#snp\">snp</a>-><a class=\"id\" href=\"#smk_host\">smk_host</a>.<a class=\"id\" href=\"#sin_addr\">sin_addr</a>)-><a class=\"id\" href=\"#s_addr\">s_addr</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#siap\">siap</a>-><a class=\"id\" href=\"#s_addr\">s_addr</a> &amp; (&amp;<a class=\"id\" href=\"#snp\">snp</a>-><a class=\"id\" href=\"#smk_mask\">smk_mask</a>)-><a class=\"id\" href=\"#s_addr\">s_addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we have found the special CIPSO option */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#snp\">snp</a>-><a class=\"id\" href=\"#smk_label\">smk_label</a> == <a class=\"id\" href=\"#smack_cipso_option\">smack_cipso_option</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#snp\">snp</a>-><a class=\"id\" href=\"#smk_label\">smk_label</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_set_catset - convert a capset to netlabel mls categories</span>", 
"<span class=\"comment\"> * @catset: the Smack categories</span>", 
"<span class=\"comment\"> * @sap: where to put the netlabel categories</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocates and fills attr.mls.cat</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_set_catset\">smack_set_catset</a>(char *<a class=\"id\" href=\"#catset\">catset</a>, struct <a class=\"id\" href=\"#netlbl_lsm_secattr\">netlbl_lsm_secattr</a> *<a class=\"id\" href=\"#sap\">sap</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cat\">cat</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#byte\">byte</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#catset\">catset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#NETLBL_SECATTR_MLS_CAT\">NETLBL_SECATTR_MLS_CAT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mls\">mls</a>.<a class=\"id\" href=\"#cat\">cat</a> = <a class=\"id\" href=\"#netlbl_secattr_catmap_alloc\">netlbl_secattr_catmap_alloc</a>(<a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mls\">mls</a>.<a class=\"id\" href=\"#cat\">cat</a>-><a class=\"id\" href=\"#startbit\">startbit</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cat\">cat</a> = 1, <a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#catset\">catset</a>, <a class=\"id\" href=\"#byte\">byte</a> = 0; <a class=\"id\" href=\"#byte\">byte</a> &lt; <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>; <a class=\"id\" href=\"#cp\">cp</a>++, <a class=\"id\" href=\"#byte\">byte</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#m\">m</a> = 0x80; <a class=\"id\" href=\"#m\">m</a> != 0; <a class=\"id\" href=\"#m\">m</a> >>= 1, <a class=\"id\" href=\"#cat\">cat</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#m\">m</a> &amp; *<a class=\"id\" href=\"#cp\">cp</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#netlbl_secattr_catmap_setbit\">netlbl_secattr_catmap_setbit</a>(<a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mls\">mls</a>.<a class=\"id\" href=\"#cat\">cat</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#cat\">cat</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_to_secattr - fill a secattr from a smack value</span>", 
"<span class=\"comment\"> * @smack: the smack value</span>", 
"<span class=\"comment\"> * @nlsp: where the result goes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Casey says that CIPSO is good enough for now.</span>", 
"<span class=\"comment\"> * It can be used to effect.</span>", 
"<span class=\"comment\"> * It can also be abused to effect when necessary.</span>", 
"<span class=\"comment\"> * Appologies to the TSIG group in general and GW in particular.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_to_secattr\">smack_to_secattr</a>(char *<a class=\"id\" href=\"#smack\">smack</a>, struct <a class=\"id\" href=\"#netlbl_lsm_secattr\">netlbl_lsm_secattr</a> *<a class=\"id\" href=\"#nlsp\">nlsp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smack_cipso\">smack_cipso</a> <a class=\"id\" href=\"#cipso\">cipso</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nlsp\">nlsp</a>-><a class=\"id\" href=\"#domain\">domain</a> = <a class=\"id\" href=\"#smack\">smack</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nlsp\">nlsp</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#NETLBL_SECATTR_DOMAIN\">NETLBL_SECATTR_DOMAIN</a> | <a class=\"id\" href=\"#NETLBL_SECATTR_MLS_LVL\">NETLBL_SECATTR_MLS_LVL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smack_to_cipso\">smack_to_cipso</a>(<a class=\"id\" href=\"#smack\">smack</a>, &amp;<a class=\"id\" href=\"#cipso\">cipso</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nlsp\">nlsp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mls\">mls</a>.<a class=\"id\" href=\"#lvl\">lvl</a> = <a class=\"id\" href=\"#cipso\">cipso</a>.<a class=\"id\" href=\"#smk_level\">smk_level</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack_set_catset\">smack_set_catset</a>(<a class=\"id\" href=\"#cipso\">cipso</a>.<a class=\"id\" href=\"#smk_catset\">smk_catset</a>, <a class=\"id\" href=\"#nlsp\">nlsp</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nlsp\">nlsp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mls\">mls</a>.<a class=\"id\" href=\"#lvl\">lvl</a> = <a class=\"id\" href=\"#smack_cipso_direct\">smack_cipso_direct</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack_set_catset\">smack_set_catset</a>(<a class=\"id\" href=\"#smack\">smack</a>, <a class=\"id\" href=\"#nlsp\">nlsp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_netlabel - Set the secattr on a socket</span>", 
"<span class=\"comment\"> * @sk: the socket</span>", 
"<span class=\"comment\"> * @labeled: socket label scheme</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Convert the outbound smack value (smk_out) to a</span>", 
"<span class=\"comment\"> * secattr and attach it to the socket.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success or an error code</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_netlabel\">smack_netlabel</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#labeled\">labeled</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket_smack\">socket_smack</a> *<a class=\"id\" href=\"#ssp\">ssp</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_security\">sk_security</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_lsm_secattr\">netlbl_lsm_secattr</a> <a class=\"id\" href=\"#secattr\">secattr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Usually the netlabel code will handle changing the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * packet labeling based on the label.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The case of a single label host is different, because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a single label host should never get a labeled packet</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * even though the label is usually associated with a packet</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * label.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_bh_disable\">local_bh_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh_lock_sock_nested\">bh_lock_sock_nested</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_out\">smk_out</a> == <a class=\"id\" href=\"#smack_net_ambient\">smack_net_ambient</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#labeled\">labeled</a> == <a class=\"id\" href=\"#SMACK_UNLABELED_SOCKET\">SMACK_UNLABELED_SOCKET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netlbl_sock_delattr\">netlbl_sock_delattr</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netlbl_secattr_init\">netlbl_secattr_init</a>(&amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack_to_secattr\">smack_to_secattr</a>(<a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_out\">smk_out</a>, &amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#netlbl_sock_setattr\">netlbl_sock_setattr</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a>, &amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netlbl_secattr_destroy\">netlbl_secattr_destroy</a>(&amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh_unlock_sock\">bh_unlock_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_bh_enable\">local_bh_enable</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_netlbel_send - Set the secattr on a socket and perform access checks</span>", 
"<span class=\"comment\"> * @sk: the socket</span>", 
"<span class=\"comment\"> * @sap: the destination address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set the correct secattr for the given socket based on the destination</span>", 
"<span class=\"comment\"> * address and perform any outbound access checks needed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success or an error code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_netlabel_send\">smack_netlabel_send</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *<a class=\"id\" href=\"#sap\">sap</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sk_lbl\">sk_lbl</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#hostsp\">hostsp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket_smack\">socket_smack</a> *<a class=\"id\" href=\"#ssp\">ssp</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_security\">sk_security</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hostsp\">hostsp</a> = <a class=\"id\" href=\"#smack_host_label\">smack_host_label</a>(<a class=\"id\" href=\"#sap\">sap</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hostsp\">hostsp</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_lbl\">sk_lbl</a> = <a class=\"id\" href=\"#SMACK_UNLABELED_SOCKET\">SMACK_UNLABELED_SOCKET</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_NET\">LSM_AUDIT_DATA_NET</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#net\">net</a>.<a class=\"id\" href=\"#family\">family</a> = <a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#sin_family\">sin_family</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#net\">net</a>.<a class=\"id\" href=\"#dport\">dport</a> = <a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#sin_port\">sin_port</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#net\">net</a>.<a class=\"id\" href=\"#v4info\">v4info</a>.<a class=\"id\" href=\"#daddr\">daddr</a> = <a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#sin_addr\">sin_addr</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_access\">smk_access</a>(<a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_out\">smk_out</a>, <a class=\"id\" href=\"#hostsp\">hostsp</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_lbl\">sk_lbl</a> = <a class=\"id\" href=\"#SMACK_CIPSO_SOCKET\">SMACK_CIPSO_SOCKET</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smack_netlabel\">smack_netlabel</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#sk_lbl\">sk_lbl</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inode_setsecurity - set smack xattrs</span>", 
"<span class=\"comment\"> * @inode: the object</span>", 
"<span class=\"comment\"> * @name: attribute name</span>", 
"<span class=\"comment\"> * @value: attribute value</span>", 
"<span class=\"comment\"> * @size: size of the attribute</span>", 
"<span class=\"comment\"> * @flags: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sets the named attribute in the appropriate blob</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, or an error code</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inode_setsecurity\">smack_inode_setsecurity</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_smack\">inode_smack</a> *<a class=\"id\" href=\"#nsp\">nsp</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket_smack\">socket_smack</a> *<a class=\"id\" href=\"#ssp\">ssp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a> || <a class=\"id\" href=\"#size\">size</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#smk_import\">smk_import</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sp\">sp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_SMACK_SUFFIX\">XATTR_SMACK_SUFFIX</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsp\">nsp</a>-><a class=\"id\" href=\"#smk_inode\">smk_inode</a> = <a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsp\">nsp</a>-><a class=\"id\" href=\"#smk_flags\">smk_flags</a> |= <a class=\"id\" href=\"#SMK_INODE_INSTANT\">SMK_INODE_INSTANT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The rest of the Smack xattrs are only on sockets.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_magic\">s_magic</a> != <a class=\"id\" href=\"#SOCKFS_MAGIC\">SOCKFS_MAGIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#SOCKET_I\">SOCKET_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sock\">sock</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssp\">ssp</a> = <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_security\">sk_security</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_SMACK_IPIN\">XATTR_SMACK_IPIN</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_in\">smk_in</a> = <a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_SMACK_IPOUT\">XATTR_SMACK_IPOUT</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_out\">smk_out</a> = <a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smack_netlabel\">smack_netlabel</a>(<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SMACK_CIPSO_SOCKET\">SMACK_CIPSO_SOCKET</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Smack: \\\"%s\\\" netlbl error %d.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, -<a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_socket_post_create - finish socket setup</span>", 
"<span class=\"comment\"> * @sock: the socket</span>", 
"<span class=\"comment\"> * @family: protocol family</span>", 
"<span class=\"comment\"> * @type: unused</span>", 
"<span class=\"comment\"> * @protocol: unused</span>", 
"<span class=\"comment\"> * @kern: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sets the netlabel information on the socket</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, and error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_socket_post_create\">smack_socket_post_create</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, int <a class=\"id\" href=\"#family\">family</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#protocol\">protocol</a>, int <a class=\"id\" href=\"#kern\">kern</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#family\">family</a> != <a class=\"id\" href=\"#PF_INET\">PF_INET</a> || <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set the outbound netlbl.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smack_netlabel\">smack_netlabel</a>(<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SMACK_CIPSO_SOCKET\">SMACK_CIPSO_SOCKET</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_socket_connect - connect access check</span>", 
"<span class=\"comment\"> * @sock: the socket</span>", 
"<span class=\"comment\"> * @sap: the other end</span>", 
"<span class=\"comment\"> * @addrlen: size of sap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Verifies that a connection may be possible</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, and error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_socket_connect\">smack_socket_connect</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#sap\">sap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#addrlen\">addrlen</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a> != <a class=\"id\" href=\"#PF_INET\">PF_INET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addrlen\">addrlen</a> &lt; sizeof(struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smack_netlabel_send\">smack_netlabel_send</a>(<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>, (struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *)<a class=\"id\" href=\"#sap\">sap</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_flags_to_may - convert S_ to MAY_ values</span>", 
"<span class=\"comment\"> * @flags: the S_ value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the equivalent MAY_ value</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_flags_to_may\">smack_flags_to_may</a>(int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may\">may</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> |= <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#S_IWUGO\">S_IWUGO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> |= <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#S_IXUGO\">S_IXUGO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> |= <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#may\">may</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_msg_msg_alloc_security - Set the security blob for msg_msg</span>", 
"<span class=\"comment\"> * @msg: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_msg_msg_alloc_security\">smack_msg_msg_alloc_security</a>(struct <a class=\"id\" href=\"#msg_msg\">msg_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_msg_msg_free_security - Clear the security blob for msg_msg</span>", 
"<span class=\"comment\"> * @msg: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Clears the blob pointer</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_msg_msg_free_security\">smack_msg_msg_free_security</a>(struct <a class=\"id\" href=\"#msg_msg\">msg_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_of_shm - the smack pointer for the shm</span>", 
"<span class=\"comment\"> * @shp: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer to the smack value</span>", 
"<span class=\"comment\"> */</span>", 
"static char *<a class=\"id\" href=\"#smack_of_shm\">smack_of_shm</a>(struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>)", 
"{", 
"<span class=\"ts\"/>return (char *)<a class=\"id\" href=\"#shp\">shp</a>-><a class=\"id\" href=\"#shm_perm\">shm_perm</a>.<a class=\"id\" href=\"#security\">security</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_shm_alloc_security - Set the security blob for shm</span>", 
"<span class=\"comment\"> * @shp: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_shm_alloc_security\">smack_shm_alloc_security</a>(struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#isp\">isp</a> = &amp;<a class=\"id\" href=\"#shp\">shp</a>-><a class=\"id\" href=\"#shm_perm\">shm_perm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_shm_free_security - Clear the security blob for shm</span>", 
"<span class=\"comment\"> * @shp: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Clears the blob pointer</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_shm_free_security\">smack_shm_free_security</a>(struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#isp\">isp</a> = &amp;<a class=\"id\" href=\"#shp\">shp</a>-><a class=\"id\" href=\"#shm_perm\">shm_perm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_curacc_shm : check if current has access on shm</span>", 
"<span class=\"comment\"> * @shp : the object</span>", 
"<span class=\"comment\"> * @access : access requested</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current has the requested access, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smk_curacc_shm\">smk_curacc_shm</a>(struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>, int <a class=\"id\" href=\"#access\">access</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ssp\">ssp</a> = <a class=\"id\" href=\"#smack_of_shm\">smack_of_shm</a>(<a class=\"id\" href=\"#shp\">shp</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_IPC\">LSM_AUDIT_DATA_IPC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#ipc_id\">ipc_id</a> = <a class=\"id\" href=\"#shp\">shp</a>-><a class=\"id\" href=\"#shm_perm\">shm_perm</a>.<a class=\"id\" href=\"#id\">id</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#ssp\">ssp</a>, <a class=\"id\" href=\"#access\">access</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_shm_associate - Smack access check for shm</span>", 
"<span class=\"comment\"> * @shp: the object</span>", 
"<span class=\"comment\"> * @shmflg: access requested</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current has the requested access, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_shm_associate\">smack_shm_associate</a>(struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>, int <a class=\"id\" href=\"#shmflg\">shmflg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may\">may</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> = <a class=\"id\" href=\"#smack_flags_to_may\">smack_flags_to_may</a>(<a class=\"id\" href=\"#shmflg\">shmflg</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_shm\">smk_curacc_shm</a>(<a class=\"id\" href=\"#shp\">shp</a>, <a class=\"id\" href=\"#may\">may</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_shm_shmctl - Smack access check for shm</span>", 
"<span class=\"comment\"> * @shp: the object</span>", 
"<span class=\"comment\"> * @cmd: what it wants to do</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current has the requested access, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_shm_shmctl\">smack_shm_shmctl</a>(struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may\">may</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_STAT\">IPC_STAT</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SHM_STAT\">SHM_STAT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> = <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_SET\">IPC_SET</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SHM_LOCK\">SHM_LOCK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SHM_UNLOCK\">SHM_UNLOCK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_RMID\">IPC_RMID</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> = <a class=\"id\" href=\"#MAY_READWRITE\">MAY_READWRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_INFO\">IPC_INFO</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SHM_INFO\">SHM_INFO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * System level information.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_shm\">smk_curacc_shm</a>(<a class=\"id\" href=\"#shp\">shp</a>, <a class=\"id\" href=\"#may\">may</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_shm_shmat - Smack access for shmat</span>", 
"<span class=\"comment\"> * @shp: the object</span>", 
"<span class=\"comment\"> * @shmaddr: unused</span>", 
"<span class=\"comment\"> * @shmflg: access requested</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current has the requested access, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_shm_shmat\">smack_shm_shmat</a>(struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#shmaddr\">shmaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#shmflg\">shmflg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may\">may</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> = <a class=\"id\" href=\"#smack_flags_to_may\">smack_flags_to_may</a>(<a class=\"id\" href=\"#shmflg\">shmflg</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_shm\">smk_curacc_shm</a>(<a class=\"id\" href=\"#shp\">shp</a>, <a class=\"id\" href=\"#may\">may</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_of_sem - the smack pointer for the sem</span>", 
"<span class=\"comment\"> * @sma: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer to the smack value</span>", 
"<span class=\"comment\"> */</span>", 
"static char *<a class=\"id\" href=\"#smack_of_sem\">smack_of_sem</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>)", 
"{", 
"<span class=\"ts\"/>return (char *)<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#security\">security</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_sem_alloc_security - Set the security blob for sem</span>", 
"<span class=\"comment\"> * @sma: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_sem_alloc_security\">smack_sem_alloc_security</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#isp\">isp</a> = &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_sem_free_security - Clear the security blob for sem</span>", 
"<span class=\"comment\"> * @sma: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Clears the blob pointer</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_sem_free_security\">smack_sem_free_security</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#isp\">isp</a> = &amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_curacc_sem : check if current has access on sem</span>", 
"<span class=\"comment\"> * @sma : the object</span>", 
"<span class=\"comment\"> * @access : access requested</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current has the requested access, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smk_curacc_sem\">smk_curacc_sem</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>, int <a class=\"id\" href=\"#access\">access</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ssp\">ssp</a> = <a class=\"id\" href=\"#smack_of_sem\">smack_of_sem</a>(<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_IPC\">LSM_AUDIT_DATA_IPC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#ipc_id\">ipc_id</a> = <a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>.<a class=\"id\" href=\"#id\">id</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#ssp\">ssp</a>, <a class=\"id\" href=\"#access\">access</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
];
xr_frag_insert('l/9d/7a70ee482e93c8c6ff158f68047be1d6bc7490.xr', __xr_tmp);
