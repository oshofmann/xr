var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Assembly implementation of the mutex fastpath, based on atomic</span>", 
"<span class=\"comment\"> * decrement/increment.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * started by Ingo Molnar:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004, 2005, 2006 Red Hat, Inc., Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_MUTEX_64_H\">_ASM_X86_MUTEX_64_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_MUTEX_64_H\">_ASM_X86_MUTEX_64_H</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __mutex_fastpath_lock - decrement and call function if negative</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> * @fail_fn: function to call if the result is negative</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically decrements @v and calls &lt;fail_fn&gt; if the result is negative.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__mutex_fastpath_lock\">__mutex_fastpath_lock</a>(<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#fail_fn\">fail_fn</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dummy\">dummy</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typecheck\">typecheck</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *, <a class=\"id\" href=\"#v\">v</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typecheck_fn\">typecheck_fn</a>(void (*)(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *), <a class=\"id\" href=\"#fail_fn\">fail_fn</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"   decl (%%rdi)\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"   jns 1f  \\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"   call \" #<a class=\"id\" href=\"#fail_fn\">fail_fn</a> \"\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"1:\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=D\" (<a class=\"id\" href=\"#dummy\">dummy</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"D\" (<a class=\"id\" href=\"#v\">v</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"rax\", \"rsi\", \"rdx\", \"rcx\",<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"r8\", \"r9\", \"r10\", \"r11\", \"memory\");<span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *  __mutex_fastpath_lock_retval - try to take the lock by moving the count</span>", 
"<span class=\"comment\"> *                                 from 1 to a 0 value</span>", 
"<span class=\"comment\"> *  @count: pointer of type atomic_t</span>", 
"<span class=\"comment\"> *  @fail_fn: function to call if the original value was not 1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Change the count from 1 to a value lower than 1, and call &lt;fail_fn&gt; if</span>", 
"<span class=\"comment\"> * it wasn't 1 originally. This function returns 0 if the fastpath succeeds,</span>", 
"<span class=\"comment\"> * or anything the slow path function returns</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__mutex_fastpath_lock_retval\">__mutex_fastpath_lock_retval</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int (*<a class=\"id\" href=\"#fail_fn\">fail_fn</a>)(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *))", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#atomic_dec_return\">atomic_dec_return</a>(<a class=\"id\" href=\"#count\">count</a>) &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fail_fn\">fail_fn</a>(<a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __mutex_fastpath_unlock - increment and call function if nonpositive</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic_t</span>", 
"<span class=\"comment\"> * @fail_fn: function to call if the result is nonpositive</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically increments @v and calls &lt;fail_fn&gt; if the result is nonpositive.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__mutex_fastpath_unlock\">__mutex_fastpath_unlock</a>(<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#fail_fn\">fail_fn</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dummy\">dummy</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typecheck\">typecheck</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *, <a class=\"id\" href=\"#v\">v</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typecheck_fn\">typecheck_fn</a>(void (*)(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *), <a class=\"id\" href=\"#fail_fn\">fail_fn</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"   incl (%%rdi)\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"   jg 1f\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"   call \" #<a class=\"id\" href=\"#fail_fn\">fail_fn</a> \"\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"1:\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=D\" (<a class=\"id\" href=\"#dummy\">dummy</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"D\" (<a class=\"id\" href=\"#v\">v</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"rax\", \"rsi\", \"rdx\", \"rcx\",<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"r8\", \"r9\", \"r10\", \"r11\", \"memory\");<span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__mutex_slowpath_needs_to_unlock\">__mutex_slowpath_needs_to_unlock</a>()<span class=\"ts\"/>1", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __mutex_fastpath_trylock - try to acquire the mutex, without waiting</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  @count: pointer of type atomic_t</span>", 
"<span class=\"comment\"> *  @fail_fn: fallback function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Change the count from 1 to 0 and return 1 (success), or return 0 (failure)</span>", 
"<span class=\"comment\"> * if it wasn't 1 originally. [the fallback function is never used on</span>", 
"<span class=\"comment\"> * x86_64, because all x86_64 CPUs have a CMPXCHG instruction.]</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__mutex_fastpath_trylock\">__mutex_fastpath_trylock</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int (*<a class=\"id\" href=\"#fail_fn\">fail_fn</a>)(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *))", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(<a class=\"id\" href=\"#count\">count</a>, 1, 0) == 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_MUTEX_64_H */</span>", 
];
xr_frag_insert('l/9e/0e968bf670b44310a2102d69e3c2dd8906ebf7.xr', __xr_tmp);
