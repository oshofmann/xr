var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Directory notifications for Linux.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2000,2001,2002 Stephen Rothwell</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2009 Eric Paris &lt;Red Hat Inc&gt;</span>", 
"<span class=\"comment\"> * dnotify was largly rewritten to use the new fsnotify infrastructure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify it</span>", 
"<span class=\"comment\"> * under the terms of the GNU General Public License as published by the</span>", 
"<span class=\"comment\"> * Free Software Foundation; either version 2, or (at your option) any</span>", 
"<span class=\"comment\"> * later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>", 
"<span class=\"comment\"> * General Public License for more details.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dnotify\">dnotify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fdtable\">fdtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify_backend\">fsnotify_backend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"int <a class=\"id\" href=\"#dir_notify_enable\">dir_notify_enable</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#dnotify_struct_cache\">dnotify_struct_cache</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#dnotify_mark_cache\">dnotify_mark_cache</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#dnotify_group\">dnotify_group</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#dnotify_mark_mutex\">dnotify_mark_mutex</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * dnotify will attach one of these to each inode (i_fsnotify_marks) which</span>", 
"<span class=\"comment\"> * is being watched by dnotify.  If multiple userspace applications are watching</span>", 
"<span class=\"comment\"> * the same directory with dnotify their information is chained in dn</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dnotify_mark\">dnotify_mark</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> <a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dnotify_struct\">dnotify_struct</a> *<a class=\"id\" href=\"#dn\">dn</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When a process starts or stops watching an inode the set of events which</span>", 
"<span class=\"comment\"> * dnotify cares about for that inode may change.  This function runs the</span>", 
"<span class=\"comment\"> * list of everything receiving dnotify events about this directory and calculates</span>", 
"<span class=\"comment\"> * the set of all those events.  After it updates what dnotify is interested in</span>", 
"<span class=\"comment\"> * it calls the fsnotify function so it can update the set of all events relevant</span>", 
"<span class=\"comment\"> * to this inode.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dnotify_recalc_inode_mask\">dnotify_recalc_inode_mask</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#new_mask\">new_mask</a>, <a class=\"id\" href=\"#old_mask\">old_mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dnotify_struct\">dnotify_struct</a> *<a class=\"id\" href=\"#dn\">dn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dnotify_mark\">dnotify_mark</a> *<a class=\"id\" href=\"#dn_mark\">dn_mark</a>  = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#dnotify_mark\">dnotify_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_mask\">old_mask</a> = <a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_mask\">new_mask</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#dn_mark\">dn_mark</a>-><a class=\"id\" href=\"#dn\">dn</a>; <a class=\"id\" href=\"#dn\">dn</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_next\">dn_next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_mask\">new_mask</a> |= (<a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_mask\">dn_mask</a> &amp; ~<a class=\"id\" href=\"#FS_DN_MULTISHOT\">FS_DN_MULTISHOT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_set_mark_mask_locked\">fsnotify_set_mark_mask_locked</a>(<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>, <a class=\"id\" href=\"#new_mask\">new_mask</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_mask\">old_mask</a> == <a class=\"id\" href=\"#new_mask\">new_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_recalc_inode_mask\">fsnotify_recalc_inode_mask</a>(<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Mains fsnotify call where events are delivered to dnotify.</span>", 
"<span class=\"comment\"> * Find the dnotify mark on the relevant inode, run the list of dnotify structs</span>", 
"<span class=\"comment\"> * on that mark and determine which of them has expressed interest in receiving</span>", 
"<span class=\"comment\"> * events of this type.  When found send the correct process and signal and</span>", 
"<span class=\"comment\"> * destroy the dnotify struct if it was not registered to receive multiple</span>", 
"<span class=\"comment\"> * events.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dnotify_handle_event\">dnotify_handle_event</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#inode_mark\">inode_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#vfsmount_mark\">vfsmount_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dnotify_mark\">dnotify_mark</a> *<a class=\"id\" href=\"#dn_mark\">dn_mark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#to_tell\">to_tell</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dnotify_struct\">dnotify_struct</a> *<a class=\"id\" href=\"#dn\">dn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dnotify_struct\">dnotify_struct</a> **<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a> *<a class=\"id\" href=\"#fown\">fown</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#test_mask\">test_mask</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mask\">mask</a> &amp; ~<a class=\"id\" href=\"#FS_EVENT_ON_CHILD\">FS_EVENT_ON_CHILD</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#vfsmount_mark\">vfsmount_mark</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to_tell\">to_tell</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#to_tell\">to_tell</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dn_mark\">dn_mark</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#inode_mark\">inode_mark</a>, struct <a class=\"id\" href=\"#dnotify_mark\">dnotify_mark</a>, <a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_mark\">inode_mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = &amp;<a class=\"id\" href=\"#dn_mark\">dn_mark</a>-><a class=\"id\" href=\"#dn\">dn</a>;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#dn\">dn</a> = *<a class=\"id\" href=\"#prev\">prev</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_mask\">dn_mask</a> &amp; <a class=\"id\" href=\"#test_mask\">test_mask</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = &amp;<a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_next\">dn_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fown\">fown</a> = &amp;<a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_filp\">dn_filp</a>-><a class=\"id\" href=\"#f_owner\">f_owner</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sigio\">send_sigio</a>(<a class=\"id\" href=\"#fown\">fown</a>, <a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_fd\">dn_fd</a>, <a class=\"id\" href=\"#POLL_MSG\">POLL_MSG</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_mask\">dn_mask</a> &amp; <a class=\"id\" href=\"#FS_DN_MULTISHOT\">FS_DN_MULTISHOT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = &amp;<a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_next\">dn_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_next\">dn_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#dnotify_struct_cache\">dnotify_struct_cache</a>, <a class=\"id\" href=\"#dn\">dn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dnotify_recalc_inode_mask\">dnotify_recalc_inode_mask</a>(<a class=\"id\" href=\"#inode_mark\">inode_mark</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_mark\">inode_mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Given an inode and mask determine if dnotify would be interested in sending</span>", 
"<span class=\"comment\"> * userspace notification for that pair.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dnotify_should_send_event\">dnotify_should_send_event</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#inode_mark\">inode_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#vfsmount_mark\">vfsmount_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>, void *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#data_type\">data_type</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* not a dir, dnotify doesn't care */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dnotify_free_mark\">dnotify_free_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dnotify_mark\">dnotify_mark</a> *<a class=\"id\" href=\"#dn_mark\">dn_mark</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#dnotify_mark\">dnotify_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dn_mark\">dn_mark</a>-><a class=\"id\" href=\"#dn\">dn</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#dnotify_mark_cache\">dnotify_mark_cache</a>, <a class=\"id\" href=\"#dn_mark\">dn_mark</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#fsnotify_ops\">fsnotify_ops</a> <a class=\"id\" href=\"#dnotify_fsnotify_ops\">dnotify_fsnotify_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#handle_event\">handle_event</a> = <a class=\"id\" href=\"#dnotify_handle_event\">dnotify_handle_event</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#should_send_event\">should_send_event</a> = <a class=\"id\" href=\"#dnotify_should_send_event\">dnotify_should_send_event</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#free_group_priv\">free_group_priv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#freeing_mark\">freeing_mark</a> = <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#free_event_priv\">free_event_priv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called every time a file is closed.  Looks first for a dnotify mark on the</span>", 
"<span class=\"comment\"> * inode.  If one is found run all of the -&gt;dn structures attached to that</span>", 
"<span class=\"comment\"> * mark for one relevant to this process closing the file and remove that</span>", 
"<span class=\"comment\"> * dnotify_struct.  If that was the last dnotify_struct also remove the</span>", 
"<span class=\"comment\"> * fsnotify_mark.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dnotify_flush\">dnotify_flush</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#fl_owner_t\">fl_owner_t</a> <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dnotify_mark\">dnotify_mark</a> *<a class=\"id\" href=\"#dn_mark\">dn_mark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dnotify_struct\">dnotify_struct</a> *<a class=\"id\" href=\"#dn\">dn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dnotify_struct\">dnotify_struct</a> **<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsn_mark\">fsn_mark</a> = <a class=\"id\" href=\"#fsnotify_find_inode_mark\">fsnotify_find_inode_mark</a>(<a class=\"id\" href=\"#dnotify_group\">dnotify_group</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dn_mark\">dn_mark</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>, struct <a class=\"id\" href=\"#dnotify_mark\">dnotify_mark</a>, <a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dnotify_mark_mutex\">dnotify_mark_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = &amp;<a class=\"id\" href=\"#dn_mark\">dn_mark</a>-><a class=\"id\" href=\"#dn\">dn</a>;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#dn\">dn</a> = *<a class=\"id\" href=\"#prev\">prev</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_owner\">dn_owner</a> == <a class=\"id\" href=\"#id\">id</a>) && (<a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_filp\">dn_filp</a> == <a class=\"id\" href=\"#filp\">filp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_next\">dn_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#dnotify_struct_cache\">dnotify_struct_cache</a>, <a class=\"id\" href=\"#dn\">dn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dnotify_recalc_inode_mask\">dnotify_recalc_inode_mask</a>(<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = &amp;<a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_next\">dn_next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* nothing else could have found us thanks to the dnotify_mark_mutex */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dn_mark\">dn_mark</a>-><a class=\"id\" href=\"#dn\">dn</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_mark\">fsnotify_destroy_mark</a>(<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dnotify_mark_mutex\">dnotify_mark_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>);", 
"}", 
"", 
"<span class=\"comment\">/* this conversion is done only at watch creation */</span>", 
"static <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#convert_arg\">convert_arg</a>(unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#new_mask\">new_mask</a> = <a class=\"id\" href=\"#FS_EVENT_ON_CHILD\">FS_EVENT_ON_CHILD</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a> &amp; <a class=\"id\" href=\"#DN_MULTISHOT\">DN_MULTISHOT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_mask\">new_mask</a> |= <a class=\"id\" href=\"#FS_DN_MULTISHOT\">FS_DN_MULTISHOT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a> &amp; <a class=\"id\" href=\"#DN_DELETE\">DN_DELETE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_mask\">new_mask</a> |= (<a class=\"id\" href=\"#FS_DELETE\">FS_DELETE</a> | <a class=\"id\" href=\"#FS_MOVED_FROM\">FS_MOVED_FROM</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a> &amp; <a class=\"id\" href=\"#DN_MODIFY\">DN_MODIFY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_mask\">new_mask</a> |= <a class=\"id\" href=\"#FS_MODIFY\">FS_MODIFY</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a> &amp; <a class=\"id\" href=\"#DN_ACCESS\">DN_ACCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_mask\">new_mask</a> |= <a class=\"id\" href=\"#FS_ACCESS\">FS_ACCESS</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a> &amp; <a class=\"id\" href=\"#DN_ATTRIB\">DN_ATTRIB</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_mask\">new_mask</a> |= <a class=\"id\" href=\"#FS_ATTRIB\">FS_ATTRIB</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a> &amp; <a class=\"id\" href=\"#DN_RENAME\">DN_RENAME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_mask\">new_mask</a> |= <a class=\"id\" href=\"#FS_DN_RENAME\">FS_DN_RENAME</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a> &amp; <a class=\"id\" href=\"#DN_CREATE\">DN_CREATE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_mask\">new_mask</a> |= (<a class=\"id\" href=\"#FS_CREATE\">FS_CREATE</a> | <a class=\"id\" href=\"#FS_MOVED_TO\">FS_MOVED_TO</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new_mask\">new_mask</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If multiple processes watch the same inode with dnotify there is only one</span>", 
"<span class=\"comment\"> * dnotify mark in inode-&gt;i_fsnotify_marks but we chain a dnotify_struct</span>", 
"<span class=\"comment\"> * onto that mark.  This function either attaches the new dnotify_struct onto</span>", 
"<span class=\"comment\"> * that list, or it |= the mask onto an existing dnofiy_struct.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#attach_dn\">attach_dn</a>(struct <a class=\"id\" href=\"#dnotify_struct\">dnotify_struct</a> *<a class=\"id\" href=\"#dn\">dn</a>, struct <a class=\"id\" href=\"#dnotify_mark\">dnotify_mark</a> *<a class=\"id\" href=\"#dn_mark\">dn_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#fl_owner_t\">fl_owner_t</a> <a class=\"id\" href=\"#id\">id</a>, int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dnotify_struct\">dnotify_struct</a> *<a class=\"id\" href=\"#odn\">odn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#odn\">odn</a> = <a class=\"id\" href=\"#dn_mark\">dn_mark</a>-><a class=\"id\" href=\"#dn\">dn</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#odn\">odn</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* adding more events to existing dnofiy_struct? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#odn\">odn</a>-><a class=\"id\" href=\"#dn_owner\">dn_owner</a> == <a class=\"id\" href=\"#id\">id</a>) && (<a class=\"id\" href=\"#odn\">odn</a>-><a class=\"id\" href=\"#dn_filp\">dn_filp</a> == <a class=\"id\" href=\"#filp\">filp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#odn\">odn</a>-><a class=\"id\" href=\"#dn_fd\">dn_fd</a> = <a class=\"id\" href=\"#fd\">fd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#odn\">odn</a>-><a class=\"id\" href=\"#dn_mask\">dn_mask</a> |= <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#odn\">odn</a> = <a class=\"id\" href=\"#odn\">odn</a>-><a class=\"id\" href=\"#dn_next\">dn_next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_mask\">dn_mask</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_fd\">dn_fd</a> = <a class=\"id\" href=\"#fd\">fd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_filp\">dn_filp</a> = <a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_owner\">dn_owner</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dn\">dn</a>-><a class=\"id\" href=\"#dn_next\">dn_next</a> = <a class=\"id\" href=\"#dn_mark\">dn_mark</a>-><a class=\"id\" href=\"#dn\">dn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dn_mark\">dn_mark</a>-><a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#dn\">dn</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When a process calls fcntl to attach a dnotify watch to a directory it ends</span>", 
"<span class=\"comment\"> * up here.  Allocate both a mark for fsnotify to add and a dnotify_struct to be</span>", 
"<span class=\"comment\"> * attached to the fsnotify_mark.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#fcntl_dirnotify\">fcntl_dirnotify</a>(int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dnotify_mark\">dnotify_mark</a> *<a class=\"id\" href=\"#new_dn_mark\">new_dn_mark</a>, *<a class=\"id\" href=\"#dn_mark\">dn_mark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#new_fsn_mark\">new_fsn_mark</a>, *<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dnotify_struct\">dnotify_struct</a> *<a class=\"id\" href=\"#dn\">dn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fl_owner_t\">fl_owner_t</a> <a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#destroy\">destroy</a> = 0, <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we use these to tell if we need to kfree */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_fsn_mark\">new_fsn_mark</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dir_notify_enable\">dir_notify_enable</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* a 0 mask means we are explicitly removing the watch */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#arg\">arg</a> &amp; ~<a class=\"id\" href=\"#DN_MULTISHOT\">DN_MULTISHOT</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dnotify_flush\">dnotify_flush</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* dnotify only works on directories */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOTDIR\">ENOTDIR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* expect most fcntl to add new rather than augment old */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#dnotify_struct_cache\">dnotify_struct_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dn\">dn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* new fsnotify mark, we expect most fcntl calls to add a new mark */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_dn_mark\">new_dn_mark</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#dnotify_mark_cache\">dnotify_mark_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_dn_mark\">new_dn_mark</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* convert the userspace DN_* \"arg\" to the internal FS_* defines in fsnotify */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#convert_arg\">convert_arg</a>(<a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set up the new_fsn_mark and new_dn_mark */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_fsn_mark\">new_fsn_mark</a> = &amp;<a class=\"id\" href=\"#new_dn_mark\">new_dn_mark</a>-><a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_init_mark\">fsnotify_init_mark</a>(<a class=\"id\" href=\"#new_fsn_mark\">new_fsn_mark</a>, <a class=\"id\" href=\"#dnotify_free_mark\">dnotify_free_mark</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_fsn_mark\">new_fsn_mark</a>-><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_dn_mark\">new_dn_mark</a>-><a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* this is needed to prevent the fcntl/close race described below */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dnotify_mark_mutex\">dnotify_mark_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* add the new_fsn_mark or find an old one. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsn_mark\">fsn_mark</a> = <a class=\"id\" href=\"#fsnotify_find_inode_mark\">fsnotify_find_inode_mark</a>(<a class=\"id\" href=\"#dnotify_group\">dnotify_group</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dn_mark\">dn_mark</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>, struct <a class=\"id\" href=\"#dnotify_mark\">dnotify_mark</a>, <a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_add_mark\">fsnotify_add_mark</a>(<a class=\"id\" href=\"#new_fsn_mark\">new_fsn_mark</a>, <a class=\"id\" href=\"#dnotify_group\">dnotify_group</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#new_fsn_mark\">new_fsn_mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsn_mark\">fsn_mark</a> = <a class=\"id\" href=\"#new_fsn_mark\">new_fsn_mark</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dn_mark\">dn_mark</a> = <a class=\"id\" href=\"#new_dn_mark\">new_dn_mark</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we used new_fsn_mark, so don't free it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fsn_mark\">new_fsn_mark</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#fcheck\">fcheck</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if (f != filp) means that we lost a race and another task/thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * actually closed the fd we are still playing with before we grabbed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the dnotify_mark_mutex and fsn_mark-&gt;lock.  Since closing the fd is the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only time we clean up the marks we need to get our mark off</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the list. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a> != <a class=\"id\" href=\"#filp\">filp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if we added ourselves, shoot ourselves, it's possible that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the flush actually did shoot this fsn_mark.  That's fine too</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * since multiple calls to destroy_mark is perfectly safe, if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we found a dn_mark already attached to the inode, just sod</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * off silently as the flush at close time dealt with it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dn_mark\">dn_mark</a> == <a class=\"id\" href=\"#new_dn_mark\">new_dn_mark</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy\">destroy</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#__f_setown\">__f_setown</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#task_pid\">task_pid</a>(<a class=\"id\" href=\"#current\">current</a>), <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if we added, we must shoot */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dn_mark\">dn_mark</a> == <a class=\"id\" href=\"#new_dn_mark\">new_dn_mark</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy\">destroy</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#attach_dn\">attach_dn</a>(<a class=\"id\" href=\"#dn\">dn</a>, <a class=\"id\" href=\"#dn_mark\">dn_mark</a>, <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* !error means that we attached the dn to the dn_mark, so don't free it */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* -EEXIST means that we didn't add this new dn and used an old one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that isn't an error (and the unused dn should be freed) */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dnotify_recalc_inode_mask\">dnotify_recalc_inode_mask</a>(<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#destroy\">destroy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_mark\">fsnotify_destroy_mark</a>(<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dnotify_mark_mutex\">dnotify_mark_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>);", 
"<a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_fsn_mark\">new_fsn_mark</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#new_fsn_mark\">new_fsn_mark</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dn\">dn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#dnotify_struct_cache\">dnotify_struct_cache</a>, <a class=\"id\" href=\"#dn\">dn</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dnotify_init\">dnotify_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dnotify_struct_cache\">dnotify_struct_cache</a> = <a class=\"id\" href=\"#KMEM_CACHE\">KMEM_CACHE</a>(<a class=\"id\" href=\"#dnotify_struct\">dnotify_struct</a>, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dnotify_mark_cache\">dnotify_mark_cache</a> = <a class=\"id\" href=\"#KMEM_CACHE\">KMEM_CACHE</a>(<a class=\"id\" href=\"#dnotify_mark\">dnotify_mark</a>, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dnotify_group\">dnotify_group</a> = <a class=\"id\" href=\"#fsnotify_alloc_group\">fsnotify_alloc_group</a>(&amp;<a class=\"id\" href=\"#dnotify_fsnotify_ops\">dnotify_fsnotify_ops</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#dnotify_group\">dnotify_group</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"unable to allocate fsnotify group for dnotify\\n\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#dnotify_init\">dnotify_init</a>)", 
];
xr_frag_insert('l/9e/64cb41c97ac1ac4efc2fa36ae06f1d49e7d263.xr', __xr_tmp);
