var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Mutexes: blocking mutual exclusion locks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * started by Ingo Molnar:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004, 2005, 2006 Red Hat, Inc., Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file contains the main data structure and API definitions.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_MUTEX_H\">__LINUX_MUTEX_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_MUTEX_H\">__LINUX_MUTEX_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock_types\">spinlock_types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#linkage\">linkage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#lockdep\">lockdep</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Simple, straightforward mutexes with strict semantics:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * - only one task can hold the mutex at a time</span>", 
"<span class=\"comment\"> * - only the owner can unlock the mutex</span>", 
"<span class=\"comment\"> * - multiple unlocks are not permitted</span>", 
"<span class=\"comment\"> * - recursive locking is not permitted</span>", 
"<span class=\"comment\"> * - a mutex object must be initialized via the API</span>", 
"<span class=\"comment\"> * - a mutex object must not be initialized via memset or copying</span>", 
"<span class=\"comment\"> * - task may not exit with mutex held</span>", 
"<span class=\"comment\"> * - memory areas where held locks reside must not be freed</span>", 
"<span class=\"comment\"> * - held mutexes must not be reinitialized</span>", 
"<span class=\"comment\"> * - mutexes may not be used in hardware or software interrupt</span>", 
"<span class=\"comment\"> *   contexts such as tasklets and timers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These semantics are fully enforced when DEBUG_MUTEXES is</span>", 
"<span class=\"comment\"> * enabled. Furthermore, besides enforcing the above rules, the mutex</span>", 
"<span class=\"comment\"> * debugging code also implements a number of additional features</span>", 
"<span class=\"comment\"> * that make lock debugging easier and faster:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * - uses symbolic names of mutexes, whenever they are printed in debug output</span>", 
"<span class=\"comment\"> * - point-of-acquire tracking, symbolic lookup of function names</span>", 
"<span class=\"comment\"> * - list of all locks held in the system, printout of them</span>", 
"<span class=\"comment\"> * - owner tracking</span>", 
"<span class=\"comment\"> * - detects self-recursing locks and prints out all relevant info</span>", 
"<span class=\"comment\"> * - detects multi-task circular deadlocks and prints out all affected</span>", 
"<span class=\"comment\"> *   locks and tasks (and only those tasks)</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mutex\">mutex</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* 1: unlocked, 0: locked, negative: locked, possible waiters */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_lock\">wait_lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#wait_list\">wait_list</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_MUTEXES\">CONFIG_DEBUG_MUTEXES</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>)", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_info\">thread_info</a><span class=\"ts\"/>*<a class=\"id\" href=\"#owner\">owner</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_MUTEXES\">CONFIG_DEBUG_MUTEXES</a>", 
"<span class=\"ts\"/>const char <span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#magic\">magic</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a><span class=\"ts\"/><a class=\"id\" href=\"#dep_map\">dep_map</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the control structure for tasks blocked on mutex,</span>", 
"<span class=\"comment\"> * which resides on the blocked task's kernel stack:</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mutex_waiter\">mutex_waiter</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#task\">task</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_MUTEXES\">CONFIG_DEBUG_MUTEXES</a>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#magic\">magic</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_MUTEXES\">CONFIG_DEBUG_MUTEXES</a>", 
"# <a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>-<a class=\"id\" href=\"#debug\">debug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__DEBUG_MUTEX_INITIALIZER\">__DEBUG_MUTEX_INITIALIZER</a>(<a class=\"id\" href=\"#lockname\">lockname</a>)", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mutex_init - initialize the mutex</span>", 
"<span class=\"comment\"> * @mutex: the mutex to be initialized</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initialize the mutex to unlocked state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is not allowed to initialize an already locked mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mutex_init\">mutex_init</a>(<a class=\"id\" href=\"#mutex\">mutex</a>) \\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#__key\">__key</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mutex_init\">__mutex_init</a>((<a class=\"id\" href=\"#mutex\">mutex</a>), #<a class=\"id\" href=\"#mutex\">mutex</a>, &amp;<a class=\"id\" href=\"#__key\">__key</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mutex_destroy\">mutex_destroy</a>(<a class=\"id\" href=\"#mutex\">mutex</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__DEP_MAP_MUTEX_INITIALIZER\">__DEP_MAP_MUTEX_INITIALIZER</a>(<a class=\"id\" href=\"#lockname\">lockname</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>, .<a class=\"id\" href=\"#dep_map\">dep_map</a> = { .<a class=\"id\" href=\"#name\">name</a> = #<a class=\"id\" href=\"#lockname\">lockname</a> }", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__DEP_MAP_MUTEX_INITIALIZER\">__DEP_MAP_MUTEX_INITIALIZER</a>(<a class=\"id\" href=\"#lockname\">lockname</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__MUTEX_INITIALIZER\">__MUTEX_INITIALIZER</a>(<a class=\"id\" href=\"#lockname\">lockname</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(1) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>, .<a class=\"id\" href=\"#wait_lock\">wait_lock</a> = <a class=\"id\" href=\"#__SPIN_LOCK_UNLOCKED\">__SPIN_LOCK_UNLOCKED</a>(<a class=\"id\" href=\"#lockname\">lockname</a>.<a class=\"id\" href=\"#wait_lock\">wait_lock</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>, .<a class=\"id\" href=\"#wait_list\">wait_list</a> = <a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>(<a class=\"id\" href=\"#lockname\">lockname</a>.<a class=\"id\" href=\"#wait_list\">wait_list</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__DEBUG_MUTEX_INITIALIZER\">__DEBUG_MUTEX_INITIALIZER</a>(<a class=\"id\" href=\"#lockname\">lockname</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__DEP_MAP_MUTEX_INITIALIZER\">__DEP_MAP_MUTEX_INITIALIZER</a>(<a class=\"id\" href=\"#lockname\">lockname</a>) }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#mutexname\">mutexname</a>) \\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#mutexname\">mutexname</a> = <a class=\"id\" href=\"#__MUTEX_INITIALIZER\">__MUTEX_INITIALIZER</a>(<a class=\"id\" href=\"#mutexname\">mutexname</a>)", 
"", 
"extern void <a class=\"id\" href=\"#__mutex_init\">__mutex_init</a>(struct <a class=\"id\" href=\"#mutex\">mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mutex_is_locked - is the mutex locked</span>", 
"<span class=\"comment\"> * @lock: the mutex to be queried</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1 if the mutex is locked, 0 if unlocked.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(struct <a class=\"id\" href=\"#mutex\">mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>-><a class=\"id\" href=\"#count\">count</a>) != 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * See kernel/mutex.c for detailed documentation of these APIs.</span>", 
"<span class=\"comment\"> * Also see Documentation/mutex-design.txt.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"extern void <a class=\"id\" href=\"#mutex_lock_nested\">mutex_lock_nested</a>(struct <a class=\"id\" href=\"#mutex\">mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>, unsigned int <a class=\"id\" href=\"#subclass\">subclass</a>);", 
"extern int <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#mutex_lock_interruptible_nested\">mutex_lock_interruptible_nested</a>(struct <a class=\"id\" href=\"#mutex\">mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#subclass\">subclass</a>);", 
"extern int <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#mutex_lock_killable_nested\">mutex_lock_killable_nested</a>(struct <a class=\"id\" href=\"#mutex\">mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#subclass\">subclass</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>) <a class=\"id\" href=\"#mutex_lock_nested\">mutex_lock_nested</a>(<a class=\"id\" href=\"#lock\">lock</a>, 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(<a class=\"id\" href=\"#lock\">lock</a>) <a class=\"id\" href=\"#mutex_lock_interruptible_nested\">mutex_lock_interruptible_nested</a>(<a class=\"id\" href=\"#lock\">lock</a>, 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mutex_lock_killable\">mutex_lock_killable</a>(<a class=\"id\" href=\"#lock\">lock</a>) <a class=\"id\" href=\"#mutex_lock_killable_nested\">mutex_lock_killable_nested</a>(<a class=\"id\" href=\"#lock\">lock</a>, 0)", 
"#else", 
"extern void <a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(struct <a class=\"id\" href=\"#mutex\">mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"extern int <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(struct <a class=\"id\" href=\"#mutex\">mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"extern int <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#mutex_lock_killable\">mutex_lock_killable</a>(struct <a class=\"id\" href=\"#mutex\">mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mutex_lock_nested\">mutex_lock_nested</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#subclass\">subclass</a>) <a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mutex_lock_interruptible_nested\">mutex_lock_interruptible_nested</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#subclass\">subclass</a>) <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mutex_lock_killable_nested\">mutex_lock_killable_nested</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#subclass\">subclass</a>) <a class=\"id\" href=\"#mutex_lock_killable\">mutex_lock_killable</a>(<a class=\"id\" href=\"#lock\">lock</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTE: mutex_trylock() follows the spin_trylock() convention,</span>", 
"<span class=\"comment\"> *       not the down_trylock() convention!</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1 if the mutex has been acquired successfully, and 0 on contention.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#mutex_trylock\">mutex_trylock</a>(struct <a class=\"id\" href=\"#mutex\">mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"extern void <a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(struct <a class=\"id\" href=\"#mutex\">mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"extern int <a class=\"id\" href=\"#atomic_dec_and_mutex_lock\">atomic_dec_and_mutex_lock</a>(<a class=\"id\" href=\"#atomic_t\">atomic_t</a> *<a class=\"id\" href=\"#cnt\">cnt</a>, struct <a class=\"id\" href=\"#mutex\">mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/9e/7c2b2ac1520071f6ca0143d0d9309a0143919b.xr', __xr_tmp);
