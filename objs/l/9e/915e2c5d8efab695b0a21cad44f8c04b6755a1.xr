var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/ext3/balloc.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1992, 1993, 1994, 1995</span>", 
"<span class=\"comment\"> * Remy Card (card@masi.ibp.fr)</span>", 
"<span class=\"comment\"> * Laboratoire MASI - Institut Blaise Pascal</span>", 
"<span class=\"comment\"> * Universite Pierre et Marie Curie (Paris VI)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Enhanced block allocation by Stephen Tweedie (sct@redhat.com), 1993</span>", 
"<span class=\"comment\"> *  Big-endian to little-endian byte-swapping/bitmaps by</span>", 
"<span class=\"comment\"> *        David S. Miller (davem@caip.rutgers.edu), 1995</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jbd\">jbd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ext3_fs\">ext3_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ext3_jbd\">ext3_jbd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#quotaops\">quotaops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * balloc.c contains the blocks allocation and deallocation routines</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The free blocks are managed by bitmaps.  A file system contains several</span>", 
"<span class=\"comment\"> * blocks groups.  Each group contains 1 bitmap block for blocks, 1 bitmap</span>", 
"<span class=\"comment\"> * block for inodes, N blocks for the inode table and data blocks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The file system contains group descriptors which are located after the</span>", 
"<span class=\"comment\"> * super block.  Each descriptor contains the number of the bitmap block and</span>", 
"<span class=\"comment\"> * the free blocks count in the block.  The descriptors are loaded in memory</span>", 
"<span class=\"comment\"> * when a file system is mounted (see ext3_fill_super).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#in_range\">in_range</a>(<a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#len\">len</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#b\">b</a>) >= (<a class=\"id\" href=\"#first\">first</a>) && (<a class=\"id\" href=\"#b\">b</a>) <= (<a class=\"id\" href=\"#first\">first</a>) + (<a class=\"id\" href=\"#len\">len</a>) - 1)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext3_get_group_desc() -- load group descriptor from disk</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>super block</span>", 
"<span class=\"comment\"> * @block_group:<span class=\"ts\"/>given block group</span>", 
"<span class=\"comment\"> * @bh:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>pointer to the buffer head to store the block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>group descriptor</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ext3_group_desc\">ext3_group_desc</a> * <a class=\"id\" href=\"#ext3_get_group_desc\">ext3_get_group_desc</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#block_group\">block_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> ** <a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#group_desc\">group_desc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_group_desc\">ext3_group_desc</a> * <a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_sb_info\">ext3_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#block_group\">block_group</a> >= <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a> (<a class=\"id\" href=\"#sb\">sb</a>, \"ext3_get_group_desc\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block_group >= groups_count - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block_group = %d, groups_count = %lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_desc\">group_desc</a> = <a class=\"id\" href=\"#block_group\">block_group</a> >> <a class=\"id\" href=\"#EXT3_DESC_PER_BLOCK_BITS\">EXT3_DESC_PER_BLOCK_BITS</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#block_group\">block_group</a> &amp; (<a class=\"id\" href=\"#EXT3_DESC_PER_BLOCK\">EXT3_DESC_PER_BLOCK</a>(<a class=\"id\" href=\"#sb\">sb</a>) - 1);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_desc\">s_group_desc</a>[<a class=\"id\" href=\"#group_desc\">group_desc</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a> (<a class=\"id\" href=\"#sb\">sb</a>, \"ext3_get_group_desc\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Group descriptor not loaded - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block_group = %d, group_desc = %lu, desc = %lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#group_desc\">group_desc</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = (struct <a class=\"id\" href=\"#ext3_group_desc\">ext3_group_desc</a> *) <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_desc\">s_group_desc</a>[<a class=\"id\" href=\"#group_desc\">group_desc</a>]-><a class=\"id\" href=\"#b_data\">b_data</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_desc\">s_group_desc</a>[<a class=\"id\" href=\"#group_desc\">group_desc</a>];", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#desc\">desc</a> + <a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext3_valid_block_bitmap\">ext3_valid_block_bitmap</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_group_desc\">ext3_group_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#block_group\">block_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#next_zero_bit\">next_zero_bit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_first_block\">group_first_block</a> = <a class=\"id\" href=\"#ext3_group_first_block_no\">ext3_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check whether block bitmap block number is set */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_block_bitmap\">bg_block_bitmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a> - <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext3_test_bit\">ext3_test_bit</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* bad block bitmap */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check whether the inode bitmap block number is set */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_inode_bitmap\">bg_inode_bitmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a> - <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext3_test_bit\">ext3_test_bit</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* bad block bitmap */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check whether the inode table block number is set */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_inode_table\">bg_inode_table</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a> - <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_zero_bit\">next_zero_bit</a> = <a class=\"id\" href=\"#ext3_find_next_zero_bit\">ext3_find_next_zero_bit</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_itb_per_group\">s_itb_per_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next_zero_bit\">next_zero_bit</a> >= <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_itb_per_group\">s_itb_per_group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* good bitmap for inode tables */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Invalid block bitmap - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"block_group = %d, block = %lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * read_block_bitmap()</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>super block</span>", 
"<span class=\"comment\"> * @block_group:<span class=\"ts\"/>given block group</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Read the bitmap for a given block_group,and validate the</span>", 
"<span class=\"comment\"> * bits for block/inode/inode tables are set in the bitmaps</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return buffer_head on success or NULL in case of failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *", 
"<a class=\"id\" href=\"#read_block_bitmap\">read_block_bitmap</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, unsigned int <a class=\"id\" href=\"#block_group\">block_group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_group_desc\">ext3_group_desc</a> * <a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext3_get_group_desc\">ext3_get_group_desc</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_block_bitmap\">bg_block_bitmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_getblk\">sb_getblk</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Cannot read block bitmap - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block_group = %d, block_bitmap = %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_block_bitmap\">bg_block_bitmap</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#bh_uptodate_or_lock\">bh_uptodate_or_lock</a>(<a class=\"id\" href=\"#bh\">bh</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bh_submit_read\">bh_submit_read</a>(<a class=\"id\" href=\"#bh\">bh</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Cannot read block bitmap - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block_group = %d, block_bitmap = %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_block_bitmap\">bg_block_bitmap</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_valid_block_bitmap\">ext3_valid_block_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * file system mounted not to panic on error, continue with corrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bitmap</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The reservation window structure operations</span>", 
"<span class=\"comment\"> * --------------------------------------------</span>", 
"<span class=\"comment\"> * Operations include:</span>", 
"<span class=\"comment\"> * dump, find, add, remove, is_empty, find_next_reservable_window, etc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We use a red-black tree to represent per-filesystem reservation</span>", 
"<span class=\"comment\"> * windows.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __rsv_window_dump() -- Dump the filesystem block allocation reservation map</span>", 
"<span class=\"comment\"> * @rb_root:<span class=\"ts\"/><span class=\"ts\"/>root of per-filesystem reservation rb tree</span>", 
"<span class=\"comment\"> * @verbose:<span class=\"ts\"/><span class=\"ts\"/>verbose mode</span>", 
"<span class=\"comment\"> * @fn:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>function which wishes to dump the reservation map</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If verbose is turned on, it will print the whole block reservation</span>", 
"<span class=\"comment\"> * windows(start, end).<span class=\"ts\"/>Otherwise, it will only print out the \"bad\" windows,</span>", 
"<span class=\"comment\"> * those windows that overlap with their immediate neighbors.</span>", 
"<span class=\"comment\"> */</span>", 
"#if 1", 
"static void <a class=\"id\" href=\"#__rsv_window_dump\">__rsv_window_dump</a>(struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *<a class=\"id\" href=\"#root\">root</a>, int <a class=\"id\" href=\"#verbose\">verbose</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#fn\">fn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *<a class=\"id\" href=\"#rsv\">rsv</a>, *<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bad\">bad</a>;", 
"", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#rb_first\">rb_first</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bad\">bad</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Block Allocation Reservation Windows Map (%s):\\n\", <a class=\"id\" href=\"#fn\">fn</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a>, <a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#verbose\">verbose</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"reservation window 0x%p \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"start:  %lu, end:  %lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#rsv\">rsv</a>, <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a>, <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> && <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> >= <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Bad reservation %p (start >= end)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#rsv\">rsv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad\">bad</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> && <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> >= <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Bad reservation %p (prev->end >= start)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#rsv\">rsv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad\">bad</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bad\">bad</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#verbose\">verbose</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Restarting reservation walk in verbose mode\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#verbose\">verbose</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#rsv\">rsv</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Window map complete.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#bad\">bad</a>);", 
"}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rsv_window_dump\">rsv_window_dump</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#verbose\">verbose</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rsv_window_dump\">__rsv_window_dump</a>((<a class=\"id\" href=\"#root\">root</a>), (<a class=\"id\" href=\"#verbose\">verbose</a>), <a class=\"id\" href=\"#__func__\">__func__</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rsv_window_dump\">rsv_window_dump</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#verbose\">verbose</a>) do {} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * goal_in_my_reservation()</span>", 
"<span class=\"comment\"> * @rsv:<span class=\"ts\"/><span class=\"ts\"/>inode's reservation window</span>", 
"<span class=\"comment\"> * @grp_goal:<span class=\"ts\"/><span class=\"ts\"/>given goal block relative to the allocation block group</span>", 
"<span class=\"comment\"> * @group:<span class=\"ts\"/><span class=\"ts\"/>the current allocation block group</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>filesystem super block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Test if the given goal block (group relative) is within the file's</span>", 
"<span class=\"comment\"> * own block reservation window range.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the reservation window is outside the goal allocation group, return 0;</span>", 
"<span class=\"comment\"> * grp_goal (given goal block) could be -1, which means no specific</span>", 
"<span class=\"comment\"> * goal block. In this case, always return 1.</span>", 
"<span class=\"comment\"> * If the goal block is within the reservation window, return 1;</span>", 
"<span class=\"comment\"> * otherwise, return 0;</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#goal_in_my_reservation\">goal_in_my_reservation</a>(struct <a class=\"id\" href=\"#ext3_reserve_window\">ext3_reserve_window</a> *<a class=\"id\" href=\"#rsv\">rsv</a>, <a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#grp_goal\">grp_goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#group_first_block\">group_first_block</a>, <a class=\"id\" href=\"#group_last_block\">group_last_block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_first_block\">group_first_block</a> = <a class=\"id\" href=\"#ext3_group_first_block_no\">ext3_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_last_block\">group_last_block</a> = <a class=\"id\" href=\"#group_first_block\">group_first_block</a> + (<a class=\"id\" href=\"#EXT3_BLOCKS_PER_GROUP\">EXT3_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>) - 1);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#_rsv_start\">_rsv_start</a> &gt; <a class=\"id\" href=\"#group_last_block\">group_last_block</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#_rsv_end\">_rsv_end</a> &lt; <a class=\"id\" href=\"#group_first_block\">group_first_block</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#grp_goal\">grp_goal</a> >= 0) && ((<a class=\"id\" href=\"#grp_goal\">grp_goal</a> + <a class=\"id\" href=\"#group_first_block\">group_first_block</a> &lt; <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#_rsv_start\">_rsv_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>|| (<a class=\"id\" href=\"#grp_goal\">grp_goal</a> + <a class=\"id\" href=\"#group_first_block\">group_first_block</a> &gt; <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#_rsv_end\">_rsv_end</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * search_reserve_window()</span>", 
"<span class=\"comment\"> * @rb_root:<span class=\"ts\"/><span class=\"ts\"/>root of reservation tree</span>", 
"<span class=\"comment\"> * @goal:<span class=\"ts\"/><span class=\"ts\"/>target allocation block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find the reserved window which includes the goal, or the previous one</span>", 
"<span class=\"comment\"> * if the goal is not in any window.</span>", 
"<span class=\"comment\"> * Returns NULL if there are no windows or if all windows start after the goal.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *", 
"<a class=\"id\" href=\"#search_reserve_window\">search_reserve_window</a>(struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *<a class=\"id\" href=\"#rsv\">rsv</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a>, <a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#goal\">goal</a> &lt; <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#goal\">goal</a> &gt; <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rsv\">rsv</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We've fallen off the end of the tree: the goal wasn't inside</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any particular node.  OK, the previous node must be to one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * side of the interval containing the goal.  If it's the RHS,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we need to back up one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> &gt; <a class=\"id\" href=\"#goal\">goal</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#rb_prev\">rb_prev</a>(&amp;<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a>, <a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rsv\">rsv</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext3_rsv_window_add() -- Insert a window to the block reservation rb tree.</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>super block</span>", 
"<span class=\"comment\"> * @rsv:<span class=\"ts\"/><span class=\"ts\"/>reservation window to add</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with rsv_lock hold.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext3_rsv_window_add\">ext3_rsv_window_add</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *<a class=\"id\" href=\"#rsv\">rsv</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *<a class=\"id\" href=\"#root\">root</a> = &amp;<a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_rsv_window_root\">s_rsv_window_root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#node\">node</a> = &amp;<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_node\">rsv_node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> ** <a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> * <a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *<a class=\"id\" href=\"#this\">this</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a>, <a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv_window_dump\">rsv_window_dump</a>(<a class=\"id\" href=\"#root\">root</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#root\">root</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext3_rsv_window_remove() -- unlink a window from the reservation rb tree</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>super block</span>", 
"<span class=\"comment\"> * @rsv:<span class=\"ts\"/><span class=\"ts\"/>reservation window to remove</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mark the block reservation window as not allocated, and unlink it</span>", 
"<span class=\"comment\"> * from the filesystem reservation window rb tree. Must be called with</span>", 
"<span class=\"comment\"> * rsv_lock hold.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rsv_window_remove\">rsv_window_remove</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *<a class=\"id\" href=\"#rsv\">rsv</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> = <a class=\"id\" href=\"#EXT3_RESERVE_WINDOW_NOT_ALLOCATED\">EXT3_RESERVE_WINDOW_NOT_ALLOCATED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> = <a class=\"id\" href=\"#EXT3_RESERVE_WINDOW_NOT_ALLOCATED\">EXT3_RESERVE_WINDOW_NOT_ALLOCATED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_alloc_hit\">rsv_alloc_hit</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_node\">rsv_node</a>, &amp;<a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_rsv_window_root\">s_rsv_window_root</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rsv_is_empty() -- Check if the reservation window is allocated.</span>", 
"<span class=\"comment\"> * @rsv:<span class=\"ts\"/><span class=\"ts\"/>given reservation window to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * returns 1 if the end block is EXT3_RESERVE_WINDOW_NOT_ALLOCATED.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(struct <a class=\"id\" href=\"#ext3_reserve_window\">ext3_reserve_window</a> *<a class=\"id\" href=\"#rsv\">rsv</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* a valid reservation end block could not be 0 */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#_rsv_end\">_rsv_end</a> == <a class=\"id\" href=\"#EXT3_RESERVE_WINDOW_NOT_ALLOCATED\">EXT3_RESERVE_WINDOW_NOT_ALLOCATED</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext3_init_block_alloc_info()</span>", 
"<span class=\"comment\"> * @inode:<span class=\"ts\"/><span class=\"ts\"/>file inode structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate and initialize the<span class=\"ts\"/>reservation window structure, and</span>", 
"<span class=\"comment\"> * link the window to the ext3 inode structure at last</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The reservation window structure is only dynamically allocated</span>", 
"<span class=\"comment\"> * and linked to ext3 inode the first time the open file</span>", 
"<span class=\"comment\"> * needs a new block. So, before every ext3_new_block(s) call, for</span>", 
"<span class=\"comment\"> * regular files, we should check whether the reservation window</span>", 
"<span class=\"comment\"> * structure exists or not. In the latter case, this function is called.</span>", 
"<span class=\"comment\"> * Fail to do so will result in block reservation being turned off for that</span>", 
"<span class=\"comment\"> * open file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called from ext3_get_blocks_handle(), also called</span>", 
"<span class=\"comment\"> * when setting the reservation window size through ioctl before the file</span>", 
"<span class=\"comment\"> * is open for write (needs block allocation).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Needs truncate_mutex protection prior to call this function.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext3_init_block_alloc_info\">ext3_init_block_alloc_info</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_inode_info\">ext3_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_block_alloc_info\">ext3_block_alloc_info</a> *<a class=\"id\" href=\"#block_i\">block_i</a> = <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#block_i\">block_i</a>), <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#block_i\">block_i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *<a class=\"id\" href=\"#rsv\">rsv</a> = &amp;<a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#rsv_window_node\">rsv_window_node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> = <a class=\"id\" href=\"#EXT3_RESERVE_WINDOW_NOT_ALLOCATED\">EXT3_RESERVE_WINDOW_NOT_ALLOCATED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> = <a class=\"id\" href=\"#EXT3_RESERVE_WINDOW_NOT_ALLOCATED\">EXT3_RESERVE_WINDOW_NOT_ALLOCATED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if filesystem is mounted with NORESERVATION, the goal</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reservation window size is set to zero to indicate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * block reservation is off</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_opt\">test_opt</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#RESERVATION\">RESERVATION</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a> = <a class=\"id\" href=\"#EXT3_DEFAULT_RESERVE_BLOCKS\">EXT3_DEFAULT_RESERVE_BLOCKS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_alloc_hit\">rsv_alloc_hit</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#last_alloc_logical_block\">last_alloc_logical_block</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#last_alloc_physical_block\">last_alloc_physical_block</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a> = <a class=\"id\" href=\"#block_i\">block_i</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext3_discard_reservation()</span>", 
"<span class=\"comment\"> * @inode:<span class=\"ts\"/><span class=\"ts\"/>inode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Discard(free) block reservation window on last file close, or truncate</span>", 
"<span class=\"comment\"> * or at last iput().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is being called in three cases:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_release_file(): last writer close the file</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_clear_inode(): last iput(), when nobody link to this file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext3_truncate(): when the block indirect map is about to change.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext3_discard_reservation\">ext3_discard_reservation</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_inode_info\">ext3_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_block_alloc_info\">ext3_block_alloc_info</a> *<a class=\"id\" href=\"#block_i\">block_i</a> = <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_reserve_window_node\">ext3_reserve_window_node</a> *<a class=\"id\" href=\"#rsv\">rsv</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a> = &amp;<a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_rsv_window_lock\">s_rsv_window_lock</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#block_i\">block_i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a> = &amp;<a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#rsv_window_node\">rsv_window_node</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv_window_remove\">rsv_window_remove</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#rsv\">rsv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext3_free_blocks_sb() -- Free given blocks and update quota</span>", 
"<span class=\"comment\"> * @handle:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>handle to this transaction</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>super block</span>", 
"<span class=\"comment\"> * @block:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>start physcial block to free</span>", 
"<span class=\"comment\"> * @count:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>number of blocks to free</span>", 
"<span class=\"comment\"> * @pdquot_freed_blocks:<span class=\"ts\"/>pointer to quota</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext3_free_blocks_sb\">ext3_free_blocks_sb</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#block\">block</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long *<a class=\"id\" href=\"#pdquot_freed_blocks\">pdquot_freed_blocks</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#gd_bh\">gd_bh</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#block_group\">block_group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#overflow\">overflow</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_group_desc\">ext3_group_desc</a> * <a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_super_block\">ext3_super_block</a> * <a class=\"id\" href=\"#es\">es</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_sb_info\">ext3_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0, <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#group_freed\">group_freed</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pdquot_freed_blocks\">pdquot_freed_blocks</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#es\">es</a> = <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_es\">s_es</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#block\">block</a> &lt; <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#block\">block</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_blocks_count\">s_blocks_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a> (<a class=\"id\" href=\"#sb\">sb</a>, \"ext3_free_blocks\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Freeing blocks not in datazone - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block = \"<a class=\"id\" href=\"#E3FSBLK\">E3FSBLK</a>\", count = %lu\", <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_debug\">ext3_debug</a> (\"freeing block(s) %lu-%lu\\n\", <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#count\">count</a> - 1);", 
"", 
"<a class=\"id\" href=\"#do_more\">do_more</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#overflow\">overflow</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a> = (<a class=\"id\" href=\"#block\">block</a> - <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>)) /", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#EXT3_BLOCKS_PER_GROUP\">EXT3_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = (<a class=\"id\" href=\"#block\">block</a> - <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>)) %", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#EXT3_BLOCKS_PER_GROUP\">EXT3_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check to see if we are freeing blocks across a group</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * boundary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bit\">bit</a> + <a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#EXT3_BLOCKS_PER_GROUP\">EXT3_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#overflow\">overflow</a> = <a class=\"id\" href=\"#bit\">bit</a> + <a class=\"id\" href=\"#count\">count</a> - <a class=\"id\" href=\"#EXT3_BLOCKS_PER_GROUP\">EXT3_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#overflow\">overflow</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#read_block_bitmap\">read_block_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext3_get_group_desc\">ext3_get_group_desc</a> (<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>, &amp;<a class=\"id\" href=\"#gd_bh\">gd_bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_range\">in_range</a> (<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_block_bitmap\">bg_block_bitmap</a>), <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#count\">count</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#in_range\">in_range</a> (<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_inode_bitmap\">bg_inode_bitmap</a>), <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#count\">count</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#in_range\">in_range</a> (<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_inode_table\">bg_inode_table</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_itb_per_group\">s_itb_per_group</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#in_range\">in_range</a> (<a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#count\">count</a> - 1, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_inode_table\">bg_inode_table</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_itb_per_group\">s_itb_per_group</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a> (<a class=\"id\" href=\"#sb\">sb</a>, \"ext3_free_blocks\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Freeing blocks in system zones - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Block = \"<a class=\"id\" href=\"#E3FSBLK\">E3FSBLK</a>\", count = %lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are about to start releasing blocks in the bitmap,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so we need undo access.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* @@@ check errors */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, \"getting undo access\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_get_undo_access\">ext3_journal_get_undo_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are about to modify some metadata.  Call the journal APIs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to unshare -&gt;b_data if a currently-committing transaction is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * using it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#gd_bh\">gd_bh</a>, \"get_write_access\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_get_write_access\">ext3_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#gd_bh\">gd_bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#group_freed\">group_freed</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * An HJ special.  This is expensive...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_JBD_DEBUG\">CONFIG_JBD_DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#debug_bh\">debug_bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_bh\">debug_bh</a> = <a class=\"id\" href=\"#sb_find_get_block\">sb_find_get_block</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#debug_bh\">debug_bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#debug_bh\">debug_bh</a>, \"Deleted!\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#debug_bh\">debug_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"No commited data in bitmap\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE2\">BUFFER_TRACE2</a>(<a class=\"id\" href=\"#debug_bh\">debug_bh</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, \"bitmap\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#debug_bh\">debug_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#need_resched\">need_resched</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* @@@ This prevents newly-allocated data from being</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * freed and then reallocated within the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * transaction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ideally we would want to allow that to happen, but to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * do so requires making journal_forget() capable of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * revoking the queued write of a data block, which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * implies blocking on the journal lock.  *forget()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cannot block due to truncate races.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Eventually we can fix this by making journal_forget()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * return a status indicating whether or not it was able</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to revoke the buffer.  On successful revoke, it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * safe not to set the allocation bit in the committed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bitmap, because we know that there is no outstanding</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * activity on the buffer any more and so it is safe to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reallocate it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, \"set in b_committed_data\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_BH\">J_ASSERT_BH</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_set_bit_atomic\">ext3_set_bit_atomic</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#block_group\">block_group</a>), <a class=\"id\" href=\"#bit\">bit</a> + <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We clear the bit in the bitmap after setting the committed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * data bit, because this is the reverse order to that which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the allocator uses.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, \"clear bit\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext3_clear_bit_atomic\">ext3_clear_bit_atomic</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#block_group\">block_group</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"bit already cleared for block \"<a class=\"id\" href=\"#E3FSBLK\">E3FSBLK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, \"bit already cleared\");", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_freed\">group_freed</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#block_group\">block_group</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#le16_add_cpu\">le16_add_cpu</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>, <a class=\"id\" href=\"#group_freed\">group_freed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#block_group\">block_group</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_add\">percpu_counter_add</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_freeblocks_counter\">s_freeblocks_counter</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We dirtied the bitmap block */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, \"dirtied bitmap block\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* And the group descriptor block */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#gd_bh\">gd_bh</a>, \"dirtied group descriptor block\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#gd_bh\">gd_bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pdquot_freed_blocks\">pdquot_freed_blocks</a> += <a class=\"id\" href=\"#group_freed\">group_freed</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#overflow\">overflow</a> && !<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> += <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#overflow\">overflow</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#do_more\">do_more</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#error_return\">error_return</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_std_error\">ext3_std_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext3_free_blocks() -- Free given blocks and update quota</span>", 
"<span class=\"comment\"> * @handle:<span class=\"ts\"/><span class=\"ts\"/>handle for this transaction</span>", 
"<span class=\"comment\"> * @inode:<span class=\"ts\"/><span class=\"ts\"/>inode</span>", 
"<span class=\"comment\"> * @block:<span class=\"ts\"/><span class=\"ts\"/>start physical block to free</span>", 
"<span class=\"comment\"> * @count:<span class=\"ts\"/><span class=\"ts\"/>number of blocks to count</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext3_free_blocks\">ext3_free_blocks</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#block\">block</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dquot_freed_blocks\">dquot_freed_blocks</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sb\">sb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a> (\"ext3_free_blocks: nonexistent device\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_free_blocks_sb\">ext3_free_blocks_sb</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#dquot_freed_blocks\">dquot_freed_blocks</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dquot_freed_blocks\">dquot_freed_blocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot_free_block\">dquot_free_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#dquot_freed_blocks\">dquot_freed_blocks</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext3_test_allocatable()</span>", 
"<span class=\"comment\"> * @nr:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>given allocation block group</span>", 
"<span class=\"comment\"> * @bh:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>bufferhead contains the bitmap of the given block group</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For ext3 allocations, we must not reuse any blocks which are</span>", 
"<span class=\"comment\"> * allocated in the bitmap buffer's \"last committed data\" copy.  This</span>", 
"<span class=\"comment\"> * prevents deletes from freeing up the page for reuse until we have</span>", 
"<span class=\"comment\"> * committed the delete transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If we didn't do this, then deleting something and reallocating it as</span>", 
"<span class=\"comment\"> * data would allow the old block to be overwritten before the</span>", 
"<span class=\"comment\"> * transaction committed (because we force data to disk before commit).</span>", 
"<span class=\"comment\"> * This would lead to corruption if we crashed between overwriting the</span>", 
"<span class=\"comment\"> * data and committing the delete.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @@@ We may want to make this allocation behaviour conditional on</span>", 
"<span class=\"comment\"> * data-writes at some point, and disable it for metadata allocations or</span>", 
"<span class=\"comment\"> * sync-data inodes.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext3_test_allocatable\">ext3_test_allocatable</a>(<a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#nr\">nr</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_test_bit\">ext3_test_bit</a>(<a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = !<a class=\"id\" href=\"#ext3_test_bit\">ext3_test_bit</a>(<a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_search_next_usable_block()</span>", 
"<span class=\"comment\"> * @start:<span class=\"ts\"/><span class=\"ts\"/>the starting block (group relative) of the search</span>", 
"<span class=\"comment\"> * @bh:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>bufferhead contains the block group bitmap</span>", 
"<span class=\"comment\"> * @maxblocks:<span class=\"ts\"/><span class=\"ts\"/>the ending block (group relative) of the reservation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The bitmap search --- search forward alternately through the actual</span>", 
"<span class=\"comment\"> * bitmap on disk and the last-committed copy in journal, until we find a</span>", 
"<span class=\"comment\"> * bit free in both bitmaps.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a>", 
"<a class=\"id\" href=\"#bitmap_search_next_usable_block\">bitmap_search_next_usable_block</a>(<a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#start\">start</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#maxblocks\">maxblocks</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#maxblocks\">maxblocks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#ext3_find_next_zero_bit\">ext3_find_next_zero_bit</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, <a class=\"id\" href=\"#maxblocks\">maxblocks</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> >= <a class=\"id\" href=\"#maxblocks\">maxblocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_test_allocatable\">ext3_test_allocatable</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ext3_find_next_zero_bit\">ext3_find_next_zero_bit</a>(<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maxblocks\">maxblocks</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_next_usable_block()</span>", 
"<span class=\"comment\"> * @start:<span class=\"ts\"/><span class=\"ts\"/>the starting block (group relative) to find next</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>allocatable block in bitmap.</span>", 
"<span class=\"comment\"> * @bh:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>bufferhead contains the block group bitmap</span>", 
"<span class=\"comment\"> * @maxblocks:<span class=\"ts\"/><span class=\"ts\"/>the ending block (group relative) for the search</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find an allocatable block in a bitmap.  We honor both the bitmap and</span>", 
"<span class=\"comment\"> * its last-committed copy (if that exists), and perform the \"most</span>", 
"<span class=\"comment\"> * appropriate allocation\" algorithm of looking for a free block near</span>", 
"<span class=\"comment\"> * the initial goal; then for a free byte somewhere in the bitmap; then</span>", 
"<span class=\"comment\"> * for any free bit in the bitmap.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a>", 
"<a class=\"id\" href=\"#find_next_usable_block\">find_next_usable_block</a>(<a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#start\">start</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#maxblocks\">maxblocks</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#here\">here</a>, <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The goal was occupied; search forward for a free</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * block within the next XX blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * end_goal is more or less random, but it has to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * less than EXT3_BLOCKS_PER_GROUP. Aligning up to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * next 64-bit boundary is simple..</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#end_goal\">end_goal</a> = (<a class=\"id\" href=\"#start\">start</a> + 63) &amp; ~63;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end_goal\">end_goal</a> &gt; <a class=\"id\" href=\"#maxblocks\">maxblocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_goal\">end_goal</a> = <a class=\"id\" href=\"#maxblocks\">maxblocks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#here\">here</a> = <a class=\"id\" href=\"#ext3_find_next_zero_bit\">ext3_find_next_zero_bit</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, <a class=\"id\" href=\"#end_goal\">end_goal</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#here\">here</a> &lt; <a class=\"id\" href=\"#end_goal\">end_goal</a> && <a class=\"id\" href=\"#ext3_test_allocatable\">ext3_test_allocatable</a>(<a class=\"id\" href=\"#here\">here</a>, <a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#here\">here</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_debug\">ext3_debug</a>(\"Bit not found near goal\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#here\">here</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#here\">here</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#here\">here</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = ((char *)<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>) + (<a class=\"id\" href=\"#here\">here</a> >> 3);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#memscan\">memscan</a>(<a class=\"id\" href=\"#p\">p</a>, 0, ((<a class=\"id\" href=\"#maxblocks\">maxblocks</a> + 7) >> 3) - (<a class=\"id\" href=\"#here\">here</a> >> 3));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = (<a class=\"id\" href=\"#r\">r</a> - ((char *)<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>)) << 3;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> &lt; <a class=\"id\" href=\"#maxblocks\">maxblocks</a> && <a class=\"id\" href=\"#next\">next</a> >= <a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#ext3_test_allocatable\">ext3_test_allocatable</a>(<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The bitmap search --- search forward alternately through the actual</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bitmap and the last-committed copy until we find a bit free in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * both</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#here\">here</a> = <a class=\"id\" href=\"#bitmap_search_next_usable_block\">bitmap_search_next_usable_block</a>(<a class=\"id\" href=\"#here\">here</a>, <a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#maxblocks\">maxblocks</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#here\">here</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * claim_block()</span>", 
"<span class=\"comment\"> * @block:<span class=\"ts\"/><span class=\"ts\"/>the free block (group relative) to allocate</span>", 
"<span class=\"comment\"> * @bh:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>the bufferhead containts the block group bitmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We think we can allocate this block in this bitmap.  Try to set the bit.</span>", 
"<span class=\"comment\"> * If that succeeds then check that nobody has allocated and then freed the</span>", 
"<span class=\"comment\"> * block since we saw that is was not marked in b_committed_data.  If it _was_</span>", 
"<span class=\"comment\"> * allocated and freed then clear the bit in the bitmap again and return</span>", 
"<span class=\"comment\"> * zero (failure).</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#claim_block\">claim_block</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#block\">block</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_set_bit_atomic\">ext3_set_bit_atomic</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a> && <a class=\"id\" href=\"#ext3_test_bit\">ext3_test_bit</a>(<a class=\"id\" href=\"#block\">block</a>,<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_clear_bit_atomic\">ext3_clear_bit_atomic</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext3_try_to_allocate()</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>superblock</span>", 
"<span class=\"comment\"> * @handle:<span class=\"ts\"/><span class=\"ts\"/>handle to this transaction</span>", 
"<span class=\"comment\"> * @group:<span class=\"ts\"/><span class=\"ts\"/>given allocation block group</span>", 
"<span class=\"comment\"> * @bitmap_bh:<span class=\"ts\"/><span class=\"ts\"/>bufferhead holds the block bitmap</span>", 
"<span class=\"comment\"> * @grp_goal:<span class=\"ts\"/><span class=\"ts\"/>given target block within the group</span>", 
"<span class=\"comment\"> * @count:<span class=\"ts\"/><span class=\"ts\"/>target number of blocks to allocate</span>", 
"<span class=\"comment\"> * @my_rsv:<span class=\"ts\"/><span class=\"ts\"/>reservation window</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attempt to allocate blocks within a give range. Set the range of allocation</span>", 
"<span class=\"comment\"> * first, then find the first free bit(s) from the bitmap (within the range),</span>", 
"<span class=\"comment\"> * and at last, allocate the blocks by claiming the found free bit as allocated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To set the range of this allocation:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if there is a reservation window, only try to allocate block(s) from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>file's own reservation window;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Otherwise, the allocation range starts from the give goal block, ends at</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the block group's last block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If we failed to allocate the desired block then we may end up crossing to a</span>", 
"<span class=\"comment\"> * new bitmap.  In that case we must release write access to the old one via</span>", 
"<span class=\"comment\"> * ext3_journal_release_buffer(), else we'll run out of credits.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a>", 
"<a class=\"id\" href=\"#ext3_try_to_allocate\">ext3_try_to_allocate</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, int <a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, <a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#grp_goal\">grp_goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#count\">count</a>, struct <a class=\"id\" href=\"#ext3_reserve_window\">ext3_reserve_window</a> *<a class=\"id\" href=\"#my_rsv\">my_rsv</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_fsblk_t\">ext3_fsblk_t</a> <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_grpblk_t\">ext3_grpblk_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#num\">num</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we do allocation within the reservation window if we have a window */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#my_rsv\">my_rsv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_first_block\">group_first_block</a> = <a class=\"id\" href=\"#ext3_group_first_block_no\">ext3_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#_rsv_start\">_rsv_start</a> >= <a class=\"id\" href=\"#group_first_block\">group_first_block</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#_rsv_start\">_rsv_start</a> - <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reservation window cross group boundary */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#_rsv_end\">_rsv_end</a> - <a class=\"id\" href=\"#group_first_block\">group_first_block</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#EXT3_BLOCKS_PER_GROUP\">EXT3_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reservation window crosses group boundary */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#EXT3_BLOCKS_PER_GROUP\">EXT3_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#start\">start</a> <= <a class=\"id\" href=\"#grp_goal\">grp_goal</a>) && (<a class=\"id\" href=\"#grp_goal\">grp_goal</a> &lt; <a class=\"id\" href=\"#end\">end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#grp_goal\">grp_goal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a> = -1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grp_goal\">grp_goal</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#grp_goal\">grp_goal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#EXT3_BLOCKS_PER_GROUP\">EXT3_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#EXT3_BLOCKS_PER_GROUP\">EXT3_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>));", 
"", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#grp_goal\">grp_goal</a> &lt; 0 || !<a class=\"id\" href=\"#ext3_test_allocatable\">ext3_test_allocatable</a>(<a class=\"id\" href=\"#grp_goal\">grp_goal</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a> = <a class=\"id\" href=\"#find_next_usable_block\">find_next_usable_block</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grp_goal\">grp_goal</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_access\">fail_access</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#my_rsv\">my_rsv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 7 && <a class=\"id\" href=\"#grp_goal\">grp_goal</a> &gt; <a class=\"id\" href=\"#start\">start</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_test_allocatable\">ext3_test_allocatable</a>(<a class=\"id\" href=\"#grp_goal\">grp_goal</a> - 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#grp_goal\">grp_goal</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#grp_goal\">grp_goal</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#claim_block\">claim_block</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>), <a class=\"id\" href=\"#group\">group</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The block was allocated by another thread, or it was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocated and then freed by another thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_access\">fail_access</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a>++;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#num\">num</a> &lt; *<a class=\"id\" href=\"#count\">count</a> && <a class=\"id\" href=\"#grp_goal\">grp_goal</a> &lt; <a class=\"id\" href=\"#end\">end</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#ext3_test_allocatable\">ext3_test_allocatable</a>(<a class=\"id\" href=\"#grp_goal\">grp_goal</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#claim_block\">claim_block</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>), <a class=\"id\" href=\"#group\">group</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#grp_goal\">grp_goal</a> - <a class=\"id\" href=\"#num\">num</a>;", 
"<a class=\"id\" href=\"#fail_access\">fail_access</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>find_next_reservable_window():</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>find a reservable space within the given range.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>It does not allocate the reservation window for now:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>alloc_new_reservation() will do the work later.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@search_head: the head of the searching list;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This is not necessarily the list head of the whole filesystem</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>We have both head and start_block to assist the search</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>for the reservable space. The list starts from head,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>but we will shift to the place where start_block is,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>then start from there, when looking for a reservable space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size: the target new reservation window size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@group_first_block: the first block we consider to start</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>the real search from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@last_block:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>the maximum block number that our goal reservable space</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>could start from. This is normally the last block in this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>group. The search will end when we found the start of next</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>possible reservable space is out of this boundary.</span>", 
];
xr_frag_insert('l/9e/915e2c5d8efab695b0a21cad44f8c04b6755a1.xr', __xr_tmp);
