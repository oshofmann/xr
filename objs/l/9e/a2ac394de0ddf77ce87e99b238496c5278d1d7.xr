var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/ext2/balloc.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1992, 1993, 1994, 1995</span>", 
"<span class=\"comment\"> * Remy Card (card@masi.ibp.fr)</span>", 
"<span class=\"comment\"> * Laboratoire MASI - Institut Blaise Pascal</span>", 
"<span class=\"comment\"> * Universite Pierre et Marie Curie (Paris VI)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Enhanced block allocation by Stephen Tweedie (sct@redhat.com), 1993</span>", 
"<span class=\"comment\"> *  Big-endian to little-endian byte-swapping/bitmaps by</span>", 
"<span class=\"comment\"> *        David S. Miller (davem@caip.rutgers.edu), 1995</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"ext2.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#quotaops\">quotaops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * balloc.c contains the blocks allocation and deallocation routines</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The free blocks are managed by bitmaps.  A file system contains several</span>", 
"<span class=\"comment\"> * blocks groups.  Each group contains 1 bitmap block for blocks, 1 bitmap</span>", 
"<span class=\"comment\"> * block for inodes, N blocks for the inode table and data blocks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The file system contains group descriptors which are located after the</span>", 
"<span class=\"comment\"> * super block.  Each descriptor contains the number of the bitmap block and</span>", 
"<span class=\"comment\"> * the free blocks count in the block.  The descriptors are loaded in memory</span>", 
"<span class=\"comment\"> * when a file system is mounted (see ext2_fill_super).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#in_range\">in_range</a>(<a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#len\">len</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#b\">b</a>) >= (<a class=\"id\" href=\"#first\">first</a>) && (<a class=\"id\" href=\"#b\">b</a>) <= (<a class=\"id\" href=\"#first\">first</a>) + (<a class=\"id\" href=\"#len\">len</a>) - 1)", 
"", 
"struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> * <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#block_group\">block_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> ** <a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#group_desc\">group_desc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> * <a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_sb_info\">ext2_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#block_group\">block_group</a> >= <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a> (<a class=\"id\" href=\"#sb\">sb</a>, \"ext2_get_group_desc\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block_group >= groups_count - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block_group = %d, groups_count = %lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_desc\">group_desc</a> = <a class=\"id\" href=\"#block_group\">block_group</a> >> <a class=\"id\" href=\"#EXT2_DESC_PER_BLOCK_BITS\">EXT2_DESC_PER_BLOCK_BITS</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#block_group\">block_group</a> &amp; (<a class=\"id\" href=\"#EXT2_DESC_PER_BLOCK\">EXT2_DESC_PER_BLOCK</a>(<a class=\"id\" href=\"#sb\">sb</a>) - 1);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_desc\">s_group_desc</a>[<a class=\"id\" href=\"#group_desc\">group_desc</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a> (<a class=\"id\" href=\"#sb\">sb</a>, \"ext2_get_group_desc\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Group descriptor not loaded - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block_group = %d, group_desc = %lu, desc = %lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#group_desc\">group_desc</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = (struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> *) <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_desc\">s_group_desc</a>[<a class=\"id\" href=\"#group_desc\">group_desc</a>]-><a class=\"id\" href=\"#b_data\">b_data</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_group_desc\">s_group_desc</a>[<a class=\"id\" href=\"#group_desc\">group_desc</a>];", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#desc\">desc</a> + <a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext2_valid_block_bitmap\">ext2_valid_block_bitmap</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#block_group\">block_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#next_zero_bit\">next_zero_bit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_first_block\">group_first_block</a> = <a class=\"id\" href=\"#ext2_group_first_block_no\">ext2_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check whether block bitmap block number is set */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_block_bitmap\">bg_block_bitmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a> - <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext2_test_bit\">ext2_test_bit</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* bad block bitmap */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check whether the inode bitmap block number is set */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_inode_bitmap\">bg_inode_bitmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a> - <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext2_test_bit\">ext2_test_bit</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* bad block bitmap */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check whether the inode table block number is set */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_inode_table\">bg_inode_table</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a> - <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_zero_bit\">next_zero_bit</a> = <a class=\"id\" href=\"#ext2_find_next_zero_bit\">ext2_find_next_zero_bit</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_itb_per_group\">s_itb_per_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next_zero_bit\">next_zero_bit</a> >= <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_itb_per_group\">s_itb_per_group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* good bitmap for inode tables */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Invalid block bitmap - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"block_group = %d, block = %lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Read the bitmap for a given block_group,and validate the</span>", 
"<span class=\"comment\"> * bits for block/inode/inode tables are set in the bitmaps</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return buffer_head on success or NULL in case of failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *", 
"<a class=\"id\" href=\"#read_block_bitmap\">read_block_bitmap</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, unsigned int <a class=\"id\" href=\"#block_group\">block_group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> * <a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_block_bitmap\">bg_block_bitmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_getblk\">sb_getblk</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#bitmap_blk\">bitmap_blk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Cannot read block bitmap - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block_group = %d, block_bitmap = %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_block_bitmap\">bg_block_bitmap</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#bh_uptodate_or_lock\">bh_uptodate_or_lock</a>(<a class=\"id\" href=\"#bh\">bh</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bh_submit_read\">bh_submit_read</a>(<a class=\"id\" href=\"#bh\">bh</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Cannot read block bitmap - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block_group = %d, block_bitmap = %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_block_bitmap\">bg_block_bitmap</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_valid_block_bitmap\">ext2_valid_block_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * file system mounted not to panic on error, continue with corrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bitmap</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#release_blocks\">release_blocks</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_sb_info\">ext2_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_add\">percpu_counter_add</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_freeblocks_counter\">s_freeblocks_counter</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_dirt\">s_dirt</a> = 1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#group_adjust_blocks\">group_adjust_blocks</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#group_no\">group_no</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_sb_info\">ext2_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#free_blocks\">free_blocks</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#group_no\">group_no</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_blocks\">free_blocks</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a> = <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#free_blocks\">free_blocks</a> + <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#group_no\">group_no</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_dirt\">s_dirt</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The reservation window structure operations</span>", 
"<span class=\"comment\"> * --------------------------------------------</span>", 
"<span class=\"comment\"> * Operations include:</span>", 
"<span class=\"comment\"> * dump, find, add, remove, is_empty, find_next_reservable_window, etc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We use a red-black tree to represent per-filesystem reservation</span>", 
"<span class=\"comment\"> * windows.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __rsv_window_dump() -- Dump the filesystem block allocation reservation map</span>", 
"<span class=\"comment\"> * @rb_root:<span class=\"ts\"/><span class=\"ts\"/>root of per-filesystem reservation rb tree</span>", 
"<span class=\"comment\"> * @verbose:<span class=\"ts\"/><span class=\"ts\"/>verbose mode</span>", 
"<span class=\"comment\"> * @fn:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>function which wishes to dump the reservation map</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If verbose is turned on, it will print the whole block reservation</span>", 
"<span class=\"comment\"> * windows(start, end). Otherwise, it will only print out the \"bad\" windows,</span>", 
"<span class=\"comment\"> * those windows that overlap with their immediate neighbors.</span>", 
"<span class=\"comment\"> */</span>", 
"#if 1", 
"static void <a class=\"id\" href=\"#__rsv_window_dump\">__rsv_window_dump</a>(struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *<a class=\"id\" href=\"#root\">root</a>, int <a class=\"id\" href=\"#verbose\">verbose</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#fn\">fn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *<a class=\"id\" href=\"#rsv\">rsv</a>, *<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bad\">bad</a>;", 
"", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#rb_first\">rb_first</a>(<a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bad\">bad</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Block Allocation Reservation Windows Map (%s):\\n\", <a class=\"id\" href=\"#fn\">fn</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a>, <a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#verbose\">verbose</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"reservation window 0x%p \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"start: %lu, end: %lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>, <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a>, <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> && <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> >= <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Bad reservation %p (start >= end)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#rsv\">rsv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad\">bad</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> && <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> >= <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Bad reservation %p (prev->end >= start)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#rsv\">rsv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad\">bad</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bad\">bad</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#verbose\">verbose</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Restarting reservation walk in verbose mode\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#verbose\">verbose</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#rsv\">rsv</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Window map complete.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#bad\">bad</a>);", 
"}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rsv_window_dump\">rsv_window_dump</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#verbose\">verbose</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rsv_window_dump\">__rsv_window_dump</a>((<a class=\"id\" href=\"#root\">root</a>), (<a class=\"id\" href=\"#verbose\">verbose</a>), <a class=\"id\" href=\"#__func__\">__func__</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rsv_window_dump\">rsv_window_dump</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#verbose\">verbose</a>) do {} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * goal_in_my_reservation()</span>", 
"<span class=\"comment\"> * @rsv:<span class=\"ts\"/><span class=\"ts\"/>inode's reservation window</span>", 
"<span class=\"comment\"> * @grp_goal:<span class=\"ts\"/><span class=\"ts\"/>given goal block relative to the allocation block group</span>", 
"<span class=\"comment\"> * @group:<span class=\"ts\"/><span class=\"ts\"/>the current allocation block group</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>filesystem super block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Test if the given goal block (group relative) is within the file's</span>", 
"<span class=\"comment\"> * own block reservation window range.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the reservation window is outside the goal allocation group, return 0;</span>", 
"<span class=\"comment\"> * grp_goal (given goal block) could be -1, which means no specific</span>", 
"<span class=\"comment\"> * goal block. In this case, always return 1.</span>", 
"<span class=\"comment\"> * If the goal block is within the reservation window, return 1;</span>", 
"<span class=\"comment\"> * otherwise, return 0;</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#goal_in_my_reservation\">goal_in_my_reservation</a>(struct <a class=\"id\" href=\"#ext2_reserve_window\">ext2_reserve_window</a> *<a class=\"id\" href=\"#rsv\">rsv</a>, <a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#grp_goal\">grp_goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#group_first_block\">group_first_block</a>, <a class=\"id\" href=\"#group_last_block\">group_last_block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_first_block\">group_first_block</a> = <a class=\"id\" href=\"#ext2_group_first_block_no\">ext2_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_last_block\">group_last_block</a> = <a class=\"id\" href=\"#group_first_block\">group_first_block</a> + <a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>) - 1;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#_rsv_start\">_rsv_start</a> &gt; <a class=\"id\" href=\"#group_last_block\">group_last_block</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#_rsv_end\">_rsv_end</a> &lt; <a class=\"id\" href=\"#group_first_block\">group_first_block</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#grp_goal\">grp_goal</a> >= 0) && ((<a class=\"id\" href=\"#grp_goal\">grp_goal</a> + <a class=\"id\" href=\"#group_first_block\">group_first_block</a> &lt; <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#_rsv_start\">_rsv_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>|| (<a class=\"id\" href=\"#grp_goal\">grp_goal</a> + <a class=\"id\" href=\"#group_first_block\">group_first_block</a> &gt; <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#_rsv_end\">_rsv_end</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * search_reserve_window()</span>", 
"<span class=\"comment\"> * @rb_root:<span class=\"ts\"/><span class=\"ts\"/>root of reservation tree</span>", 
"<span class=\"comment\"> * @goal:<span class=\"ts\"/><span class=\"ts\"/>target allocation block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find the reserved window which includes the goal, or the previous one</span>", 
"<span class=\"comment\"> * if the goal is not in any window.</span>", 
"<span class=\"comment\"> * Returns NULL if there are no windows or if all windows start after the goal.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *", 
"<a class=\"id\" href=\"#search_reserve_window\">search_reserve_window</a>(struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *<a class=\"id\" href=\"#rsv\">rsv</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a>, <a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#goal\">goal</a> &lt; <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#goal\">goal</a> &gt; <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rsv\">rsv</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We've fallen off the end of the tree: the goal wasn't inside</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any particular node.  OK, the previous node must be to one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * side of the interval containing the goal.  If it's the RHS,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we need to back up one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> &gt; <a class=\"id\" href=\"#goal\">goal</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#rb_prev\">rb_prev</a>(&amp;<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a>, <a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rsv\">rsv</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext2_rsv_window_add() -- Insert a window to the block reservation rb tree.</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>super block</span>", 
"<span class=\"comment\"> * @rsv:<span class=\"ts\"/><span class=\"ts\"/>reservation window to add</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with rsv_lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext2_rsv_window_add\">ext2_rsv_window_add</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *<a class=\"id\" href=\"#rsv\">rsv</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *<a class=\"id\" href=\"#root\">root</a> = &amp;<a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_rsv_window_root\">s_rsv_window_root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#node\">node</a> = &amp;<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_node\">rsv_node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> ** <a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> * <a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *<a class=\"id\" href=\"#this\">this</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a>, <a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv_window_dump\">rsv_window_dump</a>(<a class=\"id\" href=\"#root\">root</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#root\">root</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rsv_window_remove() -- unlink a window from the reservation rb tree</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>super block</span>", 
"<span class=\"comment\"> * @rsv:<span class=\"ts\"/><span class=\"ts\"/>reservation window to remove</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mark the block reservation window as not allocated, and unlink it</span>", 
"<span class=\"comment\"> * from the filesystem reservation window rb tree. Must be called with</span>", 
"<span class=\"comment\"> * rsv_lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rsv_window_remove\">rsv_window_remove</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *<a class=\"id\" href=\"#rsv\">rsv</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> = <a class=\"id\" href=\"#EXT2_RESERVE_WINDOW_NOT_ALLOCATED\">EXT2_RESERVE_WINDOW_NOT_ALLOCATED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> = <a class=\"id\" href=\"#EXT2_RESERVE_WINDOW_NOT_ALLOCATED\">EXT2_RESERVE_WINDOW_NOT_ALLOCATED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_alloc_hit\">rsv_alloc_hit</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_node\">rsv_node</a>, &amp;<a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_rsv_window_root\">s_rsv_window_root</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rsv_is_empty() -- Check if the reservation window is allocated.</span>", 
"<span class=\"comment\"> * @rsv:<span class=\"ts\"/><span class=\"ts\"/>given reservation window to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * returns 1 if the end block is EXT2_RESERVE_WINDOW_NOT_ALLOCATED.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(struct <a class=\"id\" href=\"#ext2_reserve_window\">ext2_reserve_window</a> *<a class=\"id\" href=\"#rsv\">rsv</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* a valid reservation end block could not be 0 */</span>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#_rsv_end\">_rsv_end</a> == <a class=\"id\" href=\"#EXT2_RESERVE_WINDOW_NOT_ALLOCATED\">EXT2_RESERVE_WINDOW_NOT_ALLOCATED</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext2_init_block_alloc_info()</span>", 
"<span class=\"comment\"> * @inode:<span class=\"ts\"/><span class=\"ts\"/>file inode structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate and initialize the  reservation window structure, and</span>", 
"<span class=\"comment\"> * link the window to the ext2 inode structure at last</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The reservation window structure is only dynamically allocated</span>", 
"<span class=\"comment\"> * and linked to ext2 inode the first time the open file</span>", 
"<span class=\"comment\"> * needs a new block. So, before every ext2_new_block(s) call, for</span>", 
"<span class=\"comment\"> * regular files, we should check whether the reservation window</span>", 
"<span class=\"comment\"> * structure exists or not. In the latter case, this function is called.</span>", 
"<span class=\"comment\"> * Fail to do so will result in block reservation being turned off for that</span>", 
"<span class=\"comment\"> * open file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called from ext2_get_blocks_handle(), also called</span>", 
"<span class=\"comment\"> * when setting the reservation window size through ioctl before the file</span>", 
"<span class=\"comment\"> * is open for write (needs block allocation).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Needs truncate_mutex protection prior to calling this function.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext2_init_block_alloc_info\">ext2_init_block_alloc_info</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_inode_info\">ext2_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_block_alloc_info\">ext2_block_alloc_info</a> *<a class=\"id\" href=\"#block_i\">block_i</a> = <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#block_i\">block_i</a>), <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#block_i\">block_i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *<a class=\"id\" href=\"#rsv\">rsv</a> = &amp;<a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#rsv_window_node\">rsv_window_node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> = <a class=\"id\" href=\"#EXT2_RESERVE_WINDOW_NOT_ALLOCATED\">EXT2_RESERVE_WINDOW_NOT_ALLOCATED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> = <a class=\"id\" href=\"#EXT2_RESERVE_WINDOW_NOT_ALLOCATED\">EXT2_RESERVE_WINDOW_NOT_ALLOCATED</a>;", 
"", 
"<span class=\"ts\"/> <span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if filesystem is mounted with NORESERVATION, the goal</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reservation window size is set to zero to indicate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * block reservation is off</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_opt\">test_opt</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#RESERVATION\">RESERVATION</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a> = <a class=\"id\" href=\"#EXT2_DEFAULT_RESERVE_BLOCKS\">EXT2_DEFAULT_RESERVE_BLOCKS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_alloc_hit\">rsv_alloc_hit</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#last_alloc_logical_block\">last_alloc_logical_block</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#last_alloc_physical_block\">last_alloc_physical_block</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a> = <a class=\"id\" href=\"#block_i\">block_i</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext2_discard_reservation()</span>", 
"<span class=\"comment\"> * @inode:<span class=\"ts\"/><span class=\"ts\"/>inode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Discard(free) block reservation window on last file close, or truncate</span>", 
"<span class=\"comment\"> * or at last iput().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is being called in three cases:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>ext2_release_file(): last writer closes the file</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>ext2_clear_inode(): last iput(), when nobody links to this file.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>ext2_truncate(): when the block indirect map is about to change.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext2_discard_reservation\">ext2_discard_reservation</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_inode_info\">ext2_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_block_alloc_info\">ext2_block_alloc_info</a> *<a class=\"id\" href=\"#block_i\">block_i</a> = <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *<a class=\"id\" href=\"#rsv\">rsv</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a> = &amp;<a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_rsv_window_lock\">s_rsv_window_lock</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#block_i\">block_i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a> = &amp;<a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#rsv_window_node\">rsv_window_node</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv_window_remove\">rsv_window_remove</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#rsv\">rsv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext2_free_blocks_sb() -- Free given blocks and update quota and i_blocks</span>", 
"<span class=\"comment\"> * @inode:<span class=\"ts\"/><span class=\"ts\"/>inode</span>", 
"<span class=\"comment\"> * @block:<span class=\"ts\"/><span class=\"ts\"/>start physcial block to free</span>", 
"<span class=\"comment\"> * @count:<span class=\"ts\"/><span class=\"ts\"/>number of blocks to free</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext2_free_blocks\">ext2_free_blocks</a> (struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>, unsigned long <a class=\"id\" href=\"#block\">block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#bh2\">bh2</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#block_group\">block_group</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#overflow\">overflow</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_sb_info\">ext2_sb_info</a> * <a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> * <a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_super_block\">ext2_super_block</a> * <a class=\"id\" href=\"#es\">es</a> = <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_es\">s_es</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#freed\">freed</a> = 0, <a class=\"id\" href=\"#group_freed\">group_freed</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#block\">block</a> &lt; <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#block\">block</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_blocks_count\">s_blocks_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a> (<a class=\"id\" href=\"#sb\">sb</a>, \"ext2_free_blocks\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Freeing blocks not in datazone - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block = %lu, count = %lu\", <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_debug\">ext2_debug</a> (\"freeing block(s) %lu-%lu\\n\", <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#count\">count</a> - 1);", 
"", 
"<a class=\"id\" href=\"#do_more\">do_more</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#overflow\">overflow</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a> = (<a class=\"id\" href=\"#block\">block</a> - <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>)) /", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = (<a class=\"id\" href=\"#block\">block</a> - <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>)) %", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check to see if we are freeing blocks across a group</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * boundary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bit\">bit</a> + <a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#overflow\">overflow</a> = <a class=\"id\" href=\"#bit\">bit</a> + <a class=\"id\" href=\"#count\">count</a> - <a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#overflow\">overflow</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#read_block_bitmap\">read_block_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a> (<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>, &amp;<a class=\"id\" href=\"#bh2\">bh2</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_range\">in_range</a> (<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_block_bitmap\">bg_block_bitmap</a>), <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#count\">count</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#in_range\">in_range</a> (<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_inode_bitmap\">bg_inode_bitmap</a>), <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#count\">count</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#in_range\">in_range</a> (<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_inode_table\">bg_inode_table</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_itb_per_group\">s_itb_per_group</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#in_range\">in_range</a> (<a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#count\">count</a> - 1, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_inode_table\">bg_inode_table</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_itb_per_group\">s_itb_per_group</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a> (<a class=\"id\" href=\"#sb\">sb</a>, \"ext2_free_blocks\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Freeing blocks in system zones - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Block = %lu, count = %lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#group_freed\">group_freed</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext2_clear_bit_atomic\">ext2_clear_bit_atomic</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#block_group\">block_group</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"bit already cleared for block %lu\", <a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_freed\">group_freed</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_SYNCHRONOUS\">MS_SYNCHRONOUS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_dirty_buffer\">sync_dirty_buffer</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_adjust_blocks\">group_adjust_blocks</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#bh2\">bh2</a>, <a class=\"id\" href=\"#group_freed\">group_freed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freed\">freed</a> += <a class=\"id\" href=\"#group_freed\">group_freed</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#overflow\">overflow</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> += <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#overflow\">overflow</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#do_more\">do_more</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#error_return\">error_return</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_blocks\">release_blocks</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#freed\">freed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot_free_block_nodirty\">dquot_free_block_nodirty</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#freed\">freed</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_search_next_usable_block()</span>", 
"<span class=\"comment\"> * @start:<span class=\"ts\"/><span class=\"ts\"/>the starting block (group relative) of the search</span>", 
"<span class=\"comment\"> * @bh:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>bufferhead contains the block group bitmap</span>", 
"<span class=\"comment\"> * @maxblocks:<span class=\"ts\"/><span class=\"ts\"/>the ending block (group relative) of the reservation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The bitmap search --- search forward through the actual bitmap on disk until</span>", 
"<span class=\"comment\"> * we find a bit free.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a>", 
"<a class=\"id\" href=\"#bitmap_search_next_usable_block\">bitmap_search_next_usable_block</a>(<a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#start\">start</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#maxblocks\">maxblocks</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#ext2_find_next_zero_bit\">ext2_find_next_zero_bit</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, <a class=\"id\" href=\"#maxblocks\">maxblocks</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> >= <a class=\"id\" href=\"#maxblocks\">maxblocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_next_usable_block()</span>", 
"<span class=\"comment\"> * @start:<span class=\"ts\"/><span class=\"ts\"/>the starting block (group relative) to find next</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>allocatable block in bitmap.</span>", 
"<span class=\"comment\"> * @bh:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>bufferhead contains the block group bitmap</span>", 
"<span class=\"comment\"> * @maxblocks:<span class=\"ts\"/><span class=\"ts\"/>the ending block (group relative) for the search</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find an allocatable block in a bitmap.  We perform the \"most</span>", 
"<span class=\"comment\"> * appropriate allocation\" algorithm of looking for a free block near</span>", 
"<span class=\"comment\"> * the initial goal; then for a free byte somewhere in the bitmap;</span>", 
"<span class=\"comment\"> * then for any free bit in the bitmap.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a>", 
"<a class=\"id\" href=\"#find_next_usable_block\">find_next_usable_block</a>(int <a class=\"id\" href=\"#start\">start</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#maxblocks\">maxblocks</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#here\">here</a>, <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The goal was occupied; search forward for a free </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * block within the next XX blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * end_goal is more or less random, but it has to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * less than EXT2_BLOCKS_PER_GROUP. Aligning up to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * next 64-bit boundary is simple..</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#end_goal\">end_goal</a> = (<a class=\"id\" href=\"#start\">start</a> + 63) &amp; ~63;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end_goal\">end_goal</a> &gt; <a class=\"id\" href=\"#maxblocks\">maxblocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_goal\">end_goal</a> = <a class=\"id\" href=\"#maxblocks\">maxblocks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#here\">here</a> = <a class=\"id\" href=\"#ext2_find_next_zero_bit\">ext2_find_next_zero_bit</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, <a class=\"id\" href=\"#end_goal\">end_goal</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#here\">here</a> &lt; <a class=\"id\" href=\"#end_goal\">end_goal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#here\">here</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_debug\">ext2_debug</a>(\"Bit not found near goal\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#here\">here</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#here\">here</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#here\">here</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = ((char *)<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>) + (<a class=\"id\" href=\"#here\">here</a> >> 3);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#memscan\">memscan</a>(<a class=\"id\" href=\"#p\">p</a>, 0, ((<a class=\"id\" href=\"#maxblocks\">maxblocks</a> + 7) >> 3) - (<a class=\"id\" href=\"#here\">here</a> >> 3));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = (<a class=\"id\" href=\"#r\">r</a> - ((char *)<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>)) << 3;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> &lt; <a class=\"id\" href=\"#maxblocks\">maxblocks</a> && <a class=\"id\" href=\"#next\">next</a> >= <a class=\"id\" href=\"#here\">here</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#here\">here</a> = <a class=\"id\" href=\"#bitmap_search_next_usable_block\">bitmap_search_next_usable_block</a>(<a class=\"id\" href=\"#here\">here</a>, <a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#maxblocks\">maxblocks</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#here\">here</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext2_try_to_allocate()</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>superblock</span>", 
"<span class=\"comment\"> * @handle:<span class=\"ts\"/><span class=\"ts\"/>handle to this transaction</span>", 
"<span class=\"comment\"> * @group:<span class=\"ts\"/><span class=\"ts\"/>given allocation block group</span>", 
"<span class=\"comment\"> * @bitmap_bh:<span class=\"ts\"/><span class=\"ts\"/>bufferhead holds the block bitmap</span>", 
"<span class=\"comment\"> * @grp_goal:<span class=\"ts\"/><span class=\"ts\"/>given target block within the group</span>", 
"<span class=\"comment\"> * @count:<span class=\"ts\"/><span class=\"ts\"/>target number of blocks to allocate</span>", 
"<span class=\"comment\"> * @my_rsv:<span class=\"ts\"/><span class=\"ts\"/>reservation window</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attempt to allocate blocks within a give range. Set the range of allocation</span>", 
"<span class=\"comment\"> * first, then find the first free bit(s) from the bitmap (within the range),</span>", 
"<span class=\"comment\"> * and at last, allocate the blocks by claiming the found free bit as allocated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To set the range of this allocation:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>if there is a reservation window, only try to allocate block(s)</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>from the file's own reservation window;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Otherwise, the allocation range starts from the give goal block,</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>ends at the block group's last block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If we failed to allocate the desired block then we may end up crossing to a</span>", 
"<span class=\"comment\"> * new bitmap.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#ext2_try_to_allocate\">ext2_try_to_allocate</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, <a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#grp_goal\">grp_goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_reserve_window\">ext2_reserve_window</a> *<a class=\"id\" href=\"#my_rsv\">my_rsv</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"       <span class=\"ts\"/><a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#num\">num</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we do allocation within the reservation window if we have a window */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#my_rsv\">my_rsv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_first_block\">group_first_block</a> = <a class=\"id\" href=\"#ext2_group_first_block_no\">ext2_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#_rsv_start\">_rsv_start</a> >= <a class=\"id\" href=\"#group_first_block\">group_first_block</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#_rsv_start\">_rsv_start</a> - <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reservation window cross group boundary */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#_rsv_end\">_rsv_end</a> - <a class=\"id\" href=\"#group_first_block\">group_first_block</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reservation window crosses group boundary */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#start\">start</a> <= <a class=\"id\" href=\"#grp_goal\">grp_goal</a>) && (<a class=\"id\" href=\"#grp_goal\">grp_goal</a> &lt; <a class=\"id\" href=\"#end\">end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#grp_goal\">grp_goal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a> = -1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grp_goal\">grp_goal</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#grp_goal\">grp_goal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>));", 
"", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#grp_goal\">grp_goal</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a> = <a class=\"id\" href=\"#find_next_usable_block\">find_next_usable_block</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grp_goal\">grp_goal</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_access\">fail_access</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#my_rsv\">my_rsv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 7 && <a class=\"id\" href=\"#grp_goal\">grp_goal</a> &gt; <a class=\"id\" href=\"#start\">start</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#ext2_test_bit\">ext2_test_bit</a>(<a class=\"id\" href=\"#grp_goal\">grp_goal</a> - 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#grp_goal\">grp_goal</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#grp_goal\">grp_goal</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext2_set_bit_atomic\">ext2_set_bit_atomic</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>), <a class=\"id\" href=\"#group\">group</a>), <a class=\"id\" href=\"#grp_goal\">grp_goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The block was allocated by another thread, or it was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocated and then freed by another thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_access\">fail_access</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a>++;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#num\">num</a> &lt; *<a class=\"id\" href=\"#count\">count</a> && <a class=\"id\" href=\"#grp_goal\">grp_goal</a> &lt; <a class=\"id\" href=\"#end\">end</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>&& !<a class=\"id\" href=\"#ext2_set_bit_atomic\">ext2_set_bit_atomic</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>), <a class=\"id\" href=\"#group\">group</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#grp_goal\">grp_goal</a> - <a class=\"id\" href=\"#num\">num</a>;", 
"<a class=\"id\" href=\"#fail_access\">fail_access</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>find_next_reservable_window():</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>find a reservable space within the given range.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>It does not allocate the reservation window for now:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>alloc_new_reservation() will do the work later.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@search_head: the head of the searching list;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This is not necessarily the list head of the whole filesystem</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>We have both head and start_block to assist the search</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>for the reservable space. The list starts from head,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>but we will shift to the place where start_block is,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>then start from there, when looking for a reservable space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@size: the target new reservation window size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@group_first_block: the first block we consider to start</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>the real search from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@last_block:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>the maximum block number that our goal reservable space</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>could start from. This is normally the last block in this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>group. The search will end when we found the start of next</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>possible reservable space is out of this boundary.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This could handle the cross boundary reservation window</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>request.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>basically we search from the given range, rather than the whole</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>reservation double linked list, (start_block, last_block)</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>to find a free region that is of my size and has not</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>been reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#find_next_reservable_window\">find_next_reservable_window</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *<a class=\"id\" href=\"#search_head\">search_head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *<a class=\"id\" href=\"#my_rsv\">my_rsv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#start_block\">start_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#last_block\">last_block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *<a class=\"id\" href=\"#rsv\">rsv</a>, *<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* TODO: make the start of the reservation window byte-aligned */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* cur = *start_block &amp; ~7;*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#start_block\">start_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a> = <a class=\"id\" href=\"#search_head\">search_head</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rsv\">rsv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> <= <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TODO?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in the case we could not find a reservable space</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that is what is expected, during the re-search, we could</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * remember what's the largest reservable space we could have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and return that one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For now it will fail if we could not find the reservable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * space with expected-size (or more)...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> &gt; <a class=\"id\" href=\"#last_block\">last_block</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fail */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#rsv\">rsv</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(&amp;<a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv\">rsv</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#next\">next</a>,struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a>,<a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Reached the last reservation, we can just append to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * previous one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> + <a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#rsv\">rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Found a reserveable space big enough.  We could</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * have a reservation across the group boundary here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> <span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we come here either :</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when we reach the end of the whole list,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and there is empty reservable space after last entry in the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * append it to the end of the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or we found one reservable space in the middle of the list,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return the reservation window that we could append to.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * succeed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#prev\">prev</a> != <a class=\"id\" href=\"#my_rsv\">my_rsv</a>) && (!<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv_window_remove\">rsv_window_remove</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#my_rsv\">my_rsv</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Let's book the whole avaliable window for now.  We will check the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disk bitmap later and then, if there are free blocks then we adjust</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the window size if it's larger than requested.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise, we will remove this node from the tree next time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * call find_next_reservable_window.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> = <a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> = <a class=\"id\" href=\"#cur\">cur</a> + <a class=\"id\" href=\"#size\">size</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_alloc_hit\">rsv_alloc_hit</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> != <a class=\"id\" href=\"#my_rsv\">my_rsv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_rsv_window_add\">ext2_rsv_window_add</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#my_rsv\">my_rsv</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>alloc_new_reservation()--allocate a new reservation window</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>To make a new reservation, we search part of the filesystem</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>reservation list (the list that inside the group). We try to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>allocate a new reservation window near the allocation goal,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>or the beginning of the group, if there is no goal.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>We first find a reservable space after the goal, then from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>there, we check the bitmap for the first free block after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>it. If there is no free block until the end of group, then the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>whole group is full, we failed. Otherwise, check if the free</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>block is inside the expected reservable space, if so, we</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>succeed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>If the first free block is outside the reservable space, then</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>start from the first free block, we search for next available</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>space, and go on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on succeed, a new reservation will be found and inserted into the list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It contains at least one free block, and it does not overlap with other</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>reservation windows.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>failed: we failed to find a reservation window in this group</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rsv: the reservation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@grp_goal: The goal (group-relative).  It is where the search for a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>free reservable space should start from.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>if we have a goal(goal &gt;0 ), then start from there,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>no goal(goal = -1), we start from the first block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>of the group.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sb: the super block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@group: the group we are trying to allocate in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bitmap_bh: the block group block bitmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#alloc_new_reservation\">alloc_new_reservation</a>(struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *<a class=\"id\" href=\"#my_rsv\">my_rsv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#grp_goal\">grp_goal</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *<a class=\"id\" href=\"#search_head\">search_head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#group_first_block\">group_first_block</a>, <a class=\"id\" href=\"#group_end_block\">group_end_block</a>, <a class=\"id\" href=\"#start_block\">start_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#first_free_block\">first_free_block</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *<a class=\"id\" href=\"#fs_rsv_root\">fs_rsv_root</a> = &amp;<a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_rsv_window_root\">s_rsv_window_root</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a> = &amp;<a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_rsv_window_lock\">s_rsv_window_lock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_first_block\">group_first_block</a> = <a class=\"id\" href=\"#ext2_group_first_block_no\">ext2_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_end_block\">group_end_block</a> = <a class=\"id\" href=\"#group_first_block\">group_first_block</a> + (<a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>) - 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#grp_goal\">grp_goal</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_block\">start_block</a> = <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_block\">start_block</a> = <a class=\"id\" href=\"#grp_goal\">grp_goal</a> + <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if the old reservation is cross group boundary</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and if the goal is inside the old reservation window,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we will come here when we just failed to allocate from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the first part of the window. We still have another part</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that belongs to the next group. In this case, there is no</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * point to discard our window and try to allocate a new one</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in this group(which will fail). we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * keep the reservation window, just simply move on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Maybe we could shift the start block of the reservation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * window to the first block of next group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> <= <a class=\"id\" href=\"#group_end_block\">group_end_block</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> &gt; <a class=\"id\" href=\"#group_end_block\">group_end_block</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#start_block\">start_block</a> >= <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_alloc_hit\">rsv_alloc_hit</a> &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> - <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> + 1) / 2)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if the previously allocation hit ratio is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * greater than 1/2, then we double the size of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the reservation window the next time,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * otherwise we keep the same size window</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#size\">size</a> * 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#EXT2_MAX_RESERVE_BLOCKS\">EXT2_MAX_RESERVE_BLOCKS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#EXT2_MAX_RESERVE_BLOCKS\">EXT2_MAX_RESERVE_BLOCKS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a>= <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * shift the search start to the window near the goal block</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#search_head\">search_head</a> = <a class=\"id\" href=\"#search_reserve_window\">search_reserve_window</a>(<a class=\"id\" href=\"#fs_rsv_root\">fs_rsv_root</a>, <a class=\"id\" href=\"#start_block\">start_block</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * find_next_reservable_window() simply finds a reservable window</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inside the given range(start_block, group_end_block).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To make sure the reservation window has a free bit inside it, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to check the bitmap after we found a reservable window.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#find_next_reservable_window\">find_next_reservable_window</a>(<a class=\"id\" href=\"#search_head\">search_head</a>, <a class=\"id\" href=\"#my_rsv\">my_rsv</a>, <a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_block\">start_block</a>, <a class=\"id\" href=\"#group_end_block\">group_end_block</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv_window_remove\">rsv_window_remove</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#my_rsv\">my_rsv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On success, find_next_reservable_window() returns the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reservation window where there is a reservable space after it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Before we reserve this reservable space, we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to make sure there is at least a free block inside this region.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Search the first free bit on the block bitmap.  Search starts from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the start block of the reservable space we just found.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_free_block\">first_free_block</a> = <a class=\"id\" href=\"#bitmap_search_next_usable_block\">bitmap_search_next_usable_block</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> - <a class=\"id\" href=\"#group_first_block\">group_first_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, <a class=\"id\" href=\"#group_end_block\">group_end_block</a> - <a class=\"id\" href=\"#group_first_block\">group_first_block</a> + 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first_free_block\">first_free_block</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * no free block left on the bitmap, no point</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to reserve the space. return failed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv_window_remove\">rsv_window_remove</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#my_rsv\">my_rsv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* failed */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_block\">start_block</a> = <a class=\"id\" href=\"#first_free_block\">first_free_block</a> + <a class=\"id\" href=\"#group_first_block\">group_first_block</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check if the first free block is within the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * free space we just reserved</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start_block\">start_block</a> >= <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> && <a class=\"id\" href=\"#start_block\">start_block</a> <= <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* success */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the first free bit we found is out of the reservable space</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * continue search for next reservable space,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * start from where the free block is,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we also shift the list head to where we stopped last time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#search_head\">search_head</a> = <a class=\"id\" href=\"#my_rsv\">my_rsv</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * try_to_extend_reservation()</span>", 
"<span class=\"comment\"> * @my_rsv:<span class=\"ts\"/><span class=\"ts\"/>given reservation window</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>super block</span>", 
"<span class=\"comment\"> * @size:<span class=\"ts\"/><span class=\"ts\"/>the delta to extend</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attempt to expand the reservation window large enough to have</span>", 
"<span class=\"comment\"> * required number of free blocks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Since ext2_try_to_allocate() will always allocate blocks within</span>", 
"<span class=\"comment\"> * the reservation window range, if the window size is too small,</span>", 
"<span class=\"comment\"> * multiple blocks allocation has to stop at the end of the reservation</span>", 
"<span class=\"comment\"> * window. To make this more efficient, given the total number of</span>", 
"<span class=\"comment\"> * blocks needed and the current size of the window, we try to</span>", 
"<span class=\"comment\"> * expand the reservation window size if necessary on a best-effort</span>", 
"<span class=\"comment\"> * basis before ext2_new_blocks() tries to allocate blocks.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#try_to_extend_reservation\">try_to_extend_reservation</a>(struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *<a class=\"id\" href=\"#my_rsv\">my_rsv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *<a class=\"id\" href=\"#next_rsv\">next_rsv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a> = &amp;<a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_rsv_window_lock\">s_rsv_window_lock</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#spin_trylock\">spin_trylock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_rsv\">next_rsv</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a>, <a class=\"id\" href=\"#rsv_node\">rsv_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#next_rsv\">next_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> - <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> - 1) >= <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> = <a class=\"id\" href=\"#next_rsv\">next_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> - 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#rsv_lock\">rsv_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext2_try_to_allocate_with_rsv()</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>superblock</span>", 
"<span class=\"comment\"> * @group:<span class=\"ts\"/><span class=\"ts\"/>given allocation block group</span>", 
"<span class=\"comment\"> * @bitmap_bh:<span class=\"ts\"/><span class=\"ts\"/>bufferhead holds the block bitmap</span>", 
"<span class=\"comment\"> * @grp_goal:<span class=\"ts\"/><span class=\"ts\"/>given target block within the group</span>", 
"<span class=\"comment\"> * @count:<span class=\"ts\"/><span class=\"ts\"/>target number of blocks to allocate</span>", 
"<span class=\"comment\"> * @my_rsv:<span class=\"ts\"/><span class=\"ts\"/>reservation window</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the main function used to allocate a new block and its reservation</span>", 
"<span class=\"comment\"> * window.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each time when a new block allocation is need, first try to allocate from</span>", 
"<span class=\"comment\"> * its own reservation.  If it does not have a reservation window, instead of</span>", 
"<span class=\"comment\"> * looking for a free bit on bitmap first, then look up the reservation list to</span>", 
"<span class=\"comment\"> * see if it is inside somebody else's reservation window, we try to allocate a</span>", 
"<span class=\"comment\"> * reservation window for it starting from the goal first. Then do the block</span>", 
"<span class=\"comment\"> * allocation within the reservation window.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This will avoid keeping on searching the reservation list again and</span>", 
"<span class=\"comment\"> * again when somebody is looking for a free block (without</span>", 
"<span class=\"comment\"> * reservation), and there are lots of free blocks, but they are all</span>", 
"<span class=\"comment\"> * being reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We use a red-black tree for the per-filesystem reservation list.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a>", 
"<a class=\"id\" href=\"#ext2_try_to_allocate_with_rsv\">ext2_try_to_allocate_with_rsv</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, unsigned int <a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, <a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#grp_goal\">grp_goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> * <a class=\"id\" href=\"#my_rsv\">my_rsv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#group_first_block\">group_first_block</a>, <a class=\"id\" href=\"#group_last_block\">group_last_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#num\">num</a> = *<a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we don't deal with reservation when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * filesystem is mounted without reservation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or the file is not a regular file</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or last attempt to allocate a block with reservation turned on failed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#my_rsv\">my_rsv</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ext2_try_to_allocate\">ext2_try_to_allocate</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * grp_goal is a group relative block number (if there is a goal)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 0 &lt;= grp_goal &lt; EXT2_BLOCKS_PER_GROUP(sb)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * first block is a filesystem wide block number</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * first block is the block number of the first block in this group</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_first_block\">group_first_block</a> = <a class=\"id\" href=\"#ext2_group_first_block_no\">ext2_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_last_block\">group_last_block</a> = <a class=\"id\" href=\"#group_first_block\">group_first_block</a> + (<a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>) - 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Basically we will allocate a new block from inode's reservation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * window.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to allocate a new reservation window, if:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a) inode does not have a reservation window; or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * b) last attempt to allocate a block from existing reservation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    failed; or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * c) we come here with a goal and with a reservation window</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We do not need to allocate a new reservation window if we come here</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at the beginning with a goal and the goal is inside the window, or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we don't have a goal but already have a reservation window.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then we could go to allocate from the reservation window directly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>) || (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#goal_in_my_reservation\">goal_in_my_reservation</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#sb\">sb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a> &lt; *<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a> = *<a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#alloc_new_reservation\">alloc_new_reservation</a>(<a class=\"id\" href=\"#my_rsv\">my_rsv</a>, <a class=\"id\" href=\"#grp_goal\">grp_goal</a>, <a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* failed */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#goal_in_my_reservation\">goal_in_my_reservation</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#sb\">sb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_goal\">grp_goal</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#grp_goal\">grp_goal</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#grp_goal\">grp_goal</a> + <a class=\"id\" href=\"#group_first_block\">group_first_block</a>) + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#curr\">curr</a> &lt; *<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_extend_reservation\">try_to_extend_reservation</a>(<a class=\"id\" href=\"#my_rsv\">my_rsv</a>, <a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#count\">count</a> - <a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_start\">rsv_start</a> &gt; <a class=\"id\" href=\"#group_last_block\">group_last_block</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_end\">rsv_end</a> &lt; <a class=\"id\" href=\"#group_first_block\">group_first_block</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsv_window_dump\">rsv_window_dump</a>(&amp;<a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_rsv_window_root\">s_rsv_window_root</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext2_try_to_allocate\">ext2_try_to_allocate</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, <a class=\"id\" href=\"#grp_goal\">grp_goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#num\">num</a>, &amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_alloc_hit\">rsv_alloc_hit</a> += <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* succeed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = *<a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext2_has_free_blocks()</span>", 
"<span class=\"comment\"> * @sbi:<span class=\"ts\"/><span class=\"ts\"/>in-core super block structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check if filesystem has at least 1 free block available for allocation.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext2_has_free_blocks\">ext2_has_free_blocks</a>(struct <a class=\"id\" href=\"#ext2_sb_info\">ext2_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#free_blocks\">free_blocks</a>, <a class=\"id\" href=\"#root_blocks\">root_blocks</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_blocks\">free_blocks</a> = <a class=\"id\" href=\"#percpu_counter_read_positive\">percpu_counter_read_positive</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_freeblocks_counter\">s_freeblocks_counter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root_blocks\">root_blocks</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_es\">s_es</a>-><a class=\"id\" href=\"#s_r_blocks_count\">s_r_blocks_count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free_blocks\">free_blocks</a> &lt; <a class=\"id\" href=\"#root_blocks\">root_blocks</a> + 1 && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_RESOURCE\">CAP_SYS_RESOURCE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_resuid\">s_resuid</a> != <a class=\"id\" href=\"#current_fsuid\">current_fsuid</a>() &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_resgid\">s_resgid</a> == 0 || !<a class=\"id\" href=\"#in_group_p\">in_group_p</a> (<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_resgid\">s_resgid</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext2_new_blocks() -- core block(s) allocation function</span>", 
"<span class=\"comment\"> * @inode:<span class=\"ts\"/><span class=\"ts\"/>file inode</span>", 
"<span class=\"comment\"> * @goal:<span class=\"ts\"/><span class=\"ts\"/>given target block(filesystem wide)</span>", 
"<span class=\"comment\"> * @count:<span class=\"ts\"/><span class=\"ts\"/>target number of blocks to allocate</span>", 
"<span class=\"comment\"> * @errp:<span class=\"ts\"/><span class=\"ts\"/>error code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ext2_new_blocks uses a goal block to assist allocation.  If the goal is</span>", 
"<span class=\"comment\"> * free, or there is a free block within 32 blocks of the goal, that block</span>", 
"<span class=\"comment\"> * is allocated.  Otherwise a forward search is made for a free block; within </span>", 
"<span class=\"comment\"> * each block group the search first looks for an entire free byte in the block</span>", 
"<span class=\"comment\"> * bitmap, and then for any free bit if that fails.</span>", 
"<span class=\"comment\"> * This function also updates quota and i_blocks field.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#ext2_new_blocks\">ext2_new_blocks</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned long *<a class=\"id\" href=\"#count\">count</a>, int *<a class=\"id\" href=\"#errp\">errp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#gdp_bh\">gdp_bh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group_no\">group_no</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#goal_group\">goal_group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#grp_target_blk\">grp_target_blk</a>;<span class=\"ts\"/><span class=\"comment\">/* blockgroup relative goal block */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#grp_alloc_blk\">grp_alloc_blk</a>;<span class=\"ts\"/><span class=\"comment\">/* blockgroup-relative allocated block*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#ret_block\">ret_block</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* filesyetem-wide allocated block */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bgi\">bgi</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* blockgroup iteration index */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#performed_allocation\">performed_allocation</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_grpblk_t\">ext2_grpblk_t</a> <a class=\"id\" href=\"#free_blocks\">free_blocks</a>;<span class=\"ts\"/><span class=\"comment\">/* number of free blocks in a group */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> *<a class=\"id\" href=\"#gdp\">gdp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_super_block\">ext2_super_block</a> *<a class=\"id\" href=\"#es\">es</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_sb_info\">ext2_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_reserve_window_node\">ext2_reserve_window_node</a> *<a class=\"id\" href=\"#my_rsv\">my_rsv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_block_alloc_info\">ext2_block_alloc_info</a> *<a class=\"id\" href=\"#block_i\">block_i</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#windowsz\">windowsz</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ngroups\">ngroups</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#num\">num</a> = *<a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sb\">sb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"ext2_new_blocks: nonexistent device\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check quota for allocation of this block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dquot_alloc_block\">dquot_alloc_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#es\">es</a> = <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_es\">s_es</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_debug\">ext2_debug</a>(\"goal=%lu.\\n\", <a class=\"id\" href=\"#goal\">goal</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate a block from reservation only when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * filesystem is mounted with reservation(default,-o reservation), and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it's a regular file, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the desired window size is greater than 0 (One could use ioctl</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * command EXT2_IOC_SETRSVSZ to set the window size to 0 to turn off</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reservation on that particular file)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a> = <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#block_i\">block_i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#windowsz\">windowsz</a> = <a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#rsv_window_node\">rsv_window_node</a>.<a class=\"id\" href=\"#rsv_goal_size\">rsv_goal_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#windowsz\">windowsz</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a> = &amp;<a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#rsv_window_node\">rsv_window_node</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext2_has_free_blocks\">ext2_has_free_blocks</a>(<a class=\"id\" href=\"#sbi\">sbi</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First, test whether the goal block is free.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#goal\">goal</a> &lt; <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#goal\">goal</a> >= <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_blocks_count\">s_blocks_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_no\">group_no</a> = (<a class=\"id\" href=\"#goal\">goal</a> - <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>)) /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#goal_group\">goal_group</a> = <a class=\"id\" href=\"#group_no\">group_no</a>;", 
"<a class=\"id\" href=\"#retry_alloc\">retry_alloc</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdp\">gdp</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group_no\">group_no</a>, &amp;<a class=\"id\" href=\"#gdp_bh\">gdp_bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gdp\">gdp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#io_error\">io_error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_blocks\">free_blocks</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if there is not enough free blocks to make a new resevation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * turn off reservation for this allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#my_rsv\">my_rsv</a> && (<a class=\"id\" href=\"#free_blocks\">free_blocks</a> &lt; <a class=\"id\" href=\"#windowsz\">windowsz</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>&& (<a class=\"id\" href=\"#free_blocks\">free_blocks</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>&& (<a class=\"id\" href=\"#rsv_is_empty\">rsv_is_empty</a>(&amp;<a class=\"id\" href=\"#my_rsv\">my_rsv</a>-><a class=\"id\" href=\"#rsv_window\">rsv_window</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free_blocks\">free_blocks</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_target_blk\">grp_target_blk</a> = ((<a class=\"id\" href=\"#goal\">goal</a> - <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>)) %", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#read_block_bitmap\">read_block_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group_no\">group_no</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#io_error\">io_error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_alloc_blk\">grp_alloc_blk</a> = <a class=\"id\" href=\"#ext2_try_to_allocate_with_rsv\">ext2_try_to_allocate_with_rsv</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group_no\">group_no</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, <a class=\"id\" href=\"#grp_target_blk\">grp_target_blk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a>, &amp;<a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grp_alloc_blk\">grp_alloc_blk</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#allocated\">allocated</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now search the rest of the groups.  We assume that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * group_no and gdp correctly point to the last group visited.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#bgi\">bgi</a> = 0; <a class=\"id\" href=\"#bgi\">bgi</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#bgi\">bgi</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_no\">group_no</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group_no\">group_no</a> >= <a class=\"id\" href=\"#ngroups\">ngroups</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_no\">group_no</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdp\">gdp</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group_no\">group_no</a>, &amp;<a class=\"id\" href=\"#gdp_bh\">gdp_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#gdp\">gdp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#io_error\">io_error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_blocks\">free_blocks</a> = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * skip this group (and avoid loading bitmap) if there</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are no free blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#free_blocks\">free_blocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * skip this group if the number of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * free blocks is less than half of the reservation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * window size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#my_rsv\">my_rsv</a> && (<a class=\"id\" href=\"#free_blocks\">free_blocks</a> <= (<a class=\"id\" href=\"#windowsz\">windowsz</a>/2)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#read_block_bitmap\">read_block_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group_no\">group_no</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#io_error\">io_error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * try to allocate block(s) from this group, without a goal(-1).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_alloc_blk\">grp_alloc_blk</a> = <a class=\"id\" href=\"#ext2_try_to_allocate_with_rsv\">ext2_try_to_allocate_with_rsv</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group_no\">group_no</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, -1, <a class=\"id\" href=\"#my_rsv\">my_rsv</a>, &amp;<a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grp_alloc_blk\">grp_alloc_blk</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#allocated\">allocated</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We may end up a bogus ealier ENOSPC error due to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * filesystem is \"full\" of reservations, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there maybe indeed free blocks avaliable on disk</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In this case, we just forget about the reservations</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * just do block allocation as without reservations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#my_rsv\">my_rsv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_rsv\">my_rsv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#windowsz\">windowsz</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_no\">group_no</a> = <a class=\"id\" href=\"#goal_group\">goal_group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry_alloc\">retry_alloc</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* No space left on the device */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<a class=\"id\" href=\"#allocated\">allocated</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_debug\">ext2_debug</a>(\"using block group %d(%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_no\">group_no</a>, <a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret_block\">ret_block</a> = <a class=\"id\" href=\"#grp_alloc_blk\">grp_alloc_blk</a> + <a class=\"id\" href=\"#ext2_group_first_block_no\">ext2_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group_no\">group_no</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_range\">in_range</a>(<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_block_bitmap\">bg_block_bitmap</a>), <a class=\"id\" href=\"#ret_block\">ret_block</a>, <a class=\"id\" href=\"#num\">num</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#in_range\">in_range</a>(<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_inode_bitmap\">bg_inode_bitmap</a>), <a class=\"id\" href=\"#ret_block\">ret_block</a>, <a class=\"id\" href=\"#num\">num</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#in_range\">in_range</a>(<a class=\"id\" href=\"#ret_block\">ret_block</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_inode_table\">bg_inode_table</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_itb_per_group\">s_itb_per_group</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#in_range\">in_range</a>(<a class=\"id\" href=\"#ret_block\">ret_block</a> + <a class=\"id\" href=\"#num\">num</a> - 1, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_inode_table\">bg_inode_table</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_itb_per_group\">s_itb_per_group</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, \"ext2_new_blocks\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Allocating block in system zone - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"blocks from \"<a class=\"id\" href=\"#E2FSBLK\">E2FSBLK</a>\", length %lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ret_block\">ret_block</a>, <a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ext2_try_to_allocate marked the blocks we allocated as in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * use.  So we may want to selectively mark some of the blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as free</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry_alloc\">retry_alloc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#performed_allocation\">performed_allocation</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret_block\">ret_block</a> + <a class=\"id\" href=\"#num\">num</a> - 1 >= <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_blocks_count\">s_blocks_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_error\">ext2_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, \"ext2_new_blocks\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block(\"<a class=\"id\" href=\"#E2FSBLK\">E2FSBLK</a>\") >= blocks count(%d) - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block_group = %d, es == %p \", <a class=\"id\" href=\"#ret_block\">ret_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_blocks_count\">s_blocks_count</a>), <a class=\"id\" href=\"#group_no\">group_no</a>, <a class=\"id\" href=\"#es\">es</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_adjust_blocks\">group_adjust_blocks</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group_no\">group_no</a>, <a class=\"id\" href=\"#gdp\">gdp</a>, <a class=\"id\" href=\"#gdp_bh\">gdp_bh</a>, -<a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_sub\">percpu_counter_sub</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_freeblocks_counter\">s_freeblocks_counter</a>, <a class=\"id\" href=\"#num\">num</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_SYNCHRONOUS\">MS_SYNCHRONOUS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_dirty_buffer\">sync_dirty_buffer</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot_free_block_nodirty\">dquot_free_block_nodirty</a>(<a class=\"id\" href=\"#inode\">inode</a>, *<a class=\"id\" href=\"#count\">count</a>-<a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret_block\">ret_block</a>;", 
"", 
"<a class=\"id\" href=\"#io_error\">io_error</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Undo the block allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#performed_allocation\">performed_allocation</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot_free_block_nodirty\">dquot_free_block_nodirty</a>(<a class=\"id\" href=\"#inode\">inode</a>, *<a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#ext2_new_block\">ext2_new_block</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, unsigned long <a class=\"id\" href=\"#goal\">goal</a>, int *<a class=\"id\" href=\"#errp\">errp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a> = 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ext2_new_blocks\">ext2_new_blocks</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#goal\">goal</a>, &amp;<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#errp\">errp</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#EXT2FS_DEBUG\">EXT2FS_DEBUG</a>", 
"", 
"static const int <a class=\"id\" href=\"#nibblemap\">nibblemap</a>[] = {4, 3, 3, 2, 3, 2, 2, 1, 3, 2, 2, 1, 2, 1, 1, 0};", 
"", 
"unsigned long <a class=\"id\" href=\"#ext2_count_free\">ext2_count_free</a> (struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#map\">map</a>, unsigned int <a class=\"id\" href=\"#numchars\">numchars</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sum\">sum</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#map\">map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (0);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#numchars\">numchars</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sum\">sum</a> += <a class=\"id\" href=\"#nibblemap\">nibblemap</a>[<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#b_data\">b_data</a>[<a class=\"id\" href=\"#i\">i</a>] &amp; 0xf] +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nibblemap\">nibblemap</a>[(<a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#b_data\">b_data</a>[<a class=\"id\" href=\"#i\">i</a>] >> 4) &amp; 0xf];", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#sum\">sum</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>  <span class=\"comment\">/*  EXT2FS_DEBUG  */</span>", 
"", 
"unsigned long <a class=\"id\" href=\"#ext2_count_free_blocks\">ext2_count_free_blocks</a> (struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_group_desc\">ext2_group_desc</a> * <a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#desc_count\">desc_count</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#EXT2FS_DEBUG\">EXT2FS_DEBUG</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bitmap_count\">bitmap_count</a>, <a class=\"id\" href=\"#x\">x</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_super_block\">ext2_super_block</a> *<a class=\"id\" href=\"#es\">es</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#es\">es</a> = <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_es\">s_es</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc_count\">desc_count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_count\">bitmap_count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a> (<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc_count\">desc_count</a> += <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#read_block_bitmap\">read_block_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#ext2_count_free\">ext2_count_free</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a> (\"group %d: stored = %d, counted = %lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>), <a class=\"id\" href=\"#x\">x</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_count\">bitmap_count</a> += <a class=\"id\" href=\"#x\">x</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"ext2_count_free_blocks: stored = %lu, computed = %lu, %lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>(long)<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_free_blocks_count\">s_free_blocks_count</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc_count\">desc_count</a>, <a class=\"id\" href=\"#bitmap_count\">bitmap_count</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_count\">bitmap_count</a>;", 
"#else", 
"        for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"                <a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext2_get_group_desc\">ext2_get_group_desc</a> (<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"                if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"                        continue;", 
"                <a class=\"id\" href=\"#desc_count\">desc_count</a> += <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_free_blocks_count\">bg_free_blocks_count</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#desc_count\">desc_count</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#test_root\">test_root</a>(int <a class=\"id\" href=\"#a\">a</a>, int <a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#b\">b</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#a\">a</a> &gt; <a class=\"id\" href=\"#num\">num</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> *= <a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#num\">num</a> == <a class=\"id\" href=\"#a\">a</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext2_group_sparse\">ext2_group_sparse</a>(int <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a> <= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#test_root\">test_root</a>(<a class=\"id\" href=\"#group\">group</a>, 3) || <a class=\"id\" href=\"#test_root\">test_root</a>(<a class=\"id\" href=\"#group\">group</a>, 5) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#test_root\">test_root</a>(<a class=\"id\" href=\"#group\">group</a>, 7));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext2_bg_has_super - number of blocks used by the superblock in group</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sb: superblock for filesystem</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@group: group number to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return the number of blocks used by the superblock (primary or backup)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in this group.  Currently this will be only 0 or 1.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext2_bg_has_super\">ext2_bg_has_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT2_HAS_RO_COMPAT_FEATURE\">EXT2_HAS_RO_COMPAT_FEATURE</a>(<a class=\"id\" href=\"#sb\">sb</a>,<a class=\"id\" href=\"#EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER\">EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER</a>)&&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#ext2_group_sparse\">ext2_group_sparse</a>(<a class=\"id\" href=\"#group\">group</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext2_bg_num_gdb - number of blocks used by the group table in group</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sb: superblock for filesystem</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@group: group number to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return the number of blocks used by the group descriptor table</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(primary or backup) in this group.  In the future there may be a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>different number of descriptor blocks in each group.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#ext2_bg_num_gdb\">ext2_bg_num_gdb</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ext2_bg_has_super\">ext2_bg_has_super</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>) ? <a class=\"id\" href=\"#EXT2_SB\">EXT2_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_gdb_count\">s_gdb_count</a> : 0;", 
"}", 
"", 
];
xr_frag_insert('l/9e/a2ac394de0ddf77ce87e99b238496c5278d1d7.xr', __xr_tmp);
