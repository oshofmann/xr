var __xr_tmp = [
"", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kprobe_fault_handler\">kprobe_fault_handler</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, int <a class=\"id\" href=\"#trapnr\">trapnr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#kprobe_running\">kprobe_running</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_ctlblk\">kprobe_ctlblk</a> *<a class=\"id\" href=\"#kcb\">kcb</a> = <a class=\"id\" href=\"#get_kprobe_ctlblk\">get_kprobe_ctlblk</a>();", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_status\">kprobe_status</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#KPROBE_HIT_SS\">KPROBE_HIT_SS</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#KPROBE_REENTER\">KPROBE_REENTER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are here because the instruction being single</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * stepped caused a page fault. We reset the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * kprobe and the ip points back to the probe address</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and allow the page fault handler to continue as a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * normal page fault.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> = (unsigned long)<a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_old_flags\">kprobe_old_flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_status\">kprobe_status</a> == <a class=\"id\" href=\"#KPROBE_REENTER\">KPROBE_REENTER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restore_previous_kprobe\">restore_previous_kprobe</a>(<a class=\"id\" href=\"#kcb\">kcb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reset_current_kprobe\">reset_current_kprobe</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#KPROBE_HIT_ACTIVE\">KPROBE_HIT_ACTIVE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#KPROBE_HIT_SSDONE\">KPROBE_HIT_SSDONE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We increment the nmissed count for accounting,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we can also use npre/npostfault count for accounting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * these specific fault cases.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kprobes_inc_nmissed_count\">kprobes_inc_nmissed_count</a>(<a class=\"id\" href=\"#cur\">cur</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We come here because instructions in the pre/post</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * handler caused the page_fault, this could happen</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if handler tries to access user space by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * copy_from_user(), get_user() etc. Let the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * user-specified handler try to fix it first.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#fault_handler\">fault_handler</a> && <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#fault_handler\">fault_handler</a>(<a class=\"id\" href=\"#cur\">cur</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#trapnr\">trapnr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In case the user-specified fault handler returned</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * zero, try to fix up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fixup_exception\">fixup_exception</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fixup routine could not handle it,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Let do_page_fault() fix it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wrapper routine for handling exceptions.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kprobe_exceptions_notify\">kprobe_exceptions_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#die_args\">die_args</a> *<a class=\"id\" href=\"#args\">args</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#regs\">regs</a> && <a class=\"id\" href=\"#user_mode_vm\">user_mode_vm</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#val\">val</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DIE_INT3\">DIE_INT3</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobe_handler\">kprobe_handler</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DIE_DEBUG\">DIE_DEBUG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#post_kprobe_handler\">post_kprobe_handler</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#regs\">regs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Reset the BS bit in dr6 (pointed by args-&gt;err) to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * denote completion of processing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*(unsigned long *)<a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#err\">err</a>)) &= ~<a class=\"id\" href=\"#DR_STEP\">DR_STEP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DIE_GPF\">DIE_GPF</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * To be potentially processing a kprobe fault and to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * trust the result from kprobe_running(), we have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be non-preemptible.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#preemptible\">preemptible</a>() && <a class=\"id\" href=\"#kprobe_running\">kprobe_running</a>() &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#kprobe_fault_handler\">kprobe_fault_handler</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#trapnr\">trapnr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#setjmp_pre_handler\">setjmp_pre_handler</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#jprobe\">jprobe</a> *<a class=\"id\" href=\"#jp\">jp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#jprobe\">jprobe</a>, <a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_ctlblk\">kprobe_ctlblk</a> *<a class=\"id\" href=\"#kcb\">kcb</a> = <a class=\"id\" href=\"#get_kprobe_ctlblk\">get_kprobe_ctlblk</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#jprobe_saved_regs\">jprobe_saved_regs</a> = *<a class=\"id\" href=\"#regs\">regs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#jprobe_saved_sp\">jprobe_saved_sp</a> = <a class=\"id\" href=\"#stack_addr\">stack_addr</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)(<a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#jprobe_saved_sp\">jprobe_saved_sp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * As Linus pointed out, gcc assumes that the callee</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * owns the argument space and could overwrite it, e.g.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tailcall optimization. So, to be absolutely safe</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we also save and restore enough stack bytes to cover</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the argument area.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#jprobes_stack\">jprobes_stack</a>, (<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *)<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#MIN_STACK_SIZE\">MIN_STACK_SIZE</a>(<a class=\"id\" href=\"#addr\">addr</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_hardirqs_off\">trace_hardirqs_off</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> = (unsigned long)(<a class=\"id\" href=\"#jp\">jp</a>-><a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#jprobe_return\">jprobe_return</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_ctlblk\">kprobe_ctlblk</a> *<a class=\"id\" href=\"#kcb\">kcb</a> = <a class=\"id\" href=\"#get_kprobe_ctlblk\">get_kprobe_ctlblk</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile (", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"       xchg   %%rbx,%%rsp \\n\"", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"       xchgl   %%ebx,%%esp \\n\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"       int3   \\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"       .globl jprobe_return_end\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"       jprobe_return_end: \\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"       nop   \\n\"::\"b\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#jprobe_saved_sp\">jprobe_saved_sp</a>):\"memory\");", 
"}", 
"", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#longjmp_break_handler\">longjmp_break_handler</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_ctlblk\">kprobe_ctlblk</a> *<a class=\"id\" href=\"#kcb\">kcb</a> = <a class=\"id\" href=\"#get_kprobe_ctlblk\">get_kprobe_ctlblk</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#addr\">addr</a> = (<a class=\"id\" href=\"#u8\">u8</a> *) (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> - 1);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#jprobe\">jprobe</a> *<a class=\"id\" href=\"#jp\">jp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#jprobe\">jprobe</a>, <a class=\"id\" href=\"#kp\">kp</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#addr\">addr</a> &gt; (<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#jprobe_return\">jprobe_return</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#addr\">addr</a> &lt; (<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#jprobe_return_end\">jprobe_return_end</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stack_addr\">stack_addr</a>(<a class=\"id\" href=\"#regs\">regs</a>) != <a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#jprobe_saved_sp\">jprobe_saved_sp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#saved_regs\">saved_regs</a> = &amp;<a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#jprobe_saved_regs\">jprobe_saved_regs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"current sp %p does not match saved sp %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#stack_addr\">stack_addr</a>(<a class=\"id\" href=\"#regs\">regs</a>), <a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#jprobe_saved_sp\">jprobe_saved_sp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Saved registers for jprobe %p\\n\", <a class=\"id\" href=\"#jp\">jp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#show_registers\">show_registers</a>(<a class=\"id\" href=\"#saved_regs\">saved_regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Current registers\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#show_registers\">show_registers</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#jprobe_saved_regs\">jprobe_saved_regs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>((<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *)(<a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#jprobe_saved_sp\">jprobe_saved_sp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#jprobes_stack\">jprobes_stack</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#MIN_STACK_SIZE\">MIN_STACK_SIZE</a>(<a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#jprobe_saved_sp\">jprobe_saved_sp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_OPTPROBES\">CONFIG_OPTPROBES</a>", 
"", 
"<span class=\"comment\">/* Insert a call instruction at address 'from', which calls address 'to'.*/</span>", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#synthesize_relcall\">synthesize_relcall</a>(void *<a class=\"id\" href=\"#from\">from</a>, void *<a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__synthesize_relative_insn\">__synthesize_relative_insn</a>(<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#RELATIVECALL_OPCODE\">RELATIVECALL_OPCODE</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Insert a move instruction which sets a pointer to eax/rdi (1st arg). */</span>", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#synthesize_set_arg1\">synthesize_set_arg1</a>(<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a>++ = 0x48;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a>++ = 0xbf;", 
"#else", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a>++ = 0xb8;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>*(unsigned long *)<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#kprobes_optinsn_template_holder\">kprobes_optinsn_template_holder</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile (", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\".global optprobe_template_entry\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"optprobe_template_entry: \\n\"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We don't bother saving the ss register */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" pushq %rsp\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" pushfq\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SAVE_REGS_STRING\">SAVE_REGS_STRING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" movq %rsp, %rsi\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\".global optprobe_template_val\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"optprobe_template_val: \\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ASM_NOP5\">ASM_NOP5</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ASM_NOP5\">ASM_NOP5</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\".global optprobe_template_call\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"optprobe_template_call: \\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ASM_NOP5\">ASM_NOP5</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Move flags to rsp */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" movq 144(%rsp), %rdx\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" movq %rdx, 152(%rsp)\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RESTORE_REGS_STRING\">RESTORE_REGS_STRING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip flags entry */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" addq $8, %rsp\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" popfq\\n\"", 
"#else <span class=\"comment\">/* CONFIG_X86_32 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" pushf\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SAVE_REGS_STRING\">SAVE_REGS_STRING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" movl %esp, %edx\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\".global optprobe_template_val\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"optprobe_template_val: \\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ASM_NOP5\">ASM_NOP5</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\".global optprobe_template_call\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"optprobe_template_call: \\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ASM_NOP5\">ASM_NOP5</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RESTORE_REGS_STRING\">RESTORE_REGS_STRING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" addl $4, %esp\\n\"<span class=\"ts\"/><span class=\"comment\">/* skip cs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" popf\\n\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\".global optprobe_template_end\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"optprobe_template_end: \\n\");", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TMPL_MOVE_IDX\">TMPL_MOVE_IDX</a> \\", 
"<span class=\"ts\"/>((long)&amp;<a class=\"id\" href=\"#optprobe_template_val\">optprobe_template_val</a> - (long)&amp;<a class=\"id\" href=\"#optprobe_template_entry\">optprobe_template_entry</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TMPL_CALL_IDX\">TMPL_CALL_IDX</a> \\", 
"<span class=\"ts\"/>((long)&amp;<a class=\"id\" href=\"#optprobe_template_call\">optprobe_template_call</a> - (long)&amp;<a class=\"id\" href=\"#optprobe_template_entry\">optprobe_template_entry</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TMPL_END_IDX\">TMPL_END_IDX</a> \\", 
"<span class=\"ts\"/>((long)&amp;<a class=\"id\" href=\"#optprobe_template_end\">optprobe_template_end</a> - (long)&amp;<a class=\"id\" href=\"#optprobe_template_entry\">optprobe_template_entry</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INT3_SIZE\">INT3_SIZE</a> sizeof(<a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a>)", 
"", 
"<span class=\"comment\">/* Optimized kprobe call back function: called from optinsn */</span>", 
"static void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#optimized_callback\">optimized_callback</a>(struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_ctlblk\">kprobe_ctlblk</a> *<a class=\"id\" href=\"#kcb\">kcb</a> = <a class=\"id\" href=\"#get_kprobe_ctlblk\">get_kprobe_ctlblk</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kprobe_running\">kprobe_running</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kprobes_inc_nmissed_count\">kprobes_inc_nmissed_count</a>(&amp;<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Save skipped registers */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a>;", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a> | <a class=\"id\" href=\"#get_kernel_rpl\">get_kernel_rpl</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#gs\">gs</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> = (unsigned long)<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#INT3_SIZE\">INT3_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#orig_ax\">orig_ax</a> = ~0UL;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#current_kprobe\">current_kprobe</a>) = &amp;<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kcb\">kcb</a>-><a class=\"id\" href=\"#kprobe_status\">kprobe_status</a> = <a class=\"id\" href=\"#KPROBE_HIT_ACTIVE\">KPROBE_HIT_ACTIVE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opt_pre_handler\">opt_pre_handler</a>(&amp;<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#current_kprobe\">current_kprobe</a>) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#copy_optimized_instructions\">copy_optimized_instructions</a>(<a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = 0, <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#RELATIVEJUMP_SIZE\">RELATIVEJUMP_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__copy_instruction\">__copy_instruction</a>(<a class=\"id\" href=\"#dest\">dest</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#src\">src</a> + <a class=\"id\" href=\"#len\">len</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> || !<a class=\"id\" href=\"#can_boost\">can_boost</a>(<a class=\"id\" href=\"#dest\">dest</a> + <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Check whether the address range is reserved */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ftrace_text_reserved\">ftrace_text_reserved</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#src\">src</a> + <a class=\"id\" href=\"#len\">len</a> - 1) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#alternatives_text_reserved\">alternatives_text_reserved</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#src\">src</a> + <a class=\"id\" href=\"#len\">len</a> - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Check whether insn is indirect jump */</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#insn_is_indirect_jump\">insn_is_indirect_jump</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opcode\">opcode</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[0] == 0xff &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#X86_MODRM_REG\">X86_MODRM_REG</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#modrm\">modrm</a>.<a class=\"id\" href=\"#value\">value</a>) &amp; 6) == 4) || <span class=\"comment\">/* Jump */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opcode\">opcode</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[0] == 0xea);<span class=\"ts\"/><span class=\"comment\">/* Segment based jump */</span>", 
"}", 
"", 
"<span class=\"comment\">/* Check whether insn jumps into specified address range */</span>", 
"static int <a class=\"id\" href=\"#insn_jump_into_range\">insn_jump_into_range</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#target\">target</a> = 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opcode\">opcode</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[0]) {", 
"<span class=\"ts\"/>case 0xe0:<span class=\"ts\"/><span class=\"comment\">/* loopne */</span>", 
"<span class=\"ts\"/>case 0xe1:<span class=\"ts\"/><span class=\"comment\">/* loope */</span>", 
"<span class=\"ts\"/>case 0xe2:<span class=\"ts\"/><span class=\"comment\">/* loop */</span>", 
"<span class=\"ts\"/>case 0xe3:<span class=\"ts\"/><span class=\"comment\">/* jcxz */</span>", 
"<span class=\"ts\"/>case 0xe9:<span class=\"ts\"/><span class=\"comment\">/* near relative jump */</span>", 
"<span class=\"ts\"/>case 0xeb:<span class=\"ts\"/><span class=\"comment\">/* short relative jump */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 0x0f:", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opcode\">opcode</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[1] &amp; 0xf0) == 0x80) <span class=\"comment\">/* jcc near */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opcode\">opcode</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[0] &amp; 0xf0) == 0x70) <span class=\"comment\">/* jcc short */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a> = (unsigned long)<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#next_byte\">next_byte</a> + <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate\">immediate</a>.<a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#start\">start</a> <= <a class=\"id\" href=\"#target\">target</a> && <a class=\"id\" href=\"#target\">target</a> <= <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Decode whole function to ensure any instructions don't jump into target */</span>", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#can_optimize\">can_optimize</a>(unsigned long <a class=\"id\" href=\"#paddr\">paddr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size\">size</a> = 0, <a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#insn\">insn</a> <a class=\"id\" href=\"#insn\">insn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kprobe_opcode_t\">kprobe_opcode_t</a> <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#MAX_INSN_SIZE\">MAX_INSN_SIZE</a>];", 
"<span class=\"ts\"/><span class=\"comment\">/* Dummy buffers for lookup_symbol_attrs */</span>", 
"<span class=\"ts\"/>static char <a class=\"id\" href=\"#__dummy_buf\">__dummy_buf</a>[<a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Lookup symbol including addr */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kallsyms_lookup\">kallsyms_lookup</a>(<a class=\"id\" href=\"#paddr\">paddr</a>, &amp;<a class=\"id\" href=\"#size\">size</a>, &amp;<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#__dummy_buf\">__dummy_buf</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check there is enough space for a relative jump. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#RELATIVEJUMP_SIZE\">RELATIVEJUMP_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Decode instructions */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#paddr\">paddr</a> - <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#paddr\">paddr</a> - <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#size\">size</a>) { <span class=\"comment\">/* Decode until function end */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#search_exception_tables\">search_exception_tables</a>(<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Since some fixup code will jumps into this function,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we can't optimize kprobe in this function.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_insn_init\">kernel_insn_init</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>, (void *)<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_get_opcode\">insn_get_opcode</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#opcode\">opcode</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[0] == <a class=\"id\" href=\"#BREAKPOINT_INSTRUCTION\">BREAKPOINT_INSTRUCTION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#recover_probed_instruction\">recover_probed_instruction</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_insn_init\">kernel_insn_init</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_get_length\">insn_get_length</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Recover address */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#kaddr\">kaddr</a> = (void *)<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#next_byte\">next_byte</a> = (void *)(<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check any instructions don't jump into target */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#insn_is_indirect_jump\">insn_is_indirect_jump</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#insn_jump_into_range\">insn_jump_into_range</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>, <a class=\"id\" href=\"#paddr\">paddr</a> + <a class=\"id\" href=\"#INT3_SIZE\">INT3_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#RELATIVE_ADDR_SIZE\">RELATIVE_ADDR_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/* Check optimized_kprobe can actually be optimized. */</span>", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#arch_check_optimized_kprobe\">arch_check_optimized_kprobe</a>(struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#size\">size</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#get_kprobe\">get_kprobe</a>(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> && !<a class=\"id\" href=\"#kprobe_disabled\">kprobe_disabled</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Check the addr is within the optimized instructions. */</span>", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#arch_within_optimized_kprobe\">arch_within_optimized_kprobe</a>(struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return ((unsigned long)<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a> <= <a class=\"id\" href=\"#addr\">addr</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Free optimized instruction slot */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a>", 
"void <a class=\"id\" href=\"#__arch_remove_optimized_kprobe\">__arch_remove_optimized_kprobe</a>(struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>, int <a class=\"id\" href=\"#dirty\">dirty</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#insn\">insn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_optinsn_slot\">free_optinsn_slot</a>(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#insn\">insn</a>, <a class=\"id\" href=\"#dirty\">dirty</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#insn\">insn</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#arch_remove_optimized_kprobe\">arch_remove_optimized_kprobe</a>(struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__arch_remove_optimized_kprobe\">__arch_remove_optimized_kprobe</a>(<a class=\"id\" href=\"#op\">op</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copy replacing target instructions</span>", 
"<span class=\"comment\"> * Target instructions MUST be relocatable (checked inside)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#arch_prepare_optimized_kprobe\">arch_prepare_optimized_kprobe</a>(struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#rel\">rel</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#can_optimize\">can_optimize</a>((unsigned long)<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EILSEQ\">EILSEQ</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#insn\">insn</a> = <a class=\"id\" href=\"#get_optinsn_slot\">get_optinsn_slot</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#insn\">insn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Verify if the address gap is in 2GB range, because this uses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a relative jump.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rel\">rel</a> = (long)<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#insn\">insn</a> - (long)<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#RELATIVEJUMP_SIZE\">RELATIVEJUMP_SIZE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#abs\">abs</a>(<a class=\"id\" href=\"#rel\">rel</a>) &gt; 0x7fffffff)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#insn\">insn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy instructions into the out-of-line buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#copy_optimized_instructions\">copy_optimized_instructions</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#TMPL_END_IDX\">TMPL_END_IDX</a>, <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__arch_remove_optimized_kprobe\">__arch_remove_optimized_kprobe</a>(<a class=\"id\" href=\"#op\">op</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy arch-dep-instance from template */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, &amp;<a class=\"id\" href=\"#optprobe_template_entry\">optprobe_template_entry</a>, <a class=\"id\" href=\"#TMPL_END_IDX\">TMPL_END_IDX</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set probe information */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synthesize_set_arg1\">synthesize_set_arg1</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#TMPL_MOVE_IDX\">TMPL_MOVE_IDX</a>, (unsigned long)<a class=\"id\" href=\"#op\">op</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set probe function call */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synthesize_relcall\">synthesize_relcall</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#TMPL_CALL_IDX\">TMPL_CALL_IDX</a>, <a class=\"id\" href=\"#optimized_callback\">optimized_callback</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set returning jmp instruction at the tail of out-of-line buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synthesize_reljump\">synthesize_reljump</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#TMPL_END_IDX\">TMPL_END_IDX</a> + <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_icache_range\">flush_icache_range</a>((unsigned long) <a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (unsigned long) <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#TMPL_END_IDX\">TMPL_END_IDX</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#RELATIVEJUMP_SIZE\">RELATIVEJUMP_SIZE</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Replace a breakpoint (int3) with a relative jump.  */</span>", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#arch_optimize_kprobe\">arch_optimize_kprobe</a>(struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#jmp_code\">jmp_code</a>[<a class=\"id\" href=\"#RELATIVEJUMP_SIZE\">RELATIVEJUMP_SIZE</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#rel\">rel</a> = (<a class=\"id\" href=\"#s32\">s32</a>)((long)<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#insn\">insn</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((long)<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#RELATIVEJUMP_SIZE\">RELATIVEJUMP_SIZE</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Backup instructions which will be replaced by jump address */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#copied_insn\">copied_insn</a>, <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#INT3_SIZE\">INT3_SIZE</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#RELATIVE_ADDR_SIZE\">RELATIVE_ADDR_SIZE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jmp_code\">jmp_code</a>[0] = <a class=\"id\" href=\"#RELATIVEJUMP_OPCODE\">RELATIVEJUMP_OPCODE</a>;", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#s32\">s32</a> *)(&amp;<a class=\"id\" href=\"#jmp_code\">jmp_code</a>[1]) = <a class=\"id\" href=\"#rel\">rel</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * text_poke_smp doesn't support NMI/MCE code modifying.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * However, since kprobes itself also doesn't support NMI/MCE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * code probing, it's not a problem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#text_poke_smp\">text_poke_smp</a>(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#jmp_code\">jmp_code</a>, <a class=\"id\" href=\"#RELATIVEJUMP_SIZE\">RELATIVEJUMP_SIZE</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Replace a relative jump with a breakpoint (int3).  */</span>", 
"void <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#arch_unoptimize_kprobe\">arch_unoptimize_kprobe</a>(struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#RELATIVEJUMP_SIZE\">RELATIVEJUMP_SIZE</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set int3 to first byte for kprobes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[0] = <a class=\"id\" href=\"#BREAKPOINT_INSTRUCTION\">BREAKPOINT_INSTRUCTION</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a> + 1, <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#copied_insn\">copied_insn</a>, <a class=\"id\" href=\"#RELATIVE_ADDR_SIZE\">RELATIVE_ADDR_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#text_poke_smp\">text_poke_smp</a>(<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#RELATIVEJUMP_SIZE\">RELATIVEJUMP_SIZE</a>);", 
"}", 
"", 
"static int  <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#setup_detour_execution\">setup_detour_execution</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#reenter\">reenter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a> *<a class=\"id\" href=\"#op\">op</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#KPROBE_FLAG_OPTIMIZED\">KPROBE_FLAG_OPTIMIZED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This kprobe is really able to run optimized path. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#optimized_kprobe\">optimized_kprobe</a>, <a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Detour through copied instructions */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> = (unsigned long)<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#optinsn\">optinsn</a>.<a class=\"id\" href=\"#insn\">insn</a> + <a class=\"id\" href=\"#TMPL_END_IDX\">TMPL_END_IDX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#reenter\">reenter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reset_current_kprobe\">reset_current_kprobe</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#arch_init_kprobes\">arch_init_kprobes</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#arch_trampoline_kprobe\">arch_trampoline_kprobe</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/9e/f81625d0bf93e5fa388f735e9cbab17ec9c98b.xr', __xr_tmp);
