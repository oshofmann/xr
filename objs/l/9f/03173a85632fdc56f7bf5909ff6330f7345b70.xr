var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_IO_H\">_ASM_X86_IO_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_IO_H\">_ASM_X86_IO_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This file contains the definitions for the x86 IO instructions</span>", 
"<span class=\"comment\"> * inb/inw/inl/outb/outw/outl and the \"string versions\" of the same</span>", 
"<span class=\"comment\"> * (insb/insw/insl/outsb/outsw/outsl). You can also use \"pausing\"</span>", 
"<span class=\"comment\"> * versions of the single-IO instructions (inb_p/inw_p/..).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is not meant to be obfuscating: it's just complicated</span>", 
"<span class=\"comment\"> * to (a) handle it all in a way that makes gcc able to optimize it</span>", 
"<span class=\"comment\"> * as well as possible and (b) trying to avoid writing the same thing</span>", 
"<span class=\"comment\"> * over and over again with slight variations and possibly making a</span>", 
"<span class=\"comment\"> * mistake somewhere.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Thanks to James van Artsdalen for a better timing-fix than</span>", 
"<span class=\"comment\"> * the two short jumps: using outb's to a nonexistent port seems</span>", 
"<span class=\"comment\"> * to guarantee better timings even on fast machines.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On the other hand, I'd like to be sure of a non-existent port:</span>", 
"<span class=\"comment\"> * I feel a bit unsafe about using 0x80 (should be safe, though)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Linus</span>", 
"<span class=\"comment\"> */</span>", 
"", 
" <span class=\"comment\">/*</span>", 
"<span class=\"comment\">  *  Bit simplified and optimized by Jan Hubicka</span>", 
"<span class=\"comment\">  *  Support of BIGMEM added by Gerhard Wichert, Siemens AG, July 1999.</span>", 
"<span class=\"comment\">  *</span>", 
"<span class=\"comment\">  *  isa_memset_io, isa_memcpy_fromio, isa_memcpy_toio added,</span>", 
"<span class=\"comment\">  *  isa_read[wl] and isa_write[wl] fixed</span>", 
"<span class=\"comment\">  *  - Arnaldo Carvalho de Melo &lt;acme@conectiva.com.br&gt;</span>", 
"<span class=\"comment\">  */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_HAS_IOREMAP_WC\">ARCH_HAS_IOREMAP_WC</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>-<a class=\"id\" href=\"#generic\">generic</a>/int-<a class=\"id\" href=\"#ll64\">ll64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#build_mmio_read\">build_mmio_read</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#barrier\">barrier</a>) \\", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#name\">name</a>(const volatile void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>) \\", 
"{ <a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#ret\">ret</a>; <a class=\"id\" href=\"#asm\">asm</a> volatile(\"mov\" <a class=\"id\" href=\"#size\">size</a> \" %1,%0\":<a class=\"id\" href=\"#reg\">reg</a> (<a class=\"id\" href=\"#ret\">ret</a>) \\", 
":\"m\" (*(volatile <a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#__force\">__force</a> *)<a class=\"id\" href=\"#addr\">addr</a>) <a class=\"id\" href=\"#barrier\">barrier</a>); return <a class=\"id\" href=\"#ret\">ret</a>; }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#build_mmio_write\">build_mmio_write</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#barrier\">barrier</a>) \\", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#name\">name</a>(<a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#val\">val</a>, volatile void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>) \\", 
"{ <a class=\"id\" href=\"#asm\">asm</a> volatile(\"mov\" <a class=\"id\" href=\"#size\">size</a> \" %0,%1\": :<a class=\"id\" href=\"#reg\">reg</a> (<a class=\"id\" href=\"#val\">val</a>), \\", 
"\"m\" (*(volatile <a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#__force\">__force</a> *)<a class=\"id\" href=\"#addr\">addr</a>) <a class=\"id\" href=\"#barrier\">barrier</a>); }", 
"", 
"<a class=\"id\" href=\"#build_mmio_read\">build_mmio_read</a>(<a class=\"id\" href=\"#readb\">readb</a>, \"b\", unsigned char, \"=q\", :\"memory\")", 
"<a class=\"id\" href=\"#build_mmio_read\">build_mmio_read</a>(<a class=\"id\" href=\"#readw\">readw</a>, \"w\", unsigned short, \"=r\", :\"memory\")", 
"<a class=\"id\" href=\"#build_mmio_read\">build_mmio_read</a>(<a class=\"id\" href=\"#readl\">readl</a>, \"l\", unsigned int, \"=r\", :\"memory\")", 
"", 
"<a class=\"id\" href=\"#build_mmio_read\">build_mmio_read</a>(<a class=\"id\" href=\"#__readb\">__readb</a>, \"b\", unsigned char, \"=q\", )", 
"<a class=\"id\" href=\"#build_mmio_read\">build_mmio_read</a>(<a class=\"id\" href=\"#__readw\">__readw</a>, \"w\", unsigned short, \"=r\", )", 
"<a class=\"id\" href=\"#build_mmio_read\">build_mmio_read</a>(<a class=\"id\" href=\"#__readl\">__readl</a>, \"l\", unsigned int, \"=r\", )", 
"", 
"<a class=\"id\" href=\"#build_mmio_write\">build_mmio_write</a>(<a class=\"id\" href=\"#writeb\">writeb</a>, \"b\", unsigned char, \"q\", :\"memory\")", 
"<a class=\"id\" href=\"#build_mmio_write\">build_mmio_write</a>(<a class=\"id\" href=\"#writew\">writew</a>, \"w\", unsigned short, \"r\", :\"memory\")", 
"<a class=\"id\" href=\"#build_mmio_write\">build_mmio_write</a>(<a class=\"id\" href=\"#writel\">writel</a>, \"l\", unsigned int, \"r\", :\"memory\")", 
"", 
"<a class=\"id\" href=\"#build_mmio_write\">build_mmio_write</a>(<a class=\"id\" href=\"#__writeb\">__writeb</a>, \"b\", unsigned char, \"q\", )", 
"<a class=\"id\" href=\"#build_mmio_write\">build_mmio_write</a>(<a class=\"id\" href=\"#__writew\">__writew</a>, \"w\", unsigned short, \"r\", )", 
"<a class=\"id\" href=\"#build_mmio_write\">build_mmio_write</a>(<a class=\"id\" href=\"#__writel\">__writel</a>, \"l\", unsigned int, \"r\", )", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#readb_relaxed\">readb_relaxed</a>(<a class=\"id\" href=\"#a\">a</a>) <a class=\"id\" href=\"#__readb\">__readb</a>(<a class=\"id\" href=\"#a\">a</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#readw_relaxed\">readw_relaxed</a>(<a class=\"id\" href=\"#a\">a</a>) <a class=\"id\" href=\"#__readw\">__readw</a>(<a class=\"id\" href=\"#a\">a</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#readl_relaxed\">readl_relaxed</a>(<a class=\"id\" href=\"#a\">a</a>) <a class=\"id\" href=\"#__readl\">__readl</a>(<a class=\"id\" href=\"#a\">a</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__raw_readb\">__raw_readb</a> <a class=\"id\" href=\"#__readb\">__readb</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__raw_readw\">__raw_readw</a> <a class=\"id\" href=\"#__readw\">__readw</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__raw_readl\">__raw_readl</a> <a class=\"id\" href=\"#__readl\">__readl</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__raw_writeb\">__raw_writeb</a> <a class=\"id\" href=\"#__writeb\">__writeb</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__raw_writew\">__raw_writew</a> <a class=\"id\" href=\"#__writew\">__writew</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__raw_writel\">__raw_writel</a> <a class=\"id\" href=\"#__writel\">__writel</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mmiowb\">mmiowb</a>() <a class=\"id\" href=\"#barrier\">barrier</a>()", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"", 
"<a class=\"id\" href=\"#build_mmio_read\">build_mmio_read</a>(<a class=\"id\" href=\"#readq\">readq</a>, \"q\", unsigned long, \"=r\", :\"memory\")", 
"<a class=\"id\" href=\"#build_mmio_write\">build_mmio_write</a>(<a class=\"id\" href=\"#writeq\">writeq</a>, \"q\", unsigned long, \"r\", :\"memory\")", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__u64\">__u64</a> <a class=\"id\" href=\"#readq\">readq</a>(const volatile void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>const volatile <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#low\">low</a>, <a class=\"id\" href=\"#high\">high</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#low\">low</a> = <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#high\">high</a> = <a class=\"id\" href=\"#readl\">readl</a>(<a class=\"id\" href=\"#p\">p</a> + 1);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#low\">low</a> + ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#high\">high</a> << 32);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#writeq\">writeq</a>(<a class=\"id\" href=\"#__u64\">__u64</a> <a class=\"id\" href=\"#val\">val</a>, volatile void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writel\">writel</a>(<a class=\"id\" href=\"#val\">val</a> >> 32, <a class=\"id\" href=\"#addr\">addr</a>+4);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#readq_relaxed\">readq_relaxed</a>(<a class=\"id\" href=\"#a\">a</a>)<span class=\"ts\"/><a class=\"id\" href=\"#readq\">readq</a>(<a class=\"id\" href=\"#a\">a</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__raw_readq\">__raw_readq</a>(<a class=\"id\" href=\"#a\">a</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#readq\">readq</a>(<a class=\"id\" href=\"#a\">a</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__raw_writeq\">__raw_writeq</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#addr\">addr</a>)<span class=\"ts\"/><a class=\"id\" href=\"#writeq\">writeq</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#addr\">addr</a>)", 
"", 
"<span class=\"comment\">/* Let people know that we have them */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#readq\">readq</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#readq\">readq</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#writeq\">writeq</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writeq\">writeq</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>virt_to_phys<span class=\"ts\"/>-<span class=\"ts\"/>map virtual addresses to physical</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@address: address to remap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The returned physical address is the physical (CPU) mapping for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the memory address given. It is only valid to use this function on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>addresses directly mapped or allocated via kmalloc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function does not give bus mappings for DMA transfers. In</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>almost all conceivable cases a device driver should not be using</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this function</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(volatile void *<a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>phys_to_virt<span class=\"ts\"/>-<span class=\"ts\"/>map physical address to virtual</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@address: address to remap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The returned virtual address is a current CPU mapping for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the memory address given. It is only valid to use this function on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>addresses that have a kernel mapping</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function does not handle bus mappings for DMA transfers. In</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>almost all conceivable cases a device driver should not be using</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this function</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Change \"struct page\" to physical address.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#page_to_phys\">page_to_phys</a>(<a class=\"id\" href=\"#page\">page</a>)    ((<a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a>)<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ISA I/O bus memory addresses are 1:1 with the physical address.</span>", 
"<span class=\"comment\"> * However, we truncate the address to unsigned int to avoid undesirable</span>", 
"<span class=\"comment\"> * promitions in legacy drivers.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#isa_virt_to_bus\">isa_virt_to_bus</a>(volatile void *<a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return (unsigned int)<a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#isa_page_to_bus\">isa_page_to_bus</a>(<a class=\"id\" href=\"#page\">page</a>)<span class=\"ts\"/>((unsigned int)<a class=\"id\" href=\"#page_to_phys\">page_to_phys</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#isa_bus_to_virt\">isa_bus_to_virt</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * However PCI ones are not necessarily 1:1 and therefore these interfaces</span>", 
"<span class=\"comment\"> * are forbidden in portable PCI drivers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allow them on x86 for legacy drivers, though.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#virt_to_bus\">virt_to_bus</a> <a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bus_to_virt\">bus_to_virt</a> <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ioremap     -   map bus memory into CPU space</span>", 
"<span class=\"comment\"> * @offset:    bus address of the memory</span>", 
"<span class=\"comment\"> * @size:      size of the resource to map</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ioremap performs a platform specific sequence of operations to</span>", 
"<span class=\"comment\"> * make bus memory CPU accessible via the readb/readw/readl/writeb/</span>", 
"<span class=\"comment\"> * writew/writel functions and the other mmio helpers. The returned</span>", 
"<span class=\"comment\"> * address is not guaranteed to be usable directly as a virtual</span>", 
"<span class=\"comment\"> * address.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the area you are trying to map is a PCI BAR you should have a</span>", 
"<span class=\"comment\"> * look at pci_iomap().</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#ioremap_nocache\">ioremap_nocache</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"extern void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#ioremap_cache\">ioremap_cache</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"extern void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#ioremap_prot\">ioremap_prot</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#prot_val\">prot_val</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The default ioremap() behavior is non-cached:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#ioremap\">ioremap</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ioremap_nocache\">ioremap_nocache</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#iounmap\">iounmap</a>(volatile void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>-<a class=\"id\" href=\"#generic\">generic</a>/<a class=\"id\" href=\"#iomap\">iomap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Convert a virtual cached pointer to an uncached pointer</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#xlate_dev_kmem_ptr\">xlate_dev_kmem_ptr</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#memset_io\">memset_io</a>(volatile void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>, unsigned char <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>((void <a class=\"id\" href=\"#__force\">__force</a> *)<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#memcpy_fromio\">memcpy_fromio</a>(void *<a class=\"id\" href=\"#dst\">dst</a>, const volatile void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dst\">dst</a>, (const void <a class=\"id\" href=\"#__force\">__force</a> *)<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#memcpy_toio\">memcpy_toio</a>(volatile void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#dst\">dst</a>, const void *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>((void <a class=\"id\" href=\"#__force\">__force</a> *)<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ISA space is 'always mapped' on a typical x86 system, no need to</span>", 
"<span class=\"comment\"> * explicitly ioremap() it. The fact that the ISA IO space is mapped</span>", 
"<span class=\"comment\"> * to PAGE_OFFSET is pure coincidence - it does not mean ISA values</span>", 
"<span class=\"comment\"> * are physical addresses. The following constant pointer can be</span>", 
"<span class=\"comment\"> * used as the IO-area pointer (it can be iounmapped as well, so the</span>", 
"<span class=\"comment\"> * analogy with PCI is quite large):</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__ISA_IO_base\">__ISA_IO_base</a> ((char <a class=\"id\" href=\"#__iomem\">__iomem</a> *)(<a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Cache management</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This needed for two cases</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1. Out of order aware processors</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2. Accidentally out of order processors (PPro errata #51)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#flush_write_buffers\">flush_write_buffers</a>(void)", 
"{", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_OOSTORE\">CONFIG_X86_OOSTORE</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_PPRO_FENCE\">CONFIG_X86_PPRO_FENCE</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"lock; addl $0,0(%%esp)\": : :\"memory\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"extern void <a class=\"id\" href=\"#native_io_delay\">native_io_delay</a>(void);", 
"", 
"extern int <a class=\"id\" href=\"#io_delay_type\">io_delay_type</a>;", 
"extern void <a class=\"id\" href=\"#io_delay_init\">io_delay_init</a>(void);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PARAVIRT\">CONFIG_PARAVIRT</a>)", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#paravirt\">paravirt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#slow_down_io\">slow_down_io</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_io_delay\">native_io_delay</a>();", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#REALLY_SLOW_IO\">REALLY_SLOW_IO</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_io_delay\">native_io_delay</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_io_delay\">native_io_delay</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_io_delay\">native_io_delay</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BUILDIO\">BUILDIO</a>(<a class=\"id\" href=\"#bwl\">bwl</a>, <a class=\"id\" href=\"#bw\">bw</a>, <a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#out\">out</a>##<a class=\"id\" href=\"#bwl\">bwl</a>(unsigned <a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#value\">value</a>, int <a class=\"id\" href=\"#port\">port</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"out\" #<a class=\"id\" href=\"#bwl\">bwl</a> \" %\" #<a class=\"id\" href=\"#bw\">bw</a> \"0, %w1\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : : \"a\"(<a class=\"id\" href=\"#value\">value</a>), \"Nd\"(<a class=\"id\" href=\"#port\">port</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#in\">in</a>##<a class=\"id\" href=\"#bwl\">bwl</a>(int <a class=\"id\" href=\"#port\">port</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#value\">value</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"in\" #<a class=\"id\" href=\"#bwl\">bwl</a> \" %w1, %\" #<a class=\"id\" href=\"#bw\">bw</a> \"0\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=a\"(<a class=\"id\" href=\"#value\">value</a>) : \"Nd\"(<a class=\"id\" href=\"#port\">port</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#value\">value</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#out\">out</a>##<a class=\"id\" href=\"#bwl\">bwl</a>##<a class=\"id\" href=\"#_p\">_p</a>(unsigned <a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#value\">value</a>, int <a class=\"id\" href=\"#port\">port</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out\">out</a>##<a class=\"id\" href=\"#bwl\">bwl</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#port\">port</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slow_down_io\">slow_down_io</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#in\">in</a>##<a class=\"id\" href=\"#bwl\">bwl</a>##<a class=\"id\" href=\"#_p\">_p</a>(int <a class=\"id\" href=\"#port\">port</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#in\">in</a>##<a class=\"id\" href=\"#bwl\">bwl</a>(<a class=\"id\" href=\"#port\">port</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slow_down_io\">slow_down_io</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#value\">value</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#outs\">outs</a>##<a class=\"id\" href=\"#bwl\">bwl</a>(int <a class=\"id\" href=\"#port\">port</a>, const void *<a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>) \\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"rep; outs\" #<a class=\"id\" href=\"#bwl\">bwl</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+S\"(<a class=\"id\" href=\"#addr\">addr</a>), \"+c\"(<a class=\"id\" href=\"#count\">count</a>) : \"d\"(<a class=\"id\" href=\"#port\">port</a>));<span class=\"ts\"/><span class=\"ts\"/>\\", 
"}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ins\">ins</a>##<a class=\"id\" href=\"#bwl\">bwl</a>(int <a class=\"id\" href=\"#port\">port</a>, void *<a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"rep; ins\" #<a class=\"id\" href=\"#bwl\">bwl</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+D\"(<a class=\"id\" href=\"#addr\">addr</a>), \"+c\"(<a class=\"id\" href=\"#count\">count</a>) : \"d\"(<a class=\"id\" href=\"#port\">port</a>));<span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"<a class=\"id\" href=\"#BUILDIO\">BUILDIO</a>(<a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#b\">b</a>, char)", 
"<a class=\"id\" href=\"#BUILDIO\">BUILDIO</a>(<a class=\"id\" href=\"#w\">w</a>, <a class=\"id\" href=\"#w\">w</a>, short)", 
"<a class=\"id\" href=\"#BUILDIO\">BUILDIO</a>(<a class=\"id\" href=\"#l\">l</a>, , int)", 
"", 
"extern void *<a class=\"id\" href=\"#xlate_dev_mem_ptr\">xlate_dev_mem_ptr</a>(unsigned long <a class=\"id\" href=\"#phys\">phys</a>);", 
"extern void <a class=\"id\" href=\"#unxlate_dev_mem_ptr\">unxlate_dev_mem_ptr</a>(unsigned long <a class=\"id\" href=\"#phys\">phys</a>, void *<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"extern int <a class=\"id\" href=\"#ioremap_change_attr\">ioremap_change_attr</a>(unsigned long <a class=\"id\" href=\"#vaddr\">vaddr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#prot_val\">prot_val</a>);", 
"extern void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#ioremap_wc\">ioremap_wc</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * early_ioremap() and early_iounmap() are for temporary early boot-time</span>", 
"<span class=\"comment\"> * mappings, before the real ioremap() is functional.</span>", 
"<span class=\"comment\"> * A boot-time mapping is currently limited to at most 16 pages.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#early_ioremap_init\">early_ioremap_init</a>(void);", 
"extern void <a class=\"id\" href=\"#early_ioremap_reset\">early_ioremap_reset</a>(void);", 
"extern void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#early_ioremap\">early_ioremap</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#phys_addr\">phys_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"extern void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#early_memremap\">early_memremap</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#phys_addr\">phys_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"extern void <a class=\"id\" href=\"#early_iounmap\">early_iounmap</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"extern void <a class=\"id\" href=\"#fixup_early_ioremap\">fixup_early_ioremap</a>(void);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IO_SPACE_LIMIT\">IO_SPACE_LIMIT</a> 0xffff", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_IO_H */</span>", 
];
xr_frag_insert('l/9f/03173a85632fdc56f7bf5909ff6330f7345b70.xr', __xr_tmp);
