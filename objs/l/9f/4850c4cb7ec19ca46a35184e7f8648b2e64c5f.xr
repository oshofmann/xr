var __xr_tmp = [
"<span class=\"comment\"> * @pte is the pte to check</span>", 
"<span class=\"comment\"> * @lastlba is last lba of the disk</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: returns 1 if valid,  0 on error.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#is_pte_valid\">is_pte_valid</a>(const <a class=\"id\" href=\"#gpt_entry\">gpt_entry</a> *<a class=\"id\" href=\"#pte\">pte</a>, const <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#lastlba\">lastlba</a>)", 
"{", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#efi_guidcmp\">efi_guidcmp</a>(<a class=\"id\" href=\"#pte\">pte</a>-><a class=\"id\" href=\"#partition_type_guid\">partition_type_guid</a>, <a class=\"id\" href=\"#NULL_GUID\">NULL_GUID</a>)) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#pte\">pte</a>-><a class=\"id\" href=\"#starting_lba\">starting_lba</a>) &gt; <a class=\"id\" href=\"#lastlba\">lastlba</a>         ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#pte\">pte</a>-><a class=\"id\" href=\"#ending_lba\">ending_lba</a>)   &gt; <a class=\"id\" href=\"#lastlba\">lastlba</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * compare_gpts() - Search disk for valid GPT headers and PTEs</span>", 
"<span class=\"comment\"> * @pgpt is the primary GPT header</span>", 
"<span class=\"comment\"> * @agpt is the alternate GPT header</span>", 
"<span class=\"comment\"> * @lastlba is the last LBA number</span>", 
"<span class=\"comment\"> * Description: Returns nothing.  Sanity checks pgpt and agpt fields</span>", 
"<span class=\"comment\"> * and prints warnings on discrepancies.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#compare_gpts\">compare_gpts</a>(<a class=\"id\" href=\"#gpt_header\">gpt_header</a> *<a class=\"id\" href=\"#pgpt\">pgpt</a>, <a class=\"id\" href=\"#gpt_header\">gpt_header</a> *<a class=\"id\" href=\"#agpt\">agpt</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#lastlba\">lastlba</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error_found\">error_found</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgpt\">pgpt</a> || !<a class=\"id\" href=\"#agpt\">agpt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#my_lba\">my_lba</a>) != <a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#alternate_lba\">alternate_lba</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"GPT:Primary header LBA != Alt. header alternate_lba\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"GPT:%lld != %lld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#my_lba\">my_lba</a>),", 
"                       (unsigned long long)<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#alternate_lba\">alternate_lba</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_found\">error_found</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#alternate_lba\">alternate_lba</a>) != <a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#my_lba\">my_lba</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"GPT:Primary header alternate_lba != Alt. header my_lba\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"GPT:%lld != %lld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#alternate_lba\">alternate_lba</a>),", 
"                       (unsigned long long)<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#my_lba\">my_lba</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_found\">error_found</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#first_usable_lba\">first_usable_lba</a>) !=", 
"            <a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#first_usable_lba\">first_usable_lba</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"GPT:first_usable_lbas don't match.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"GPT:%lld != %lld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#first_usable_lba\">first_usable_lba</a>),", 
"                       (unsigned long long)<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#first_usable_lba\">first_usable_lba</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_found\">error_found</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#last_usable_lba\">last_usable_lba</a>) !=", 
"            <a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#last_usable_lba\">last_usable_lba</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"GPT:last_usable_lbas don't match.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"GPT:%lld != %lld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#last_usable_lba\">last_usable_lba</a>),", 
"                       (unsigned long long)<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#last_usable_lba\">last_usable_lba</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_found\">error_found</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#efi_guidcmp\">efi_guidcmp</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#disk_guid\">disk_guid</a>, <a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#disk_guid\">disk_guid</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"GPT:disk_guids don't match.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_found\">error_found</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#num_partition_entries\">num_partition_entries</a>) !=", 
"            <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#num_partition_entries\">num_partition_entries</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"GPT:num_partition_entries don't match: \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"0x%x != 0x%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#num_partition_entries\">num_partition_entries</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#num_partition_entries\">num_partition_entries</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_found\">error_found</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#sizeof_partition_entry\">sizeof_partition_entry</a>) !=", 
"            <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#sizeof_partition_entry\">sizeof_partition_entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"GPT:sizeof_partition_entry values don't match: \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"0x%x != 0x%x\\n\",", 
"                       <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#sizeof_partition_entry\">sizeof_partition_entry</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#sizeof_partition_entry\">sizeof_partition_entry</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_found\">error_found</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#partition_entry_array_crc32\">partition_entry_array_crc32</a>) !=", 
"            <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#partition_entry_array_crc32\">partition_entry_array_crc32</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"GPT:partition_entry_array_crc32 values don't match: \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"0x%x != 0x%x\\n\",", 
"                       <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#partition_entry_array_crc32\">partition_entry_array_crc32</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#partition_entry_array_crc32\">partition_entry_array_crc32</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_found\">error_found</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#alternate_lba\">alternate_lba</a>) != <a class=\"id\" href=\"#lastlba\">lastlba</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"GPT:Primary header thinks Alt. header is not at the end of the disk.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"GPT:%lld != %lld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#alternate_lba\">alternate_lba</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#lastlba\">lastlba</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_found\">error_found</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#my_lba\">my_lba</a>) != <a class=\"id\" href=\"#lastlba\">lastlba</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"GPT:Alternate GPT header not at the end of the disk.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"GPT:%lld != %lld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#agpt\">agpt</a>-><a class=\"id\" href=\"#my_lba\">my_lba</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#lastlba\">lastlba</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error_found\">error_found</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error_found\">error_found</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"GPT: Use GNU Parted to correct GPT errors.\\n\");", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_valid_gpt() - Search disk for valid GPT headers and PTEs</span>", 
"<span class=\"comment\"> * @state</span>", 
"<span class=\"comment\"> * @gpt is a GPT header ptr, filled on return.</span>", 
"<span class=\"comment\"> * @ptes is a PTEs ptr, filled on return.</span>", 
"<span class=\"comment\"> * Description: Returns 1 if valid, 0 on error.</span>", 
"<span class=\"comment\"> * If valid, returns pointers to newly allocated GPT header and PTEs.</span>", 
"<span class=\"comment\"> * Validity depends on PMBR being valid (or being overridden by the</span>", 
"<span class=\"comment\"> * 'gpt' kernel command line option) and finding either the Primary</span>", 
"<span class=\"comment\"> * GPT header and PTEs valid, or the Alternate GPT header and PTEs</span>", 
"<span class=\"comment\"> * valid.  If the Primary GPT header is not valid, the Alternate GPT header</span>", 
"<span class=\"comment\"> * is not checked unless the 'gpt' kernel command line option is passed.</span>", 
"<span class=\"comment\"> * This protects against devices which misreport their size, and forces</span>", 
"<span class=\"comment\"> * the user to decide to use the Alternate GPT.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#find_valid_gpt\">find_valid_gpt</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#gpt_header\">gpt_header</a> **<a class=\"id\" href=\"#gpt\">gpt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#gpt_entry\">gpt_entry</a> **<a class=\"id\" href=\"#ptes\">ptes</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#good_pgpt\">good_pgpt</a> = 0, <a class=\"id\" href=\"#good_agpt\">good_agpt</a> = 0, <a class=\"id\" href=\"#good_pmbr\">good_pmbr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpt_header\">gpt_header</a> *<a class=\"id\" href=\"#pgpt\">pgpt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#agpt\">agpt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpt_entry\">gpt_entry</a> *<a class=\"id\" href=\"#pptes\">pptes</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#aptes\">aptes</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#legacy_mbr\">legacy_mbr</a> *<a class=\"id\" href=\"#legacymbr\">legacymbr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#lastlba\">lastlba</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptes\">ptes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lastlba\">lastlba</a> = <a class=\"id\" href=\"#last_lba\">last_lba</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bdev\">bdev</a>);", 
"        if (!<a class=\"id\" href=\"#force_gpt\">force_gpt</a>) {", 
"                <span class=\"comment\">/* This will be added to the EFI Spec. per Intel after v1.02. */</span>", 
"                <a class=\"id\" href=\"#legacymbr\">legacymbr</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof (*<a class=\"id\" href=\"#legacymbr\">legacymbr</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"                if (<a class=\"id\" href=\"#legacymbr\">legacymbr</a>) {", 
"                        <a class=\"id\" href=\"#read_lba\">read_lba</a>(<a class=\"id\" href=\"#state\">state</a>, 0, (<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#legacymbr\">legacymbr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof (*<a class=\"id\" href=\"#legacymbr\">legacymbr</a>));", 
"                        <a class=\"id\" href=\"#good_pmbr\">good_pmbr</a> = <a class=\"id\" href=\"#is_pmbr_valid\">is_pmbr_valid</a>(<a class=\"id\" href=\"#legacymbr\">legacymbr</a>);", 
"                        <a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#legacymbr\">legacymbr</a>);", 
"                }", 
"                if (!<a class=\"id\" href=\"#good_pmbr\">good_pmbr</a>)", 
"                        goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"        }", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#good_pgpt\">good_pgpt</a> = <a class=\"id\" href=\"#is_gpt_valid\">is_gpt_valid</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#GPT_PRIMARY_PARTITION_TABLE_LBA\">GPT_PRIMARY_PARTITION_TABLE_LBA</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#pgpt\">pgpt</a>, &amp;<a class=\"id\" href=\"#pptes\">pptes</a>);", 
"        if (<a class=\"id\" href=\"#good_pgpt\">good_pgpt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#good_agpt\">good_agpt</a> = <a class=\"id\" href=\"#is_gpt_valid\">is_gpt_valid</a>(<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>-><a class=\"id\" href=\"#alternate_lba\">alternate_lba</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#agpt\">agpt</a>, &amp;<a class=\"id\" href=\"#aptes\">aptes</a>);", 
"        if (!<a class=\"id\" href=\"#good_agpt\">good_agpt</a> && <a class=\"id\" href=\"#force_gpt\">force_gpt</a>)", 
"                <a class=\"id\" href=\"#good_agpt\">good_agpt</a> = <a class=\"id\" href=\"#is_gpt_valid\">is_gpt_valid</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#lastlba\">lastlba</a>, &amp;<a class=\"id\" href=\"#agpt\">agpt</a>, &amp;<a class=\"id\" href=\"#aptes\">aptes</a>);", 
"", 
"        <span class=\"comment\">/* The obviously unsuccessful case */</span>", 
"        if (!<a class=\"id\" href=\"#good_pgpt\">good_pgpt</a> && !<a class=\"id\" href=\"#good_agpt\">good_agpt</a>)", 
"                goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"        <a class=\"id\" href=\"#compare_gpts\">compare_gpts</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>, <a class=\"id\" href=\"#agpt\">agpt</a>, <a class=\"id\" href=\"#lastlba\">lastlba</a>);", 
"", 
"        <span class=\"comment\">/* The good cases */</span>", 
"        if (<a class=\"id\" href=\"#good_pgpt\">good_pgpt</a>) {", 
"                *<a class=\"id\" href=\"#gpt\">gpt</a>  = <a class=\"id\" href=\"#pgpt\">pgpt</a>;", 
"                *<a class=\"id\" href=\"#ptes\">ptes</a> = <a class=\"id\" href=\"#pptes\">pptes</a>;", 
"                <a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#agpt\">agpt</a>);", 
"                <a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#aptes\">aptes</a>);", 
"                if (!<a class=\"id\" href=\"#good_agpt\">good_agpt</a>) {", 
"                        <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"Alternate GPT is invalid, \"", 
"                               \"using primary GPT.\\n\");", 
"                }", 
"                return 1;", 
"        }", 
"        else if (<a class=\"id\" href=\"#good_agpt\">good_agpt</a>) {", 
"                *<a class=\"id\" href=\"#gpt\">gpt</a>  = <a class=\"id\" href=\"#agpt\">agpt</a>;", 
"                *<a class=\"id\" href=\"#ptes\">ptes</a> = <a class=\"id\" href=\"#aptes\">aptes</a>;", 
"                <a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>);", 
"                <a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pptes\">pptes</a>);", 
"                <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> ", 
"                       \"Primary GPT is invalid, using alternate GPT.\\n\");", 
"                return 1;", 
"        }", 
"", 
" <a class=\"id\" href=\"#fail\">fail</a>:", 
"        <a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pgpt\">pgpt</a>);", 
"        <a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#agpt\">agpt</a>);", 
"        <a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pptes\">pptes</a>);", 
"        <a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#aptes\">aptes</a>);", 
"        *<a class=\"id\" href=\"#gpt\">gpt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"        *<a class=\"id\" href=\"#ptes\">ptes</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"        return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * efi_partition(struct parsed_partitions *state)</span>", 
"<span class=\"comment\"> * @state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: called from check.c, if the disk contains GPT</span>", 
"<span class=\"comment\"> * partitions, sets up partition entries in the kernel.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the first block on the disk is a legacy MBR,</span>", 
"<span class=\"comment\"> * it will get handled by msdos_partition().</span>", 
"<span class=\"comment\"> * If it's a Protective MBR, we'll handle it here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We do not create a Linux partition for GPT, but</span>", 
"<span class=\"comment\"> * only for the actual data partitions.</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> * -1 if unable to read the partition table</span>", 
"<span class=\"comment\"> *  0 if this isn't our partition table</span>", 
"<span class=\"comment\"> *  1 if successful</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#efi_partition\">efi_partition</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpt_header\">gpt_header</a> *<a class=\"id\" href=\"#gpt\">gpt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpt_entry\">gpt_entry</a> *<a class=\"id\" href=\"#ptes\">ptes</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#ssz\">ssz</a> = <a class=\"id\" href=\"#bdev_logical_block_size\">bdev_logical_block_size</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bdev\">bdev</a>) / 512;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#find_valid_gpt\">find_valid_gpt</a>(<a class=\"id\" href=\"#state\">state</a>, &amp;<a class=\"id\" href=\"#gpt\">gpt</a>, &amp;<a class=\"id\" href=\"#ptes\">ptes</a>) || !<a class=\"id\" href=\"#gpt\">gpt</a> || !<a class=\"id\" href=\"#ptes\">ptes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#gpt\">gpt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ptes\">ptes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"GUID Partition Table is valid!  Yea!\\n\");", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#gpt\">gpt</a>-><a class=\"id\" href=\"#num_partition_entries\">num_partition_entries</a>) && <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#limit\">limit</a>-1; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#ptes\">ptes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#starting_lba\">starting_lba</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#ptes\">ptes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#ending_lba\">ending_lba</a>) -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#ptes\">ptes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#starting_lba\">starting_lba</a>) + 1ULL;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_pte_valid\">is_pte_valid</a>(&amp;<a class=\"id\" href=\"#ptes\">ptes</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#last_lba\">last_lba</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bdev\">bdev</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_partition\">put_partition</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#i\">i</a>+1, <a class=\"id\" href=\"#start\">start</a> * <a class=\"id\" href=\"#ssz\">ssz</a>, <a class=\"id\" href=\"#size\">size</a> * <a class=\"id\" href=\"#ssz\">ssz</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If this is a RAID volume, tell md */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#efi_guidcmp\">efi_guidcmp</a>(<a class=\"id\" href=\"#ptes\">ptes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#partition_type_guid\">partition_type_guid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#PARTITION_LINUX_RAID_GUID\">PARTITION_LINUX_RAID_GUID</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#parts\">parts</a>[<a class=\"id\" href=\"#i\">i</a> + 1].<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#ADDPART_FLAG_RAID\">ADDPART_FLAG_RAID</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ptes\">ptes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#gpt\">gpt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#pp_buf\">pp_buf</a>, \"\\n\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
];
xr_frag_insert('l/9f/4850c4cb7ec19ca46a35184e7f8648b2e64c5f.xr', __xr_tmp);
