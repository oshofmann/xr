var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_IDE_H\">_IDE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_IDE_H\">_IDE_H</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/include/linux/ide.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1994-2002  Linus Torvalds &amp; authors</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioport\">ioport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ata\">ata</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm\">pm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_IDEACPI\">CONFIG_BLK_DEV_IDEACPI</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#byteorder\">byteorder</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* for request_sense */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cdrom\">cdrom</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_CRIS\">CONFIG_CRIS</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_FRV\">CONFIG_FRV</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_MN10300\">CONFIG_MN10300</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SUPPORT_VLB_SYNC\">SUPPORT_VLB_SYNC</a> 0", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SUPPORT_VLB_SYNC\">SUPPORT_VLB_SYNC</a> 1", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Probably not wise to fiddle with these</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDE_DEFAULT_MAX_FAILURES\">IDE_DEFAULT_MAX_FAILURES</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ERROR_MAX\">ERROR_MAX</a><span class=\"ts\"/>8<span class=\"ts\"/><span class=\"comment\">/* Max read/write errors per sector */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ERROR_RESET\">ERROR_RESET</a><span class=\"ts\"/>3<span class=\"ts\"/><span class=\"comment\">/* Reset controller every 4th retry */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ERROR_RECAL\">ERROR_RECAL</a><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"comment\">/* Recalibrate every 2nd retry */</span>", 
"", 
"<span class=\"comment\">/* Error codes returned in rq-&gt;errors to the higher part of the driver. */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DRV_ERROR_GENERAL\">IDE_DRV_ERROR_GENERAL</a><span class=\"ts\"/>= 101,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DRV_ERROR_FILEMARK\">IDE_DRV_ERROR_FILEMARK</a><span class=\"ts\"/>= 102,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DRV_ERROR_EOD\">IDE_DRV_ERROR_EOD</a><span class=\"ts\"/>= 103,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Definitions for accessing IDE controller registers</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDE_NR_PORTS\">IDE_NR_PORTS</a><span class=\"ts\"/><span class=\"ts\"/>(10)", 
"", 
"struct <a class=\"id\" href=\"#ide_io_ports\">ide_io_ports</a> {", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#data_addr\">data_addr</a>;", 
"", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#error_addr\">error_addr</a>;<span class=\"ts\"/><span class=\"comment\">/*   read:  error */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#feature_addr\">feature_addr</a>;<span class=\"ts\"/><span class=\"comment\">/*  write: feature */</span>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#nsect_addr\">nsect_addr</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#lbal_addr\">lbal_addr</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#lbam_addr\">lbam_addr</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#lbah_addr\">lbah_addr</a>;", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#device_addr\">device_addr</a>;", 
"", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#status_addr\">status_addr</a>;<span class=\"ts\"/><span class=\"comment\">/*  read: status  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#command_addr\">command_addr</a>;<span class=\"ts\"/><span class=\"comment\">/* write: command */</span>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#ctl_addr\">ctl_addr</a>;", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#irq_addr\">irq_addr</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OK_STAT\">OK_STAT</a>(<a class=\"id\" href=\"#stat\">stat</a>,<a class=\"id\" href=\"#good\">good</a>,<a class=\"id\" href=\"#bad\">bad</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#stat\">stat</a>)&amp;((<a class=\"id\" href=\"#good\">good</a>)|(<a class=\"id\" href=\"#bad\">bad</a>)))==(<a class=\"id\" href=\"#good\">good</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BAD_R_STAT\">BAD_R_STAT</a><span class=\"ts\"/>(<a class=\"id\" href=\"#ATA_BUSY\">ATA_BUSY</a> | <a class=\"id\" href=\"#ATA_ERR\">ATA_ERR</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BAD_W_STAT\">BAD_W_STAT</a><span class=\"ts\"/>(<a class=\"id\" href=\"#BAD_R_STAT\">BAD_R_STAT</a> | <a class=\"id\" href=\"#ATA_DF\">ATA_DF</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BAD_STAT\">BAD_STAT</a><span class=\"ts\"/>(<a class=\"id\" href=\"#BAD_R_STAT\">BAD_R_STAT</a> | <a class=\"id\" href=\"#ATA_DRQ\">ATA_DRQ</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DRIVE_READY\">DRIVE_READY</a><span class=\"ts\"/>(<a class=\"id\" href=\"#ATA_DRDY\">ATA_DRDY</a> | <a class=\"id\" href=\"#ATA_DSC\">ATA_DSC</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BAD_CRC\">BAD_CRC</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ATA_ABORTED\">ATA_ABORTED</a> | <a class=\"id\" href=\"#ATA_ICRC\">ATA_ICRC</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SATA_NR_PORTS\">SATA_NR_PORTS</a><span class=\"ts\"/><span class=\"ts\"/>(3)<span class=\"ts\"/><span class=\"comment\">/* 16 possible ?? */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SATA_STATUS_OFFSET\">SATA_STATUS_OFFSET</a><span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SATA_ERROR_OFFSET\">SATA_ERROR_OFFSET</a><span class=\"ts\"/>(1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SATA_CONTROL_OFFSET\">SATA_CONTROL_OFFSET</a><span class=\"ts\"/>(2)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Our Physical Region Descriptor (PRD) table should be large enough</span>", 
"<span class=\"comment\"> * to handle the biggest I/O request we are likely to see.  Since requests</span>", 
"<span class=\"comment\"> * can have no more than 256 sectors, and since the typical blocksize is</span>", 
"<span class=\"comment\"> * two or more sectors, we could get by with a limit of 128 entries here for</span>", 
"<span class=\"comment\"> * the usual worst case.  Most requests seem to include some contiguous blocks,</span>", 
"<span class=\"comment\"> * further reducing the number of table entries required.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The driver reverts to PIO mode for individual requests that exceed</span>", 
"<span class=\"comment\"> * this limit (possible with 512 byte blocksizes, eg. MSDOS f/s), so handling</span>", 
"<span class=\"comment\"> * 100% of all crazy scenarios here is not necessary.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * As it turns out though, we must allocate a full 4KB page for this,</span>", 
"<span class=\"comment\"> * so the two PRD tables (ide0 &amp; ide1) will each get half of that,</span>", 
"<span class=\"comment\"> * allowing each to have about 256 entries (8 bytes each) from this.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PRD_BYTES\">PRD_BYTES</a>       8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PRD_ENTRIES\">PRD_ENTRIES</a><span class=\"ts\"/>256", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some more useful definitions</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PARTN_BITS\">PARTN_BITS</a><span class=\"ts\"/>6<span class=\"ts\"/><span class=\"comment\">/* number of minor dev bits for partitions */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_DRIVES\">MAX_DRIVES</a><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"comment\">/* per interface; 2 assumed by lots of code */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTOR_SIZE\">SECTOR_SIZE</a><span class=\"ts\"/>512", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Timeouts for various operations:</span>", 
"<span class=\"comment\"> */</span>", 
"enum {", 
"<span class=\"ts\"/><span class=\"comment\">/* spec allows up to 20ms, but CF cards and SSD drives need more */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WAIT_DRQ\">WAIT_DRQ</a><span class=\"ts\"/>= 1 * <a class=\"id\" href=\"#HZ\">HZ</a>,<span class=\"ts\"/><span class=\"comment\">/* 1s */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* some laptops are very slow */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WAIT_READY\">WAIT_READY</a><span class=\"ts\"/>= 5 * <a class=\"id\" href=\"#HZ\">HZ</a>,<span class=\"ts\"/><span class=\"comment\">/* 5s */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* should be less than 3ms (?), if all ATAPI CD is closed at boot */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WAIT_PIDENTIFY\">WAIT_PIDENTIFY</a><span class=\"ts\"/>= 10 * <a class=\"id\" href=\"#HZ\">HZ</a>,<span class=\"ts\"/><span class=\"comment\">/* 10s */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* worst case when spinning up */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WAIT_WORSTCASE\">WAIT_WORSTCASE</a><span class=\"ts\"/>= 30 * <a class=\"id\" href=\"#HZ\">HZ</a>,<span class=\"ts\"/><span class=\"comment\">/* 30s */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* maximum wait for an IRQ to happen */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WAIT_CMD\">WAIT_CMD</a><span class=\"ts\"/>= 10 * <a class=\"id\" href=\"#HZ\">HZ</a>,<span class=\"ts\"/><span class=\"comment\">/* 10s */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Some drives require a longer IRQ timeout. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WAIT_FLOPPY_CMD\">WAIT_FLOPPY_CMD</a><span class=\"ts\"/>= 50 * <a class=\"id\" href=\"#HZ\">HZ</a>,<span class=\"ts\"/><span class=\"comment\">/* 50s */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some drives (for example, Seagate STT3401A Travan) require a very</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * long timeout, because they don't return an interrupt or clear their</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * BSY bit until after the command completes (even retension commands).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WAIT_TAPE_CMD\">WAIT_TAPE_CMD</a><span class=\"ts\"/>= 900 * <a class=\"id\" href=\"#HZ\">HZ</a>,<span class=\"ts\"/><span class=\"comment\">/* 900s */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* minimum sleep time */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WAIT_MIN_SLEEP\">WAIT_MIN_SLEEP</a><span class=\"ts\"/>= <a class=\"id\" href=\"#HZ\">HZ</a> / 50,<span class=\"ts\"/><span class=\"comment\">/* 20ms */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Op codes for special requests to be handled by ide_special_rq().</span>", 
"<span class=\"comment\"> * Values should be in the range of 0x20 to 0x3f.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#REQ_DRIVE_RESET\">REQ_DRIVE_RESET</a><span class=\"ts\"/><span class=\"ts\"/>0x20", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#REQ_DEVSET_EXEC\">REQ_DEVSET_EXEC</a><span class=\"ts\"/><span class=\"ts\"/>0x21", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#REQ_PARK_HEADS\">REQ_PARK_HEADS</a><span class=\"ts\"/><span class=\"ts\"/>0x22", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#REQ_UNPARK_HEADS\">REQ_UNPARK_HEADS</a><span class=\"ts\"/>0x23", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * hwif_chipset_t is used to keep track of the specific hardware</span>", 
"<span class=\"comment\"> * chipset used by each IDE interface, if known.</span>", 
"<span class=\"comment\"> */</span>", 
"enum {<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_unknown\">ide_unknown</a>,<span class=\"ts\"/><a class=\"id\" href=\"#ide_generic\">ide_generic</a>,<span class=\"ts\"/><a class=\"id\" href=\"#ide_pci\">ide_pci</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_cmd640\">ide_cmd640</a>,<span class=\"ts\"/><a class=\"id\" href=\"#ide_dtc2278\">ide_dtc2278</a>,<span class=\"ts\"/><a class=\"id\" href=\"#ide_ali14xx\">ide_ali14xx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_qd65xx\">ide_qd65xx</a>,<span class=\"ts\"/><a class=\"id\" href=\"#ide_umc8672\">ide_umc8672</a>,<span class=\"ts\"/><a class=\"id\" href=\"#ide_ht6560b\">ide_ht6560b</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_4drives\">ide_4drives</a>,<span class=\"ts\"/><a class=\"id\" href=\"#ide_pmac\">ide_pmac</a>,<span class=\"ts\"/><a class=\"id\" href=\"#ide_acorn\">ide_acorn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_au1xxx\">ide_au1xxx</a>,<span class=\"ts\"/><a class=\"id\" href=\"#ide_palm3710\">ide_palm3710</a>", 
"};", 
"", 
"typedef <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#hwif_chipset_t\">hwif_chipset_t</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Structure to hold all information about the location of this port</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ide_hw\">ide_hw</a> {", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_io_ports\">ide_io_ports</a><span class=\"ts\"/><a class=\"id\" href=\"#io_ports\">io_ports</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_ports_array\">io_ports_array</a>[<a class=\"id\" href=\"#IDE_NR_PORTS\">IDE_NR_PORTS</a>];", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq\">irq</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* our irq number */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a>, *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#config\">config</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_std_init_ports\">ide_std_init_ports</a>(struct <a class=\"id\" href=\"#ide_hw\">ide_hw</a> *<a class=\"id\" href=\"#hw\">hw</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#io_addr\">io_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#ctl_addr\">ctl_addr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= 7; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hw\">hw</a>-><a class=\"id\" href=\"#io_ports_array\">io_ports_array</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#io_addr\">io_addr</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hw\">hw</a>-><a class=\"id\" href=\"#io_ports\">io_ports</a>.<a class=\"id\" href=\"#ctl_addr\">ctl_addr</a> = <a class=\"id\" href=\"#ctl_addr\">ctl_addr</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_HWIFS\">MAX_HWIFS</a><span class=\"ts\"/>10", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Now for the data we need to maintain per-drive:  ide_drive_t</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_scsi\">ide_scsi</a><span class=\"ts\"/>0x21", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_disk\">ide_disk</a><span class=\"ts\"/>0x20", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_optical\">ide_optical</a><span class=\"ts\"/>0x7", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_cdrom\">ide_cdrom</a><span class=\"ts\"/>0x5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_tape\">ide_tape</a><span class=\"ts\"/>0x1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_floppy\">ide_floppy</a><span class=\"ts\"/>0x0", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Special Driver Flags</span>", 
"<span class=\"comment\"> */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_SFLAG_SET_GEOMETRY\">IDE_SFLAG_SET_GEOMETRY</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_SFLAG_RECALIBRATE\">IDE_SFLAG_RECALIBRATE</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_SFLAG_SET_MULTMODE\">IDE_SFLAG_SET_MULTMODE</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 2),", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Status returned from various ide_ functions</span>", 
"<span class=\"comment\"> */</span>", 
"typedef enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_stopped\">ide_stopped</a>,<span class=\"ts\"/><span class=\"comment\">/* no drive operation was started */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_started\">ide_started</a>,<span class=\"ts\"/><span class=\"comment\">/* a drive operation was started, handler was set */</span>", 
"} <a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a>;", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_VALID_ERROR\">IDE_VALID_ERROR</a> <span class=\"ts\"/><span class=\"ts\"/>= (1 << 1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_VALID_FEATURE\">IDE_VALID_FEATURE</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#IDE_VALID_ERROR\">IDE_VALID_ERROR</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_VALID_NSECT\">IDE_VALID_NSECT</a> <span class=\"ts\"/><span class=\"ts\"/>= (1 << 2),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_VALID_LBAL\">IDE_VALID_LBAL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 3),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_VALID_LBAM\">IDE_VALID_LBAM</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 4),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_VALID_LBAH\">IDE_VALID_LBAH</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 5),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_VALID_DEVICE\">IDE_VALID_DEVICE</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 6),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_VALID_LBA\">IDE_VALID_LBA</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#IDE_VALID_LBAL\">IDE_VALID_LBAL</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#IDE_VALID_LBAM\">IDE_VALID_LBAM</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#IDE_VALID_LBAH\">IDE_VALID_LBAH</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_VALID_OUT_TF\">IDE_VALID_OUT_TF</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#IDE_VALID_FEATURE\">IDE_VALID_FEATURE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#IDE_VALID_NSECT\">IDE_VALID_NSECT</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#IDE_VALID_LBA\">IDE_VALID_LBA</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_VALID_IN_TF\">IDE_VALID_IN_TF</a> <span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#IDE_VALID_NSECT\">IDE_VALID_NSECT</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#IDE_VALID_LBA\">IDE_VALID_LBA</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_VALID_OUT_HOB\">IDE_VALID_OUT_HOB</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#IDE_VALID_OUT_TF\">IDE_VALID_OUT_TF</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_VALID_IN_HOB\">IDE_VALID_IN_HOB</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#IDE_VALID_ERROR\">IDE_VALID_ERROR</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#IDE_VALID_NSECT\">IDE_VALID_NSECT</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#IDE_VALID_LBA\">IDE_VALID_LBA</a>,", 
"};", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TFLAG_LBA48\">IDE_TFLAG_LBA48</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TFLAG_WRITE\">IDE_TFLAG_WRITE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TFLAG_CUSTOM_HANDLER\">IDE_TFLAG_CUSTOM_HANDLER</a><span class=\"ts\"/>= (1 << 2),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TFLAG_DMA_PIO_FALLBACK\">IDE_TFLAG_DMA_PIO_FALLBACK</a><span class=\"ts\"/>= (1 << 3),", 
"<span class=\"ts\"/><span class=\"comment\">/* force 16-bit I/O operations */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TFLAG_IO_16BIT\">IDE_TFLAG_IO_16BIT</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 4),", 
"<span class=\"ts\"/><span class=\"comment\">/* struct ide_cmd was allocated using kmalloc() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TFLAG_DYN\">IDE_TFLAG_DYN</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 5),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TFLAG_FS\">IDE_TFLAG_FS</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 6),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TFLAG_MULTI_PIO\">IDE_TFLAG_MULTI_PIO</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 7),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TFLAG_SET_XFER\">IDE_TFLAG_SET_XFER</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 8),", 
"};", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_FTFLAG_FLAGGED\">IDE_FTFLAG_FLAGGED</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_FTFLAG_SET_IN_FLAGS\">IDE_FTFLAG_SET_IN_FLAGS</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_FTFLAG_OUT_DATA\">IDE_FTFLAG_OUT_DATA</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 2),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_FTFLAG_IN_DATA\">IDE_FTFLAG_IN_DATA</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 3),", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ide_taskfile\">ide_taskfile</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 0: data byte (for TASKFILE ioctl) */</span>", 
"<span class=\"ts\"/>union {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 1: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#error\">error</a>;<span class=\"ts\"/><span class=\"comment\">/*  read: error */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#feature\">feature</a>;<span class=\"ts\"/><span class=\"comment\">/* write: feature */</span>", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#nsect\">nsect</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 2: number of sectors */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#lbal\">lbal</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 3: LBA low */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#lbam\">lbam</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 4: LBA mid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#lbah\">lbah</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 5: LBA high */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#device\">device</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 6: device select */</span>", 
"<span class=\"ts\"/>union {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 7: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#status\">status</a>;<span class=\"ts\"/><span class=\"comment\">/*  read: status */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#command\">command</a>;<span class=\"ts\"/><span class=\"comment\">/* write: command */</span>", 
"<span class=\"ts\"/>};", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_taskfile\">ide_taskfile</a><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_taskfile\">ide_taskfile</a><span class=\"ts\"/><a class=\"id\" href=\"#hob\">hob</a>;", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hob\">hob</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#in\">in</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#valid\">valid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf_flags\">tf_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftf_flags\">ftf_flags</a>;<span class=\"ts\"/><span class=\"comment\">/* for TASKFILE ioctl */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_nents\">sg_nents</a>;<span class=\"ts\"/>  <span class=\"comment\">/* number of sg entries */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#orig_sg_nents\">orig_sg_nents</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_dma_direction\">sg_dma_direction</a>; <span class=\"comment\">/* DMA transfer direction */</span>", 
"", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nleft\">nleft</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_xfer_len\">last_xfer_len</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a><span class=\"ts\"/>*<a class=\"id\" href=\"#cursg\">cursg</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cursg_ofs\">cursg_ofs</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rq\">rq</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* copy of request */</span>", 
"};", 
"", 
"<span class=\"comment\">/* ATAPI packet command flags */</span>", 
"enum {", 
"<span class=\"ts\"/><span class=\"comment\">/* set when an error is considered normal - no retry (ide-tape) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PC_FLAG_ABORT\">PC_FLAG_ABORT</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PC_FLAG_SUPPRESS_ERROR\">PC_FLAG_SUPPRESS_ERROR</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PC_FLAG_WAIT_FOR_DSC\">PC_FLAG_WAIT_FOR_DSC</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 2),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PC_FLAG_DMA_OK\">PC_FLAG_DMA_OK</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 3),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PC_FLAG_DMA_IN_PROGRESS\">PC_FLAG_DMA_IN_PROGRESS</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 4),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PC_FLAG_DMA_ERROR\">PC_FLAG_DMA_ERROR</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 5),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PC_FLAG_WRITING\">PC_FLAG_WRITING</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 6),", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATAPI_WAIT_PC\">ATAPI_WAIT_PC</a><span class=\"ts\"/><span class=\"ts\"/>(60 * <a class=\"id\" href=\"#HZ\">HZ</a>)", 
"", 
"struct <a class=\"id\" href=\"#ide_atapi_pc\">ide_atapi_pc</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* actual packet bytes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#c\">c</a>[12];", 
"<span class=\"ts\"/><span class=\"comment\">/* incremented on each retry */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retries\">retries</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* bytes to transfer */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#req_xfer\">req_xfer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the corresponding request */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * those are more or less driver-specific and some of them are subject</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to change/removal later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ide_devset\">ide_devset</a>;", 
"struct <a class=\"id\" href=\"#ide_driver\">ide_driver</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_IDEACPI\">CONFIG_BLK_DEV_IDEACPI</a>", 
"struct <a class=\"id\" href=\"#ide_acpi_drive_link\">ide_acpi_drive_link</a>;", 
"struct <a class=\"id\" href=\"#ide_acpi_hwif_link\">ide_acpi_hwif_link</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a>;", 
"", 
"struct <a class=\"id\" href=\"#ide_disk_ops\">ide_disk_ops</a> {", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#check\">check</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *, const char *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#get_capacity\">get_capacity</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#unlock_native_capacity\">unlock_native_capacity</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#setup\">setup</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#flush\">flush</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#init_media\">init_media</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *, struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#set_doorlock\">set_doorlock</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *, struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a><span class=\"ts\"/>(*<a class=\"id\" href=\"#do_request\">do_request</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *, struct <a class=\"id\" href=\"#request\">request</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sector_t\">sector_t</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ioctl\">ioctl</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *, struct <a class=\"id\" href=\"#block_device\">block_device</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#fmode_t\">fmode_t</a>, unsigned int, unsigned long);", 
"};", 
"", 
"<span class=\"comment\">/* ATAPI device flags */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_DRQ_INTERRUPT\">IDE_AFLAG_DRQ_INTERRUPT</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 0),", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ide-cd */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Drive cannot eject the disc. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_NO_EJECT\">IDE_AFLAG_NO_EJECT</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 1),", 
"<span class=\"ts\"/><span class=\"comment\">/* Drive is a pre ATAPI 1.2 drive. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_PRE_ATAPI12\">IDE_AFLAG_PRE_ATAPI12</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 2),", 
"<span class=\"ts\"/><span class=\"comment\">/* TOC addresses are in BCD. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_TOCADDR_AS_BCD\">IDE_AFLAG_TOCADDR_AS_BCD</a><span class=\"ts\"/>= (1 << 3),", 
"<span class=\"ts\"/><span class=\"comment\">/* TOC track numbers are in BCD. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_TOCTRACKS_AS_BCD\">IDE_AFLAG_TOCTRACKS_AS_BCD</a><span class=\"ts\"/>= (1 << 4),", 
"<span class=\"ts\"/><span class=\"comment\">/* Saved TOC information is current. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_TOC_VALID\">IDE_AFLAG_TOC_VALID</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 6),", 
"<span class=\"ts\"/><span class=\"comment\">/* We think that the drive door is locked. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_DOOR_LOCKED\">IDE_AFLAG_DOOR_LOCKED</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 7),", 
"<span class=\"ts\"/><span class=\"comment\">/* SET_CD_SPEED command is unsupported. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_NO_SPEED_SELECT\">IDE_AFLAG_NO_SPEED_SELECT</a><span class=\"ts\"/>= (1 << 8),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_VERTOS_300_SSD\">IDE_AFLAG_VERTOS_300_SSD</a><span class=\"ts\"/>= (1 << 9),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_VERTOS_600_ESD\">IDE_AFLAG_VERTOS_600_ESD</a><span class=\"ts\"/>= (1 << 10),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_SANYO_3CD\">IDE_AFLAG_SANYO_3CD</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 11),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_FULL_CAPS_PAGE\">IDE_AFLAG_FULL_CAPS_PAGE</a><span class=\"ts\"/>= (1 << 12),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_PLAY_AUDIO_OK\">IDE_AFLAG_PLAY_AUDIO_OK</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 13),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_LE_SPEED_FIELDS\">IDE_AFLAG_LE_SPEED_FIELDS</a><span class=\"ts\"/>= (1 << 14),", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ide-floppy */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Avoid commands not supported in Clik drive */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_CLIK_DRIVE\">IDE_AFLAG_CLIK_DRIVE</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 15),", 
"<span class=\"ts\"/><span class=\"comment\">/* Requires BH algorithm for packets */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_ZIP_DRIVE\">IDE_AFLAG_ZIP_DRIVE</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 16),", 
"<span class=\"ts\"/><span class=\"comment\">/* Supports format progress report */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_SRFP\">IDE_AFLAG_SRFP</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 17),", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ide-tape */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_IGNORE_DSC\">IDE_AFLAG_IGNORE_DSC</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 18),", 
"<span class=\"ts\"/><span class=\"comment\">/* 0 When the tape position is unknown */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_ADDRESS_VALID\">IDE_AFLAG_ADDRESS_VALID</a><span class=\"ts\"/><span class=\"ts\"/>= (1 <<<span class=\"ts\"/>19),", 
"<span class=\"ts\"/><span class=\"comment\">/* Device already opened */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_BUSY\">IDE_AFLAG_BUSY</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 20),", 
"<span class=\"ts\"/><span class=\"comment\">/* Attempt to auto-detect the current user block size */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_DETECT_BS\">IDE_AFLAG_DETECT_BS</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 21),", 
"<span class=\"ts\"/><span class=\"comment\">/* Currently on a filemark */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_FILEMARK\">IDE_AFLAG_FILEMARK</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 22),", 
"<span class=\"ts\"/><span class=\"comment\">/* 0 = no tape is loaded, so we don't rewind after ejecting */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_MEDIUM_PRESENT\">IDE_AFLAG_MEDIUM_PRESENT</a><span class=\"ts\"/>= (1 << 23),", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_AFLAG_NO_AUTOCLOSE\">IDE_AFLAG_NO_AUTOCLOSE</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 24),", 
"};", 
"", 
"<span class=\"comment\">/* device flags */</span>", 
"enum {", 
"<span class=\"ts\"/><span class=\"comment\">/* restore settings after device reset */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_KEEP_SETTINGS\">IDE_DFLAG_KEEP_SETTINGS</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 0),", 
"<span class=\"ts\"/><span class=\"comment\">/* device is using DMA for read/write */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_USING_DMA\">IDE_DFLAG_USING_DMA</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 1),", 
"<span class=\"ts\"/><span class=\"comment\">/* okay to unmask other IRQs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_UNMASK\">IDE_DFLAG_UNMASK</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 2),", 
"<span class=\"ts\"/><span class=\"comment\">/* don't attempt flushes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_NOFLUSH\">IDE_DFLAG_NOFLUSH</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 3),", 
"<span class=\"ts\"/><span class=\"comment\">/* DSC overlap */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_DSC_OVERLAP\">IDE_DFLAG_DSC_OVERLAP</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 4),", 
"<span class=\"ts\"/><span class=\"comment\">/* give potential excess bandwidth */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_NICE1\">IDE_DFLAG_NICE1</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 5),", 
"<span class=\"ts\"/><span class=\"comment\">/* device is physically present */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 6),", 
"<span class=\"ts\"/><span class=\"comment\">/* disable Host Protected Area */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_NOHPA\">IDE_DFLAG_NOHPA</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 7),", 
"<span class=\"ts\"/><span class=\"comment\">/* id read from device (synthetic if not set) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_ID_READ\">IDE_DFLAG_ID_READ</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 8),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_NOPROBE\">IDE_DFLAG_NOPROBE</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 9),", 
"<span class=\"ts\"/><span class=\"comment\">/* need to do check_media_change() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_REMOVABLE\">IDE_DFLAG_REMOVABLE</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 10),", 
"<span class=\"ts\"/><span class=\"comment\">/* needed for removable devices */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_ATTACH\">IDE_DFLAG_ATTACH</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 11),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_FORCED_GEOM\">IDE_DFLAG_FORCED_GEOM</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 12),", 
"<span class=\"ts\"/><span class=\"comment\">/* disallow setting unmask bit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_NO_UNMASK\">IDE_DFLAG_NO_UNMASK</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 13),", 
"<span class=\"ts\"/><span class=\"comment\">/* disallow enabling 32-bit I/O */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_NO_IO_32BIT\">IDE_DFLAG_NO_IO_32BIT</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 14),", 
"<span class=\"ts\"/><span class=\"comment\">/* for removable only: door lock/unlock works */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_DOORLOCKING\">IDE_DFLAG_DOORLOCKING</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 15),", 
"<span class=\"ts\"/><span class=\"comment\">/* disallow DMA */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_NODMA\">IDE_DFLAG_NODMA</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 16),", 
"<span class=\"ts\"/><span class=\"comment\">/* powermanagement told us not to do anything, so sleep nicely */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_BLOCKED\">IDE_DFLAG_BLOCKED</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 17),", 
"<span class=\"ts\"/><span class=\"comment\">/* sleeping &amp; sleep field valid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_SLEEPING\">IDE_DFLAG_SLEEPING</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 18),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_POST_RESET\">IDE_DFLAG_POST_RESET</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 19),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_UDMA33_WARNED\">IDE_DFLAG_UDMA33_WARNED</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 20),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_LBA48\">IDE_DFLAG_LBA48</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 21),", 
"<span class=\"ts\"/><span class=\"comment\">/* status of write cache */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_WCACHE\">IDE_DFLAG_WCACHE</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 22),", 
"<span class=\"ts\"/><span class=\"comment\">/* used for ignoring ATA_DF */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_NOWERR\">IDE_DFLAG_NOWERR</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 23),", 
"<span class=\"ts\"/><span class=\"comment\">/* retrying in PIO */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_DMA_PIO_RETRY\">IDE_DFLAG_DMA_PIO_RETRY</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 24),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_LBA\">IDE_DFLAG_LBA</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 25),", 
"<span class=\"ts\"/><span class=\"comment\">/* don't unload heads */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_NO_UNLOAD\">IDE_DFLAG_NO_UNLOAD</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 26),", 
"<span class=\"ts\"/><span class=\"comment\">/* heads unloaded, please don't reset port */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_PARKED\">IDE_DFLAG_PARKED</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 27),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_MEDIA_CHANGED\">IDE_DFLAG_MEDIA_CHANGED</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 28),", 
"<span class=\"ts\"/><span class=\"comment\">/* write protect */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_WP\">IDE_DFLAG_WP</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 29),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_FORMAT_IN_PROGRESS\">IDE_DFLAG_FORMAT_IN_PROGRESS</a><span class=\"ts\"/>= (1 << 30),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DFLAG_NIEN_QUIRK\">IDE_DFLAG_NIEN_QUIRK</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 31),", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> {", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a>[4];<span class=\"ts\"/><span class=\"comment\">/* drive name, such as \"hda\" */</span>", 
"        char            <a class=\"id\" href=\"#driver_req\">driver_req</a>[10];<span class=\"ts\"/><span class=\"comment\">/* requests specific driver */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a><span class=\"ts\"/>*<a class=\"id\" href=\"#queue\">queue</a>;<span class=\"ts\"/><span class=\"comment\">/* request queue */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rq\">rq</a>;<span class=\"ts\"/><span class=\"comment\">/* current request */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#driver_data\">driver_data</a>;<span class=\"ts\"/><span class=\"comment\">/* extra driver data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#id\">id</a>;<span class=\"ts\"/><span class=\"comment\">/* identification info */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IDE_PROC_FS\">CONFIG_IDE_PROC_FS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc\">proc</a>;<span class=\"ts\"/><span class=\"comment\">/* /proc/ide/ directory entry */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_proc_devset\">ide_proc_devset</a> *<a class=\"id\" href=\"#settings\">settings</a>; <span class=\"comment\">/* /proc/ide/ drive settings */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hwif_s\">hwif_s</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#hwif\">hwif</a>;<span class=\"ts\"/><span class=\"comment\">/* actually (ide_hwif_t *) */</span>", 
"", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_disk_ops\">ide_disk_ops</a> *<a class=\"id\" href=\"#disk_ops\">disk_ops</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dev_flags\">dev_flags</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sleep\">sleep</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* sleep until this time */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* max time to wait for irq */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#special_flags\">special_flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* special action flags */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#select\">select</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* basic drive/head select reg value */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#retry_pio\">retry_pio</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* retrying dma capable host in pio */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#waiting_for_dma\">waiting_for_dma</a>;<span class=\"ts\"/><span class=\"comment\">/* dma currently in progress */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#dma\">dma</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* atapi dma flag */</span>", 
"", 
"        <a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#init_speed\">init_speed</a>;<span class=\"ts\"/><span class=\"comment\">/* transfer rate set at boot */</span>", 
"        <a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#current_speed\">current_speed</a>;<span class=\"ts\"/><span class=\"comment\">/* current transfer rate set */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#desired_speed\">desired_speed</a>;<span class=\"ts\"/><span class=\"comment\">/* desired transfer rate set */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#pio_mode\">pio_mode</a>;<span class=\"ts\"/><span class=\"comment\">/* for -&gt;set_pio_mode _only_ */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#dma_mode\">dma_mode</a>;<span class=\"ts\"/><span class=\"comment\">/* for -&gt;set_dma_mode _only_ */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#dn\">dn</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* now wide spread use */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#acoustic\">acoustic</a>;<span class=\"ts\"/><span class=\"comment\">/* acoustic management */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#media\">media</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* disk, cdrom, tape, floppy, ... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#ready_stat\">ready_stat</a>;<span class=\"ts\"/><span class=\"comment\">/* min status value for drive ready */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#mult_count\">mult_count</a>;<span class=\"ts\"/><span class=\"comment\">/* current multiple sector setting */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#mult_req\">mult_req</a>;<span class=\"ts\"/><span class=\"comment\">/* requested multiple sector setting */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#io_32bit\">io_32bit</a>;<span class=\"ts\"/><span class=\"comment\">/* 0=16-bit, 1=32-bit, 2/3=32bit+sync */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#bad_wstat\">bad_wstat</a>;<span class=\"ts\"/><span class=\"comment\">/* used for ignoring ATA_DF */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* \"real\" number of heads */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#sect\">sect</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* \"real\" sectors per track */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#bios_head\">bios_head</a>;<span class=\"ts\"/><span class=\"comment\">/* BIOS/fdisk/LILO number of heads */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#bios_sect\">bios_sect</a>;<span class=\"ts\"/><span class=\"comment\">/* BIOS/fdisk/LILO sectors per track */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* delay this long before sending packet command */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pc_delay\">pc_delay</a>;", 
"", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#bios_cyl\">bios_cyl</a>;<span class=\"ts\"/><span class=\"comment\">/* BIOS/fdisk/LILO number of cyls */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#cyl\">cyl</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* \"real\" number of cyls */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#drive_data\">drive_data</a>;<span class=\"ts\"/><span class=\"comment\">/* used by set_pio_mode/dev_select() */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#failures\">failures</a>;<span class=\"ts\"/><span class=\"comment\">/* current failure count */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#max_failures\">max_failures</a>;<span class=\"ts\"/><span class=\"comment\">/* maximum allowed failure count */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#probed_capacity\">probed_capacity</a>;<span class=\"comment\">/* initial/native media capacity */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#capacity64\">capacity64</a>;<span class=\"ts\"/><span class=\"comment\">/* total number of sectors */</span>", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lun\">lun</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* logical unit */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc_count\">crc_count</a>;<span class=\"ts\"/><span class=\"comment\">/* crc counter to reduce drive speed */</span>", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#debug_mask\">debug_mask</a>;<span class=\"ts\"/><span class=\"comment\">/* debugging levels switch */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_IDEACPI\">CONFIG_BLK_DEV_IDEACPI</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_acpi_drive_link\">ide_acpi_drive_link</a> *<a class=\"id\" href=\"#acpidata\">acpidata</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a><span class=\"ts\"/><a class=\"id\" href=\"#gendev\">gendev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#gendev_rel_comp\">gendev_rel_comp</a>;<span class=\"ts\"/><span class=\"comment\">/* to deal with device release() */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* current packet command */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_atapi_pc\">ide_atapi_pc</a> *<a class=\"id\" href=\"#pc\">pc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* last failed packet command */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_atapi_pc\">ide_atapi_pc</a> *<a class=\"id\" href=\"#failed_pc\">failed_pc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* callback for packet commands */</span>", 
"<span class=\"ts\"/>int  (*<a class=\"id\" href=\"#pc_callback\">pc_callback</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *, int);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> (*<a class=\"id\" href=\"#irq_handler\">irq_handler</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *);", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#atapi_flags\">atapi_flags</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_atapi_pc\">ide_atapi_pc</a> <a class=\"id\" href=\"#request_sense_pc\">request_sense_pc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* current sense rq and buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#sense_rq_armed\">sense_rq_armed</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> <a class=\"id\" href=\"#sense_rq\">sense_rq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_sense\">request_sense</a> <a class=\"id\" href=\"#sense_data\">sense_data</a>;", 
"};", 
"", 
"typedef struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> <a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_ide_device\">to_ide_device</a>(<a class=\"id\" href=\"#dev\">dev</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a>, <a class=\"id\" href=\"#gendev\">gendev</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_ide_drv\">to_ide_drv</a>(<a class=\"id\" href=\"#obj\">obj</a>, <a class=\"id\" href=\"#cont_type\">cont_type</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#obj\">obj</a>, struct <a class=\"id\" href=\"#cont_type\">cont_type</a>, <a class=\"id\" href=\"#dev\">dev</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_drv_g\">ide_drv_g</a>(<a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#cont_type\">cont_type</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>((<a class=\"id\" href=\"#disk\">disk</a>)-><a class=\"id\" href=\"#private_data\">private_data</a>, struct <a class=\"id\" href=\"#cont_type\">cont_type</a>, <a class=\"id\" href=\"#driver\">driver</a>)", 
"", 
"struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a>;", 
"", 
"struct <a class=\"id\" href=\"#ide_tp_ops\">ide_tp_ops</a> {", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#exec_command\">exec_command</a>)(struct <a class=\"id\" href=\"#hwif_s\">hwif_s</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/>(*<a class=\"id\" href=\"#read_status\">read_status</a>)(struct <a class=\"id\" href=\"#hwif_s\">hwif_s</a> *);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/>(*<a class=\"id\" href=\"#read_altstatus\">read_altstatus</a>)(struct <a class=\"id\" href=\"#hwif_s\">hwif_s</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#write_devctl\">write_devctl</a>)(struct <a class=\"id\" href=\"#hwif_s\">hwif_s</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#dev_select\">dev_select</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#tf_load\">tf_load</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_taskfile\">ide_taskfile</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#tf_read\">tf_read</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_taskfile\">ide_taskfile</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#input_data\">input_data</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void *, unsigned int);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#output_data\">output_data</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void *, unsigned int);", 
"};", 
"", 
"extern const struct <a class=\"id\" href=\"#ide_tp_ops\">ide_tp_ops</a> <a class=\"id\" href=\"#default_tp_ops\">default_tp_ops</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct ide_port_ops - IDE port operations</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @init_dev:<span class=\"ts\"/><span class=\"ts\"/>host specific initialization of a device</span>", 
"<span class=\"comment\"> * @set_pio_mode:<span class=\"ts\"/>routine to program host for PIO mode</span>", 
"<span class=\"comment\"> * @set_dma_mode:<span class=\"ts\"/>routine to program host for DMA mode</span>", 
"<span class=\"comment\"> * @reset_poll:<span class=\"ts\"/><span class=\"ts\"/>chipset polling based on hba specifics</span>", 
"<span class=\"comment\"> * @pre_reset:<span class=\"ts\"/><span class=\"ts\"/>chipset specific changes to default for device-hba resets</span>", 
"<span class=\"comment\"> * @resetproc:<span class=\"ts\"/><span class=\"ts\"/>routine to reset controller after a disk reset</span>", 
"<span class=\"comment\"> * @maskproc:<span class=\"ts\"/><span class=\"ts\"/>special host masking for drive selection</span>", 
"<span class=\"comment\"> * @quirkproc:<span class=\"ts\"/><span class=\"ts\"/>check host's drive quirk list</span>", 
"<span class=\"comment\"> * @clear_irq:<span class=\"ts\"/><span class=\"ts\"/>clear IRQ</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @mdma_filter:<span class=\"ts\"/>filter MDMA modes</span>", 
"<span class=\"comment\"> * @udma_filter:<span class=\"ts\"/>filter UDMA modes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @cable_detect:<span class=\"ts\"/>detect cable type</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ide_port_ops\">ide_port_ops</a> {", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#init_dev\">init_dev</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#set_pio_mode\">set_pio_mode</a>)(struct <a class=\"id\" href=\"#hwif_s\">hwif_s</a> *, <a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#set_dma_mode\">set_dma_mode</a>)(struct <a class=\"id\" href=\"#hwif_s\">hwif_s</a> *, <a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#reset_poll\">reset_poll</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#pre_reset\">pre_reset</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#resetproc\">resetproc</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#maskproc\">maskproc</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, int);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#quirkproc\">quirkproc</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#clear_irq\">clear_irq</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#test_irq\">test_irq</a>)(struct <a class=\"id\" href=\"#hwif_s\">hwif_s</a> *);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/>(*<a class=\"id\" href=\"#mdma_filter\">mdma_filter</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/>(*<a class=\"id\" href=\"#udma_filter\">udma_filter</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/>(*<a class=\"id\" href=\"#cable_detect\">cable_detect</a>)(struct <a class=\"id\" href=\"#hwif_s\">hwif_s</a> *);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ide_dma_ops\">ide_dma_ops</a> {", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#dma_host_set\">dma_host_set</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *, int);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#dma_setup\">dma_setup</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#dma_start\">dma_start</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#dma_end\">dma_end</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#dma_test_irq\">dma_test_irq</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#dma_lost_irq\">dma_lost_irq</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *);", 
"<span class=\"ts\"/><span class=\"comment\">/* below ones are optional */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#dma_check\">dma_check</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#dma_timer_expiry\">dma_timer_expiry</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#dma_clear\">dma_clear</a>)(struct <a class=\"id\" href=\"#ide_drive_s\">ide_drive_s</a> *);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The following method is optional and only required to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * implemented for the SFF-8038i compatible controllers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/>(*<a class=\"id\" href=\"#dma_sff_read_status\">dma_sff_read_status</a>)(struct <a class=\"id\" href=\"#hwif_s\">hwif_s</a> *);", 
"};", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_PFLAG_PROBING\">IDE_PFLAG_PROBING</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 0),", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ide_host\">ide_host</a>;", 
"", 
"typedef struct <a class=\"id\" href=\"#hwif_s\">hwif_s</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hwif_s\">hwif_s</a> *<a class=\"id\" href=\"#mate\">mate</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* other hwif from same PCI chip */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc\">proc</a>;<span class=\"ts\"/><span class=\"comment\">/* /proc/ide/ directory entry */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_host\">ide_host</a> *<a class=\"id\" href=\"#host\">host</a>;", 
"", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[6];<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* name of interface, eg. \"ide0\" */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_io_ports\">ide_io_ports</a><span class=\"ts\"/><a class=\"id\" href=\"#io_ports\">io_ports</a>;", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#sata_scr\">sata_scr</a>[<a class=\"id\" href=\"#SATA_NR_PORTS\">SATA_NR_PORTS</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a><span class=\"ts\"/>*<a class=\"id\" href=\"#devices\">devices</a>[<a class=\"id\" href=\"#MAX_DRIVES\">MAX_DRIVES</a> + 1];", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#port_flags\">port_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#major\">major</a>;<span class=\"ts\"/><span class=\"comment\">/* our major number */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#index\">index</a>;<span class=\"ts\"/><span class=\"comment\">/* 0 for ide0; 1 for ide1; ... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#channel\">channel</a>;<span class=\"ts\"/><span class=\"comment\">/* for dual-port chips: 0=primary, 1=secondary */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#host_flags\">host_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pio_mask\">pio_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ultra_mask\">ultra_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#swdma_mask\">swdma_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cbl\">cbl</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cable type */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif_chipset_t\">hwif_chipset_t</a> <a class=\"id\" href=\"#chipset\">chipset</a>;<span class=\"ts\"/><span class=\"comment\">/* sub-module for tuning.. */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#rw_disk\">rw_disk</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#request\">request</a> *);", 
"", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_tp_ops\">ide_tp_ops</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tp_ops\">tp_ops</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_port_ops\">ide_port_ops</a><span class=\"ts\"/>*<a class=\"id\" href=\"#port_ops\">port_ops</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_dma_ops\">ide_dma_ops</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dma_ops\">dma_ops</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* dma physical region descriptor table (cpu view) */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/>*<a class=\"id\" href=\"#dmatable_cpu\">dmatable_cpu</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* dma physical region descriptor table (dma view) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a><span class=\"ts\"/><a class=\"id\" href=\"#dmatable_dma\">dmatable_dma</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* maximum number of PRD table entries */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#prd_max_nents\">prd_max_nents</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* PRD entry size in bytes */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#prd_ent_size\">prd_ent_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Scatter-gather list used to build the above */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg_table\">sg_table</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sg_max_nents\">sg_max_nents</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Maximum number of entries in it */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> <a class=\"id\" href=\"#cmd\">cmd</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* current command */</span>", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rqsize\">rqsize</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* max sectors per request */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq\">irq</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* our irq number */</span>", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#dma_base\">dma_base</a>;<span class=\"ts\"/><span class=\"comment\">/* base addr for dma ports */</span>", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#config_data\">config_data</a>;<span class=\"ts\"/><span class=\"comment\">/* for use by chipset-specific code */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#select_data\">select_data</a>;<span class=\"ts\"/><span class=\"comment\">/* for use by chipset-specific code */</span>", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#extra_base\">extra_base</a>;<span class=\"ts\"/><span class=\"comment\">/* extra addr for dma ports */</span>", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#extra_ports\">extra_ports</a>;<span class=\"ts\"/><span class=\"comment\">/* number of extra dma ports */</span>", 
"", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#present\">present</a>    : 1;<span class=\"ts\"/><span class=\"comment\">/* this interface exists */</span>", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><a class=\"id\" href=\"#busy\">busy</a><span class=\"ts\"/>   : 1; <span class=\"comment\">/* serializes devices on a port */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gendev\">gendev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#portdev\">portdev</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#gendev_rel_comp\">gendev_rel_comp</a>; <span class=\"comment\">/* To deal with device release() */</span>", 
"", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#hwif_data\">hwif_data</a>;<span class=\"ts\"/><span class=\"comment\">/* extra hwif data */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_IDEACPI\">CONFIG_BLK_DEV_IDEACPI</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_acpi_hwif_link\">ide_acpi_hwif_link</a> *<a class=\"id\" href=\"#acpidata\">acpidata</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* IRQ handler, if active */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a><span class=\"ts\"/>(*<a class=\"id\" href=\"#handler\">handler</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* BOOL: polling active &amp; poll_timeout field valid */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#polling\">polling</a> : 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* current drive */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#cur_dev\">cur_dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* current request */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* failsafe timer */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> <a class=\"id\" href=\"#timer\">timer</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* timeout value during long polls */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#poll_timeout\">poll_timeout</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* queried upon timeouts */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#expiry\">expiry</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#req_gen\">req_gen</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#req_gen_timer\">req_gen_timer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"} <a class=\"id\" href=\"#____cacheline_internodealigned_in_smp\">____cacheline_internodealigned_in_smp</a> <a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_HOST_PORTS\">MAX_HOST_PORTS</a> 4", 
"", 
"struct <a class=\"id\" href=\"#ide_host\">ide_host</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#MAX_HOST_PORTS\">MAX_HOST_PORTS</a> + 1];", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#n_ports\">n_ports</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a>[2];", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#init_chipset\">init_chipset</a>)(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *);", 
"", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#get_lock\">get_lock</a>)(<a class=\"id\" href=\"#irq_handler_t\">irq_handler_t</a>, void *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#release_lock\">release_lock</a>)(void);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_handler_t\">irq_handler_t</a><span class=\"ts\"/><a class=\"id\" href=\"#irq_handler\">irq_handler</a>;", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#host_flags\">host_flags</a>;", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_flags\">irq_flags</a>;", 
"", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#host_priv\">host_priv</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a><span class=\"ts\"/>*<a class=\"id\" href=\"#cur_port\">cur_port</a>;<span class=\"ts\"/><span class=\"comment\">/* for hosts requiring serialization */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* used for hosts requiring serialization */</span>", 
"<span class=\"ts\"/>volatile unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#host_busy\">host_busy</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDE_HOST_BUSY\">IDE_HOST_BUSY</a> 0", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  internal ide interrupt handler type</span>", 
"<span class=\"comment\"> */</span>", 
"typedef <a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> (<a class=\"id\" href=\"#ide_handler_t\">ide_handler_t</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"typedef int (<a class=\"id\" href=\"#ide_expiry_t\">ide_expiry_t</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"", 
"<span class=\"comment\">/* used by ide-cd, ide-floppy, etc. */</span>", 
"typedef void (<a class=\"id\" href=\"#xfer_func_t\">xfer_func_t</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *, void *, unsigned);", 
"", 
"extern struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#ide_setting_mtx\">ide_setting_mtx</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * configurable drive settings</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DS_SYNC\">DS_SYNC</a><span class=\"ts\"/>(1 << 0)", 
"", 
"struct <a class=\"id\" href=\"#ide_devset\">ide_devset</a> {", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#get\">get</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#set\">set</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, int);", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__DEVSET\">__DEVSET</a>(<a class=\"id\" href=\"#_flags\">_flags</a>, <a class=\"id\" href=\"#_get\">_get</a>, <a class=\"id\" href=\"#_set\">_set</a>) { \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a><span class=\"ts\"/>= <a class=\"id\" href=\"#_flags\">_flags</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get\">get</a><span class=\"ts\"/>= <a class=\"id\" href=\"#_get\">_get</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set\">set</a><span class=\"ts\"/>= <a class=\"id\" href=\"#_set\">_set</a>,<span class=\"ts\"/>\\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_devset_get\">ide_devset_get</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#field\">field</a>) \\", 
"static int <a class=\"id\" href=\"#get_\">get_</a>##<a class=\"id\" href=\"#name\">name</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>) \\", 
"{ \\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#field\">field</a>; \\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_devset_set\">ide_devset_set</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#field\">field</a>) \\", 
"static int <a class=\"id\" href=\"#set_\">set_</a>##<a class=\"id\" href=\"#name\">name</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, int <a class=\"id\" href=\"#arg\">arg</a>) \\", 
"{ \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#field\">field</a> = <a class=\"id\" href=\"#arg\">arg</a>; \\", 
"<span class=\"ts\"/>return 0; \\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_devset_get_flag\">ide_devset_get_flag</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#flag\">flag</a>) \\", 
"static int <a class=\"id\" href=\"#get_\">get_</a>##<a class=\"id\" href=\"#name\">name</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>) \\", 
"{ \\", 
"<span class=\"ts\"/>return !!(<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#flag\">flag</a>); \\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_devset_set_flag\">ide_devset_set_flag</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#flag\">flag</a>) \\", 
"static int <a class=\"id\" href=\"#set_\">set_</a>##<a class=\"id\" href=\"#name\">name</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, int <a class=\"id\" href=\"#arg\">arg</a>) \\", 
"{ \\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#flag\">flag</a>; \\", 
"<span class=\"ts\"/>else \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &= ~<a class=\"id\" href=\"#flag\">flag</a>; \\", 
"<span class=\"ts\"/>return 0; \\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__IDE_DEVSET\">__IDE_DEVSET</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_flags\">_flags</a>, <a class=\"id\" href=\"#_get\">_get</a>, <a class=\"id\" href=\"#_set\">_set</a>) \\", 
"const struct <a class=\"id\" href=\"#ide_devset\">ide_devset</a> <a class=\"id\" href=\"#ide_devset_\">ide_devset_</a>##<a class=\"id\" href=\"#_name\">_name</a> = \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__DEVSET\">__DEVSET</a>(<a class=\"id\" href=\"#_flags\">_flags</a>, <a class=\"id\" href=\"#_get\">_get</a>, <a class=\"id\" href=\"#_set\">_set</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDE_DEVSET\">IDE_DEVSET</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_flags\">_flags</a>, <a class=\"id\" href=\"#_get\">_get</a>, <a class=\"id\" href=\"#_set\">_set</a>) \\", 
"static <a class=\"id\" href=\"#__IDE_DEVSET\">__IDE_DEVSET</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_flags\">_flags</a>, <a class=\"id\" href=\"#_get\">_get</a>, <a class=\"id\" href=\"#_set\">_set</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_devset_rw\">ide_devset_rw</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_func\">_func</a>) \\", 
"<a class=\"id\" href=\"#IDE_DEVSET\">IDE_DEVSET</a>(<a class=\"id\" href=\"#_name\">_name</a>, 0, <a class=\"id\" href=\"#get_\">get_</a>##<a class=\"id\" href=\"#_func\">_func</a>, <a class=\"id\" href=\"#set_\">set_</a>##<a class=\"id\" href=\"#_func\">_func</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_devset_w\">ide_devset_w</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_func\">_func</a>) \\", 
"<a class=\"id\" href=\"#IDE_DEVSET\">IDE_DEVSET</a>(<a class=\"id\" href=\"#_name\">_name</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#set_\">set_</a>##<a class=\"id\" href=\"#_func\">_func</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_ext_devset_rw\">ide_ext_devset_rw</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_func\">_func</a>) \\", 
"<a class=\"id\" href=\"#__IDE_DEVSET\">__IDE_DEVSET</a>(<a class=\"id\" href=\"#_name\">_name</a>, 0, <a class=\"id\" href=\"#get_\">get_</a>##<a class=\"id\" href=\"#_func\">_func</a>, <a class=\"id\" href=\"#set_\">set_</a>##<a class=\"id\" href=\"#_func\">_func</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_ext_devset_rw_sync\">ide_ext_devset_rw_sync</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_func\">_func</a>) \\", 
"<a class=\"id\" href=\"#__IDE_DEVSET\">__IDE_DEVSET</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#DS_SYNC\">DS_SYNC</a>, <a class=\"id\" href=\"#get_\">get_</a>##<a class=\"id\" href=\"#_func\">_func</a>, <a class=\"id\" href=\"#set_\">set_</a>##<a class=\"id\" href=\"#_func\">_func</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_decl_devset\">ide_decl_devset</a>(<a class=\"id\" href=\"#_name\">_name</a>) \\", 
"extern const struct <a class=\"id\" href=\"#ide_devset\">ide_devset</a> <a class=\"id\" href=\"#ide_devset_\">ide_devset_</a>##<a class=\"id\" href=\"#_name\">_name</a>", 
"", 
"<a class=\"id\" href=\"#ide_decl_devset\">ide_decl_devset</a>(<a class=\"id\" href=\"#io_32bit\">io_32bit</a>);", 
"<a class=\"id\" href=\"#ide_decl_devset\">ide_decl_devset</a>(<a class=\"id\" href=\"#keepsettings\">keepsettings</a>);", 
"<a class=\"id\" href=\"#ide_decl_devset\">ide_decl_devset</a>(<a class=\"id\" href=\"#pio_mode\">pio_mode</a>);", 
"<a class=\"id\" href=\"#ide_decl_devset\">ide_decl_devset</a>(<a class=\"id\" href=\"#unmaskirq\">unmaskirq</a>);", 
"<a class=\"id\" href=\"#ide_decl_devset\">ide_decl_devset</a>(<a class=\"id\" href=\"#using_dma\">using_dma</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IDE_PROC_FS\">CONFIG_IDE_PROC_FS</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * /proc/ide interface</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_devset_rw_field\">ide_devset_rw_field</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_field\">_field</a>) \\", 
"<a class=\"id\" href=\"#ide_devset_get\">ide_devset_get</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_field\">_field</a>); \\", 
"<a class=\"id\" href=\"#ide_devset_set\">ide_devset_set</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_field\">_field</a>); \\", 
"<a class=\"id\" href=\"#IDE_DEVSET\">IDE_DEVSET</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#DS_SYNC\">DS_SYNC</a>, <a class=\"id\" href=\"#get_\">get_</a>##<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#set_\">set_</a>##<a class=\"id\" href=\"#_name\">_name</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_devset_rw_flag\">ide_devset_rw_flag</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_field\">_field</a>) \\", 
"<a class=\"id\" href=\"#ide_devset_get_flag\">ide_devset_get_flag</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_field\">_field</a>); \\", 
"<a class=\"id\" href=\"#ide_devset_set_flag\">ide_devset_set_flag</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_field\">_field</a>); \\", 
"<a class=\"id\" href=\"#IDE_DEVSET\">IDE_DEVSET</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#DS_SYNC\">DS_SYNC</a>, <a class=\"id\" href=\"#get_\">get_</a>##<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#set_\">set_</a>##<a class=\"id\" href=\"#_name\">_name</a>)", 
"", 
"struct <a class=\"id\" href=\"#ide_proc_devset\">ide_proc_devset</a> {", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_devset\">ide_devset</a><span class=\"ts\"/>*<a class=\"id\" href=\"#setting\">setting</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a>, <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#mulf\">mulf</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#divf\">divf</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__IDE_PROC_DEVSET\">__IDE_PROC_DEVSET</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_min\">_min</a>, <a class=\"id\" href=\"#_max\">_max</a>, <a class=\"id\" href=\"#_mulf\">_mulf</a>, <a class=\"id\" href=\"#_divf\">_divf</a>) { \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#_name\">_name</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#setting\">setting</a> = &amp;<a class=\"id\" href=\"#ide_devset_\">ide_devset_</a>##<a class=\"id\" href=\"#_name\">_name</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#min\">min</a> = <a class=\"id\" href=\"#_min\">_min</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#_max\">_max</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mulf\">mulf</a> = <a class=\"id\" href=\"#_mulf\">_mulf</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#divf\">divf</a> = <a class=\"id\" href=\"#_divf\">_divf</a>, \\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDE_PROC_DEVSET\">IDE_PROC_DEVSET</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_min\">_min</a>, <a class=\"id\" href=\"#_max\">_max</a>) \\", 
"<a class=\"id\" href=\"#__IDE_PROC_DEVSET\">__IDE_PROC_DEVSET</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#_min\">_min</a>, <a class=\"id\" href=\"#_max\">_max</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"", 
"typedef struct {", 
"<span class=\"ts\"/>const char<span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode_t\">mode_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#proc_fops\">proc_fops</a>;", 
"} <a class=\"id\" href=\"#ide_proc_entry_t\">ide_proc_entry_t</a>;", 
"", 
"void <a class=\"id\" href=\"#proc_ide_create\">proc_ide_create</a>(void);", 
"void <a class=\"id\" href=\"#proc_ide_destroy\">proc_ide_destroy</a>(void);", 
"void <a class=\"id\" href=\"#ide_proc_register_port\">ide_proc_register_port</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"void <a class=\"id\" href=\"#ide_proc_port_register_devices\">ide_proc_port_register_devices</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"void <a class=\"id\" href=\"#ide_proc_unregister_device\">ide_proc_unregister_device</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"void <a class=\"id\" href=\"#ide_proc_unregister_port\">ide_proc_unregister_port</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"void <a class=\"id\" href=\"#ide_proc_register_driver\">ide_proc_register_driver</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_driver\">ide_driver</a> *);", 
"void <a class=\"id\" href=\"#ide_proc_unregister_driver\">ide_proc_unregister_driver</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_driver\">ide_driver</a> *);", 
"", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#ide_capacity_proc_fops\">ide_capacity_proc_fops</a>;", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#ide_geometry_proc_fops\">ide_geometry_proc_fops</a>;", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#proc_ide_create\">proc_ide_create</a>(void) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#proc_ide_destroy\">proc_ide_destroy</a>(void) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_proc_register_port\">ide_proc_register_port</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_proc_port_register_devices\">ide_proc_port_register_devices</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_proc_unregister_device\">ide_proc_unregister_device</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_proc_unregister_port\">ide_proc_unregister_port</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_proc_register_driver\">ide_proc_register_driver</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#ide_driver\">ide_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_proc_unregister_driver\">ide_proc_unregister_driver</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ide_driver\">ide_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>) { ; }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"enum {", 
"<span class=\"ts\"/><span class=\"comment\">/* enter/exit functions */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DBG_FUNC\">IDE_DBG_FUNC</a> =<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(1 << 0),", 
"<span class=\"ts\"/><span class=\"comment\">/* sense key/asc handling */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DBG_SENSE\">IDE_DBG_SENSE</a> =<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(1 << 1),", 
"<span class=\"ts\"/><span class=\"comment\">/* packet commands handling */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DBG_PC\">IDE_DBG_PC</a> =<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(1 << 2),", 
"<span class=\"ts\"/><span class=\"comment\">/* request handling */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DBG_RQ\">IDE_DBG_RQ</a> =<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(1 << 3),", 
"<span class=\"ts\"/><span class=\"comment\">/* driver probing/setup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_DBG_PROBE\">IDE_DBG_PROBE</a> =<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(1 << 4),", 
"};", 
"", 
"<span class=\"comment\">/* DRV_NAME has to be defined in the driver before using the macro below */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__ide_debug_log\">__ide_debug_log</a>(<a class=\"id\" href=\"#lvl\">lvl</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#debug_mask\">debug_mask</a> &amp; <a class=\"id\" href=\"#lvl\">lvl</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> <a class=\"id\" href=\"#DRV_NAME\">DRV_NAME</a> \": %s: \" <a class=\"id\" href=\"#fmt\">fmt</a> \"\\n\",<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__func__\">__func__</a>, ## <a class=\"id\" href=\"#args\">args</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Power Management state machine (rq-&gt;pm-&gt;pm_step).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For each step, the core calls ide_start_power_step() first.</span>", 
"<span class=\"comment\"> * This can return:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- ide_stopped :<span class=\"ts\"/>In this case, the core calls us back again unless</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>step have been set to ide_power_state_completed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- ide_started :<span class=\"ts\"/>In this case, the channel is left busy until an</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>async event (interrupt) occurs.</span>", 
"<span class=\"comment\"> * Typically, ide_start_power_step() will issue a taskfile request with</span>", 
"<span class=\"comment\"> * do_rw_taskfile().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Upon reception of the interrupt, the core will call ide_complete_power_step()</span>", 
"<span class=\"comment\"> * with the error code if any. This routine should update the step value</span>", 
"<span class=\"comment\"> * and return. It should not start a new request. The core will call</span>", 
"<span class=\"comment\"> * ide_start_power_step() for the new step value, unless step have been</span>", 
"<span class=\"comment\"> * set to IDE_PM_COMPLETED.</span>", 
"<span class=\"comment\"> */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_PM_START_SUSPEND\">IDE_PM_START_SUSPEND</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_PM_FLUSH_CACHE\">IDE_PM_FLUSH_CACHE</a><span class=\"ts\"/>= <a class=\"id\" href=\"#IDE_PM_START_SUSPEND\">IDE_PM_START_SUSPEND</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_PM_STANDBY\">IDE_PM_STANDBY</a>,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_PM_START_RESUME\">IDE_PM_START_RESUME</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_PM_RESTORE_PIO\">IDE_PM_RESTORE_PIO</a><span class=\"ts\"/>= <a class=\"id\" href=\"#IDE_PM_START_RESUME\">IDE_PM_START_RESUME</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_PM_IDLE\">IDE_PM_IDLE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_PM_RESTORE_DMA\">IDE_PM_RESTORE_DMA</a>,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_PM_COMPLETED\">IDE_PM_COMPLETED</a>,", 
"};", 
"", 
"int <a class=\"id\" href=\"#generic_ide_suspend\">generic_ide_suspend</a>(struct <a class=\"id\" href=\"#device\">device</a> *, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a>);", 
"int <a class=\"id\" href=\"#generic_ide_resume\">generic_ide_resume</a>(struct <a class=\"id\" href=\"#device\">device</a> *);", 
"", 
"void <a class=\"id\" href=\"#ide_complete_power_step\">ide_complete_power_step</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#request\">request</a> *);", 
"<a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> <a class=\"id\" href=\"#ide_start_power_step\">ide_start_power_step</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#request\">request</a> *);", 
"void <a class=\"id\" href=\"#ide_complete_pm_rq\">ide_complete_pm_rq</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#request\">request</a> *);", 
"void <a class=\"id\" href=\"#ide_check_pm_state\">ide_check_pm_state</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#request\">request</a> *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Subdrivers support.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The gendriver.owner field should be set to the module owner of this driver.</span>", 
"<span class=\"comment\"> * The gendriver.name field should be set to the name of this driver</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ide_driver\">ide_driver</a> {", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#version\">version</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a><span class=\"ts\"/>(*<a class=\"id\" href=\"#do_request\">do_request</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#request\">request</a> *, <a class=\"id\" href=\"#sector_t\">sector_t</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a><span class=\"ts\"/><a class=\"id\" href=\"#gen_driver\">gen_driver</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#probe\">probe</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#remove\">remove</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#resume\">resume</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#shutdown\">shutdown</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IDE_PROC_FS\">CONFIG_IDE_PROC_FS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_proc_entry_t\">ide_proc_entry_t</a> *<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#proc_entries\">proc_entries</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_proc_devset\">ide_proc_devset</a> *<span class=\"ts\"/>(*<a class=\"id\" href=\"#proc_devsets\">proc_devsets</a>)(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_ide_driver\">to_ide_driver</a>(<a class=\"id\" href=\"#drv\">drv</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#drv\">drv</a>, struct <a class=\"id\" href=\"#ide_driver\">ide_driver</a>, <a class=\"id\" href=\"#gen_driver\">gen_driver</a>)", 
"", 
"int <a class=\"id\" href=\"#ide_device_get\">ide_device_get</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"void <a class=\"id\" href=\"#ide_device_put\">ide_device_put</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"", 
"struct <a class=\"id\" href=\"#ide_ioctl_devset\">ide_ioctl_devset</a> {", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#get_ioctl\">get_ioctl</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><a class=\"id\" href=\"#set_ioctl\">set_ioctl</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_devset\">ide_devset</a> *<a class=\"id\" href=\"#setting\">setting</a>;", 
"};", 
"", 
"int <a class=\"id\" href=\"#ide_setting_ioctl\">ide_setting_ioctl</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#block_device\">block_device</a> *, unsigned int,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned long, const struct <a class=\"id\" href=\"#ide_ioctl_devset\">ide_ioctl_devset</a> *);", 
"", 
"int <a class=\"id\" href=\"#generic_ide_ioctl\">generic_ide_ioctl</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#block_device\">block_device</a> *, unsigned, unsigned long);", 
"", 
"extern int <a class=\"id\" href=\"#ide_vlb_clk\">ide_vlb_clk</a>;", 
"extern int <a class=\"id\" href=\"#ide_pci_clk\">ide_pci_clk</a>;", 
"", 
"int <a class=\"id\" href=\"#ide_end_rq\">ide_end_rq</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#request\">request</a> *, int, unsigned int);", 
"void <a class=\"id\" href=\"#ide_kill_rq\">ide_kill_rq</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#request\">request</a> *);", 
"", 
"void <a class=\"id\" href=\"#__ide_set_handler\">__ide_set_handler</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, <a class=\"id\" href=\"#ide_handler_t\">ide_handler_t</a> *, unsigned int);", 
"void <a class=\"id\" href=\"#ide_set_handler\">ide_set_handler</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, <a class=\"id\" href=\"#ide_handler_t\">ide_handler_t</a> *, unsigned int);", 
"", 
"void <a class=\"id\" href=\"#ide_execute_command\">ide_execute_command</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *, <a class=\"id\" href=\"#ide_handler_t\">ide_handler_t</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int);", 
"", 
"void <a class=\"id\" href=\"#ide_pad_transfer\">ide_pad_transfer</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, int, int);", 
"", 
"<a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> <a class=\"id\" href=\"#ide_error\">ide_error</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, const char *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"", 
"void <a class=\"id\" href=\"#ide_fix_driveid\">ide_fix_driveid</a>(<a class=\"id\" href=\"#u16\">u16</a> *);", 
"", 
"extern void <a class=\"id\" href=\"#ide_fixstring\">ide_fixstring</a>(<a class=\"id\" href=\"#u8\">u8</a> *, const int, const int);", 
"", 
"int <a class=\"id\" href=\"#ide_busy_sleep\">ide_busy_sleep</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, unsigned long, int);", 
"", 
"int <a class=\"id\" href=\"#__ide_wait_stat\">__ide_wait_stat</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, <a class=\"id\" href=\"#u8\">u8</a>, <a class=\"id\" href=\"#u8\">u8</a>, unsigned long, <a class=\"id\" href=\"#u8\">u8</a> *);", 
"int <a class=\"id\" href=\"#ide_wait_stat\">ide_wait_stat</a>(<a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> *, <a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, <a class=\"id\" href=\"#u8\">u8</a>, <a class=\"id\" href=\"#u8\">u8</a>, unsigned long);", 
"", 
"<a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> <a class=\"id\" href=\"#ide_do_park_unpark\">ide_do_park_unpark</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#request\">request</a> *);", 
"<a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> <a class=\"id\" href=\"#ide_do_devset\">ide_do_devset</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#request\">request</a> *);", 
"", 
"extern <a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> <a class=\"id\" href=\"#ide_do_reset\">ide_do_reset</a> (<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"", 
"extern int <a class=\"id\" href=\"#ide_devset_execute\">ide_devset_execute</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#ide_devset\">ide_devset</a> *<a class=\"id\" href=\"#setting\">setting</a>, int <a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"void <a class=\"id\" href=\"#ide_complete_cmd\">ide_complete_cmd</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *, <a class=\"id\" href=\"#u8\">u8</a>, <a class=\"id\" href=\"#u8\">u8</a>);", 
"int <a class=\"id\" href=\"#ide_complete_rq\">ide_complete_rq</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, int, unsigned int);", 
"", 
"void <a class=\"id\" href=\"#ide_tf_readback\">ide_tf_readback</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"void <a class=\"id\" href=\"#ide_tf_dump\">ide_tf_dump</a>(const char *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *);", 
"", 
"void <a class=\"id\" href=\"#ide_exec_command\">ide_exec_command</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ide_read_status\">ide_read_status</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ide_read_altstatus\">ide_read_altstatus</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"void <a class=\"id\" href=\"#ide_write_devctl\">ide_write_devctl</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"", 
"void <a class=\"id\" href=\"#ide_dev_select\">ide_dev_select</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"void <a class=\"id\" href=\"#ide_tf_load\">ide_tf_load</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_taskfile\">ide_taskfile</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"void <a class=\"id\" href=\"#ide_tf_read\">ide_tf_read</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_taskfile\">ide_taskfile</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"", 
"void <a class=\"id\" href=\"#ide_input_data\">ide_input_data</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *, void *, unsigned int);", 
"void <a class=\"id\" href=\"#ide_output_data\">ide_output_data</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *, void *, unsigned int);", 
"", 
"void <a class=\"id\" href=\"#SELECT_MASK\">SELECT_MASK</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, int);", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ide_read_error\">ide_read_error</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"void <a class=\"id\" href=\"#ide_read_bcount_and_ireason\">ide_read_bcount_and_ireason</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, <a class=\"id\" href=\"#u16\">u16</a> *, <a class=\"id\" href=\"#u8\">u8</a> *);", 
"", 
"int <a class=\"id\" href=\"#ide_check_ireason\">ide_check_ireason</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#request\">request</a> *, int, int, int);", 
"", 
"int <a class=\"id\" href=\"#ide_check_atapi_device\">ide_check_atapi_device</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, const char *);", 
"", 
"void <a class=\"id\" href=\"#ide_init_pc\">ide_init_pc</a>(struct <a class=\"id\" href=\"#ide_atapi_pc\">ide_atapi_pc</a> *);", 
"", 
"<span class=\"comment\">/* Disk head parking */</span>", 
"extern <a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#ide_park_wq\">ide_park_wq</a>;", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ide_park_show\">ide_park_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      char *<a class=\"id\" href=\"#buf\">buf</a>);", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ide_park_store\">ide_park_store</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Special requests for ide-tape block device strategy routine.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In order to service a character device command, we add special requests to</span>", 
"<span class=\"comment\"> * the tail of our block device request queue and wait for their completion.</span>", 
"<span class=\"comment\"> */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REQ_IDETAPE_PC1\">REQ_IDETAPE_PC1</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 0), <span class=\"comment\">/* packet command (first stage) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REQ_IDETAPE_PC2\">REQ_IDETAPE_PC2</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 1), <span class=\"comment\">/* packet command (second stage) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REQ_IDETAPE_READ\">REQ_IDETAPE_READ</a><span class=\"ts\"/>= (1 << 2),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REQ_IDETAPE_WRITE\">REQ_IDETAPE_WRITE</a><span class=\"ts\"/>= (1 << 3),", 
"};", 
"", 
"int <a class=\"id\" href=\"#ide_queue_pc_tail\">ide_queue_pc_tail</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *, struct <a class=\"id\" href=\"#ide_atapi_pc\">ide_atapi_pc</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>      void *, unsigned int);", 
"", 
"int <a class=\"id\" href=\"#ide_do_test_unit_ready\">ide_do_test_unit_ready</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *);", 
"int <a class=\"id\" href=\"#ide_do_start_stop\">ide_do_start_stop</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *, int);", 
"int <a class=\"id\" href=\"#ide_set_media_lock\">ide_set_media_lock</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *, int);", 
"void <a class=\"id\" href=\"#ide_create_request_sense_cmd\">ide_create_request_sense_cmd</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_atapi_pc\">ide_atapi_pc</a> *);", 
"void <a class=\"id\" href=\"#ide_retry_pc\">ide_retry_pc</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>);", 
"", 
"void <a class=\"id\" href=\"#ide_prep_sense\">ide_prep_sense</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"int <a class=\"id\" href=\"#ide_queue_sense_rq\">ide_queue_sense_rq</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, void *<a class=\"id\" href=\"#special\">special</a>);", 
"", 
"int <a class=\"id\" href=\"#ide_cd_expiry\">ide_cd_expiry</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"", 
"int <a class=\"id\" href=\"#ide_cd_get_xferlen\">ide_cd_get_xferlen</a>(struct <a class=\"id\" href=\"#request\">request</a> *);", 
"", 
"<a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> <a class=\"id\" href=\"#ide_issue_pc\">ide_issue_pc</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *);", 
"", 
"<a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> <a class=\"id\" href=\"#do_rw_taskfile\">do_rw_taskfile</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *);", 
"", 
"void <a class=\"id\" href=\"#ide_pio_bytes\">ide_pio_bytes</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *, unsigned int, unsigned int);", 
"", 
"void <a class=\"id\" href=\"#ide_finish_cmd\">ide_finish_cmd</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"", 
"int <a class=\"id\" href=\"#ide_raw_taskfile\">ide_raw_taskfile</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *, <a class=\"id\" href=\"#u8\">u8</a> *, <a class=\"id\" href=\"#u16\">u16</a>);", 
"int <a class=\"id\" href=\"#ide_no_data_taskfile\">ide_no_data_taskfile</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *);", 
"", 
"int <a class=\"id\" href=\"#ide_taskfile_ioctl\">ide_taskfile_ioctl</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, unsigned long);", 
"", 
"int <a class=\"id\" href=\"#ide_dev_read_id\">ide_dev_read_id</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, <a class=\"id\" href=\"#u8\">u8</a>, <a class=\"id\" href=\"#u16\">u16</a> *, int);", 
"", 
"extern int <a class=\"id\" href=\"#ide_driveid_update\">ide_driveid_update</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"extern int <a class=\"id\" href=\"#ide_config_drive_speed\">ide_config_drive_speed</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"extern <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#eighty_ninty_three\">eighty_ninty_three</a> (<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"extern int <a class=\"id\" href=\"#taskfile_lib_get_identify\">taskfile_lib_get_identify</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#u8\">u8</a> *);", 
"", 
"extern int <a class=\"id\" href=\"#ide_wait_not_busy\">ide_wait_not_busy</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>, unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"", 
"extern void <a class=\"id\" href=\"#ide_stall_queue\">ide_stall_queue</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"", 
"extern void <a class=\"id\" href=\"#ide_timer_expiry\">ide_timer_expiry</a>(unsigned long);", 
"extern <a class=\"id\" href=\"#irqreturn_t\">irqreturn_t</a> <a class=\"id\" href=\"#ide_intr\">ide_intr</a>(int <a class=\"id\" href=\"#irq\">irq</a>, void *<a class=\"id\" href=\"#dev_id\">dev_id</a>);", 
"extern void <a class=\"id\" href=\"#do_ide_request\">do_ide_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *);", 
"extern void <a class=\"id\" href=\"#ide_requeue_and_plug\">ide_requeue_and_plug</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"void <a class=\"id\" href=\"#ide_init_disk\">ide_init_disk</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *, <a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IDEPCI_PCIBUS_ORDER\">CONFIG_IDEPCI_PCIBUS_ORDER</a>", 
"extern int <a class=\"id\" href=\"#__ide_pci_register_driver\">__ide_pci_register_driver</a>(struct <a class=\"id\" href=\"#pci_driver\">pci_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>, struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>, const char *<a class=\"id\" href=\"#mod_name\">mod_name</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_pci_register_driver\">ide_pci_register_driver</a>(<a class=\"id\" href=\"#d\">d</a>) <a class=\"id\" href=\"#__ide_pci_register_driver\">__ide_pci_register_driver</a>(<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>, <a class=\"id\" href=\"#KBUILD_MODNAME\">KBUILD_MODNAME</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_pci_register_driver\">ide_pci_register_driver</a>(<a class=\"id\" href=\"#d\">d</a>) <a class=\"id\" href=\"#pci_register_driver\">pci_register_driver</a>(<a class=\"id\" href=\"#d\">d</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ide_pci_is_in_compatibility_mode\">ide_pci_is_in_compatibility_mode</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) == <a class=\"id\" href=\"#PCI_CLASS_STORAGE_IDE\">PCI_CLASS_STORAGE_IDE</a> && (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> &amp; 5) != 5)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#ide_pci_setup_ports\">ide_pci_setup_ports</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *, const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ide_hw\">ide_hw</a> *, struct <a class=\"id\" href=\"#ide_hw\">ide_hw</a> **);", 
"void <a class=\"id\" href=\"#ide_setup_pci_noise\">ide_setup_pci_noise</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *, const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_IDEDMA_PCI\">CONFIG_BLK_DEV_IDEDMA_PCI</a>", 
"int <a class=\"id\" href=\"#ide_pci_set_master\">ide_pci_set_master</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *, const char *);", 
"unsigned long <a class=\"id\" href=\"#ide_pci_dma_base\">ide_pci_dma_base</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *, const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *);", 
"int <a class=\"id\" href=\"#ide_pci_check_simplex\">ide_pci_check_simplex</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *, const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *);", 
"int <a class=\"id\" href=\"#ide_hwif_setup_dma\">ide_hwif_setup_dma</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *, const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ide_hwif_setup_dma\">ide_hwif_setup_dma</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#ide_pci_enablebit\">ide_pci_enablebit</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a>;<span class=\"ts\"/><span class=\"comment\">/* byte pci reg holding the enable-bit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a>;<span class=\"ts\"/><span class=\"comment\">/* mask to isolate the enable-bit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>;<span class=\"ts\"/><span class=\"comment\">/* value of masked reg when \"enabled\" */</span>", 
"};", 
"", 
"enum {", 
"<span class=\"ts\"/><span class=\"comment\">/* Uses ISA control ports not PCI ones. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_ISA_PORTS\">IDE_HFLAG_ISA_PORTS</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 0),", 
"<span class=\"ts\"/><span class=\"comment\">/* single port device */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_SINGLE\">IDE_HFLAG_SINGLE</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 1),", 
"<span class=\"ts\"/><span class=\"comment\">/* don't use legacy PIO blacklist */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_PIO_NO_BLACKLIST\">IDE_HFLAG_PIO_NO_BLACKLIST</a><span class=\"ts\"/>= (1 << 2),", 
"<span class=\"ts\"/><span class=\"comment\">/* set for the second port of QD65xx */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_QD_2ND_PORT\">IDE_HFLAG_QD_2ND_PORT</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 3),", 
"<span class=\"ts\"/><span class=\"comment\">/* use PIO8/9 for prefetch off/on */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_ABUSE_PREFETCH\">IDE_HFLAG_ABUSE_PREFETCH</a><span class=\"ts\"/>= (1 << 4),", 
"<span class=\"ts\"/><span class=\"comment\">/* use PIO6/7 for fast-devsel off/on */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_ABUSE_FAST_DEVSEL\">IDE_HFLAG_ABUSE_FAST_DEVSEL</a><span class=\"ts\"/>= (1 << 5),", 
"<span class=\"ts\"/><span class=\"comment\">/* use 100-102 and 200-202 PIO values to set DMA modes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_ABUSE_DMA_MODES\">IDE_HFLAG_ABUSE_DMA_MODES</a><span class=\"ts\"/>= (1 << 6),", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * keep DMA setting when programming PIO mode, may be used only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for hosts which have separate PIO and DMA timings (ie. PMAC)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_SET_PIO_MODE_KEEP_DMA\">IDE_HFLAG_SET_PIO_MODE_KEEP_DMA</a><span class=\"ts\"/>= (1 << 7),", 
"<span class=\"ts\"/><span class=\"comment\">/* program host for the transfer mode after programming device */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_POST_SET_MODE\">IDE_HFLAG_POST_SET_MODE</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 8),", 
"<span class=\"ts\"/><span class=\"comment\">/* don't program host/device for the transfer mode (\"smart\" hosts) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_NO_SET_MODE\">IDE_HFLAG_NO_SET_MODE</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 9),", 
"<span class=\"ts\"/><span class=\"comment\">/* trust BIOS for programming chipset/device for DMA */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_TRUST_BIOS_FOR_DMA\">IDE_HFLAG_TRUST_BIOS_FOR_DMA</a><span class=\"ts\"/>= (1 << 10),", 
"<span class=\"ts\"/><span class=\"comment\">/* host is CS5510/CS5520 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_CS5520\">IDE_HFLAG_CS5520</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 11),", 
"<span class=\"ts\"/><span class=\"comment\">/* ATAPI DMA is unsupported */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_NO_ATAPI_DMA\">IDE_HFLAG_NO_ATAPI_DMA</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 12),", 
"<span class=\"ts\"/><span class=\"comment\">/* set if host is a \"non-bootable\" controller */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_NON_BOOTABLE\">IDE_HFLAG_NON_BOOTABLE</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 13),", 
"<span class=\"ts\"/><span class=\"comment\">/* host doesn't support DMA */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_NO_DMA\">IDE_HFLAG_NO_DMA</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 14),", 
"<span class=\"ts\"/><span class=\"comment\">/* check if host is PCI IDE device before allowing DMA */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_NO_AUTODMA\">IDE_HFLAG_NO_AUTODMA</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 15),", 
"<span class=\"ts\"/><span class=\"comment\">/* host uses MMIO */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_MMIO\">IDE_HFLAG_MMIO</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 16),", 
"<span class=\"ts\"/><span class=\"comment\">/* no LBA48 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_NO_LBA48\">IDE_HFLAG_NO_LBA48</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 17),", 
"<span class=\"ts\"/><span class=\"comment\">/* no LBA48 DMA */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_NO_LBA48_DMA\">IDE_HFLAG_NO_LBA48_DMA</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 18),", 
"<span class=\"ts\"/><span class=\"comment\">/* data FIFO is cleared by an error */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_ERROR_STOPS_FIFO\">IDE_HFLAG_ERROR_STOPS_FIFO</a><span class=\"ts\"/>= (1 << 19),", 
"<span class=\"ts\"/><span class=\"comment\">/* serialize ports */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_SERIALIZE\">IDE_HFLAG_SERIALIZE</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 20),", 
"<span class=\"ts\"/><span class=\"comment\">/* host is DTC2278 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_DTC2278\">IDE_HFLAG_DTC2278</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 21),", 
"<span class=\"ts\"/><span class=\"comment\">/* 4 devices on a single set of I/O ports */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_4DRIVES\">IDE_HFLAG_4DRIVES</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 22),", 
"<span class=\"ts\"/><span class=\"comment\">/* host is TRM290 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_TRM290\">IDE_HFLAG_TRM290</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 23),", 
"<span class=\"ts\"/><span class=\"comment\">/* use 32-bit I/O ops */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_IO_32BIT\">IDE_HFLAG_IO_32BIT</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 24),", 
"<span class=\"ts\"/><span class=\"comment\">/* unmask IRQs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_UNMASK_IRQS\">IDE_HFLAG_UNMASK_IRQS</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 25),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_BROKEN_ALTSTATUS\">IDE_HFLAG_BROKEN_ALTSTATUS</a><span class=\"ts\"/>= (1 << 26),", 
"<span class=\"ts\"/><span class=\"comment\">/* serialize ports if DMA is possible (for sl82c105) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_SERIALIZE_DMA\">IDE_HFLAG_SERIALIZE_DMA</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 27),", 
"<span class=\"ts\"/><span class=\"comment\">/* force host out of \"simplex\" mode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_CLEAR_SIMPLEX\">IDE_HFLAG_CLEAR_SIMPLEX</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 28),", 
"<span class=\"ts\"/><span class=\"comment\">/* DSC overlap is unsupported */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_NO_DSC\">IDE_HFLAG_NO_DSC</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 29),", 
"<span class=\"ts\"/><span class=\"comment\">/* never use 32-bit I/O ops */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_NO_IO_32BIT\">IDE_HFLAG_NO_IO_32BIT</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 30),", 
"<span class=\"ts\"/><span class=\"comment\">/* never unmask IRQs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_NO_UNMASK_IRQS\">IDE_HFLAG_NO_UNMASK_IRQS</a><span class=\"ts\"/>= (1 << 31),", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_OFFBOARD\">CONFIG_BLK_DEV_OFFBOARD</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDE_HFLAG_OFF_BOARD\">IDE_HFLAG_OFF_BOARD</a><span class=\"ts\"/>0", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IDE_HFLAG_OFF_BOARD\">IDE_HFLAG_OFF_BOARD</a><span class=\"ts\"/><a class=\"id\" href=\"#IDE_HFLAG_NON_BOOTABLE\">IDE_HFLAG_NON_BOOTABLE</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> {", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#init_chipset\">init_chipset</a>)(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *);", 
"", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#get_lock\">get_lock</a>)(<a class=\"id\" href=\"#irq_handler_t\">irq_handler_t</a>, void *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#release_lock\">release_lock</a>)(void);", 
"", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#init_iops\">init_iops</a>)(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"<span class=\"ts\"/>void                    (*<a class=\"id\" href=\"#init_hwif\">init_hwif</a>)(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#init_dma\">init_dma</a>)(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *);", 
"", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_tp_ops\">ide_tp_ops</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tp_ops\">tp_ops</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_port_ops\">ide_port_ops</a><span class=\"ts\"/>*<a class=\"id\" href=\"#port_ops\">port_ops</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ide_dma_ops\">ide_dma_ops</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dma_ops\">dma_ops</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ide_pci_enablebit\">ide_pci_enablebit</a><span class=\"ts\"/><a class=\"id\" href=\"#enablebits\">enablebits</a>[2];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif_chipset_t\">hwif_chipset_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chipset\">chipset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_sectors\">max_sectors</a>;<span class=\"ts\"/><span class=\"comment\">/* if &lt; than the default one */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host_flags\">host_flags</a>;", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_flags\">irq_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pio_mask\">pio_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swdma_mask\">swdma_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udma_mask\">udma_mask</a>;", 
"};", 
"", 
"int <a class=\"id\" href=\"#ide_pci_init_one\">ide_pci_init_one</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *, const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *, void *);", 
"int <a class=\"id\" href=\"#ide_pci_init_two\">ide_pci_init_two</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *, struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *, void *);", 
"void <a class=\"id\" href=\"#ide_pci_remove\">ide_pci_remove</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM\">CONFIG_PM</a>", 
"int <a class=\"id\" href=\"#ide_pci_suspend\">ide_pci_suspend</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a>);", 
"int <a class=\"id\" href=\"#ide_pci_resume\">ide_pci_resume</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *);", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_pci_suspend\">ide_pci_suspend</a> <a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_pci_resume\">ide_pci_resume</a> <a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#ide_map_sg\">ide_map_sg</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *);", 
"void <a class=\"id\" href=\"#ide_init_sg_cmd\">ide_init_sg_cmd</a>(struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *, unsigned int);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BAD_DMA_DRIVE\">BAD_DMA_DRIVE</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GOOD_DMA_DRIVE\">GOOD_DMA_DRIVE</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"", 
"struct <a class=\"id\" href=\"#drive_list_entry\">drive_list_entry</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#id_model\">id_model</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#id_firmware\">id_firmware</a>;", 
"};", 
"", 
"int <a class=\"id\" href=\"#ide_in_drive_list\">ide_in_drive_list</a>(<a class=\"id\" href=\"#u16\">u16</a> *, const struct <a class=\"id\" href=\"#drive_list_entry\">drive_list_entry</a> *);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_IDEDMA\">CONFIG_BLK_DEV_IDEDMA</a>", 
"int <a class=\"id\" href=\"#ide_dma_good_drive\">ide_dma_good_drive</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"int <a class=\"id\" href=\"#__ide_dma_bad_drive\">__ide_dma_bad_drive</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ide_find_dma_mode\">ide_find_dma_mode</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ide_max_dma_mode\">ide_max_dma_mode</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ide_find_dma_mode\">ide_find_dma_mode</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#XFER_UDMA_6\">XFER_UDMA_6</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#ide_dma_off_quietly\">ide_dma_off_quietly</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"void <a class=\"id\" href=\"#ide_dma_off\">ide_dma_off</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"void <a class=\"id\" href=\"#ide_dma_on\">ide_dma_on</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"int <a class=\"id\" href=\"#ide_set_dma\">ide_set_dma</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"void <a class=\"id\" href=\"#ide_check_dma_crc\">ide_check_dma_crc</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> <a class=\"id\" href=\"#ide_dma_intr\">ide_dma_intr</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"", 
"int <a class=\"id\" href=\"#ide_allocate_dma_engine\">ide_allocate_dma_engine</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"void <a class=\"id\" href=\"#ide_release_dma_engine\">ide_release_dma_engine</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"", 
"int <a class=\"id\" href=\"#ide_dma_prepare\">ide_dma_prepare</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *);", 
"void <a class=\"id\" href=\"#ide_dma_unmap_sg\">ide_dma_unmap_sg</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_IDEDMA_SFF\">CONFIG_BLK_DEV_IDEDMA_SFF</a>", 
"int <a class=\"id\" href=\"#config_drive_for_dma\">config_drive_for_dma</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"int <a class=\"id\" href=\"#ide_build_dmatable\">ide_build_dmatable</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *);", 
"void <a class=\"id\" href=\"#ide_dma_host_set\">ide_dma_host_set</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, int);", 
"int <a class=\"id\" href=\"#ide_dma_setup\">ide_dma_setup</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *);", 
"extern void <a class=\"id\" href=\"#ide_dma_start\">ide_dma_start</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"int <a class=\"id\" href=\"#ide_dma_end\">ide_dma_end</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"int <a class=\"id\" href=\"#ide_dma_test_irq\">ide_dma_test_irq</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"int <a class=\"id\" href=\"#ide_dma_sff_timer_expiry\">ide_dma_sff_timer_expiry</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ide_dma_sff_read_status\">ide_dma_sff_read_status</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"extern const struct <a class=\"id\" href=\"#ide_dma_ops\">ide_dma_ops</a> <a class=\"id\" href=\"#sff_dma_ops\">sff_dma_ops</a>;", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#config_drive_for_dma\">config_drive_for_dma</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>) { return 0; }", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_BLK_DEV_IDEDMA_SFF */</span>", 
"", 
"void <a class=\"id\" href=\"#ide_dma_lost_irq\">ide_dma_lost_irq</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"<a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> <a class=\"id\" href=\"#ide_dma_timeout_retry\">ide_dma_timeout_retry</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, int);", 
"", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ide_find_dma_mode\">ide_find_dma_mode</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#speed\">speed</a>) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ide_max_dma_mode\">ide_max_dma_mode</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_dma_off_quietly\">ide_dma_off_quietly</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_dma_off\">ide_dma_off</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_dma_on\">ide_dma_on</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_dma_verbose\">ide_dma_verbose</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ide_set_dma\">ide_set_dma</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>) { return 1; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_check_dma_crc\">ide_check_dma_crc</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> <a class=\"id\" href=\"#ide_dma_intr\">ide_dma_intr</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>) { return <a class=\"id\" href=\"#ide_stopped\">ide_stopped</a>; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> <a class=\"id\" href=\"#ide_dma_timeout_retry\">ide_dma_timeout_retry</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, int <a class=\"id\" href=\"#error\">error</a>) { return <a class=\"id\" href=\"#ide_stopped\">ide_stopped</a>; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_release_dma_engine\">ide_release_dma_engine</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ide_dma_prepare\">ide_dma_prepare</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>) { return 1; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_dma_unmap_sg\">ide_dma_unmap_sg</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>) { ; }", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_BLK_DEV_IDEDMA */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_IDEACPI\">CONFIG_BLK_DEV_IDEACPI</a>", 
"int <a class=\"id\" href=\"#ide_acpi_init\">ide_acpi_init</a>(void);", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ide_port_acpi\">ide_port_acpi</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"extern int <a class=\"id\" href=\"#ide_acpi_exec_tfs\">ide_acpi_exec_tfs</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>);", 
"extern void <a class=\"id\" href=\"#ide_acpi_get_timing\">ide_acpi_get_timing</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"extern void <a class=\"id\" href=\"#ide_acpi_push_timing\">ide_acpi_push_timing</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"void <a class=\"id\" href=\"#ide_acpi_init_port\">ide_acpi_init_port</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"void <a class=\"id\" href=\"#ide_acpi_port_init_devices\">ide_acpi_port_init_devices</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"extern void <a class=\"id\" href=\"#ide_acpi_set_state\">ide_acpi_set_state</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>, int <a class=\"id\" href=\"#on\">on</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ide_acpi_init\">ide_acpi_init</a>(void) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ide_port_acpi\">ide_port_acpi</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ide_acpi_exec_tfs\">ide_acpi_exec_tfs</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_acpi_get_timing\">ide_acpi_get_timing</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_acpi_push_timing\">ide_acpi_push_timing</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_acpi_init_port\">ide_acpi_init_port</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_acpi_port_init_devices\">ide_acpi_port_init_devices</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_acpi_set_state\">ide_acpi_set_state</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>, int <a class=\"id\" href=\"#on\">on</a>) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#ide_register_region\">ide_register_region</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *);", 
"void <a class=\"id\" href=\"#ide_unregister_region\">ide_unregister_region</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *);", 
"", 
"void <a class=\"id\" href=\"#ide_check_nien_quirk_list\">ide_check_nien_quirk_list</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"void <a class=\"id\" href=\"#ide_undecoded_slave\">ide_undecoded_slave</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"", 
"void <a class=\"id\" href=\"#ide_port_apply_params\">ide_port_apply_params</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"int <a class=\"id\" href=\"#ide_sysfs_register_port\">ide_sysfs_register_port</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"", 
"struct <a class=\"id\" href=\"#ide_host\">ide_host</a> *<a class=\"id\" href=\"#ide_host_alloc\">ide_host_alloc</a>(const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *, struct <a class=\"id\" href=\"#ide_hw\">ide_hw</a> **,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int);", 
"void <a class=\"id\" href=\"#ide_host_free\">ide_host_free</a>(struct <a class=\"id\" href=\"#ide_host\">ide_host</a> *);", 
"int <a class=\"id\" href=\"#ide_host_register\">ide_host_register</a>(struct <a class=\"id\" href=\"#ide_host\">ide_host</a> *, const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ide_hw\">ide_hw</a> **);", 
"int <a class=\"id\" href=\"#ide_host_add\">ide_host_add</a>(const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *, struct <a class=\"id\" href=\"#ide_hw\">ide_hw</a> **, unsigned int,", 
"<span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ide_host\">ide_host</a> **);", 
"void <a class=\"id\" href=\"#ide_host_remove\">ide_host_remove</a>(struct <a class=\"id\" href=\"#ide_host\">ide_host</a> *);", 
"int <a class=\"id\" href=\"#ide_legacy_device_add\">ide_legacy_device_add</a>(const struct <a class=\"id\" href=\"#ide_port_info\">ide_port_info</a> *, unsigned long);", 
"void <a class=\"id\" href=\"#ide_port_unregister_devices\">ide_port_unregister_devices</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"void <a class=\"id\" href=\"#ide_port_scan\">ide_port_scan</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#ide_get_hwifdata\">ide_get_hwifdata</a> (<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> * <a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#hwif_data\">hwif_data</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_set_hwifdata\">ide_set_hwifdata</a> (<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> * <a class=\"id\" href=\"#hwif\">hwif</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#hwif_data\">hwif_data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#ide_toggle_bounce\">ide_toggle_bounce</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, int <a class=\"id\" href=\"#on\">on</a>);", 
"", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ide_get_lba_addr\">ide_get_lba_addr</a>(struct <a class=\"id\" href=\"#ide_cmd\">ide_cmd</a> *, int);", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ide_dump_status\">ide_dump_status</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, const char *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"", 
"struct <a class=\"id\" href=\"#ide_timing\">ide_timing</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#setup\">setup</a>;<span class=\"ts\"/><span class=\"comment\">/* t1 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#act8b\">act8b</a>;<span class=\"ts\"/><span class=\"comment\">/* t2 for 8-bit io */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#rec8b\">rec8b</a>;<span class=\"ts\"/><span class=\"comment\">/* t2i for 8-bit io */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#cyc8b\">cyc8b</a>;<span class=\"ts\"/><span class=\"comment\">/* t0 for 8-bit io */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#active\">active</a>;<span class=\"ts\"/><span class=\"comment\">/* t2 or tD */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#recover\">recover</a>;<span class=\"ts\"/><span class=\"comment\">/* t2i or tK */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#cycle\">cycle</a>;<span class=\"ts\"/><span class=\"comment\">/* t0 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#udma\">udma</a>;<span class=\"ts\"/><span class=\"comment\">/* t2CYCTYP/2 */</span>", 
"};", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TIMING_SETUP\">IDE_TIMING_SETUP</a><span class=\"ts\"/>= (1 << 0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TIMING_ACT8B\">IDE_TIMING_ACT8B</a><span class=\"ts\"/>= (1 << 1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TIMING_REC8B\">IDE_TIMING_REC8B</a><span class=\"ts\"/>= (1 << 2),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TIMING_CYC8B\">IDE_TIMING_CYC8B</a><span class=\"ts\"/>= (1 << 3),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TIMING_8BIT\">IDE_TIMING_8BIT</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#IDE_TIMING_ACT8B\">IDE_TIMING_ACT8B</a> | <a class=\"id\" href=\"#IDE_TIMING_REC8B\">IDE_TIMING_REC8B</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#IDE_TIMING_CYC8B\">IDE_TIMING_CYC8B</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TIMING_ACTIVE\">IDE_TIMING_ACTIVE</a><span class=\"ts\"/>= (1 << 4),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TIMING_RECOVER\">IDE_TIMING_RECOVER</a><span class=\"ts\"/>= (1 << 5),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TIMING_CYCLE\">IDE_TIMING_CYCLE</a><span class=\"ts\"/>= (1 << 6),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TIMING_UDMA\">IDE_TIMING_UDMA</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 7),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDE_TIMING_ALL\">IDE_TIMING_ALL</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#IDE_TIMING_SETUP\">IDE_TIMING_SETUP</a> | <a class=\"id\" href=\"#IDE_TIMING_8BIT\">IDE_TIMING_8BIT</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#IDE_TIMING_ACTIVE\">IDE_TIMING_ACTIVE</a> | <a class=\"id\" href=\"#IDE_TIMING_RECOVER\">IDE_TIMING_RECOVER</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#IDE_TIMING_CYCLE\">IDE_TIMING_CYCLE</a> | <a class=\"id\" href=\"#IDE_TIMING_UDMA\">IDE_TIMING_UDMA</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ide_timing\">ide_timing</a> *<a class=\"id\" href=\"#ide_timing_find_mode\">ide_timing_find_mode</a>(<a class=\"id\" href=\"#u8\">u8</a>);", 
"<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#ide_pio_cycle_time\">ide_pio_cycle_time</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"void <a class=\"id\" href=\"#ide_timing_merge\">ide_timing_merge</a>(struct <a class=\"id\" href=\"#ide_timing\">ide_timing</a> *, struct <a class=\"id\" href=\"#ide_timing\">ide_timing</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ide_timing\">ide_timing</a> *, unsigned int);", 
"int <a class=\"id\" href=\"#ide_timing_compute\">ide_timing_compute</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, <a class=\"id\" href=\"#u8\">u8</a>, struct <a class=\"id\" href=\"#ide_timing\">ide_timing</a> *, int, int);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IDE_XFER_MODE\">CONFIG_IDE_XFER_MODE</a>", 
"int <a class=\"id\" href=\"#ide_scan_pio_blacklist\">ide_scan_pio_blacklist</a>(char *);", 
"const char *<a class=\"id\" href=\"#ide_xfer_verbose\">ide_xfer_verbose</a>(<a class=\"id\" href=\"#u8\">u8</a>);", 
"int <a class=\"id\" href=\"#ide_pio_need_iordy\">ide_pio_need_iordy</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, const <a class=\"id\" href=\"#u8\">u8</a>);", 
"int <a class=\"id\" href=\"#ide_set_pio_mode\">ide_set_pio_mode</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"int <a class=\"id\" href=\"#ide_set_dma_mode\">ide_set_dma_mode</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"void <a class=\"id\" href=\"#ide_set_pio\">ide_set_pio</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"int <a class=\"id\" href=\"#ide_set_xfer_rate\">ide_set_xfer_rate</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *, <a class=\"id\" href=\"#u8\">u8</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_set_pio\">ide_set_pio</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pio\">pio</a>) { ; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ide_set_xfer_rate\">ide_set_xfer_rate</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#rate\">rate</a>) { return -1; }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_set_max_pio\">ide_set_max_pio</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_set_pio\">ide_set_pio</a>(<a class=\"id\" href=\"#drive\">drive</a>, 255);", 
"}", 
"", 
"char *<a class=\"id\" href=\"#ide_media_string\">ide_media_string</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *);", 
"", 
"extern struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> <a class=\"id\" href=\"#ide_dev_attrs\">ide_dev_attrs</a>[];", 
"extern struct <a class=\"id\" href=\"#bus_type\">bus_type</a> <a class=\"id\" href=\"#ide_bus_type\">ide_bus_type</a>;", 
"extern struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#ide_port_class\">ide_port_class</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_dump_identify\">ide_dump_identify</a>(<a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_hex_dump\">print_hex_dump</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, \"\", <a class=\"id\" href=\"#DUMP_PREFIX_NONE\">DUMP_PREFIX_NONE</a>, 16, 2, <a class=\"id\" href=\"#id\">id</a>, 512, 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hwif_to_node\">hwif_to_node</a>(<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#dev\">dev</a> ? <a class=\"id\" href=\"#dev_to_node\">dev_to_node</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#dev\">dev</a>) : -1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#ide_get_pair_dev\">ide_get_pair_dev</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#peer\">peer</a> = <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#devices\">devices</a>[(<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#dn\">dn</a> ^ 1) &amp; 1];", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#peer\">peer</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a>) ? <a class=\"id\" href=\"#peer\">peer</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#ide_get_drivedata\">ide_get_drivedata</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#drive_data\">drive_data</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ide_set_drivedata\">ide_set_drivedata</a>(<a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a> *<a class=\"id\" href=\"#drive\">drive</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#drive_data\">drive_data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_port_for_each_dev\">ide_port_for_each_dev</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#port\">port</a>) \\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#i\">i</a>) = 0; ((<a class=\"id\" href=\"#dev\">dev</a>) = (<a class=\"id\" href=\"#port\">port</a>)-><a class=\"id\" href=\"#devices\">devices</a>[<a class=\"id\" href=\"#i\">i</a>]) || (<a class=\"id\" href=\"#i\">i</a>) &lt; <a class=\"id\" href=\"#MAX_DRIVES\">MAX_DRIVES</a>; (<a class=\"id\" href=\"#i\">i</a>)++)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_port_for_each_present_dev\">ide_port_for_each_present_dev</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#port\">port</a>) \\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#i\">i</a>) = 0; ((<a class=\"id\" href=\"#dev\">dev</a>) = (<a class=\"id\" href=\"#port\">port</a>)-><a class=\"id\" href=\"#devices\">devices</a>[<a class=\"id\" href=\"#i\">i</a>]) || (<a class=\"id\" href=\"#i\">i</a>) &lt; <a class=\"id\" href=\"#MAX_DRIVES\">MAX_DRIVES</a>; (<a class=\"id\" href=\"#i\">i</a>)++) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#IDE_DFLAG_PRESENT\">IDE_DFLAG_PRESENT</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ide_host_for_each_port\">ide_host_for_each_port</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#port\">port</a>, <a class=\"id\" href=\"#host\">host</a>) \\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#i\">i</a>) = 0; ((<a class=\"id\" href=\"#port\">port</a>) = (<a class=\"id\" href=\"#host\">host</a>)-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>]) || (<a class=\"id\" href=\"#i\">i</a>) &lt; <a class=\"id\" href=\"#MAX_HOST_PORTS\">MAX_HOST_PORTS</a>; (<a class=\"id\" href=\"#i\">i</a>)++)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _IDE_H */</span>", 
];
xr_frag_insert('l/9f/be82355d06e49d75df18ea5a2cd56434bfb3ee.xr', __xr_tmp);
