var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Implementation of the diskquota system for the LINUX operating system. QUOTA</span>", 
"<span class=\"comment\"> * is implemented using the BSD system call interface as the means of</span>", 
"<span class=\"comment\"> * communication with the user level. This file contains the generic routines</span>", 
"<span class=\"comment\"> * called by the different filesystems on allocation of an inode or block.</span>", 
"<span class=\"comment\"> * These routines take care of the administration needed to have a consistent</span>", 
"<span class=\"comment\"> * diskquota tracking system. The ideas of both user and group quotas are based</span>", 
"<span class=\"comment\"> * on the Melbourne quota system as used on BSD derived systems. The internal</span>", 
"<span class=\"comment\"> * implementation is based on one of the several variants of the LINUX</span>", 
"<span class=\"comment\"> * inode-subsystem with added complexity of the diskquota system.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * Author:<span class=\"ts\"/>Marco van Wieringen &lt;mvw@planets.elm.net&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fixes:   Dmitry Gorodchanin &lt;pgmdsg@ibi.com&gt;, 11 Feb 96</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Revised list management to avoid races</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>-- Bill Hawes, &lt;whawes@star.net&gt;, 9/98</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Fixed races in dquot_transfer(), dqget() and dquot_alloc_...().</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>As the consequence the locking was moved from dquot_decr_...(),</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>dquot_incr_...() to calling functions.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>invalidate_dquots() now writes modified dquots.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Serialized quota_off() and quota_on() for mount point.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Fixed a few bugs in grow_dquots().</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Fixed deadlock in write_dquot() - we no longer account quotas on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>quota files</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>remove_dquot_ref() moved to inode.c - it now traverses through inodes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>add_dquot_ref() restarts after blocking</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Added check for bogus uid and fixed check for group in quotactl.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Jan Kara, &lt;jack@suse.cz&gt;, sponsored by SuSE CR, 10-11/99</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Used struct list_head instead of own list struct</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Invalidation of referenced dquots is no longer possible</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Improved free_dquots list management</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Quota and i_blocks are now updated in one place to avoid races</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Warnings are now delayed so we won't block in critical section</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Write updated not to require dquot lock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Jan Kara, &lt;jack@suse.cz&gt;, 9/2000</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Added dynamic quota structure allocation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Jan Kara &lt;jack@suse.cz&gt; 12/2000</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Rewritten quota interface. Implemented new quota format and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>formats registering.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Jan Kara, &lt;jack@suse.cz&gt;, 2001,2002</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>New SMP locking.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Jan Kara, &lt;jack@suse.cz&gt;, 10/2002</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Added journalled quota support, fix lock inversion problems</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Jan Kara, &lt;jack@suse.cz&gt;, 2003,2004</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) Copyright 1994 - 1997 Marco van Wieringen </span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fcntl\">fcntl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stat\">stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty\">tty</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmod\">kmod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#quotaops\">quotaops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* for inode_lock, oddly enough.. */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * There are three quota SMP locks. dq_list_lock protects all lists with quotas</span>", 
"<span class=\"comment\"> * and quota formats.</span>", 
"<span class=\"comment\"> * dq_data_lock protects data from dq_dqb and also mem_dqinfo structures and</span>", 
"<span class=\"comment\"> * also guards consistency of dquot-&gt;dq_dqb with inode-&gt;i_blocks, i_bytes.</span>", 
"<span class=\"comment\"> * i_blocks and i_bytes updates itself are guarded by i_lock acquired directly</span>", 
"<span class=\"comment\"> * in inode_add_bytes() and inode_sub_bytes(). dq_state_lock protects</span>", 
"<span class=\"comment\"> * modifications of quota state (on quotaon and quotaoff) and readers who care</span>", 
"<span class=\"comment\"> * about latest values take it as well.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The spinlock ordering is hence: dq_data_lock &gt; dq_list_lock &gt; i_lock,</span>", 
"<span class=\"comment\"> *   dq_list_lock &gt; dq_state_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that some things (eg. sb pointer, type, id) doesn't change during</span>", 
"<span class=\"comment\"> * the life of the dquot structure and so needn't to be protected by a lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Any operation working on dquots via inode pointers must hold dqptr_sem.  If</span>", 
"<span class=\"comment\"> * operation is just reading pointers from inode (or not using them at all) the</span>", 
"<span class=\"comment\"> * read lock is enough. If pointers are altered function must hold write lock.</span>", 
"<span class=\"comment\"> * Special care needs to be taken about S_NOQUOTA inode flag (marking that</span>", 
"<span class=\"comment\"> * inode is a quota file). Functions adding pointers from inode to dquots have</span>", 
"<span class=\"comment\"> * to check this flag under dqptr_sem and then (if S_NOQUOTA is not set) they</span>", 
"<span class=\"comment\"> * have to do all pointer modifications before dropping dqptr_sem. This makes</span>", 
"<span class=\"comment\"> * sure they cannot race with quotaon which first sets S_NOQUOTA flag and</span>", 
"<span class=\"comment\"> * then drops all pointers to dquots from an inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each dquot has its dq_lock mutex. Locked dquots might not be referenced</span>", 
"<span class=\"comment\"> * from inodes (dquot_alloc_space() and such don't check the dq_lock).</span>", 
"<span class=\"comment\"> * Currently dquot is locked only when it is being read to memory (or space for</span>", 
"<span class=\"comment\"> * it is being allocated) on the first dqget() and when it is being released on</span>", 
"<span class=\"comment\"> * the last dqput(). The allocation and release oparations are serialized by</span>", 
"<span class=\"comment\"> * the dq_lock and by checking the use count in dquot_release().  Write</span>", 
"<span class=\"comment\"> * operations on dquots don't hold dq_lock as they copy data under dq_data_lock</span>", 
"<span class=\"comment\"> * spinlock to internal buffers before writing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock ordering (including related VFS locks) is the following:</span>", 
"<span class=\"comment\"> *   i_mutex &gt; dqonoff_sem &gt; journal_lock &gt; dqptr_sem &gt; dquot-&gt;dq_lock &gt;</span>", 
"<span class=\"comment\"> *   dqio_mutex</span>", 
"<span class=\"comment\"> * The lock ordering of dqptr_sem imposed by quota code is only dqonoff_sem &gt;</span>", 
"<span class=\"comment\"> * dqptr_sem. But filesystem has to count with the fact that functions such as</span>", 
"<span class=\"comment\"> * dquot_alloc_space() acquire dqptr_sem and they usually have to be called</span>", 
"<span class=\"comment\"> * from inside a transaction to keep filesystem consistency after a crash. Also</span>", 
"<span class=\"comment\"> * filesystems usually want to do some IO on dquot from -&gt;mark_dirty which is</span>", 
"<span class=\"comment\"> * called with dqptr_sem held.</span>", 
"<span class=\"comment\"> * i_mutex on quota files is special (it's below dqio_mutex)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#__cacheline_aligned_in_smp\">__cacheline_aligned_in_smp</a> <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"static <a class=\"id\" href=\"#__cacheline_aligned_in_smp\">__cacheline_aligned_in_smp</a> <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#dq_state_lock\">dq_state_lock</a>);", 
"<a class=\"id\" href=\"#__cacheline_aligned_in_smp\">__cacheline_aligned_in_smp</a> <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#dq_data_lock\">dq_data_lock</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dq_data_lock\">dq_data_lock</a>);", 
"", 
"void <a class=\"id\" href=\"#__quota_error\">__quota_error</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, const char *<a class=\"id\" href=\"#func\">func</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Quota error (device %s): %s: \",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_id\">s_id</a>, <a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vprintk\">vprintk</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__quota_error\">__quota_error</a>);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_QUOTA_DEBUG\">CONFIG_QUOTA_DEBUG</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PRINT_QUOTA_WARNING\">CONFIG_PRINT_QUOTA_WARNING</a>)", 
"static char *<a class=\"id\" href=\"#quotatypes\">quotatypes</a>[] = <a class=\"id\" href=\"#INITQFNAMES\">INITQFNAMES</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"static struct <a class=\"id\" href=\"#quota_format_type\">quota_format_type</a> *<a class=\"id\" href=\"#quota_formats\">quota_formats</a>;<span class=\"ts\"/><span class=\"comment\">/* List of registered formats */</span>", 
"static struct <a class=\"id\" href=\"#quota_module_name\">quota_module_name</a> <a class=\"id\" href=\"#module_names\">module_names</a>[] = <a class=\"id\" href=\"#INIT_QUOTA_MODULE_NAMES\">INIT_QUOTA_MODULE_NAMES</a>;", 
"", 
"<span class=\"comment\">/* SLAB cache for dquot structures */</span>", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#dquot_cachep\">dquot_cachep</a>;", 
"", 
"int <a class=\"id\" href=\"#register_quota_format\">register_quota_format</a>(struct <a class=\"id\" href=\"#quota_format_type\">quota_format_type</a> *<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fmt\">fmt</a>-><a class=\"id\" href=\"#qf_next\">qf_next</a> = <a class=\"id\" href=\"#quota_formats\">quota_formats</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#quota_formats\">quota_formats</a> = <a class=\"id\" href=\"#fmt\">fmt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_quota_format\">register_quota_format</a>);", 
"", 
"void <a class=\"id\" href=\"#unregister_quota_format\">unregister_quota_format</a>(struct <a class=\"id\" href=\"#quota_format_type\">quota_format_type</a> *<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#quota_format_type\">quota_format_type</a> **<a class=\"id\" href=\"#actqf\">actqf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#actqf\">actqf</a> = &amp;<a class=\"id\" href=\"#quota_formats\">quota_formats</a>; *<a class=\"id\" href=\"#actqf\">actqf</a> && *<a class=\"id\" href=\"#actqf\">actqf</a> != <a class=\"id\" href=\"#fmt\">fmt</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#actqf\">actqf</a> = &amp;(*<a class=\"id\" href=\"#actqf\">actqf</a>)-><a class=\"id\" href=\"#qf_next\">qf_next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#actqf\">actqf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#actqf\">actqf</a> = (*<a class=\"id\" href=\"#actqf\">actqf</a>)-><a class=\"id\" href=\"#qf_next\">qf_next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_quota_format\">unregister_quota_format</a>);", 
"", 
"static struct <a class=\"id\" href=\"#quota_format_type\">quota_format_type</a> *<a class=\"id\" href=\"#find_quota_format\">find_quota_format</a>(int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#quota_format_type\">quota_format_type</a> *<a class=\"id\" href=\"#actqf\">actqf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#actqf\">actqf</a> = <a class=\"id\" href=\"#quota_formats\">quota_formats</a>; <a class=\"id\" href=\"#actqf\">actqf</a> && <a class=\"id\" href=\"#actqf\">actqf</a>-><a class=\"id\" href=\"#qf_fmt_id\">qf_fmt_id</a> != <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#actqf\">actqf</a> = <a class=\"id\" href=\"#actqf\">actqf</a>-><a class=\"id\" href=\"#qf_next\">qf_next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#actqf\">actqf</a> || !<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#actqf\">actqf</a>-><a class=\"id\" href=\"#qf_owner\">qf_owner</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#qm\">qm</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#qm\">qm</a> = 0; <a class=\"id\" href=\"#module_names\">module_names</a>[<a class=\"id\" href=\"#qm\">qm</a>].<a class=\"id\" href=\"#qm_fmt_id\">qm_fmt_id</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#module_names\">module_names</a>[<a class=\"id\" href=\"#qm\">qm</a>].<a class=\"id\" href=\"#qm_fmt_id\">qm_fmt_id</a> != <a class=\"id\" href=\"#id\">id</a>; <a class=\"id\" href=\"#qm\">qm</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#module_names\">module_names</a>[<a class=\"id\" href=\"#qm\">qm</a>].<a class=\"id\" href=\"#qm_fmt_id\">qm_fmt_id</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#request_module\">request_module</a>(<a class=\"id\" href=\"#module_names\">module_names</a>[<a class=\"id\" href=\"#qm\">qm</a>].<a class=\"id\" href=\"#qm_mod_name\">qm_mod_name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#actqf\">actqf</a> = <a class=\"id\" href=\"#quota_formats\">quota_formats</a>; <a class=\"id\" href=\"#actqf\">actqf</a> && <a class=\"id\" href=\"#actqf\">actqf</a>-><a class=\"id\" href=\"#qf_fmt_id\">qf_fmt_id</a> != <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#actqf\">actqf</a> = <a class=\"id\" href=\"#actqf\">actqf</a>-><a class=\"id\" href=\"#qf_next\">qf_next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#actqf\">actqf</a> && !<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#actqf\">actqf</a>-><a class=\"id\" href=\"#qf_owner\">qf_owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#actqf\">actqf</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#actqf\">actqf</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#put_quota_format\">put_quota_format</a>(struct <a class=\"id\" href=\"#quota_format_type\">quota_format_type</a> *<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#fmt\">fmt</a>-><a class=\"id\" href=\"#qf_owner\">qf_owner</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Dquot List Management:</span>", 
"<span class=\"comment\"> * The quota code uses three lists for dquot management: the inuse_list,</span>", 
"<span class=\"comment\"> * free_dquots, and dquot_hash[] array. A single dquot structure may be</span>", 
"<span class=\"comment\"> * on all three lists, depending on its current state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All dquots are placed to the end of inuse_list when first created, and this</span>", 
"<span class=\"comment\"> * list is used for invalidate operation, which must look at every dquot.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unused dquots (dq_count == 0) are added to the free_dquots list when freed,</span>", 
"<span class=\"comment\"> * and this list is searched whenever we need an available dquot.  Dquots are</span>", 
"<span class=\"comment\"> * removed from the list as soon as they are used again, and</span>", 
"<span class=\"comment\"> * dqstats.free_dquots gives the number of dquots on the list. When</span>", 
"<span class=\"comment\"> * dquot is invalidated it's completely released from memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Dquots with a specific identity (device, type and id) are placed on</span>", 
"<span class=\"comment\"> * one of the dquot_hash[] hash chains. The provides an efficient search</span>", 
"<span class=\"comment\"> * mechanism to locate a specific dquot.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#inuse_list\">inuse_list</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#free_dquots\">free_dquots</a>);", 
"static unsigned int <a class=\"id\" href=\"#dq_hash_bits\">dq_hash_bits</a>, <a class=\"id\" href=\"#dq_hash_mask\">dq_hash_mask</a>;", 
"static struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#dquot_hash\">dquot_hash</a>;", 
"", 
"struct <a class=\"id\" href=\"#dqstats\">dqstats</a> <a class=\"id\" href=\"#dqstats\">dqstats</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dqstats\">dqstats</a>);", 
"", 
"static <a class=\"id\" href=\"#qsize_t\">qsize_t</a> <a class=\"id\" href=\"#inode_get_rsv_space\">inode_get_rsv_space</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"static void <a class=\"id\" href=\"#__dquot_initialize\">__dquot_initialize</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#type\">type</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int", 
"<a class=\"id\" href=\"#hashfn\">hashfn</a>(const struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, unsigned int <a class=\"id\" href=\"#id\">id</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = (((unsigned long)<a class=\"id\" href=\"#sb\">sb</a>>><a class=\"id\" href=\"#L1_CACHE_SHIFT\">L1_CACHE_SHIFT</a>) ^ <a class=\"id\" href=\"#id\">id</a>) * (<a class=\"id\" href=\"#MAXQUOTAS\">MAXQUOTAS</a> - <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#tmp\">tmp</a> + (<a class=\"id\" href=\"#tmp\">tmp</a> >> <a class=\"id\" href=\"#dq_hash_bits\">dq_hash_bits</a>)) &amp; <a class=\"id\" href=\"#dq_hash_mask\">dq_hash_mask</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Following list functions expect dq_list_lock to be held</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#insert_dquot_hash\">insert_dquot_hash</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#dquot_hash\">dquot_hash</a> + <a class=\"id\" href=\"#hashfn\">hashfn</a>(<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>, <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_id\">dq_id</a>, <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_hash\">dq_hash</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#remove_dquot_hash\">remove_dquot_hash</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_init\">hlist_del_init</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_hash\">dq_hash</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#find_dquot\">find_dquot</a>(unsigned int <a class=\"id\" href=\"#hashent\">hashent</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#id\">id</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each\">hlist_for_each</a> (<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#dquot_hash\">dquot_hash</a>+<a class=\"id\" href=\"#hashent\">hashent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a> = <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#dquot\">dquot</a>, <a class=\"id\" href=\"#dq_hash\">dq_hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a> == <a class=\"id\" href=\"#sb\">sb</a> && <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_id\">dq_id</a> == <a class=\"id\" href=\"#id\">id</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a> == <a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dquot\">dquot</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Add a dquot to the tail of the free list */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#put_dquot_last\">put_dquot_last</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_free\">dq_free</a>, &amp;<a class=\"id\" href=\"#free_dquots\">free_dquots</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dqstats_inc\">dqstats_inc</a>(<a class=\"id\" href=\"#DQST_FREE_DQUOTS\">DQST_FREE_DQUOTS</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#remove_free_dquot\">remove_free_dquot</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_free\">dq_free</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_free\">dq_free</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dqstats_dec\">dqstats_dec</a>(<a class=\"id\" href=\"#DQST_FREE_DQUOTS\">DQST_FREE_DQUOTS</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#put_inuse\">put_inuse</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* We add to the back of inuse list so we don't have to restart</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when traversing this list and we block */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_inuse\">dq_inuse</a>, &amp;<a class=\"id\" href=\"#inuse_list\">inuse_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dqstats_inc\">dqstats_inc</a>(<a class=\"id\" href=\"#DQST_ALLOC_DQUOTS\">DQST_ALLOC_DQUOTS</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#remove_inuse\">remove_inuse</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dqstats_dec\">dqstats_dec</a>(<a class=\"id\" href=\"#DQST_ALLOC_DQUOTS\">DQST_ALLOC_DQUOTS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_inuse\">dq_inuse</a>);", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * End of list functions needing dq_list_lock</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#wait_on_dquot\">wait_on_dquot</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_lock\">dq_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_lock\">dq_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#dquot_dirty\">dquot_dirty</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DQ_MOD_B\">DQ_MOD_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mark_dquot_dirty\">mark_dquot_dirty</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>-><a class=\"id\" href=\"#dq_op\">dq_op</a>-><a class=\"id\" href=\"#mark_dirty\">mark_dirty</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Mark dquot dirty in atomic manner, and return it's old dirty flag state */</span>", 
"int <a class=\"id\" href=\"#dquot_mark_dquot_dirty\">dquot_mark_dquot_dirty</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If quota is dirty already, we don't have to acquire dq_list_lock */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DQ_MOD_B\">DQ_MOD_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#DQ_MOD_B\">DQ_MOD_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dirty\">dq_dirty</a>, &amp;<a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>)->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>[<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>].<a class=\"id\" href=\"#dqi_dirty_list\">dqi_dirty_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dquot_mark_dquot_dirty\">dquot_mark_dquot_dirty</a>);", 
"", 
"<span class=\"comment\">/* Dirtify all the dquots - this can block when journalling */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mark_all_dquot_dirty\">mark_all_dquot_dirty</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> * const *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cnt\">cnt</a> = 0; <a class=\"id\" href=\"#cnt\">cnt</a> &lt; <a class=\"id\" href=\"#MAXQUOTAS\">MAXQUOTAS</a>; <a class=\"id\" href=\"#cnt\">cnt</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dquot\">dquot</a>[<a class=\"id\" href=\"#cnt\">cnt</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Even in case of error we have to continue */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mark_dquot_dirty\">mark_dquot_dirty</a>(<a class=\"id\" href=\"#dquot\">dquot</a>[<a class=\"id\" href=\"#cnt\">cnt</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dqput_all\">dqput_all</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> **<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cnt\">cnt</a> = 0; <a class=\"id\" href=\"#cnt\">cnt</a> &lt; <a class=\"id\" href=\"#MAXQUOTAS\">MAXQUOTAS</a>; <a class=\"id\" href=\"#cnt\">cnt</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dqput\">dqput</a>(<a class=\"id\" href=\"#dquot\">dquot</a>[<a class=\"id\" href=\"#cnt\">cnt</a>]);", 
"}", 
"", 
"<span class=\"comment\">/* This function needs dq_list_lock */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#clear_dquot_dirty\">clear_dquot_dirty</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#DQ_MOD_B\">DQ_MOD_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dirty\">dq_dirty</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"void <a class=\"id\" href=\"#mark_info_dirty\">mark_info_dirty</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#DQF_INFO_DIRTY_B\">DQF_INFO_DIRTY_B</a>, &amp;<a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#info\">info</a>[<a class=\"id\" href=\"#type\">type</a>].<a class=\"id\" href=\"#dqi_flags\">dqi_flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mark_info_dirty\">mark_info_dirty</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Read dquot from disk and alloc space for it</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#dquot_acquire\">dquot_acquire</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#ret2\">ret2</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#quota_info\">quota_info</a> *<a class=\"id\" href=\"#dqopt\">dqopt</a> = <a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_lock\">dq_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#dqio_mutex\">dqio_mutex</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DQ_READ_B\">DQ_READ_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#ops\">ops</a>[<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>]-><a class=\"id\" href=\"#read_dqblk\">read_dqblk</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_iolock\">out_iolock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#DQ_READ_B\">DQ_READ_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Instantiate dquot if needed */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DQ_ACTIVE_B\">DQ_ACTIVE_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>) && !<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_off\">dq_off</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#ops\">ops</a>[<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>]-><a class=\"id\" href=\"#commit_dqblk\">commit_dqblk</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Write the info if needed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#info_dirty\">info_dirty</a>(&amp;<a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#info\">info</a>[<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = <a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#ops\">ops</a>[<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>]-><a class=\"id\" href=\"#write_file_info\">write_file_info</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>, <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_iolock\">out_iolock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret2\">ret2</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_iolock\">out_iolock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#DQ_ACTIVE_B\">DQ_ACTIVE_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>);", 
"<a class=\"id\" href=\"#out_iolock\">out_iolock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#dqio_mutex\">dqio_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_lock\">dq_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dquot_acquire\">dquot_acquire</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Write dquot to disk</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dquot_commit\">dquot_commit</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#ret2\">ret2</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#quota_info\">quota_info</a> *<a class=\"id\" href=\"#dqopt\">dqopt</a> = <a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#dqio_mutex\">dqio_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#clear_dquot_dirty\">clear_dquot_dirty</a>(<a class=\"id\" href=\"#dquot\">dquot</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_sem\">out_sem</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Inactive dquot can be only if there was error during read/init</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * =&gt; we have better not writing it */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DQ_ACTIVE_B\">DQ_ACTIVE_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#ops\">ops</a>[<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>]-><a class=\"id\" href=\"#commit_dqblk\">commit_dqblk</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#info_dirty\">info_dirty</a>(&amp;<a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#info\">info</a>[<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = <a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#ops\">ops</a>[<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>]-><a class=\"id\" href=\"#write_file_info\">write_file_info</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>, <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out_sem\">out_sem</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#dqio_mutex\">dqio_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dquot_commit\">dquot_commit</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Release dquot</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dquot_release\">dquot_release</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#ret2\">ret2</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#quota_info\">quota_info</a> *<a class=\"id\" href=\"#dqopt\">dqopt</a> = <a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_lock\">dq_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Check whether we are not racing with some other dqget() */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>) &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_dqlock\">out_dqlock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#dqio_mutex\">dqio_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#ops\">ops</a>[<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>]-><a class=\"id\" href=\"#release_dqblk\">release_dqblk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#ops\">ops</a>[<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>]-><a class=\"id\" href=\"#release_dqblk\">release_dqblk</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Write the info */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#info_dirty\">info_dirty</a>(&amp;<a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#info\">info</a>[<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = <a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#ops\">ops</a>[<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>]-><a class=\"id\" href=\"#write_file_info\">write_file_info</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>, <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#DQ_ACTIVE_B\">DQ_ACTIVE_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#dqio_mutex\">dqio_mutex</a>);", 
"<a class=\"id\" href=\"#out_dqlock\">out_dqlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_lock\">dq_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dquot_release\">dquot_release</a>);", 
"", 
"void <a class=\"id\" href=\"#dquot_destroy\">dquot_destroy</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#dquot_cachep\">dquot_cachep</a>, <a class=\"id\" href=\"#dquot\">dquot</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dquot_destroy\">dquot_destroy</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#do_destroy_dquot\">do_destroy_dquot</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>-><a class=\"id\" href=\"#dq_op\">dq_op</a>-><a class=\"id\" href=\"#destroy_dquot\">destroy_dquot</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Invalidate all dquots on the list. Note that this function is called after</span>", 
"<span class=\"comment\"> * quota is disabled and pointers from inodes removed so there cannot be new</span>", 
"<span class=\"comment\"> * quota users. There can still be some users of quotas due to inodes being</span>", 
"<span class=\"comment\"> * just deleted or pruned by prune_icache() (those are not attached to any</span>", 
"<span class=\"comment\"> * list) or parallel quotactl call. We have to wait for such users.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#invalidate_dquots\">invalidate_dquots</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#dquot\">dquot</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#inuse_list\">inuse_list</a>, <a class=\"id\" href=\"#dq_inuse\">dq_inuse</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a> != <a class=\"id\" href=\"#sb\">sb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a> != <a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Wait for dquot users */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_wait_unused\">dq_wait_unused</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Once dqput() wakes us up, we know it's time to free</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the dquot.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * IMPORTANT: we rely on the fact that there is always</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * at most one process waiting for dquot to free.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Otherwise dq_count would be &gt; 1 and we would never</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * wake up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>) &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_wait_unused\">dq_wait_unused</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dqput\">dqput</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* At this moment dquot() need not exist (it could be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * reclaimed by prune_dqcache(). Hence we must</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * restart. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Quota now has no users and it has been written on last</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * dqput()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_dquot_hash\">remove_dquot_hash</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_free_dquot\">remove_free_dquot</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_inuse\">remove_inuse</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_destroy_dquot\">do_destroy_dquot</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Call callback for every active dquot on given filesystem */</span>", 
"int <a class=\"id\" href=\"#dquot_scan_active\">dquot_scan_active</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int (*<a class=\"id\" href=\"#fn\">fn</a>)(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>, unsigned long <a class=\"id\" href=\"#priv\">priv</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#priv\">priv</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>, *<a class=\"id\" href=\"#old_dquot\">old_dquot</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#dqonoff_mutex\">dqonoff_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dquot\">dquot</a>, &amp;<a class=\"id\" href=\"#inuse_list\">inuse_list</a>, <a class=\"id\" href=\"#dq_inuse\">dq_inuse</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DQ_ACTIVE_B\">DQ_ACTIVE_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a> != <a class=\"id\" href=\"#sb\">sb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Now we have active dquot so we can just increase use count */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dqstats_inc\">dqstats_inc</a>(<a class=\"id\" href=\"#DQST_LOOKUPS\">DQST_LOOKUPS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dqput\">dqput</a>(<a class=\"id\" href=\"#old_dquot\">old_dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_dquot\">old_dquot</a> = <a class=\"id\" href=\"#dquot\">dquot</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#dquot\">dquot</a>, <a class=\"id\" href=\"#priv\">priv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We are safe to continue now because our dquot could not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be moved out of the inuse list while we hold the reference */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dqput\">dqput</a>(<a class=\"id\" href=\"#old_dquot\">old_dquot</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#dqonoff_mutex\">dqonoff_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dquot_scan_active\">dquot_scan_active</a>);", 
"", 
"int <a class=\"id\" href=\"#dquot_quota_sync\">dquot_quota_sync</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#dirty\">dirty</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#quota_info\">quota_info</a> *<a class=\"id\" href=\"#dqopt\">dqopt</a> = <a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#dqonoff_mutex\">dqonoff_mutex</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cnt\">cnt</a> = 0; <a class=\"id\" href=\"#cnt\">cnt</a> &lt; <a class=\"id\" href=\"#MAXQUOTAS\">MAXQUOTAS</a>; <a class=\"id\" href=\"#cnt\">cnt</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != -1 && <a class=\"id\" href=\"#cnt\">cnt</a> != <a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sb_has_quota_active\">sb_has_quota_active</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#cnt\">cnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dirty\">dirty</a> = &amp;<a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#info\">info</a>[<a class=\"id\" href=\"#cnt\">cnt</a>].<a class=\"id\" href=\"#dqi_dirty_list\">dqi_dirty_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#dirty\">dirty</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#dirty\">dirty</a>, struct <a class=\"id\" href=\"#dquot\">dquot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#dq_dirty\">dq_dirty</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Dirty and inactive can be only bad dquot... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DQ_ACTIVE_B\">DQ_ACTIVE_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_dquot_dirty\">clear_dquot_dirty</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Now we have active dquot from which someone is</span>", 
"<span class=\"comment\"> <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * holding reference so we can safely just increase</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * use count */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dqstats_inc\">dqstats_inc</a>(<a class=\"id\" href=\"#DQST_LOOKUPS\">DQST_LOOKUPS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#dq_op\">dq_op</a>-><a class=\"id\" href=\"#write_dquot\">write_dquot</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dqput\">dqput</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cnt\">cnt</a> = 0; <a class=\"id\" href=\"#cnt\">cnt</a> &lt; <a class=\"id\" href=\"#MAXQUOTAS\">MAXQUOTAS</a>; <a class=\"id\" href=\"#cnt\">cnt</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cnt\">cnt</a> == <a class=\"id\" href=\"#type\">type</a> || <a class=\"id\" href=\"#type\">type</a> == -1) && <a class=\"id\" href=\"#sb_has_quota_active\">sb_has_quota_active</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#cnt\">cnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    && <a class=\"id\" href=\"#info_dirty\">info_dirty</a>(&amp;<a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#info\">info</a>[<a class=\"id\" href=\"#cnt\">cnt</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#dq_op\">dq_op</a>-><a class=\"id\" href=\"#write_info\">write_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#cnt\">cnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dqstats_inc\">dqstats_inc</a>(<a class=\"id\" href=\"#DQST_SYNCS\">DQST_SYNCS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dqopt\">dqopt</a>-><a class=\"id\" href=\"#dqonoff_mutex\">dqonoff_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#wait\">wait</a> || (<a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DQUOT_QUOTA_SYS_FILE\">DQUOT_QUOTA_SYS_FILE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This is not very clever (and fast) but currently I don't know about</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any other simple way of getting quota data to disk and we must get</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * them there for userspace to be visible... */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#sync_fs\">sync_fs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#sync_fs\">sync_fs</a>(<a class=\"id\" href=\"#sb\">sb</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_blockdev\">sync_blockdev</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now when everything is written we can discard the pagecache so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that userspace sees the changes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#dqonoff_mutex\">dqonoff_mutex</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cnt\">cnt</a> = 0; <a class=\"id\" href=\"#cnt\">cnt</a> &lt; <a class=\"id\" href=\"#MAXQUOTAS\">MAXQUOTAS</a>; <a class=\"id\" href=\"#cnt\">cnt</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != -1 && <a class=\"id\" href=\"#cnt\">cnt</a> != <a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sb_has_quota_active\">sb_has_quota_active</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#cnt\">cnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock_nested\">mutex_lock_nested</a>(&amp;<a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#files\">files</a>[<a class=\"id\" href=\"#cnt\">cnt</a>]-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#I_MUTEX_QUOTA\">I_MUTEX_QUOTA</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#truncate_inode_pages\">truncate_inode_pages</a>(&amp;<a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#files\">files</a>[<a class=\"id\" href=\"#cnt\">cnt</a>]-><a class=\"id\" href=\"#i_data\">i_data</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#files\">files</a>[<a class=\"id\" href=\"#cnt\">cnt</a>]-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#dqonoff_mutex\">dqonoff_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dquot_quota_sync\">dquot_quota_sync</a>);", 
"", 
"<span class=\"comment\">/* Free unused dquots from cache */</span>", 
"static void <a class=\"id\" href=\"#prune_dqcache\">prune_dqcache</a>(int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#free_dquots\">free_dquots</a>.<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#head\">head</a> != &amp;<a class=\"id\" href=\"#free_dquots\">free_dquots</a> && <a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#dquot\">dquot</a>, <a class=\"id\" href=\"#dq_free\">dq_free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_dquot_hash\">remove_dquot_hash</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_free_dquot\">remove_free_dquot</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_inuse\">remove_inuse</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_destroy_dquot\">do_destroy_dquot</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#free_dquots\">free_dquots</a>.<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is called from kswapd when we think we need some</span>", 
"<span class=\"comment\"> * more memory</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#shrink_dqcache_memory\">shrink_dqcache_memory</a>(struct <a class=\"id\" href=\"#shrinker\">shrinker</a> *<a class=\"id\" href=\"#shrink\">shrink</a>, int <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prune_dqcache\">prune_dqcache</a>(<a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return ((unsigned)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_read_positive\">percpu_counter_read_positive</a>(&amp;<a class=\"id\" href=\"#dqstats\">dqstats</a>.<a class=\"id\" href=\"#counter\">counter</a>[<a class=\"id\" href=\"#DQST_FREE_DQUOTS\">DQST_FREE_DQUOTS</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>/100) * <a class=\"id\" href=\"#sysctl_vfs_cache_pressure\">sysctl_vfs_cache_pressure</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#shrinker\">shrinker</a> <a class=\"id\" href=\"#dqcache_shrinker\">dqcache_shrinker</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#shrink\">shrink</a> = <a class=\"id\" href=\"#shrink_dqcache_memory\">shrink_dqcache_memory</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#seeks\">seeks</a> = <a class=\"id\" href=\"#DEFAULT_SEEKS\">DEFAULT_SEEKS</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Put reference to dquot</span>", 
"<span class=\"comment\"> * NOTE: If you change this function please check whether dqput_blocks() works right...</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dqput\">dqput</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_QUOTA_DEBUG\">CONFIG_QUOTA_DEBUG</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quota_error\">quota_error</a>(<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>, \"trying to free free dquot of %s %d\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#quotatypes\">quotatypes</a>[<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>], <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_id\">dq_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dqstats_inc\">dqstats_inc</a>(<a class=\"id\" href=\"#DQST_DROPS\">DQST_DROPS</a>);", 
"<a class=\"id\" href=\"#we_slept\">we_slept</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>) &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have more than one user... nothing to do */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Releasing dquot during quotaoff phase? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sb_has_quota_active\">sb_has_quota_active</a>(<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>, <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>) == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_wait_unused\">dq_wait_unused</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Need to release dquot? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DQ_ACTIVE_B\">DQ_ACTIVE_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>) && <a class=\"id\" href=\"#dquot_dirty\">dquot_dirty</a>(<a class=\"id\" href=\"#dquot\">dquot</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Commit dquot before releasing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>-><a class=\"id\" href=\"#dq_op\">dq_op</a>-><a class=\"id\" href=\"#write_dquot\">write_dquot</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quota_error\">quota_error</a>(<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>, \"Can't write quota structure\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \" (error %d). Quota may get out of sync!\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We clear dirty bit anyway, so that we avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * infinite loop here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_dquot_dirty\">clear_dquot_dirty</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#we_slept\">we_slept</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear flag in case dquot was inactive (something bad happened) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_dquot_dirty\">clear_dquot_dirty</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DQ_ACTIVE_B\">DQ_ACTIVE_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>-><a class=\"id\" href=\"#dq_op\">dq_op</a>-><a class=\"id\" href=\"#release_dquot\">release_dquot</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#we_slept\">we_slept</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_QUOTA_DEBUG\">CONFIG_QUOTA_DEBUG</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* sanity check */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_free\">dq_free</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_dquot_last\">put_dquot_last</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dqput\">dqput</a>);", 
"", 
"struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot_alloc\">dquot_alloc</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#dquot_cachep\">dquot_cachep</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dquot_alloc\">dquot_alloc</a>);", 
"", 
"static struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#get_empty_dquot\">get_empty_dquot</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#dq_op\">dq_op</a>-><a class=\"id\" href=\"#alloc_dquot\">alloc_dquot</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>if(!<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_lock\">dq_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_free\">dq_free</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_inuse\">dq_inuse</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_hash\">dq_hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dirty\">dq_dirty</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_wait_unused\">dq_wait_unused</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>, 1);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dquot\">dquot</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get reference to dquot</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking is slightly tricky here. We are guarded from parallel quotaoff()</span>", 
"<span class=\"comment\"> * destroying our dquot by:</span>", 
"<span class=\"comment\"> *   a) checking for quota flags under dq_list_lock and</span>", 
"<span class=\"comment\"> *   b) getting a reference to dquot before we release dq_list_lock</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dqget\">dqget</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, unsigned int <a class=\"id\" href=\"#id\">id</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hashent\">hashent</a> = <a class=\"id\" href=\"#hashfn\">hashfn</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#empty\">empty</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"        if (!<a class=\"id\" href=\"#sb_has_quota_active\">sb_has_quota_active</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#type\">type</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#we_slept\">we_slept</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_state_lock\">dq_state_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sb_has_quota_active\">sb_has_quota_active</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#type\">type</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_state_lock\">dq_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_state_lock\">dq_state_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a> = <a class=\"id\" href=\"#find_dquot\">find_dquot</a>(<a class=\"id\" href=\"#hashent\">hashent</a>, <a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dquot\">dquot</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#empty\">empty</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#empty\">empty</a> = <a class=\"id\" href=\"#get_empty_dquot\">get_empty_dquot</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#empty\">empty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();<span class=\"ts\"/><span class=\"comment\">/* Try to wait for a moment... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#we_slept\">we_slept</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a> = <a class=\"id\" href=\"#empty\">empty</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#empty\">empty</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_id\">dq_id</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* all dquots go on the inuse_list */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_inuse\">put_inuse</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hash it first so it can be found */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insert_dquot_hash\">insert_dquot_hash</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dqstats_inc\">dqstats_inc</a>(<a class=\"id\" href=\"#DQST_LOOKUPS\">DQST_LOOKUPS</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_free_dquot\">remove_free_dquot</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dqstats_inc\">dqstats_inc</a>(<a class=\"id\" href=\"#DQST_CACHE_HITS\">DQST_CACHE_HITS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dqstats_inc\">dqstats_inc</a>(<a class=\"id\" href=\"#DQST_LOOKUPS\">DQST_LOOKUPS</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for dq_lock - after this we know that either dquot_release() is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already finished or it will be canceled due to dq_count &gt; 1 test */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_on_dquot\">wait_on_dquot</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Read the dquot / allocate space in quota file */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DQ_ACTIVE_B\">DQ_ACTIVE_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#dq_op\">dq_op</a>-><a class=\"id\" href=\"#acquire_dquot\">acquire_dquot</a>(<a class=\"id\" href=\"#dquot\">dquot</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dqput\">dqput</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_QUOTA_DEBUG\">CONFIG_QUOTA_DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>);<span class=\"ts\"/><span class=\"comment\">/* Has somebody invalidated entry under us? */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#empty\">empty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_destroy_dquot\">do_destroy_dquot</a>(<a class=\"id\" href=\"#empty\">empty</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dquot\">dquot</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dqget\">dqget</a>);", 
"", 
"static int <a class=\"id\" href=\"#dqinit_needed\">dqinit_needed</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_NOQUOTA\">IS_NOQUOTA</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return !<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_dquot\">i_dquot</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cnt\">cnt</a> = 0; <a class=\"id\" href=\"#cnt\">cnt</a> &lt; <a class=\"id\" href=\"#MAXQUOTAS\">MAXQUOTAS</a>; <a class=\"id\" href=\"#cnt\">cnt</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_dquot\">i_dquot</a>[<a class=\"id\" href=\"#cnt\">cnt</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* This routine is guarded by dqonoff_mutex mutex */</span>", 
"static void <a class=\"id\" href=\"#add_dquot_ref\">add_dquot_ref</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, *<a class=\"id\" href=\"#old_inode\">old_inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_QUOTA_DEBUG\">CONFIG_QUOTA_DEBUG</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#reserved\">reserved</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_inodes\">s_inodes</a>, <a class=\"id\" href=\"#i_sb_list\">i_sb_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; (<a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>|<a class=\"id\" href=\"#I_WILL_FREE\">I_WILL_FREE</a>|<a class=\"id\" href=\"#I_NEW\">I_NEW</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_QUOTA_DEBUG\">CONFIG_QUOTA_DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#inode_get_rsv_space\">inode_get_rsv_space</a>(<a class=\"id\" href=\"#inode\">inode</a>) &gt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserved\">reserved</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dqinit_needed\">dqinit_needed</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#type\">type</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__iget\">__iget</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#old_inode\">old_inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dquot_initialize\">__dquot_initialize</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We hold a reference to 'inode' so it couldn't have been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * removed from s_inodes list while we dropped the inode_lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We cannot iput the inode now as we can be holding the last</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reference and we cannot iput it under inode_lock. So we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * keep the reference and iput it later. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_inode\">old_inode</a> = <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#old_inode\">old_inode</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_QUOTA_DEBUG\">CONFIG_QUOTA_DEBUG</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reserved\">reserved</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quota_error\">quota_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, \"Writes happened before quota was turned on \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"thus quota information is probably inconsistent. \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Please run quotacheck(8)\");", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return 0 if dqput() won't block.</span>", 
"<span class=\"comment\"> * (note that 1 doesn't necessarily mean blocking)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#dqput_blocks\">dqput_blocks</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>) <= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove references to dquots from inode and add dquot to list for freeing</span>", 
"<span class=\"comment\"> * if we have the last referece to dquot</span>", 
"<span class=\"comment\"> * We can't race with anybody because we hold dqptr_sem for writing...</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#remove_inode_dquot_ref\">remove_inode_dquot_ref</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tofree_head\">tofree_head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_dquot\">i_dquot</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_dquot\">i_dquot</a>[<a class=\"id\" href=\"#type\">type</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dquot\">dquot</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dqput_blocks\">dqput_blocks</a>(<a class=\"id\" href=\"#dquot\">dquot</a>)) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_QUOTA_DEBUG\">CONFIG_QUOTA_DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>) != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quota_error\">quota_error</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, \"Adding dquot with \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"dq_count %d to dispose list\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_count\">dq_count</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* As dquot must have currently users it can't be on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the free list... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_free\">dq_free</a>, <a class=\"id\" href=\"#tofree_head\">tofree_head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dq_list_lock\">dq_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dqput\">dqput</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);   <span class=\"comment\">/* We have guaranteed we won't block */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free list of dquots</span>", 
"<span class=\"comment\"> * Dquots are removed from inodes and no new references can be got so we are</span>", 
"<span class=\"comment\"> * the only ones holding reference</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#put_dquot_list\">put_dquot_list</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tofree_head\">tofree_head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#act_head\">act_head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#act_head\">act_head</a> = <a class=\"id\" href=\"#tofree_head\">tofree_head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#act_head\">act_head</a> != <a class=\"id\" href=\"#tofree_head\">tofree_head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#act_head\">act_head</a>, struct <a class=\"id\" href=\"#dquot\">dquot</a>, <a class=\"id\" href=\"#dq_free\">dq_free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#act_head\">act_head</a> = <a class=\"id\" href=\"#act_head\">act_head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Remove dquot from the list so we won't have problems... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_free\">dq_free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dqput\">dqput</a>(<a class=\"id\" href=\"#dquot\">dquot</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#remove_dquot_ref\">remove_dquot_ref</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tofree_head\">tofree_head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#reserved\">reserved</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_inodes\">s_inodes</a>, <a class=\"id\" href=\"#i_sb_list\">i_sb_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  We have to scan also I_NEW inodes because they can already</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  have quota pointer initialized. Luckily, we need to touch</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  only quota pointers and these have separate locking</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  (dqptr_sem).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_NOQUOTA\">IS_NOQUOTA</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#inode_get_rsv_space\">inode_get_rsv_space</a>(<a class=\"id\" href=\"#inode\">inode</a>) &gt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserved\">reserved</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_inode_dquot_ref\">remove_inode_dquot_ref</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#tofree_head\">tofree_head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_QUOTA_DEBUG\">CONFIG_QUOTA_DEBUG</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reserved\">reserved</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"VFS (%s): Writes happened after quota\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" was disabled thus quota information is probably \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"inconsistent. Please run quotacheck(8).\\n\", <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_id\">s_id</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/* Gather all references from inodes and drop them */</span>", 
"static void <a class=\"id\" href=\"#drop_dquot_ref\">drop_dquot_ref</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#tofree_head\">tofree_head</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#dq_op\">dq_op</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#dqptr_sem\">dqptr_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_dquot_ref\">remove_dquot_ref</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#type\">type</a>, &amp;<a class=\"id\" href=\"#tofree_head\">tofree_head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#dqptr_sem\">dqptr_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dquot_list\">put_dquot_list</a>(&amp;<a class=\"id\" href=\"#tofree_head\">tofree_head</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dquot_incr_inodes\">dquot_incr_inodes</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>, <a class=\"id\" href=\"#qsize_t\">qsize_t</a> <a class=\"id\" href=\"#number\">number</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_curinodes\">dqb_curinodes</a> += <a class=\"id\" href=\"#number\">number</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dquot_incr_space\">dquot_incr_space</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>, <a class=\"id\" href=\"#qsize_t\">qsize_t</a> <a class=\"id\" href=\"#number\">number</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_curspace\">dqb_curspace</a> += <a class=\"id\" href=\"#number\">number</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dquot_resv_space\">dquot_resv_space</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>, <a class=\"id\" href=\"#qsize_t\">qsize_t</a> <a class=\"id\" href=\"#number\">number</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_rsvspace\">dqb_rsvspace</a> += <a class=\"id\" href=\"#number\">number</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Claim reserved quota space</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dquot_claim_reserved_space\">dquot_claim_reserved_space</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>, <a class=\"id\" href=\"#qsize_t\">qsize_t</a> <a class=\"id\" href=\"#number\">number</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_rsvspace\">dqb_rsvspace</a> &lt; <a class=\"id\" href=\"#number\">number</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#number\">number</a> = <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_rsvspace\">dqb_rsvspace</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_curspace\">dqb_curspace</a> += <a class=\"id\" href=\"#number\">number</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_rsvspace\">dqb_rsvspace</a> -= <a class=\"id\" href=\"#number\">number</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#dquot_free_reserved_space\">dquot_free_reserved_space</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>, <a class=\"id\" href=\"#qsize_t\">qsize_t</a> <a class=\"id\" href=\"#number\">number</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_rsvspace\">dqb_rsvspace</a> >= <a class=\"id\" href=\"#number\">number</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_rsvspace\">dqb_rsvspace</a> -= <a class=\"id\" href=\"#number\">number</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_rsvspace\">dqb_rsvspace</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dquot_decr_inodes\">dquot_decr_inodes</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>, <a class=\"id\" href=\"#qsize_t\">qsize_t</a> <a class=\"id\" href=\"#number\">number</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>)-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DQUOT_NEGATIVE_USAGE\">DQUOT_NEGATIVE_USAGE</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_curinodes\">dqb_curinodes</a> >= <a class=\"id\" href=\"#number\">number</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_curinodes\">dqb_curinodes</a> -= <a class=\"id\" href=\"#number\">number</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_curinodes\">dqb_curinodes</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_curinodes\">dqb_curinodes</a> <= <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_isoftlimit\">dqb_isoftlimit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_itime\">dqb_itime</a> = (<a class=\"id\" href=\"#time_t\">time_t</a>) 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#DQ_INODES_B\">DQ_INODES_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dquot_decr_space\">dquot_decr_space</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>, <a class=\"id\" href=\"#qsize_t\">qsize_t</a> <a class=\"id\" href=\"#number\">number</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb_dqopt\">sb_dqopt</a>(<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>)-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DQUOT_NEGATIVE_USAGE\">DQUOT_NEGATIVE_USAGE</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_curspace\">dqb_curspace</a> >= <a class=\"id\" href=\"#number\">number</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_curspace\">dqb_curspace</a> -= <a class=\"id\" href=\"#number\">number</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_curspace\">dqb_curspace</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_curspace\">dqb_curspace</a> <= <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_bsoftlimit\">dqb_bsoftlimit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_dqb\">dq_dqb</a>.<a class=\"id\" href=\"#dqb_btime\">dqb_btime</a> = (<a class=\"id\" href=\"#time_t\">time_t</a>) 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#DQ_BLKS_B\">DQ_BLKS_B</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#warning_issued\">warning_issued</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>, const int <a class=\"id\" href=\"#warntype\">warntype</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flag\">flag</a> = (<a class=\"id\" href=\"#warntype\">warntype</a> == <a class=\"id\" href=\"#QUOTA_NL_BHARDWARN\">QUOTA_NL_BHARDWARN</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warntype\">warntype</a> == <a class=\"id\" href=\"#QUOTA_NL_BSOFTLONGWARN\">QUOTA_NL_BSOFTLONGWARN</a>) ? <a class=\"id\" href=\"#DQ_BLKS_B\">DQ_BLKS_B</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#warntype\">warntype</a> == <a class=\"id\" href=\"#QUOTA_NL_IHARDWARN\">QUOTA_NL_IHARDWARN</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warntype\">warntype</a> == <a class=\"id\" href=\"#QUOTA_NL_ISOFTLONGWARN\">QUOTA_NL_ISOFTLONGWARN</a>) ? <a class=\"id\" href=\"#DQ_INODES_B\">DQ_INODES_B</a> : 0);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#flag\">flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#flag\">flag</a>, &amp;<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_flags\">dq_flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PRINT_QUOTA_WARNING\">CONFIG_PRINT_QUOTA_WARNING</a>", 
"static int <a class=\"id\" href=\"#flag_print_warnings\">flag_print_warnings</a> = 1;", 
"", 
"static int <a class=\"id\" href=\"#need_print_warning\">need_print_warning</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#flag_print_warnings\">flag_print_warnings</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#USRQUOTA\">USRQUOTA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#current_fsuid\">current_fsuid</a>() == <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_id\">dq_id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#GRPQUOTA\">GRPQUOTA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#in_group_p\">in_group_p</a>(<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_id\">dq_id</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Print warning to user which exceeded quota */</span>", 
"static void <a class=\"id\" href=\"#print_warning\">print_warning</a>(struct <a class=\"id\" href=\"#dquot\">dquot</a> *<a class=\"id\" href=\"#dquot\">dquot</a>, const int <a class=\"id\" href=\"#warntype\">warntype</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#msg\">msg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#warntype\">warntype</a> == <a class=\"id\" href=\"#QUOTA_NL_IHARDBELOW\">QUOTA_NL_IHARDBELOW</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#warntype\">warntype</a> == <a class=\"id\" href=\"#QUOTA_NL_ISOFTBELOW\">QUOTA_NL_ISOFTBELOW</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#warntype\">warntype</a> == <a class=\"id\" href=\"#QUOTA_NL_BHARDBELOW\">QUOTA_NL_BHARDBELOW</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#warntype\">warntype</a> == <a class=\"id\" href=\"#QUOTA_NL_BSOFTBELOW\">QUOTA_NL_BSOFTBELOW</a> || !<a class=\"id\" href=\"#need_print_warning\">need_print_warning</a>(<a class=\"id\" href=\"#dquot\">dquot</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#get_current_tty\">get_current_tty</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tty\">tty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty_write_message\">tty_write_message</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_sb\">dq_sb</a>-><a class=\"id\" href=\"#s_id\">s_id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#warntype\">warntype</a> == <a class=\"id\" href=\"#QUOTA_NL_ISOFTWARN\">QUOTA_NL_ISOFTWARN</a> || <a class=\"id\" href=\"#warntype\">warntype</a> == <a class=\"id\" href=\"#QUOTA_NL_BSOFTWARN\">QUOTA_NL_BSOFTWARN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_write_message\">tty_write_message</a>(<a class=\"id\" href=\"#tty\">tty</a>, \": warning, \");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_write_message\">tty_write_message</a>(<a class=\"id\" href=\"#tty\">tty</a>, \": write failed, \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty_write_message\">tty_write_message</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#quotatypes\">quotatypes</a>[<a class=\"id\" href=\"#dquot\">dquot</a>-><a class=\"id\" href=\"#dq_type\">dq_type</a>]);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#warntype\">warntype</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#QUOTA_NL_IHARDWARN\">QUOTA_NL_IHARDWARN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = \" file limit reached.\\r\\n\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#QUOTA_NL_ISOFTLONGWARN\">QUOTA_NL_ISOFTLONGWARN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = \" file quota exceeded too long.\\r\\n\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#QUOTA_NL_ISOFTWARN\">QUOTA_NL_ISOFTWARN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = \" file quota exceeded.\\r\\n\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#QUOTA_NL_BHARDWARN\">QUOTA_NL_BHARDWARN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = \" block limit reached.\\r\\n\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#QUOTA_NL_BSOFTLONGWARN\">QUOTA_NL_BSOFTLONGWARN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = \" block quota exceeded too long.\\r\\n\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#QUOTA_NL_BSOFTWARN\">QUOTA_NL_BSOFTWARN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a> = \" block quota exceeded.\\r\\n\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty_write_message\">tty_write_message</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#msg\">msg</a>);", 
];
xr_frag_insert('l/a0/2f391620d09884ea06e41dd47797b3e70f3c4b.xr', __xr_tmp);
