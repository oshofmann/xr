var __xr_tmp = [
"<span class=\"comment\">/* Kernel object name space definitions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2002-2003 Patrick Mochel</span>", 
"<span class=\"comment\"> * Copyright (c) 2002-2003 Open Source Development Labs</span>", 
"<span class=\"comment\"> * Copyright (c) 2006-2008 Greg Kroah-Hartman &lt;greg@kroah.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (c) 2006-2008 Novell Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Split from kobject.h by David Howells (dhowells@redhat.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Please read Documentation/kobject.txt before using the kobject</span>", 
"<span class=\"comment\"> * interface, ESPECIALLY the parts about reference counts and object</span>", 
"<span class=\"comment\"> * destructors.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_KOBJECT_NS_H\">_LINUX_KOBJECT_NS_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_KOBJECT_NS_H\">_LINUX_KOBJECT_NS_H</a>", 
"", 
"struct <a class=\"id\" href=\"#sock\">sock</a>;", 
"struct <a class=\"id\" href=\"#kobject\">kobject</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Namespace types which are used to tag kobjects and sysfs entries.</span>", 
"<span class=\"comment\"> * Network namespace will likely be the first.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#kobj_ns_type\">kobj_ns_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KOBJ_NS_TYPE_NONE\">KOBJ_NS_TYPE_NONE</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KOBJ_NS_TYPE_NET\">KOBJ_NS_TYPE_NET</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#KOBJ_NS_TYPES\">KOBJ_NS_TYPES</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Callbacks so sysfs can determine namespaces</span>", 
"<span class=\"comment\"> *   @current_ns: return calling task's namespace</span>", 
"<span class=\"comment\"> *   @netlink_ns: return namespace to which a sock belongs (right?)</span>", 
"<span class=\"comment\"> *   @initial_ns: return the initial namespace (i.e. init_net_ns)</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kobj_ns_type_operations\">kobj_ns_type_operations</a> {", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#kobj_ns_type\">kobj_ns_type</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>const void *(*<a class=\"id\" href=\"#current_ns\">current_ns</a>)(void);", 
"<span class=\"ts\"/>const void *(*<a class=\"id\" href=\"#netlink_ns\">netlink_ns</a>)(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>const void *(*<a class=\"id\" href=\"#initial_ns\">initial_ns</a>)(void);", 
"};", 
"", 
"int <a class=\"id\" href=\"#kobj_ns_type_register\">kobj_ns_type_register</a>(const struct <a class=\"id\" href=\"#kobj_ns_type_operations\">kobj_ns_type_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>);", 
"int <a class=\"id\" href=\"#kobj_ns_type_registered\">kobj_ns_type_registered</a>(enum <a class=\"id\" href=\"#kobj_ns_type\">kobj_ns_type</a> <a class=\"id\" href=\"#type\">type</a>);", 
"const struct <a class=\"id\" href=\"#kobj_ns_type_operations\">kobj_ns_type_operations</a> *<a class=\"id\" href=\"#kobj_child_ns_ops\">kobj_child_ns_ops</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#parent\">parent</a>);", 
"const struct <a class=\"id\" href=\"#kobj_ns_type_operations\">kobj_ns_type_operations</a> *<a class=\"id\" href=\"#kobj_ns_ops\">kobj_ns_ops</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"", 
"const void *<a class=\"id\" href=\"#kobj_ns_current\">kobj_ns_current</a>(enum <a class=\"id\" href=\"#kobj_ns_type\">kobj_ns_type</a> <a class=\"id\" href=\"#type\">type</a>);", 
"const void *<a class=\"id\" href=\"#kobj_ns_netlink\">kobj_ns_netlink</a>(enum <a class=\"id\" href=\"#kobj_ns_type\">kobj_ns_type</a> <a class=\"id\" href=\"#type\">type</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"const void *<a class=\"id\" href=\"#kobj_ns_initial\">kobj_ns_initial</a>(enum <a class=\"id\" href=\"#kobj_ns_type\">kobj_ns_type</a> <a class=\"id\" href=\"#type\">type</a>);", 
"void <a class=\"id\" href=\"#kobj_ns_exit\">kobj_ns_exit</a>(enum <a class=\"id\" href=\"#kobj_ns_type\">kobj_ns_type</a> <a class=\"id\" href=\"#type\">type</a>, const void *<a class=\"id\" href=\"#ns\">ns</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_KOBJECT_NS_H */</span>", 
];
xr_frag_insert('l/a1/1893b891314a409819c6a6006d2a559c05ff81.xr', __xr_tmp);
