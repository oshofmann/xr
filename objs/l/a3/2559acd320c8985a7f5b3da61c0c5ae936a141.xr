var __xr_tmp = [
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#siblings\">siblings</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#children\">children</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#root_task_group\">root_task_group</a> <a class=\"id\" href=\"#init_task_group\">init_task_group</a>", 
"", 
"<span class=\"comment\">/* task_group_lock serializes add/remove of task groups and also changes to</span>", 
"<span class=\"comment\"> * a task group's cpu shares.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#task_group_lock\">task_group_lock</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"static int <a class=\"id\" href=\"#root_task_group_empty\">root_task_group_empty</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#root_task_group\">root_task_group</a>.<a class=\"id\" href=\"#children\">children</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_TASK_GROUP_LOAD\">INIT_TASK_GROUP_LOAD</a><span class=\"ts\"/><a class=\"id\" href=\"#NICE_0_LOAD\">NICE_0_LOAD</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A weight of 0 or 1 can cause arithmetics problems.</span>", 
"<span class=\"comment\"> * A weight of a cfs_rq is the sum of weights of which entities</span>", 
"<span class=\"comment\"> * are queued on this cfs_rq, so a weight of a entity should not be</span>", 
"<span class=\"comment\"> * too large, so as the shares value of a task group.</span>", 
"<span class=\"comment\"> * (The default weight is 1024 - so there's no practical</span>", 
"<span class=\"comment\"> *  limitation from this.)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MIN_SHARES\">MIN_SHARES</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_SHARES\">MAX_SHARES</a><span class=\"ts\"/>(1UL << 18)", 
"", 
"static int <a class=\"id\" href=\"#init_task_group_load\">init_task_group_load</a> = <a class=\"id\" href=\"#INIT_TASK_GROUP_LOAD\">INIT_TASK_GROUP_LOAD</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Default task group.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Every task in system belong to this group at bootup.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#task_group\">task_group</a> <a class=\"id\" href=\"#init_task_group\">init_task_group</a>;", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_CGROUP_SCHED */</span>", 
"", 
"<span class=\"comment\">/* CFS-related fields in a runqueue */</span>", 
"struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#load_weight\">load_weight</a> <a class=\"id\" href=\"#load\">load</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_running\">nr_running</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#exec_clock\">exec_clock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_root\">rb_root</a> <a class=\"id\" href=\"#tasks_timeline\">tasks_timeline</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb_leftmost\">rb_leftmost</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tasks\">tasks</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#balance_iterator\">balance_iterator</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 'curr' points to currently running entity on this cfs_rq.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is set to NULL otherwise (i.e when none are currently running).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#curr\">curr</a>, *<a class=\"id\" href=\"#next\">next</a>, *<a class=\"id\" href=\"#last\">last</a>;", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_spread_over\">nr_spread_over</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;<span class=\"ts\"/><span class=\"comment\">/* cpu runqueue to which this cfs_rq is attached */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * leaf cfs_rqs are those that hold tasks (lowest schedulable entity in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a hierarchy). Non-leaf lrqs hold other higher schedulable entities</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (like users, containers etc.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * leaf_cfs_rq_list ties together list of leaf cfs_rq's in a cpu. This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list is used during load balance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#leaf_cfs_rq_list\">leaf_cfs_rq_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>;<span class=\"ts\"/><span class=\"comment\">/* group that \"owns\" this runqueue */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the part of load.weight contributed by tasks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#task_weight\">task_weight</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   h_load = weight * f(tg)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Where f(tg) is the recursive weight fraction assigned to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#h_load\">h_load</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this cpu's part of tg-&gt;shares</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#shares\">shares</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * load.weight at the time we set shares</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rq_weight\">rq_weight</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/* Real-Time classes' related field in a runqueue: */</span>", 
"struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_prio_array\">rt_prio_array</a> <a class=\"id\" href=\"#active\">active</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rt_nr_running\">rt_nr_running</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a> || <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#curr\">curr</a>; <span class=\"comment\">/* highest queued rt task prio */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#next\">next</a>; <span class=\"comment\">/* next highest */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#highest_prio\">highest_prio</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rt_nr_migratory\">rt_nr_migratory</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rt_nr_total\">rt_nr_total</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#overloaded\">overloaded</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#plist_head\">plist_head</a> <a class=\"id\" href=\"#pushable_tasks\">pushable_tasks</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rt_throttled\">rt_throttled</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rt_time\">rt_time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rt_runtime\">rt_runtime</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Nests inside the rq lock: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> <a class=\"id\" href=\"#rt_runtime_lock\">rt_runtime_lock</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rt_nr_boosted\">rt_nr_boosted</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#leaf_rt_rq_list\">leaf_rt_rq_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We add the notion of a root-domain which will be used to define per-domain</span>", 
"<span class=\"comment\"> * variables. Each exclusive cpuset essentially defines an island domain by</span>", 
"<span class=\"comment\"> * fully partitioning the member cpus from any other cpuset. Whenever a new</span>", 
"<span class=\"comment\"> * exclusive cpuset is created, we also create and attach a new root-domain</span>", 
"<span class=\"comment\"> * object.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#root_domain\">root_domain</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#refcount\">refcount</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#span\">span</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#online\">online</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The \"RT overload\" flag: it gets set if a CPU has more than</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one runnable RT task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#rto_mask\">rto_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#rto_count\">rto_count</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpupri\">cpupri</a> <a class=\"id\" href=\"#cpupri\">cpupri</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * By default the system creates a single root-domain with all cpus as</span>", 
"<span class=\"comment\"> * members (mimicking the global state we have today).</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#root_domain\">root_domain</a> <a class=\"id\" href=\"#def_root_domain\">def_root_domain</a>;", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the main, per-CPU runqueue data structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking rule: those places that want to lock multiple runqueues</span>", 
"<span class=\"comment\"> * (such as the load balancing or the thread migration code), lock</span>", 
"<span class=\"comment\"> * acquire operations must be ordered by ascending &amp;runqueue.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rq\">rq</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* runqueue lock: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nr_running and cpu_load should be in the same cacheline because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * remote CPUs use both these fields when doing load calculation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_running\">nr_running</a>;", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_LOAD_IDX_MAX\">CPU_LOAD_IDX_MAX</a> 5", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cpu_load\">cpu_load</a>[<a class=\"id\" href=\"#CPU_LOAD_IDX_MAX\">CPU_LOAD_IDX_MAX</a>];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#last_load_update_tick\">last_load_update_tick</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nohz_stamp\">nohz_stamp</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#nohz_balance_kick\">nohz_balance_kick</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#skip_clock_update\">skip_clock_update</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* capture load from *all* tasks on this cpu: */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#load_weight\">load_weight</a> <a class=\"id\" href=\"#load\">load</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_load_updates\">nr_load_updates</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nr_switches\">nr_switches</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> <a class=\"id\" href=\"#cfs\">cfs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> <a class=\"id\" href=\"#rt\">rt</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* list of leaf cfs_rq on this cpu: */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#leaf_cfs_rq_list\">leaf_cfs_rq_list</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#leaf_rt_rq_list\">leaf_rt_rq_list</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is part of a global counter where only the total sum</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * over all CPUs matters. A task can increase this counter on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one CPU and if it got migrated afterwards it may decrease</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it on another CPU. Always updated under the runqueue lock:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_uninterruptible\">nr_uninterruptible</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a>, *<a class=\"id\" href=\"#idle\">idle</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next_balance\">next_balance</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#prev_mm\">prev_mm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#clock\">clock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#nr_iowait\">nr_iowait</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#root_domain\">root_domain</a> *<a class=\"id\" href=\"#rd\">rd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cpu_power\">cpu_power</a>;", 
"", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#idle_at_tick\">idle_at_tick</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* For active balancing */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#post_schedule\">post_schedule</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#active_balance\">active_balance</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#push_cpu\">push_cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stop_work\">cpu_stop_work</a> <a class=\"id\" href=\"#active_balance_work\">active_balance_work</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* cpu of this runqueue: */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#online\">online</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#avg_load_per_task\">avg_load_per_task</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rt_avg\">rt_avg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#age_stamp\">age_stamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#idle_stamp\">idle_stamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#avg_idle\">avg_idle</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* calc_load related fields */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#calc_load_update\">calc_load_update</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#calc_load_active\">calc_load_active</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_HRTICK\">CONFIG_SCHED_HRTICK</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hrtick_csd_pending\">hrtick_csd_pending</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a> <a class=\"id\" href=\"#hrtick_csd\">hrtick_csd</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hrtimer\">hrtimer</a> <a class=\"id\" href=\"#hrtick_timer\">hrtick_timer</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* latency stats */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_info\">sched_info</a> <a class=\"id\" href=\"#rq_sched_info\">rq_sched_info</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#rq_cpu_time\">rq_cpu_time</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* could above be rq-&gt;cfs_rq.exec_clock + rq-&gt;rt_rq.rt_runtime ? */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* sys_sched_yield() stats */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#yld_count\">yld_count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* schedule() stats */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sched_switch\">sched_switch</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sched_count\">sched_count</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sched_goidle\">sched_goidle</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* try_to_wake_up() stats */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ttwu_count\">ttwu_count</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ttwu_local\">ttwu_local</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* BKL stats */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bkl_count\">bkl_count</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU_SHARED_ALIGNED\">DEFINE_PER_CPU_SHARED_ALIGNED</a>(struct <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#runqueues\">runqueues</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#check_preempt_curr\">check_preempt_curr</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a>-><a class=\"id\" href=\"#check_preempt_curr\">check_preempt_curr</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A queue event has occurred, and we're going to schedule.  In</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this case, we can save a useless back to back clock update.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_tsk_need_resched\">test_tsk_need_resched</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#skip_clock_update\">skip_clock_update</a> = 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpu_of\">cpu_of</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"#else", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rcu_dereference_check_sched_domain\">rcu_dereference_check_sched_domain</a>(<a class=\"id\" href=\"#p\">p</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>((<a class=\"id\" href=\"#p\">p</a>), \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#rcu_read_lock_sched_held\">rcu_read_lock_sched_held</a>() || \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#lockdep_is_held\">lockdep_is_held</a>(&amp;<a class=\"id\" href=\"#sched_domains_mutex\">sched_domains_mutex</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The domain tree (rq-&gt;sd) is protected by RCU's quiescent state transition.</span>", 
"<span class=\"comment\"> * See detach_destroy_domains: synchronize_sched for details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The domain tree of any CPU may only be accessed from within</span>", 
"<span class=\"comment\"> * preempt-disabled sections.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_domain\">for_each_domain</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#__sd\">__sd</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#__sd\">__sd</a> = <a class=\"id\" href=\"#rcu_dereference_check_sched_domain\">rcu_dereference_check_sched_domain</a>(<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#sd\">sd</a>); <a class=\"id\" href=\"#__sd\">__sd</a>; <a class=\"id\" href=\"#__sd\">__sd</a> = <a class=\"id\" href=\"#__sd\">__sd</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><span class=\"ts\"/>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#runqueues\">runqueues</a>, (<a class=\"id\" href=\"#cpu\">cpu</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#this_rq\">this_rq</a>()<span class=\"ts\"/><span class=\"ts\"/>(&amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#runqueues\">runqueues</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_curr\">cpu_curr</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#curr\">curr</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#raw_rq\">raw_rq</a>()<span class=\"ts\"/><span class=\"ts\"/>(&amp;<a class=\"id\" href=\"#__raw_get_cpu_var\">__raw_get_cpu_var</a>(<a class=\"id\" href=\"#runqueues\">runqueues</a>))", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_SCHED\">CONFIG_CGROUP_SCHED</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the group to which this tasks belongs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We use task_subsys_state_check() and extend the RCU verification</span>", 
"<span class=\"comment\"> * with lockdep_is_held(&amp;task_rq(p)-&gt;lock) because cpu_cgroup_attach()</span>", 
"<span class=\"comment\"> * holds that lock for each task it moves into the cgroup. Therefore</span>", 
"<span class=\"comment\"> * by holding that lock, we pin the task to the current cgroup.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#task_group\">task_group</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css\">css</a> = <a class=\"id\" href=\"#task_subsys_state_check\">task_subsys_state_check</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cpu_cgroup_subsys_id\">cpu_cgroup_subsys_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_is_held\">lockdep_is_held</a>(&amp;<a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#lock\">lock</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#css\">css</a>, struct <a class=\"id\" href=\"#task_group\">task_group</a>, <a class=\"id\" href=\"#css\">css</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Change a task's cfs_rq and parent entity if it moves across CPUs/groups */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_task_rq\">set_task_rq</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#task_group\">task_group</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#task_group\">task_group</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#se\">se</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#rt_rq\">rt_rq</a>  = <a class=\"id\" href=\"#task_group\">task_group</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rt_rq\">rt_rq</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#task_group\">task_group</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rt_se\">rt_se</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#else <span class=\"comment\">/* CONFIG_CGROUP_SCHED */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_task_rq\">set_task_rq</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#task_group\">task_group</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_CGROUP_SCHED */</span>", 
"", 
"<a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#update_rq_clock\">update_rq_clock</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#skip_clock_update\">skip_clock_update</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#clock\">clock</a> = <a class=\"id\" href=\"#sched_clock_cpu\">sched_clock_cpu</a>(<a class=\"id\" href=\"#cpu_of\">cpu_of</a>(<a class=\"id\" href=\"#rq\">rq</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tunables that become constants when CONFIG_SCHED_DEBUG is off:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#const_debug\">const_debug</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#const_debug\">const_debug</a> static const", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * runqueue_is_locked</span>", 
"<span class=\"comment\"> * @cpu: the processor in question.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if the current cpu runqueue is locked.</span>", 
"<span class=\"comment\"> * This interface allows printk to be called with the runqueue lock</span>", 
"<span class=\"comment\"> * held and know whether or not it is OK to wake up the klogd.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#runqueue_is_locked\">runqueue_is_locked</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#raw_spin_is_locked\">raw_spin_is_locked</a>(&amp;<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Debugging: various feature bits</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCHED_FEAT\">SCHED_FEAT</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#enabled\">enabled</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__SCHED_FEAT_\">__SCHED_FEAT_</a>##<a class=\"id\" href=\"#name\">name</a> ,", 
"", 
"enum {", 
"#<a class=\"id\" href=\"#include\">include</a> \"sched_features.h\"", 
"};", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#SCHED_FEAT\">SCHED_FEAT</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCHED_FEAT\">SCHED_FEAT</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#enabled\">enabled</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#__SCHED_FEAT_\">__SCHED_FEAT_</a>##<a class=\"id\" href=\"#name\">name</a>) * <a class=\"id\" href=\"#enabled\">enabled</a> |", 
"", 
"<a class=\"id\" href=\"#const_debug\">const_debug</a> unsigned int <a class=\"id\" href=\"#sysctl_sched_features\">sysctl_sched_features</a> =", 
"#<a class=\"id\" href=\"#include\">include</a> \"sched_features.h\"", 
"<span class=\"ts\"/>0;", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#SCHED_FEAT\">SCHED_FEAT</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCHED_FEAT\">SCHED_FEAT</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#enabled\">enabled</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#name\">name</a> ,", 
"", 
"static <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> char *<a class=\"id\" href=\"#sched_feat_names\">sched_feat_names</a>[] = {", 
"#<a class=\"id\" href=\"#include\">include</a> \"sched_features.h\"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#SCHED_FEAT\">SCHED_FEAT</a>", 
"", 
"static int <a class=\"id\" href=\"#sched_feat_show\">sched_feat_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#sched_feat_names\">sched_feat_names</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sysctl_sched_features\">sysctl_sched_features</a> &amp; (1UL << <a class=\"id\" href=\"#i\">i</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \"NO_\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%s \", <a class=\"id\" href=\"#sched_feat_names\">sched_feat_names</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \"\\n\");", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#sched_feat_write\">sched_feat_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[64];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#cmp\">cmp</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#neg\">neg</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cnt\">cnt</a> &gt; 63)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> = 63;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#cnt\">cnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#cnt\">cnt</a>] = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"NO_\", 3) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#neg\">neg</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmp\">cmp</a> += 3;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#sched_feat_names\">sched_feat_names</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#sched_feat_names\">sched_feat_names</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#cmp\">cmp</a>, <a class=\"id\" href=\"#sched_feat_names\">sched_feat_names</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#len\">len</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#neg\">neg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_sched_features\">sysctl_sched_features</a> &= ~(1UL << <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysctl_sched_features\">sysctl_sched_features</a> |= (1UL << <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sched_feat_names\">sched_feat_names</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sched_feat_open\">sched_feat_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#single_open\">single_open</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#sched_feat_show\">sched_feat_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#sched_feat_fops\">sched_feat_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sched_feat_open\">sched_feat_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sched_feat_write\">sched_feat_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#single_release\">single_release</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#sched_init_debug\">sched_init_debug</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(\"sched_features\", 0644, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#sched_feat_fops\">sched_feat_fops</a>);", 
"", 
];
xr_frag_insert('l/a3/2559acd320c8985a7f5b3da61c0c5ae936a141.xr', __xr_tmp);
