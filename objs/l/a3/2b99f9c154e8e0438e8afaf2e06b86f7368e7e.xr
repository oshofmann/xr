var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/ext3/ialloc.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1992, 1993, 1994, 1995</span>", 
"<span class=\"comment\"> * Remy Card (card@masi.ibp.fr)</span>", 
"<span class=\"comment\"> * Laboratoire MASI - Institut Blaise Pascal</span>", 
"<span class=\"comment\"> * Universite Pierre et Marie Curie (Paris VI)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  BSD ufs-inspired inode and directory allocation by</span>", 
"<span class=\"comment\"> *  Stephen Tweedie (sct@redhat.com), 1993</span>", 
"<span class=\"comment\"> *  Big-endian to little-endian byte-swapping/bitmaps by</span>", 
"<span class=\"comment\"> *        David S. Miller (davem@caip.rutgers.edu), 1995</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jbd\">jbd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ext3_fs\">ext3_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ext3_jbd\">ext3_jbd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stat\">stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#quotaops\">quotaops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#byteorder\">byteorder</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"xattr.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acl.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ialloc.c contains the inodes allocation and deallocation routines</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The free inodes are managed by bitmaps.  A file system contains several</span>", 
"<span class=\"comment\"> * blocks groups.  Each group contains 1 bitmap block for blocks, 1 bitmap</span>", 
"<span class=\"comment\"> * block for inodes, N blocks for the inode table and data blocks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The file system contains group descriptors which are located after the</span>", 
"<span class=\"comment\"> * super block.  Each descriptor contains the number of the bitmap block and</span>", 
"<span class=\"comment\"> * the free blocks count in the block.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Read the inode allocation bitmap for a given block_group, reading</span>", 
"<span class=\"comment\"> * into the specified slot in the superblock's bitmap cache.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return buffer_head of bitmap on success or NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *", 
"<a class=\"id\" href=\"#read_inode_bitmap\">read_inode_bitmap</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>, unsigned long <a class=\"id\" href=\"#block_group\">block_group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_group_desc\">ext3_group_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ext3_get_group_desc\">ext3_get_group_desc</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_out\">error_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_bread\">sb_bread</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_inode_bitmap\">bg_inode_bitmap</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, \"read_inode_bitmap\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Cannot read inode bitmap - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"block_group = %lu, inode_bitmap = %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#block_group\">block_group</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#bg_inode_bitmap\">bg_inode_bitmap</a>));", 
"<a class=\"id\" href=\"#error_out\">error_out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTE! When we get the inode, we're the only people</span>", 
"<span class=\"comment\"> * that have access to it, and as such there are no</span>", 
"<span class=\"comment\"> * race conditions we have to worry about. The inode</span>", 
"<span class=\"comment\"> * is not on the hash-lists, and it cannot be reached</span>", 
"<span class=\"comment\"> * through the filesystem because the directory entry</span>", 
"<span class=\"comment\"> * has been deleted earlier.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * HOWEVER: we must make sure that we get no aliases,</span>", 
"<span class=\"comment\"> * which means that we have to call \"clear_inode()\"</span>", 
"<span class=\"comment\"> * _before_ we mark the inode not in use in the inode</span>", 
"<span class=\"comment\"> * bitmaps. Otherwise a newly created file might use</span>", 
"<span class=\"comment\"> * the same inode number (not actually the same pointer</span>", 
"<span class=\"comment\"> * though), and then we'd have two inodes sharing the</span>", 
"<span class=\"comment\"> * same inode number and space on the harddisk.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext3_free_inode\">ext3_free_inode</a> (<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_directory\">is_directory</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ino\">ino</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh2\">bh2</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#block_group\">block_group</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_group_desc\">ext3_group_desc</a> * <a class=\"id\" href=\"#gdp\">gdp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_super_block\">ext3_super_block</a> * <a class=\"id\" href=\"#es\">es</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_sb_info\">ext3_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fatal\">fatal</a> = 0, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>) &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a> (\"ext3_free_inode: inode has count=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a> (\"ext3_free_inode: inode has nlink=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sb\">sb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"ext3_free_inode: inode on nonexistent device\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ino\">ino</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_debug\">ext3_debug</a> (\"freeing inode %lu\\n\", <a class=\"id\" href=\"#ino\">ino</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#is_directory\">is_directory</a> = <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#es\">es</a> = <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_es\">s_es</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ino\">ino</a> &lt; <a class=\"id\" href=\"#EXT3_FIRST_INO\">EXT3_FIRST_INO</a>(<a class=\"id\" href=\"#sb\">sb</a>) || <a class=\"id\" href=\"#ino\">ino</a> &gt; <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_inodes_count\">s_inodes_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a> (<a class=\"id\" href=\"#sb\">sb</a>, \"ext3_free_inode\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"reserved or nonexistent inode %lu\", <a class=\"id\" href=\"#ino\">ino</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a> = (<a class=\"id\" href=\"#ino\">ino</a> - 1) / <a class=\"id\" href=\"#EXT3_INODES_PER_GROUP\">EXT3_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = (<a class=\"id\" href=\"#ino\">ino</a> - 1) % <a class=\"id\" href=\"#EXT3_INODES_PER_GROUP\">EXT3_INODES_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#read_inode_bitmap\">read_inode_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, \"get_write_access\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fatal\">fatal</a> = <a class=\"id\" href=\"#ext3_journal_get_write_access\">ext3_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal\">fatal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ok, now we can actually update the inode bitmaps.. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext3_clear_bit_atomic\">ext3_clear_bit_atomic</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#block_group\">block_group</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_error\">ext3_error</a> (<a class=\"id\" href=\"#sb\">sb</a>, \"ext3_free_inode\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"bit already cleared for inode %lu\", <a class=\"id\" href=\"#ino\">ino</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdp\">gdp</a> = <a class=\"id\" href=\"#ext3_get_group_desc\">ext3_get_group_desc</a> (<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>, &amp;<a class=\"id\" href=\"#bh2\">bh2</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh2\">bh2</a>, \"get_write_access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fatal\">fatal</a> = <a class=\"id\" href=\"#ext3_journal_get_write_access\">ext3_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh2\">bh2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal\">fatal</a>) goto <a class=\"id\" href=\"#error_return\">error_return</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gdp\">gdp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#block_group\">block_group</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le16_add_cpu\">le16_add_cpu</a>(&amp;<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_free_inodes_count\">bg_free_inodes_count</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_directory\">is_directory</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le16_add_cpu\">le16_add_cpu</a>(&amp;<a class=\"id\" href=\"#gdp\">gdp</a>-><a class=\"id\" href=\"#bg_used_dirs_count\">bg_used_dirs_count</a>, -1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#sb_bgl_lock\">sb_bgl_lock</a>(<a class=\"id\" href=\"#sbi\">sbi</a>, <a class=\"id\" href=\"#block_group\">block_group</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_inc\">percpu_counter_inc</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_freeinodes_counter\">s_freeinodes_counter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_directory\">is_directory</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_dec\">percpu_counter_dec</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_dirs_counter\">s_dirs_counter</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh2\">bh2</a>, \"call ext3_journal_dirty_metadata\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh2\">bh2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fatal\">fatal</a>) <a class=\"id\" href=\"#fatal\">fatal</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, \"call ext3_journal_dirty_metadata\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fatal\">fatal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fatal\">fatal</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#error_return\">error_return</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_std_error\">ext3_std_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#fatal\">fatal</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * There are two policies for allocating an inode.  If the new inode is</span>", 
"<span class=\"comment\"> * a directory, then a forward search is made for a block group with both</span>", 
"<span class=\"comment\"> * free space and a low directory-to-inode ratio; if that fails, then of</span>", 
"<span class=\"comment\"> * the groups with above-average free space, that group with the fewest</span>", 
"<span class=\"comment\"> * directories already is chosen.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For other inodes, search forward from the parent directory\\'s block</span>", 
"<span class=\"comment\"> * group to find a free inode.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#find_group_dir\">find_group_dir</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_groups_count\">s_groups_count</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#freei\">freei</a>, <a class=\"id\" href=\"#avefreei\">avefreei</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_group_desc\">ext3_group_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>, *<a class=\"id\" href=\"#best_desc\">best_desc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#best_group\">best_group</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freei\">freei</a> = <a class=\"id\" href=\"#percpu_counter_read_positive\">percpu_counter_read_positive</a>(&amp;<a class=\"id\" href=\"#EXT3_SB\">EXT3_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_freeinodes_counter\">s_freeinodes_counter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#avefreei\">avefreei</a> = <a class=\"id\" href=\"#freei\">freei</a> / <a class=\"id\" href=\"#ngroups\">ngroups</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#group\">group</a> = 0; <a class=\"id\" href=\"#group\">group</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#group\">group</a>++) {", 
];
xr_frag_insert('l/a3/2b99f9c154e8e0438e8afaf2e06b86f7368e7e.xr', __xr_tmp);
