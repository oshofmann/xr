var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ratelimit.c - Do something with rate limit.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Isolated from kernel/printk.c by Dave Young &lt;hidave.darkstar@gmail.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 2008-05-01 rewrite the function and use a ratelimit_state data struct as</span>", 
"<span class=\"comment\"> * parameter. Now every user can use their own standalone ratelimit_state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ratelimit\">ratelimit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __ratelimit - rate limiting</span>", 
"<span class=\"comment\"> * @rs: ratelimit_state data</span>", 
"<span class=\"comment\"> * @func: name of calling function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This enforces a rate limit: not more than @rs-&gt;burst callbacks</span>", 
"<span class=\"comment\"> * in every @rs-&gt;interval</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 0 means callbacks will be suppressed.</span>", 
"<span class=\"comment\"> * 1 means go ahead and do it.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#___ratelimit\">___ratelimit</a>(struct <a class=\"id\" href=\"#ratelimit_state\">ratelimit_state</a> *<a class=\"id\" href=\"#rs\">rs</a>, const char *<a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#interval\">interval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we contend on this state's lock then almost</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by definition we are too busy to print a message,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in addition to the one that will be printed by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the entity that is holding the lock already:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#spin_trylock_irqsave\">spin_trylock_irqsave</a>(&amp;<a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#begin\">begin</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#begin\">begin</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_is_before_jiffies\">time_is_before_jiffies</a>(<a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#begin\">begin</a> + <a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#interval\">interval</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#missed\">missed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: %d callbacks suppressed\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#missed\">missed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#begin\">begin</a>   = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#printed\">printed</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#missed\">missed</a>  = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#burst\">burst</a> && <a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#burst\">burst</a> &gt; <a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#printed\">printed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#printed\">printed</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#missed\">missed</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rs\">rs</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#___ratelimit\">___ratelimit</a>);", 
];
xr_frag_insert('l/a4/29405e0d13a6ac077af56c8f694b5585d09ff1.xr', __xr_tmp);
