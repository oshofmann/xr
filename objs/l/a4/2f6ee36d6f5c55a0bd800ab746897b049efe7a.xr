var __xr_tmp = [
"<span class=\"comment\"> *<span class=\"ts\"/>YOSHIFUJI Hideaki @USAGI</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Split up af-specific portion</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Derek Atkins &lt;derek@ihtfp.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Add Encapsulation support</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netfilter\">netfilter</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netfilter_ipv4\">netfilter_ipv4</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#xfrm\">xfrm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"int <a class=\"id\" href=\"#xfrm4_extract_input\">xfrm4_extract_input</a>(struct <a class=\"id\" href=\"#xfrm_state\">xfrm_state</a> *<a class=\"id\" href=\"#x\">x</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xfrm4_extract_header\">xfrm4_extract_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#xfrm4_rcv_encap_finish\">xfrm4_rcv_encap_finish</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>) == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ip_route_input_noref\">ip_route_input_noref</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#saddr\">saddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#tos\">tos</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dst_input\">dst_input</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<a class=\"id\" href=\"#drop\">drop</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NET_RX_DROP\">NET_RX_DROP</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#xfrm4_rcv_encap\">xfrm4_rcv_encap</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#nexthdr\">nexthdr</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#spi\">spi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#encap_type\">encap_type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#XFRM_SPI_SKB_CB\">XFRM_SPI_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#family\">family</a> = <a class=\"id\" href=\"#AF_INET\">AF_INET</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#XFRM_SPI_SKB_CB\">XFRM_SPI_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#daddroff\">daddroff</a> = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#iphdr\">iphdr</a>, <a class=\"id\" href=\"#daddr\">daddr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xfrm_input\">xfrm_input</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#nexthdr\">nexthdr</a>, <a class=\"id\" href=\"#spi\">spi</a>, <a class=\"id\" href=\"#encap_type\">encap_type</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#xfrm4_rcv_encap\">xfrm4_rcv_encap</a>);", 
"", 
"int <a class=\"id\" href=\"#xfrm4_transport_finish\">xfrm4_transport_finish</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#async\">async</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#XFRM_MODE_SKB_CB\">XFRM_MODE_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NETFILTER\">CONFIG_NETFILTER</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#async\">async</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_push\">__skb_push</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#skb_network_header\">skb_network_header</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#tot_len\">tot_len</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip_send_check\">ip_send_check</a>(<a class=\"id\" href=\"#iph\">iph</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NF_HOOK\">NF_HOOK</a>(<a class=\"id\" href=\"#NFPROTO_IPV4\">NFPROTO_IPV4</a>, <a class=\"id\" href=\"#NF_INET_PRE_ROUTING\">NF_INET_PRE_ROUTING</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xfrm4_rcv_encap_finish\">xfrm4_rcv_encap_finish</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* If it's a keepalive packet, then just eat it.</span>", 
"<span class=\"comment\"> * If it's an encapsulated packet, then pass it to the</span>", 
"<span class=\"comment\"> * IPsec xfrm input.</span>", 
"<span class=\"comment\"> * Returns 0 if skb passed to xfrm or was dropped.</span>", 
"<span class=\"comment\"> * Returns &gt;0 if skb should be passed to UDP.</span>", 
"<span class=\"comment\"> * Returns &lt;0 if skb should be resubmitted (-ret is protocol)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#xfrm4_udp_encap_rcv\">xfrm4_udp_encap_rcv</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_sock\">udp_sock</a> *<a class=\"id\" href=\"#up\">up</a> = <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udphdr\">udphdr</a> *<a class=\"id\" href=\"#uh\">uh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#iphlen\">iphlen</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> *<a class=\"id\" href=\"#udpdata\">udpdata</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#udpdata32\">udpdata32</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#encap_type\">encap_type</a> = <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#encap_type\">encap_type</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if this is not encapsulated socket, then just return now */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#encap_type\">encap_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If this is a paged skb, make sure we pull up</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * whatever data we need to look at. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - sizeof(struct <a class=\"id\" href=\"#udphdr\">udphdr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, sizeof(struct <a class=\"id\" href=\"#udphdr\">udphdr</a>) + <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#len\">len</a>, 8)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now we can get the pointers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a> = <a class=\"id\" href=\"#udp_hdr\">udp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udpdata\">udpdata</a> = (<a class=\"id\" href=\"#__u8\">__u8</a> *)<a class=\"id\" href=\"#uh\">uh</a> + sizeof(struct <a class=\"id\" href=\"#udphdr\">udphdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udpdata32\">udpdata32</a> = (<a class=\"id\" href=\"#__be32\">__be32</a> *)<a class=\"id\" href=\"#udpdata\">udpdata</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#encap_type\">encap_type</a>) {", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UDP_ENCAP_ESPINUDP\">UDP_ENCAP_ESPINUDP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check if this is a keepalive packet.  If so, eat it. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == 1 && <a class=\"id\" href=\"#udpdata\">udpdata</a>[0] == 0xff) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#len\">len</a> &gt; sizeof(struct <a class=\"id\" href=\"#ip_esp_hdr\">ip_esp_hdr</a>) && <a class=\"id\" href=\"#udpdata32\">udpdata32</a>[0] != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ESP Packet without Non-ESP header */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = sizeof(struct <a class=\"id\" href=\"#udphdr\">udphdr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Must be an IKE packet.. pass it through */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UDP_ENCAP_ESPINUDP_NON_IKE\">UDP_ENCAP_ESPINUDP_NON_IKE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check if this is a keepalive packet.  If so, eat it. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == 1 && <a class=\"id\" href=\"#udpdata\">udpdata</a>[0] == 0xff) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#len\">len</a> &gt; 2 * sizeof(<a class=\"id\" href=\"#u32\">u32</a>) + sizeof(struct <a class=\"id\" href=\"#ip_esp_hdr\">ip_esp_hdr</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#udpdata32\">udpdata32</a>[0] == 0 && <a class=\"id\" href=\"#udpdata32\">udpdata32</a>[1] == 0) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ESP Packet with Non-IKE marker */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = sizeof(struct <a class=\"id\" href=\"#udphdr\">udphdr</a>) + 2 * sizeof(<a class=\"id\" href=\"#u32\">u32</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Must be an IKE packet.. pass it through */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* At this point we are sure that this is an ESPinUDP packet,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so we need to remove 'len' bytes from the packet (the UDP</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * header and optional ESP marker bytes) and then modify the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * protocol to ESP, and then call into the transform receiver.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>) && <a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0, 0, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now we can update and verify the packet length... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iphlen\">iphlen</a> = <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#ihl\">ihl</a> << 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#tot_len\">tot_len</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#tot_len\">tot_len</a>) - <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#iphlen\">iphlen</a> + <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* packet is too small!?! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* pull the data buffer up to the ESP header and set the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transport header to point to ESP.  Keep UDP on the stack</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_pull\">__skb_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_transport_header\">skb_reset_transport_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* process ESP */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xfrm4_rcv_encap\">xfrm4_rcv_encap</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#IPPROTO_ESP\">IPPROTO_ESP</a>, 0, <a class=\"id\" href=\"#encap_type\">encap_type</a>);", 
"", 
"<a class=\"id\" href=\"#drop\">drop</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#xfrm4_rcv\">xfrm4_rcv</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xfrm4_rcv_spi\">xfrm4_rcv_spi</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#protocol\">protocol</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#xfrm4_rcv\">xfrm4_rcv</a>);", 
];
xr_frag_insert('l/a4/2f6ee36d6f5c55a0bd800ab746897b049efe7a.xr', __xr_tmp);
