var __xr_tmp = [
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unhex\">unhex</a>(<a class=\"id\" href=\"#c\">c</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#isdigit\">isdigit</a>(<a class=\"id\" href=\"#c\">c</a>) ? (<a class=\"id\" href=\"#c\">c</a> - '0') : (<a class=\"id\" href=\"#toupper\">toupper</a>(<a class=\"id\" href=\"#c\">c</a>) - 'A' + 10))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BASEDEC\">BASEDEC</a> 10<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fancier cpuset lists input in decimal */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_scnprintf - convert bitmap to an ASCII hex string.</span>", 
"<span class=\"comment\"> * @buf: byte buffer into which string is placed</span>", 
"<span class=\"comment\"> * @buflen: reserved size of @buf, in bytes</span>", 
"<span class=\"comment\"> * @maskp: pointer to bitmap to convert</span>", 
"<span class=\"comment\"> * @nmaskbits: size of bitmap, in bits</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Exactly @nmaskbits bits are displayed.  Hex digits are grouped into</span>", 
"<span class=\"comment\"> * comma-separated sets of eight digits per set.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bitmap_scnprintf\">bitmap_scnprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#buflen\">buflen</a>,", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#maskp\">maskp</a>, int <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#word\">word</a>, <a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#sep\">sep</a> = \"\";", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#chunksz\">chunksz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#chunkmask\">chunkmask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunksz\">chunksz</a> = <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a> &amp; (<a class=\"id\" href=\"#CHUNKSZ\">CHUNKSZ</a> - 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chunksz\">chunksz</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunksz\">chunksz</a> = <a class=\"id\" href=\"#CHUNKSZ\">CHUNKSZ</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>, <a class=\"id\" href=\"#CHUNKSZ\">CHUNKSZ</a>) - <a class=\"id\" href=\"#CHUNKSZ\">CHUNKSZ</a>;", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a> -= <a class=\"id\" href=\"#CHUNKSZ\">CHUNKSZ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunkmask\">chunkmask</a> = ((1ULL << <a class=\"id\" href=\"#chunksz\">chunksz</a>) - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#word\">word</a> = <a class=\"id\" href=\"#i\">i</a> / <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#i\">i</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = (<a class=\"id\" href=\"#maskp\">maskp</a>[<a class=\"id\" href=\"#word\">word</a>] >> <a class=\"id\" href=\"#bit\">bit</a>) &amp; <a class=\"id\" href=\"#chunkmask\">chunkmask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>+<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#buflen\">buflen</a>-<a class=\"id\" href=\"#len\">len</a>, \"%s%0*lx\", <a class=\"id\" href=\"#sep\">sep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#chunksz\">chunksz</a>+3)/4, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunksz\">chunksz</a> = <a class=\"id\" href=\"#CHUNKSZ\">CHUNKSZ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sep\">sep</a> = \",\";", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bitmap_scnprintf\">bitmap_scnprintf</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __bitmap_parse - convert an ASCII hex string into a bitmap.</span>", 
"<span class=\"comment\"> * @buf: pointer to buffer containing string.</span>", 
"<span class=\"comment\"> * @buflen: buffer size in bytes.  If string is smaller than this</span>", 
"<span class=\"comment\"> *    then it must be terminated with a \\0.</span>", 
"<span class=\"comment\"> * @is_user: location of buffer, 0 indicates kernel space</span>", 
"<span class=\"comment\"> * @maskp: pointer to bitmap array that will contain result.</span>", 
"<span class=\"comment\"> * @nmaskbits: size of bitmap, in bits.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Commas group hex digits into chunks.  Each chunk defines exactly 32</span>", 
"<span class=\"comment\"> * bits of the resultant bitmask.  No chunk may specify a value larger</span>", 
"<span class=\"comment\"> * than 32 bits (%-EOVERFLOW), and if a chunk specifies a smaller value</span>", 
"<span class=\"comment\"> * then leading 0-bits are prepended.  %-EINVAL is returned for illegal</span>", 
"<span class=\"comment\"> * characters and for grouping errors such as \"1,,5\", \",44\", \",\" and \"\".</span>", 
"<span class=\"comment\"> * Leading and trailing whitespace accepted, but not embedded whitespace.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__bitmap_parse\">__bitmap_parse</a>(const char *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#buflen\">buflen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#is_user\">is_user</a>, unsigned long *<a class=\"id\" href=\"#maskp\">maskp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#old_c\">old_c</a>, <a class=\"id\" href=\"#totaldigits\">totaldigits</a>, <a class=\"id\" href=\"#ndigits\">ndigits</a>, <a class=\"id\" href=\"#nchunks\">nchunks</a>, <a class=\"id\" href=\"#nbits\">nbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#chunk\">chunk</a>;", 
"<span class=\"ts\"/>const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#maskp\">maskp</a>, <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nchunks\">nchunks</a> = <a class=\"id\" href=\"#nbits\">nbits</a> = <a class=\"id\" href=\"#totaldigits\">totaldigits</a> = <a class=\"id\" href=\"#c\">c</a> = 0;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#ndigits\">ndigits</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get the next chunk of the bitmap */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#buflen\">buflen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_c\">old_c</a> = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_user\">is_user</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__get_user\">__get_user</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#ubuf\">ubuf</a>++))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = *<a class=\"id\" href=\"#buf\">buf</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buflen\">buflen</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#isspace\">isspace</a>(<a class=\"id\" href=\"#c\">c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If the last character was a space and the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * character isn't '\\0', we've got embedded whitespace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This is a no-no, so throw an error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#totaldigits\">totaldigits</a> && <a class=\"id\" href=\"#c\">c</a> && <a class=\"id\" href=\"#isspace\">isspace</a>(<a class=\"id\" href=\"#old_c\">old_c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* A '\\0' or a ',' signal the end of the chunk */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> == '\\0' || <a class=\"id\" href=\"#c\">c</a> == ',')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#isxdigit\">isxdigit</a>(<a class=\"id\" href=\"#c\">c</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Make sure there are at least 4 free bits in 'chunk'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If not, this hexdigit will overflow 'chunk', so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * throw an error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk\">chunk</a> &amp; ~((1UL << (<a class=\"id\" href=\"#CHUNKSZ\">CHUNKSZ</a> - 4)) - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOVERFLOW\">EOVERFLOW</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a> = (<a class=\"id\" href=\"#chunk\">chunk</a> << 4) | <a class=\"id\" href=\"#unhex\">unhex</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ndigits\">ndigits</a>++; <a class=\"id\" href=\"#totaldigits\">totaldigits</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ndigits\">ndigits</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nchunks\">nchunks</a> == 0 && <a class=\"id\" href=\"#chunk\">chunk</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__bitmap_shift_left\">__bitmap_shift_left</a>(<a class=\"id\" href=\"#maskp\">maskp</a>, <a class=\"id\" href=\"#maskp\">maskp</a>, <a class=\"id\" href=\"#CHUNKSZ\">CHUNKSZ</a>, <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#maskp\">maskp</a> |= <a class=\"id\" href=\"#chunk\">chunk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nchunks\">nchunks</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbits\">nbits</a> += (<a class=\"id\" href=\"#nchunks\">nchunks</a> == 1) ? <a class=\"id\" href=\"#nbits_to_hold_value\">nbits_to_hold_value</a>(<a class=\"id\" href=\"#chunk\">chunk</a>) : <a class=\"id\" href=\"#CHUNKSZ\">CHUNKSZ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nbits\">nbits</a> &gt; <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOVERFLOW\">EOVERFLOW</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#buflen\">buflen</a> && <a class=\"id\" href=\"#c\">c</a> == ',');", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bitmap_parse\">__bitmap_parse</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_parse_user - convert an ASCII hex string in a user buffer into a bitmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ubuf: pointer to user buffer containing string.</span>", 
"<span class=\"comment\"> * @ulen: buffer size in bytes.  If string is smaller than this</span>", 
"<span class=\"comment\"> *    then it must be terminated with a \\0.</span>", 
"<span class=\"comment\"> * @maskp: pointer to bitmap array that will contain result.</span>", 
"<span class=\"comment\"> * @nmaskbits: size of bitmap, in bits.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Wrapper for __bitmap_parse(), providing it with user buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We cannot have this as an inline function in bitmap.h because it needs</span>", 
"<span class=\"comment\"> * linux/uaccess.h to get the access_ok() declaration and this causes</span>", 
"<span class=\"comment\"> * cyclic dependencies.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bitmap_parse_user\">bitmap_parse_user</a>(const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ulen\">ulen</a>, unsigned long *<a class=\"id\" href=\"#maskp\">maskp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_READ\">VERIFY_READ</a>, <a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#ulen\">ulen</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__bitmap_parse\">__bitmap_parse</a>((const char *)<a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#ulen\">ulen</a>, 1, <a class=\"id\" href=\"#maskp\">maskp</a>, <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bitmap_parse_user\">bitmap_parse_user</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bscnl_emit(buf, buflen, rbot, rtop, bp)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Helper routine for bitmap_scnlistprintf().  Write decimal number</span>", 
"<span class=\"comment\"> * or range to buf, suppressing output past buf+buflen, with optional</span>", 
"<span class=\"comment\"> * comma-prefix.  Return len of what would be written to buf, if it</span>", 
"<span class=\"comment\"> * all fit.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#bscnl_emit\">bscnl_emit</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>, int <a class=\"id\" href=\"#rbot\">rbot</a>, int <a class=\"id\" href=\"#rtop\">rtop</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#buflen\">buflen</a> - <a class=\"id\" href=\"#len\">len</a>, \",\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rbot\">rbot</a> == <a class=\"id\" href=\"#rtop\">rtop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#buflen\">buflen</a> - <a class=\"id\" href=\"#len\">len</a>, \"%d\", <a class=\"id\" href=\"#rbot\">rbot</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#buflen\">buflen</a> - <a class=\"id\" href=\"#len\">len</a>, \"%d-%d\", <a class=\"id\" href=\"#rbot\">rbot</a>, <a class=\"id\" href=\"#rtop\">rtop</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_scnlistprintf - convert bitmap to list format ASCII string</span>", 
"<span class=\"comment\"> * @buf: byte buffer into which string is placed</span>", 
"<span class=\"comment\"> * @buflen: reserved size of @buf, in bytes</span>", 
"<span class=\"comment\"> * @maskp: pointer to bitmap to convert</span>", 
"<span class=\"comment\"> * @nmaskbits: size of bitmap, in bits</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Output format is a comma-separated list of decimal numbers and</span>", 
"<span class=\"comment\"> * ranges.  Consecutively set bits are shown as two hyphen-separated</span>", 
"<span class=\"comment\"> * decimal numbers, the smallest and largest bit numbers set in</span>", 
"<span class=\"comment\"> * the range.  Output format is compatible with the format</span>", 
"<span class=\"comment\"> * accepted as input by bitmap_parselist().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The return value is the number of characters which would be</span>", 
"<span class=\"comment\"> * generated for the given input, excluding the trailing '\\0', as</span>", 
"<span class=\"comment\"> * per ISO C99.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bitmap_scnlistprintf\">bitmap_scnlistprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#buflen\">buflen</a>,", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#maskp\">maskp</a>, int <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* current bit is 'cur', most recently seen range is [rbot, rtop] */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cur\">cur</a>, <a class=\"id\" href=\"#rbot\">rbot</a>, <a class=\"id\" href=\"#rtop\">rtop</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buflen\">buflen</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[0] = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbot\">rbot</a> = <a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#find_first_bit\">find_first_bit</a>(<a class=\"id\" href=\"#maskp\">maskp</a>, <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cur\">cur</a> &lt; <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtop\">rtop</a> = <a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(<a class=\"id\" href=\"#maskp\">maskp</a>, <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>, <a class=\"id\" href=\"#cur\">cur</a>+1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur\">cur</a> >= <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a> || <a class=\"id\" href=\"#cur\">cur</a> &gt; <a class=\"id\" href=\"#rtop\">rtop</a> + 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#bscnl_emit\">bscnl_emit</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, <a class=\"id\" href=\"#rbot\">rbot</a>, <a class=\"id\" href=\"#rtop\">rtop</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbot\">rbot</a> = <a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bitmap_scnlistprintf\">bitmap_scnlistprintf</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_parselist - convert list format ASCII string to bitmap</span>", 
"<span class=\"comment\"> * @bp: read nul-terminated user string from this buffer</span>", 
"<span class=\"comment\"> * @maskp: write resulting mask here</span>", 
"<span class=\"comment\"> * @nmaskbits: number of bits in mask to be written</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Input format is a comma-separated list of decimal numbers and</span>", 
"<span class=\"comment\"> * ranges.  Consecutively set bits are shown as two hyphen-separated</span>", 
"<span class=\"comment\"> * decimal numbers, the smallest and largest bit numbers set in</span>", 
"<span class=\"comment\"> * the range.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, -errno on invalid input strings.</span>", 
"<span class=\"comment\"> * Error values:</span>", 
"<span class=\"comment\"> *    %-EINVAL: second number in range smaller than first</span>", 
"<span class=\"comment\"> *    %-EINVAL: invalid character in string</span>", 
"<span class=\"comment\"> *    %-ERANGE: bit number specified too large for mask</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bitmap_parselist\">bitmap_parselist</a>(const char *<a class=\"id\" href=\"#bp\">bp</a>, unsigned long *<a class=\"id\" href=\"#maskp\">maskp</a>, int <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#maskp\">maskp</a>, <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#isdigit\">isdigit</a>(*<a class=\"id\" href=\"#bp\">bp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#a\">a</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#bp\">bp</a>, (char **)&amp;<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#BASEDEC\">BASEDEC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#bp\">bp</a> == '-') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#isdigit\">isdigit</a>(*<a class=\"id\" href=\"#bp\">bp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#bp\">bp</a>, (char **)&amp;<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#BASEDEC\">BASEDEC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#a\">a</a> <= <a class=\"id\" href=\"#b\">b</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a> >= <a class=\"id\" href=\"#nmaskbits\">nmaskbits</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#a\">a</a> <= <a class=\"id\" href=\"#b\">b</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#maskp\">maskp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#bp\">bp</a> == ',')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>++;", 
"<span class=\"ts\"/>} while (*<a class=\"id\" href=\"#bp\">bp</a> != '\\0' && *<a class=\"id\" href=\"#bp\">bp</a> != '\\n');", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bitmap_parselist\">bitmap_parselist</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_pos_to_ord - find ordinal of set bit at given position in bitmap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf: pointer to a bitmap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pos: a bit position in @buf (0 &lt;= @pos &lt; @bits)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bits: number of valid bit positions in @buf</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Map the bit at position @pos in @buf (of length @bits) to the</span>", 
"<span class=\"comment\"> * ordinal of which set bit it is.  If it is not set or if @pos</span>", 
"<span class=\"comment\"> * is not a valid bit position, map to -1.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If for example, just bits 4 through 7 are set in @buf, then @pos</span>", 
"<span class=\"comment\"> * values 4 through 7 will get mapped to 0 through 3, respectively,</span>", 
"<span class=\"comment\"> * and other @pos values will get mapped to 0.  When @pos value 7</span>", 
"<span class=\"comment\"> * gets mapped to (returns) @ord value 3 in this example, that means</span>", 
"<span class=\"comment\"> * that bit 7 is the 3rd (starting with 0th) set bit in @buf.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The bit positions 0 through @bits are valid positions in @buf.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#bitmap_pos_to_ord\">bitmap_pos_to_ord</a>(const unsigned long *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#pos\">pos</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ord\">ord</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> &lt; 0 || <a class=\"id\" href=\"#pos\">pos</a> >= <a class=\"id\" href=\"#bits\">bits</a> || !<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#buf\">buf</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#find_first_bit\">find_first_bit</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#bits\">bits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ord\">ord</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pos\">pos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#i\">i</a> + 1);", 
"<span class=\"ts\"/>     <span class=\"ts\"/><a class=\"id\" href=\"#ord\">ord</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#pos\">pos</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ord\">ord</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_ord_to_pos - find position of n-th set bit in bitmap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf: pointer to bitmap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ord: ordinal bit position (n-th set bit, n &gt;= 0)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bits: number of valid bit positions in @buf</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Map the ordinal offset of bit @ord in @buf to its position in @buf.</span>", 
"<span class=\"comment\"> * Value of @ord should be in range 0 &lt;= @ord &lt; weight(buf), else</span>", 
"<span class=\"comment\"> * results are undefined.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If for example, just bits 4 through 7 are set in @buf, then @ord</span>", 
"<span class=\"comment\"> * values 0 through 3 will get mapped to 4 through 7, respectively,</span>", 
"<span class=\"comment\"> * and all other @ord values return undefined values.  When @ord value 3</span>", 
"<span class=\"comment\"> * gets mapped to (returns) @pos value 7 in this example, that means</span>", 
"<span class=\"comment\"> * that the 3rd set bit (starting with 0th) is at position 7 in @buf.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The bit positions 0 through @bits are valid positions in @buf.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#bitmap_ord_to_pos\">bitmap_ord_to_pos</a>(const unsigned long *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#ord\">ord</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ord\">ord</a> >= 0 && <a class=\"id\" href=\"#ord\">ord</a> &lt; <a class=\"id\" href=\"#bits\">bits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#find_first_bit\">find_first_bit</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#bits\">bits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#bits\">bits</a> && <a class=\"id\" href=\"#ord\">ord</a> &gt; 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#i\">i</a> + 1))", 
"<span class=\"ts\"/>     <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ord\">ord</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#bits\">bits</a> && <a class=\"id\" href=\"#ord\">ord</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pos\">pos</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_remap - Apply map defined by a pair of bitmaps to another bitmap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dst: remapped result</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@src: subset to be remapped</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old: defines domain of map</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new: defines range of map</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bits: number of bits in each of these bitmaps</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Let @old and @new define a mapping of bit positions, such that</span>", 
"<span class=\"comment\"> * whatever position is held by the n-th set bit in @old is mapped</span>", 
"<span class=\"comment\"> * to the n-th set bit in @new.  In the more general case, allowing</span>", 
"<span class=\"comment\"> * for the possibility that the weight 'w' of @new is less than the</span>", 
"<span class=\"comment\"> * weight of @old, map the position of the n-th set bit in @old to</span>", 
"<span class=\"comment\"> * the position of the m-th set bit in @new, where m == n % w.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If either of the @old and @new bitmaps are empty, or if @src and</span>", 
"<span class=\"comment\"> * @dst point to the same location, then this routine copies @src</span>", 
"<span class=\"comment\"> * to @dst.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The positions of unset bits in @old are mapped to themselves</span>", 
"<span class=\"comment\"> * (the identify map).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Apply the above specified mapping to @src, placing the result in</span>", 
"<span class=\"comment\"> * @dst, clearing any bits previously set in @dst.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For example, lets say that @old has bits 4 through 7 set, and</span>", 
"<span class=\"comment\"> * @new has bits 12 through 15 set.  This defines the mapping of bit</span>", 
"<span class=\"comment\"> * position 4 to 12, 5 to 13, 6 to 14 and 7 to 15, and of all other</span>", 
"<span class=\"comment\"> * bit positions unchanged.  So if say @src comes into this routine</span>", 
"<span class=\"comment\"> * with bits 1, 5 and 7 set, then @dst should leave with bits 1,</span>", 
"<span class=\"comment\"> * 13 and 15 set.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#bitmap_remap\">bitmap_remap</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#old\">old</a>, const unsigned long *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#oldbit\">oldbit</a>, <a class=\"id\" href=\"#w\">w</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a> == <a class=\"id\" href=\"#src\">src</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* following doesn't handle inplace remaps */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#bits\">bits</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#w\">w</a> = <a class=\"id\" href=\"#bitmap_weight\">bitmap_weight</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#bits\">bits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_set_bit\">for_each_set_bit</a>(<a class=\"id\" href=\"#oldbit\">oldbit</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#bits\">bits</a>) {", 
"<span class=\"ts\"/>     <span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#bitmap_pos_to_ord\">bitmap_pos_to_ord</a>(<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#oldbit\">oldbit</a>, <a class=\"id\" href=\"#bits\">bits</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &lt; 0 || <a class=\"id\" href=\"#w\">w</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#oldbit\">oldbit</a>, <a class=\"id\" href=\"#dst\">dst</a>);<span class=\"ts\"/><span class=\"comment\">/* identity map */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#bitmap_ord_to_pos\">bitmap_ord_to_pos</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#n\">n</a> % <a class=\"id\" href=\"#w\">w</a>, <a class=\"id\" href=\"#bits\">bits</a>), <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bitmap_remap\">bitmap_remap</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_bitremap - Apply map defined by a pair of bitmaps to a single bit</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@oldbit: bit position to be mapped</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old: defines domain of map</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new: defines range of map</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bits: number of bits in each of these bitmaps</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Let @old and @new define a mapping of bit positions, such that</span>", 
"<span class=\"comment\"> * whatever position is held by the n-th set bit in @old is mapped</span>", 
"<span class=\"comment\"> * to the n-th set bit in @new.  In the more general case, allowing</span>", 
"<span class=\"comment\"> * for the possibility that the weight 'w' of @new is less than the</span>", 
"<span class=\"comment\"> * weight of @old, map the position of the n-th set bit in @old to</span>", 
"<span class=\"comment\"> * the position of the m-th set bit in @new, where m == n % w.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The positions of unset bits in @old are mapped to themselves</span>", 
"<span class=\"comment\"> * (the identify map).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Apply the above specified mapping to bit position @oldbit, returning</span>", 
"<span class=\"comment\"> * the new bit position.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For example, lets say that @old has bits 4 through 7 set, and</span>", 
"<span class=\"comment\"> * @new has bits 12 through 15 set.  This defines the mapping of bit</span>", 
"<span class=\"comment\"> * position 4 to 12, 5 to 13, 6 to 14 and 7 to 15, and of all other</span>", 
"<span class=\"comment\"> * bit positions unchanged.  So if say @oldbit is 5, then this routine</span>", 
"<span class=\"comment\"> * returns 13.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bitmap_bitremap\">bitmap_bitremap</a>(int <a class=\"id\" href=\"#oldbit\">oldbit</a>, const unsigned long *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#new\">new</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#w\">w</a> = <a class=\"id\" href=\"#bitmap_weight\">bitmap_weight</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#bits\">bits</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#bitmap_pos_to_ord\">bitmap_pos_to_ord</a>(<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#oldbit\">oldbit</a>, <a class=\"id\" href=\"#bits\">bits</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &lt; 0 || <a class=\"id\" href=\"#w\">w</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#oldbit\">oldbit</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_ord_to_pos\">bitmap_ord_to_pos</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#n\">n</a> % <a class=\"id\" href=\"#w\">w</a>, <a class=\"id\" href=\"#bits\">bits</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bitmap_bitremap\">bitmap_bitremap</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_onto - translate one bitmap relative to another</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dst: resulting translated bitmap</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@orig: original untranslated bitmap</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@relmap: bitmap relative to which translated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bits: number of bits in each of these bitmaps</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set the n-th bit of @dst iff there exists some m such that the</span>", 
"<span class=\"comment\"> * n-th bit of @relmap is set, the m-th bit of @orig is set, and</span>", 
"<span class=\"comment\"> * the n-th bit of @relmap is also the m-th _set_ bit of @relmap.</span>", 
"<span class=\"comment\"> * (If you understood the previous sentence the first time your</span>", 
"<span class=\"comment\"> * read it, you're overqualified for your current job.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In other words, @orig is mapped onto (surjectively) @dst,</span>", 
"<span class=\"comment\"> * using the the map { &lt;n, m&gt; | the n-th bit of @relmap is the</span>", 
"<span class=\"comment\"> * m-th set bit of @relmap }.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Any set bits in @orig above bit number W, where W is the</span>", 
"<span class=\"comment\"> * weight of (number of set bits in) @relmap are mapped nowhere.</span>", 
"<span class=\"comment\"> * In particular, if for all bits m set in @orig, m &gt;= W, then</span>", 
"<span class=\"comment\"> * @dst will end up empty.  In situations where the possibility</span>", 
"<span class=\"comment\"> * of such an empty result is not desired, one way to avoid it is</span>", 
"<span class=\"comment\"> * to use the bitmap_fold() operator, below, to first fold the</span>", 
"<span class=\"comment\"> * @orig bitmap over itself so that all its set bits x are in the</span>", 
"<span class=\"comment\"> * range 0 &lt;= x &lt; W.  The bitmap_fold() operator does this by</span>", 
"<span class=\"comment\"> * setting the bit (m % W) in @dst, for each bit (m) set in @orig.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Example [1] for bitmap_onto():</span>", 
"<span class=\"comment\"> *  Let's say @relmap has bits 30-39 set, and @orig has bits</span>", 
"<span class=\"comment\"> *  1, 3, 5, 7, 9 and 11 set.  Then on return from this routine,</span>", 
"<span class=\"comment\"> *  @dst will have bits 31, 33, 35, 37 and 39 set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  When bit 0 is set in @orig, it means turn on the bit in</span>", 
"<span class=\"comment\"> *  @dst corresponding to whatever is the first bit (if any)</span>", 
"<span class=\"comment\"> *  that is turned on in @relmap.  Since bit 0 was off in the</span>", 
"<span class=\"comment\"> *  above example, we leave off that bit (bit 30) in @dst.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  When bit 1 is set in @orig (as in the above example), it</span>", 
"<span class=\"comment\"> *  means turn on the bit in @dst corresponding to whatever</span>", 
"<span class=\"comment\"> *  is the second bit that is turned on in @relmap.  The second</span>", 
"<span class=\"comment\"> *  bit in @relmap that was turned on in the above example was</span>", 
"<span class=\"comment\"> *  bit 31, so we turned on bit 31 in @dst.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Similarly, we turned on bits 33, 35, 37 and 39 in @dst,</span>", 
"<span class=\"comment\"> *  because they were the 4th, 6th, 8th and 10th set bits</span>", 
"<span class=\"comment\"> *  set in @relmap, and the 4th, 6th, 8th and 10th bits of</span>", 
"<span class=\"comment\"> *  @orig (i.e. bits 3, 5, 7 and 9) were also set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  When bit 11 is set in @orig, it means turn on the bit in</span>", 
"<span class=\"comment\"> *  @dst corresponding to whatever is the twelth bit that is</span>", 
"<span class=\"comment\"> *  turned on in @relmap.  In the above example, there were</span>", 
"<span class=\"comment\"> *  only ten bits turned on in @relmap (30..39), so that bit</span>", 
"<span class=\"comment\"> *  11 was set in @orig had no affect on @dst.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Example [2] for bitmap_fold() + bitmap_onto():</span>", 
"<span class=\"comment\"> *  Let's say @relmap has these ten bits set:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>40 41 42 43 45 48 53 61 74 95</span>", 
"<span class=\"comment\"> *  (for the curious, that's 40 plus the first ten terms of the</span>", 
"<span class=\"comment\"> *  Fibonacci sequence.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Further lets say we use the following code, invoking</span>", 
"<span class=\"comment\"> *  bitmap_fold() then bitmap_onto, as suggested above to</span>", 
"<span class=\"comment\"> *  avoid the possitility of an empty @dst result:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unsigned long *tmp;<span class=\"ts\"/>// a temporary bitmap's bits</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bitmap_fold(tmp, orig, bitmap_weight(relmap, bits), bits);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bitmap_onto(dst, tmp, relmap, bits);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Then this table shows what various values of @dst would be, for</span>", 
"<span class=\"comment\"> *  various @orig's.  I list the zero-based positions of each set bit.</span>", 
"<span class=\"comment\"> *  The tmp column shows the intermediate result, as computed by</span>", 
"<span class=\"comment\"> *  using bitmap_fold() to fold the @orig bitmap modulo ten</span>", 
"<span class=\"comment\"> *  (the weight of @relmap).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      @orig           tmp            @dst</span>", 
"<span class=\"comment\"> *      0                0             40</span>", 
"<span class=\"comment\"> *      1                1             41</span>", 
"<span class=\"comment\"> *      9                9             95</span>", 
"<span class=\"comment\"> *      10               0             40 (*)</span>", 
"<span class=\"comment\"> *      1 3 5 7          1 3 5 7       41 43 48 61</span>", 
"<span class=\"comment\"> *      0 1 2 3 4        0 1 2 3 4     40 41 42 43 45</span>", 
"<span class=\"comment\"> *      0 9 18 27        0 9 8 7       40 61 74 95</span>", 
"<span class=\"comment\"> *      0 10 20 30       0             40</span>", 
"<span class=\"comment\"> *      0 11 22 33       0 1 2 3       40 41 42 43</span>", 
"<span class=\"comment\"> *      0 12 24 36       0 2 4 6       40 42 45 53</span>", 
"<span class=\"comment\"> *      78 102 211       1 2 8         41 42 74 (*)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (*) For these marked lines, if we hadn't first done bitmap_fold()</span>", 
"<span class=\"comment\"> *     into tmp, then the @dst result would have been empty.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If either of @orig or @relmap is empty (no set bits), then @dst</span>", 
"<span class=\"comment\"> * will be returned empty.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If (as explained above) the only set bits in @orig are in positions</span>", 
"<span class=\"comment\"> * m where m &gt;= W, (where W is the weight of @relmap) then @dst will</span>", 
"<span class=\"comment\"> * once again be returned empty.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All bits in @dst not set by the above rule are cleared.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#bitmap_onto\">bitmap_onto</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#orig\">orig</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#relmap\">relmap</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#m\">m</a>;       <span class=\"ts\"/><span class=\"comment\">/* same meaning as in above comment */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a> == <a class=\"id\" href=\"#orig\">orig</a>)<span class=\"ts\"/><span class=\"comment\">/* following doesn't handle inplace mappings */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#bits\">bits</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The following code is a more efficient, but less</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * obvious, equivalent to the loop:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>for (m = 0; m &lt; bitmap_weight(relmap, bits); m++) {</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/>n = bitmap_ord_to_pos(orig, m, bits);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/>if (test_bit(m, orig))</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>set_bit(n, dst);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>}</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_set_bit\">for_each_set_bit</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#relmap\">relmap</a>, <a class=\"id\" href=\"#bits\">bits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* m == bitmap_pos_to_ord(relmap, n, bits) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#orig\">orig</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bitmap_onto\">bitmap_onto</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_fold - fold larger bitmap into smaller, modulo specified size</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dst: resulting smaller bitmap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@orig: original larger bitmap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sz: specified size</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bits: number of bits in each of these bitmaps</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For each bit oldbit in @orig, set bit oldbit mod @sz in @dst.</span>", 
"<span class=\"comment\"> * Clear all other bits in @dst.  See further the comment and</span>", 
"<span class=\"comment\"> * Example [2] for bitmap_onto() for why and how to use this.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#bitmap_fold\">bitmap_fold</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#orig\">orig</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#sz\">sz</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#oldbit\">oldbit</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a> == <a class=\"id\" href=\"#orig\">orig</a>)<span class=\"ts\"/><span class=\"comment\">/* following doesn't handle inplace mappings */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#bits\">bits</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_set_bit\">for_each_set_bit</a>(<a class=\"id\" href=\"#oldbit\">oldbit</a>, <a class=\"id\" href=\"#orig\">orig</a>, <a class=\"id\" href=\"#bits\">bits</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#oldbit\">oldbit</a> % <a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bitmap_fold\">bitmap_fold</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Common code for bitmap_*_region() routines.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bitmap: array of unsigned longs corresponding to the bitmap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pos: the beginning of the region</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>order: region size (log base 2 of number of bits)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>reg_op: operation(s) to perform on that region of bitmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Can set, verify and/or release a region of bits in a bitmap,</span>", 
"<span class=\"comment\"> * depending on which combination of REG_OP_* flag bits is set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A region of a bitmap is a sequence of bits in the bitmap, of</span>", 
"<span class=\"comment\"> * some size '1 &lt;&lt; order' (a power of two), aligned to that same</span>", 
"<span class=\"comment\"> * '1 &lt;&lt; order' power of two.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1 if REG_OP_ISFREE succeeds (region is all zero bits).</span>", 
"<span class=\"comment\"> * Returns 0 in all other cases and reg_ops.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OP_ISFREE\">REG_OP_ISFREE</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* true if region is all zero bits */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OP_ALLOC\">REG_OP_ALLOC</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set all bits in region */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OP_RELEASE\">REG_OP_RELEASE</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* clear all bits in region */</span>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__reg_op\">__reg_op</a>(unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, int <a class=\"id\" href=\"#pos\">pos</a>, int <a class=\"id\" href=\"#order\">order</a>, int <a class=\"id\" href=\"#reg_op\">reg_op</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nbits_reg\">nbits_reg</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* number of bits in region */</span>", 
];
xr_frag_insert('l/a4/3b331956a4b8e2b42c9995e691c415ea4a256a.xr', __xr_tmp);
