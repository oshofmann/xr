var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_TEXTSEARCH_H\">__LINUX_TEXTSEARCH_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_TEXTSEARCH_H\">__LINUX_TEXTSEARCH_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#ts_config\">ts_config</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TS_AUTOLOAD\">TS_AUTOLOAD</a><span class=\"ts\"/>1 <span class=\"comment\">/* Automatically load textsearch modules when needed */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TS_IGNORECASE\">TS_IGNORECASE</a><span class=\"ts\"/>2 <span class=\"comment\">/* Searches string case insensitively */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct ts_state - search state</span>", 
"<span class=\"comment\"> * @offset: offset for next match</span>", 
"<span class=\"comment\"> * @cb: control buffer, for persistent variables of get_next_block()</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ts_state\">ts_state</a>", 
"{", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>[40];", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct ts_ops - search module operations</span>", 
"<span class=\"comment\"> * @name: name of search algorithm</span>", 
"<span class=\"comment\"> * @init: initialization function to prepare a search</span>", 
"<span class=\"comment\"> * @find: find the next occurrence of the pattern</span>", 
"<span class=\"comment\"> * @destroy: destroy algorithm specific parts of a search configuration</span>", 
"<span class=\"comment\"> * @get_pattern: return head of pattern</span>", 
"<span class=\"comment\"> * @get_pattern_len: return length of pattern</span>", 
"<span class=\"comment\"> * @owner: module reference to algorithm</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ts_ops\">ts_ops</a>", 
"{", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<span class=\"ts\"/>(*<a class=\"id\" href=\"#init\">init</a>)(const void *, unsigned int, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>, int);", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#find\">find</a>)(struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ts_state\">ts_state</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#destroy\">destroy</a>)(struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *);", 
"<span class=\"ts\"/>void *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#get_pattern\">get_pattern</a>)(struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *);", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#get_pattern_len\">get_pattern_len</a>)(struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct ts_config - search configuration</span>", 
"<span class=\"comment\"> * @ops: operations of chosen algorithm</span>", 
"<span class=\"comment\"> * @flags: flags</span>", 
"<span class=\"comment\"> * @get_next_block: callback to fetch the next block to search in</span>", 
"<span class=\"comment\"> * @finish: callback to finalize a search</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ts_config\">ts_config</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ts_ops\">ts_ops</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>int <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/**</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get_next_block - fetch next block of data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @consumed: number of bytes consumed by the caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @dst: destination buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @conf: search configuration</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @state: search state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Called repeatedly until 0 is returned. Must assign the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * head of the next block of data to &amp;*dst and return the length</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the block or 0 if at the end. consumed == 0 indicates</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a new search. May store/read persistent values in state-&gt;cb.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#get_next_block\">get_next_block</a>)(unsigned int <a class=\"id\" href=\"#consumed\">consumed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const <a class=\"id\" href=\"#u8\">u8</a> **<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#conf\">conf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#ts_state\">ts_state</a> *<a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/**</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * finish - finalize/clean a series of get_next_block() calls</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @conf: search configuration</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @state: search state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Called after the last use of get_next_block(), may be used</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to cleanup any leftovers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#finish\">finish</a>)(struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#conf\">conf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#ts_state\">ts_state</a> *<a class=\"id\" href=\"#state\">state</a>);", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * textsearch_next - continue searching for a pattern</span>", 
"<span class=\"comment\"> * @conf: search configuration</span>", 
"<span class=\"comment\"> * @state: search state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Continues a search looking for more occurrences of the pattern.</span>", 
"<span class=\"comment\"> * textsearch_find() must be called to find the first occurrence</span>", 
"<span class=\"comment\"> * in order to reset the state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the position of the next occurrence of the pattern or</span>", 
"<span class=\"comment\"> * UINT_MAX if not match was found.</span>", 
"<span class=\"comment\"> */</span> ", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#textsearch_next\">textsearch_next</a>(struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#conf\">conf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#ts_state\">ts_state</a> *<a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#conf\">conf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#find\">find</a>(<a class=\"id\" href=\"#conf\">conf</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#conf\">conf</a>-><a class=\"id\" href=\"#finish\">finish</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#conf\">conf</a>-><a class=\"id\" href=\"#finish\">finish</a>(<a class=\"id\" href=\"#conf\">conf</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * textsearch_find - start searching for a pattern</span>", 
"<span class=\"comment\"> * @conf: search configuration</span>", 
"<span class=\"comment\"> * @state: search state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the position of first occurrence of the pattern or</span>", 
"<span class=\"comment\"> * UINT_MAX if no match was found.</span>", 
"<span class=\"comment\"> */</span> ", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#textsearch_find\">textsearch_find</a>(struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#conf\">conf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#ts_state\">ts_state</a> *<a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#textsearch_next\">textsearch_next</a>(<a class=\"id\" href=\"#conf\">conf</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * textsearch_get_pattern - return head of the pattern</span>", 
"<span class=\"comment\"> * @conf: search configuration</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#textsearch_get_pattern\">textsearch_get_pattern</a>(struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#conf\">conf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#conf\">conf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#get_pattern\">get_pattern</a>(<a class=\"id\" href=\"#conf\">conf</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * textsearch_get_pattern_len - return length of the pattern</span>", 
"<span class=\"comment\"> * @conf: search configuration</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#textsearch_get_pattern_len\">textsearch_get_pattern_len</a>(struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#conf\">conf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#conf\">conf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#get_pattern_len\">get_pattern_len</a>(<a class=\"id\" href=\"#conf\">conf</a>);", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#textsearch_register\">textsearch_register</a>(struct <a class=\"id\" href=\"#ts_ops\">ts_ops</a> *);", 
"extern int <a class=\"id\" href=\"#textsearch_unregister\">textsearch_unregister</a>(struct <a class=\"id\" href=\"#ts_ops\">ts_ops</a> *);", 
"extern struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#textsearch_prepare\">textsearch_prepare</a>(const char *, const void *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>, int);", 
"extern void <a class=\"id\" href=\"#textsearch_destroy\">textsearch_destroy</a>(struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#conf\">conf</a>);", 
"extern unsigned int <a class=\"id\" href=\"#textsearch_find_continuous\">textsearch_find_continuous</a>(struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#ts_state\">ts_state</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const void *, unsigned int);", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TS_PRIV_ALIGNTO\">TS_PRIV_ALIGNTO</a><span class=\"ts\"/>8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TS_PRIV_ALIGN\">TS_PRIV_ALIGN</a>(<a class=\"id\" href=\"#len\">len</a>) (((<a class=\"id\" href=\"#len\">len</a>) + <a class=\"id\" href=\"#TS_PRIV_ALIGNTO\">TS_PRIV_ALIGNTO</a>-1) &amp; ~(<a class=\"id\" href=\"#TS_PRIV_ALIGNTO\">TS_PRIV_ALIGNTO</a>-1))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#alloc_ts_config\">alloc_ts_config</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#payload\">payload</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#conf\">conf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#conf\">conf</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#TS_PRIV_ALIGN\">TS_PRIV_ALIGN</a>(sizeof(*<a class=\"id\" href=\"#conf\">conf</a>)) + <a class=\"id\" href=\"#payload\">payload</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#conf\">conf</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#conf\">conf</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#ts_config_priv\">ts_config_priv</a>(struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#conf\">conf</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#conf\">conf</a> + <a class=\"id\" href=\"#TS_PRIV_ALIGN\">TS_PRIV_ALIGN</a>(sizeof(struct <a class=\"id\" href=\"#ts_config\">ts_config</a>)));", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/a4/f70d4d380eec942b9aebc87ca691aac2bbbc00.xr', __xr_tmp);
