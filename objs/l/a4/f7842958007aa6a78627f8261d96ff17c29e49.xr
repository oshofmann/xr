var __xr_tmp = [
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pci_request_region - Reserve PCI I/O and memory resource</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pdev: PCI device whose resources are to be reserved</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bar: BAR to be reserved</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@res_name: Name to be associated with resource</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Mark the PCI region associated with PCI device @pdev BAR @bar as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>being reserved by owner @res_name.  Do not access any</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>address inside the PCI regions unless this call returns</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>successfully.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 0 on success, or %EBUSY on error.  A warning</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>message is also printed on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_request_region\">pci_request_region</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, int <a class=\"id\" href=\"#bar\">bar</a>, const char *<a class=\"id\" href=\"#res_name\">res_name</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pci_request_region\">__pci_request_region</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>, <a class=\"id\" href=\"#res_name\">res_name</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pci_request_region_exclusive - Reserved PCI I/O and memory resource</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pdev: PCI device whose resources are to be reserved</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bar: BAR to be reserved</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@res_name: Name to be associated with resource.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Mark the PCI region associated with PCI device @pdev BR @bar as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>being reserved by owner @res_name.  Do not access any</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>address inside the PCI regions unless this call returns</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>successfully.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 0 on success, or %EBUSY on error.  A warning</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>message is also printed on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The key difference that _exclusive makes it that userspace is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>explicitly not allowed to map the resource via /dev/mem or</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>sysfs.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_request_region_exclusive\">pci_request_region_exclusive</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, int <a class=\"id\" href=\"#bar\">bar</a>, const char *<a class=\"id\" href=\"#res_name\">res_name</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pci_request_region\">__pci_request_region</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>, <a class=\"id\" href=\"#res_name\">res_name</a>, <a class=\"id\" href=\"#IORESOURCE_EXCLUSIVE\">IORESOURCE_EXCLUSIVE</a>);", 
"}", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_release_selected_regions - Release selected PCI I/O and memory resources</span>", 
"<span class=\"comment\"> * @pdev: PCI device whose resources were previously reserved</span>", 
"<span class=\"comment\"> * @bars: Bitmask of BARs to be released</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Release selected PCI I/O and memory resources previously reserved.</span>", 
"<span class=\"comment\"> * Call this function only after all use of the PCI regions has ceased.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_release_selected_regions\">pci_release_selected_regions</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, int <a class=\"id\" href=\"#bars\">bars</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 6; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bars\">bars</a> &amp; (1 << <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_release_region\">pci_release_region</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__pci_request_selected_regions\">__pci_request_selected_regions</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, int <a class=\"id\" href=\"#bars\">bars</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#res_name\">res_name</a>, int <a class=\"id\" href=\"#excl\">excl</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 6; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bars\">bars</a> &amp; (1 << <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__pci_request_region\">__pci_request_region</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#res_name\">res_name</a>, <a class=\"id\" href=\"#excl\">excl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/>while(--<a class=\"id\" href=\"#i\">i</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bars\">bars</a> &amp; (1 << <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_release_region\">pci_release_region</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_request_selected_regions - Reserve selected PCI I/O and memory resources</span>", 
"<span class=\"comment\"> * @pdev: PCI device whose resources are to be reserved</span>", 
"<span class=\"comment\"> * @bars: Bitmask of BARs to be requested</span>", 
"<span class=\"comment\"> * @res_name: Name to be associated with resource</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_request_selected_regions\">pci_request_selected_regions</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, int <a class=\"id\" href=\"#bars\">bars</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#res_name\">res_name</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pci_request_selected_regions\">__pci_request_selected_regions</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bars\">bars</a>, <a class=\"id\" href=\"#res_name\">res_name</a>, 0);", 
"}", 
"", 
"int <a class=\"id\" href=\"#pci_request_selected_regions_exclusive\">pci_request_selected_regions_exclusive</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#bars\">bars</a>, const char *<a class=\"id\" href=\"#res_name\">res_name</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pci_request_selected_regions\">__pci_request_selected_regions</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bars\">bars</a>, <a class=\"id\" href=\"#res_name\">res_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IORESOURCE_EXCLUSIVE\">IORESOURCE_EXCLUSIVE</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pci_release_regions - Release reserved PCI I/O and memory resources</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pdev: PCI device whose resources were previously reserved by pci_request_regions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Releases all PCI I/O and memory resources previously reserved by a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>successful call to pci_request_regions.  Call this function only</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>after all use of the PCI regions has ceased.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#pci_release_regions\">pci_release_regions</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_release_selected_regions\">pci_release_selected_regions</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, (1 << 6) - 1);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pci_request_regions - Reserved PCI I/O and memory resources</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pdev: PCI device whose resources are to be reserved</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@res_name: Name to be associated with resource.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Mark all PCI regions associated with PCI device @pdev as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>being reserved by owner @res_name.  Do not access any</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>address inside the PCI regions unless this call returns</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>successfully.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 0 on success, or %EBUSY on error.  A warning</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>message is also printed on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_request_regions\">pci_request_regions</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, const char *<a class=\"id\" href=\"#res_name\">res_name</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_request_selected_regions\">pci_request_selected_regions</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, ((1 << 6) - 1), <a class=\"id\" href=\"#res_name\">res_name</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pci_request_regions_exclusive - Reserved PCI I/O and memory resources</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pdev: PCI device whose resources are to be reserved</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@res_name: Name to be associated with resource.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Mark all PCI regions associated with PCI device @pdev as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>being reserved by owner @res_name.  Do not access any</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>address inside the PCI regions unless this call returns</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>successfully.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pci_request_regions_exclusive() will mark the region so that</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>/dev/mem and the sysfs MMIO access will not be allowed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 0 on success, or %EBUSY on error.  A warning</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>message is also printed on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_request_regions_exclusive\">pci_request_regions_exclusive</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, const char *<a class=\"id\" href=\"#res_name\">res_name</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_request_selected_regions_exclusive\">pci_request_selected_regions_exclusive</a>(<a class=\"id\" href=\"#pdev\">pdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((1 << 6) - 1), <a class=\"id\" href=\"#res_name\">res_name</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__pci_set_master\">__pci_set_master</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#old_cmd\">old_cmd</a>, <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, &amp;<a class=\"id\" href=\"#old_cmd\">old_cmd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enable\">enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#old_cmd\">old_cmd</a> | <a class=\"id\" href=\"#PCI_COMMAND_MASTER\">PCI_COMMAND_MASTER</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#old_cmd\">old_cmd</a> &amp; ~<a class=\"id\" href=\"#PCI_COMMAND_MASTER\">PCI_COMMAND_MASTER</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> != <a class=\"id\" href=\"#old_cmd\">old_cmd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"%s bus mastering\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable\">enable</a> ? \"enabling\" : \"disabling\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#is_busmaster\">is_busmaster</a> = <a class=\"id\" href=\"#enable\">enable</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_set_master - enables bus-mastering for device dev</span>", 
"<span class=\"comment\"> * @dev: the PCI device to enable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Enables bus-mastering on the device and calls pcibios_set_master()</span>", 
"<span class=\"comment\"> * to do the needed arch specific settings.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_set_master\">pci_set_master</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pci_set_master\">__pci_set_master</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_set_master\">pcibios_set_master</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_clear_master - disables bus-mastering for device dev</span>", 
"<span class=\"comment\"> * @dev: the PCI device to disable</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_clear_master\">pci_clear_master</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pci_set_master\">__pci_set_master</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_set_cacheline_size - ensure the CACHE_LINE_SIZE register is programmed</span>", 
"<span class=\"comment\"> * @dev: the PCI device for which MWI is to be enabled</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Helper function for pci_set_mwi.</span>", 
"<span class=\"comment\"> * Originally copied from drivers/net/acenic.c.</span>", 
"<span class=\"comment\"> * Copyright 1998-2001 by Jes Sorensen, &lt;jes@trained-monkey.org&gt;.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS: An appropriate -ERRNO error value on error, or zero for success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_set_cacheline_size\">pci_set_cacheline_size</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cacheline_size\">cacheline_size</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_cache_line_size\">pci_cache_line_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate current setting: the PCI_CACHE_LINE_SIZE must be</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   equal to or multiple of the right value. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CACHE_LINE_SIZE\">PCI_CACHE_LINE_SIZE</a>, &amp;<a class=\"id\" href=\"#cacheline_size\">cacheline_size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cacheline_size\">cacheline_size</a> >= <a class=\"id\" href=\"#pci_cache_line_size\">pci_cache_line_size</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#cacheline_size\">cacheline_size</a> % <a class=\"id\" href=\"#pci_cache_line_size\">pci_cache_line_size</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Write the correct value. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CACHE_LINE_SIZE\">PCI_CACHE_LINE_SIZE</a>, <a class=\"id\" href=\"#pci_cache_line_size\">pci_cache_line_size</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Read it back. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CACHE_LINE_SIZE\">PCI_CACHE_LINE_SIZE</a>, &amp;<a class=\"id\" href=\"#cacheline_size\">cacheline_size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cacheline_size\">cacheline_size</a> == <a class=\"id\" href=\"#pci_cache_line_size\">pci_cache_line_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"cache line size of %d is not \"", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"supported\\n\", <a class=\"id\" href=\"#pci_cache_line_size\">pci_cache_line_size</a> << 2);", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_set_cacheline_size\">pci_set_cacheline_size</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#PCI_DISABLE_MWI\">PCI_DISABLE_MWI</a>", 
"int <a class=\"id\" href=\"#pci_set_mwi\">pci_set_mwi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#pci_try_set_mwi\">pci_try_set_mwi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#pci_clear_mwi\">pci_clear_mwi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"}", 
"", 
"#else", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_set_mwi - enables memory-write-invalidate PCI transaction</span>", 
"<span class=\"comment\"> * @dev: the PCI device for which MWI is enabled</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Enables the Memory-Write-Invalidate transaction in %PCI_COMMAND.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS: An appropriate -ERRNO error value on error, or zero for success.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#pci_set_mwi\">pci_set_mwi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pci_set_cacheline_size\">pci_set_cacheline_size</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, &amp;<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>if (! (<a class=\"id\" href=\"#cmd\">cmd</a> &amp; <a class=\"id\" href=\"#PCI_COMMAND_INVALIDATE\">PCI_COMMAND_INVALIDATE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_dbg\">dev_dbg</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"enabling Mem-Wr-Inval\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> |= <a class=\"id\" href=\"#PCI_COMMAND_INVALIDATE\">PCI_COMMAND_INVALIDATE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_try_set_mwi - enables memory-write-invalidate PCI transaction</span>", 
"<span class=\"comment\"> * @dev: the PCI device for which MWI is enabled</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Enables the Memory-Write-Invalidate transaction in %PCI_COMMAND.</span>", 
"<span class=\"comment\"> * Callers are not required to check the return value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS: An appropriate -ERRNO error value on error, or zero for success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_try_set_mwi\">pci_try_set_mwi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pci_set_mwi\">pci_set_mwi</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_clear_mwi - disables Memory-Write-Invalidate for device dev</span>", 
"<span class=\"comment\"> * @dev: the PCI device to disable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Disables PCI Memory-Write-Invalidate transaction on the device</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#pci_clear_mwi\">pci_clear_mwi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, &amp;<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> &amp; <a class=\"id\" href=\"#PCI_COMMAND_INVALIDATE\">PCI_COMMAND_INVALIDATE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a> &= ~<a class=\"id\" href=\"#PCI_COMMAND_INVALIDATE\">PCI_COMMAND_INVALIDATE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* ! PCI_DISABLE_MWI */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_intx - enables/disables PCI INTx for device dev</span>", 
"<span class=\"comment\"> * @pdev: the PCI device to operate on</span>", 
"<span class=\"comment\"> * @enable: boolean: whether to enable or disable PCI INTx</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Enables/disables PCI INTx for device dev</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#pci_intx\">pci_intx</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pci_command\">pci_command</a>, <a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, &amp;<a class=\"id\" href=\"#pci_command\">pci_command</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enable\">enable</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#pci_command\">pci_command</a> &amp; ~<a class=\"id\" href=\"#PCI_COMMAND_INTX_DISABLE\">PCI_COMMAND_INTX_DISABLE</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#pci_command\">pci_command</a> | <a class=\"id\" href=\"#PCI_COMMAND_INTX_DISABLE\">PCI_COMMAND_INTX_DISABLE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a> != <a class=\"id\" href=\"#pci_command\">pci_command</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_devres\">pci_devres</a> *<a class=\"id\" href=\"#dr\">dr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#find_pci_dr\">find_pci_dr</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dr\">dr</a> && !<a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#restore_intx\">restore_intx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#restore_intx\">restore_intx</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#orig_intx\">orig_intx</a> = !<a class=\"id\" href=\"#enable\">enable</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_msi_off - disables any msi or msix capabilities</span>", 
"<span class=\"comment\"> * @dev: the PCI device to operate on</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If you want to use msi see pci_enable_msi and friends.</span>", 
"<span class=\"comment\"> * This is a lower level primitive that allows us to disable</span>", 
"<span class=\"comment\"> * msi operation at the device level.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_msi_off\">pci_msi_off</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#control\">control</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_capability\">pci_find_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_MSI\">PCI_CAP_ID_MSI</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_MSI_FLAGS\">PCI_MSI_FLAGS</a>, &amp;<a class=\"id\" href=\"#control\">control</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#control\">control</a> &= ~<a class=\"id\" href=\"#PCI_MSI_FLAGS_ENABLE\">PCI_MSI_FLAGS_ENABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_MSI_FLAGS\">PCI_MSI_FLAGS</a>, <a class=\"id\" href=\"#control\">control</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_capability\">pci_find_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_MSIX\">PCI_CAP_ID_MSIX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_MSIX_FLAGS\">PCI_MSIX_FLAGS</a>, &amp;<a class=\"id\" href=\"#control\">control</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#control\">control</a> &= ~<a class=\"id\" href=\"#PCI_MSIX_FLAGS_ENABLE\">PCI_MSIX_FLAGS_ENABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_MSIX_FLAGS\">PCI_MSIX_FLAGS</a>, <a class=\"id\" href=\"#control\">control</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_msi_off\">pci_msi_off</a>);", 
"", 
"int <a class=\"id\" href=\"#pci_set_dma_max_seg_size\">pci_set_dma_max_seg_size</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dma_set_max_seg_size\">dma_set_max_seg_size</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_set_dma_max_seg_size\">pci_set_dma_max_seg_size</a>);", 
"", 
"int <a class=\"id\" href=\"#pci_set_dma_seg_boundary\">pci_set_dma_seg_boundary</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned long <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dma_set_seg_boundary\">dma_set_seg_boundary</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_set_dma_seg_boundary\">pci_set_dma_seg_boundary</a>);", 
"", 
"static int <a class=\"id\" href=\"#pcie_flr\">pcie_flr</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#probe\">probe</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#cap\">cap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#control\">control</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_pcie_cap\">pci_pcie_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCAP\">PCI_EXP_DEVCAP</a>, &amp;<a class=\"id\" href=\"#cap\">cap</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#PCI_EXP_DEVCAP_FLR\">PCI_EXP_DEVCAP_FLR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probe\">probe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for Transaction Pending bit clean */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>((1 << (<a class=\"id\" href=\"#i\">i</a> - 1)) * 100);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVSTA\">PCI_EXP_DEVSTA</a>, &amp;<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#PCI_EXP_DEVSTA_TRPND\">PCI_EXP_DEVSTA_TRPND</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#clear\">clear</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"transaction is not cleared; \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"proceeding with reset anyway\\n\");", 
"", 
"<a class=\"id\" href=\"#clear\">clear</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCTL\">PCI_EXP_DEVCTL</a>, &amp;<a class=\"id\" href=\"#control\">control</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#control\">control</a> |= <a class=\"id\" href=\"#PCI_EXP_DEVCTL_BCR_FLR\">PCI_EXP_DEVCTL_BCR_FLR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCTL\">PCI_EXP_DEVCTL</a>, <a class=\"id\" href=\"#control\">control</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(100);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pci_af_flr\">pci_af_flr</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#probe\">probe</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cap\">cap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_capability\">pci_find_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_AF\">PCI_CAP_ID_AF</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_AF_CAP\">PCI_AF_CAP</a>, &amp;<a class=\"id\" href=\"#cap\">cap</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#PCI_AF_CAP_TP\">PCI_AF_CAP_TP</a>) || !(<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#PCI_AF_CAP_FLR\">PCI_AF_CAP_FLR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probe\">probe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for Transaction Pending bit clean */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>((1 << (<a class=\"id\" href=\"#i\">i</a> - 1)) * 100);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_AF_STATUS\">PCI_AF_STATUS</a>, &amp;<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#PCI_AF_STATUS_TP\">PCI_AF_STATUS_TP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#clear\">clear</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"transaction is not cleared; \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"proceeding with reset anyway\\n\");", 
"", 
"<a class=\"id\" href=\"#clear\">clear</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_AF_CTRL\">PCI_AF_CTRL</a>, <a class=\"id\" href=\"#PCI_AF_CTRL_FLR\">PCI_AF_CTRL_FLR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(100);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pci_pm_reset\">pci_pm_reset</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#probe\">probe</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#csr\">csr</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a> + <a class=\"id\" href=\"#PCI_PM_CTRL\">PCI_PM_CTRL</a>, &amp;<a class=\"id\" href=\"#csr\">csr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#csr\">csr</a> &amp; <a class=\"id\" href=\"#PCI_PM_CTRL_NO_SOFT_RESET\">PCI_PM_CTRL_NO_SOFT_RESET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probe\">probe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#current_state\">current_state</a> != <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csr\">csr</a> &= ~<a class=\"id\" href=\"#PCI_PM_CTRL_STATE_MASK\">PCI_PM_CTRL_STATE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csr\">csr</a> |= <a class=\"id\" href=\"#PCI_D3hot\">PCI_D3hot</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a> + <a class=\"id\" href=\"#PCI_PM_CTRL\">PCI_PM_CTRL</a>, <a class=\"id\" href=\"#csr\">csr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_d3_sleep\">pci_dev_d3_sleep</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csr\">csr</a> &= ~<a class=\"id\" href=\"#PCI_PM_CTRL_STATE_MASK\">PCI_PM_CTRL_STATE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csr\">csr</a> |= <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a> + <a class=\"id\" href=\"#PCI_PM_CTRL\">PCI_PM_CTRL</a>, <a class=\"id\" href=\"#csr\">csr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_d3_sleep\">pci_dev_d3_sleep</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pci_parent_bus_reset\">pci_parent_bus_reset</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#probe\">probe</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#ctrl\">ctrl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_is_root_bus\">pci_is_root_bus</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>) || <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a> || !<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#devices\">devices</a>, <a class=\"id\" href=\"#bus_list\">bus_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pdev\">pdev</a> != <a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probe\">probe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>, <a class=\"id\" href=\"#PCI_BRIDGE_CONTROL\">PCI_BRIDGE_CONTROL</a>, &amp;<a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a> |= <a class=\"id\" href=\"#PCI_BRIDGE_CTL_BUS_RESET\">PCI_BRIDGE_CTL_BUS_RESET</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>, <a class=\"id\" href=\"#PCI_BRIDGE_CONTROL\">PCI_BRIDGE_CONTROL</a>, <a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(100);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a> &= ~<a class=\"id\" href=\"#PCI_BRIDGE_CTL_BUS_RESET\">PCI_BRIDGE_CTL_BUS_RESET</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>, <a class=\"id\" href=\"#PCI_BRIDGE_CONTROL\">PCI_BRIDGE_CONTROL</a>, <a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(100);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pci_dev_reset\">pci_dev_reset</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#probe\">probe</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#probe\">probe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_block_user_cfg_access\">pci_block_user_cfg_access</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* block PM suspend, driver probe, etc. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_lock\">device_lock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pci_dev_specific_reset\">pci_dev_specific_reset</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#probe\">probe</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pcie_flr\">pcie_flr</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#probe\">probe</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pci_af_flr\">pci_af_flr</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#probe\">probe</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pci_pm_reset\">pci_pm_reset</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#probe\">probe</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pci_parent_bus_reset\">pci_parent_bus_reset</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#probe\">probe</a>);", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#probe\">probe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unlock\">device_unlock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_unblock_user_cfg_access\">pci_unblock_user_cfg_access</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __pci_reset_function - reset a PCI device function</span>", 
"<span class=\"comment\"> * @dev: PCI device to reset</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Some devices allow an individual function to be reset without affecting</span>", 
"<span class=\"comment\"> * other functions in the same device.  The PCI device must be responsive</span>", 
"<span class=\"comment\"> * to PCI config space in order to use this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The device function is presumed to be unused when this function is called.</span>", 
"<span class=\"comment\"> * Resetting the device will make the contents of PCI configuration space</span>", 
"<span class=\"comment\"> * random, so any caller of this must be prepared to reinitialise the</span>", 
"<span class=\"comment\"> * device including MSI, bus mastering, BARs, decoding IO and memory spaces,</span>", 
"<span class=\"comment\"> * etc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if the device function was successfully reset or negative if the</span>", 
"<span class=\"comment\"> * device doesn't support resetting a single function.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__pci_reset_function\">__pci_reset_function</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_dev_reset\">pci_dev_reset</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__pci_reset_function\">__pci_reset_function</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_probe_reset_function - check whether the device can be safely reset</span>", 
"<span class=\"comment\"> * @dev: PCI device to reset</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Some devices allow an individual function to be reset without affecting</span>", 
"<span class=\"comment\"> * other functions in the same device.  The PCI device must be responsive</span>", 
"<span class=\"comment\"> * to PCI config space in order to use this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if the device function can be reset or negative if the</span>", 
"<span class=\"comment\"> * device doesn't support resetting a single function.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_probe_reset_function\">pci_probe_reset_function</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_dev_reset\">pci_dev_reset</a>(<a class=\"id\" href=\"#dev\">dev</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_reset_function - quiesce and reset a PCI device function</span>", 
"<span class=\"comment\"> * @dev: PCI device to reset</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Some devices allow an individual function to be reset without affecting</span>", 
"<span class=\"comment\"> * other functions in the same device.  The PCI device must be responsive</span>", 
"<span class=\"comment\"> * to PCI config space in order to use this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function does not just reset the PCI portion of a device, but</span>", 
"<span class=\"comment\"> * clears all the state associated with the device.  This function differs</span>", 
"<span class=\"comment\"> * from __pci_reset_function in that it saves and restores device state</span>", 
"<span class=\"comment\"> * over the reset.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if the device function was successfully reset or negative if the</span>", 
"<span class=\"comment\"> * device doesn't support resetting a single function.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_reset_function\">pci_reset_function</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pci_dev_reset\">pci_dev_reset</a>(<a class=\"id\" href=\"#dev\">dev</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
];
xr_frag_insert('l/a4/f7842958007aa6a78627f8261d96ff17c29e49.xr', __xr_tmp);
