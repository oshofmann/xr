var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * include/linux/sunrpc/cache.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Generic code for various authentication-related caches</span>", 
"<span class=\"comment\"> * used by sunrpc clients and servers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2002 Neil Brown &lt;neilb@cse.unsw.edu.au&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Released under terms in GPL version 2.  See COPYING.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_SUNRPC_CACHE_H_\">_LINUX_SUNRPC_CACHE_H_</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_SUNRPC_CACHE_H_\">_LINUX_SUNRPC_CACHE_H_</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Each cache requires:</span>", 
"<span class=\"comment\"> *  - A 'struct cache_detail' which contains information specific to the cache</span>", 
"<span class=\"comment\"> *    for common code to use.</span>", 
"<span class=\"comment\"> *  - An item structure that must contain a \"struct cache_head\"</span>", 
"<span class=\"comment\"> *  - A lookup function defined using DefineCacheLookup</span>", 
"<span class=\"comment\"> *  - A 'put' function that can release a cache item. It will only</span>", 
"<span class=\"comment\"> *    be called after cache_put has succeed, so there are guarantee</span>", 
"<span class=\"comment\"> *    to be no references.</span>", 
"<span class=\"comment\"> *  - A function to calculate a hash of an item's key.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * as well as assorted code fragments (e.g. compare keys) and numbers</span>", 
"<span class=\"comment\"> * (e.g. hash size, goal_age, etc).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each cache must be registered so that it can be cleaned regularly.</span>", 
"<span class=\"comment\"> * When the cache is unregistered, it is flushed completely.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Entries have a ref count and a 'hashed' flag which counts the existance</span>", 
"<span class=\"comment\"> * in the hash table.</span>", 
"<span class=\"comment\"> * We only expire entries when refcount is zero.</span>", 
"<span class=\"comment\"> * Existance in the cache is counted  the refcount.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Every cache item has a common header that is used</span>", 
"<span class=\"comment\"> * for expiring and refreshing entries.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cache_head\">cache_head</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cache_head\">cache_head</a> * <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time_t\">time_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expiry_time\">expiry_time</a>;<span class=\"ts\"/><span class=\"comment\">/* After time time, don't use the data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time_t\">time_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_refresh\">last_refresh</a>;   <span class=\"comment\">/* If CACHE_PENDING, this is when upcall </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * was sent, else this is when update was received</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kref\">kref</a><span class=\"ts\"/><a class=\"id\" href=\"#ref\">ref</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#CACHE_VALID\">CACHE_VALID</a><span class=\"ts\"/>0<span class=\"ts\"/><span class=\"comment\">/* Entry contains valid data */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#CACHE_NEGATIVE\">CACHE_NEGATIVE</a><span class=\"ts\"/>1<span class=\"ts\"/><span class=\"comment\">/* Negative entry - there is no match for the key */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#CACHE_PENDING\">CACHE_PENDING</a><span class=\"ts\"/>2<span class=\"ts\"/><span class=\"comment\">/* An upcall has been sent but no reply received yet*/</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#CACHE_NEW_EXPIRY\">CACHE_NEW_EXPIRY</a> 120<span class=\"ts\"/><span class=\"comment\">/* keep new things pending confirmation for 120 seconds */</span>", 
"", 
"struct <a class=\"id\" href=\"#cache_detail_procfs\">cache_detail_procfs</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a><span class=\"ts\"/>*<a class=\"id\" href=\"#proc_ent\">proc_ent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a>   *<a class=\"id\" href=\"#flush_ent\">flush_ent</a>, *<a class=\"id\" href=\"#channel_ent\">channel_ent</a>, *<a class=\"id\" href=\"#content_ent\">content_ent</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#cache_detail_pipefs\">cache_detail_pipefs</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dir\">dir</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash_size\">hash_size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cache_head\">cache_head</a> **<span class=\"ts\"/><a class=\"id\" href=\"#hash_table\">hash_table</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rwlock_t\">rwlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash_lock\">hash_lock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inuse\">inuse</a>; <span class=\"comment\">/* active user-space update or lookup */</span>", 
"", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#cache_put\">cache_put</a>)(struct <a class=\"id\" href=\"#kref\">kref</a> *);", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#cache_upcall\">cache_upcall</a>)(struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *);", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#cache_parse\">cache_parse</a>)(struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#cache_show\">cache_show</a>)(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> *<a class=\"id\" href=\"#cd\">cd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#warn_no_listener\">warn_no_listener</a>)(struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> *<a class=\"id\" href=\"#cd\">cd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#has_died\">has_died</a>);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<span class=\"ts\"/>(*<a class=\"id\" href=\"#alloc\">alloc</a>)(void);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#match\">match</a>)(struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<a class=\"id\" href=\"#orig\">orig</a>, struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#init\">init</a>)(struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<a class=\"id\" href=\"#orig\">orig</a>, struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#update\">update</a>)(struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<a class=\"id\" href=\"#orig\">orig</a>, struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* fields below this comment are for internal use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and should not be touched by cache owners</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time_t\">time_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_time\">flush_time</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* flush all cache items with last_refresh</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * earlier than this */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#others\">others</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time_t\">time_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nextcheck\">nextcheck</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entries\">entries</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* fields for communication over channel */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#queue\">queue</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#readers\">readers</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* how many time is /chennel open */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time_t\">time_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_close\">last_close</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if no readers, when did last close */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time_t\">time_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_warn\">last_warn</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* when we last warned about no readers */</span>", 
"", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cache_detail_procfs\">cache_detail_procfs</a> <a class=\"id\" href=\"#procfs\">procfs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cache_detail_pipefs\">cache_detail_pipefs</a> <a class=\"id\" href=\"#pipefs\">pipefs</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#u\">u</a>;", 
"};", 
"", 
"", 
"<span class=\"comment\">/* this must be embedded in any request structure that</span>", 
"<span class=\"comment\"> * identifies an object that will want a callback on</span>", 
"<span class=\"comment\"> * a cache fill</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cache_req\">cache_req</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cache_deferred_req\">cache_deferred_req</a> *(*<a class=\"id\" href=\"#defer\">defer</a>)(struct <a class=\"id\" href=\"#cache_req\">cache_req</a> *<a class=\"id\" href=\"#req\">req</a>);", 
"};", 
"<span class=\"comment\">/* this must be embedded in a deferred_request that is being</span>", 
"<span class=\"comment\"> * delayed awaiting cache-fill</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cache_deferred_req\">cache_deferred_req</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>;<span class=\"ts\"/><span class=\"comment\">/* on hash chain */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#recent\">recent</a>; <span class=\"comment\">/* on fifo */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cache_head\">cache_head</a><span class=\"ts\"/>*<a class=\"id\" href=\"#item\">item</a>;  <span class=\"comment\">/* cache item we wait on */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#owner\">owner</a>; <span class=\"comment\">/* we might need to discard all defered requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * owned by someone */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#revisit\">revisit</a>)(struct <a class=\"id\" href=\"#cache_deferred_req\">cache_deferred_req</a> *<a class=\"id\" href=\"#req\">req</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#too_many\">too_many</a>);", 
"};", 
"", 
"", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#cache_file_operations_pipefs\">cache_file_operations_pipefs</a>;", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#content_file_operations_pipefs\">content_file_operations_pipefs</a>;", 
"extern const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#cache_flush_operations_pipefs\">cache_flush_operations_pipefs</a>;", 
"", 
"extern struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *", 
"<a class=\"id\" href=\"#sunrpc_cache_lookup\">sunrpc_cache_lookup</a>(struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> *<a class=\"id\" href=\"#detail\">detail</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<a class=\"id\" href=\"#key\">key</a>, int <a class=\"id\" href=\"#hash\">hash</a>);", 
"extern struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *", 
"<a class=\"id\" href=\"#sunrpc_cache_update\">sunrpc_cache_update</a>(struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> *<a class=\"id\" href=\"#detail\">detail</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<a class=\"id\" href=\"#old\">old</a>, int <a class=\"id\" href=\"#hash\">hash</a>);", 
"", 
"extern int", 
"<a class=\"id\" href=\"#sunrpc_cache_pipe_upcall\">sunrpc_cache_pipe_upcall</a>(struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> *<a class=\"id\" href=\"#detail\">detail</a>, struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#cache_request\">cache_request</a>)(struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      char **,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int *));", 
"", 
"", 
"extern void <a class=\"id\" href=\"#cache_clean_deferred\">cache_clean_deferred</a>(void *<a class=\"id\" href=\"#owner\">owner</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cache_head\">cache_head</a>  *<a class=\"id\" href=\"#cache_get\">cache_get</a>(struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kref_get\">kref_get</a>(&amp;<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#ref\">ref</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#h\">h</a>;", 
"}", 
"", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cache_put\">cache_put</a>(struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<a class=\"id\" href=\"#h\">h</a>, struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> *<a class=\"id\" href=\"#cd\">cd</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#ref\">ref</a>.<a class=\"id\" href=\"#refcount\">refcount</a>) <= 2 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#expiry_time\">expiry_time</a> &lt; <a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#nextcheck\">nextcheck</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#nextcheck\">nextcheck</a> = <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#expiry_time\">expiry_time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kref_put\">kref_put</a>(&amp;<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#ref\">ref</a>, <a class=\"id\" href=\"#cd\">cd</a>-><a class=\"id\" href=\"#cache_put\">cache_put</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cache_valid\">cache_valid</a>(struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* If an item has been unhashed pending removal when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the refcount drops to 0, the expiry_time will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set to 0.  We don't want to consider such items</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * valid in this context even though CACHE_VALID is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#expiry_time\">expiry_time</a> != 0 && <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#CACHE_VALID\">CACHE_VALID</a>, &amp;<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#flags\">flags</a>));", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#cache_check\">cache_check</a>(struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> *<a class=\"id\" href=\"#detail\">detail</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#cache_head\">cache_head</a> *<a class=\"id\" href=\"#h\">h</a>, struct <a class=\"id\" href=\"#cache_req\">cache_req</a> *<a class=\"id\" href=\"#rqstp\">rqstp</a>);", 
"extern void <a class=\"id\" href=\"#cache_flush\">cache_flush</a>(void);", 
"extern void <a class=\"id\" href=\"#cache_purge\">cache_purge</a>(struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> *<a class=\"id\" href=\"#detail\">detail</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NEVER\">NEVER</a> (0x7FFFFFFF)", 
"extern void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cache_initialize\">cache_initialize</a>(void);", 
"extern int <a class=\"id\" href=\"#cache_register\">cache_register</a>(struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> *<a class=\"id\" href=\"#cd\">cd</a>);", 
"extern void <a class=\"id\" href=\"#cache_unregister\">cache_unregister</a>(struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> *<a class=\"id\" href=\"#cd\">cd</a>);", 
"", 
"extern int <a class=\"id\" href=\"#sunrpc_cache_register_pipefs\">sunrpc_cache_register_pipefs</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>, const char *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode_t\">mode_t</a>, struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> *);", 
"extern void <a class=\"id\" href=\"#sunrpc_cache_unregister_pipefs\">sunrpc_cache_unregister_pipefs</a>(struct <a class=\"id\" href=\"#cache_detail\">cache_detail</a> *);", 
"", 
"extern void <a class=\"id\" href=\"#qword_add\">qword_add</a>(char **<a class=\"id\" href=\"#bpp\">bpp</a>, int *<a class=\"id\" href=\"#lp\">lp</a>, char *<a class=\"id\" href=\"#str\">str</a>);", 
"extern void <a class=\"id\" href=\"#qword_addhex\">qword_addhex</a>(char **<a class=\"id\" href=\"#bpp\">bpp</a>, int *<a class=\"id\" href=\"#lp\">lp</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#blen\">blen</a>);", 
"extern int <a class=\"id\" href=\"#qword_get\">qword_get</a>(char **<a class=\"id\" href=\"#bpp\">bpp</a>, char *<a class=\"id\" href=\"#dest\">dest</a>, int <a class=\"id\" href=\"#bufsize\">bufsize</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#get_int\">get_int</a>(char **<a class=\"id\" href=\"#bpp\">bpp</a>, int *<a class=\"id\" href=\"#anint\">anint</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[50];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ep\">ep</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rv\">rv</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#qword_get\">qword_get</a>(<a class=\"id\" href=\"#bpp\">bpp</a>, <a class=\"id\" href=\"#buf\">buf</a>, 50);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 0) return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> ==0) return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = <a class=\"id\" href=\"#simple_strtol\">simple_strtol</a>(<a class=\"id\" href=\"#buf\">buf</a>, &amp;<a class=\"id\" href=\"#ep\">ep</a>, 0);", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#ep\">ep</a>) return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#anint\">anint</a> = <a class=\"id\" href=\"#rv\">rv</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#time_t\">time_t</a> <a class=\"id\" href=\"#get_expiry\">get_expiry</a>(char **<a class=\"id\" href=\"#bpp\">bpp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rv\">rv</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_int\">get_int</a>(<a class=\"id\" href=\"#bpp\">bpp</a>, &amp;<a class=\"id\" href=\"#rv\">rv</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rv\">rv</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rv\">rv</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/*  _LINUX_SUNRPC_CACHE_H_ */</span>", 
];
xr_frag_insert('l/a5/048b658ec5be28bc9d64d90e5123c8b65e5b61.xr', __xr_tmp);
