var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Implementation of the extensible bitmap type.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author : Stephen Smalley, &lt;sds@epoch.ncsc.mil&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Updated: Hewlett-Packard &lt;paul.moore@hp.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      Added support to import/export the NetLabel category bitmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (c) Copyright Hewlett-Packard Development Company, L.P., 2006</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Updated: KaiGai Kohei &lt;kaigai@ak.jp.nec.com&gt;</span>", 
"<span class=\"comment\"> *      Applied standard bit operations to improve bitmap scanning.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netlabel\">netlabel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"ebitmap.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"policydb.h\"", 
"", 
"int <a class=\"id\" href=\"#ebitmap_cmp\">ebitmap_cmp</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#e1\">e1</a>, struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#e2\">e2</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ebitmap_node\">ebitmap_node</a> *<a class=\"id\" href=\"#n1\">n1</a>, *<a class=\"id\" href=\"#n2\">n2</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#e1\">e1</a>-><a class=\"id\" href=\"#highbit\">highbit</a> != <a class=\"id\" href=\"#e2\">e2</a>-><a class=\"id\" href=\"#highbit\">highbit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n1\">n1</a> = <a class=\"id\" href=\"#e1\">e1</a>-><a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n2\">n2</a> = <a class=\"id\" href=\"#e2\">e2</a>-><a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n1\">n1</a> && <a class=\"id\" href=\"#n2\">n2</a> &&", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#n1\">n1</a>-><a class=\"id\" href=\"#startbit\">startbit</a> == <a class=\"id\" href=\"#n2\">n2</a>-><a class=\"id\" href=\"#startbit\">startbit</a>) &&", 
"<span class=\"ts\"/>       !<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#n1\">n1</a>-><a class=\"id\" href=\"#maps\">maps</a>, <a class=\"id\" href=\"#n2\">n2</a>-><a class=\"id\" href=\"#maps\">maps</a>, <a class=\"id\" href=\"#EBITMAP_SIZE\">EBITMAP_SIZE</a> / 8)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n1\">n1</a> = <a class=\"id\" href=\"#n1\">n1</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n2\">n2</a> = <a class=\"id\" href=\"#n2\">n2</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n1\">n1</a> || <a class=\"id\" href=\"#n2\">n2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ebitmap_cpy\">ebitmap_cpy</a>(struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#ebitmap\">ebitmap</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ebitmap_node\">ebitmap_node</a> *<a class=\"id\" href=\"#n\">n</a>, *<a class=\"id\" href=\"#new\">new</a>, *<a class=\"id\" href=\"#prev\">prev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ebitmap_init\">ebitmap_init</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#new\">new</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ebitmap_destroy\">ebitmap_destroy</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
];
xr_frag_insert('l/a5/0890ad995c664b97892f13d8bc6ee4b85ff70b.xr', __xr_tmp);
