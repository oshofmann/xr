var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pci\">pci</a>-<a class=\"id\" href=\"#direct\">direct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"# <a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#numa_64\">numa_64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"# <a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mmconfig\">mmconfig</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"# <a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"cpu.h\"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>B step AMD K6 before B 9730xxxx have hardware bugs that can cause</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>misexecution of code under Linux. Owners of such processors should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>contact AMD for precise details and a CPU swap.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>See<span class=\"ts\"/>http://www.multimania.com/poulot/k6bug.html</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>http://www.amd.com/K6/k6docs/revgd.html</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The following test is erm.. interesting. AMD neglected to up</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the chip setting when fixing the bug but they also tweaked some</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>performance at the same time..</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"extern void <a class=\"id\" href=\"#vide\">vide</a>(void);", 
"<a class=\"id\" href=\"#__asm__\">__asm__</a>(\".align 4\\nvide: ret\");", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#init_amd_k5\">init_amd_k5</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * General Systems BIOSen alias the cpu frequency registers</span>", 
"<span class=\"comment\"> * of the Elan at 0x000df000. Unfortuantly, one of the Linux</span>", 
"<span class=\"comment\"> * drivers subsequently pokes it, and changes the CPU speed.</span>", 
"<span class=\"comment\"> * Workaround : Remove the unneeded alias.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CBAR\">CBAR</a><span class=\"ts\"/><span class=\"ts\"/>(0xfffc) <span class=\"comment\">/* Configuration Base Address  (32-bit) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CBAR_ENB\">CBAR_ENB</a><span class=\"ts\"/>(0x80000000)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CBAR_KEY\">CBAR_KEY</a><span class=\"ts\"/>(0X000000CB)", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 9 || <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 10) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inl\">inl</a>(<a class=\"id\" href=\"#CBAR\">CBAR</a>) &amp; <a class=\"id\" href=\"#CBAR_ENB\">CBAR_ENB</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outl\">outl</a>(0 | <a class=\"id\" href=\"#CBAR_KEY\">CBAR_KEY</a>, <a class=\"id\" href=\"#CBAR\">CBAR</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#init_amd_k6\">init_amd_k6</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mbytes\">mbytes</a> = <a class=\"id\" href=\"#num_physpages\">num_physpages</a> >> (20-<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> &lt; 6) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Based on AMD doc 20734R - June 2000 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_APIC\">X86_FEATURE_APIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_PGE\">X86_FEATURE_PGE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 6 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const int <a class=\"id\" href=\"#K6_BUG_LOOP\">K6_BUG_LOOP</a> = 1000000;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#f_vide\">f_vide</a>)(void);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#d2\">d2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"AMD K6 stepping B detected - \");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It looks like AMD fixed the 2.6.2 bug and improved indirect</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * calls at the same time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#K6_BUG_LOOP\">K6_BUG_LOOP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f_vide\">f_vide</a> = <a class=\"id\" href=\"#vide\">vide</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdtscl\">rdtscl</a>(<a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f_vide\">f_vide</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdtscl\">rdtscl</a>(<a class=\"id\" href=\"#d2\">d2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#d2\">d2</a>-<a class=\"id\" href=\"#d\">d</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a> &gt; 20*<a class=\"id\" href=\"#K6_BUG_LOOP\">K6_BUG_LOOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"system stability may be impaired when more than 32 MB are used.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"probably OK (after B9730xxxx).\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Please see http://membres.lycos.fr/poulot/k6bug.html\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* K6 with old style WHCR */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> &lt; 8 ||", 
"<span class=\"ts\"/>   (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 8 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> &lt; 8)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We can only write allocate on the low 508Mb */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mbytes\">mbytes</a> &gt; 508)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mbytes\">mbytes</a> = 508;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_K6_WHCR\">MSR_K6_WHCR</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#l\">l</a>&amp;0x0000FFFF) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = (1<<0)|((<a class=\"id\" href=\"#mbytes\">mbytes</a>/4)<<1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wbinvd\">wbinvd</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsr\">wrmsr</a>(<a class=\"id\" href=\"#MSR_K6_WHCR\">MSR_K6_WHCR</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Enabling old style K6 write allocation for %d Mb\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mbytes\">mbytes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 8 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> &gt; 7) ||", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 9 || <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 13) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The more serious chips .. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mbytes\">mbytes</a> &gt; 4092)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mbytes\">mbytes</a> = 4092;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_K6_WHCR\">MSR_K6_WHCR</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#l\">l</a>&amp;0xFFFF0000) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = ((<a class=\"id\" href=\"#mbytes\">mbytes</a>>>2)<<22)|(1<<16);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wbinvd\">wbinvd</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsr\">wrmsr</a>(<a class=\"id\" href=\"#MSR_K6_WHCR\">MSR_K6_WHCR</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Enabling new style K6 write allocation for %d Mb\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mbytes\">mbytes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 10) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* AMD Geode LX is model 10 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* placeholder for any needed mods */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#amd_k7_smp_check\">amd_k7_smp_check</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* calling is from identify_secondary_cpu() ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpu_index\">cpu_index</a> == <a class=\"id\" href=\"#boot_cpu_id\">boot_cpu_id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Certain Athlons might work (for various values of 'work') in SMP</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but they are not certified as MP capable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Athlon 660/661 is valid. */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 6) && ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 0) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 1)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#valid_k7\">valid_k7</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Duron 670 is valid */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 7) && (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#valid_k7\">valid_k7</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Athlon 662, Duron 671, and Athlon &gt;model 7 have capability</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bit. It's worth noting that the A5 stepping (662) of some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Athlon XP's have the MP bit set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See http://www.heise.de/newsticker/data/jow-18.10.01-000 for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * more.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 6) && (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> >= 2)) ||", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 7) && (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> >= 1)) ||", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> &gt; 7))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_mp\">cpu_has_mp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#valid_k7\">valid_k7</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we get here, not a certified SMP capable AMD system. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't taint if we are running SMP kernel on a single non-MP</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * approved Athlon</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(1, \"WARNING: This combination of AMD\"", 
"<span class=\"ts\"/><span class=\"ts\"/>\" processors is not suitable for SMP.\\n\");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_taint\">test_taint</a>(<a class=\"id\" href=\"#TAINT_UNSAFE_SMP\">TAINT_UNSAFE_SMP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_taint\">add_taint</a>(<a class=\"id\" href=\"#TAINT_UNSAFE_SMP\">TAINT_UNSAFE_SMP</a>);", 
"", 
"<a class=\"id\" href=\"#valid_k7\">valid_k7</a>:", 
"<span class=\"ts\"/>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#init_amd_k7\">init_amd_k7</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Bit 15 of Athlon specific MSR 15, needs to be 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to enable SSE on Palomino/Morgan/Barton CPU's.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the BIOS didn't enable it already, enable it here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> >= 6 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> <= 10) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_XMM\">X86_FEATURE_XMM</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Enabling disabled K7/SSE Support.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_K7_HWCR\">MSR_K7_HWCR</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> &= ~0x00008000;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsr\">wrmsr</a>(<a class=\"id\" href=\"#MSR_K7_HWCR\">MSR_K7_HWCR</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_XMM\">X86_FEATURE_XMM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It's been determined by AMD that Athlons since model 8 stepping 1</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are more robust with CLK_CTL set to 200xxxxx instead of 600xxxxx</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * As per AMD technical note 27212 0.2</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 8 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> >= 1) || (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> &gt; 8)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_K7_CLK_CTL\">MSR_K7_CLK_CTL</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#l\">l</a> &amp; 0xfff00000) != 0x20000000) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"CPU: CLK_CTL MSR was %x. Reprogramming to %x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a>, ((<a class=\"id\" href=\"#l\">l</a> &amp; 0x000fffff)|0x20000000));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsr\">wrmsr</a>(<a class=\"id\" href=\"#MSR_K7_CLK_CTL\">MSR_K7_CLK_CTL</a>, (<a class=\"id\" href=\"#l\">l</a> &amp; 0x000fffff)|0x20000000, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_K7\">X86_FEATURE_K7</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_k7_smp_check\">amd_k7_smp_check</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>)", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#nearby_node\">nearby_node</a>(int <a class=\"id\" href=\"#apicid\">apicid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#apicid\">apicid</a> - 1; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> != <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a> && <a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#node\">node</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#apicid\">apicid</a> + 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_LOCAL_APIC\">MAX_LOCAL_APIC</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> != <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a> && <a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#node\">node</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#node_online_map\">node_online_map</a>); <span class=\"comment\">/* Shouldn't happen */</span>", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fixup core topology information for AMD multi-node processors.</span>", 
"<span class=\"comment\"> * Assumption: Number of cores in each internal node is the same.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_HT\">CONFIG_X86_HT</a>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#amd_fixup_dcm\">amd_fixup_dcm</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#cores_per_node\">cores_per_node</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_NODEID_MSR\">X86_FEATURE_NODEID_MSR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* fixup topology information only once for a core */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_AMD_DCM\">X86_FEATURE_AMD_DCM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_FAM10H_NODE_ID\">MSR_FAM10H_NODE_ID</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes\">nodes</a> = ((<a class=\"id\" href=\"#value\">value</a> >> 3) &amp; 7) + 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nodes\">nodes</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_AMD_DCM\">X86_FEATURE_AMD_DCM</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cores_per_node\">cores_per_node</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_max_cores\">x86_max_cores</a> / <a class=\"id\" href=\"#nodes\">nodes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* store NodeID, use llc_shared_map to store sibling info */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_llc_id\">cpu_llc_id</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#value\">value</a> &amp; 7;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* fixup core id to be in range from 0 to (cores_per_node - 1) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpu_core_id\">cpu_core_id</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpu_core_id\">cpu_core_id</a> % <a class=\"id\" href=\"#cores_per_node\">cores_per_node</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * On a AMD dual core setup the lower bits of the APIC id distingush the cores.</span>", 
"<span class=\"comment\"> * Assumes number of cores is a power of two.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#amd_detect_cmp\">amd_detect_cmp</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_HT\">CONFIG_X86_HT</a>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#bits\">bits</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bits\">bits</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_coreid_bits\">x86_coreid_bits</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Low order bits define the core id (index of core in socket) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpu_core_id\">cpu_core_id</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#initial_apicid\">initial_apicid</a> &amp; ((1 << <a class=\"id\" href=\"#bits\">bits</a>)-1);", 
"<span class=\"ts\"/><span class=\"comment\">/* Convert the initial APIC ID into the socket ID */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#phys_proc_id\">phys_proc_id</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#initial_apicid\">initial_apicid</a> >> <a class=\"id\" href=\"#bits\">bits</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* use socket ID also for last level cache */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_llc_id\">cpu_llc_id</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#phys_proc_id\">phys_proc_id</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* fixup topology information on multi-node processors */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 0x10) && (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 9))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#amd_fixup_dcm\">amd_fixup_dcm</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"int <a class=\"id\" href=\"#amd_get_nb_id\">amd_get_nb_id</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a> = 0;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_llc_id\">cpu_llc_id</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#amd_get_nb_id\">amd_get_nb_id</a>);", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#srat_detect_node\">srat_detect_node</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>)", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#apicid\">apicid</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#apicid\">apicid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_llc_id\">cpu_llc_id</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>[<a class=\"id\" href=\"#apicid\">apicid</a>] != <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>[<a class=\"id\" href=\"#apicid\">apicid</a>];", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#node\">node</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Two possibilities here:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   - The CPU is missing memory and no node was created.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   In that case try picking one from a nearby CPU</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   - The APIC IDs differ from the HyperTransport node IDs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   which the K8 northbridge parsing fills in.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   Assume they are all increased by a constant offset,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   but in the same order as the HT nodeids.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   If that doesn't result in a usable node fall back to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   path for the previous case.  */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ht_nodeid\">ht_nodeid</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#initial_apicid\">initial_apicid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ht_nodeid\">ht_nodeid</a> >= 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>[<a class=\"id\" href=\"#ht_nodeid\">ht_nodeid</a>] != <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>[<a class=\"id\" href=\"#ht_nodeid\">ht_nodeid</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Pick a nearby node */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#node\">node</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#nearby_node\">nearby_node</a>(<a class=\"id\" href=\"#apicid\">apicid</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numa_set_node\">numa_set_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#early_init_amd_mc\">early_init_amd_mc</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_HT\">CONFIG_X86_HT</a>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#ecx\">ecx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Multi core CPU? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#extended_cpuid_level\">extended_cpuid_level</a> &lt; 0x80000008)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ecx\">ecx</a> = <a class=\"id\" href=\"#cpuid_ecx\">cpuid_ecx</a>(0x80000008);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_max_cores\">x86_max_cores</a> = (<a class=\"id\" href=\"#ecx\">ecx</a> &amp; 0xff) + 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* CPU telling us the core id bits shift? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bits\">bits</a> = (<a class=\"id\" href=\"#ecx\">ecx</a> >> 12) &amp; 0xF;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Otherwise recompute */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bits\">bits</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((1 << <a class=\"id\" href=\"#bits\">bits</a>) &lt; <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_max_cores\">x86_max_cores</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bits\">bits</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_coreid_bits\">x86_coreid_bits</a> = <a class=\"id\" href=\"#bits\">bits</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#early_init_amd\">early_init_amd</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_init_amd_mc\">early_init_amd_mc</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * c-&gt;x86_power is 8000_0007 edx. Bit 8 is TSC runs at constant rate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with P/T states and does not stop in deep C-states</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_power\">x86_power</a> &amp; (1 << 8)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_CONSTANT_TSC\">X86_FEATURE_CONSTANT_TSC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_NONSTOP_TSC\">X86_FEATURE_NONSTOP_TSC</a>);", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_SYSCALL32\">X86_FEATURE_SYSCALL32</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/*  Set MTRR capability flag if appropriate */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 5)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 13 || <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 9 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 8 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> >= 8))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_K6_MTRR\">X86_FEATURE_K6_MTRR</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>)", 
"<span class=\"ts\"/><span class=\"comment\">/* check CPU config space for extended APIC ID */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a> && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> >= 0xf) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#read_pci_config\">read_pci_config</a>(0, 24, 0, 0x68);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#val\">val</a> &amp; ((1 << 17) | (1 << 18))) == ((1 << 17) | (1 << 18)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_EXTD_APICID\">X86_FEATURE_EXTD_APICID</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#init_amd\">init_amd</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable TLB flush filter by setting HWCR.FFDIS on K8</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bit 6 of msr C001_0015</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Errata 63 for SH-B3 steppings</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Errata 122 for all steppings (F+ have it disabled by default)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 0xf) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_K7_HWCR\">MSR_K7_HWCR</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> |= 1 << 6;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_K7_HWCR\">MSR_K7_HWCR</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_init_amd\">early_init_amd</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Bit 31 in normal CPUID used for nonstandard 3DNow ID;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3DNow is IDd by bit 31 in extended CPUID (1*32+31) anyway</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, 0*32+31);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* On C+ stepping K8 rep microcode works well for copy/memset */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 0xf) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#level\">level</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#cpuid_eax\">cpuid_eax</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#level\">level</a> >= 0x0f48 && <a class=\"id\" href=\"#level\">level</a> &lt; 0x0f50) || <a class=\"id\" href=\"#level\">level</a> >= 0x0f58)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_REP_GOOD\">X86_FEATURE_REP_GOOD</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Some BIOSes incorrectly force this feature, but only K8</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * revision D (model = 0x14) and later actually support it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (AMD Erratum #110, docId: 25759).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> &lt; 0x14 && <a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_LAHF_LM\">X86_FEATURE_LAHF_LM</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_LAHF_LM\">X86_FEATURE_LAHF_LM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rdmsrl_amd_safe\">rdmsrl_amd_safe</a>(0xc001100d, &amp;<a class=\"id\" href=\"#val\">val</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> &= ~(1ULL << 32);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl_amd_safe\">wrmsrl_amd_safe</a>(0xc001100d, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> >= 0x10)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_REP_GOOD\">X86_FEATURE_REP_GOOD</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* get apicid instead of initial apic id from cpuid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#apicid\">apicid</a> = <a class=\"id\" href=\"#hard_smp_processor_id\">hard_smp_processor_id</a>();", 
"#else", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>FIXME: We should handle the K5 here. Set up the write</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>range and also turn on MSR 83 bits 4 and 31 (write alloc,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>no bus pipeline)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a>) {", 
"<span class=\"ts\"/>case 4:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_amd_k5\">init_amd_k5</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 5:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_amd_k6\">init_amd_k6</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 6: <span class=\"comment\">/* An Athlon/Duron */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_amd_k7\">init_amd_k7</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* K6s reports MCEs but don't actually have all the MSRs */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> &lt; 6)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_MCE\">X86_FEATURE_MCE</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Enable workaround for FXSAVE leak */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> >= 6)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_FXSAVE_LEAK\">X86_FEATURE_FXSAVE_LEAK</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0xf:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Should distinguish Models here, but this is only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   a fallback anyways. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>, \"Hammer\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_detect_cache_sizes\">cpu_detect_cache_sizes</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Multi core CPU? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#extended_cpuid_level\">extended_cpuid_level</a> >= 0x80000008) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#amd_detect_cmp\">amd_detect_cmp</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#srat_detect_node\">srat_detect_node</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#detect_ht\">detect_ht</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#extended_cpuid_level\">extended_cpuid_level</a> >= 0x80000006) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> >= 0x0f) && (<a class=\"id\" href=\"#cpuid_edx\">cpuid_edx</a>(0x80000006) &amp; 0xf000))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_cache_leaves\">num_cache_leaves</a> = 4;", 
];
xr_frag_insert('l/a5/6abf08a9e37c395c310d6557329ba45ae54369.xr', __xr_tmp);
