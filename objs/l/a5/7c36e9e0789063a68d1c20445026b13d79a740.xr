var __xr_tmp = [
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#within\">within</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#end\">end</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Flushing functions</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * clflush_cache_range - flush a cache range with clflush</span>", 
"<span class=\"comment\"> * @addr:<span class=\"ts\"/>virtual start address</span>", 
"<span class=\"comment\"> * @size:<span class=\"ts\"/>number of bytes to flush</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * clflush is an unordered instruction which needs fencing with mfence</span>", 
"<span class=\"comment\"> * to avoid ordering issues.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#clflush_cache_range\">clflush_cache_range</a>(void *<a class=\"id\" href=\"#vaddr\">vaddr</a>, unsigned int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#vend\">vend</a> = <a class=\"id\" href=\"#vaddr\">vaddr</a> + <a class=\"id\" href=\"#size\">size</a> - 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb\">mb</a>();", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#vaddr\">vaddr</a> &lt; <a class=\"id\" href=\"#vend\">vend</a>; <a class=\"id\" href=\"#vaddr\">vaddr</a> += <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_clflush_size\">x86_clflush_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clflush\">clflush</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Flush any possible final partial cacheline:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clflush\">clflush</a>(<a class=\"id\" href=\"#vend\">vend</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb\">mb</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#clflush_cache_range\">clflush_cache_range</a>);", 
"", 
"static void <a class=\"id\" href=\"#__cpa_flush_all\">__cpa_flush_all</a>(void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cache\">cache</a> = (unsigned long)<a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Flush all to work around Errata in early athlons regarding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * large page flushing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__flush_tlb_all\">__flush_tlb_all</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cache\">cache</a> && <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> >= 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wbinvd\">wbinvd</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cpa_flush_all\">cpa_flush_all</a>(unsigned long <a class=\"id\" href=\"#cache\">cache</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#__cpa_flush_all\">__cpa_flush_all</a>, (void *) <a class=\"id\" href=\"#cache\">cache</a>, 1);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpa_flush_range\">__cpa_flush_range</a>(void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We could optimize that further and do individual per page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tlb invalidates for a low number of pages. Caveat: we must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * flush the high aliases on 64bit as well.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__flush_tlb_all\">__flush_tlb_all</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cpa_flush_range\">cpa_flush_range</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>, int <a class=\"id\" href=\"#cache\">cache</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#start\">start</a>) != <a class=\"id\" href=\"#start\">start</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#__cpa_flush_range\">__cpa_flush_range</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cache\">cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We only need to flush on one CPU,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * clflush is a MESI-coherent instruction that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will cause all other CPUs to flush the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cachelines:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#numpages\">numpages</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#lookup_address\">lookup_address</a>(<a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#level\">level</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only flush present addresses:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte\">pte</a> && (<a class=\"id\" href=\"#pte_val\">pte_val</a>(*<a class=\"id\" href=\"#pte\">pte</a>) &amp; <a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clflush_cache_range\">clflush_cache_range</a>((void *) <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cpa_flush_array\">cpa_flush_array</a>(unsigned long *<a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>, int <a class=\"id\" href=\"#cache\">cache</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#in_flags\">in_flags</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#do_wbinvd\">do_wbinvd</a> = <a class=\"id\" href=\"#cache\">cache</a> && <a class=\"id\" href=\"#numpages\">numpages</a> >= 1024; <span class=\"comment\">/* 4M threshold */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#__cpa_flush_all\">__cpa_flush_all</a>, (void *) <a class=\"id\" href=\"#do_wbinvd\">do_wbinvd</a>, 1);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cache\">cache</a> || <a class=\"id\" href=\"#do_wbinvd\">do_wbinvd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We only need to flush on one CPU,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * clflush is a MESI-coherent instruction that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will cause all other CPUs to flush the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cachelines:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#numpages\">numpages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in_flags\">in_flags</a> &amp; <a class=\"id\" href=\"#CPA_PAGES_ARRAY\">CPA_PAGES_ARRAY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#start\">start</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#lookup_address\">lookup_address</a>(<a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#level\">level</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only flush present addresses:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte\">pte</a> && (<a class=\"id\" href=\"#pte_val\">pte_val</a>(*<a class=\"id\" href=\"#pte\">pte</a>) &amp; <a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clflush_cache_range\">clflush_cache_range</a>((void *)<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Certain areas of memory on x86 require very specific protection flags,</span>", 
"<span class=\"comment\"> * for example the BIOS area or kernel text. Callers don't always get this</span>", 
"<span class=\"comment\"> * right (again, ioremap() on BIOS memory is not uncommon) so this function</span>", 
"<span class=\"comment\"> * checks and fixes these known static required protection bits.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#static_protections\">static_protections</a>(<a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#forbidden\">forbidden</a> = <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The BIOS area between 640k and 1Mb needs to be executable for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PCI BIOS based config access (CONFIG_PCI_GOBIOS) support.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#within\">within</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#BIOS_BEGIN\">BIOS_BEGIN</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, <a class=\"id\" href=\"#BIOS_END\">BIOS_END</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#forbidden\">forbidden</a>) |= <a class=\"id\" href=\"#_PAGE_NX\">_PAGE_NX</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The kernel text needs to be executable for obvious reasons</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Does not cover __inittext since that is gone later on. On</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 64bit we do not enforce !NX on the low mapping</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#within\">within</a>(<a class=\"id\" href=\"#address\">address</a>, (unsigned long)<a class=\"id\" href=\"#_text\">_text</a>, (unsigned long)<a class=\"id\" href=\"#_etext\">_etext</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#forbidden\">forbidden</a>) |= <a class=\"id\" href=\"#_PAGE_NX\">_PAGE_NX</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The .rodata section needs to be read-only. Using the pfn</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * catches all aliases.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#within\">within</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#__pa\">__pa</a>((unsigned long)<a class=\"id\" href=\"#__start_rodata\">__start_rodata</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#__pa\">__pa</a>((unsigned long)<a class=\"id\" href=\"#__end_rodata\">__end_rodata</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#forbidden\">forbidden</a>) |= <a class=\"id\" href=\"#_PAGE_RW\">_PAGE_RW</a>;", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_RODATA\">CONFIG_DEBUG_RODATA</a>)", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Once the kernel maps the text as RO (kernel_set_to_readonly is set),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernel text mappings for the large page aligned text, rodata sections</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will be always read-only. For the kernel identity mappings covering</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the holes caused by this alignment can be anything that user asks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This will preserve the large page mappings for kernel text/data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at no extra cost.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kernel_set_to_readonly\">kernel_set_to_readonly</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#within\">within</a>(<a class=\"id\" href=\"#address\">address</a>, (unsigned long)<a class=\"id\" href=\"#_text\">_text</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   (unsigned long)<a class=\"id\" href=\"#__end_rodata_hpage_align\">__end_rodata_hpage_align</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#level\">level</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't enforce the !RW mapping for the kernel text mapping,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if the current mapping is already using small page mapping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * No need to work hard to preserve large page mappings in this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This also fixes the Linux Xen paravirt guest boot failure</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (because of unexpected read-only mappings for kernel identity</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mappings). In this paravirt guest case, the kernel text</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mapping and the kernel identity mapping share the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * page-table pages. Thus we can't really use different</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * protections for the kernel text and identity mappings. Also,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * these shared mappings are made of small page mappings.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Thus this don't enforce !RW mapping for small page kernel</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * text mapping logic will help Linux Xen parvirt guest boot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * aswell.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lookup_address\">lookup_address</a>(<a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#level\">level</a>) && (<a class=\"id\" href=\"#level\">level</a> != <a class=\"id\" href=\"#PG_LEVEL_4K\">PG_LEVEL_4K</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#forbidden\">forbidden</a>) |= <a class=\"id\" href=\"#_PAGE_RW\">_PAGE_RW</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prot\">prot</a> = <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#prot\">prot</a>) &amp; ~<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#forbidden\">forbidden</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#prot\">prot</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lookup the page table entry for a virtual address. Return a pointer</span>", 
"<span class=\"comment\"> * to the entry and the level of the mapping.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: We return pud and pmd either when the entry is marked large</span>", 
"<span class=\"comment\"> * or when the present bit is not set. Otherwise we would return a</span>", 
"<span class=\"comment\"> * pointer to a nonexisting mapping.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#lookup_address\">lookup_address</a>(unsigned long <a class=\"id\" href=\"#address\">address</a>, unsigned int *<a class=\"id\" href=\"#level\">level</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset_k\">pgd_offset_k</a>(<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#PG_LEVEL_NONE\">PG_LEVEL_NONE</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none\">pgd_none</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_none\">pud_none</a>(*<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#PG_LEVEL_1G\">PG_LEVEL_1G</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_large\">pud_large</a>(*<a class=\"id\" href=\"#pud\">pud</a>) || !<a class=\"id\" href=\"#pud_present\">pud_present</a>(*<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#pte_t\">pte_t</a> *)<a class=\"id\" href=\"#pud\">pud</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_none\">pmd_none</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#PG_LEVEL_2M\">PG_LEVEL_2M</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_large\">pmd_large</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>) || !<a class=\"id\" href=\"#pmd_present\">pmd_present</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#pte_t\">pte_t</a> *)<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#PG_LEVEL_4K\">PG_LEVEL_4K</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pte_offset_kernel\">pte_offset_kernel</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#lookup_address\">lookup_address</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set the new pmd in all the pgds we know about:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__set_pmd_pte\">__set_pmd_pte</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#kpte\">kpte</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* change init_mm */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_atomic\">set_pte_atomic</a>(<a class=\"id\" href=\"#kpte\">kpte</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#SHARED_KERNEL_PMD\">SHARED_KERNEL_PMD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#pgd_list\">pgd_list</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = (<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>) + <a class=\"id\" href=\"#pgd_index\">pgd_index</a>(<a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pte_atomic\">set_pte_atomic</a>((<a class=\"id\" href=\"#pte_t\">pte_t</a> *)<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#try_preserve_large_page\">try_preserve_large_page</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#kpte\">kpte</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpa_data\">cpa_data</a> *<a class=\"id\" href=\"#cpa\">cpa</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nextpage_addr\">nextpage_addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>, <a class=\"id\" href=\"#pmask\">pmask</a>, <a class=\"id\" href=\"#psize\">psize</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#new_pte\">new_pte</a>, <a class=\"id\" href=\"#old_pte\">old_pte</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#old_prot\">old_prot</a>, <a class=\"id\" href=\"#new_prot\">new_prot</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#do_split\">do_split</a> = 1;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#level\">level</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#force_split\">force_split</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for races, another CPU might have split this page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * up already:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#lookup_address\">lookup_address</a>(<a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#level\">level</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> != <a class=\"id\" href=\"#kpte\">kpte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#level\">level</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PG_LEVEL_2M\">PG_LEVEL_2M</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psize\">psize</a> = <a class=\"id\" href=\"#PMD_PAGE_SIZE\">PMD_PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmask\">pmask</a> = <a class=\"id\" href=\"#PMD_PAGE_MASK\">PMD_PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PG_LEVEL_1G\">PG_LEVEL_1G</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psize\">psize</a> = <a class=\"id\" href=\"#PUD_PAGE_SIZE\">PUD_PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmask\">pmask</a> = <a class=\"id\" href=\"#PUD_PAGE_MASK\">PUD_PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_split\">do_split</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Calculate the number of pages, which fit into this large</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page starting at address:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nextpage_addr\">nextpage_addr</a> = (<a class=\"id\" href=\"#address\">address</a> + <a class=\"id\" href=\"#psize\">psize</a>) &amp; <a class=\"id\" href=\"#pmask\">pmask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numpages\">numpages</a> = (<a class=\"id\" href=\"#nextpage_addr\">nextpage_addr</a> - <a class=\"id\" href=\"#address\">address</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#numpages\">numpages</a> &lt; <a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#numpages\">numpages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#numpages\">numpages</a> = <a class=\"id\" href=\"#numpages\">numpages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are safe now. Check whether the new pgprot is the same:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_pte\">old_pte</a> = *<a class=\"id\" href=\"#kpte\">kpte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_prot\">old_prot</a> = <a class=\"id\" href=\"#new_prot\">new_prot</a> = <a class=\"id\" href=\"#pte_pgprot\">pte_pgprot</a>(<a class=\"id\" href=\"#old_pte\">old_pte</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#new_prot\">new_prot</a>) &= ~<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#mask_clr\">mask_clr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#new_prot\">new_prot</a>) |= <a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#mask_set\">mask_set</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * old_pte points to the large page base address. So we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to add the offset of the virtual address:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(<a class=\"id\" href=\"#old_pte\">old_pte</a>) + ((<a class=\"id\" href=\"#address\">address</a> &amp; (<a class=\"id\" href=\"#psize\">psize</a> - 1)) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_prot\">new_prot</a> = <a class=\"id\" href=\"#static_protections\">static_protections</a>(<a class=\"id\" href=\"#new_prot\">new_prot</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to check the full range, whether</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * static_protection() requires a different pgprot for one of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the pages in the range we try to preserve:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#address\">address</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>++;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#numpages\">numpages</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#pfn\">pfn</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#chk_prot\">chk_prot</a> = <a class=\"id\" href=\"#static_protections\">static_protections</a>(<a class=\"id\" href=\"#new_prot\">new_prot</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#chk_prot\">chk_prot</a>) != <a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#new_prot\">new_prot</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there are no changes, return. maxpages has been updated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * above:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#new_prot\">new_prot</a>) == <a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#old_prot\">old_prot</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_split\">do_split</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to change the attributes. Check, whether we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * change the large page in one go. We request a split, when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the address is not aligned and the number of pages is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * smaller than the number of pages in the large page. Note</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that we limited the number of possible pages already to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the number of pages in the large page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> == (<a class=\"id\" href=\"#nextpage_addr\">nextpage_addr</a> - <a class=\"id\" href=\"#psize\">psize</a>) && <a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#numpages\">numpages</a> == <a class=\"id\" href=\"#numpages\">numpages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The address is aligned and the number of pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * covers the full page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_pte\">new_pte</a> = <a class=\"id\" href=\"#pfn_pte\">pfn_pte</a>(<a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(<a class=\"id\" href=\"#old_pte\">old_pte</a>), <a class=\"id\" href=\"#canon_pgprot\">canon_pgprot</a>(<a class=\"id\" href=\"#new_prot\">new_prot</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_pmd_pte\">__set_pmd_pte</a>(<a class=\"id\" href=\"#kpte\">kpte</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#new_pte\">new_pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CPA_FLUSHTLB\">CPA_FLUSHTLB</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_split\">do_split</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_split\">do_split</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#split_large_page\">split_large_page</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#kpte\">kpte</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#pfninc\">pfninc</a> = 1;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pbase\">pbase</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#ref_prot\">ref_prot</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#debug_pagealloc\">debug_pagealloc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cpa_lock\">cpa_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_NOTRACK\">__GFP_NOTRACK</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#debug_pagealloc\">debug_pagealloc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cpa_lock\">cpa_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#base\">base</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for races, another CPU might have split this page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * up for us already:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#lookup_address\">lookup_address</a>(<a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#level\">level</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> != <a class=\"id\" href=\"#kpte\">kpte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pbase\">pbase</a> = (<a class=\"id\" href=\"#pte_t\">pte_t</a> *)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#paravirt_alloc_pte\">paravirt_alloc_pte</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#base\">base</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ref_prot\">ref_prot</a> = <a class=\"id\" href=\"#pte_pgprot\">pte_pgprot</a>(<a class=\"id\" href=\"#pte_clrhuge\">pte_clrhuge</a>(*<a class=\"id\" href=\"#kpte\">kpte</a>));", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we ever want to utilize the PAT bit, we need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * update this function to make sure it's converted from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bit 12 to bit 7 when we cross from the 2MB level to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the 4K level:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#ref_prot\">ref_prot</a>) &amp; <a class=\"id\" href=\"#_PAGE_PAT_LARGE\">_PAGE_PAT_LARGE</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#PG_LEVEL_1G\">PG_LEVEL_1G</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfninc\">pfninc</a> = <a class=\"id\" href=\"#PMD_PAGE_SIZE\">PMD_PAGE_SIZE</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#ref_prot\">ref_prot</a>) |= <a class=\"id\" href=\"#_PAGE_PSE\">_PAGE_PSE</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the target pfn from the original entry:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(*<a class=\"id\" href=\"#kpte\">kpte</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PTRS_PER_PTE\">PTRS_PER_PTE</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#pfn\">pfn</a> += <a class=\"id\" href=\"#pfninc\">pfninc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pte\">set_pte</a>(&amp;<a class=\"id\" href=\"#pbase\">pbase</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#pfn_pte\">pfn_pte</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#ref_prot\">ref_prot</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> >= (unsigned long)<a class=\"id\" href=\"#__va\">__va</a>(0) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> &lt; (unsigned long)<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#max_low_pfn_mapped\">max_low_pfn_mapped</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#split_page_count\">split_page_count</a>(<a class=\"id\" href=\"#level\">level</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> >= (unsigned long)<a class=\"id\" href=\"#__va\">__va</a>(1UL<<32) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> &lt; (unsigned long)<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#max_pfn_mapped\">max_pfn_mapped</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#split_page_count\">split_page_count</a>(<a class=\"id\" href=\"#level\">level</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Install the new, split up pagetable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use the standard kernel pagetable protections for the new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pagetable protections, the actual ptes set above control the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * primary protection behavior:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_pmd_pte\">__set_pmd_pte</a>(<a class=\"id\" href=\"#kpte\">kpte</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#mk_pte\">mk_pte</a>(<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_KERNPG_TABLE\">_KERNPG_TABLE</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Intel Atom errata AAH41 workaround.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The real fix should be in hw or in a microcode update, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we also probabilistically try to reduce the window of having</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a large TLB mixed with 4K TLBs while instruction fetches are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * going on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__flush_tlb_all\">__flush_tlb_all</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we dropped out via the lookup_address check under</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pgd_lock then stick the page back into the pool:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pgd_lock\">pgd_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__cpa_process_fault\">__cpa_process_fault</a>(struct <a class=\"id\" href=\"#cpa_data\">cpa_data</a> *<a class=\"id\" href=\"#cpa\">cpa</a>, unsigned long <a class=\"id\" href=\"#vaddr\">vaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#primary\">primary</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ignore all non primary paths.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#primary\">primary</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ignore the NULL PTE for kernel identity mapping, as it is expected</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to have holes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Also set numpages to '1' indicating that we processed cpa req for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one virtual address page and its pfn. TBD: numpages can be set based</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the initial value and the level returned by lookup_address().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#within\">within</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a> + (<a class=\"id\" href=\"#max_pfn_mapped\">max_pfn_mapped</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#numpages\">numpages</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"CPA: called for zero pte. \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"vaddr = %lx cpa->vaddr = %lx\\n\", <a class=\"id\" href=\"#vaddr\">vaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__change_page_attr\">__change_page_attr</a>(struct <a class=\"id\" href=\"#cpa_data\">cpa_data</a> *<a class=\"id\" href=\"#cpa\">cpa</a>, int <a class=\"id\" href=\"#primary\">primary</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#do_split\">do_split</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#kpte\">kpte</a>, <a class=\"id\" href=\"#old_pte\">old_pte</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CPA_PAGES_ARRAY\">CPA_PAGES_ARRAY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#curpage\">curpage</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = (unsigned long)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CPA_ARRAY\">CPA_ARRAY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>[<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#curpage\">curpage</a>];", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = *<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kpte\">kpte</a> = <a class=\"id\" href=\"#lookup_address\">lookup_address</a>(<a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#level\">level</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kpte\">kpte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__cpa_process_fault\">__cpa_process_fault</a>(<a class=\"id\" href=\"#cpa\">cpa</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#primary\">primary</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_pte\">old_pte</a> = *<a class=\"id\" href=\"#kpte\">kpte</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_val\">pte_val</a>(<a class=\"id\" href=\"#old_pte\">old_pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__cpa_process_fault\">__cpa_process_fault</a>(<a class=\"id\" href=\"#cpa\">cpa</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#primary\">primary</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#PG_LEVEL_4K\">PG_LEVEL_4K</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#new_pte\">new_pte</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#new_prot\">new_prot</a> = <a class=\"id\" href=\"#pte_pgprot\">pte_pgprot</a>(<a class=\"id\" href=\"#old_pte\">old_pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(<a class=\"id\" href=\"#old_pte\">old_pte</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#new_prot\">new_prot</a>) &= ~<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#mask_clr\">mask_clr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#new_prot\">new_prot</a>) |= <a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#mask_set\">mask_set</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_prot\">new_prot</a> = <a class=\"id\" href=\"#static_protections\">static_protections</a>(<a class=\"id\" href=\"#new_prot\">new_prot</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We need to keep the pfn from the existing PTE,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * after all we're only going to change it's attributes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not the memory it points to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_pte\">new_pte</a> = <a class=\"id\" href=\"#pfn_pte\">pfn_pte</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#canon_pgprot\">canon_pgprot</a>(<a class=\"id\" href=\"#new_prot\">new_prot</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do we really change anything ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_val\">pte_val</a>(<a class=\"id\" href=\"#old_pte\">old_pte</a>) != <a class=\"id\" href=\"#pte_val\">pte_val</a>(<a class=\"id\" href=\"#new_pte\">new_pte</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pte_atomic\">set_pte_atomic</a>(<a class=\"id\" href=\"#kpte\">kpte</a>, <a class=\"id\" href=\"#new_pte\">new_pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CPA_FLUSHTLB\">CPA_FLUSHTLB</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#numpages\">numpages</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check, whether we can keep the large page intact</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and just change the pte:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_split\">do_split</a> = <a class=\"id\" href=\"#try_preserve_large_page\">try_preserve_large_page</a>(<a class=\"id\" href=\"#kpte\">kpte</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#cpa\">cpa</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When the range fits into the existing large page,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return. cp-&gt;numpages and cpa-&gt;tlbflush have been updated in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * try_large_page:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_split\">do_split</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#do_split\">do_split</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We have to split the large page:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#split_large_page\">split_large_page</a>(<a class=\"id\" href=\"#kpte\">kpte</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> <span class=\"ts\"/> * Do a global flush tlb after splitting the large page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> <span class=\"ts\"/> * and before we do the actual change page attribute in the PTE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> <span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> <span class=\"ts\"/> * With out this, we violate the TLB application note, that says</span>", 
"<span class=\"comment\"><span class=\"ts\"/> <span class=\"ts\"/> * \"The TLBs may contain both ordinary and large-page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  translations for a 4-KByte range of linear addresses. This</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  may occur if software modifies the paging structures so that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  the page size used for the address range changes. If the two</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  translations differ with respect to page frame or attributes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  (e.g., permissions), processor behavior is undefined and may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  be implementation-specific.\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> <span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> <span class=\"ts\"/> * We do this global tlb flush inside the cpa_lock, so that we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * don't allow any other cpu, with stale tlb entries change the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * page attribute in parallel, that also falls into the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * just split large page entry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> <span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_all\">flush_tlb_all</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__change_page_attr_set_clr\">__change_page_attr_set_clr</a>(struct <a class=\"id\" href=\"#cpa_data\">cpa_data</a> *<a class=\"id\" href=\"#cpa\">cpa</a>, int <a class=\"id\" href=\"#checkalias\">checkalias</a>);", 
"", 
"static int <a class=\"id\" href=\"#cpa_process_alias\">cpa_process_alias</a>(struct <a class=\"id\" href=\"#cpa_data\">cpa_data</a> *<a class=\"id\" href=\"#cpa\">cpa</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpa_data\">cpa_data</a> <a class=\"id\" href=\"#alias_cpa\">alias_cpa</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#laddr\">laddr</a> = (unsigned long)<a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#pfn\">pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#pfn\">pfn</a> >= <a class=\"id\" href=\"#max_pfn_mapped\">max_pfn_mapped</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#pfn\">pfn</a> >= <a class=\"id\" href=\"#max_low_pfn_mapped\">max_low_pfn_mapped</a> && <a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#pfn\">pfn</a> &lt; (1UL<<(32-<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No need to redo, when the primary call touched the direct</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mapping already:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CPA_PAGES_ARRAY\">CPA_PAGES_ARRAY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#curpage\">curpage</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = (unsigned long)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CPA_ARRAY\">CPA_ARRAY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>[<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#curpage\">curpage</a>];", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = *<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#within\">within</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a> + (<a class=\"id\" href=\"#max_pfn_mapped\">max_pfn_mapped</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)))) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alias_cpa\">alias_cpa</a> = *<a class=\"id\" href=\"#cpa\">cpa</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alias_cpa\">alias_cpa</a>.<a class=\"id\" href=\"#vaddr\">vaddr</a> = &amp;<a class=\"id\" href=\"#laddr\">laddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alias_cpa\">alias_cpa</a>.<a class=\"id\" href=\"#flags\">flags</a> &= ~(<a class=\"id\" href=\"#CPA_PAGES_ARRAY\">CPA_PAGES_ARRAY</a> | <a class=\"id\" href=\"#CPA_ARRAY\">CPA_ARRAY</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__change_page_attr_set_clr\">__change_page_attr_set_clr</a>(&amp;<a class=\"id\" href=\"#alias_cpa\">alias_cpa</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the primary call didn't touch the high mapping already</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and the physical address is inside the kernel map, we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to touch the high mapped kernel as well:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#within\">within</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>, (unsigned long)<a class=\"id\" href=\"#_text\">_text</a>, <a class=\"id\" href=\"#_brk_end\">_brk_end</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#within\">within</a>(<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#highmap_start_pfn\">highmap_start_pfn</a>(), <a class=\"id\" href=\"#highmap_end_pfn\">highmap_end_pfn</a>())) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#temp_cpa_vaddr\">temp_cpa_vaddr</a> = (<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#pfn\">pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__START_KERNEL_map\">__START_KERNEL_map</a> - <a class=\"id\" href=\"#phys_base\">phys_base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alias_cpa\">alias_cpa</a> = *<a class=\"id\" href=\"#cpa\">cpa</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alias_cpa\">alias_cpa</a>.<a class=\"id\" href=\"#vaddr\">vaddr</a> = &amp;<a class=\"id\" href=\"#temp_cpa_vaddr\">temp_cpa_vaddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alias_cpa\">alias_cpa</a>.<a class=\"id\" href=\"#flags\">flags</a> &= ~(<a class=\"id\" href=\"#CPA_PAGES_ARRAY\">CPA_PAGES_ARRAY</a> | <a class=\"id\" href=\"#CPA_ARRAY\">CPA_ARRAY</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The high mapping range is imprecise, so ignore the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * return value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__change_page_attr_set_clr\">__change_page_attr_set_clr</a>(&amp;<a class=\"id\" href=\"#alias_cpa\">alias_cpa</a>, 0);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__change_page_attr_set_clr\">__change_page_attr_set_clr</a>(struct <a class=\"id\" href=\"#cpa_data\">cpa_data</a> *<a class=\"id\" href=\"#cpa\">cpa</a>, int <a class=\"id\" href=\"#checkalias\">checkalias</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#numpages\">numpages</a> = <a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#numpages\">numpages</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#numpages\">numpages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Store the remaining nr of pages for the large page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * preservation check.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#numpages\">numpages</a> = <a class=\"id\" href=\"#numpages\">numpages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for array changes, we can't use large page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#CPA_ARRAY\">CPA_ARRAY</a> | <a class=\"id\" href=\"#CPA_PAGES_ARRAY\">CPA_PAGES_ARRAY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#numpages\">numpages</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#debug_pagealloc\">debug_pagealloc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cpa_lock\">cpa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__change_page_attr\">__change_page_attr</a>(<a class=\"id\" href=\"#cpa\">cpa</a>, <a class=\"id\" href=\"#checkalias\">checkalias</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#debug_pagealloc\">debug_pagealloc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cpa_lock\">cpa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#checkalias\">checkalias</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cpa_process_alias\">cpa_process_alias</a>(<a class=\"id\" href=\"#cpa\">cpa</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Adjust the number of pages with the result of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * CPA operation. Either a large page has been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * preserved or a single page update happened.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#numpages\">numpages</a> &gt; <a class=\"id\" href=\"#numpages\">numpages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numpages\">numpages</a> -= <a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#numpages\">numpages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#CPA_PAGES_ARRAY\">CPA_PAGES_ARRAY</a> | <a class=\"id\" href=\"#CPA_ARRAY\">CPA_ARRAY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#curpage\">curpage</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a> += <a class=\"id\" href=\"#cpa\">cpa</a>-><a class=\"id\" href=\"#numpages\">numpages</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cache_attr\">cache_attr</a>(<a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#attr\">attr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#attr\">attr</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#_PAGE_PAT\">_PAGE_PAT</a> | <a class=\"id\" href=\"#_PAGE_PAT_LARGE\">_PAGE_PAT_LARGE</a> | <a class=\"id\" href=\"#_PAGE_PWT\">_PAGE_PWT</a> | <a class=\"id\" href=\"#_PAGE_PCD\">_PAGE_PCD</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#change_page_attr_set_clr\">change_page_attr_set_clr</a>(unsigned long *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#mask_set\">mask_set</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#mask_clr\">mask_clr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#force_split\">force_split</a>, int <a class=\"id\" href=\"#in_flag\">in_flag</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpa_data\">cpa_data</a> <a class=\"id\" href=\"#cpa\">cpa</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#cache\">cache</a>, <a class=\"id\" href=\"#checkalias\">checkalias</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#baddr\">baddr</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check, if we are requested to change a not supported</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * feature:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask_set\">mask_set</a> = <a class=\"id\" href=\"#canon_pgprot\">canon_pgprot</a>(<a class=\"id\" href=\"#mask_set\">mask_set</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask_clr\">mask_clr</a> = <a class=\"id\" href=\"#canon_pgprot\">canon_pgprot</a>(<a class=\"id\" href=\"#mask_clr\">mask_clr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#mask_set\">mask_set</a>) && !<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#mask_clr\">mask_clr</a>) && !<a class=\"id\" href=\"#force_split\">force_split</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ensure we are PAGE_SIZE aligned */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_flag\">in_flag</a> &amp; <a class=\"id\" href=\"#CPA_ARRAY\">CPA_ARRAY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#numpages\">numpages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#i\">i</a>] &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#i\">i</a>] &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (!(<a class=\"id\" href=\"#in_flag\">in_flag</a> &amp; <a class=\"id\" href=\"#CPA_PAGES_ARRAY\">CPA_PAGES_ARRAY</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in_flag of CPA_PAGES_ARRAY implies it is aligned.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * No need to cehck in that case</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#addr\">addr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#addr\">addr</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * People should not be passing in unaligned addresses:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Save address for cache flush. *addr is modified in the call</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to __change_page_attr_set_clr() below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#baddr\">baddr</a> = *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must avoid aliasing mappings in the highmem code */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmap_flush_unused\">kmap_flush_unused</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_unmap_aliases\">vm_unmap_aliases</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>.<a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>.<a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>.<a class=\"id\" href=\"#numpages\">numpages</a> = <a class=\"id\" href=\"#numpages\">numpages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>.<a class=\"id\" href=\"#mask_set\">mask_set</a> = <a class=\"id\" href=\"#mask_set\">mask_set</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>.<a class=\"id\" href=\"#mask_clr\">mask_clr</a> = <a class=\"id\" href=\"#mask_clr\">mask_clr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>.<a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>.<a class=\"id\" href=\"#curpage\">curpage</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>.<a class=\"id\" href=\"#force_split\">force_split</a> = <a class=\"id\" href=\"#force_split\">force_split</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_flag\">in_flag</a> &amp; (<a class=\"id\" href=\"#CPA_ARRAY\">CPA_ARRAY</a> | <a class=\"id\" href=\"#CPA_PAGES_ARRAY\">CPA_PAGES_ARRAY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#in_flag\">in_flag</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No alias checking for _NX bit modifications */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#checkalias\">checkalias</a> = (<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#mask_set\">mask_set</a>) | <a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#mask_clr\">mask_clr</a>)) != <a class=\"id\" href=\"#_PAGE_NX\">_PAGE_NX</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__change_page_attr_set_clr\">__change_page_attr_set_clr</a>(&amp;<a class=\"id\" href=\"#cpa\">cpa</a>, <a class=\"id\" href=\"#checkalias\">checkalias</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check whether we really changed something:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#cpa\">cpa</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CPA_FLUSHTLB\">CPA_FLUSHTLB</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No need to flush, when we did not set any of the caching</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * attributes:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a> = <a class=\"id\" href=\"#cache_attr\">cache_attr</a>(<a class=\"id\" href=\"#mask_set\">mask_set</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On success we use clflush, when the CPU supports it to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * avoid the wbindv. If the CPU does not support it and in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * error case we fall back to cpa_flush_all (which uses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wbindv):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#cpu_has_clflush\">cpu_has_clflush</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpa\">cpa</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#CPA_PAGES_ARRAY\">CPA_PAGES_ARRAY</a> | <a class=\"id\" href=\"#CPA_ARRAY\">CPA_ARRAY</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa_flush_array\">cpa_flush_array</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>, <a class=\"id\" href=\"#cache\">cache</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a>.<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa_flush_range\">cpa_flush_range</a>(<a class=\"id\" href=\"#baddr\">baddr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>, <a class=\"id\" href=\"#cache\">cache</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa_flush_all\">cpa_flush_all</a>(<a class=\"id\" href=\"#cache\">cache</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#change_page_attr_set\">change_page_attr_set</a>(unsigned long *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#mask\">mask</a>, int <a class=\"id\" href=\"#array\">array</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#change_page_attr_set_clr\">change_page_attr_set_clr</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(0), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#array\">array</a> ? <a class=\"id\" href=\"#CPA_ARRAY\">CPA_ARRAY</a> : 0), <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#change_page_attr_clear\">change_page_attr_clear</a>(unsigned long *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#mask\">mask</a>, int <a class=\"id\" href=\"#array\">array</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#change_page_attr_set_clr\">change_page_attr_set_clr</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>, <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(0), <a class=\"id\" href=\"#mask\">mask</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#array\">array</a> ? <a class=\"id\" href=\"#CPA_ARRAY\">CPA_ARRAY</a> : 0), <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpa_set_pages_array\">cpa_set_pages_array</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#change_page_attr_set_clr\">change_page_attr_set_clr</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#numpages\">numpages</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(0), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CPA_PAGES_ARRAY\">CPA_PAGES_ARRAY</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpa_clear_pages_array\">cpa_clear_pages_array</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#change_page_attr_set_clr\">change_page_attr_set_clr</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#numpages\">numpages</a>, <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(0), <a class=\"id\" href=\"#mask\">mask</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CPA_PAGES_ARRAY\">CPA_PAGES_ARRAY</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#_set_memory_uc\">_set_memory_uc</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for now UC MINUS. see comments in ioremap_nocache()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#change_page_attr_set\">change_page_attr_set</a>(&amp;<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_CACHE_UC_MINUS\">_PAGE_CACHE_UC_MINUS</a>), 0);", 
"}", 
"", 
"int <a class=\"id\" href=\"#set_memory_uc\">set_memory_uc</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for now UC MINUS. see comments in ioremap_nocache()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#reserve_memtype\">reserve_memtype</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>), <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>) + <a class=\"id\" href=\"#numpages\">numpages</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#_PAGE_CACHE_UC_MINUS\">_PAGE_CACHE_UC_MINUS</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#_set_memory_uc\">_set_memory_uc</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_memtype\">free_memtype</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>), <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>) + <a class=\"id\" href=\"#numpages\">numpages</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_memory_uc\">set_memory_uc</a>);", 
"", 
"int <a class=\"id\" href=\"#_set_memory_array\">_set_memory_array</a>(unsigned long *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#addrinarray\">addrinarray</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#new_type\">new_type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for now UC MINUS. see comments in ioremap_nocache()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#addrinarray\">addrinarray</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#reserve_memtype\">reserve_memtype</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#i\">i</a>]), <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#i\">i</a>]) + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_type\">new_type</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#change_page_attr_set\">change_page_attr_set</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addrinarray\">addrinarray</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_CACHE_UC_MINUS\">_PAGE_CACHE_UC_MINUS</a>), 1);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#new_type\">new_type</a> == <a class=\"id\" href=\"#_PAGE_CACHE_WC\">_PAGE_CACHE_WC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#change_page_attr_set_clr\">change_page_attr_set_clr</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addrinarray\">addrinarray</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_CACHE_WC\">_PAGE_CACHE_WC</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_CACHE_MASK\">_PAGE_CACHE_MASK</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       0, <a class=\"id\" href=\"#CPA_ARRAY\">CPA_ARRAY</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#i\">i</a>; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_memtype\">free_memtype</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#j\">j</a>]), <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#j\">j</a>]) + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#set_memory_array_uc\">set_memory_array_uc</a>(unsigned long *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#addrinarray\">addrinarray</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#_set_memory_array\">_set_memory_array</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addrinarray\">addrinarray</a>, <a class=\"id\" href=\"#_PAGE_CACHE_UC_MINUS\">_PAGE_CACHE_UC_MINUS</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_memory_array_uc\">set_memory_array_uc</a>);", 
"", 
"int <a class=\"id\" href=\"#set_memory_array_wc\">set_memory_array_wc</a>(unsigned long *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#addrinarray\">addrinarray</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#_set_memory_array\">_set_memory_array</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addrinarray\">addrinarray</a>, <a class=\"id\" href=\"#_PAGE_CACHE_WC\">_PAGE_CACHE_WC</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_memory_array_wc\">set_memory_array_wc</a>);", 
"", 
"int <a class=\"id\" href=\"#_set_memory_wc\">_set_memory_wc</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr_copy\">addr_copy</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#change_page_attr_set\">change_page_attr_set</a>(&amp;<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_CACHE_UC_MINUS\">_PAGE_CACHE_UC_MINUS</a>), 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#change_page_attr_set_clr\">change_page_attr_set_clr</a>(&amp;<a class=\"id\" href=\"#addr_copy\">addr_copy</a>, <a class=\"id\" href=\"#numpages\">numpages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_CACHE_WC\">_PAGE_CACHE_WC</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_CACHE_MASK\">_PAGE_CACHE_MASK</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       0, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#set_memory_wc\">set_memory_wc</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pat_enabled\">pat_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#set_memory_uc\">set_memory_uc</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#reserve_memtype\">reserve_memtype</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>), <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>) + <a class=\"id\" href=\"#numpages\">numpages</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_PAGE_CACHE_WC\">_PAGE_CACHE_WC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#_set_memory_wc\">_set_memory_wc</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_memtype\">free_memtype</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>), <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>) + <a class=\"id\" href=\"#numpages\">numpages</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_memory_wc\">set_memory_wc</a>);", 
"", 
"int <a class=\"id\" href=\"#_set_memory_wb\">_set_memory_wb</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#change_page_attr_clear\">change_page_attr_clear</a>(&amp;<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_CACHE_MASK\">_PAGE_CACHE_MASK</a>), 0);", 
"}", 
"", 
"int <a class=\"id\" href=\"#set_memory_wb\">set_memory_wb</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#_set_memory_wb\">_set_memory_wb</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_memtype\">free_memtype</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>), <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>) + <a class=\"id\" href=\"#numpages\">numpages</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_memory_wb\">set_memory_wb</a>);", 
"", 
"int <a class=\"id\" href=\"#set_memory_array_wb\">set_memory_array_wb</a>(unsigned long *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#addrinarray\">addrinarray</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#change_page_attr_clear\">change_page_attr_clear</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addrinarray\">addrinarray</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_CACHE_MASK\">_PAGE_CACHE_MASK</a>), 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#addrinarray\">addrinarray</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_memtype\">free_memtype</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#i\">i</a>]), <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#i\">i</a>]) + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_memory_array_wb\">set_memory_array_wb</a>);", 
"", 
"int <a class=\"id\" href=\"#set_memory_x\">set_memory_x</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#__supported_pte_mask\">__supported_pte_mask</a> &amp; <a class=\"id\" href=\"#_PAGE_NX\">_PAGE_NX</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#change_page_attr_clear\">change_page_attr_clear</a>(&amp;<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>, <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_NX\">_PAGE_NX</a>), 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_memory_x\">set_memory_x</a>);", 
"", 
"int <a class=\"id\" href=\"#set_memory_nx\">set_memory_nx</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#__supported_pte_mask\">__supported_pte_mask</a> &amp; <a class=\"id\" href=\"#_PAGE_NX\">_PAGE_NX</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#change_page_attr_set\">change_page_attr_set</a>(&amp;<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>, <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_NX\">_PAGE_NX</a>), 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_memory_nx\">set_memory_nx</a>);", 
"", 
"int <a class=\"id\" href=\"#set_memory_ro\">set_memory_ro</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#change_page_attr_clear\">change_page_attr_clear</a>(&amp;<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>, <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_RW\">_PAGE_RW</a>), 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#set_memory_ro\">set_memory_ro</a>);", 
"", 
"int <a class=\"id\" href=\"#set_memory_rw\">set_memory_rw</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#change_page_attr_set\">change_page_attr_set</a>(&amp;<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>, <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_RW\">_PAGE_RW</a>), 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#set_memory_rw\">set_memory_rw</a>);", 
"", 
"int <a class=\"id\" href=\"#set_memory_np\">set_memory_np</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#change_page_attr_clear\">change_page_attr_clear</a>(&amp;<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>, <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>), 0);", 
"}", 
"", 
"int <a class=\"id\" href=\"#set_memory_4k\">set_memory_4k</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#change_page_attr_set_clr\">change_page_attr_set_clr</a>(&amp;<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>, <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(0),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pgprot\">__pgprot</a>(0), 1, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#set_pages_uc\">set_pages_uc</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#set_memory_uc\">set_memory_uc</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_pages_uc\">set_pages_uc</a>);", 
"", 
"static int <a class=\"id\" href=\"#_set_pages_array\">_set_pages_array</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, int <a class=\"id\" href=\"#addrinarray\">addrinarray</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#new_type\">new_type</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#free_idx\">free_idx</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#addrinarray\">addrinarray</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reserve_memtype\">reserve_memtype</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#new_type\">new_type</a>, <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cpa_set_pages_array\">cpa_set_pages_array</a>(<a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#addrinarray\">addrinarray</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_CACHE_UC_MINUS\">_PAGE_CACHE_UC_MINUS</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#new_type\">new_type</a> == <a class=\"id\" href=\"#_PAGE_CACHE_WC\">_PAGE_CACHE_WC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#change_page_attr_set_clr\">change_page_attr_set_clr</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#addrinarray\">addrinarray</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_CACHE_WC\">_PAGE_CACHE_WC</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_CACHE_MASK\">_PAGE_CACHE_MASK</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       0, <a class=\"id\" href=\"#CPA_PAGES_ARRAY\">CPA_PAGES_ARRAY</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>return 0; <span class=\"comment\">/* Success */</span>", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_idx\">free_idx</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#free_idx\">free_idx</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_memtype\">free_memtype</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#set_pages_array_uc\">set_pages_array_uc</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, int <a class=\"id\" href=\"#addrinarray\">addrinarray</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#_set_pages_array\">_set_pages_array</a>(<a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#addrinarray\">addrinarray</a>, <a class=\"id\" href=\"#_PAGE_CACHE_UC_MINUS\">_PAGE_CACHE_UC_MINUS</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_pages_array_uc\">set_pages_array_uc</a>);", 
"", 
"int <a class=\"id\" href=\"#set_pages_array_wc\">set_pages_array_wc</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, int <a class=\"id\" href=\"#addrinarray\">addrinarray</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#_set_pages_array\">_set_pages_array</a>(<a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#addrinarray\">addrinarray</a>, <a class=\"id\" href=\"#_PAGE_CACHE_WC\">_PAGE_CACHE_WC</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_pages_array_wc\">set_pages_array_wc</a>);", 
"", 
"int <a class=\"id\" href=\"#set_pages_wb\">set_pages_wb</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#set_memory_wb\">set_memory_wb</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_pages_wb\">set_pages_wb</a>);", 
"", 
"int <a class=\"id\" href=\"#set_pages_array_wb\">set_pages_array_wb</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, int <a class=\"id\" href=\"#addrinarray\">addrinarray</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#cpa_clear_pages_array\">cpa_clear_pages_array</a>(<a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#addrinarray\">addrinarray</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_CACHE_MASK\">_PAGE_CACHE_MASK</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#addrinarray\">addrinarray</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_memtype\">free_memtype</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_pages_array_wb\">set_pages_array_wb</a>);", 
"", 
"int <a class=\"id\" href=\"#set_pages_x\">set_pages_x</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#set_memory_x\">set_memory_x</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_pages_x\">set_pages_x</a>);", 
"", 
"int <a class=\"id\" href=\"#set_pages_nx\">set_pages_nx</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#set_memory_nx\">set_memory_nx</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_pages_nx\">set_pages_nx</a>);", 
"", 
"int <a class=\"id\" href=\"#set_pages_ro\">set_pages_ro</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#set_memory_ro\">set_memory_ro</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#set_pages_rw\">set_pages_rw</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#set_memory_rw\">set_memory_rw</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#numpages\">numpages</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PAGEALLOC\">CONFIG_DEBUG_PAGEALLOC</a>", 
"", 
"static int <a class=\"id\" href=\"#__set_pages_p\">__set_pages_p</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tempaddr\">tempaddr</a> = (unsigned long) <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpa_data\">cpa_data</a> <a class=\"id\" href=\"#cpa\">cpa</a> = { .<a class=\"id\" href=\"#vaddr\">vaddr</a> = &amp;<a class=\"id\" href=\"#tempaddr\">tempaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#numpages\">numpages</a> = <a class=\"id\" href=\"#numpages\">numpages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mask_set\">mask_set</a> = <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a> | <a class=\"id\" href=\"#_PAGE_RW\">_PAGE_RW</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mask_clr\">mask_clr</a> = <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(0),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = 0};", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No alias checking needed for setting present flag. otherwise,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we may need to break large pages for 64-bit kernel text</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mappings (this adds to complexity if we want to do this from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * atomic context especially). Let's keep it simple!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__change_page_attr_set_clr\">__change_page_attr_set_clr</a>(&amp;<a class=\"id\" href=\"#cpa\">cpa</a>, 0);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__set_pages_np\">__set_pages_np</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tempaddr\">tempaddr</a> = (unsigned long) <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpa_data\">cpa_data</a> <a class=\"id\" href=\"#cpa\">cpa</a> = { .<a class=\"id\" href=\"#vaddr\">vaddr</a> = &amp;<a class=\"id\" href=\"#tempaddr\">tempaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#numpages\">numpages</a> = <a class=\"id\" href=\"#numpages\">numpages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mask_set\">mask_set</a> = <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(0),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mask_clr\">mask_clr</a> = <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(<a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a> | <a class=\"id\" href=\"#_PAGE_RW\">_PAGE_RW</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = 0};", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No alias checking needed for setting not present flag. otherwise,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we may need to break large pages for 64-bit kernel text</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mappings (this adds to complexity if we want to do this from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * atomic context especially). Let's keep it simple!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__change_page_attr_set_clr\">__change_page_attr_set_clr</a>(&amp;<a class=\"id\" href=\"#cpa\">cpa</a>, 0);", 
"}", 
"", 
"void <a class=\"id\" href=\"#kernel_map_pages\">kernel_map_pages</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#numpages\">numpages</a>, int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#enable\">enable</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_check_no_locks_freed\">debug_check_no_locks_freed</a>(<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#numpages\">numpages</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If page allocator is not up yet then do not call c_p_a():</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#debug_pagealloc_enabled\">debug_pagealloc_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The return value is ignored as the calls cannot fail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Large pages for identity mappings are not used at boot time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and hence no memory allocations during large page split.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enable\">enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_pages_p\">__set_pages_p</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#numpages\">numpages</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_pages_np\">__set_pages_np</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#numpages\">numpages</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We should perform an IPI and flush all tlbs,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but that can deadlock-&gt;flush only current cpu:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__flush_tlb_all\">__flush_tlb_all</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIBERNATION\">CONFIG_HIBERNATION</a>", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#kernel_page_present\">kernel_page_present</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#lookup_address\">lookup_address</a>((unsigned long)<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>), &amp;<a class=\"id\" href=\"#level\">level</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#pte_val\">pte_val</a>(*<a class=\"id\" href=\"#pte\">pte</a>) &amp; <a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HIBERNATION */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_DEBUG_PAGEALLOC */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The testcases use internal knowledge of the implementation that shouldn't</span>", 
"<span class=\"comment\"> * be exposed to the rest of the kernel. Include these directly here.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CPA_DEBUG\">CONFIG_CPA_DEBUG</a>", 
"#<a class=\"id\" href=\"#include\">include</a> \"pageattr-test.c\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/a5/7c36e9e0789063a68d1c20445026b13d79a740.xr', __xr_tmp);
