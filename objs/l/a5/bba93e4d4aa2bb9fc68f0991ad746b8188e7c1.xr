var __xr_tmp = [
"<span class=\"ts\"/><span class=\"comment\">/* Yeah, we have to make difficult choice between forward transmission</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and retransmission... Both ways have their merits...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For now we do not retransmit anything, while we have some new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * segments to send. In the other cases, follow rule 3 for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NextSeg() specified in RFC3517.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_may_send_now\">tcp_may_send_now</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/* This gets called after a retransmit timeout, and the initially</span>", 
"<span class=\"comment\"> * retransmitted data is acknowledged.  It tries to continue</span>", 
"<span class=\"comment\"> * resending the rest of the retransmit queue, until either</span>", 
"<span class=\"comment\"> * we've sent it all or the congestion window limit is reached.</span>", 
"<span class=\"comment\"> * If doing SACK, the first ACK which comes back for a timeout</span>", 
"<span class=\"comment\"> * based retransmit packet might feed us FACK information again.</span>", 
"<span class=\"comment\"> * If so, we use it to avoid unnecessarily retransmissions.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcp_xmit_retransmit_queue\">tcp_xmit_retransmit_queue</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#hole\">hole</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#last_lost\">last_lost</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mib_idx\">mib_idx</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fwd_rexmitting\">fwd_rexmitting</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lost_out\">lost_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_high\">retransmit_high</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_skb_hint\">retransmit_skb_hint</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_skb_hint\">retransmit_skb_hint</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_lost\">last_lost</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#after\">after</a>(<a class=\"id\" href=\"#last_lost\">last_lost</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_high\">retransmit_high</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_lost\">last_lost</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_high\">retransmit_high</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_write_queue_head\">tcp_write_queue_head</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_lost\">last_lost</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_for_write_queue_from\">tcp_for_write_queue_from</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#sacked\">sacked</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#sacked\">sacked</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we could do better than to assign each time */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hole\">hole</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_skb_hint\">retransmit_skb_hint</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Assume this retransmit will generate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * only one packet for congestion window</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * calculation purposes.  This works because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tcp_retransmit_skb() will chop up the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * packet to be MSS sized and all the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * packet counting works out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_packets_in_flight\">tcp_packets_in_flight</a>(<a class=\"id\" href=\"#tp\">tp</a>) >= <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fwd_rexmitting\">fwd_rexmitting</a>) {", 
"<a class=\"id\" href=\"#begin_fwd\">begin_fwd</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#tcp_highest_sack_seq\">tcp_highest_sack_seq</a>(<a class=\"id\" href=\"#tp\">tp</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mib_idx\">mib_idx</a> = <a class=\"id\" href=\"#LINUX_MIB_TCPFORWARDRETRANS\">LINUX_MIB_TCPFORWARDRETRANS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_high\">retransmit_high</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retransmit_high\">retransmit_high</a> = <a class=\"id\" href=\"#last_lost\">last_lost</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tcp_can_forward_retransmit\">tcp_can_forward_retransmit</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Backtrack if necessary to non-L'ed skb */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hole\">hole</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#hole\">hole</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hole\">hole</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fwd_rexmitting\">fwd_rexmitting</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#begin_fwd\">begin_fwd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!(<a class=\"id\" href=\"#sacked\">sacked</a> &amp; <a class=\"id\" href=\"#TCPCB_LOST\">TCPCB_LOST</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hole\">hole</a> == <a class=\"id\" href=\"#NULL\">NULL</a> && !(<a class=\"id\" href=\"#sacked\">sacked</a> &amp; (<a class=\"id\" href=\"#TCPCB_SACKED_RETRANS\">TCPCB_SACKED_RETRANS</a>|<a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hole\">hole</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_lost\">last_lost</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_state\">icsk_ca_state</a> != <a class=\"id\" href=\"#TCP_CA_Loss\">TCP_CA_Loss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mib_idx\">mib_idx</a> = <a class=\"id\" href=\"#LINUX_MIB_TCPFASTRETRANS\">LINUX_MIB_TCPFASTRETRANS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mib_idx\">mib_idx</a> = <a class=\"id\" href=\"#LINUX_MIB_TCPSLOWSTARTRETRANS\">LINUX_MIB_TCPSLOWSTARTRETRANS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sacked\">sacked</a> &amp; (<a class=\"id\" href=\"#TCPCB_SACKED_ACKED\">TCPCB_SACKED_ACKED</a>|<a class=\"id\" href=\"#TCPCB_SACKED_RETRANS\">TCPCB_SACKED_RETRANS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_retransmit_skb\">tcp_retransmit_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#mib_idx\">mib_idx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#tcp_write_queue_head\">tcp_write_queue_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_csk_reset_xmit_timer\">inet_csk_reset_xmit_timer</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#ICSK_TIME_RETRANS\">ICSK_TIME_RETRANS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_rto\">icsk_rto</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#TCP_RTO_MAX\">TCP_RTO_MAX</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Send a fin.  The caller locks the socket for us.  This cannot be</span>", 
"<span class=\"comment\"> * allowed to fail queueing a FIN frame under any circumstances.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcp_send_fin\">tcp_send_fin</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_write_queue_tail\">tcp_write_queue_tail</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mss_now\">mss_now</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Optimization, tack on the FIN if we have a queue of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unsent frames.  But be careful about outgoing SACKS</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and IP options.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mss_now\">mss_now</a> = <a class=\"id\" href=\"#tcp_current_mss\">tcp_current_mss</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#TCPHDR_FIN\">TCPHDR_FIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#write_seq\">write_seq</a>++;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Socket is locked, keep trying until memory is available. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#alloc_skb_fclone\">alloc_skb_fclone</a>(<a class=\"id\" href=\"#MAX_TCP_HEADER\">MAX_TCP_HEADER</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_allocation\">sk_allocation</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#yield\">yield</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reserve space for headers and prepare control bits. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#MAX_TCP_HEADER\">MAX_TCP_HEADER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIN eats a sequence byte, write_seq advanced by tcp_queue_skb(). */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_init_nondata_skb\">tcp_init_nondata_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#write_seq\">write_seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#TCPHDR_ACK\">TCPHDR_ACK</a> | <a class=\"id\" href=\"#TCPHDR_FIN\">TCPHDR_FIN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_queue_skb\">tcp_queue_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__tcp_push_pending_frames\">__tcp_push_pending_frames</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#mss_now\">mss_now</a>, <a class=\"id\" href=\"#TCP_NAGLE_OFF\">TCP_NAGLE_OFF</a>);", 
"}", 
"", 
"<span class=\"comment\">/* We get here when a process closes a file descriptor (either due to</span>", 
"<span class=\"comment\"> * an explicit close() or as a byproduct of exit()'ing) and there</span>", 
"<span class=\"comment\"> * was unread data in the receive queue.  This behavior is recommended</span>", 
"<span class=\"comment\"> * by RFC 2525, section 2.17.  -DaveM</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcp_send_active_reset\">tcp_send_active_reset</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NOTE: No TCP options attached and we never retransmit this. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#MAX_TCP_HEADER\">MAX_TCP_HEADER</a>, <a class=\"id\" href=\"#priority\">priority</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS\">NET_INC_STATS</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#LINUX_MIB_TCPABORTFAILED\">LINUX_MIB_TCPABORTFAILED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reserve space for headers and prepare control bits. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#MAX_TCP_HEADER\">MAX_TCP_HEADER</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_init_nondata_skb\">tcp_init_nondata_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#tcp_acceptable_seq\">tcp_acceptable_seq</a>(<a class=\"id\" href=\"#sk\">sk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#TCPHDR_ACK\">TCPHDR_ACK</a> | <a class=\"id\" href=\"#TCPHDR_RST\">TCPHDR_RST</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Send it off. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#when\">when</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_transmit_skb\">tcp_transmit_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, 0, <a class=\"id\" href=\"#priority\">priority</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS\">NET_INC_STATS</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#LINUX_MIB_TCPABORTFAILED\">LINUX_MIB_TCPABORTFAILED</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_INC_STATS\">TCP_INC_STATS</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#TCP_MIB_OUTRSTS\">TCP_MIB_OUTRSTS</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Send a crossed SYN-ACK during socket establishment.</span>", 
"<span class=\"comment\"> * WARNING: This routine must only be called when we have already sent</span>", 
"<span class=\"comment\"> * a SYN packet that crossed the incoming SYN that caused this routine</span>", 
"<span class=\"comment\"> * to get called. If this assumption fails then the initial rcv_wnd</span>", 
"<span class=\"comment\"> * and rcv_wscale values will not be correct.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tcp_send_synack\">tcp_send_synack</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_write_queue_head\">tcp_write_queue_head</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || !(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TCPHDR_SYN\">TCPHDR_SYN</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"tcp_send_synack: wrong queue state\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TCPHDR_ACK\">TCPHDR_ACK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#nskb\">nskb</a> = <a class=\"id\" href=\"#skb_copy\">skb_copy</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nskb\">nskb</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_unlink_write_queue\">tcp_unlink_write_queue</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_header_release\">skb_header_release</a>(<a class=\"id\" href=\"#nskb\">nskb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__tcp_add_write_queue_head\">__tcp_add_write_queue_head</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#nskb\">nskb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_wmem_free_skb\">sk_wmem_free_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_queued\">sk_wmem_queued</a> += <a class=\"id\" href=\"#nskb\">nskb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_mem_charge\">sk_mem_charge</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#nskb\">nskb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#nskb\">nskb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#TCPHDR_ACK\">TCPHDR_ACK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_ECN_send_synack\">TCP_ECN_send_synack</a>(<a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#when\">when</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tcp_transmit_skb\">tcp_transmit_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, 1, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Prepare a SYN-ACK. */</span>", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#tcp_make_synack\">tcp_make_synack</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#request_sock\">request_sock</a> *<a class=\"id\" href=\"#req\">req</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#request_values\">request_values</a> *<a class=\"id\" href=\"#rvp\">rvp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_out_options\">tcp_out_options</a> <a class=\"id\" href=\"#opts\">opts</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_extend_values\">tcp_extend_values</a> *<a class=\"id\" href=\"#xvp\">xvp</a> = <a class=\"id\" href=\"#tcp_xv\">tcp_xv</a>(<a class=\"id\" href=\"#rvp\">rvp</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_request_sock\">inet_request_sock</a> *<a class=\"id\" href=\"#ireq\">ireq</a> = <a class=\"id\" href=\"#inet_rsk\">inet_rsk</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tcp_cookie_values\">tcp_cookie_values</a> *<a class=\"id\" href=\"#cvp\">cvp</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#cookie_values\">cookie_values</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a> *<a class=\"id\" href=\"#th\">th</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_md5sig_key\">tcp_md5sig_key</a> *<a class=\"id\" href=\"#md5\">md5</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tcp_header_size\">tcp_header_size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mss\">mss</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#s_data_desired\">s_data_desired</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cvp\">cvp</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#cvp\">cvp</a>-><a class=\"id\" href=\"#s_data_constant\">s_data_constant</a> && <a class=\"id\" href=\"#cvp\">cvp</a>-><a class=\"id\" href=\"#s_data_desired\">s_data_desired</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_data_desired\">s_data_desired</a> = <a class=\"id\" href=\"#cvp\">cvp</a>-><a class=\"id\" href=\"#s_data_desired\">s_data_desired</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#sock_wmalloc\">sock_wmalloc</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#MAX_TCP_HEADER\">MAX_TCP_HEADER</a> + 15 + <a class=\"id\" href=\"#s_data_desired\">s_data_desired</a>, 1, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reserve space for headers. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#MAX_TCP_HEADER\">MAX_TCP_HEADER</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_dst_set\">skb_dst_set</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#dst_clone\">dst_clone</a>(<a class=\"id\" href=\"#dst\">dst</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mss\">mss</a> = <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_ADVMSS\">RTAX_ADVMSS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#user_mss\">user_mss</a> && <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#user_mss\">user_mss</a> &lt; <a class=\"id\" href=\"#mss\">mss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mss\">mss</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#user_mss\">user_mss</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#rcv_wnd\">rcv_wnd</a> == 0) { <span class=\"comment\">/* ignored for retransmitted syns */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#rcv_wscale\">rcv_wscale</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Set this up on the first call only */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a> ? : <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_WINDOW\">RTAX_WINDOW</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* tcp_full_space because it is guaranteed to be the first packet */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_select_initial_window\">tcp_select_initial_window</a>(<a class=\"id\" href=\"#tcp_full_space\">tcp_full_space</a>(<a class=\"id\" href=\"#sk\">sk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mss\">mss</a> - (<a class=\"id\" href=\"#ireq\">ireq</a>-><a class=\"id\" href=\"#tstamp_ok\">tstamp_ok</a> ? <a class=\"id\" href=\"#TCPOLEN_TSTAMP_ALIGNED\">TCPOLEN_TSTAMP_ALIGNED</a> : 0),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#rcv_wnd\">rcv_wnd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ireq\">ireq</a>-><a class=\"id\" href=\"#wscale_ok\">wscale_ok</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#rcv_wscale\">rcv_wscale</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_INITRWND\">RTAX_INITRWND</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ireq\">ireq</a>-><a class=\"id\" href=\"#rcv_wscale\">rcv_wscale</a> = <a class=\"id\" href=\"#rcv_wscale\">rcv_wscale</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#opts\">opts</a>, 0, sizeof(<a class=\"id\" href=\"#opts\">opts</a>));", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYN_COOKIES\">CONFIG_SYN_COOKIES</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cookie_ts\">cookie_ts</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#when\">when</a> = <a class=\"id\" href=\"#cookie_init_timestamp\">cookie_init_timestamp</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>else", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#when\">when</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_header_size\">tcp_header_size</a> = <a class=\"id\" href=\"#tcp_synack_options\">tcp_synack_options</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#mss\">mss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#opts\">opts</a>, &amp;<a class=\"id\" href=\"#md5\">md5</a>, <a class=\"id\" href=\"#xvp\">xvp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ sizeof(*<a class=\"id\" href=\"#th\">th</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_push\">skb_push</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#tcp_header_size\">tcp_header_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_transport_header\">skb_reset_transport_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a> = <a class=\"id\" href=\"#tcp_hdr\">tcp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#th\">th</a>, 0, sizeof(struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#syn\">syn</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#ack\">ack</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_ECN_make_synack\">TCP_ECN_make_synack</a>(<a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#th\">th</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#source\">source</a> = <a class=\"id\" href=\"#ireq\">ireq</a>-><a class=\"id\" href=\"#loc_port\">loc_port</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#dest\">dest</a> = <a class=\"id\" href=\"#ireq\">ireq</a>-><a class=\"id\" href=\"#rmt_port\">rmt_port</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Setting of flags are superfluous here for callers (and ECE is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not even correctly set)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_init_nondata_skb\">tcp_init_nondata_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#tcp_rsk\">tcp_rsk</a>(<a class=\"id\" href=\"#req\">req</a>)-><a class=\"id\" href=\"#snt_isn\">snt_isn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#TCPHDR_SYN\">TCPHDR_SYN</a> | <a class=\"id\" href=\"#TCPHDR_ACK\">TCPHDR_ACK</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#OPTION_COOKIE_EXTENSION\">OPTION_COOKIE_EXTENSION</a> &amp; <a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#options\">options</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s_data_desired\">s_data_desired</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#s_data_desired\">s_data_desired</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* copy data directly from the listening socket. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#cvp\">cvp</a>-><a class=\"id\" href=\"#s_data_payload\">s_data_payload</a>, <a class=\"id\" href=\"#s_data_desired\">s_data_desired</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a> += <a class=\"id\" href=\"#s_data_desired\">s_data_desired</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#hash_size\">hash_size</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#workspace\">workspace</a>[<a class=\"id\" href=\"#SHA_WORKSPACE_WORDS\">SHA_WORKSPACE_WORDS</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#mess\">mess</a> = &amp;<a class=\"id\" href=\"#xvp\">xvp</a>-><a class=\"id\" href=\"#cookie_bakery\">cookie_bakery</a>[<a class=\"id\" href=\"#COOKIE_DIGEST_WORDS\">COOKIE_DIGEST_WORDS</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#tail\">tail</a> = &amp;<a class=\"id\" href=\"#mess\">mess</a>[<a class=\"id\" href=\"#COOKIE_MESSAGE_WORDS\">COOKIE_MESSAGE_WORDS</a>-1];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Secret recipe depends on the Timestamp, (future)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Sequence and Acknowledgment Numbers, Initiator</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Cookie, and others handled by IP variant caller.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tail\">tail</a>-- ^= <a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#tsval\">tsval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tail\">tail</a>-- ^= <a class=\"id\" href=\"#tcp_rsk\">tcp_rsk</a>(<a class=\"id\" href=\"#req\">req</a>)-><a class=\"id\" href=\"#rcv_isn\">rcv_isn</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tail\">tail</a>-- ^= <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a> + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* recommended */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tail\">tail</a>-- ^= (((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#dest\">dest</a> << 16) | (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#source\">source</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tail\">tail</a>-- ^= (<a class=\"id\" href=\"#u32\">u32</a>)(unsigned long)<a class=\"id\" href=\"#cvp\">cvp</a>; <span class=\"comment\">/* per sockopt */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sha_transform\">sha_transform</a>((<a class=\"id\" href=\"#__u32\">__u32</a> *)&amp;<a class=\"id\" href=\"#xvp\">xvp</a>-><a class=\"id\" href=\"#cookie_bakery\">cookie_bakery</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (char *)<a class=\"id\" href=\"#mess\">mess</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#workspace\">workspace</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#hash_location\">hash_location</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__u8\">__u8</a> *)&amp;<a class=\"id\" href=\"#xvp\">xvp</a>-><a class=\"id\" href=\"#cookie_bakery\">cookie_bakery</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#htonl\">htonl</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#ack_seq\">ack_seq</a> = <a class=\"id\" href=\"#htonl\">htonl</a>(<a class=\"id\" href=\"#tcp_rsk\">tcp_rsk</a>(<a class=\"id\" href=\"#req\">req</a>)-><a class=\"id\" href=\"#rcv_isn\">rcv_isn</a> + 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* RFC1323: The window in SYN &amp; SYN/ACK segments is never scaled. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#window\">window</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#rcv_wnd\">rcv_wnd</a>, 65535U));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_options_write\">tcp_options_write</a>((<a class=\"id\" href=\"#__be32\">__be32</a> *)(<a class=\"id\" href=\"#th\">th</a> + 1), <a class=\"id\" href=\"#tp\">tp</a>, &amp;<a class=\"id\" href=\"#opts\">opts</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#th\">th</a>-><a class=\"id\" href=\"#doff\">doff</a> = (<a class=\"id\" href=\"#tcp_header_size\">tcp_header_size</a> >> 2);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_ADD_STATS\">TCP_ADD_STATS</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#TCP_MIB_OUTSEGS\">TCP_MIB_OUTSEGS</a>, <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TCP_MD5SIG\">CONFIG_TCP_MD5SIG</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Okay, we have all we need - do the md5 hash if needed */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#md5\">md5</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_rsk\">tcp_rsk</a>(<a class=\"id\" href=\"#req\">req</a>)-><a class=\"id\" href=\"#af_specific\">af_specific</a>-><a class=\"id\" href=\"#calc_md5_hash\">calc_md5_hash</a>(<a class=\"id\" href=\"#opts\">opts</a>.<a class=\"id\" href=\"#hash_location\">hash_location</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#md5\">md5</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcp_make_synack\">tcp_make_synack</a>);", 
"", 
"<span class=\"comment\">/* Do all connect socket setups that can be done AF independent. */</span>", 
"static void <a class=\"id\" href=\"#tcp_connect_init\">tcp_connect_init</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#__sk_dst_get\">__sk_dst_get</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#rcv_wscale\">rcv_wscale</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We'll fix this up when we get a response from the other end.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See tcp_input.c:tcp_rcv_state_process case TCP_SYN_SENT.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#tcp_header_len\">tcp_header_len</a> = sizeof(struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#sysctl_tcp_timestamps\">sysctl_tcp_timestamps</a> ? <a class=\"id\" href=\"#TCPOLEN_TSTAMP_ALIGNED\">TCPOLEN_TSTAMP_ALIGNED</a> : 0);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TCP_MD5SIG\">CONFIG_TCP_MD5SIG</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#af_specific\">af_specific</a>-><a class=\"id\" href=\"#md5_lookup\">md5_lookup</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#sk\">sk</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#tcp_header_len\">tcp_header_len</a> += <a class=\"id\" href=\"#TCPOLEN_MD5SIG_ALIGNED\">TCPOLEN_MD5SIG_ALIGNED</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If user gave his TCP_MAXSEG, record it to clamp */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#user_mss\">user_mss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#mss_clamp\">mss_clamp</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#user_mss\">user_mss</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#max_window\">max_window</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_mtup_init\">tcp_mtup_init</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_sync_mss\">tcp_sync_mss</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#dst_mtu\">dst_mtu</a>(<a class=\"id\" href=\"#dst\">dst</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a> = <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_WINDOW\">RTAX_WINDOW</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a> = <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_ADVMSS\">RTAX_ADVMSS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#user_mss\">user_mss</a> && <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#user_mss\">user_mss</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#user_mss\">user_mss</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_initialize_rcv_mss\">tcp_initialize_rcv_mss</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_select_initial_window\">tcp_select_initial_window</a>(<a class=\"id\" href=\"#tcp_full_space\">tcp_full_space</a>(<a class=\"id\" href=\"#sk\">sk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#advmss\">advmss</a> - (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#ts_recent_stamp\">ts_recent_stamp</a> ? <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#tcp_header_len\">tcp_header_len</a> - sizeof(struct <a class=\"id\" href=\"#tcphdr\">tcphdr</a>) : 0),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_wnd\">rcv_wnd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#window_clamp\">window_clamp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sysctl_tcp_window_scaling\">sysctl_tcp_window_scaling</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#rcv_wscale\">rcv_wscale</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_INITRWND\">RTAX_INITRWND</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rx_opt\">rx_opt</a>.<a class=\"id\" href=\"#rcv_wscale\">rcv_wscale</a> = <a class=\"id\" href=\"#rcv_wscale\">rcv_wscale</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_ssthresh\">rcv_ssthresh</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_wnd\">rcv_wnd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_err\">sk_err</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_reset_flag\">sock_reset_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_DONE\">SOCK_DONE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_wnd\">snd_wnd</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_init_wl\">tcp_init_wl</a>(<a class=\"id\" href=\"#tp\">tp</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#write_seq\">write_seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_sml\">snd_sml</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#write_seq\">write_seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_up\">snd_up</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#write_seq\">write_seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_nxt\">rcv_nxt</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rcv_wup\">rcv_wup</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#copied_seq\">copied_seq</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_rto\">icsk_rto</a> = <a class=\"id\" href=\"#TCP_TIMEOUT_INIT\">TCP_TIMEOUT_INIT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_retransmits\">icsk_retransmits</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_clear_retrans\">tcp_clear_retrans</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Build a SYN and send it off. */</span>", 
"int <a class=\"id\" href=\"#tcp_connect\">tcp_connect</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#buff\">buff</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_connect_init\">tcp_connect_init</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buff\">buff</a> = <a class=\"id\" href=\"#alloc_skb_fclone\">alloc_skb_fclone</a>(<a class=\"id\" href=\"#MAX_TCP_HEADER\">MAX_TCP_HEADER</a> + 15, <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_allocation\">sk_allocation</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#buff\">buff</a> == <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOBUFS\">ENOBUFS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reserve space for headers. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#buff\">buff</a>, <a class=\"id\" href=\"#MAX_TCP_HEADER\">MAX_TCP_HEADER</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#write_seq\">write_seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_init_nondata_skb\">tcp_init_nondata_skb</a>(<a class=\"id\" href=\"#buff\">buff</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#write_seq\">write_seq</a>++, <a class=\"id\" href=\"#TCPHDR_SYN\">TCPHDR_SYN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_ECN_send_syn\">TCP_ECN_send_syn</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#buff\">buff</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Send it off. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#buff\">buff</a>)-><a class=\"id\" href=\"#when\">when</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#retrans_stamp\">retrans_stamp</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#buff\">buff</a>)-><a class=\"id\" href=\"#when\">when</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_header_release\">skb_header_release</a>(<a class=\"id\" href=\"#buff\">buff</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__tcp_add_write_queue_tail\">__tcp_add_write_queue_tail</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#buff\">buff</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_queued\">sk_wmem_queued</a> += <a class=\"id\" href=\"#buff\">buff</a>-><a class=\"id\" href=\"#truesize\">truesize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_mem_charge\">sk_mem_charge</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#buff\">buff</a>-><a class=\"id\" href=\"#truesize\">truesize</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a> += <a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#buff\">buff</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_transmit_skb\">tcp_transmit_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#buff\">buff</a>, 1, <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_allocation\">sk_allocation</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We change tp-&gt;snd_nxt after the tcp_transmit_skb() call</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in order to make this packet get counted in tcpOutSegs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_nxt\">snd_nxt</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#write_seq\">write_seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#pushed_seq\">pushed_seq</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#write_seq\">write_seq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_INC_STATS\">TCP_INC_STATS</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#TCP_MIB_ACTIVEOPENS\">TCP_MIB_ACTIVEOPENS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Timer for repeating the SYN until an answer. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_csk_reset_xmit_timer\">inet_csk_reset_xmit_timer</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#ICSK_TIME_RETRANS\">ICSK_TIME_RETRANS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_rto\">icsk_rto</a>, <a class=\"id\" href=\"#TCP_RTO_MAX\">TCP_RTO_MAX</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcp_connect\">tcp_connect</a>);", 
"", 
"<span class=\"comment\">/* Send out a delayed ack, the caller does the policy checking</span>", 
"<span class=\"comment\"> * to see if we should even be here.  See tcp_input.c:tcp_ack_snd_check()</span>", 
"<span class=\"comment\"> * for details.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcp_send_delayed_ack\">tcp_send_delayed_ack</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ato\">ato</a> = <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#ato\">ato</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ato\">ato</a> &gt; <a class=\"id\" href=\"#TCP_DELACK_MIN\">TCP_DELACK_MIN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#max_ato\">max_ato</a> = <a class=\"id\" href=\"#HZ\">HZ</a> / 2;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#pingpong\">pingpong</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#pending\">pending</a> &amp; <a class=\"id\" href=\"#ICSK_ACK_PUSHED\">ICSK_ACK_PUSHED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_ato\">max_ato</a> = <a class=\"id\" href=\"#TCP_DELACK_MAX\">TCP_DELACK_MAX</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Slow path, intersegment interval is \"high\". */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If some rtt estimate is known, use it to bound delayed ack.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do not use inet_csk(sk)-&gt;icsk_rto here, use results of rtt measurements</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * directly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#srtt\">srtt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#rtt\">rtt</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#srtt\">srtt</a> >> 3, <a class=\"id\" href=\"#TCP_DELACK_MIN\">TCP_DELACK_MIN</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtt\">rtt</a> &lt; <a class=\"id\" href=\"#max_ato\">max_ato</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_ato\">max_ato</a> = <a class=\"id\" href=\"#rtt\">rtt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ato\">ato</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#ato\">ato</a>, <a class=\"id\" href=\"#max_ato\">max_ato</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Stay within the limit we were given */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#ato\">ato</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use new timeout only if there wasn't a older one earlier. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#pending\">pending</a> &amp; <a class=\"id\" href=\"#ICSK_ACK_TIMER\">ICSK_ACK_TIMER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If delack timer was blocked or is about to expire,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * send ACK now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#blocked\">blocked</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#time_before_eq\">time_before_eq</a>(<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + (<a class=\"id\" href=\"#ato\">ato</a> >> 2))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_send_ack\">tcp_send_ack</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#timeout\">timeout</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#pending\">pending</a> |= <a class=\"id\" href=\"#ICSK_ACK_SCHED\">ICSK_ACK_SCHED</a> | <a class=\"id\" href=\"#ICSK_ACK_TIMER\">ICSK_ACK_TIMER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_reset_timer\">sk_reset_timer</a>(<a class=\"id\" href=\"#sk\">sk</a>, &amp;<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_delack_timer\">icsk_delack_timer</a>, <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"}", 
"", 
"<span class=\"comment\">/* This routine sends an ack and also updates the window. */</span>", 
"void <a class=\"id\" href=\"#tcp_send_ack\">tcp_send_ack</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#buff\">buff</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we have been reset, we may not send again. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a> == <a class=\"id\" href=\"#TCP_CLOSE\">TCP_CLOSE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We are not putting this on the write queue, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tcp_transmit_skb() will set the ownership to this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buff\">buff</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#MAX_TCP_HEADER\">MAX_TCP_HEADER</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buff\">buff</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_csk_schedule_ack\">inet_csk_schedule_ack</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_ack\">icsk_ack</a>.<a class=\"id\" href=\"#ato\">ato</a> = <a class=\"id\" href=\"#TCP_ATO_MIN\">TCP_ATO_MIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_csk_reset_xmit_timer\">inet_csk_reset_xmit_timer</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#ICSK_TIME_DACK\">ICSK_TIME_DACK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#TCP_DELACK_MAX\">TCP_DELACK_MAX</a>, <a class=\"id\" href=\"#TCP_RTO_MAX\">TCP_RTO_MAX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reserve space for headers and prepare control bits. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#buff\">buff</a>, <a class=\"id\" href=\"#MAX_TCP_HEADER\">MAX_TCP_HEADER</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_init_nondata_skb\">tcp_init_nondata_skb</a>(<a class=\"id\" href=\"#buff\">buff</a>, <a class=\"id\" href=\"#tcp_acceptable_seq\">tcp_acceptable_seq</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#TCPHDR_ACK\">TCPHDR_ACK</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Send it off, this clears delayed acks for us. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#buff\">buff</a>)-><a class=\"id\" href=\"#when\">when</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_transmit_skb\">tcp_transmit_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#buff\">buff</a>, 0, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"}", 
"", 
"<span class=\"comment\">/* This routine sends a packet with an out of date sequence</span>", 
"<span class=\"comment\"> * number. It assumes the other end will try to ack it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Question: what should we make while urgent mode?</span>", 
"<span class=\"comment\"> * 4.4BSD forces sending single byte of data. We cannot send</span>", 
"<span class=\"comment\"> * out of window data, because we have SND.NXT==SND.MAX...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Current solution: to send TWO zero-length segments in urgent mode:</span>", 
"<span class=\"comment\"> * one is with SEG.SEQ=SND.UNA to deliver urgent pointer, another is</span>", 
"<span class=\"comment\"> * out-of-date with SND.UNA-1 to probe window.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tcp_xmit_probe_skb\">tcp_xmit_probe_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#urgent\">urgent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't queue it, tcp_transmit_skb() sets ownership. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#MAX_TCP_HEADER\">MAX_TCP_HEADER</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reserve space for headers and set control bits. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#MAX_TCP_HEADER\">MAX_TCP_HEADER</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Use a previous sequence.  This should cause the other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * end to send an ack.  Don't queue or clone SKB, just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * send it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_init_nondata_skb\">tcp_init_nondata_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a> - !<a class=\"id\" href=\"#urgent\">urgent</a>, <a class=\"id\" href=\"#TCPHDR_ACK\">TCPHDR_ACK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#when\">when</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tcp_transmit_skb\">tcp_transmit_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, 0, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Initiate keepalive or window probe from timer. */</span>", 
"int <a class=\"id\" href=\"#tcp_write_wakeup\">tcp_write_wakeup</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a> == <a class=\"id\" href=\"#TCP_CLOSE\">TCP_CLOSE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#tcp_wnd_end\">tcp_wnd_end</a>(<a class=\"id\" href=\"#tp\">tp</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mss\">mss</a> = <a class=\"id\" href=\"#tcp_current_mss\">tcp_current_mss</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#seg_size\">seg_size</a> = <a class=\"id\" href=\"#tcp_wnd_end\">tcp_wnd_end</a>(<a class=\"id\" href=\"#tp\">tp</a>) - <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#before\">before</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#pushed_seq\">pushed_seq</a>, <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#pushed_seq\">pushed_seq</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We are probing the opening of a window</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but the window size is != 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * must have been a result SWS avoidance ( sender )</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#seg_size\">seg_size</a> &lt; <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#end_seq\">end_seq</a> - <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#seq\">seq</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#mss\">mss</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seg_size\">seg_size</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#seg_size\">seg_size</a>, <a class=\"id\" href=\"#mss\">mss</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#TCPHDR_PSH\">TCPHDR_PSH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_fragment\">tcp_fragment</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#seg_size\">seg_size</a>, <a class=\"id\" href=\"#mss\">mss</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#tcp_skb_pcount\">tcp_skb_pcount</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_set_skb_tso_segs\">tcp_set_skb_tso_segs</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#mss\">mss</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#TCPHDR_PSH\">TCPHDR_PSH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#when\">when</a> = <a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#tcp_transmit_skb\">tcp_transmit_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, 1, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_event_new_data_sent\">tcp_event_new_data_sent</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#between\">between</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_up\">snd_up</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a> + 1, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_una\">snd_una</a> + 0xFFFF))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_xmit_probe_skb\">tcp_xmit_probe_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tcp_xmit_probe_skb\">tcp_xmit_probe_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, 0);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* A window probe timeout has occurred.  If window is not closed send</span>", 
"<span class=\"comment\"> * a partial packet else a zero probe.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcp_send_probe0\">tcp_send_probe0</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#tcp_write_wakeup\">tcp_write_wakeup</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a> || !<a class=\"id\" href=\"#tcp_send_head\">tcp_send_head</a>(<a class=\"id\" href=\"#sk\">sk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Cancel probe timer, if it is not required. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_probes_out\">icsk_probes_out</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_backoff\">icsk_backoff</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_backoff\">icsk_backoff</a> &lt; <a class=\"id\" href=\"#sysctl_tcp_retries2\">sysctl_tcp_retries2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_backoff\">icsk_backoff</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_probes_out\">icsk_probes_out</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_csk_reset_xmit_timer\">inet_csk_reset_xmit_timer</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#ICSK_TIME_PROBE0\">ICSK_TIME_PROBE0</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_rto\">icsk_rto</a> << <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_backoff\">icsk_backoff</a>, <a class=\"id\" href=\"#TCP_RTO_MAX\">TCP_RTO_MAX</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#TCP_RTO_MAX\">TCP_RTO_MAX</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If packet was not sent due to local congestion,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * do not backoff and do not remember icsk_probes_out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Let local senders to fight for local resources.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Use accumulated backoff yet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_probes_out\">icsk_probes_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_probes_out\">icsk_probes_out</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_csk_reset_xmit_timer\">inet_csk_reset_xmit_timer</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#ICSK_TIME_PROBE0\">ICSK_TIME_PROBE0</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_rto\">icsk_rto</a> << <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_backoff\">icsk_backoff</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#TCP_RESOURCE_PROBE_INTERVAL\">TCP_RESOURCE_PROBE_INTERVAL</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#TCP_RTO_MAX\">TCP_RTO_MAX</a>);", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/a5/bba93e4d4aa2bb9fc68f0991ad746b8188e7c1.xr', __xr_tmp);
