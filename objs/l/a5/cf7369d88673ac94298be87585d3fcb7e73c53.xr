var __xr_tmp = [
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_irq_clear\">sff_irq_clear</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_irq_clear\">sff_irq_clear</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_sff_irq_on\">ata_sff_irq_on</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_sff_thaw\">ata_sff_thaw</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_sff_prereset - prepare SFF link for reset</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@link: SFF link to be reset</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@deadline: deadline jiffies for the operation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SFF link @link is about to be reset.  Initialize it.  It first</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>calls ata_std_prereset() and wait for !BSY if the port is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>being softreset.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -errno otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_sff_prereset\">ata_sff_prereset</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>, unsigned long <a class=\"id\" href=\"#deadline\">deadline</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_eh_context\">ata_eh_context</a> *<a class=\"id\" href=\"#ehc\">ehc</a> = &amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_context\">eh_context</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_std_prereset\">ata_std_prereset</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#deadline\">deadline</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if we're about to do hardreset, nothing more to do */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ehc\">ehc</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#action\">action</a> &amp; <a class=\"id\" href=\"#ATA_EH_HARDRESET\">ATA_EH_HARDRESET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* wait for !BSY if we don't know that no device is attached */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_link_offline\">ata_link_offline</a>(<a class=\"id\" href=\"#link\">link</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_sff_wait_ready\">ata_sff_wait_ready</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#deadline\">deadline</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> && <a class=\"id\" href=\"#rc\">rc</a> != -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_link_printk\">ata_link_printk</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, \"device not ready \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"(errno=%d), forcing hardreset\\n\", <a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehc\">ehc</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#action\">action</a> |= <a class=\"id\" href=\"#ATA_EH_HARDRESET\">ATA_EH_HARDRESET</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_sff_prereset\">ata_sff_prereset</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_devchk - PATA device presence detection</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: ATA channel to examine</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@device: Device to examine (starting at zero)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This technique was originally described in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Hale Landis's ATADRVR (www.ata-atapi.com), and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>later found its way into the ATA/ATAPI spec.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Write a pattern to the ATA shadow registers,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and if a device is present, it will respond by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>correctly storing and echoing back the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ATA shadow register contents.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>caller.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_devchk\">ata_devchk</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, unsigned int <a class=\"id\" href=\"#device\">device</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_ioports\">ata_ioports</a> *<a class=\"id\" href=\"#ioaddr\">ioaddr</a> = &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#nsect\">nsect</a>, <a class=\"id\" href=\"#lbal\">lbal</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_dev_select\">sff_dev_select</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#device\">device</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iowrite8\">iowrite8</a>(0x55, <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#nsect_addr\">nsect_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iowrite8\">iowrite8</a>(0xaa, <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#lbal_addr\">lbal_addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iowrite8\">iowrite8</a>(0xaa, <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#nsect_addr\">nsect_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iowrite8\">iowrite8</a>(0x55, <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#lbal_addr\">lbal_addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iowrite8\">iowrite8</a>(0x55, <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#nsect_addr\">nsect_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iowrite8\">iowrite8</a>(0xaa, <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#lbal_addr\">lbal_addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nsect\">nsect</a> = <a class=\"id\" href=\"#ioread8\">ioread8</a>(<a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#nsect_addr\">nsect_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lbal\">lbal</a> = <a class=\"id\" href=\"#ioread8\">ioread8</a>(<a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#lbal_addr\">lbal_addr</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#nsect\">nsect</a> == 0x55) && (<a class=\"id\" href=\"#lbal\">lbal</a> == 0xaa))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;<span class=\"ts\"/><span class=\"comment\">/* we found a device */</span>", 
"", 
"<span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nothing found */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_sff_dev_classify - Parse returned ATA device signature</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: ATA device to classify (starting at zero)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@present: device seems present</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@r_err: Value of error register on completion</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>After an event -- SRST, E.D.D., or SATA COMRESET -- occurs,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>an ATA/ATAPI-defined set of values is placed in the ATA</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>shadow registers, indicating the results of device detection</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and diagnostics.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Select the ATA device, and read the values from the ATA shadow</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>registers.  Then parse according to the Error register value,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and the spec-defined values examined by ata_dev_classify().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>caller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Device type - %ATA_DEV_ATA, %ATA_DEV_ATAPI or %ATA_DEV_NONE.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#ata_sff_dev_classify\">ata_sff_dev_classify</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#present\">present</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#r_err\">r_err</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> <a class=\"id\" href=\"#tf\">tf</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#class\">class</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_dev_select\">sff_dev_select</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#tf\">tf</a>, 0, sizeof(<a class=\"id\" href=\"#tf\">tf</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_tf_read\">sff_tf_read</a>(<a class=\"id\" href=\"#ap\">ap</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#feature\">feature</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r_err\">r_err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#r_err\">r_err</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* see if device passed diags: continue and warn later */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* diagnostic fail : do nothing _YET_ */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> |= <a class=\"id\" href=\"#ATA_HORKAGE_DIAGNOSTIC\">ATA_HORKAGE_DIAGNOSTIC</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#err\">err</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* do nothing */</span> ;", 
"<span class=\"ts\"/>else if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a> == 0) && (<a class=\"id\" href=\"#err\">err</a> == 0x81))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* do nothing */</span> ;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ATA_DEV_NONE\">ATA_DEV_NONE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* determine if device is ATA or ATAPI */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#ata_dev_classify\">ata_dev_classify</a>(&amp;<a class=\"id\" href=\"#tf\">tf</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#ATA_DEV_UNKNOWN\">ATA_DEV_UNKNOWN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If the device failed diagnostic, it's likely to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * have reported incorrect device signature too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Assume ATA device if the device seems present but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * device signature is invalid with diagnostic</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * failure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#present\">present</a> && (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> &amp; <a class=\"id\" href=\"#ATA_HORKAGE_DIAGNOSTIC\">ATA_HORKAGE_DIAGNOSTIC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#ATA_DEV_ATA\">ATA_DEV_ATA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#ATA_DEV_NONE\">ATA_DEV_NONE</a>;", 
"<span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#ATA_DEV_ATA\">ATA_DEV_ATA</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_check_status\">sff_check_status</a>(<a class=\"id\" href=\"#ap\">ap</a>) == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#ATA_DEV_NONE\">ATA_DEV_NONE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#class\">class</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_sff_dev_classify\">ata_sff_dev_classify</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_sff_wait_after_reset - wait for devices to become ready after reset</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@link: SFF link which is just reset</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@devmask: mask of present devices</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@deadline: deadline jiffies for the operation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Wait devices attached to SFF @link to become ready after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>reset.  It contains preceding 150ms wait to avoid accessing TF</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>status register too early.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -ENODEV if some or all of devices in @devmask</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>don't seem to exist.  -errno on other errors.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_sff_wait_after_reset\">ata_sff_wait_after_reset</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>, unsigned int <a class=\"id\" href=\"#devmask\">devmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#deadline\">deadline</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_ioports\">ata_ioports</a> *<a class=\"id\" href=\"#ioaddr\">ioaddr</a> = &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#dev0\">dev0</a> = <a class=\"id\" href=\"#devmask\">devmask</a> &amp; (1 << 0);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#dev1\">dev1</a> = <a class=\"id\" href=\"#devmask\">devmask</a> &amp; (1 << 1);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(<a class=\"id\" href=\"#ATA_WAIT_AFTER_RESET\">ATA_WAIT_AFTER_RESET</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* always check readiness of the master device */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_sff_wait_ready\">ata_sff_wait_ready</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#deadline\">deadline</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* -ENODEV means the odd clown forgot the D7 pulldown resistor</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and TF status is 0xff, bail out on it too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if device 1 was found in ata_devchk, wait for register</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * access briefly, then wait for BSY to clear.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev1\">dev1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_dev_select\">sff_dev_select</a>(<a class=\"id\" href=\"#ap\">ap</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Wait for register access.  Some ATAPI devices fail</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to set nsect/lbal after reset, so don't waste too</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * much time on it.  We're gonna wait for !BSY anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 2; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#nsect\">nsect</a>, <a class=\"id\" href=\"#lbal\">lbal</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nsect\">nsect</a> = <a class=\"id\" href=\"#ioread8\">ioread8</a>(<a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#nsect_addr\">nsect_addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lbal\">lbal</a> = <a class=\"id\" href=\"#ioread8\">ioread8</a>(<a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#lbal_addr\">lbal_addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#nsect\">nsect</a> == 1) && (<a class=\"id\" href=\"#lbal\">lbal</a> == 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(50);<span class=\"ts\"/><span class=\"comment\">/* give drive a breather */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_sff_wait_ready\">ata_sff_wait_ready</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#deadline\">deadline</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* is all this really necessary? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_dev_select\">sff_dev_select</a>(<a class=\"id\" href=\"#ap\">ap</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev1\">dev1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_dev_select\">sff_dev_select</a>(<a class=\"id\" href=\"#ap\">ap</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev0\">dev0</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_dev_select\">sff_dev_select</a>(<a class=\"id\" href=\"#ap\">ap</a>, 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_sff_wait_after_reset\">ata_sff_wait_after_reset</a>);", 
"", 
"static int <a class=\"id\" href=\"#ata_bus_softreset\">ata_bus_softreset</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, unsigned int <a class=\"id\" href=\"#devmask\">devmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#deadline\">deadline</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_ioports\">ata_ioports</a> *<a class=\"id\" href=\"#ioaddr\">ioaddr</a> = &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"ata%u: bus reset via SRST\\n\", <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#print_id\">print_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* software reset.  causes dev0 to be selected */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iowrite8\">iowrite8</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ctl\">ctl</a>, <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#ctl_addr\">ctl_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(20);<span class=\"ts\"/><span class=\"comment\">/* FIXME: flush */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iowrite8\">iowrite8</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ctl\">ctl</a> | <a class=\"id\" href=\"#ATA_SRST\">ATA_SRST</a>, <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#ctl_addr\">ctl_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(20);<span class=\"ts\"/><span class=\"comment\">/* FIXME: flush */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iowrite8\">iowrite8</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ctl\">ctl</a>, <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#ctl_addr\">ctl_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#last_ctl\">last_ctl</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ctl\">ctl</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* wait the port to become ready */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ata_sff_wait_after_reset\">ata_sff_wait_after_reset</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#devmask\">devmask</a>, <a class=\"id\" href=\"#deadline\">deadline</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_sff_softreset - reset host port via ATA SRST</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@link: ATA link to reset</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@classes: resulting classes of attached devices</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@deadline: deadline jiffies for the operation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Reset host port using ATA SRST.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -errno otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_sff_softreset\">ata_sff_softreset</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>, unsigned int *<a class=\"id\" href=\"#classes\">classes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#deadline\">deadline</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#slave_possible\">slave_possible</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_SLAVE_POSS\">ATA_FLAG_SLAVE_POSS</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#devmask\">devmask</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"ENTER\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* determine if device 0/1 are present */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_devchk\">ata_devchk</a>(<a class=\"id\" href=\"#ap\">ap</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devmask\">devmask</a> |= (1 << 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slave_possible\">slave_possible</a> && <a class=\"id\" href=\"#ata_devchk\">ata_devchk</a>(<a class=\"id\" href=\"#ap\">ap</a>, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devmask\">devmask</a> |= (1 << 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* select device 0 again */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_dev_select\">sff_dev_select</a>(<a class=\"id\" href=\"#ap\">ap</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* issue bus reset */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"about to softreset, devmask=%x\\n\", <a class=\"id\" href=\"#devmask\">devmask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_bus_softreset\">ata_bus_softreset</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#devmask\">devmask</a>, <a class=\"id\" href=\"#deadline\">deadline</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* if link is occupied, -ENODEV too is an error */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> && (<a class=\"id\" href=\"#rc\">rc</a> != -<a class=\"id\" href=\"#ENODEV\">ENODEV</a> || <a class=\"id\" href=\"#sata_scr_valid\">sata_scr_valid</a>(<a class=\"id\" href=\"#link\">link</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_link_printk\">ata_link_printk</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, \"SRST failed (errno=%d)\\n\", <a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* determine by signature whether we have ATA or ATAPI devices */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#classes\">classes</a>[0] = <a class=\"id\" href=\"#ata_sff_dev_classify\">ata_sff_dev_classify</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#device\">device</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#devmask\">devmask</a> &amp; (1 << 0), &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slave_possible\">slave_possible</a> && <a class=\"id\" href=\"#err\">err</a> != 0x81)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#classes\">classes</a>[1] = <a class=\"id\" href=\"#ata_sff_dev_classify\">ata_sff_dev_classify</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#device\">device</a>[1],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#devmask\">devmask</a> &amp; (1 << 1), &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"EXIT, classes[0]=%u [1]=%u\\n\", <a class=\"id\" href=\"#classes\">classes</a>[0], <a class=\"id\" href=\"#classes\">classes</a>[1]);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_sff_softreset\">ata_sff_softreset</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sata_sff_hardreset - reset host port via SATA phy reset</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@link: link to reset</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@class: resulting class of attached device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@deadline: deadline jiffies for the operation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SATA phy-reset host port using DET bits of SControl register,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>wait for !BSY and classify the attached device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -errno otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sata_sff_hardreset\">sata_sff_hardreset</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>, unsigned int *<a class=\"id\" href=\"#class\">class</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#deadline\">deadline</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_eh_context\">ata_eh_context</a> *<a class=\"id\" href=\"#ehc\">ehc</a> = &amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_context\">eh_context</a>;", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#timing\">timing</a> = <a class=\"id\" href=\"#sata_ehc_deb_timing\">sata_ehc_deb_timing</a>(<a class=\"id\" href=\"#ehc\">ehc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#online\">online</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#sata_link_hardreset\">sata_link_hardreset</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#timing\">timing</a>, <a class=\"id\" href=\"#deadline\">deadline</a>, &amp;<a class=\"id\" href=\"#online\">online</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ata_sff_check_ready\">ata_sff_check_ready</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#online\">online</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#ata_sff_dev_classify\">ata_sff_dev_classify</a>(<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#device\">device</a>, 1, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"EXIT, class=%u\\n\", *<a class=\"id\" href=\"#class\">class</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sata_sff_hardreset\">sata_sff_hardreset</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_sff_postreset - SFF postreset callback</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@link: the target SFF ata_link</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@classes: classes of attached devices</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is invoked after a successful reset.  It first</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>calls ata_std_postreset() and performs SFF specific postreset</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>processing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_sff_postreset\">ata_sff_postreset</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>, unsigned int *<a class=\"id\" href=\"#classes\">classes</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_std_postreset\">ata_std_postreset</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#classes\">classes</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* is double-select really necessary? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#classes\">classes</a>[0] != <a class=\"id\" href=\"#ATA_DEV_NONE\">ATA_DEV_NONE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_dev_select\">sff_dev_select</a>(<a class=\"id\" href=\"#ap\">ap</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#classes\">classes</a>[1] != <a class=\"id\" href=\"#ATA_DEV_NONE\">ATA_DEV_NONE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_dev_select\">sff_dev_select</a>(<a class=\"id\" href=\"#ap\">ap</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* bail out if no device is present */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#classes\">classes</a>[0] == <a class=\"id\" href=\"#ATA_DEV_NONE\">ATA_DEV_NONE</a> && <a class=\"id\" href=\"#classes\">classes</a>[1] == <a class=\"id\" href=\"#ATA_DEV_NONE\">ATA_DEV_NONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"EXIT, no device\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set up device control */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_set_devctl\">sff_set_devctl</a> || <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>.<a class=\"id\" href=\"#ctl_addr\">ctl_addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_sff_set_devctl\">ata_sff_set_devctl</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ctl\">ctl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#last_ctl\">last_ctl</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ctl\">ctl</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_sff_postreset\">ata_sff_postreset</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_sff_drain_fifo - Stock FIFO drain logic for SFF controllers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: command</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Drain the FIFO and device of any stuck data following a command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>failing to complete. In some cases this is necessary before a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>reset will recover the device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#ata_sff_drain_fifo\">ata_sff_drain_fifo</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We only need to flush incoming data when a command was running */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dma_dir\">dma_dir</a> == <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Drain up to 64K of data before we give up this recovery method */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#count\">count</a> = 0; (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_check_status\">sff_check_status</a>(<a class=\"id\" href=\"#ap\">ap</a>) &amp; <a class=\"id\" href=\"#ATA_DRQ\">ATA_DRQ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#count\">count</a> &lt; 65536; <a class=\"id\" href=\"#count\">count</a> += 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ioread16\">ioread16</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>.<a class=\"id\" href=\"#data_addr\">data_addr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Can become DEBUG later */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_printk\">ata_port_printk</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"drained %d bytes to clear DRQ.\\n\", <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_sff_drain_fifo\">ata_sff_drain_fifo</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_sff_error_handler - Stock error handler for SFF controller</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: port to handle error for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Stock error handler for SFF controller.  It can handle both</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>PATA and SATA controllers.  Many controllers should be able to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>use this EH as-is or with some added handling before and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>after.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_sff_error_handler\">ata_sff_error_handler</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_reset_fn_t\">ata_reset_fn_t</a> <a class=\"id\" href=\"#softreset\">softreset</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#softreset\">softreset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_reset_fn_t\">ata_reset_fn_t</a> <a class=\"id\" href=\"#hardreset\">hardreset</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#hardreset\">hardreset</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a> = <a class=\"id\" href=\"#__ata_qc_from_tag\">__ata_qc_from_tag</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#active_tag\">active_tag</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a> && !(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_FAILED\">ATA_QCFLAG_FAILED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We *MUST* do FIFO draining before we issue a reset as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * several devices helpfully clear their internal state and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will lock solid if we touch the data port post reset. Pass</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * qc in case anyone wants to do different PIO/DMA recovery or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * has per command fixups</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_drain_fifo\">sff_drain_fifo</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_drain_fifo\">sff_drain_fifo</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ignore ata_sff_softreset if ctl isn't accessible */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#softreset\">softreset</a> == <a class=\"id\" href=\"#ata_sff_softreset\">ata_sff_softreset</a> && !<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>.<a class=\"id\" href=\"#ctl_addr\">ctl_addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#softreset\">softreset</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ignore built-in hardresets if SCR access is not available */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#hardreset\">hardreset</a> == <a class=\"id\" href=\"#sata_std_hardreset\">sata_std_hardreset</a> ||", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#hardreset\">hardreset</a> == <a class=\"id\" href=\"#sata_sff_hardreset\">sata_sff_hardreset</a>) && !<a class=\"id\" href=\"#sata_scr_valid\">sata_scr_valid</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hardreset\">hardreset</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_do_eh\">ata_do_eh</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#prereset\">prereset</a>, <a class=\"id\" href=\"#softreset\">softreset</a>, <a class=\"id\" href=\"#hardreset\">hardreset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#postreset\">postreset</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_sff_error_handler\">ata_sff_error_handler</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_sff_std_ports - initialize ioaddr with standard port offsets.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ioaddr: IO address structure to be initialized</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Utility function which initializes data_addr, error_addr,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>feature_addr, nsect_addr, lbal_addr, lbam_addr, lbah_addr,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>device_addr, status_addr, and command_addr to standard offsets</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>relative to cmd_addr.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Does not set ctl_addr, altstatus_addr, bmdma_addr, or scr_addr.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_sff_std_ports\">ata_sff_std_ports</a>(struct <a class=\"id\" href=\"#ata_ioports\">ata_ioports</a> *<a class=\"id\" href=\"#ioaddr\">ioaddr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#data_addr\">data_addr</a> = <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#cmd_addr\">cmd_addr</a> + <a class=\"id\" href=\"#ATA_REG_DATA\">ATA_REG_DATA</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#error_addr\">error_addr</a> = <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#cmd_addr\">cmd_addr</a> + <a class=\"id\" href=\"#ATA_REG_ERR\">ATA_REG_ERR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#feature_addr\">feature_addr</a> = <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#cmd_addr\">cmd_addr</a> + <a class=\"id\" href=\"#ATA_REG_FEATURE\">ATA_REG_FEATURE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#nsect_addr\">nsect_addr</a> = <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#cmd_addr\">cmd_addr</a> + <a class=\"id\" href=\"#ATA_REG_NSECT\">ATA_REG_NSECT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#lbal_addr\">lbal_addr</a> = <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#cmd_addr\">cmd_addr</a> + <a class=\"id\" href=\"#ATA_REG_LBAL\">ATA_REG_LBAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#lbam_addr\">lbam_addr</a> = <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#cmd_addr\">cmd_addr</a> + <a class=\"id\" href=\"#ATA_REG_LBAM\">ATA_REG_LBAM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#lbah_addr\">lbah_addr</a> = <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#cmd_addr\">cmd_addr</a> + <a class=\"id\" href=\"#ATA_REG_LBAH\">ATA_REG_LBAH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#device_addr\">device_addr</a> = <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#cmd_addr\">cmd_addr</a> + <a class=\"id\" href=\"#ATA_REG_DEVICE\">ATA_REG_DEVICE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#status_addr\">status_addr</a> = <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#cmd_addr\">cmd_addr</a> + <a class=\"id\" href=\"#ATA_REG_STATUS\">ATA_REG_STATUS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#command_addr\">command_addr</a> = <a class=\"id\" href=\"#ioaddr\">ioaddr</a>-><a class=\"id\" href=\"#cmd_addr\">cmd_addr</a> + <a class=\"id\" href=\"#ATA_REG_CMD\">ATA_REG_CMD</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_sff_std_ports\">ata_sff_std_ports</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>", 
"", 
"static int <a class=\"id\" href=\"#ata_resources_present\">ata_resources_present</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, int <a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check the PCI resources for this channel are enabled */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a> = <a class=\"id\" href=\"#port\">port</a> * 2;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 2; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#port\">port</a> + <a class=\"id\" href=\"#i\">i</a>) == 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pci_resource_len\">pci_resource_len</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#port\">port</a> + <a class=\"id\" href=\"#i\">i</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_pci_sff_init_host - acquire native PCI ATA resources and init host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@host: target ATA host</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Acquire native PCI ATA resources for @host and initialize the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>first two ports of @host accordingly.  Ports marked dummy are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skipped and allocation failure makes the port dummy.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note that native PCI resources are valid even for legacy hosts</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as we fix up pdev resources array early in boot, so this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>function can be used for both native and legacy SFF hosts.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from calling layer (may sleep).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 if at least one port is initialized, -ENODEV if no port is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>available.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_pci_sff_init_host\">ata_pci_sff_init_host</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#gdev\">gdev</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#to_pci_dev\">to_pci_dev</a>(<a class=\"id\" href=\"#gdev\">gdev</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mask\">mask</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* request, iomap BARs and init port addresses accordingly */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 2; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#i\">i</a> * 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> * const *<a class=\"id\" href=\"#iomap\">iomap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_port_is_dummy\">ata_port_is_dummy</a>(<a class=\"id\" href=\"#ap\">ap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Discard disabled ports.  Some controllers show</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * their unused channels this way.  Disabled ports are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * made dummy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_resources_present\">ata_resources_present</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#i\">i</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a> = &amp;<a class=\"id\" href=\"#ata_dummy_port_ops\">ata_dummy_port_ops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pcim_iomap_regions\">pcim_iomap_regions</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, 0x3 << <a class=\"id\" href=\"#base\">base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_driver_string\">dev_driver_string</a>(<a class=\"id\" href=\"#gdev\">gdev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, <a class=\"id\" href=\"#gdev\">gdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"failed to request/iomap BARs for port %d \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"(errno=%d)\\n\", <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcim_pin_device\">pcim_pin_device</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a> = &amp;<a class=\"id\" href=\"#ata_dummy_port_ops\">ata_dummy_port_ops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#iomap\">iomap</a> = <a class=\"id\" href=\"#iomap\">iomap</a> = <a class=\"id\" href=\"#pcim_iomap_table\">pcim_iomap_table</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>.<a class=\"id\" href=\"#cmd_addr\">cmd_addr</a> = <a class=\"id\" href=\"#iomap\">iomap</a>[<a class=\"id\" href=\"#base\">base</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>.<a class=\"id\" href=\"#altstatus_addr\">altstatus_addr</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>.<a class=\"id\" href=\"#ctl_addr\">ctl_addr</a> = (void <a class=\"id\" href=\"#__iomem\">__iomem</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((unsigned long)<a class=\"id\" href=\"#iomap\">iomap</a>[<a class=\"id\" href=\"#base\">base</a> + 1] | <a class=\"id\" href=\"#ATA_PCI_CTL_OFS\">ATA_PCI_CTL_OFS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_sff_std_ports\">ata_sff_std_ports</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ioaddr\">ioaddr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_desc\">ata_port_desc</a>(<a class=\"id\" href=\"#ap\">ap</a>, \"cmd 0x%llx ctl 0x%llx\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#base\">base</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#base\">base</a> + 1));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= 1 << <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#gdev\">gdev</a>, \"no available native port\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_pci_sff_init_host\">ata_pci_sff_init_host</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_pci_sff_prepare_host - helper to prepare PCI PIO-only SFF ATA host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pdev: target PCI device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ppi: array of port_info, must be enough for two ports</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@r_host: out argument for the initialized ATA host</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Helper to allocate PIO-only SFF ATA host for @pdev, acquire</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>all PCI resources and initialize it accordingly in one go.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from calling layer (may sleep).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -errno otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_pci_sff_prepare_host\">ata_pci_sff_prepare_host</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#ata_port_info\">ata_port_info</a> * const *<a class=\"id\" href=\"#ppi\">ppi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#ata_host\">ata_host</a> **<a class=\"id\" href=\"#r_host\">r_host</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#devres_open_group\">devres_open_group</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#ata_host_alloc_pinfo\">ata_host_alloc_pinfo</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#ppi\">ppi</a>, 2);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#host\">host</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, &amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"failed to allocate ATA host\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_pci_sff_init_host\">ata_pci_sff_init_host</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devres_remove_group\">devres_remove_group</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#r_host\">r_host</a> = <a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devres_release_group\">devres_release_group</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_pci_sff_prepare_host\">ata_pci_sff_prepare_host</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_pci_sff_activate_host - start SFF host, request IRQ and register it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@host: target SFF ATA host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@irq_handler: irq_handler used when requesting IRQ(s)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sht: scsi_host_template to use when registering the host</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is the counterpart of ata_host_activate() for SFF ATA</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>hosts.  This separate helper is necessary because SFF hosts</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>use two separate interrupts in legacy mode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from calling layer (may sleep).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -errno otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_pci_sff_activate_host\">ata_pci_sff_activate_host</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#irq_handler_t\">irq_handler_t</a> <a class=\"id\" href=\"#irq_handler\">irq_handler</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#scsi_host_template\">scsi_host_template</a> *<a class=\"id\" href=\"#sht\">sht</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#to_pci_dev\">to_pci_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#drv_name\">drv_name</a> = <a class=\"id\" href=\"#dev_driver_string\">dev_driver_string</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#legacy_mode\">legacy_mode</a> = 0, <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_host_start\">ata_host_start</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) == <a class=\"id\" href=\"#PCI_CLASS_STORAGE_IDE\">PCI_CLASS_STORAGE_IDE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#tmp8\">tmp8</a>, <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TODO: What if one channel is in native mode ... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#PCI_CLASS_PROG\">PCI_CLASS_PROG</a>, &amp;<a class=\"id\" href=\"#tmp8\">tmp8</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = (1 << 2) | (1 << 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#tmp8\">tmp8</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>) != <a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#legacy_mode\">legacy_mode</a> = 1;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NO_ATA_LEGACY\">CONFIG_NO_ATA_LEGACY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Some platforms with PCI limits cannot address compat</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   port space. In that case we punt if their firmware has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   left a device in compatibility mode */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#legacy_mode\">legacy_mode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ata: Compatibility mode ATA is not supported on this platform, skipping.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#devres_open_group\">devres_open_group</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#legacy_mode\">legacy_mode</a> && <a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#irq\">irq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#devm_request_irq\">devm_request_irq</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#irq_handler\">irq_handler</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#IRQF_SHARED\">IRQF_SHARED</a>, <a class=\"id\" href=\"#drv_name\">drv_name</a>, <a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_desc\">ata_port_desc</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[0], \"irq %d\", <a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_desc\">ata_port_desc</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[1], \"irq %d\", <a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#legacy_mode\">legacy_mode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_port_is_dummy\">ata_port_is_dummy</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[0])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#devm_request_irq\">devm_request_irq</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#ATA_PRIMARY_IRQ\">ATA_PRIMARY_IRQ</a>(<a class=\"id\" href=\"#pdev\">pdev</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#irq_handler\">irq_handler</a>, <a class=\"id\" href=\"#IRQF_SHARED\">IRQF_SHARED</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#drv_name\">drv_name</a>, <a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_desc\">ata_port_desc</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[0], \"irq %d\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ATA_PRIMARY_IRQ\">ATA_PRIMARY_IRQ</a>(<a class=\"id\" href=\"#pdev\">pdev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_port_is_dummy\">ata_port_is_dummy</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[1])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#devm_request_irq\">devm_request_irq</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#ATA_SECONDARY_IRQ\">ATA_SECONDARY_IRQ</a>(<a class=\"id\" href=\"#pdev\">pdev</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#irq_handler\">irq_handler</a>, <a class=\"id\" href=\"#IRQF_SHARED\">IRQF_SHARED</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#drv_name\">drv_name</a>, <a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_desc\">ata_port_desc</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[1], \"irq %d\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ATA_SECONDARY_IRQ\">ATA_SECONDARY_IRQ</a>(<a class=\"id\" href=\"#pdev\">pdev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_host_register\">ata_host_register</a>(<a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#sht\">sht</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devres_remove_group\">devres_remove_group</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devres_release_group\">devres_release_group</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_pci_sff_activate_host\">ata_pci_sff_activate_host</a>);", 
"", 
"static const struct <a class=\"id\" href=\"#ata_port_info\">ata_port_info</a> *<a class=\"id\" href=\"#ata_sff_find_valid_pi\">ata_sff_find_valid_pi</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#ata_port_info\">ata_port_info</a> * const *<a class=\"id\" href=\"#ppi\">ppi</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* look up the first valid port_info */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 2 && <a class=\"id\" href=\"#ppi\">ppi</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppi\">ppi</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#port_ops\">port_ops</a> != &amp;<a class=\"id\" href=\"#ata_dummy_port_ops\">ata_dummy_port_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ppi\">ppi</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_pci_sff_init_one - Initialize/register PIO-only PCI IDE controller</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pdev: Controller to be initialized</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ppi: array of port_info, must be enough for two ports</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sht: scsi_host_template to use when registering the host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@host_priv: host private_data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@hflag: host flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is a helper function which can be called from a driver's</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>xxx_init_one() probe function if the hardware uses traditional</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>IDE taskfile registers and is PIO only.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ASSUMPTION:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Nobody makes a single channel controller that appears solely as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the secondary legacy port on PCI.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from PCI layer (may sleep).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, negative on errno-based value on error.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_pci_sff_init_one\">ata_pci_sff_init_one</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#ata_port_info\">ata_port_info</a> * const *<a class=\"id\" href=\"#ppi\">ppi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#scsi_host_template\">scsi_host_template</a> *<a class=\"id\" href=\"#sht\">sht</a>, void *<a class=\"id\" href=\"#host_priv\">host_priv</a>, int <a class=\"id\" href=\"#hflag\">hflag</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = &amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ata_port_info\">ata_port_info</a> *<a class=\"id\" href=\"#pi\">pi</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"ENTER\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pi\">pi</a> = <a class=\"id\" href=\"#ata_sff_find_valid_pi\">ata_sff_find_valid_pi</a>(<a class=\"id\" href=\"#ppi\">ppi</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pi\">pi</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, &amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"no valid port_info specified\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#devres_open_group\">devres_open_group</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pcim_enable_device\">pcim_enable_device</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* prepare and activate SFF host */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_pci_sff_prepare_host\">ata_pci_sff_prepare_host</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#ppi\">ppi</a>, &amp;<a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = <a class=\"id\" href=\"#host_priv\">host_priv</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#hflag\">hflag</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_pci_sff_activate_host\">ata_pci_sff_activate_host</a>(<a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#ata_sff_interrupt\">ata_sff_interrupt</a>, <a class=\"id\" href=\"#sht\">sht</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devres_remove_group\">devres_remove_group</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devres_release_group\">devres_release_group</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_pci_sff_init_one\">ata_pci_sff_init_one</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PCI */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>BMDMA support</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ATA_BMDMA\">CONFIG_ATA_BMDMA</a>", 
"", 
"const struct <a class=\"id\" href=\"#ata_port_operations\">ata_port_operations</a> <a class=\"id\" href=\"#ata_bmdma_port_ops\">ata_bmdma_port_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#inherits\">inherits</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#ata_sff_port_ops\">ata_sff_port_ops</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#error_handler\">error_handler</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_bmdma_error_handler\">ata_bmdma_error_handler</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#post_internal_cmd\">post_internal_cmd</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_bmdma_post_internal_cmd\">ata_bmdma_post_internal_cmd</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#qc_prep\">qc_prep</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_bmdma_qc_prep\">ata_bmdma_qc_prep</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#qc_issue\">qc_issue</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_bmdma_qc_issue\">ata_bmdma_qc_issue</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sff_irq_clear\">sff_irq_clear</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_bmdma_irq_clear\">ata_bmdma_irq_clear</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bmdma_setup\">bmdma_setup</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_bmdma_setup\">ata_bmdma_setup</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bmdma_start\">bmdma_start</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_bmdma_start\">ata_bmdma_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bmdma_stop\">bmdma_stop</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_bmdma_stop\">ata_bmdma_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bmdma_status\">bmdma_status</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_bmdma_status\">ata_bmdma_status</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#port_start\">port_start</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_bmdma_port_start\">ata_bmdma_port_start</a>,", 
"};", 
];
xr_frag_insert('l/a5/cf7369d88673ac94298be87585d3fcb7e73c53.xr', __xr_tmp);
