var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Memory Migration functionality - linux/mm/migration.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2006 Silicon Graphics, Inc., Christoph Lameter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Page migration was first developed in the context of the memory hotplug</span>", 
"<span class=\"comment\"> * project. The main authors of the migration code are:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * IWAMOTO Toshihiro &lt;iwamoto@valinux.co.jp&gt;</span>", 
"<span class=\"comment\"> * Hirokazu Takahashi &lt;taka@valinux.co.jp&gt;</span>", 
"<span class=\"comment\"> * Dave Hansen &lt;haveblue@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> * Christoph Lameter</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#migrate\">migrate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swapops\">swapops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm_inline\">mm_inline</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nsproxy\">nsproxy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagevec\">pagevec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ksm\">ksm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rmap\">rmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#topology\">topology</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpuset\">cpuset</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempolicy\">mempolicy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memcontrol\">memcontrol</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lru_to_page\">lru_to_page</a>(<a class=\"id\" href=\"#_head\">_head</a>) (<a class=\"id\" href=\"#list_entry\">list_entry</a>((<a class=\"id\" href=\"#_head\">_head</a>)-><a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * migrate_prep() needs to be called before we start compiling a list of pages</span>", 
"<span class=\"comment\"> * to be migrated using isolate_lru_page(). If scheduling work on other CPUs is</span>", 
"<span class=\"comment\"> * undesirable, use migrate_prep_local()</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#migrate_prep\">migrate_prep</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear the LRU lists so pages can be isolated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that pages may be moved off the LRU after we have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * drained them. Those pages will fail to migrate like other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pages that may be busy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain_all\">lru_add_drain_all</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Do the necessary work of migrate_prep but not if it involves other CPUs */</span>", 
"int <a class=\"id\" href=\"#migrate_prep_local\">migrate_prep_local</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain\">lru_add_drain</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add isolated pages on the list back to the LRU under page lock</span>", 
"<span class=\"comment\"> * to avoid leaking evictable pages back onto unevictable list.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#putback_lru_pages\">putback_lru_pages</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page2\">page2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#page2\">page2</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dec_zone_page_state\">dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_ISOLATED_ANON\">NR_ISOLATED_ANON</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_is_file_cache\">page_is_file_cache</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#putback_lru_page\">putback_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Restore a potential migration pte to a working pte entry</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#remove_migration_pte\">remove_migration_pte</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#addr\">addr</a>, void *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
" <span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
" <span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
" <span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte\">pte</a>;", 
" <span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"", 
" <span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgd_present\">pgd_present</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pud_present\">pud_present</a>(*<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmd_present\">pmd_present</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#pte_offset_map\">pte_offset_map</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_swap_pte\">is_swap_pte</a>(*<a class=\"id\" href=\"#ptep\">ptep</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap\">pte_unmap</a>(<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
" <span class=\"ts\"/>}", 
"", 
" <span class=\"ts\"/><a class=\"id\" href=\"#ptl\">ptl</a> = <a class=\"id\" href=\"#pte_lockptr\">pte_lockptr</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>);", 
" <span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_swap_pte\">is_swap_pte</a>(<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_to_swp_entry\">pte_to_swp_entry</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_migration_entry\">is_migration_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#migration_entry_to_page\">migration_entry_to_page</a>(<a class=\"id\" href=\"#entry\">entry</a>) != <a class=\"id\" href=\"#old\">old</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_mkold\">pte_mkold</a>(<a class=\"id\" href=\"#mk_pte\">mk_pte</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_write_migration_entry\">is_write_migration_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_mkwrite\">pte_mkwrite</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_page\">flush_cache_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(<a class=\"id\" href=\"#pte\">pte</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#new\">new</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_add_anon_rmap\">page_add_anon_rmap</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_add_file_rmap\">page_add_file_rmap</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No need to invalidate - it was non-present before */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_mmu_cache\">update_mmu_cache</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#SWAP_AGAIN\">SWAP_AGAIN</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get rid of all migration entries and replace them by</span>", 
"<span class=\"comment\"> * references to the indicated page.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#remove_migration_ptes\">remove_migration_ptes</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#old\">old</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rmap_walk\">rmap_walk</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#remove_migration_pte\">remove_migration_pte</a>, <a class=\"id\" href=\"#old\">old</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Something used the pte of a page under migration. We need to</span>", 
"<span class=\"comment\"> * get to the page and wait until migration is finished.</span>", 
"<span class=\"comment\"> * When we return from this function the fault will be retried.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called from do_swap_page().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#migration_entry_wait\">migration_entry_wait</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_swap_pte\">is_swap_pte</a>(<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_to_swp_entry\">pte_to_swp_entry</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_migration_entry\">is_migration_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#migration_entry_to_page\">migration_entry_to_page</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Once radix-tree replacement of page migration started, page_count</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * *must* be zero. And, we don't want to call wait_on_page_locked()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * against a page without get_page().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So, we use get_page_unless_zero(), here. Even failed, page fault</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will occur again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#get_page_unless_zero\">get_page_unless_zero</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_locked\">wait_on_page_locked</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Replace the page in the mapping.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The number of remaining references must be:</span>", 
"<span class=\"comment\"> * 1 for anonymous pages without a mapping</span>", 
"<span class=\"comment\"> * 2 for pages with a mapping</span>", 
"<span class=\"comment\"> * 3 for pages with a mapping and PagePrivate/PagePrivate2 set.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#migrate_page_move_mapping\">migrate_page_move_mapping</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#newpage\">newpage</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#expected_count\">expected_count</a>;", 
"<span class=\"ts\"/>void **<a class=\"id\" href=\"#pslot\">pslot</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapping\">mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Anonymous page without mapping */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>) != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pslot\">pslot</a> = <a class=\"id\" href=\"#radix_tree_lookup_slot\">radix_tree_lookup_slot</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#page_tree\">page_tree</a>,", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_index\">page_index</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#expected_count\">expected_count</a> = 2 + <a class=\"id\" href=\"#page_has_private\">page_has_private</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#expected_count\">expected_count</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#page\">page</a> *)<a class=\"id\" href=\"#radix_tree_deref_slot\">radix_tree_deref_slot</a>(<a class=\"id\" href=\"#pslot\">pslot</a>) != <a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_freeze_refs\">page_freeze_refs</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#expected_count\">expected_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now we know that no one else is looking at the page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);<span class=\"ts\"/><span class=\"comment\">/* add cache reference */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageSwapCache\">SetPageSwapCache</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_replace_slot\">radix_tree_replace_slot</a>(<a class=\"id\" href=\"#pslot\">pslot</a>, <a class=\"id\" href=\"#newpage\">newpage</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_unfreeze_refs\">page_unfreeze_refs</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#expected_count\">expected_count</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Drop cache reference from old page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We know this isn't the last reference.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__put_page\">__put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If moved to a different zone then also account</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the page for that zone. Other VM counters will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * taken care of when we establish references to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * new page and drop references to the old page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that anonymous pages are accounted for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * via NR_FILE_PAGES and NR_ANON_PAGES if they</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are mapped to swap space.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__dec_zone_page_state\">__dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_FILE_PAGES\">NR_FILE_PAGES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_page_state\">__inc_zone_page_state</a>(<a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#NR_FILE_PAGES\">NR_FILE_PAGES</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSwapBacked\">PageSwapBacked</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dec_zone_page_state\">__dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_SHMEM\">NR_SHMEM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inc_zone_page_state\">__inc_zone_page_state</a>(<a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#NR_SHMEM\">NR_SHMEM</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copy the page to its new location</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#migrate_page_copy\">migrate_page_copy</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#newpage\">newpage</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copy_highpage\">copy_highpage</a>(<a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageError\">PageError</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageError\">SetPageError</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageReferenced\">PageReferenced</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageReferenced\">SetPageReferenced</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageUptodate\">SetPageUptodate</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TestClearPageActive\">TestClearPageActive</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageUnevictable\">PageUnevictable</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageActive\">SetPageActive</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#TestClearPageUnevictable\">TestClearPageUnevictable</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageUnevictable\">SetPageUnevictable</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageChecked\">PageChecked</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageChecked\">SetPageChecked</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageMappedToDisk\">PageMappedToDisk</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageMappedToDisk\">SetPageMappedToDisk</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_page_dirty_for_io\">clear_page_dirty_for_io</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Want to mark the page and the radix tree as dirty, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * redo the accounting that clear_page_dirty_for_io undid,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but we can't use set_page_dirty because that function</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is actually a signal that all of the page has become dirty.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Wheras only part of our page may be dirty.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_page_dirty_nobuffers\">__set_page_dirty_nobuffers</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
" <span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mlock_migrate_page\">mlock_migrate_page</a>(<a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ksm_migrate_page\">ksm_migrate_page</a>(<a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ClearPageSwapCache\">ClearPageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ClearPagePrivate\">ClearPagePrivate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If any waiters have accumulated on the new page then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wake them up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#newpage\">newpage</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_page_writeback\">end_page_writeback</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"}", 
"", 
"<span class=\"comment\">/************************************************************</span>", 
"<span class=\"comment\"> *                    Migration functions</span>", 
"<span class=\"comment\"> ***********************************************************/</span>", 
"", 
"<span class=\"comment\">/* Always fail migration. Used for mappings that are not movable */</span>", 
"int <a class=\"id\" href=\"#fail_migrate_page\">fail_migrate_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#newpage\">newpage</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#fail_migrate_page\">fail_migrate_page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Common logic to directly migrate a single page suitable for</span>", 
"<span class=\"comment\"> * pages that do not use PagePrivate/PagePrivate2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Pages are locked upon entry and exit.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#migrate_page\">migrate_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#newpage\">newpage</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>));<span class=\"ts\"/><span class=\"comment\">/* Writeback must be complete */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#migrate_page_move_mapping\">migrate_page_move_mapping</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#migrate_page_copy\">migrate_page_copy</a>(<a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#migrate_page\">migrate_page</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Migration function for pages with buffers. This function can only be used</span>", 
"<span class=\"comment\"> * if the underlying filesystem guarantees that no other references to \"page\"</span>", 
"<span class=\"comment\"> * exist.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#buffer_migrate_page\">buffer_migrate_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#newpage\">newpage</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#migrate_page\">migrate_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#migrate_page_move_mapping\">migrate_page_move_mapping</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ClearPagePrivate\">ClearPagePrivate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bh_page\">set_bh_page</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#bh_offset\">bh_offset</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SetPagePrivate\">SetPagePrivate</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#migrate_page_copy\">migrate_page_copy</a>(<a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
" <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#buffer_migrate_page\">buffer_migrate_page</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Writeback a page to clean the dirty state</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#writeout\">writeout</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> <a class=\"id\" href=\"#wbc\">wbc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sync_mode\">sync_mode</a> = <a class=\"id\" href=\"#WB_SYNC_NONE\">WB_SYNC_NONE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_to_write\">nr_to_write</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#range_start\">range_start</a> = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#range_end\">range_end</a> = <a class=\"id\" href=\"#LLONG_MAX\">LLONG_MAX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nonblocking\">nonblocking</a> = 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#for_reclaim\">for_reclaim</a> = 1", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#writepage\">writepage</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No write method for the address space */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#clear_page_dirty_for_io\">clear_page_dirty_for_io</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Someone else already triggered a write */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A dirty page may imply that the underlying filesystem has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the page on some queue. So the page must be clean for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * migration. Writeout may mean we loose the lock and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page state is no longer what we checked for earlier.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At this point we know that the migration attempt cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be successful.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_migration_ptes\">remove_migration_ptes</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#writepage\">writepage</a>(<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != <a class=\"id\" href=\"#AOP_WRITEPAGE_ACTIVATE\">AOP_WRITEPAGE_ACTIVATE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unlocked. Relock */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0) ? -<a class=\"id\" href=\"#EIO\">EIO</a> : -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Default handling if a filesystem does not provide a migration function.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#fallback_migrate_page\">fallback_migrate_page</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#newpage\">newpage</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#writeout\">writeout</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Buffers may be managed in a filesystem specific way.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must have no buffers or drop them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_has_private\">page_has_private</a>(<a class=\"id\" href=\"#page\">page</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#try_to_release_page\">try_to_release_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#migrate_page\">migrate_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Move a page to a newly allocated page</span>", 
"<span class=\"comment\"> * The page is locked and all ptes have been successfully removed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The new page will have replaced the old page if this function</span>", 
"<span class=\"comment\"> * is successful.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return value:</span>", 
"<span class=\"comment\"> *   &lt; 0 - error code</span>", 
"<span class=\"comment\"> *  == 0 - success</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#move_to_new_page\">move_to_new_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#newpage\">newpage</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#remap_swapcache\">remap_swapcache</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Block others from accessing the page when we get around to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * establishing additional references. We are the only one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * holding a reference to the new page at this point.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trylock_page\">trylock_page</a>(<a class=\"id\" href=\"#newpage\">newpage</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Prepare mapping for the new page.*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newpage\">newpage</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newpage\">newpage</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSwapBacked\">PageSwapBacked</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageSwapBacked\">SetPageSwapBacked</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#migrate_page\">migrate_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#migratepage\">migratepage</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Most pages have a mapping and most filesystems</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * should provide a migration function. Anonymous</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pages are part of swap space which also has its</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * own migration function. This is the most common</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * path for page migration.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#migratepage\">migratepage</a>(<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#fallback_migrate_page\">fallback_migrate_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newpage\">newpage</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#remap_swapcache\">remap_swapcache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_migration_ptes\">remove_migration_ptes</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#newpage\">newpage</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Obtain the lock on page, remove all ptes and migrate the page</span>", 
"<span class=\"comment\"> * to the newly allocated page in newpage.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#unmap_and_move\">unmap_and_move</a>(<a class=\"id\" href=\"#new_page_t\">new_page_t</a> <a class=\"id\" href=\"#get_new_page\">get_new_page</a>, unsigned long <a class=\"id\" href=\"#private\">private</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#force\">force</a>, int <a class=\"id\" href=\"#offlining\">offlining</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#newpage\">newpage</a> = <a class=\"id\" href=\"#get_new_page\">get_new_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#private\">private</a>, &amp;<a class=\"id\" href=\"#result\">result</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#remap_swapcache\">remap_swapcache</a> = 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rcu_locked\">rcu_locked</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#charge\">charge</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#newpage\">newpage</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* page was freed from under us. So we are done. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#move_newpage\">move_newpage</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* prepare cgroup just returns 0 or -ENOMEM */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trylock_page\">trylock_page</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#force\">force</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#move_newpage\">move_newpage</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only memory hotplug's offline_pages() caller has locked out KSM,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and can safely migrate a KSM page.  The other cases have skipped</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PageKsm along with PageReserved - but it is only now when we have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the page lock that we can be certain it will not go KSM beneath us</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (KSM will not upgrade a page from PageAnon to PageKsm when it sees</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * its pagecount raised, but only here do we take the page lock which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * serializes that).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageKsm\">PageKsm</a>(<a class=\"id\" href=\"#page\">page</a>) && !<a class=\"id\" href=\"#offlining\">offlining</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* charge against new page */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#charge\">charge</a> = <a class=\"id\" href=\"#mem_cgroup_prepare_migration\">mem_cgroup_prepare_migration</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#newpage\">newpage</a>, &amp;<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#charge\">charge</a> == -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#charge\">charge</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#force\">force</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#uncharge\">uncharge</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_writeback\">wait_on_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * By try_to_unmap(), page-&gt;mapcount goes down to 0 here. In this case,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we cannot notice that anon_vma is freed while we migrates a page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This rcu_read_lock() delays freeing anon_vma pointer until the end</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of migration. File cache pages are no problem because of page_lock()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * File Caches may use write_page() or lock_page() in migration, then,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * just care Anon page here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_locked\">rcu_locked</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Determine how to safely use anon_vma */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#rcu_unlock\">rcu_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We cannot be sure that the anon_vma of an unmapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * swapcache page is safe to use because we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * know in advance if the VMA that this page belonged</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to still exists. If the VMA and others sharing the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * data have been freed, then the anon_vma could</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * already be invalid.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * To avoid this possibility, swapcache pages get</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * migrated but are not remapped when migration</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * completes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remap_swapcache\">remap_swapcache</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Take a reference count on the anon_vma if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * page is mapped so that it is guaranteed to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * exist when the page is remapped later</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon_vma\">anon_vma</a> = <a class=\"id\" href=\"#page_anon_vma\">page_anon_vma</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_anon_vma\">get_anon_vma</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Corner case handling:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1. When a new swap-cache page is read into, it is added to the LRU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and treated as swapcache but it has no rmap yet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Calling try_to_unmap() against a page-&gt;mapping==NULL page will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * trigger a BUG.  So handle it here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2. An orphaned page (see truncate_complete_page) might have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fs-private metadata. The page can be picked up due to memory</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * offlining.  Everywhere else except page reclaim, the page is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invisible to the vm, so the page can not be migrated.  So try to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * free the metadata, so the page can be freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#page_has_private\">page_has_private</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Go direct to try_to_free_buffers() here because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * a) that's what try_to_release_page() would do anyway</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * b) we may be under rcu_read_lock() here, so we can't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    use GFP_KERNEL which is what try_to_release_page()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *    needs to be effective.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_free_buffers\">try_to_free_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#rcu_unlock\">rcu_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#skip_unmap\">skip_unmap</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Establish migration ptes or remove ptes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#try_to_unmap\">try_to_unmap</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#TTU_MIGRATION\">TTU_MIGRATION</a>|<a class=\"id\" href=\"#TTU_IGNORE_MLOCK\">TTU_IGNORE_MLOCK</a>|<a class=\"id\" href=\"#TTU_IGNORE_ACCESS\">TTU_IGNORE_ACCESS</a>);", 
"", 
"<a class=\"id\" href=\"#skip_unmap\">skip_unmap</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#move_to_new_page\">move_to_new_page</a>(<a class=\"id\" href=\"#newpage\">newpage</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#remap_swapcache\">remap_swapcache</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> && <a class=\"id\" href=\"#remap_swapcache\">remap_swapcache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_migration_ptes\">remove_migration_ptes</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#rcu_unlock\">rcu_unlock</a>:", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Drop an anon_vma reference if we took one */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#anon_vma\">anon_vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_anon_vma\">drop_anon_vma</a>(<a class=\"id\" href=\"#anon_vma\">anon_vma</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_locked\">rcu_locked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<a class=\"id\" href=\"#uncharge\">uncharge</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#charge\">charge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_end_migration\">mem_cgroup_end_migration</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#newpage\">newpage</a>);", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>) {", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"> <span class=\"ts\"/><span class=\"ts\"/> * A page that has been migrated has all references</span>", 
"<span class=\"comment\"> <span class=\"ts\"/><span class=\"ts\"/> * removed and will be freed. A page that has not been</span>", 
"<span class=\"comment\"> <span class=\"ts\"/><span class=\"ts\"/> * migrated will have kepts its references and be</span>", 
"<span class=\"comment\"> <span class=\"ts\"/><span class=\"ts\"/> * restored.</span>", 
"<span class=\"comment\"> <span class=\"ts\"/><span class=\"ts\"/> */</span>", 
" <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dec_zone_page_state\">dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_ISOLATED_ANON\">NR_ISOLATED_ANON</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_is_file_cache\">page_is_file_cache</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#putback_lru_page\">putback_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#move_newpage\">move_newpage</a>:", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Move the new page to the LRU. If migration was not successful</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then this will free the page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#putback_lru_page\">putback_lru_page</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#newpage\">newpage</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * migrate_pages</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function takes one list of pages to migrate and a function</span>", 
"<span class=\"comment\"> * that determines from the page to be migrated and the private data</span>", 
"<span class=\"comment\"> * the target of the move and allocates the page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function returns after 10 attempts or if no pages</span>", 
"<span class=\"comment\"> * are movable anymore because to has become empty</span>", 
"<span class=\"comment\"> * or no retryable pages exist anymore. All pages will be</span>", 
"<span class=\"comment\"> * returned to the LRU or freed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return: Number of pages not migrated or error code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#migrate_pages\">migrate_pages</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_page_t\">new_page_t</a> <a class=\"id\" href=\"#get_new_page\">get_new_page</a>, unsigned long <a class=\"id\" href=\"#private\">private</a>, int <a class=\"id\" href=\"#offlining\">offlining</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retry\">retry</a> = 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_failed\">nr_failed</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pass\">pass</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page2\">page2</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#swapwrite\">swapwrite</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_SWAPWRITE\">PF_SWAPWRITE</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#swapwrite\">swapwrite</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_SWAPWRITE\">PF_SWAPWRITE</a>;", 
"", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#pass\">pass</a> = 0; <a class=\"id\" href=\"#pass\">pass</a> &lt; 10 && <a class=\"id\" href=\"#retry\">retry</a>; <a class=\"id\" href=\"#pass\">pass</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retry\">retry</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#page2\">page2</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#unmap_and_move\">unmap_and_move</a>(<a class=\"id\" href=\"#get_new_page\">get_new_page</a>, <a class=\"id\" href=\"#private\">private</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#pass\">pass</a> &gt; 2, <a class=\"id\" href=\"#offlining\">offlining</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch(<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retry\">retry</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Permanent failure */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_failed\">nr_failed</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#swapwrite\">swapwrite</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_SWAPWRITE\">PF_SWAPWRITE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#putback_lru_pages\">putback_lru_pages</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_failed\">nr_failed</a> + <a class=\"id\" href=\"#retry\">retry</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Move a list of individual pages</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#page_to_node\">page_to_node</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#new_page_node\">new_page_node</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#private\">private</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int **<a class=\"id\" href=\"#result\">result</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_to_node\">page_to_node</a> *<a class=\"id\" href=\"#pm\">pm</a> = (struct <a class=\"id\" href=\"#page_to_node\">page_to_node</a> *)<a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#node\">node</a> != <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a> && <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#page\">page</a> != <a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm\">pm</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#node\">node</a> == <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#result\">result</a> = &amp;<a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_pages_exact_node\">alloc_pages_exact_node</a>(<a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a> | <a class=\"id\" href=\"#GFP_THISNODE\">GFP_THISNODE</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Move a set of pages as indicated in the pm array. The addr</span>", 
"<span class=\"comment\"> * field must be set to the virtual address of the page to be moved</span>", 
"<span class=\"comment\"> * and the node number must contain a valid target node.</span>", 
"<span class=\"comment\"> * The pm array ends with node = MAX_NUMNODES.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_move_page_to_node_array\">do_move_page_to_node_array</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#page_to_node\">page_to_node</a> *<a class=\"id\" href=\"#pm\">pm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#migrate_all\">migrate_all</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_to_node\">page_to_node</a> *<a class=\"id\" href=\"#pp\">pp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#pagelist\">pagelist</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Build a list of pages to migrate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pp\">pp</a> = <a class=\"id\" href=\"#pm\">pm</a>; <a class=\"id\" href=\"#pp\">pp</a>-><a class=\"id\" href=\"#node\">node</a> != <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>; <a class=\"id\" href=\"#pp\">pp</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pp\">pp</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a> || !<a class=\"id\" href=\"#vma_migratable\">vma_migratable</a>(<a class=\"id\" href=\"#vma\">vma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#set_status\">set_status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#follow_page\">follow_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pp\">pp</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#FOLL_GET\">FOLL_GET</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#set_status\">set_status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#set_status\">set_status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Use PageReserved to check for zero page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageReserved\">PageReserved</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#PageKsm\">PageKsm</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#put_and_set\">put_and_set</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pp\">pp</a>-><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == <a class=\"id\" href=\"#pp\">pp</a>-><a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Node already in the right place</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#put_and_set\">put_and_set</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(<a class=\"id\" href=\"#page\">page</a>) &gt; 1 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#migrate_all\">migrate_all</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#put_and_set\">put_and_set</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#isolate_lru_page\">isolate_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#pagelist\">pagelist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_zone_page_state\">inc_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_ISOLATED_ANON\">NR_ISOLATED_ANON</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#page_is_file_cache\">page_is_file_cache</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#put_and_set\">put_and_set</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Either remove the duplicate refcount from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * isolate_lru_page() or drop the page ref if it was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not isolated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#set_status\">set_status</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pp\">pp</a>-><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pagelist\">pagelist</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#migrate_pages\">migrate_pages</a>(&amp;<a class=\"id\" href=\"#pagelist\">pagelist</a>, <a class=\"id\" href=\"#new_page_node\">new_page_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#pm\">pm</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Migrate an array of page address onto an array of nodes and fill</span>", 
"<span class=\"comment\"> * the corresponding array of status.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_pages_move\">do_pages_move</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const void <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#status\">status</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_to_node\">page_to_node</a> *<a class=\"id\" href=\"#pm\">pm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#task_nodes\">task_nodes</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#chunk_nr_pages\">chunk_nr_pages</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#chunk_start\">chunk_start</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_nodes\">task_nodes</a> = <a class=\"id\" href=\"#cpuset_mems_allowed\">cpuset_mems_allowed</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm\">pm</a> = (struct <a class=\"id\" href=\"#page_to_node\">page_to_node</a> *)<a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pm\">pm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#migrate_prep\">migrate_prep</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Store a chunk of page_to_node array in a page,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but keep the last one as a marker</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk_nr_pages\">chunk_nr_pages</a> = (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / sizeof(struct <a class=\"id\" href=\"#page_to_node\">page_to_node</a>)) - 1;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#chunk_start\">chunk_start</a> = 0;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#chunk_start\">chunk_start</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#chunk_start\">chunk_start</a> += <a class=\"id\" href=\"#chunk_nr_pages\">chunk_nr_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk_start\">chunk_start</a> + <a class=\"id\" href=\"#chunk_nr_pages\">chunk_nr_pages</a> &gt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk_nr_pages\">chunk_nr_pages</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a> - <a class=\"id\" href=\"#chunk_start\">chunk_start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fill the chunk pm with addrs and nodes from user-space */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#chunk_nr_pages\">chunk_nr_pages</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pages\">pages</a> + <a class=\"id\" href=\"#j\">j</a> + <a class=\"id\" href=\"#chunk_start\">chunk_start</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_pm\">out_pm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm\">pm</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#addr\">addr</a> = (unsigned long) <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#nodes\">nodes</a> + <a class=\"id\" href=\"#j\">j</a> + <a class=\"id\" href=\"#chunk_start\">chunk_start</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_pm\">out_pm</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> &lt; 0 || <a class=\"id\" href=\"#node\">node</a> >= <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_pm\">out_pm</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_state\">node_state</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_pm\">out_pm</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_isset\">node_isset</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#task_nodes\">task_nodes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_pm\">out_pm</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm\">pm</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* End marker for this chunk */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm\">pm</a>[<a class=\"id\" href=\"#chunk_nr_pages\">chunk_nr_pages</a>].<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Migrate this chunk */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_move_page_to_node_array\">do_move_page_to_node_array</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pm\">pm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_MF_MOVE_ALL\">MPOL_MF_MOVE_ALL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_pm\">out_pm</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Return status information */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#chunk_nr_pages\">chunk_nr_pages</a>; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#pm\">pm</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#status\">status</a> + <a class=\"id\" href=\"#j\">j</a> + <a class=\"id\" href=\"#chunk_start\">chunk_start</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_pm\">out_pm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<a class=\"id\" href=\"#out_pm\">out_pm</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#pm\">pm</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Determine the nodes of an array of pages and store it in an array of status.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#do_pages_stat_array\">do_pages_stat_array</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const void <a class=\"id\" href=\"#__user\">__user</a> **<a class=\"id\" href=\"#pages\">pages</a>, int *<a class=\"id\" href=\"#status\">status</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)(*<a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#set_status\">set_status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#follow_page\">follow_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#set_status\">set_status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Use PageReserved to check for zero page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a> || <a class=\"id\" href=\"#PageReserved\">PageReserved</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#PageKsm\">PageKsm</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#set_status\">set_status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#set_status\">set_status</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Determine the nodes of a user array of pages and store it in</span>", 
"<span class=\"comment\"> * a user array of status.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_pages_stat\">do_pages_stat</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const void <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#status\">status</a>)", 
"{", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DO_PAGES_STAT_CHUNK_NR\">DO_PAGES_STAT_CHUNK_NR</a> 16", 
"<span class=\"ts\"/>const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#chunk_pages\">chunk_pages</a>[<a class=\"id\" href=\"#DO_PAGES_STAT_CHUNK_NR\">DO_PAGES_STAT_CHUNK_NR</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#chunk_status\">chunk_status</a>[<a class=\"id\" href=\"#DO_PAGES_STAT_CHUNK_NR\">DO_PAGES_STAT_CHUNK_NR</a>];", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_pages\">nr_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#chunk_nr\">chunk_nr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk_nr\">chunk_nr</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk_nr\">chunk_nr</a> &gt; <a class=\"id\" href=\"#DO_PAGES_STAT_CHUNK_NR\">DO_PAGES_STAT_CHUNK_NR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk_nr\">chunk_nr</a> = <a class=\"id\" href=\"#DO_PAGES_STAT_CHUNK_NR\">DO_PAGES_STAT_CHUNK_NR</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#chunk_pages\">chunk_pages</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#chunk_nr\">chunk_nr</a> * sizeof(*<a class=\"id\" href=\"#chunk_pages\">chunk_pages</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_pages_stat_array\">do_pages_stat_array</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#chunk_nr\">chunk_nr</a>, <a class=\"id\" href=\"#chunk_pages\">chunk_pages</a>, <a class=\"id\" href=\"#chunk_status\">chunk_status</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#chunk_status\">chunk_status</a>, <a class=\"id\" href=\"#chunk_nr\">chunk_nr</a> * sizeof(*<a class=\"id\" href=\"#status\">status</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> += <a class=\"id\" href=\"#chunk_nr\">chunk_nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> += <a class=\"id\" href=\"#chunk_nr\">chunk_nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> -= <a class=\"id\" href=\"#chunk_nr\">chunk_nr</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_pages\">nr_pages</a> ? -<a class=\"id\" href=\"#EFAULT\">EFAULT</a> : 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Move a list of pages in the address space of the currently executing</span>", 
"<span class=\"comment\"> * process.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE6\">SYSCALL_DEFINE6</a>(<a class=\"id\" href=\"#move_pages\">move_pages</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a>, <a class=\"id\" href=\"#pid\">pid</a>, unsigned long, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const void <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const int <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#status\">status</a>, int, <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>(), *<a class=\"id\" href=\"#tcred\">tcred</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check flags */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; ~(<a class=\"id\" href=\"#MPOL_MF_MOVE\">MPOL_MF_MOVE</a>|<a class=\"id\" href=\"#MPOL_MF_MOVE_ALL\">MPOL_MF_MOVE_ALL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_MF_MOVE_ALL\">MPOL_MF_MOVE_ALL</a>) && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_NICE\">CAP_SYS_NICE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the mm_struct */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#pid\">pid</a> ? <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>) : <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#get_task_mm\">get_task_mm</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if this process has the right to modify the specified</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * process. The right exists if the process has administrative</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * capabilities, superuser privileges or the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * userid as the target process.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcred\">tcred</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a> != <a class=\"id\" href=\"#tcred\">tcred</a>-><a class=\"id\" href=\"#suid\">suid</a> && <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a> != <a class=\"id\" href=\"#tcred\">tcred</a>-><a class=\"id\" href=\"#uid\">uid</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a>  != <a class=\"id\" href=\"#tcred\">tcred</a>-><a class=\"id\" href=\"#suid\">suid</a> && <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a>  != <a class=\"id\" href=\"#tcred\">tcred</a>-><a class=\"id\" href=\"#uid\">uid</a> &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_NICE\">CAP_SYS_NICE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
" <span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_task_movememory\">security_task_movememory</a>(<a class=\"id\" href=\"#task\">task</a>);", 
" <span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nodes\">nodes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_pages_move\">do_pages_move</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_pages_stat\">do_pages_stat</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call migration functions in the vma_ops that may prepare</span>", 
"<span class=\"comment\"> * memory in a vm for migration. migration functions may perform</span>", 
"<span class=\"comment\"> * the migration for vmas that do not have an underlying page struct.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#migrate_vmas\">migrate_vmas</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#from\">from</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
" <span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
" <span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>; <a class=\"id\" href=\"#vma\">vma</a> && !<a class=\"id\" href=\"#err\">err</a>; <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>) {", 
" <span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#migrate\">migrate</a>) {", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#migrate\">migrate</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
" <span class=\"ts\"/><span class=\"ts\"/>}", 
" <span class=\"ts\"/>}", 
" <span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/a6/16fa5500ba539762a7db01c26e3bf5c52e3298.xr', __xr_tmp);
