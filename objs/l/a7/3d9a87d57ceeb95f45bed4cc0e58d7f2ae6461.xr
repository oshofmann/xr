var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#max_depth\">max_depth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_walk_callback\">acpi_walk_callback</a> <a class=\"id\" href=\"#pre_order_visit\">pre_order_visit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_walk_callback\">acpi_walk_callback</a> <a class=\"id\" href=\"#post_order_visit\">post_order_visit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#context\">context</a>, void **<a class=\"id\" href=\"#return_value\">return_value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_walk_namespace\">acpi_walk_namespace</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parameter validation */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#type\">type</a> &gt; <a class=\"id\" href=\"#ACPI_TYPE_LOCAL_MAX\">ACPI_TYPE_LOCAL_MAX</a>) ||", 
"<span class=\"ts\"/>    (!<a class=\"id\" href=\"#max_depth\">max_depth</a>) || (!<a class=\"id\" href=\"#pre_order_visit\">pre_order_visit</a> && !<a class=\"id\" href=\"#post_order_visit\">post_order_visit</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Need to acquire the namespace reader lock to prevent interference</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with any concurrent table unloads (which causes the deletion of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * namespace objects). We cannot allow the deletion of a namespace node</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * while the user function is using it. The exception to this are the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nodes created and deleted during control method execution -- these</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nodes are marked as temporary nodes and are ignored by the namespace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * walk. Thus, control methods can be executed while holding the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * namespace deletion lock (and the user function can execute control</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * methods.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_read_lock\">acpi_ut_acquire_read_lock</a>(&amp;<a class=\"id\" href=\"#acpi_gbl_namespace_rw_lock\">acpi_gbl_namespace_rw_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Lock the namespace around the walk. The namespace will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unlocked/locked around each call to the user function - since the user</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * function must be allowed to make ACPICA calls itself (for example, it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will typically execute control methods during device enumeration.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_walk_namespace\">acpi_ns_walk_namespace</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#start_object\">start_object</a>, <a class=\"id\" href=\"#max_depth\">max_depth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_NS_WALK_UNLOCK\">ACPI_NS_WALK_UNLOCK</a>, <a class=\"id\" href=\"#pre_order_visit\">pre_order_visit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#post_order_visit\">post_order_visit</a>, <a class=\"id\" href=\"#context\">context</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_value\">return_value</a>);", 
"", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"", 
"      <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>:", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_release_read_lock\">acpi_ut_release_read_lock</a>(&amp;<a class=\"id\" href=\"#acpi_gbl_namespace_rw_lock\">acpi_gbl_namespace_rw_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_walk_namespace\">acpi_walk_namespace</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_get_device_callback</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Callback from acpi_get_device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Takes callbacks from walk_namespace and filters out all non-</span>", 
"<span class=\"comment\"> *              present devices, or if they specified a HID, it filters based</span>", 
"<span class=\"comment\"> *              on that.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_get_device_callback\">acpi_ns_get_device_callback</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#obj_handle\">obj_handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#nesting_level\">nesting_level</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#context\">context</a>, void **<a class=\"id\" href=\"#return_value\">return_value</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_get_devices_info\">acpi_get_devices_info</a> *<a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#context\">context</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpica_device_id\">acpica_device_id</a> *<a class=\"id\" href=\"#hid\">hid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpica_device_id_list\">acpica_device_id_list</a> *<a class=\"id\" href=\"#cid\">cid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#no_match\">no_match</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#acpi_ns_validate_handle\">acpi_ns_validate_handle</a>(<a class=\"id\" href=\"#obj_handle\">obj_handle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First, filter based on the device HID and CID.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 01/2010: For this case where a specific HID is requested, we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * want to run _STA until we have an actual HID match. Thus, we will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not unnecessarily execute _STA on devices for which the caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * doesn't care about. Previously, _STA was executed unconditionally</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on all devices found here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A side-effect of this change is that now we will continue to search</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for a matching HID even under device trees where the parent device</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * would have returned a _STA that indicates it is not present or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not functioning (thus aborting the search on that branch).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hid\">hid</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_execute_HID\">acpi_ut_execute_HID</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#hid\">hid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_CTRL_DEPTH\">AE_CTRL_DEPTH</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#no_match\">no_match</a> = <a class=\"id\" href=\"#ACPI_STRCMP\">ACPI_STRCMP</a>(<a class=\"id\" href=\"#hid\">hid</a>-><a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hid\">hid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#hid\">hid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#no_match\">no_match</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * HID does not match, attempt match within the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * list of Compatible IDs (CIDs)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_execute_CID\">acpi_ut_execute_CID</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#cid\">cid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_CTRL_DEPTH\">AE_CTRL_DEPTH</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Walk the CID list */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#cid\">cid</a>-><a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_STRCMP\">ACPI_STRCMP</a>(<a class=\"id\" href=\"#cid\">cid</a>-><a class=\"id\" href=\"#ids\">ids</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hid\">hid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#cid\">cid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#found\">found</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Run _STA to determine if device is present */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_execute_STA\">acpi_ut_execute_STA</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_CTRL_DEPTH\">AE_CTRL_DEPTH</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_STA_DEVICE_PRESENT\">ACPI_STA_DEVICE_PRESENT</a>) &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_STA_DEVICE_FUNCTIONING\">ACPI_STA_DEVICE_FUNCTIONING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't examine the children of the device only when the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * device is neither present nor functional. See ACPI spec,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * description of _STA for more information.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_CTRL_DEPTH\">AE_CTRL_DEPTH</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We have a valid device, invoke the user function */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#user_function\">user_function</a>(<a class=\"id\" href=\"#obj_handle\">obj_handle</a>, <a class=\"id\" href=\"#nesting_level\">nesting_level</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#context\">context</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#return_value\">return_value</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_get_devices</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  HID                 - HID to search for. Can be NULL.</span>", 
"<span class=\"comment\"> *              user_function       - Called when a matching object is found</span>", 
"<span class=\"comment\"> *              Context             - Passed to user function</span>", 
"<span class=\"comment\"> *              return_value        - Location where return value of</span>", 
"<span class=\"comment\"> *                                    user_function is put if terminated early</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS      Return value from the user_function if terminated early.</span>", 
"<span class=\"comment\"> *              Otherwise, returns NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Performs a modified depth-first walk of the namespace tree,</span>", 
"<span class=\"comment\"> *              starting (and ending) at the object specified by start_handle.</span>", 
"<span class=\"comment\"> *              The user_function is called whenever an object of type</span>", 
"<span class=\"comment\"> *              Device is found.  If the user function returns</span>", 
"<span class=\"comment\"> *              a non-zero value, the search is terminated immediately and this</span>", 
"<span class=\"comment\"> *              value is returned to the caller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *              This is a wrapper for walk_namespace, but the callback performs</span>", 
"<span class=\"comment\"> *              additional filtering. Please see acpi_ns_get_device_callback.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
];
xr_frag_insert('l/a7/3d9a87d57ceeb95f45bed4cc0e58d7f2ae6461.xr', __xr_tmp);
