var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  CFQ, or complete fairness queueing, disk scheduler.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Based on ideas from a previously unfinished io</span>", 
"<span class=\"comment\"> *  scheduler (round robin per-process disk scheduling) and Andrea Arcangeli.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2003 Jens Axboe &lt;axboe@kernel.dk&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#elevator\">elevator</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rbtree\">rbtree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioprio\">ioprio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blktrace_api\">blktrace_api</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"cfq.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * tunables</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/* max queue in one round of service */</span>", 
"static const int <a class=\"id\" href=\"#cfq_quantum\">cfq_quantum</a> = 8;", 
"static const int <a class=\"id\" href=\"#cfq_fifo_expire\">cfq_fifo_expire</a>[2] = { <a class=\"id\" href=\"#HZ\">HZ</a> / 4, <a class=\"id\" href=\"#HZ\">HZ</a> / 8 };", 
"<span class=\"comment\">/* maximum backwards seek, in KiB */</span>", 
"static const int <a class=\"id\" href=\"#cfq_back_max\">cfq_back_max</a> = 16 * 1024;", 
"<span class=\"comment\">/* penalty of a backwards seek */</span>", 
"static const int <a class=\"id\" href=\"#cfq_back_penalty\">cfq_back_penalty</a> = 2;", 
"static const int <a class=\"id\" href=\"#cfq_slice_sync\">cfq_slice_sync</a> = <a class=\"id\" href=\"#HZ\">HZ</a> / 10;", 
"static int <a class=\"id\" href=\"#cfq_slice_async\">cfq_slice_async</a> = <a class=\"id\" href=\"#HZ\">HZ</a> / 25;", 
"static const int <a class=\"id\" href=\"#cfq_slice_async_rq\">cfq_slice_async_rq</a> = 2;", 
"static int <a class=\"id\" href=\"#cfq_slice_idle\">cfq_slice_idle</a> = <a class=\"id\" href=\"#HZ\">HZ</a> / 125;", 
"static int <a class=\"id\" href=\"#cfq_group_idle\">cfq_group_idle</a> = <a class=\"id\" href=\"#HZ\">HZ</a> / 125;", 
"static const int <a class=\"id\" href=\"#cfq_target_latency\">cfq_target_latency</a> = <a class=\"id\" href=\"#HZ\">HZ</a> * 3/10; <span class=\"comment\">/* 300 ms */</span>", 
"static const int <a class=\"id\" href=\"#cfq_hist_divisor\">cfq_hist_divisor</a> = 4;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * offset from end of service tree</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFQ_IDLE_DELAY\">CFQ_IDLE_DELAY</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#HZ\">HZ</a> / 5)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * below this threshold, we consider thinktime immediate</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFQ_MIN_TT\">CFQ_MIN_TT</a><span class=\"ts\"/><span class=\"ts\"/>(2)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFQ_SLICE_SCALE\">CFQ_SLICE_SCALE</a><span class=\"ts\"/><span class=\"ts\"/>(5)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFQ_HW_QUEUE_MIN\">CFQ_HW_QUEUE_MIN</a><span class=\"ts\"/>(5)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFQ_SERVICE_SHIFT\">CFQ_SERVICE_SHIFT</a>       12", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFQQ_SEEK_THR\">CFQQ_SEEK_THR</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#sector_t\">sector_t</a>)(8 * 100)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFQQ_CLOSE_THR\">CFQQ_CLOSE_THR</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#sector_t\">sector_t</a>)(8 * 1024)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFQQ_SECT_THR_NONROT\">CFQQ_SECT_THR_NONROT</a><span class=\"ts\"/>(<a class=\"id\" href=\"#sector_t\">sector_t</a>)(2 * 32)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFQQ_SEEKY\">CFQQ_SEEKY</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#hweight32\">hweight32</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#seek_history\">seek_history</a>) &gt; 32/8)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RQ_CIC\">RQ_CIC</a>(<a class=\"id\" href=\"#rq\">rq</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *) (<a class=\"id\" href=\"#rq\">rq</a>)-><a class=\"id\" href=\"#elevator_private\">elevator_private</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RQ_CFQQ\">RQ_CFQQ</a>(<a class=\"id\" href=\"#rq\">rq</a>)<span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *) ((<a class=\"id\" href=\"#rq\">rq</a>)-><a class=\"id\" href=\"#elevator_private2\">elevator_private2</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RQ_CFQG\">RQ_CFQG</a>(<a class=\"id\" href=\"#rq\">rq</a>)<span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> *) ((<a class=\"id\" href=\"#rq\">rq</a>)-><a class=\"id\" href=\"#elevator_private3\">elevator_private3</a>)", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cfq_pool\">cfq_pool</a>;", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cfq_ioc_pool\">cfq_ioc_pool</a>;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#cfq_ioc_count\">cfq_ioc_count</a>);", 
"static struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#ioc_gone\">ioc_gone</a>;", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#ioc_gone_lock\">ioc_gone_lock</a>);", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#cic_index_lock\">cic_index_lock</a>);", 
"static <a class=\"id\" href=\"#DEFINE_IDA\">DEFINE_IDA</a>(<a class=\"id\" href=\"#cic_index_ida\">cic_index_ida</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFQ_PRIO_LISTS\">CFQ_PRIO_LISTS</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IOPRIO_BE_NR\">IOPRIO_BE_NR</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cfq_class_idle\">cfq_class_idle</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#cfqq\">cfqq</a>)-><a class=\"id\" href=\"#ioprio_class\">ioprio_class</a> == <a class=\"id\" href=\"#IOPRIO_CLASS_IDLE\">IOPRIO_CLASS_IDLE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cfq_class_rt\">cfq_class_rt</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#cfqq\">cfqq</a>)-><a class=\"id\" href=\"#ioprio_class\">ioprio_class</a> == <a class=\"id\" href=\"#IOPRIO_CLASS_RT\">IOPRIO_CLASS_RT</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sample_valid\">sample_valid</a>(<a class=\"id\" href=\"#samples\">samples</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#samples\">samples</a>) &gt; 80)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rb_entry_cfqg\">rb_entry_cfqg</a>(<a class=\"id\" href=\"#node\">node</a>)<span class=\"ts\"/><a class=\"id\" href=\"#rb_entry\">rb_entry</a>((<a class=\"id\" href=\"#node\">node</a>), struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a>, <a class=\"id\" href=\"#rb_node\">rb_node</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Most of our rbtree usage is for sorting with min extraction, so</span>", 
"<span class=\"comment\"> * if we cache the leftmost node we don't have to walk down the tree</span>", 
"<span class=\"comment\"> * to find it. Idea borrowed from Ingo Molnars CFS scheduler. We should</span>", 
"<span class=\"comment\"> * move this into the elevator for the rq sorting as well.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfq_rb_root\">cfq_rb_root</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_root\">rb_root</a> <a class=\"id\" href=\"#rb\">rb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#left\">left</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#total_weight\">total_weight</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#min_vdisktime\">min_vdisktime</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#active\">active</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFQ_RB_ROOT\">CFQ_RB_ROOT</a><span class=\"ts\"/>(struct <a class=\"id\" href=\"#cfq_rb_root\">cfq_rb_root</a>) { .<a class=\"id\" href=\"#rb\">rb</a> = <a class=\"id\" href=\"#RB_ROOT\">RB_ROOT</a>, .<a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#count\">count</a> = 0, .<a class=\"id\" href=\"#min_vdisktime\">min_vdisktime</a> = 0, }", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Per process-grouping structure</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* reference count */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#ref\">ref</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* various state flags, see below */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* parent cfq_data */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* service_tree member */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> <a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* service_tree key */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#rb_key\">rb_key</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* prio tree member */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> <a class=\"id\" href=\"#p_node\">p_node</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* prio tree root we belong to, if any */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *<a class=\"id\" href=\"#p_root\">p_root</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* sorted list of pending requests */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_root\">rb_root</a> <a class=\"id\" href=\"#sort_list\">sort_list</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* if fifo isn't expired, next request to serve */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#next_rq\">next_rq</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* requests queued in sort_list */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#queued\">queued</a>[2];", 
"<span class=\"ts\"/><span class=\"comment\">/* currently allocated requests */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#allocated\">allocated</a>[2];", 
"<span class=\"ts\"/><span class=\"comment\">/* fifo list of requests in sort_list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#fifo\">fifo</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* time when queue got scheduled in to dispatch first request. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dispatch_start\">dispatch_start</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#allocated_slice\">allocated_slice</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#slice_dispatch\">slice_dispatch</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* time when first request from queue completed and slice started. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#slice_start\">slice_start</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#slice_end\">slice_end</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#slice_resid\">slice_resid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* pending metadata requests */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#meta_pending\">meta_pending</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* number of requests that are on the dispatch list or inside driver */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dispatched\">dispatched</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* io prio of this group */</span>", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#ioprio\">ioprio</a>, <a class=\"id\" href=\"#org_ioprio\">org_ioprio</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#ioprio_class\">ioprio_class</a>, <a class=\"id\" href=\"#org_ioprio_class\">org_ioprio_class</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seek_history\">seek_history</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#last_request_pos\">last_request_pos</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_rb_root\">cfq_rb_root</a> *<a class=\"id\" href=\"#service_tree\">service_tree</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#new_cfqq\">new_cfqq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> *<a class=\"id\" href=\"#cfqg\">cfqg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> *<a class=\"id\" href=\"#orig_cfqg\">orig_cfqg</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Number of sectors dispatched from queue in single dispatch round */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_sectors\">nr_sectors</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * First index in the service_trees.</span>", 
"<span class=\"comment\"> * IDLE is handled separately, so it has negative index</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#wl_prio_t\">wl_prio_t</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BE_WORKLOAD\">BE_WORKLOAD</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RT_WORKLOAD\">RT_WORKLOAD</a> = 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IDLE_WORKLOAD\">IDLE_WORKLOAD</a> = 2,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Second index in the service_trees.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#wl_type_t\">wl_type_t</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASYNC_WORKLOAD\">ASYNC_WORKLOAD</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SYNC_NOIDLE_WORKLOAD\">SYNC_NOIDLE_WORKLOAD</a> = 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SYNC_WORKLOAD\">SYNC_WORKLOAD</a> = 2", 
"};", 
"", 
"<span class=\"comment\">/* This is per cgroup per device grouping structure */</span>", 
"struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* group service_tree member */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> <a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* group service_tree key */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#vdisktime\">vdisktime</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#on_st\">on_st</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* number of cfqq currently on this group */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_cfqq\">nr_cfqq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Per group busy queus average. Useful for workload slice calc. */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#busy_queues_avg\">busy_queues_avg</a>[2];", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rr lists of queues with requests, onle rr for each priority class.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Counts are embedded in the cfq_rb_root</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_rb_root\">cfq_rb_root</a> <a class=\"id\" href=\"#service_trees\">service_trees</a>[2][3];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_rb_root\">cfq_rb_root</a> <a class=\"id\" href=\"#service_tree_idle\">service_tree_idle</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#saved_workload_slice\">saved_workload_slice</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#wl_type_t\">wl_type_t</a> <a class=\"id\" href=\"#saved_workload\">saved_workload</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#wl_prio_t\">wl_prio_t</a> <a class=\"id\" href=\"#saved_serving_prio\">saved_serving_prio</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#blkio_group\">blkio_group</a> <a class=\"id\" href=\"#blkg\">blkg</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CFQ_GROUP_IOSCHED\">CONFIG_CFQ_GROUP_IOSCHED</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> <a class=\"id\" href=\"#cfqd_node\">cfqd_node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#ref\">ref</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* number of requests that are on the dispatch list or inside driver */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dispatched\">dispatched</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Per block device queue structure</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#queue\">queue</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Root service tree for cfq_groups */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_rb_root\">cfq_rb_root</a> <a class=\"id\" href=\"#grp_service_tree\">grp_service_tree</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> <a class=\"id\" href=\"#root_group\">root_group</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The priority currently being served</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#wl_prio_t\">wl_prio_t</a> <a class=\"id\" href=\"#serving_prio\">serving_prio</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#wl_type_t\">wl_type_t</a> <a class=\"id\" href=\"#serving_type\">serving_type</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#workload_expires\">workload_expires</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> *<a class=\"id\" href=\"#serving_group\">serving_group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#noidle_tree_requires_idle\">noidle_tree_requires_idle</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Each priority tree is sorted by next_request position.  These</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * trees are used when determining if two or more queues are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interleaving requests (see cfq_close_cooperator).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_root\">rb_root</a> <a class=\"id\" href=\"#prio_trees\">prio_trees</a>[<a class=\"id\" href=\"#CFQ_PRIO_LISTS\">CFQ_PRIO_LISTS</a>];", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#busy_queues\">busy_queues</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rq_in_driver\">rq_in_driver</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rq_in_flight\">rq_in_flight</a>[2];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * queue-depth detection</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rq_queued\">rq_queued</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hw_tag\">hw_tag</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hw_tag can be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -1 =&gt; indeterminate, (cfq will behave as if NCQ is present, to allow better detection)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  1 =&gt; NCQ is present (hw_tag_est_depth is the estimated max depth)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  0 =&gt; no NCQ</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hw_tag_est_depth\">hw_tag_est_depth</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hw_tag_samples\">hw_tag_samples</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * idle window management</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a> <a class=\"id\" href=\"#idle_slice_timer\">idle_slice_timer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#unplug_work\">unplug_work</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#active_queue\">active_queue</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#active_cic\">active_cic</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * async queue for each priority case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#async_cfqq\">async_cfqq</a>[2][<a class=\"id\" href=\"#IOPRIO_BE_NR\">IOPRIO_BE_NR</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#async_idle_cfqq\">async_idle_cfqq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#last_position\">last_position</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tunables, see top of file</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cfq_quantum\">cfq_quantum</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cfq_fifo_expire\">cfq_fifo_expire</a>[2];", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cfq_back_penalty\">cfq_back_penalty</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cfq_back_max\">cfq_back_max</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cfq_slice\">cfq_slice</a>[2];", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cfq_slice_async_rq\">cfq_slice_async_rq</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cfq_slice_idle\">cfq_slice_idle</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cfq_group_idle\">cfq_group_idle</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cfq_latency\">cfq_latency</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cfq_group_isolation\">cfq_group_isolation</a>;", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cic_index\">cic_index</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#cic_list\">cic_list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fallback dummy cfqq for extreme OOM conditions</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> <a class=\"id\" href=\"#oom_cfqq\">oom_cfqq</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#last_delayed_sync\">last_delayed_sync</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* List of cfq groups being managed on this device*/</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> <a class=\"id\" href=\"#cfqg_list\">cfqg_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu\">rcu</a>;", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> *<a class=\"id\" href=\"#cfq_get_next_cfqg\">cfq_get_next_cfqg</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>);", 
"", 
"static struct <a class=\"id\" href=\"#cfq_rb_root\">cfq_rb_root</a> *<a class=\"id\" href=\"#service_tree_for\">service_tree_for</a>(struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> *<a class=\"id\" href=\"#cfqg\">cfqg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    enum <a class=\"id\" href=\"#wl_prio_t\">wl_prio_t</a> <a class=\"id\" href=\"#prio\">prio</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    enum <a class=\"id\" href=\"#wl_type_t\">wl_type_t</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfqg\">cfqg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prio\">prio</a> == <a class=\"id\" href=\"#IDLE_WORKLOAD\">IDLE_WORKLOAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#service_tree_idle\">service_tree_idle</a>;", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#service_trees\">service_trees</a>[<a class=\"id\" href=\"#prio\">prio</a>][<a class=\"id\" href=\"#type\">type</a>];", 
"}", 
"", 
"enum <a class=\"id\" href=\"#cfqq_state_flags\">cfqq_state_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFQ_CFQQ_FLAG_on_rr\">CFQ_CFQQ_FLAG_on_rr</a> = 0,<span class=\"ts\"/><span class=\"comment\">/* on round-robin busy list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFQ_CFQQ_FLAG_wait_request\">CFQ_CFQQ_FLAG_wait_request</a>,<span class=\"ts\"/><span class=\"comment\">/* waiting for a request */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFQ_CFQQ_FLAG_must_dispatch\">CFQ_CFQQ_FLAG_must_dispatch</a>,<span class=\"ts\"/><span class=\"comment\">/* must be allowed a dispatch */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFQ_CFQQ_FLAG_must_alloc_slice\">CFQ_CFQQ_FLAG_must_alloc_slice</a>,<span class=\"ts\"/><span class=\"comment\">/* per-slice must_alloc flag */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFQ_CFQQ_FLAG_fifo_expire\">CFQ_CFQQ_FLAG_fifo_expire</a>,<span class=\"ts\"/><span class=\"comment\">/* FIFO checked in this slice */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFQ_CFQQ_FLAG_idle_window\">CFQ_CFQQ_FLAG_idle_window</a>,<span class=\"ts\"/><span class=\"comment\">/* slice idling enabled */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFQ_CFQQ_FLAG_prio_changed\">CFQ_CFQQ_FLAG_prio_changed</a>,<span class=\"ts\"/><span class=\"comment\">/* task priority has changed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFQ_CFQQ_FLAG_slice_new\">CFQ_CFQQ_FLAG_slice_new</a>,<span class=\"ts\"/><span class=\"comment\">/* no requests dispatched in slice */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFQ_CFQQ_FLAG_sync\">CFQ_CFQQ_FLAG_sync</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* synchronous queue */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFQ_CFQQ_FLAG_coop\">CFQ_CFQQ_FLAG_coop</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cfqq is shared */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFQ_CFQQ_FLAG_split_coop\">CFQ_CFQQ_FLAG_split_coop</a>,<span class=\"ts\"/><span class=\"comment\">/* shared cfqq will be splitted */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFQ_CFQQ_FLAG_deep\">CFQ_CFQQ_FLAG_deep</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* sync cfqq experienced large depth */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFQ_CFQQ_FLAG_wait_busy\">CFQ_CFQQ_FLAG_wait_busy</a>,<span class=\"ts\"/><span class=\"comment\">/* Waiting for next request */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFQ_CFQQ_FNS\">CFQ_CFQQ_FNS</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cfq_mark_cfqq_\">cfq_mark_cfqq_</a>##<a class=\"id\" href=\"#name\">name</a>(struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#cfqq\">cfqq</a>)-><a class=\"id\" href=\"#flags\">flags</a> |= (1 << <a class=\"id\" href=\"#CFQ_CFQQ_FLAG_\">CFQ_CFQQ_FLAG_</a>##<a class=\"id\" href=\"#name\">name</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cfq_clear_cfqq_\">cfq_clear_cfqq_</a>##<a class=\"id\" href=\"#name\">name</a>(struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#cfqq\">cfqq</a>)-><a class=\"id\" href=\"#flags\">flags</a> &= ~(1 << <a class=\"id\" href=\"#CFQ_CFQQ_FLAG_\">CFQ_CFQQ_FLAG_</a>##<a class=\"id\" href=\"#name\">name</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cfq_cfqq_\">cfq_cfqq_</a>##<a class=\"id\" href=\"#name\">name</a>(const struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#cfqq\">cfqq</a>)-><a class=\"id\" href=\"#flags\">flags</a> &amp; (1 << <a class=\"id\" href=\"#CFQ_CFQQ_FLAG_\">CFQ_CFQQ_FLAG_</a>##<a class=\"id\" href=\"#name\">name</a>)) != 0;<span class=\"ts\"/>\\", 
"}", 
"", 
"<a class=\"id\" href=\"#CFQ_CFQQ_FNS\">CFQ_CFQQ_FNS</a>(<a class=\"id\" href=\"#on_rr\">on_rr</a>);", 
"<a class=\"id\" href=\"#CFQ_CFQQ_FNS\">CFQ_CFQQ_FNS</a>(<a class=\"id\" href=\"#wait_request\">wait_request</a>);", 
"<a class=\"id\" href=\"#CFQ_CFQQ_FNS\">CFQ_CFQQ_FNS</a>(<a class=\"id\" href=\"#must_dispatch\">must_dispatch</a>);", 
"<a class=\"id\" href=\"#CFQ_CFQQ_FNS\">CFQ_CFQQ_FNS</a>(<a class=\"id\" href=\"#must_alloc_slice\">must_alloc_slice</a>);", 
"<a class=\"id\" href=\"#CFQ_CFQQ_FNS\">CFQ_CFQQ_FNS</a>(<a class=\"id\" href=\"#fifo_expire\">fifo_expire</a>);", 
"<a class=\"id\" href=\"#CFQ_CFQQ_FNS\">CFQ_CFQQ_FNS</a>(<a class=\"id\" href=\"#idle_window\">idle_window</a>);", 
"<a class=\"id\" href=\"#CFQ_CFQQ_FNS\">CFQ_CFQQ_FNS</a>(<a class=\"id\" href=\"#prio_changed\">prio_changed</a>);", 
"<a class=\"id\" href=\"#CFQ_CFQQ_FNS\">CFQ_CFQQ_FNS</a>(<a class=\"id\" href=\"#slice_new\">slice_new</a>);", 
"<a class=\"id\" href=\"#CFQ_CFQQ_FNS\">CFQ_CFQQ_FNS</a>(<a class=\"id\" href=\"#sync\">sync</a>);", 
"<a class=\"id\" href=\"#CFQ_CFQQ_FNS\">CFQ_CFQQ_FNS</a>(<a class=\"id\" href=\"#coop\">coop</a>);", 
"<a class=\"id\" href=\"#CFQ_CFQQ_FNS\">CFQ_CFQQ_FNS</a>(<a class=\"id\" href=\"#split_coop\">split_coop</a>);", 
"<a class=\"id\" href=\"#CFQ_CFQQ_FNS\">CFQ_CFQQ_FNS</a>(<a class=\"id\" href=\"#deep\">deep</a>);", 
"<a class=\"id\" href=\"#CFQ_CFQQ_FNS\">CFQ_CFQQ_FNS</a>(<a class=\"id\" href=\"#wait_busy\">wait_busy</a>);", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#CFQ_CFQQ_FNS\">CFQ_CFQQ_FNS</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CFQ_GROUP_IOSCHED\">CONFIG_CFQ_GROUP_IOSCHED</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cfq_log_cfqq\">cfq_log_cfqq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_add_trace_msg\">blk_add_trace_msg</a>((<a class=\"id\" href=\"#cfqd\">cfqd</a>)-><a class=\"id\" href=\"#queue\">queue</a>, \"cfq%d%c %s \" <a class=\"id\" href=\"#fmt\">fmt</a>, (<a class=\"id\" href=\"#cfqq\">cfqq</a>)-><a class=\"id\" href=\"#pid\">pid</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_cfqq_sync\">cfq_cfqq_sync</a>((<a class=\"id\" href=\"#cfqq\">cfqq</a>)) ? 'S' : 'A', \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blkg_path\">blkg_path</a>(&amp;(<a class=\"id\" href=\"#cfqq\">cfqq</a>)-><a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#blkg\">blkg</a>), ##<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cfq_log_cfqg\">cfq_log_cfqg</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqg\">cfqg</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_add_trace_msg\">blk_add_trace_msg</a>((<a class=\"id\" href=\"#cfqd\">cfqd</a>)-><a class=\"id\" href=\"#queue\">queue</a>, \"%s \" <a class=\"id\" href=\"#fmt\">fmt</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blkg_path\">blkg_path</a>(&amp;(<a class=\"id\" href=\"#cfqg\">cfqg</a>)-><a class=\"id\" href=\"#blkg\">blkg</a>), ##<a class=\"id\" href=\"#args\">args</a>);      \\", 
"", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cfq_log_cfqq\">cfq_log_cfqq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_add_trace_msg\">blk_add_trace_msg</a>((<a class=\"id\" href=\"#cfqd\">cfqd</a>)-><a class=\"id\" href=\"#queue\">queue</a>, \"cfq%d \" <a class=\"id\" href=\"#fmt\">fmt</a>, (<a class=\"id\" href=\"#cfqq\">cfqq</a>)-><a class=\"id\" href=\"#pid\">pid</a>, ##<a class=\"id\" href=\"#args\">args</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cfq_log_cfqg\">cfq_log_cfqg</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqg\">cfqg</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><span class=\"ts\"/>do {} while (0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cfq_log\">cfq_log</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_add_trace_msg\">blk_add_trace_msg</a>((<a class=\"id\" href=\"#cfqd\">cfqd</a>)-><a class=\"id\" href=\"#queue\">queue</a>, \"cfq \" <a class=\"id\" href=\"#fmt\">fmt</a>, ##<a class=\"id\" href=\"#args\">args</a>)", 
"", 
"<span class=\"comment\">/* Traverses through cfq group service trees */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_cfqg_st\">for_each_cfqg_st</a>(<a class=\"id\" href=\"#cfqg\">cfqg</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#st\">st</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#IDLE_WORKLOAD\">IDLE_WORKLOAD</a>; <a class=\"id\" href=\"#i\">i</a>++) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0, <a class=\"id\" href=\"#st\">st</a> = <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#IDLE_WORKLOAD\">IDLE_WORKLOAD</a> ? &amp;<a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#service_trees\">service_trees</a>[<a class=\"id\" href=\"#i\">i</a>][<a class=\"id\" href=\"#j\">j</a>]\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>: &amp;<a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#service_tree_idle\">service_tree_idle</a>; \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#IDLE_WORKLOAD\">IDLE_WORKLOAD</a> && <a class=\"id\" href=\"#j\">j</a> <= <a class=\"id\" href=\"#SYNC_WORKLOAD\">SYNC_WORKLOAD</a>) || \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#IDLE_WORKLOAD\">IDLE_WORKLOAD</a> && <a class=\"id\" href=\"#j\">j</a> == 0); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a>++, <a class=\"id\" href=\"#st\">st</a> = <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#IDLE_WORKLOAD\">IDLE_WORKLOAD</a> ? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#service_trees\">service_trees</a>[<a class=\"id\" href=\"#i\">i</a>][<a class=\"id\" href=\"#j\">j</a>]: <a class=\"id\" href=\"#NULL\">NULL</a>) \\", 
"", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#iops_mode\">iops_mode</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are not idling on queues and it is a NCQ drive, parallel</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * execution of requests is on and measuring time is not possible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in most of the cases until and unless we drive shallower queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * depths and that becomes a performance bottleneck. In such cases</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * switch to start providing fairness in terms of number of IOs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_slice_idle\">cfq_slice_idle</a> && <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#hw_tag\">hw_tag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> enum <a class=\"id\" href=\"#wl_prio_t\">wl_prio_t</a> <a class=\"id\" href=\"#cfqq_prio\">cfqq_prio</a>(struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_class_idle\">cfq_class_idle</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#IDLE_WORKLOAD\">IDLE_WORKLOAD</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_class_rt\">cfq_class_rt</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RT_WORKLOAD\">RT_WORKLOAD</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#BE_WORKLOAD\">BE_WORKLOAD</a>;", 
"}", 
"", 
"", 
"static enum <a class=\"id\" href=\"#wl_type_t\">wl_type_t</a> <a class=\"id\" href=\"#cfqq_type\">cfqq_type</a>(struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfq_cfqq_sync\">cfq_cfqq_sync</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ASYNC_WORKLOAD\">ASYNC_WORKLOAD</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfq_cfqq_idle_window\">cfq_cfqq_idle_window</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SYNC_NOIDLE_WORKLOAD\">SYNC_NOIDLE_WORKLOAD</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#SYNC_WORKLOAD\">SYNC_WORKLOAD</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cfq_group_busy_queues_wl\">cfq_group_busy_queues_wl</a>(enum <a class=\"id\" href=\"#wl_prio_t\">wl_prio_t</a> <a class=\"id\" href=\"#wl\">wl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> *<a class=\"id\" href=\"#cfqg\">cfqg</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wl\">wl</a> == <a class=\"id\" href=\"#IDLE_WORKLOAD\">IDLE_WORKLOAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#service_tree_idle\">service_tree_idle</a>.<a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#service_trees\">service_trees</a>[<a class=\"id\" href=\"#wl\">wl</a>][<a class=\"id\" href=\"#ASYNC_WORKLOAD\">ASYNC_WORKLOAD</a>].<a class=\"id\" href=\"#count\">count</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#service_trees\">service_trees</a>[<a class=\"id\" href=\"#wl\">wl</a>][<a class=\"id\" href=\"#SYNC_NOIDLE_WORKLOAD\">SYNC_NOIDLE_WORKLOAD</a>].<a class=\"id\" href=\"#count\">count</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#service_trees\">service_trees</a>[<a class=\"id\" href=\"#wl\">wl</a>][<a class=\"id\" href=\"#SYNC_WORKLOAD\">SYNC_WORKLOAD</a>].<a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cfqg_busy_async_queues\">cfqg_busy_async_queues</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> *<a class=\"id\" href=\"#cfqg\">cfqg</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#service_trees\">service_trees</a>[<a class=\"id\" href=\"#RT_WORKLOAD\">RT_WORKLOAD</a>][<a class=\"id\" href=\"#ASYNC_WORKLOAD\">ASYNC_WORKLOAD</a>].<a class=\"id\" href=\"#count\">count</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#service_trees\">service_trees</a>[<a class=\"id\" href=\"#BE_WORKLOAD\">BE_WORKLOAD</a>][<a class=\"id\" href=\"#ASYNC_WORKLOAD\">ASYNC_WORKLOAD</a>].<a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cfq_dispatch_insert\">cfq_dispatch_insert</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *, struct <a class=\"id\" href=\"#request\">request</a> *);", 
"static struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfq_get_queue\">cfq_get_queue</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *, <a class=\"id\" href=\"#bool\">bool</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#io_context\">io_context</a> *, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"static struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cfq_cic_lookup\">cfq_cic_lookup</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#io_context\">io_context</a> *);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cic_to_cfqq\">cic_to_cfqq</a>(struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_sync\">is_sync</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#cfqq\">cfqq</a>[<a class=\"id\" href=\"#is_sync\">is_sync</a>];", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cic_set_cfqq\">cic_set_cfqq</a>(struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_sync\">is_sync</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#cfqq\">cfqq</a>[<a class=\"id\" href=\"#is_sync\">is_sync</a>] = <a class=\"id\" href=\"#cfqq\">cfqq</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CIC_DEAD_KEY\">CIC_DEAD_KEY</a><span class=\"ts\"/>1ul", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CIC_DEAD_INDEX_SHIFT\">CIC_DEAD_INDEX_SHIFT</a><span class=\"ts\"/>1", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#cfqd_dead_key\">cfqd_dead_key</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>)", 
"{", 
"<span class=\"ts\"/>return (void *)(<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cic_index\">cic_index</a> << <a class=\"id\" href=\"#CIC_DEAD_INDEX_SHIFT\">CIC_DEAD_INDEX_SHIFT</a> | <a class=\"id\" href=\"#CIC_DEAD_KEY\">CIC_DEAD_KEY</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cic_to_cfqd\">cic_to_cfqd</a>(struct <a class=\"id\" href=\"#cfq_io_context\">cfq_io_context</a> *<a class=\"id\" href=\"#cic\">cic</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a> = <a class=\"id\" href=\"#cic\">cic</a>-><a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((unsigned long) <a class=\"id\" href=\"#cfqd\">cfqd</a> &amp; <a class=\"id\" href=\"#CIC_DEAD_KEY\">CIC_DEAD_KEY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cfqd\">cfqd</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We regard a request as SYNC, if it's either a read or has the SYNC bit</span>", 
"<span class=\"comment\"> * set (in which case it could also be direct WRITE).</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cfq_bio_sync\">cfq_bio_sync</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio_data_dir\">bio_data_dir</a>(<a class=\"id\" href=\"#bio\">bio</a>) == <a class=\"id\" href=\"#READ\">READ</a> || (<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_SYNC\">REQ_SYNC</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * scheduler run of queue, if there are requests pending and no one in the</span>", 
"<span class=\"comment\"> * driver that will restart queueing</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cfq_schedule_dispatch\">cfq_schedule_dispatch</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#busy_queues\">busy_queues</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_log\">cfq_log</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, \"schedule dispatch\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kblockd_schedule_work\">kblockd_schedule_work</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#queue\">queue</a>, &amp;<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#unplug_work\">unplug_work</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cfq_queue_empty\">cfq_queue_empty</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#elevator\">elevator</a>-><a class=\"id\" href=\"#elevator_data\">elevator_data</a>;", 
"", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#rq_queued\">rq_queued</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Scale schedule slice based on io priority. Use the sync time slice only</span>", 
"<span class=\"comment\"> * if a queue is marked sync and has sync io queued. A sync queue with async</span>", 
"<span class=\"comment\"> * io only, should not get full sync slice length.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cfq_prio_slice\">cfq_prio_slice</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#sync\">sync</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned short <a class=\"id\" href=\"#prio\">prio</a>)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#base_slice\">base_slice</a> = <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_slice\">cfq_slice</a>[<a class=\"id\" href=\"#sync\">sync</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#prio\">prio</a> >= <a class=\"id\" href=\"#IOPRIO_BE_NR\">IOPRIO_BE_NR</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#base_slice\">base_slice</a> + (<a class=\"id\" href=\"#base_slice\">base_slice</a>/<a class=\"id\" href=\"#CFQ_SLICE_SCALE\">CFQ_SLICE_SCALE</a> * (4 - <a class=\"id\" href=\"#prio\">prio</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#cfq_prio_to_slice\">cfq_prio_to_slice</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cfq_prio_slice\">cfq_prio_slice</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfq_cfqq_sync\">cfq_cfqq_sync</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>), <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cfq_scale_slice\">cfq_scale_slice</a>(unsigned long <a class=\"id\" href=\"#delta\">delta</a>, struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> *<a class=\"id\" href=\"#cfqg\">cfqg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#delta\">delta</a> << <a class=\"id\" href=\"#CFQ_SERVICE_SHIFT\">CFQ_SERVICE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#d\">d</a> * <a class=\"id\" href=\"#BLKIO_WEIGHT_DEFAULT\">BLKIO_WEIGHT_DEFAULT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#weight\">weight</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#d\">d</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#max_vdisktime\">max_vdisktime</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#min_vdisktime\">min_vdisktime</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#vdisktime\">vdisktime</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#delta\">delta</a> = (<a class=\"id\" href=\"#s64\">s64</a>)(<a class=\"id\" href=\"#vdisktime\">vdisktime</a> - <a class=\"id\" href=\"#min_vdisktime\">min_vdisktime</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_vdisktime\">min_vdisktime</a> = <a class=\"id\" href=\"#vdisktime\">vdisktime</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_vdisktime\">min_vdisktime</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#min_vdisktime\">min_vdisktime</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#min_vdisktime\">min_vdisktime</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#vdisktime\">vdisktime</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#delta\">delta</a> = (<a class=\"id\" href=\"#s64\">s64</a>)(<a class=\"id\" href=\"#vdisktime\">vdisktime</a> - <a class=\"id\" href=\"#min_vdisktime\">min_vdisktime</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_vdisktime\">min_vdisktime</a> = <a class=\"id\" href=\"#vdisktime\">vdisktime</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_vdisktime\">min_vdisktime</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#update_min_vdisktime\">update_min_vdisktime</a>(struct <a class=\"id\" href=\"#cfq_rb_root\">cfq_rb_root</a> *<a class=\"id\" href=\"#st\">st</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#vdisktime\">vdisktime</a> = <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#min_vdisktime\">min_vdisktime</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> *<a class=\"id\" href=\"#cfqg\">cfqg</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#active\">active</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqg\">cfqg</a> = <a class=\"id\" href=\"#rb_entry_cfqg\">rb_entry_cfqg</a>(<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#active\">active</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vdisktime\">vdisktime</a> = <a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#vdisktime\">vdisktime</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#left\">left</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfqg\">cfqg</a> = <a class=\"id\" href=\"#rb_entry_cfqg\">rb_entry_cfqg</a>(<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#left\">left</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vdisktime\">vdisktime</a> = <a class=\"id\" href=\"#min_vdisktime\">min_vdisktime</a>(<a class=\"id\" href=\"#vdisktime\">vdisktime</a>, <a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#vdisktime\">vdisktime</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#min_vdisktime\">min_vdisktime</a> = <a class=\"id\" href=\"#max_vdisktime\">max_vdisktime</a>(<a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#min_vdisktime\">min_vdisktime</a>, <a class=\"id\" href=\"#vdisktime\">vdisktime</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * get averaged number of queues of RT/BE priority.</span>", 
"<span class=\"comment\"> * average is updated, with a formula that gives more weight to higher numbers,</span>", 
"<span class=\"comment\"> * to quickly follows sudden increases and decrease slowly</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#cfq_group_get_avg_queues\">cfq_group_get_avg_queues</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> *<a class=\"id\" href=\"#cfqg\">cfqg</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#rt\">rt</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#min_q\">min_q</a>, <a class=\"id\" href=\"#max_q\">max_q</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#mult\">mult</a>  = <a class=\"id\" href=\"#cfq_hist_divisor\">cfq_hist_divisor</a> - 1;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#round\">round</a> = <a class=\"id\" href=\"#cfq_hist_divisor\">cfq_hist_divisor</a> / 2;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#busy\">busy</a> = <a class=\"id\" href=\"#cfq_group_busy_queues_wl\">cfq_group_busy_queues_wl</a>(<a class=\"id\" href=\"#rt\">rt</a>, <a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqg\">cfqg</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_q\">min_q</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#busy_queues_avg\">busy_queues_avg</a>[<a class=\"id\" href=\"#rt\">rt</a>], <a class=\"id\" href=\"#busy\">busy</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_q\">max_q</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#busy_queues_avg\">busy_queues_avg</a>[<a class=\"id\" href=\"#rt\">rt</a>], <a class=\"id\" href=\"#busy\">busy</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#busy_queues_avg\">busy_queues_avg</a>[<a class=\"id\" href=\"#rt\">rt</a>] = (<a class=\"id\" href=\"#mult\">mult</a> * <a class=\"id\" href=\"#max_q\">max_q</a> + <a class=\"id\" href=\"#min_q\">min_q</a> + <a class=\"id\" href=\"#round\">round</a>) /", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_hist_divisor\">cfq_hist_divisor</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#busy_queues_avg\">busy_queues_avg</a>[<a class=\"id\" href=\"#rt\">rt</a>];", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned", 
"<a class=\"id\" href=\"#cfq_group_slice\">cfq_group_slice</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#cfq_group\">cfq_group</a> *<a class=\"id\" href=\"#cfqg\">cfqg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfq_rb_root\">cfq_rb_root</a> *<a class=\"id\" href=\"#st\">st</a> = &amp;<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#grp_service_tree\">grp_service_tree</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cfq_target_latency\">cfq_target_latency</a> * <a class=\"id\" href=\"#cfqg\">cfqg</a>-><a class=\"id\" href=\"#weight\">weight</a> / <a class=\"id\" href=\"#st\">st</a>-><a class=\"id\" href=\"#total_weight\">total_weight</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#cfq_set_prio_slice\">cfq_set_prio_slice</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#slice\">slice</a> = <a class=\"id\" href=\"#cfq_prio_to_slice\">cfq_prio_to_slice</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_latency\">cfq_latency</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * interested queues (we consider only the ones with the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * priority class in the cfq group)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#iq\">iq</a> = <a class=\"id\" href=\"#cfq_group_get_avg_queues\">cfq_group_get_avg_queues</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#cfqg\">cfqg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfq_class_rt\">cfq_class_rt</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#sync_slice\">sync_slice</a> = <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_slice\">cfq_slice</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#expect_latency\">expect_latency</a> = <a class=\"id\" href=\"#sync_slice\">sync_slice</a> * <a class=\"id\" href=\"#iq\">iq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#group_slice\">group_slice</a> = <a class=\"id\" href=\"#cfq_group_slice\">cfq_group_slice</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#cfqg\">cfqg</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#expect_latency\">expect_latency</a> &gt; <a class=\"id\" href=\"#group_slice\">group_slice</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#base_low_slice\">base_low_slice</a> = 2 * <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_slice_idle\">cfq_slice_idle</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* scale low_slice according to IO priority</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and sync vs async */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#low_slice\">low_slice</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#slice\">slice</a>, <a class=\"id\" href=\"#base_low_slice\">base_low_slice</a> * <a class=\"id\" href=\"#slice\">slice</a> / <a class=\"id\" href=\"#sync_slice\">sync_slice</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the adapted slice value is scaled to fit all iqs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * into the target latency */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slice\">slice</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#slice\">slice</a> * <a class=\"id\" href=\"#group_slice\">group_slice</a> / <a class=\"id\" href=\"#expect_latency\">expect_latency</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#low_slice\">low_slice</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#slice_start\">slice_start</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#slice_end\">slice_end</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#slice\">slice</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#allocated_slice\">allocated_slice</a> = <a class=\"id\" href=\"#slice\">slice</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfq_log_cfqq\">cfq_log_cfqq</a>(<a class=\"id\" href=\"#cfqd\">cfqd</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>, \"set_slice=%lu\", <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#slice_end\">slice_end</a> - <a class=\"id\" href=\"#jiffies\">jiffies</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We need to wrap this check in cfq_cfqq_slice_new(), since -&gt;slice_end</span>", 
"<span class=\"comment\"> * isn't valid until the first request from the dispatch is activated</span>", 
"<span class=\"comment\"> * and the slice time set.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cfq_slice_used\">cfq_slice_used</a>(struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfqq\">cfqq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfq_cfqq_slice_new\">cfq_cfqq_slice_new</a>(<a class=\"id\" href=\"#cfqq\">cfqq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#cfqq\">cfqq</a>-><a class=\"id\" href=\"#slice_end\">slice_end</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Lifted from AS - choose which of rq1 and rq2 that is best served now.</span>", 
"<span class=\"comment\"> * We choose the request that is closest to the head right now. Distance</span>", 
"<span class=\"comment\"> * behind the head is penalized and only allowed to a certain extent.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#request\">request</a> *", 
"<a class=\"id\" href=\"#cfq_choose_req\">cfq_choose_req</a>(struct <a class=\"id\" href=\"#cfq_data\">cfq_data</a> *<a class=\"id\" href=\"#cfqd\">cfqd</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq1\">rq1</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq2\">rq2</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#last\">last</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#s1\">s1</a>, <a class=\"id\" href=\"#s2\">s2</a>, <a class=\"id\" href=\"#d1\">d1</a> = 0, <a class=\"id\" href=\"#d2\">d2</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#back_max\">back_max</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFQ_RQ1_WRAP\">CFQ_RQ1_WRAP</a><span class=\"ts\"/>0x01 <span class=\"comment\">/* request 1 wraps */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CFQ_RQ2_WRAP\">CFQ_RQ2_WRAP</a><span class=\"ts\"/>0x02 <span class=\"comment\">/* request 2 wraps */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#wrap\">wrap</a> = 0; <span class=\"comment\">/* bit mask: requests behind the disk head? */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq1\">rq1</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#rq1\">rq1</a> == <a class=\"id\" href=\"#rq2\">rq2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq2\">rq2</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq2\">rq2</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq1\">rq1</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq_is_sync\">rq_is_sync</a>(<a class=\"id\" href=\"#rq1\">rq1</a>) && !<a class=\"id\" href=\"#rq_is_sync\">rq_is_sync</a>(<a class=\"id\" href=\"#rq2\">rq2</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq1\">rq1</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#rq_is_sync\">rq_is_sync</a>(<a class=\"id\" href=\"#rq2\">rq2</a>) && !<a class=\"id\" href=\"#rq_is_sync\">rq_is_sync</a>(<a class=\"id\" href=\"#rq1\">rq1</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq2\">rq2</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#rq1\">rq1</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_META\">REQ_META</a>) && !(<a class=\"id\" href=\"#rq2\">rq2</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_META\">REQ_META</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq1\">rq1</a>;", 
"<span class=\"ts\"/>else if ((<a class=\"id\" href=\"#rq2\">rq2</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_META\">REQ_META</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/> !(<a class=\"id\" href=\"#rq1\">rq1</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_META\">REQ_META</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq2\">rq2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s1\">s1</a> = <a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#rq1\">rq1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s2\">s2</a> = <a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#rq2\">rq2</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by definition, 1KiB is 2 sectors</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#back_max\">back_max</a> = <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_back_max\">cfq_back_max</a> * 2;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Strict one way elevator _except_ in the case where we allow</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * short backward seeks which are biased as twice the cost of a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * similar forward seek.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s1\">s1</a> >= <a class=\"id\" href=\"#last\">last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d1\">d1</a> = <a class=\"id\" href=\"#s1\">s1</a> - <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#s1\">s1</a> + <a class=\"id\" href=\"#back_max\">back_max</a> >= <a class=\"id\" href=\"#last\">last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d1\">d1</a> = (<a class=\"id\" href=\"#last\">last</a> - <a class=\"id\" href=\"#s1\">s1</a>) * <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_back_penalty\">cfq_back_penalty</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrap\">wrap</a> |= <a class=\"id\" href=\"#CFQ_RQ1_WRAP\">CFQ_RQ1_WRAP</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s2\">s2</a> >= <a class=\"id\" href=\"#last\">last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d2\">d2</a> = <a class=\"id\" href=\"#s2\">s2</a> - <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#s2\">s2</a> + <a class=\"id\" href=\"#back_max\">back_max</a> >= <a class=\"id\" href=\"#last\">last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d2\">d2</a> = (<a class=\"id\" href=\"#last\">last</a> - <a class=\"id\" href=\"#s2\">s2</a>) * <a class=\"id\" href=\"#cfqd\">cfqd</a>-><a class=\"id\" href=\"#cfq_back_penalty\">cfq_back_penalty</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrap\">wrap</a> |= <a class=\"id\" href=\"#CFQ_RQ2_WRAP\">CFQ_RQ2_WRAP</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Found required data */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * By doing switch() on the bit mask \"wrap\" we avoid having to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check two variables for all permutations: --&gt; faster!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#wrap\">wrap</a>) {", 
"<span class=\"ts\"/>case 0: <span class=\"comment\">/* common case for CFQ: rq1 and rq2 not wrapped */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#d1\">d1</a> &lt; <a class=\"id\" href=\"#d2\">d2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq1\">rq1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#d2\">d2</a> &lt; <a class=\"id\" href=\"#d1\">d1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq2\">rq2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s1\">s1</a> >= <a class=\"id\" href=\"#s2\">s2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq1\">rq1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq2\">rq2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CFQ_RQ2_WRAP\">CFQ_RQ2_WRAP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq1\">rq1</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CFQ_RQ1_WRAP\">CFQ_RQ1_WRAP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq2\">rq2</a>;", 
"<span class=\"ts\"/>case (<a class=\"id\" href=\"#CFQ_RQ1_WRAP\">CFQ_RQ1_WRAP</a>|<a class=\"id\" href=\"#CFQ_RQ2_WRAP\">CFQ_RQ2_WRAP</a>): <span class=\"comment\">/* both rqs wrapped */</span>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Since both rqs are wrapped,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * start with the one that's further behind head</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (--&gt; only *one* back seek required),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * since back seek takes more time than forward.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s1\">s1</a> <= <a class=\"id\" href=\"#s2\">s2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq1\">rq1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rq2\">rq2</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The below is leftmost cache rbtree addon</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#cfq_queue\">cfq_queue</a> *<a class=\"id\" href=\"#cfq_rb_first\">cfq_rb_first</a>(struct <a class=\"id\" href=\"#cfq_rb_root\">cfq_rb_root</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Service tree is empty */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#left\">left</a>)", 
];
xr_frag_insert('l/a7/592a41e46785e86bad8c86f6087b7224b6d97f.xr', __xr_tmp);
