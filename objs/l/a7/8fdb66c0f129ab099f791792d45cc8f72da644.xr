var __xr_tmp = [
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#network_header\">network_header</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_set_network_header\">skb_set_network_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, const int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_network_header\">skb_reset_network_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#network_header\">network_header</a> += <a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#skb_mac_header\">skb_mac_header</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a> + <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_mac_header_was_set\">skb_mac_header_was_set</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a> != ~0U;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_reset_mac_header\">skb_reset_mac_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_set_mac_header\">skb_set_mac_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, const int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_mac_header\">skb_reset_mac_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a> += <a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"", 
"#else <span class=\"comment\">/* NET_SKBUFF_DATA_USES_OFFSET */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#skb_transport_header\">skb_transport_header</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#transport_header\">transport_header</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_reset_transport_header\">skb_reset_transport_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#transport_header\">transport_header</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_set_transport_header\">skb_set_transport_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#transport_header\">transport_header</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#skb_network_header\">skb_network_header</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#network_header\">network_header</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_reset_network_header\">skb_reset_network_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#network_header\">network_header</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_set_network_header\">skb_set_network_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, const int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#network_header\">network_header</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#skb_mac_header\">skb_mac_header</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_mac_header_was_set\">skb_mac_header_was_set</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a> != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_reset_mac_header\">skb_reset_mac_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_set_mac_header\">skb_set_mac_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, const int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* NET_SKBUFF_DATA_USES_OFFSET */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_transport_offset\">skb_transport_offset</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_transport_header\">skb_transport_header</a>(<a class=\"id\" href=\"#skb\">skb</a>) - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#skb_network_header_len\">skb_network_header_len</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#transport_header\">transport_header</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#network_header\">network_header</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_network_offset\">skb_network_offset</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_network_header\">skb_network_header</a>(<a class=\"id\" href=\"#skb\">skb</a>) - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pskb_network_may_pull\">pskb_network_may_pull</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb_network_offset\">skb_network_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>) + <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * CPUs often take a performance hit when accessing unaligned memory</span>", 
"<span class=\"comment\"> * locations. The actual performance hit varies, it can be small if the</span>", 
"<span class=\"comment\"> * hardware handles it or large if we have to take an exception and fix it</span>", 
"<span class=\"comment\"> * in software.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Since an ethernet header is 14 bytes network drivers often end up with</span>", 
"<span class=\"comment\"> * the IP header at an unaligned offset. The IP header can be aligned by</span>", 
"<span class=\"comment\"> * shifting the start of the packet by 2 bytes. Drivers should do this</span>", 
"<span class=\"comment\"> * with:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * skb_reserve(skb, NET_IP_ALIGN);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The downside to this alignment of the IP header is that the DMA is now</span>", 
"<span class=\"comment\"> * unaligned. On some architectures the cost of an unaligned DMA is high</span>", 
"<span class=\"comment\"> * and this cost outweighs the gains made by aligning the IP header.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Since this trade off varies between architectures, we allow NET_IP_ALIGN</span>", 
"<span class=\"comment\"> * to be overridden.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#NET_IP_ALIGN\">NET_IP_ALIGN</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NET_IP_ALIGN\">NET_IP_ALIGN</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The networking layer reserves some headroom in skb data (via</span>", 
"<span class=\"comment\"> * dev_alloc_skb). This is used to avoid having to reallocate skb data when</span>", 
"<span class=\"comment\"> * the header has to grow. In the default case, if the header has to grow</span>", 
"<span class=\"comment\"> * 32 bytes or less we avoid the reallocation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unfortunately this headroom changes the DMA alignment of the resulting</span>", 
"<span class=\"comment\"> * network packet. As for NET_IP_ALIGN, this unaligned DMA is expensive</span>", 
"<span class=\"comment\"> * on some architectures. An architecture can override this value,</span>", 
"<span class=\"comment\"> * perhaps setting it to a cacheline in size (since that will maintain</span>", 
"<span class=\"comment\"> * cacheline alignment of the DMA). It must be a power of 2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Various parts of the networking layer expect at least 32 bytes of</span>", 
"<span class=\"comment\"> * headroom, you should not reduce this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Using max(32, L1_CACHE_BYTES) makes sense (especially with RPS)</span>", 
"<span class=\"comment\"> * to reduce average number of cache lines per packet.</span>", 
"<span class=\"comment\"> * get_rps_cpus() for example only access one 64 bytes aligned block :</span>", 
"<span class=\"comment\"> * NET_IP_ALIGN(2) + ethernet_header(14) + IP_header(20/40) + ports(8)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#NET_SKB_PAD\">NET_SKB_PAD</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NET_SKB_PAD\">NET_SKB_PAD</a><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a>(32, <a class=\"id\" href=\"#L1_CACHE_BYTES\">L1_CACHE_BYTES</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern int <a class=\"id\" href=\"#___pskb_trim\">___pskb_trim</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__skb_trim\">__skb_trim</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_set_tail_pointer\">skb_set_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#skb_trim\">skb_trim</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__pskb_trim\">__pskb_trim</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#___pskb_trim\">___pskb_trim</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_trim\">__skb_trim</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pskb_trim\">pskb_trim</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>) ? <a class=\"id\" href=\"#__pskb_trim\">__pskb_trim</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>) : 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pskb_trim_unique - remove end from a paged unique (not cloned) buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to alter</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: new length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is identical to pskb_trim except that the caller knows that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the skb is not cloned so we should never get an error due to out-</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of-memory.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pskb_trim_unique\">pskb_trim_unique</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pskb_trim\">pskb_trim</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_orphan - orphan a buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to orphan</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If a buffer currently has an owner then we call the owner's</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>destructor function and make the @skb unowned. The buffer continues</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to exist but is no longer charged to its former owner.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_orphan\">skb_orphan</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#destructor\">destructor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#destructor\">destructor</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#destructor\">destructor</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__skb_queue_purge - empty a list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: list to empty</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Delete all buffers on an &amp;sk_buff list. Each buffer is removed from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the list and one reference dropped. This function does not take the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>list lock and the caller must hold the relevant locks to use it.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#skb_queue_purge\">skb_queue_purge</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__skb_queue_purge\">__skb_queue_purge</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#__skb_dequeue\">__skb_dequeue</a>(<a class=\"id\" href=\"#list\">list</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__dev_alloc_skb - allocate an skbuff for receiving</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@length: length to allocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp_mask: get_free_pages mask, passed to alloc_skb</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate a new &amp;sk_buff and assign it a usage count of one. The</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>buffer has unspecified headroom built in. Users should allocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the headroom they think they need without accounting for the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>built in space. The built in space is used for optimisations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%NULL is returned if there is no free memory.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#__dev_alloc_skb\">__dev_alloc_skb</a>(unsigned int <a class=\"id\" href=\"#length\">length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(<a class=\"id\" href=\"#length\">length</a> + <a class=\"id\" href=\"#NET_SKB_PAD\">NET_SKB_PAD</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#NET_SKB_PAD\">NET_SKB_PAD</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#dev_alloc_skb\">dev_alloc_skb</a>(unsigned int <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#__netdev_alloc_skb\">__netdev_alloc_skb</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netdev_alloc_skb - allocate an skbuff for rx on a specific device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: network device to receive on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@length: length to allocate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate a new &amp;sk_buff and assign it a usage count of one. The</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>buffer has unspecified headroom built in. Users should allocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the headroom they think they need without accounting for the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>built in space. The built in space is used for optimisations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%NULL is returned if there is no free memory. Although this function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allocates memory it can be called from an interrupt.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#netdev_alloc_skb\">netdev_alloc_skb</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__netdev_alloc_skb\">__netdev_alloc_skb</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#netdev_alloc_skb_ip_align\">netdev_alloc_skb_ip_align</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#netdev_alloc_skb\">netdev_alloc_skb</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#length\">length</a> + <a class=\"id\" href=\"#NET_IP_ALIGN\">NET_IP_ALIGN</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#NET_IP_ALIGN\">NET_IP_ALIGN</a> && <a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#NET_IP_ALIGN\">NET_IP_ALIGN</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#__netdev_alloc_page\">__netdev_alloc_page</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netdev_alloc_page - allocate a page for ps-rx on a specific device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: network device to receive on</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Allocate a new page node local to the specified device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>%NULL is returned if there is no free memory.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#netdev_alloc_page\">netdev_alloc_page</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__netdev_alloc_page\">__netdev_alloc_page</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#netdev_free_page\">netdev_free_page</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_clone_writable - is the header of a clone writable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to check</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: length up to which to write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns true if modifying the header part of the cloned buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>does not requires the data to be copied.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_clone_writable\">skb_clone_writable</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#skb_header_cloned\">skb_header_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>) &&", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_headroom\">skb_headroom</a>(<a class=\"id\" href=\"#skb\">skb</a>) + <a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#hdr_len\">hdr_len</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__skb_cow\">__skb_cow</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#headroom\">headroom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#cloned\">cloned</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#delta\">delta</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#headroom\">headroom</a> &lt; <a class=\"id\" href=\"#NET_SKB_PAD\">NET_SKB_PAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#headroom\">headroom</a> = <a class=\"id\" href=\"#NET_SKB_PAD\">NET_SKB_PAD</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#headroom\">headroom</a> &gt; <a class=\"id\" href=\"#skb_headroom\">skb_headroom</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#headroom\">headroom</a> - <a class=\"id\" href=\"#skb_headroom\">skb_headroom</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> || <a class=\"id\" href=\"#cloned\">cloned</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#NET_SKB_PAD\">NET_SKB_PAD</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_cow - copy header of skb when it is required</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to cow</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@headroom: needed headroom</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the skb passed lacks sufficient headroom or its data part</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is shared, data is reallocated. If reallocation fails, an error</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is returned and original skb is not changed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The result is skb with writable area skb-&gt;head...skb-&gt;tail</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and at least @headroom of space at head.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_cow\">skb_cow</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#headroom\">headroom</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__skb_cow\">__skb_cow</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#headroom\">headroom</a>, <a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_cow_head - skb_cow but only making the head writable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to cow</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@headroom: needed headroom</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is identical to skb_cow except that we replace the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_cloned check by skb_header_cloned.  It should be used when</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>you only need to push on some header and do not need to modify</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the data.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_cow_head\">skb_cow_head</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#headroom\">headroom</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__skb_cow\">__skb_cow</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#headroom\">headroom</a>, <a class=\"id\" href=\"#skb_header_cloned\">skb_header_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_padto<span class=\"ts\"/>- pad an skbuff up to a minimal size</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to pad</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: minimal length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Pads up a buffer to ensure the trailing bytes exist and are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>blanked. If the buffer already contains sufficient data it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is untouched. Otherwise it is extended. Returns zero on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>success. The skb is freed on error.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_padto\">skb_padto</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#size\">size</a> >= <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_pad\">skb_pad</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_add_data\">skb_add_data</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#from\">from</a>, int <a class=\"id\" href=\"#copy\">copy</a>)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_and_copy_from_user\">csum_and_copy_from_user</a>(<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#copy\">copy</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#copy\">copy</a>, 0, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_block_add\">csum_block_add</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#off\">off</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#copy\">copy</a>), <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#copy\">copy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_trim\">__skb_trim</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#off\">off</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_can_coalesce\">skb_can_coalesce</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#off\">off</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#skb_frag_struct\">skb_frag_struct</a> *<a class=\"id\" href=\"#frag\">frag</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a> - 1];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#page\">page</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#off\">off</a> == <a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#page_offset\">page_offset</a> + <a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__skb_linearize\">__skb_linearize</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pskb_pull_tail\">__pskb_pull_tail</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a>) ? 0 : -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_linearize - convert paged skb to linear one</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to linarize</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If there is no free memory -ENOMEM is returned, otherwise zero</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is returned and the old skb data released.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_linearize\">skb_linearize</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_is_nonlinear\">skb_is_nonlinear</a>(<a class=\"id\" href=\"#skb\">skb</a>) ? <a class=\"id\" href=\"#__skb_linearize\">__skb_linearize</a>(<a class=\"id\" href=\"#skb\">skb</a>) : 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_linearize_cow - make sure skb is linear and writable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to process</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If there is no free memory -ENOMEM is returned, otherwise zero</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is returned and the old skb data released.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_linearize_cow\">skb_linearize_cow</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_is_nonlinear\">skb_is_nonlinear</a>(<a class=\"id\" href=\"#skb\">skb</a>) || <a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>) ?", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#__skb_linearize\">__skb_linearize</a>(<a class=\"id\" href=\"#skb\">skb</a>) : 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_postpull_rcsum - update checksum for received skb after pull</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to update</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@start: start of data before pull</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: length of data pulled</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>After doing a pull on a received packet, you need to call this to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>update the CHECKSUM_COMPLETE checksum, or set ip_summed to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>CHECKSUM_NONE so that it can be recomputed from scratch.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_postpull_rcsum\">skb_postpull_rcsum</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const void *<a class=\"id\" href=\"#start\">start</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_COMPLETE\">CHECKSUM_COMPLETE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_sub\">csum_sub</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#csum_partial\">csum_partial</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#len\">len</a>, 0));", 
"}", 
"", 
"unsigned char *<a class=\"id\" href=\"#skb_pull_rcsum\">skb_pull_rcsum</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pskb_trim_rcsum - trim received skb and update checksum</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to trim</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: new length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is exactly the same as pskb_trim except that it ensures the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>checksum of received packets are still valid after the operation.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pskb_trim_rcsum\">pskb_trim_rcsum</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_COMPLETE\">CHECKSUM_COMPLETE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pskb_trim\">__pskb_trim</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#skb_queue_walk\">skb_queue_walk</a>(<a class=\"id\" href=\"#queue\">queue</a>, <a class=\"id\" href=\"#skb\">skb</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#skb\">skb</a> = (<a class=\"id\" href=\"#queue\">queue</a>)-><a class=\"id\" href=\"#next\">next</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>), (<a class=\"id\" href=\"#skb\">skb</a> != (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *)(<a class=\"id\" href=\"#queue\">queue</a>));<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#skb_queue_walk_safe\">skb_queue_walk_safe</a>(<a class=\"id\" href=\"#queue\">queue</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#tmp\">tmp</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#skb\">skb</a> = (<a class=\"id\" href=\"#queue\">queue</a>)-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#skb\">skb</a> != (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *)(<a class=\"id\" href=\"#queue\">queue</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#skb_queue_walk_from\">skb_queue_walk_from</a>(<a class=\"id\" href=\"#queue\">queue</a>, <a class=\"id\" href=\"#skb\">skb</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>), (<a class=\"id\" href=\"#skb\">skb</a> != (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *)(<a class=\"id\" href=\"#queue\">queue</a>));<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#skb_queue_walk_from_safe\">skb_queue_walk_from_safe</a>(<a class=\"id\" href=\"#queue\">queue</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#tmp\">tmp</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#skb\">skb</a> != (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *)(<a class=\"id\" href=\"#queue\">queue</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#skb_queue_reverse_walk\">skb_queue_reverse_walk</a>(<a class=\"id\" href=\"#queue\">queue</a>, <a class=\"id\" href=\"#skb\">skb</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#skb\">skb</a> = (<a class=\"id\" href=\"#queue\">queue</a>)-><a class=\"id\" href=\"#prev\">prev</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#prev\">prev</a>), (<a class=\"id\" href=\"#skb\">skb</a> != (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *)(<a class=\"id\" href=\"#queue\">queue</a>));<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#prev\">prev</a>)", 
"", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skb_has_frags\">skb_has_frags</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a> != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_frag_list_init\">skb_frag_list_init</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_frag_add_head\">skb_frag_add_head</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#frag\">frag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a> = <a class=\"id\" href=\"#frag\">frag</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#skb_walk_frags\">skb_walk_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#iter\">iter</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag_list\">frag_list</a>; <a class=\"id\" href=\"#iter\">iter</a>; <a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#__skb_recv_datagram\">__skb_recv_datagram</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int *<a class=\"id\" href=\"#peeked\">peeked</a>, int *<a class=\"id\" href=\"#err\">err</a>);", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_recv_datagram\">skb_recv_datagram</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#noblock\">noblock</a>, int *<a class=\"id\" href=\"#err\">err</a>);", 
"extern unsigned int    <a class=\"id\" href=\"#datagram_poll\">datagram_poll</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#poll_table_struct\">poll_table_struct</a> *<a class=\"id\" href=\"#wait\">wait</a>);", 
"extern int<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_copy_datagram_iovec\">skb_copy_datagram_iovec</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#offset\">offset</a>, struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#size\">size</a>);", 
"extern int<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_copy_and_csum_datagram_iovec\">skb_copy_and_csum_datagram_iovec</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#hlen\">hlen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>);", 
"extern int<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_copy_datagram_from_iovec\">skb_copy_datagram_from_iovec</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#from_offset\">from_offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#len\">len</a>);", 
"extern int<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_copy_datagram_const_iovec\">skb_copy_datagram_const_iovec</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#to_offset\">to_offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#size\">size</a>);", 
"extern void<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_free_datagram\">skb_free_datagram</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern void<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_free_datagram_locked\">skb_free_datagram_locked</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern int<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_kill_datagram\">skb_kill_datagram</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#flags\">flags</a>);", 
"extern <a class=\"id\" href=\"#__wsum\">__wsum</a><span class=\"ts\"/>       <a class=\"id\" href=\"#skb_checksum\">skb_checksum</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum\">csum</a>);", 
"extern int<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_copy_bits\">skb_copy_bits</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void *<a class=\"id\" href=\"#to\">to</a>, int <a class=\"id\" href=\"#len\">len</a>);", 
"extern int<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_store_bits\">skb_store_bits</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const void *<a class=\"id\" href=\"#from\">from</a>, int <a class=\"id\" href=\"#len\">len</a>);", 
"extern <a class=\"id\" href=\"#__wsum\">__wsum</a><span class=\"ts\"/>       <a class=\"id\" href=\"#skb_copy_and_csum_bits\">skb_copy_and_csum_bits</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#to\">to</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum\">csum</a>);", 
"extern int             <a class=\"id\" href=\"#skb_splice_bits\">skb_splice_bits</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>);", 
"extern void<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_copy_and_csum_dev\">skb_copy_and_csum_dev</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#to\">to</a>);", 
"extern void<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_split\">skb_split</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb1\">skb1</a>, const <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#len\">len</a>);", 
"extern int<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_shift\">skb_shift</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#tgt\">tgt</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#shiftlen\">shiftlen</a>);", 
"", 
];
xr_frag_insert('l/a7/8fdb66c0f129ab099f791792d45cc8f72da644.xr', __xr_tmp);
