var __xr_tmp = [
"<span class=\"comment\">/* Support for MMIO probes.</span>", 
"<span class=\"comment\"> * Benfit many code from kprobes</span>", 
"<span class=\"comment\"> * (C) 2002 Louis Zhuang &lt;louis.zhuang@intel.com&gt;.</span>", 
"<span class=\"comment\"> *     2007 Alexander Eichner</span>", 
"<span class=\"comment\"> *     2008 Pekka Paalanen &lt;pq@iki.fi&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>) <a class=\"id\" href=\"#KBUILD_MODNAME\">KBUILD_MODNAME</a> \": \" <a class=\"id\" href=\"#fmt\">fmt</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rculist\">rculist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#preempt\">preempt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdebug\">kdebug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#debugreg\">debugreg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmiotrace\">mmiotrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KMMIO_PAGE_HASH_BITS\">KMMIO_PAGE_HASH_BITS</a> 4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KMMIO_PAGE_TABLE_SIZE\">KMMIO_PAGE_TABLE_SIZE</a> (1 << <a class=\"id\" href=\"#KMMIO_PAGE_HASH_BITS\">KMMIO_PAGE_HASH_BITS</a>)", 
"", 
"struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> *<a class=\"id\" href=\"#release_next\">release_next</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#page\">page</a>; <span class=\"comment\">/* location of the fault page */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pteval_t\">pteval_t</a> <a class=\"id\" href=\"#old_presence\">old_presence</a>; <span class=\"comment\">/* page presence prior to arming */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#armed\">armed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Number of times this page has been registered as a part</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of a probe. If zero, page is disarmed and this may be freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Used only by writers (RCU) and post_kmmio_handler().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Protected by kmmio_lock, when linked into kmmio_page_table.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#scheduled_for_release\">scheduled_for_release</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#kmmio_delayed_release\">kmmio_delayed_release</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu\">rcu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> *<a class=\"id\" href=\"#release_list\">release_list</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#kmmio_context\">kmmio_context</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> *<a class=\"id\" href=\"#fpage\">fpage</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_probe\">kmmio_probe</a> *<a class=\"id\" href=\"#probe\">probe</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#saved_flags\">saved_flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#active\">active</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#kmmio_lock\">kmmio_lock</a>);", 
"", 
"<span class=\"comment\">/* Protected by kmmio_lock */</span>", 
"unsigned int <a class=\"id\" href=\"#kmmio_count\">kmmio_count</a>;", 
"", 
"<span class=\"comment\">/* Read-protected by RCU, write-protected by kmmio_lock. */</span>", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#kmmio_page_table\">kmmio_page_table</a>[<a class=\"id\" href=\"#KMMIO_PAGE_TABLE_SIZE\">KMMIO_PAGE_TABLE_SIZE</a>];", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#kmmio_probes\">kmmio_probes</a>);", 
"", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#kmmio_page_list\">kmmio_page_list</a>(unsigned long <a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#kmmio_page_table\">kmmio_page_table</a>[<a class=\"id\" href=\"#hash_long\">hash_long</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KMMIO_PAGE_HASH_BITS\">KMMIO_PAGE_HASH_BITS</a>)];", 
"}", 
"", 
"<span class=\"comment\">/* Accessed per-cpu */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#kmmio_context\">kmmio_context</a>, <a class=\"id\" href=\"#kmmio_ctx\">kmmio_ctx</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * this is basically a dynamic stabbing problem:</span>", 
"<span class=\"comment\"> * Could use the existing prio tree code or</span>", 
"<span class=\"comment\"> * Possible better implementations:</span>", 
"<span class=\"comment\"> * The Interval Skip List: A Data Structure for Finding All Intervals That</span>", 
"<span class=\"comment\"> * Overlap a Point (might be simple)</span>", 
"<span class=\"comment\"> * Space Efficient Dynamic Stabbing with Fast Queries - Mikkel Thorup</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/* Get the kmmio at this addr (if any). You must be holding RCU read lock. */</span>", 
"static struct <a class=\"id\" href=\"#kmmio_probe\">kmmio_probe</a> *<a class=\"id\" href=\"#get_kmmio_probe\">get_kmmio_probe</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_probe\">kmmio_probe</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#kmmio_probes\">kmmio_probes</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a> && <a class=\"id\" href=\"#addr\">addr</a> &lt; (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* You must be holding RCU read lock. */</span>", 
"static struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> *<a class=\"id\" href=\"#get_kmmio_fault_page\">get_kmmio_fault_page</a>(unsigned long <a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> *<a class=\"id\" href=\"#f\">f</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#kmmio_page_list\">kmmio_page_list</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#f\">f</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clear_pmd_presence\">clear_pmd_presence</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#clear\">clear</a>, <a class=\"id\" href=\"#pmdval_t\">pmdval_t</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmdval_t\">pmdval_t</a> <a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#pmd_val\">pmd_val</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clear\">clear</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#v\">v</a> &amp; <a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> &= ~<a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>;", 
"<span class=\"ts\"/>} else<span class=\"ts\"/><span class=\"comment\">/* presume this has been called with clear==true previously */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> |= *<a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pmd\">set_pmd</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#__pmd\">__pmd</a>(<a class=\"id\" href=\"#v\">v</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clear_pte_presence\">clear_pte_presence</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#clear\">clear</a>, <a class=\"id\" href=\"#pteval_t\">pteval_t</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pteval_t\">pteval_t</a> <a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#pte_val\">pte_val</a>(*<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clear\">clear</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#v\">v</a> &amp; <a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> &= ~<a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>;", 
"<span class=\"ts\"/>} else<span class=\"ts\"/><span class=\"comment\">/* presume this has been called with clear==true previously */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> |= *<a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_atomic\">set_pte_atomic</a>(<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#__pte\">__pte</a>(<a class=\"id\" href=\"#v\">v</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#clear_page_presence\">clear_page_presence</a>(struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> *<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#clear\">clear</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#lookup_address\">lookup_address</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#level\">level</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"no pte for page 0x%08lx\\n\", <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#level\">level</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PG_LEVEL_2M\">PG_LEVEL_2M</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_pmd_presence\">clear_pmd_presence</a>((<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *)<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#clear\">clear</a>, &amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#old_presence\">old_presence</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PG_LEVEL_4K\">PG_LEVEL_4K</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_pte_presence\">clear_pte_presence</a>(<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#clear\">clear</a>, &amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#old_presence\">old_presence</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"unexpected page level 0x%x.\\n\", <a class=\"id\" href=\"#level\">level</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__flush_tlb_one\">__flush_tlb_one</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Mark the given page as not present. Access to it will trigger a fault.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Struct kmmio_fault_page is protected by RCU and kmmio_lock, but the</span>", 
"<span class=\"comment\"> * protection is ignored here. RCU read lock is assumed held, so the struct</span>", 
"<span class=\"comment\"> * will not disappear unexpectedly. Furthermore, the caller must guarantee,</span>", 
"<span class=\"comment\"> * that double arming the same virtual address (page) cannot occur.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Double disarming on the other hand is allowed, and may occur when a fault</span>", 
"<span class=\"comment\"> * and mmiotrace shutdown happen simultaneously.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#arm_kmmio_fault_page\">arm_kmmio_fault_page</a>(struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> *<a class=\"id\" href=\"#f\">f</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#armed\">armed</a>, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(\"kmmio page already armed.\\n\"));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#armed\">armed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"double-arm: page 0x%08lx, ref %d, old %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#count\">count</a>, !!<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#old_presence\">old_presence</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#clear_page_presence\">clear_page_presence</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(<a class=\"id\" href=\"#ret\">ret</a> &lt; 0, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(\"arming 0x%08lx failed.\\n\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#armed\">armed</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/** Restore the given page to saved presence state. */</span>", 
"static void <a class=\"id\" href=\"#disarm_kmmio_fault_page\">disarm_kmmio_fault_page</a>(struct <a class=\"id\" href=\"#kmmio_fault_page\">kmmio_fault_page</a> *<a class=\"id\" href=\"#f\">f</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#clear_page_presence\">clear_page_presence</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(<a class=\"id\" href=\"#ret\">ret</a> &lt; 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"kmmio disarming 0x%08lx failed.\\n\", <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#armed\">armed</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is being called from do_page_fault().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We may be in an interrupt or a critical section. Also prefecthing may</span>", 
"<span class=\"comment\"> * trigger a page fault. We may be in the middle of process switch.</span>", 
"<span class=\"comment\"> * We cannot take any locks, because we could be executing especially</span>", 
"<span class=\"comment\"> * within a kmmio critical section.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Local interrupts are disabled, so preemption cannot happen.</span>", 
"<span class=\"comment\"> * Do not enable interrupts, do not sleep, and watch out for other CPUs.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Interrupts are disabled on entry as trap3 is an interrupt gate</span>", 
"<span class=\"comment\"> * and they remain disabled throughout this function.</span>", 
"<span class=\"comment\"> */</span>", 
];
xr_frag_insert('l/a7/f7556ad054af05bc3ff6ddbdb99a0758f9afdf.xr', __xr_tmp);
