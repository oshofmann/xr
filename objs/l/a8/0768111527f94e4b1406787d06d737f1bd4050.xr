var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: evmisc - Miscellaneous event manager support functions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acevents.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acinterp.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_EVENTS\">ACPI_EVENTS</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"evmisc\")", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"static void <a class=\"id\" href=\"#ACPI_SYSTEM_XFACE\">ACPI_SYSTEM_XFACE</a> <a class=\"id\" href=\"#acpi_ev_notify_dispatch\">acpi_ev_notify_dispatch</a>(void *<a class=\"id\" href=\"#context\">context</a>);", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_ev_global_lock_handler\">acpi_ev_global_lock_handler</a>(void *<a class=\"id\" href=\"#context\">context</a>);", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ev_remove_global_lock_handler\">acpi_ev_remove_global_lock_handler</a>(void);", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_is_notify_object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Node            - Node to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      TRUE if notifies allowed on this object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Check type of node for a object that supports notifies.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *              TBD: This could be replaced by a flag bit in the node.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_ev_is_notify_object\">acpi_ev_is_notify_object</a>(struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_DEVICE\">ACPI_TYPE_DEVICE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_PROCESSOR\">ACPI_TYPE_PROCESSOR</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_THERMAL\">ACPI_TYPE_THERMAL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * These are the ONLY objects that can receive ACPI notifications</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#TRUE\">TRUE</a>);", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#FALSE\">FALSE</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_queue_notify_request</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Node            - NS node for the notified object</span>", 
"<span class=\"comment\"> *              notify_value    - Value from the Notify() request</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Dispatch a device notification event to a previously</span>", 
"<span class=\"comment\"> *              installed handler.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ev_queue_notify_request\">acpi_ev_queue_notify_request</a>(struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> * <a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#notify_value\">notify_value</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#handler_obj\">handler_obj</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_generic_state\">acpi_generic_state</a> *<a class=\"id\" href=\"#notify_info\">notify_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_NAME\">ACPI_FUNCTION_NAME</a>(<a class=\"id\" href=\"#ev_queue_notify_request\">ev_queue_notify_request</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For value 3 (Ejection Request), some device method may need to be run.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For value 2 (Device Wake) if _PRW exists, the _PS0 method may need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   to be run.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For value 0x80 (Status Change) on the power button or sleep button,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   initiate soft-off or sleep operation?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Dispatching Notify on [%4.4s] Node %p Value 0x%2.2X (%s)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>(<a class=\"id\" href=\"#node\">node</a>), <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#notify_value\">notify_value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_notify_name\">acpi_ut_get_notify_name</a>(<a class=\"id\" href=\"#notify_value\">notify_value</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the notify object attached to the NS Node */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a> = <a class=\"id\" href=\"#acpi_ns_get_attached_object\">acpi_ns_get_attached_object</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have the notify object, Get the right handler */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Notify allowed only on these types */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_DEVICE\">ACPI_TYPE_DEVICE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_THERMAL\">ACPI_TYPE_THERMAL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_TYPE_PROCESSOR\">ACPI_TYPE_PROCESSOR</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_value\">notify_value</a> <= <a class=\"id\" href=\"#ACPI_MAX_SYS_NOTIFY\">ACPI_MAX_SYS_NOTIFY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handler_obj\">handler_obj</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#common_notify\">common_notify</a>.<a class=\"id\" href=\"#system_notify\">system_notify</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handler_obj\">handler_obj</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#common_notify\">common_notify</a>.<a class=\"id\" href=\"#device_notify\">device_notify</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* All other types are not supported */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_TYPE\">AE_TYPE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there is any handler to run, schedule the dispatcher.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) Global system notify handler</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) Global device notify handler</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3) Per-device notify handler</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#acpi_gbl_system_notify\">acpi_gbl_system_notify</a>.<a class=\"id\" href=\"#handler\">handler</a> &&", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#notify_value\">notify_value</a> <= <a class=\"id\" href=\"#ACPI_MAX_SYS_NOTIFY\">ACPI_MAX_SYS_NOTIFY</a>)) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#acpi_gbl_device_notify\">acpi_gbl_device_notify</a>.<a class=\"id\" href=\"#handler\">handler</a> &&", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#notify_value\">notify_value</a> &gt; <a class=\"id\" href=\"#ACPI_MAX_SYS_NOTIFY\">ACPI_MAX_SYS_NOTIFY</a>)) || <a class=\"id\" href=\"#handler_obj\">handler_obj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notify_info\">notify_info</a> = <a class=\"id\" href=\"#acpi_ut_create_generic_state\">acpi_ut_create_generic_state</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#notify_info\">notify_info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#handler_obj\">handler_obj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Executing system notify handler for Notify (%4.4s, %X) \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"node %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>(<a class=\"id\" href=\"#node\">node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#notify_value\">notify_value</a>, <a class=\"id\" href=\"#node\">node</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notify_info\">notify_info</a>-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#descriptor_type\">descriptor_type</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_DESC_TYPE_STATE_NOTIFY\">ACPI_DESC_TYPE_STATE_NOTIFY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notify_info\">notify_info</a>-><a class=\"id\" href=\"#notify\">notify</a>.<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notify_info\">notify_info</a>-><a class=\"id\" href=\"#notify\">notify</a>.<a class=\"id\" href=\"#value\">value</a> = (<a class=\"id\" href=\"#u16\">u16</a>) <a class=\"id\" href=\"#notify_value\">notify_value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notify_info\">notify_info</a>-><a class=\"id\" href=\"#notify\">notify</a>.<a class=\"id\" href=\"#handler_obj\">handler_obj</a> = <a class=\"id\" href=\"#handler_obj\">handler_obj</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_os_execute\">acpi_os_execute</a>(<a class=\"id\" href=\"#OSL_NOTIFY_HANDLER\">OSL_NOTIFY_HANDLER</a>, <a class=\"id\" href=\"#acpi_ev_notify_dispatch\">acpi_ev_notify_dispatch</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#notify_info\">notify_info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_delete_generic_state\">acpi_ut_delete_generic_state</a>(<a class=\"id\" href=\"#notify_info\">notify_info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* There is no notify handler (per-device or system) for this device */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"No notify handler for Notify (%4.4s, %X) node %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>(<a class=\"id\" href=\"#node\">node</a>), <a class=\"id\" href=\"#notify_value\">notify_value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#node\">node</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_notify_dispatch</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Context         - To be passed to the notify handler</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Dispatch a device notification event to a previously</span>", 
"<span class=\"comment\"> *              installed handler.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static void <a class=\"id\" href=\"#ACPI_SYSTEM_XFACE\">ACPI_SYSTEM_XFACE</a> <a class=\"id\" href=\"#acpi_ev_notify_dispatch\">acpi_ev_notify_dispatch</a>(void *<a class=\"id\" href=\"#context\">context</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_generic_state\">acpi_generic_state</a> *<a class=\"id\" href=\"#notify_info\">notify_info</a> =", 
"<span class=\"ts\"/>    (union <a class=\"id\" href=\"#acpi_generic_state\">acpi_generic_state</a> *)<a class=\"id\" href=\"#context\">context</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_notify_handler\">acpi_notify_handler</a> <a class=\"id\" href=\"#global_handler\">global_handler</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#global_context\">global_context</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#handler_obj\">handler_obj</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We will invoke a global notify handler if installed. This is done</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * _before_ we invoke the per-device handler attached to the device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#notify_info\">notify_info</a>-><a class=\"id\" href=\"#notify\">notify</a>.<a class=\"id\" href=\"#value\">value</a> <= <a class=\"id\" href=\"#ACPI_MAX_SYS_NOTIFY\">ACPI_MAX_SYS_NOTIFY</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Global system notification handler */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_system_notify\">acpi_gbl_system_notify</a>.<a class=\"id\" href=\"#handler\">handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_handler\">global_handler</a> = <a class=\"id\" href=\"#acpi_gbl_system_notify\">acpi_gbl_system_notify</a>.<a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_context\">global_context</a> = <a class=\"id\" href=\"#acpi_gbl_system_notify\">acpi_gbl_system_notify</a>.<a class=\"id\" href=\"#context\">context</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Global driver notification handler */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_device_notify\">acpi_gbl_device_notify</a>.<a class=\"id\" href=\"#handler\">handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_handler\">global_handler</a> = <a class=\"id\" href=\"#acpi_gbl_device_notify\">acpi_gbl_device_notify</a>.<a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_context\">global_context</a> = <a class=\"id\" href=\"#acpi_gbl_device_notify\">acpi_gbl_device_notify</a>.<a class=\"id\" href=\"#context\">context</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Invoke the system handler first, if present */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#global_handler\">global_handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_handler\">global_handler</a>(<a class=\"id\" href=\"#notify_info\">notify_info</a>-><a class=\"id\" href=\"#notify\">notify</a>.<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#notify_info\">notify_info</a>-><a class=\"id\" href=\"#notify\">notify</a>.<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#global_context\">global_context</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now invoke the per-device handler, if present */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handler_obj\">handler_obj</a> = <a class=\"id\" href=\"#notify_info\">notify_info</a>-><a class=\"id\" href=\"#notify\">notify</a>.<a class=\"id\" href=\"#handler_obj\">handler_obj</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handler_obj\">handler_obj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_object_notify_handler\">acpi_object_notify_handler</a> *<a class=\"id\" href=\"#notifier\">notifier</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notifier\">notifier</a> = &amp;<a class=\"id\" href=\"#handler_obj\">handler_obj</a>-><a class=\"id\" href=\"#notify\">notify</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#notifier\">notifier</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notifier\">notifier</a>-><a class=\"id\" href=\"#handler\">handler</a>(<a class=\"id\" href=\"#notify_info\">notify_info</a>-><a class=\"id\" href=\"#notify\">notify</a>.<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#notify_info\">notify_info</a>-><a class=\"id\" href=\"#notify\">notify</a>.<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#notifier\">notifier</a>-><a class=\"id\" href=\"#context\">context</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#notifier\">notifier</a> = <a class=\"id\" href=\"#notifier\">notifier</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All done with the info object */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_delete_generic_state\">acpi_ut_delete_generic_state</a>(<a class=\"id\" href=\"#notify_info\">notify_info</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_global_lock_handler</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Context         - From thread interface, not used</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      ACPI_INTERRUPT_HANDLED</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Invoked directly from the SCI handler when a global lock</span>", 
"<span class=\"comment\"> *              release interrupt occurs. Attempt to acquire the global lock,</span>", 
"<span class=\"comment\"> *              if successful, signal the thread waiting for the lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: Assumes that the semaphore can be signaled from interrupt level. If</span>", 
"<span class=\"comment\"> * this is not possible for some reason, a separate thread will have to be</span>", 
"<span class=\"comment\"> * scheduled to do this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_ev_global_lock_handler\">acpi_ev_global_lock_handler</a>(void *<a class=\"id\" href=\"#context\">context</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acquired\">acquired</a> = <a class=\"id\" href=\"#FALSE\">FALSE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Attempt to get the lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we don't get it now, it will be marked pending and we will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * take another interrupt when it becomes free.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ACQUIRE_GLOBAL_LOCK\">ACPI_ACQUIRE_GLOBAL_LOCK</a>(<a class=\"id\" href=\"#acpi_gbl_FACS\">acpi_gbl_FACS</a>, <a class=\"id\" href=\"#acquired\">acquired</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acquired\">acquired</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Got the lock, now wake all threads waiting for it */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_global_lock_acquired\">acpi_gbl_global_lock_acquired</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Send a unit to the semaphore */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#acpi_os_signal_semaphore\">acpi_os_signal_semaphore</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#acpi_gbl_global_lock_semaphore\">acpi_gbl_global_lock_semaphore</a>, 1))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Could not signal Global Lock semaphore\"));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ACPI_INTERRUPT_HANDLED\">ACPI_INTERRUPT_HANDLED</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_init_global_lock_handler</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Install a handler for the global lock release event</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ev_init_global_lock_handler\">acpi_ev_init_global_lock_handler</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ev_init_global_lock_handler\">ev_init_global_lock_handler</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Attempt installation of the global lock handler */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_install_fixed_event_handler\">acpi_install_fixed_event_handler</a>(<a class=\"id\" href=\"#ACPI_EVENT_GLOBAL\">ACPI_EVENT_GLOBAL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_ev_global_lock_handler\">acpi_ev_global_lock_handler</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the global lock does not exist on this platform, the attempt to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enable GBL_STATUS will fail (the GBL_ENABLE bit will not stick).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Map to AE_OK, but mark global lock as not present. Any attempt to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * actually use the global lock will be flagged with an error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#AE_NO_HARDWARE_RESPONSE\">AE_NO_HARDWARE_RESPONSE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"No response from Global Lock hardware, disabling lock\"));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_global_lock_present\">acpi_gbl_global_lock_present</a> = <a class=\"id\" href=\"#FALSE\">FALSE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_global_lock_present\">acpi_gbl_global_lock_present</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_remove_global_lock_handler</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Remove the handler for the Global Lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ev_remove_global_lock_handler\">acpi_ev_remove_global_lock_handler</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ev_remove_global_lock_handler\">ev_remove_global_lock_handler</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_global_lock_present\">acpi_gbl_global_lock_present</a> = <a class=\"id\" href=\"#FALSE\">FALSE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_remove_fixed_event_handler\">acpi_remove_fixed_event_handler</a>(<a class=\"id\" href=\"#ACPI_EVENT_GLOBAL\">ACPI_EVENT_GLOBAL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#acpi_ev_global_lock_handler\">acpi_ev_global_lock_handler</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_acquire_global_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Timeout         - Max time to wait for the lock, in millisec.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Attempt to gain ownership of the Global Lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * MUTEX:       Interpreter must be locked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: The original implementation allowed multiple threads to \"acquire\" the</span>", 
"<span class=\"comment\"> * Global Lock, and the OS would hold the lock until the last thread had</span>", 
"<span class=\"comment\"> * released it. However, this could potentially starve the BIOS out of the</span>", 
"<span class=\"comment\"> * lock, especially in the case where there is a tight handshake between the</span>", 
"<span class=\"comment\"> * Embedded Controller driver and the BIOS. Therefore, this implementation</span>", 
"<span class=\"comment\"> * allows only one thread to acquire the HW Global Lock at a time, and makes</span>", 
"<span class=\"comment\"> * the global lock appear as a standard mutex on the OS side.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"static <a class=\"id\" href=\"#acpi_thread_id\">acpi_thread_id</a> <a class=\"id\" href=\"#acpi_ev_global_lock_thread_id\">acpi_ev_global_lock_thread_id</a>;", 
"static int <a class=\"id\" href=\"#acpi_ev_global_lock_acquired\">acpi_ev_global_lock_acquired</a>;", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ev_acquire_global_lock\">acpi_ev_acquire_global_lock</a>(<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acquired\">acquired</a> = <a class=\"id\" href=\"#FALSE\">FALSE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ev_acquire_global_lock\">ev_acquire_global_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only one thread can acquire the GL at a time, the global_lock_mutex</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enforces this. This interface releases the interpreter if we must wait.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ex_system_wait_mutex\">acpi_ex_system_wait_mutex</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_global_lock_mutex\">acpi_gbl_global_lock_mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#os_mutex\">os_mutex</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#AE_TIME\">AE_TIME</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_ev_global_lock_thread_id\">acpi_ev_global_lock_thread_id</a> == <a class=\"id\" href=\"#acpi_os_get_thread_id\">acpi_os_get_thread_id</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ev_global_lock_acquired\">acpi_ev_global_lock_acquired</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ex_system_wait_mutex\">acpi_ex_system_wait_mutex</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_global_lock_mutex\">acpi_gbl_global_lock_mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#os_mutex\">os_mutex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ev_global_lock_thread_id\">acpi_ev_global_lock_thread_id</a> = <a class=\"id\" href=\"#acpi_os_get_thread_id\">acpi_os_get_thread_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ev_global_lock_acquired\">acpi_ev_global_lock_acquired</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Update the global lock handle and check for wraparound. The handle is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only used for the external global lock interfaces, but it is updated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here to properly handle the case where a single thread may acquire the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock via both the AML and the acpi_acquire_global_lock interfaces. The</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * handle is therefore updated on the first acquire from a given thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * regardless of where the acquisition request originated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_global_lock_handle\">acpi_gbl_global_lock_handle</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_global_lock_handle\">acpi_gbl_global_lock_handle</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_global_lock_handle\">acpi_gbl_global_lock_handle</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure that a global lock actually exists. If not, just treat the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock as a standard mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_gbl_global_lock_present\">acpi_gbl_global_lock_present</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_global_lock_acquired\">acpi_gbl_global_lock_acquired</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Attempt to acquire the actual hardware lock */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ACQUIRE_GLOBAL_LOCK\">ACPI_ACQUIRE_GLOBAL_LOCK</a>(<a class=\"id\" href=\"#acpi_gbl_FACS\">acpi_gbl_FACS</a>, <a class=\"id\" href=\"#acquired\">acquired</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acquired\">acquired</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We got the lock */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Acquired hardware Global Lock\\n\"));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_global_lock_acquired\">acpi_gbl_global_lock_acquired</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Did not get the lock. The pending bit was set above, and we must now</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wait until we get the global lock released interrupt.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>, \"Waiting for hardware Global Lock\\n\"));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait for handshake with the global lock interrupt handler.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This interface releases the interpreter if we must wait.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ex_system_wait_semaphore\">acpi_ex_system_wait_semaphore</a>(<a class=\"id\" href=\"#acpi_gbl_global_lock_semaphore\">acpi_gbl_global_lock_semaphore</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ACPI_WAIT_FOREVER\">ACPI_WAIT_FOREVER</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_release_global_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Releases ownership of the Global Lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ev_release_global_lock\">acpi_ev_release_global_lock</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pending\">pending</a> = <a class=\"id\" href=\"#FALSE\">FALSE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ev_release_global_lock\">ev_release_global_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Lock must be already acquired */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_gbl_global_lock_acquired\">acpi_gbl_global_lock_acquired</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"Cannot release the ACPI Global Lock, it has not been acquired\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NOT_ACQUIRED\">AE_NOT_ACQUIRED</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ev_global_lock_acquired\">acpi_ev_global_lock_acquired</a>--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_ev_global_lock_acquired\">acpi_ev_global_lock_acquired</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_global_lock_present\">acpi_gbl_global_lock_present</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Allow any thread to release the lock */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_RELEASE_GLOBAL_LOCK\">ACPI_RELEASE_GLOBAL_LOCK</a>(<a class=\"id\" href=\"#acpi_gbl_FACS\">acpi_gbl_FACS</a>, <a class=\"id\" href=\"#pending\">pending</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the pending bit was set, we must write GBL_RLS to the control</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * register</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pending\">pending</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_write_bit_register\">acpi_write_bit_register</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#ACPI_BITREG_GLOBAL_LOCK_RELEASE\">ACPI_BITREG_GLOBAL_LOCK_RELEASE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ACPI_ENABLE_EVENT\">ACPI_ENABLE_EVENT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Released hardware Global Lock\\n\"));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_global_lock_acquired\">acpi_gbl_global_lock_acquired</a> = <a class=\"id\" href=\"#FALSE\">FALSE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Release the local GL mutex */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ev_global_lock_thread_id\">acpi_ev_global_lock_thread_id</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ev_global_lock_acquired\">acpi_ev_global_lock_acquired</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_release_mutex\">acpi_os_release_mutex</a>(<a class=\"id\" href=\"#acpi_gbl_global_lock_mutex\">acpi_gbl_global_lock_mutex</a>-><a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#os_mutex\">os_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_terminate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  none</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      none</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Disable events and free memory allocated for table storage.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ev_terminate\">acpi_ev_terminate</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ev_terminate\">ev_terminate</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_events_initialized\">acpi_gbl_events_initialized</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Disable all event-related functionality. In all cases, on error,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * print a message but obviously we don't abort.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Disable all fixed events */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_NUM_FIXED_EVENTS\">ACPI_NUM_FIXED_EVENTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_disable_event\">acpi_disable_event</a>(<a class=\"id\" href=\"#i\">i</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Could not disable fixed event %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Disable all GPEs in all GPE blocks */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_walk_gpe_list\">acpi_ev_walk_gpe_list</a>(<a class=\"id\" href=\"#acpi_hw_disable_gpe_block\">acpi_hw_disable_gpe_block</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Remove SCI handler */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_remove_sci_handler\">acpi_ev_remove_sci_handler</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Could not remove SCI handler\"));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_remove_global_lock_handler\">acpi_ev_remove_global_lock_handler</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Could not remove Global Lock handler\"));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Deallocate all handler objects installed within GPE info structs */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_walk_gpe_list\">acpi_ev_walk_gpe_list</a>(<a class=\"id\" href=\"#acpi_ev_delete_gpe_handlers\">acpi_ev_delete_gpe_handlers</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return to original mode if necessary */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_original_mode\">acpi_gbl_original_mode</a> == <a class=\"id\" href=\"#ACPI_SYS_MODE_LEGACY\">ACPI_SYS_MODE_LEGACY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_disable\">acpi_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"AcpiDisable failed\"));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
];
xr_frag_insert('l/a8/0768111527f94e4b1406787d06d737f1bd4050.xr', __xr_tmp);
