var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>fs/proc/kcore.c kernel ELF core dumper</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Modelled on fs/exec.c:aout_core_dump()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Jeremy Fitzhardinge &lt;jeremy@sw.oz.au&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ELF version written by David Howells &lt;David.Howells@nexor.co.uk&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Modified and incorporated into 2.3.x by Tigran Aivazian &lt;tigran@veritas.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Support to dump vmalloc'd areas (ELF only), Tigran Aivazian &lt;tigran@veritas.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Safe accesses to vmalloc/direct-mapped discontiguous areas, Kanoj Sarcar &lt;kanoj@sgi.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#user\">user</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#elf\">elf</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#elfcore\">elfcore</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioport\">ioport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memory\">memory</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#sections\">sections</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CORE_STR\">CORE_STR</a> \"CORE\"", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ELF_CORE_EFLAGS\">ELF_CORE_EFLAGS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ELF_CORE_EFLAGS\">ELF_CORE_EFLAGS</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static struct <a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#proc_root_kcore\">proc_root_kcore</a>;", 
"", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#kc_vaddr_to_offset\">kc_vaddr_to_offset</a>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kc_vaddr_to_offset\">kc_vaddr_to_offset</a>(<a class=\"id\" href=\"#v\">v</a>) ((<a class=\"id\" href=\"#v\">v</a>) - <a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a><span class=\"ts\"/><a class=\"id\" href=\"#kc_offset_to_vaddr\">kc_offset_to_vaddr</a>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#kc_offset_to_vaddr\">kc_offset_to_vaddr</a>(<a class=\"id\" href=\"#o\">o</a>) ((<a class=\"id\" href=\"#o\">o</a>) + <a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* An ELF note in memory */</span>", 
"struct <a class=\"id\" href=\"#memelfnote\">memelfnote</a>", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#datasz\">datasz</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#kclist_head\">kclist_head</a>);", 
"static <a class=\"id\" href=\"#DEFINE_RWLOCK\">DEFINE_RWLOCK</a>(<a class=\"id\" href=\"#kclist_lock\">kclist_lock</a>);", 
"static int <a class=\"id\" href=\"#kcore_need_update\">kcore_need_update</a> = 1;", 
"", 
"void", 
"<a class=\"id\" href=\"#kclist_add\">kclist_add</a>(struct <a class=\"id\" href=\"#kcore_list\">kcore_list</a> *<a class=\"id\" href=\"#new\">new</a>, void *<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#kclist_lock\">kclist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#kclist_head\">kclist_head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#kclist_lock\">kclist_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#get_kcore_size\">get_kcore_size</a>(int *<a class=\"id\" href=\"#nphdr\">nphdr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#elf_buflen\">elf_buflen</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#try\">try</a>, <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kcore_list\">kcore_list</a> *<a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#nphdr\">nphdr</a> = 1; <span class=\"comment\">/* PT_NOTE */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#kclist_head\">kclist_head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try\">try</a> = <a class=\"id\" href=\"#kc_vaddr_to_offset\">kc_vaddr_to_offset</a>((<a class=\"id\" href=\"#size_t\">size_t</a>)<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#try\">try</a> &gt; <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#try\">try</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nphdr\">nphdr</a> = *<a class=\"id\" href=\"#nphdr\">nphdr</a> + 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#elf_buflen\">elf_buflen</a> =<span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a>) + ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#nphdr\">nphdr</a> + 2)*sizeof(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a>) + ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>3 * ((sizeof(struct <a class=\"id\" href=\"#elf_note\">elf_note</a>)) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#roundup\">roundup</a>(sizeof(<a class=\"id\" href=\"#CORE_STR\">CORE_STR</a>), 4)) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#roundup\">roundup</a>(sizeof(struct <a class=\"id\" href=\"#elf_prstatus\">elf_prstatus</a>), 4) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#roundup\">roundup</a>(sizeof(struct <a class=\"id\" href=\"#elf_prpsinfo\">elf_prpsinfo</a>), 4) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#roundup\">roundup</a>(sizeof(struct <a class=\"id\" href=\"#task_struct\">task_struct</a>), 4);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#elf_buflen\">elf_buflen</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(*<a class=\"id\" href=\"#elf_buflen\">elf_buflen</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a> + *<a class=\"id\" href=\"#elf_buflen\">elf_buflen</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_kclist_ents\">free_kclist_ents</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kcore_list\">kcore_list</a> *<a class=\"id\" href=\"#tmp\">tmp</a>, *<a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Replace all KCORE_RAM/KCORE_VMEMMAP information with passed list.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__kcore_update_ram\">__kcore_update_ram</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nphdr\">nphdr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kcore_list\">kcore_list</a> *<a class=\"id\" href=\"#tmp\">tmp</a>, *<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#garbage\">garbage</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#kclist_lock\">kclist_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kcore_need_update\">kcore_need_update</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#kclist_head\">kclist_head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#KCORE_RAM\">KCORE_RAM</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>|| <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#KCORE_VMEMMAP\">KCORE_VMEMMAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#garbage\">garbage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_splice_tail\">list_splice_tail</a>(<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#kclist_head\">kclist_head</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_splice\">list_splice</a>(<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#garbage\">garbage</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kcore_need_update\">kcore_need_update</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_root_kcore\">proc_root_kcore</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#get_kcore_size\">get_kcore_size</a>(&amp;<a class=\"id\" href=\"#nphdr\">nphdr</a>, &amp;<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#kclist_lock\">kclist_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_kclist_ents\">free_kclist_ents</a>(&amp;<a class=\"id\" href=\"#garbage\">garbage</a>);", 
"}", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If no highmem, we can assume [0...max_low_pfn) continuous range of memory</span>", 
"<span class=\"comment\"> * because memory hole is not as big as !HIGHMEM case.</span>", 
"<span class=\"comment\"> * (HIGHMEM is special because part of memory is _invisible_ from the kernel.)</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#kcore_update_ram\">kcore_update_ram</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kcore_list\">kcore_list</a> *<a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#ent\">ent</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ent\">ent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#__va\">__va</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#max_low_pfn\">max_low_pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#KCORE_RAM\">KCORE_RAM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kcore_update_ram\">__kcore_update_ram</a>(&amp;<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#else <span class=\"comment\">/* !CONFIG_HIGHMEM */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARSEMEM_VMEMMAP\">CONFIG_SPARSEMEM_VMEMMAP</a>", 
"<span class=\"comment\">/* calculate vmemmap's address from given system ram pfn and register it */</span>", 
"int <a class=\"id\" href=\"#get_sparsemem_vmemmap_info\">get_sparsemem_vmemmap_info</a>(struct <a class=\"id\" href=\"#kcore_list\">kcore_list</a> *<a class=\"id\" href=\"#ent\">ent</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#addr\">addr</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#size\">size</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kcore_list\">kcore_list</a> *<a class=\"id\" href=\"#vmm\">vmm</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = ((unsigned long)<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)) &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = ((unsigned long)<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a> + <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)) - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* overlap check (because we have to align page */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KCORE_VMEMMAP\">KCORE_VMEMMAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmm\">vmm</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#vmm\">vmm</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vmm\">vmm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmm\">vmm</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmm\">vmm</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmm\">vmm</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#KCORE_VMEMMAP\">KCORE_VMEMMAP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#vmm\">vmm</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"", 
"}", 
"#else", 
"int <a class=\"id\" href=\"#get_sparsemem_vmemmap_info\">get_sparsemem_vmemmap_info</a>(struct <a class=\"id\" href=\"#kcore_list\">kcore_list</a> *<a class=\"id\" href=\"#ent\">ent</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int", 
"<a class=\"id\" href=\"#kclist_add_private\">kclist_add_private</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a> = (struct <a class=\"id\" href=\"#list_head\">list_head</a> *)<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kcore_list\">kcore_list</a> *<a class=\"id\" href=\"#ent\">ent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#ent\">ent</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ent\">ent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#__va\">__va</a>((<a class=\"id\" href=\"#pfn\">pfn</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Sanity check: Can happen in 32bit arch...maybe */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#addr\">addr</a> &lt; (unsigned long) <a class=\"id\" href=\"#__va\">__va</a>(0))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_out\">free_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cut not-mapped area. ....from ppc-32 code. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a> - <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a> - <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cut when vmalloc() area is higher than direct-map area */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a> &gt; (unsigned long)<a class=\"id\" href=\"#__va\">__va</a>(0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#addr\">addr</a> &gt; <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_out\">free_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a> - <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a> - <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#KCORE_RAM\">KCORE_RAM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#get_sparsemem_vmemmap_info\">get_sparsemem_vmemmap_info</a>(<a class=\"id\" href=\"#ent\">ent</a>, <a class=\"id\" href=\"#head\">head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_out\">free_out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#free_out\">free_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ent\">ent</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kcore_update_ram\">kcore_update_ram</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Not inialized....update now */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* find out \"max pfn\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_pfn\">end_pfn</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_state\">for_each_node_state</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node_end\">node_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_end\">node_end</a>  = <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>)-><a class=\"id\" href=\"#node_start_pfn\">node_start_pfn</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nid\">nid</a>)-><a class=\"id\" href=\"#node_spanned_pages\">node_spanned_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end_pfn\">end_pfn</a> &lt; <a class=\"id\" href=\"#node_end\">node_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#node_end\">node_end</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* scan 0 to max_pfn */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#walk_system_ram_range\">walk_system_ram_range</a>(0, <a class=\"id\" href=\"#end_pfn\">end_pfn</a>, &amp;<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#kclist_add_private\">kclist_add_private</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_kclist_ents\">free_kclist_ents</a>(&amp;<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kcore_update_ram\">__kcore_update_ram</a>(&amp;<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HIGHMEM */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * determine size of ELF note</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#notesize\">notesize</a>(struct <a class=\"id\" href=\"#memelfnote\">memelfnote</a> *<a class=\"id\" href=\"#en\">en</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sz\">sz</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sz\">sz</a> = sizeof(struct <a class=\"id\" href=\"#elf_note\">elf_note</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sz\">sz</a> += <a class=\"id\" href=\"#roundup\">roundup</a>((<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#en\">en</a>-><a class=\"id\" href=\"#name\">name</a>) + 1), 4);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sz\">sz</a> += <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#en\">en</a>-><a class=\"id\" href=\"#datasz\">datasz</a>, 4);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sz\">sz</a>;", 
"} <span class=\"comment\">/* end notesize() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * store a note in the header buffer</span>", 
"<span class=\"comment\"> */</span>", 
"static char *<a class=\"id\" href=\"#storenote\">storenote</a>(struct <a class=\"id\" href=\"#memelfnote\">memelfnote</a> *<a class=\"id\" href=\"#men\">men</a>, char *<a class=\"id\" href=\"#bufp\">bufp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_note\">elf_note</a> <a class=\"id\" href=\"#en\">en</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DUMP_WRITE\">DUMP_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>,<a class=\"id\" href=\"#nr\">nr</a>) do { <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#bufp\">bufp</a>,<a class=\"id\" href=\"#addr\">addr</a>,<a class=\"id\" href=\"#nr\">nr</a>); <a class=\"id\" href=\"#bufp\">bufp</a> += <a class=\"id\" href=\"#nr\">nr</a>; } while(0)", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#en\">en</a>.<a class=\"id\" href=\"#n_namesz\">n_namesz</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#men\">men</a>-><a class=\"id\" href=\"#name\">name</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#en\">en</a>.<a class=\"id\" href=\"#n_descsz\">n_descsz</a> = <a class=\"id\" href=\"#men\">men</a>-><a class=\"id\" href=\"#datasz\">datasz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#en\">en</a>.<a class=\"id\" href=\"#n_type\">n_type</a> = <a class=\"id\" href=\"#men\">men</a>-><a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DUMP_WRITE\">DUMP_WRITE</a>(&amp;<a class=\"id\" href=\"#en\">en</a>, sizeof(<a class=\"id\" href=\"#en\">en</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DUMP_WRITE\">DUMP_WRITE</a>(<a class=\"id\" href=\"#men\">men</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#en\">en</a>.<a class=\"id\" href=\"#n_namesz\">n_namesz</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* XXX - cast from long long to long to avoid need for libgcc.a */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bufp\">bufp</a> = (char*) <a class=\"id\" href=\"#roundup\">roundup</a>((unsigned long)<a class=\"id\" href=\"#bufp\">bufp</a>,4);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DUMP_WRITE\">DUMP_WRITE</a>(<a class=\"id\" href=\"#men\">men</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#men\">men</a>-><a class=\"id\" href=\"#datasz\">datasz</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bufp\">bufp</a> = (char*) <a class=\"id\" href=\"#roundup\">roundup</a>((unsigned long)<a class=\"id\" href=\"#bufp\">bufp</a>,4);", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#DUMP_WRITE\">DUMP_WRITE</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bufp\">bufp</a>;", 
"} <span class=\"comment\">/* end storenote() */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * store an ELF coredump header in the supplied buffer</span>", 
"<span class=\"comment\"> * nphdr is the number of elf_phdr to insert</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#elf_kcore_store_hdr\">elf_kcore_store_hdr</a>(char *<a class=\"id\" href=\"#bufp\">bufp</a>, int <a class=\"id\" href=\"#nphdr\">nphdr</a>, int <a class=\"id\" href=\"#dataoff\">dataoff</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_prstatus\">elf_prstatus</a> <a class=\"id\" href=\"#prstatus\">prstatus</a>;<span class=\"ts\"/><span class=\"comment\">/* NT_PRSTATUS */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_prpsinfo\">elf_prpsinfo</a> <a class=\"id\" href=\"#prpsinfo\">prpsinfo</a>;<span class=\"ts\"/><span class=\"comment\">/* NT_PRPSINFO */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a> *<a class=\"id\" href=\"#nhdr\">nhdr</a>, *<a class=\"id\" href=\"#phdr\">phdr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a> *<a class=\"id\" href=\"#elf\">elf</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memelfnote\">memelfnote</a> <a class=\"id\" href=\"#notes\">notes</a>[3];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#off_t\">off_t</a> <a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kcore_list\">kcore_list</a> *<a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* setup ELF header */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a> = (struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a> *) <a class=\"id\" href=\"#bufp\">bufp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bufp\">bufp</a> += sizeof(struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += sizeof(struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_ident\">e_ident</a>, <a class=\"id\" href=\"#ELFMAG\">ELFMAG</a>, <a class=\"id\" href=\"#SELFMAG\">SELFMAG</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_ident\">e_ident</a>[<a class=\"id\" href=\"#EI_CLASS\">EI_CLASS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#ELF_CLASS\">ELF_CLASS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_ident\">e_ident</a>[<a class=\"id\" href=\"#EI_DATA\">EI_DATA</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#ELF_DATA\">ELF_DATA</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_ident\">e_ident</a>[<a class=\"id\" href=\"#EI_VERSION\">EI_VERSION</a>]= <a class=\"id\" href=\"#EV_CURRENT\">EV_CURRENT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_ident\">e_ident</a>[<a class=\"id\" href=\"#EI_OSABI\">EI_OSABI</a>] = <a class=\"id\" href=\"#ELF_OSABI\">ELF_OSABI</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_ident\">e_ident</a>+<a class=\"id\" href=\"#EI_PAD\">EI_PAD</a>, 0, <a class=\"id\" href=\"#EI_NIDENT\">EI_NIDENT</a>-<a class=\"id\" href=\"#EI_PAD\">EI_PAD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_type\">e_type</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ET_CORE\">ET_CORE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_machine\">e_machine</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ELF_ARCH\">ELF_ARCH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_version\">e_version</a><span class=\"ts\"/>= <a class=\"id\" href=\"#EV_CURRENT\">EV_CURRENT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_entry\">e_entry</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_phoff\">e_phoff</a><span class=\"ts\"/>= sizeof(struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_shoff\">e_shoff</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_flags\">e_flags</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ELF_CORE_EFLAGS\">ELF_CORE_EFLAGS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_ehsize\">e_ehsize</a><span class=\"ts\"/>= sizeof(struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_phentsize\">e_phentsize</a>= sizeof(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a><span class=\"ts\"/>= <a class=\"id\" href=\"#nphdr\">nphdr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_shentsize\">e_shentsize</a>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_shnum\">e_shnum</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_shstrndx\">e_shstrndx</a><span class=\"ts\"/>= 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* setup ELF PT_NOTE program header */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhdr\">nhdr</a> = (struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a> *) <a class=\"id\" href=\"#bufp\">bufp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bufp\">bufp</a> += sizeof(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += sizeof(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhdr\">nhdr</a>-><a class=\"id\" href=\"#p_type\">p_type</a><span class=\"ts\"/>= <a class=\"id\" href=\"#PT_NOTE\">PT_NOTE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhdr\">nhdr</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhdr\">nhdr</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhdr\">nhdr</a>-><a class=\"id\" href=\"#p_paddr\">p_paddr</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhdr\">nhdr</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhdr\">nhdr</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhdr\">nhdr</a>-><a class=\"id\" href=\"#p_flags\">p_flags</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhdr\">nhdr</a>-><a class=\"id\" href=\"#p_align\">p_align</a><span class=\"ts\"/>= 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* setup ELF PT_LOAD program header for every area */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#kclist_head\">kclist_head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a> = (struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a> *) <a class=\"id\" href=\"#bufp\">bufp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bufp\">bufp</a> += sizeof(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += sizeof(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_type\">p_type</a><span class=\"ts\"/>= <a class=\"id\" href=\"#PT_LOAD\">PT_LOAD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_flags\">p_flags</a><span class=\"ts\"/>= <a class=\"id\" href=\"#PF_R\">PF_R</a>|<a class=\"id\" href=\"#PF_W\">PF_W</a>|<a class=\"id\" href=\"#PF_X\">PF_X</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kc_vaddr_to_offset\">kc_vaddr_to_offset</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#addr\">addr</a>) + <a class=\"id\" href=\"#dataoff\">dataoff</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a><span class=\"ts\"/>= (<a class=\"id\" href=\"#size_t\">size_t</a>)<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_paddr\">p_paddr</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a><span class=\"ts\"/>= <a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a><span class=\"ts\"/>= <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_align\">p_align</a><span class=\"ts\"/>= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set up the notes in similar form to SVR4 core dumps made</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with info from their /proc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhdr\">nhdr</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a><span class=\"ts\"/>= <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set up the process status */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes\">notes</a>[0].<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#CORE_STR\">CORE_STR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes\">notes</a>[0].<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#NT_PRSTATUS\">NT_PRSTATUS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes\">notes</a>[0].<a class=\"id\" href=\"#datasz\">datasz</a> = sizeof(struct <a class=\"id\" href=\"#elf_prstatus\">elf_prstatus</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes\">notes</a>[0].<a class=\"id\" href=\"#data\">data</a> = &amp;<a class=\"id\" href=\"#prstatus\">prstatus</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#prstatus\">prstatus</a>, 0, sizeof(struct <a class=\"id\" href=\"#elf_prstatus\">elf_prstatus</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhdr\">nhdr</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a><span class=\"ts\"/>= <a class=\"id\" href=\"#notesize\">notesize</a>(&amp;<a class=\"id\" href=\"#notes\">notes</a>[0]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bufp\">bufp</a> = <a class=\"id\" href=\"#storenote\">storenote</a>(&amp;<a class=\"id\" href=\"#notes\">notes</a>[0], <a class=\"id\" href=\"#bufp\">bufp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set up the process info */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes\">notes</a>[1].<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/>= <a class=\"id\" href=\"#CORE_STR\">CORE_STR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes\">notes</a>[1].<a class=\"id\" href=\"#type\">type</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NT_PRPSINFO\">NT_PRPSINFO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes\">notes</a>[1].<a class=\"id\" href=\"#datasz\">datasz</a><span class=\"ts\"/>= sizeof(struct <a class=\"id\" href=\"#elf_prpsinfo\">elf_prpsinfo</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes\">notes</a>[1].<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#prpsinfo\">prpsinfo</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#prpsinfo\">prpsinfo</a>, 0, sizeof(struct <a class=\"id\" href=\"#elf_prpsinfo\">elf_prpsinfo</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prpsinfo\">prpsinfo</a>.<a class=\"id\" href=\"#pr_state\">pr_state</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prpsinfo\">prpsinfo</a>.<a class=\"id\" href=\"#pr_sname\">pr_sname</a><span class=\"ts\"/>= 'R';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prpsinfo\">prpsinfo</a>.<a class=\"id\" href=\"#pr_zomb\">pr_zomb</a><span class=\"ts\"/>= 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#prpsinfo\">prpsinfo</a>.<a class=\"id\" href=\"#pr_fname\">pr_fname</a>, \"vmlinux\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#prpsinfo\">prpsinfo</a>.<a class=\"id\" href=\"#pr_psargs\">pr_psargs</a>, <a class=\"id\" href=\"#saved_command_line\">saved_command_line</a>, <a class=\"id\" href=\"#ELF_PRARGSZ\">ELF_PRARGSZ</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhdr\">nhdr</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a><span class=\"ts\"/>+= <a class=\"id\" href=\"#notesize\">notesize</a>(&amp;<a class=\"id\" href=\"#notes\">notes</a>[1]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bufp\">bufp</a> = <a class=\"id\" href=\"#storenote\">storenote</a>(&amp;<a class=\"id\" href=\"#notes\">notes</a>[1], <a class=\"id\" href=\"#bufp\">bufp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set up the task structure */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes\">notes</a>[2].<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/>= <a class=\"id\" href=\"#CORE_STR\">CORE_STR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes\">notes</a>[2].<a class=\"id\" href=\"#type\">type</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NT_TASKSTRUCT\">NT_TASKSTRUCT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes\">notes</a>[2].<a class=\"id\" href=\"#datasz\">datasz</a><span class=\"ts\"/>= sizeof(struct <a class=\"id\" href=\"#task_struct\">task_struct</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notes\">notes</a>[2].<a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/>= <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nhdr\">nhdr</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a><span class=\"ts\"/>+= <a class=\"id\" href=\"#notesize\">notesize</a>(&amp;<a class=\"id\" href=\"#notes\">notes</a>[2]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bufp\">bufp</a> = <a class=\"id\" href=\"#storenote\">storenote</a>(&amp;<a class=\"id\" href=\"#notes\">notes</a>[2], <a class=\"id\" href=\"#bufp\">bufp</a>);", 
"", 
"} <span class=\"comment\">/* end elf_kcore_store_hdr() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * read from the ELF header and then kernel memory</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#read_kcore\">read_kcore</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#buflen\">buflen</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#fpos\">fpos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#acc\">acc</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#tsz\">tsz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#elf_buflen\">elf_buflen</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nphdr\">nphdr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#kclist_lock\">kclist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#get_kcore_size\">get_kcore_size</a>(&amp;<a class=\"id\" href=\"#nphdr\">nphdr</a>, &amp;<a class=\"id\" href=\"#elf_buflen\">elf_buflen</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buflen\">buflen</a> == 0 || *<a class=\"id\" href=\"#fpos\">fpos</a> >= <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#kclist_lock\">kclist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* trim buflen to not go beyond EOF */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buflen\">buflen</a> &gt; <a class=\"id\" href=\"#size\">size</a> - *<a class=\"id\" href=\"#fpos\">fpos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buflen\">buflen</a> = <a class=\"id\" href=\"#size\">size</a> - *<a class=\"id\" href=\"#fpos\">fpos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* construct an ELF core header if we'll need some of it */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#fpos\">fpos</a> &lt; <a class=\"id\" href=\"#elf_buflen\">elf_buflen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char * <a class=\"id\" href=\"#elf_buf\">elf_buf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsz\">tsz</a> = <a class=\"id\" href=\"#elf_buflen\">elf_buflen</a> - *<a class=\"id\" href=\"#fpos\">fpos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buflen\">buflen</a> &lt; <a class=\"id\" href=\"#tsz\">tsz</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsz\">tsz</a> = <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_buf\">elf_buf</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#elf_buflen\">elf_buflen</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#elf_buf\">elf_buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#kclist_lock\">kclist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_kcore_store_hdr\">elf_kcore_store_hdr</a>(<a class=\"id\" href=\"#elf_buf\">elf_buf</a>, <a class=\"id\" href=\"#nphdr\">nphdr</a>, <a class=\"id\" href=\"#elf_buflen\">elf_buflen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#kclist_lock\">kclist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#elf_buf\">elf_buf</a> + *<a class=\"id\" href=\"#fpos\">fpos</a>, <a class=\"id\" href=\"#tsz\">tsz</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elf_buf\">elf_buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elf_buf\">elf_buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buflen\">buflen</a> -= <a class=\"id\" href=\"#tsz\">tsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#fpos\">fpos</a> += <a class=\"id\" href=\"#tsz\">tsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> += <a class=\"id\" href=\"#tsz\">tsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acc\">acc</a> += <a class=\"id\" href=\"#tsz\">tsz</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* leave now if filled buffer already */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buflen\">buflen</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#acc\">acc</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#kclist_lock\">kclist_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check to see if our file offset matches with any of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the addresses in the elf_phdr on our list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#kc_offset_to_vaddr\">kc_offset_to_vaddr</a>(*<a class=\"id\" href=\"#fpos\">fpos</a> - <a class=\"id\" href=\"#elf_buflen\">elf_buflen</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#tsz\">tsz</a> = (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - (<a class=\"id\" href=\"#start\">start</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>))) &gt; <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsz\">tsz</a> = <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#buflen\">buflen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kcore_list\">kcore_list</a> *<a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#kclist_lock\">kclist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#m\">m</a>, &amp;<a class=\"id\" href=\"#kclist_head\">kclist_head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#addr\">addr</a> && <a class=\"id\" href=\"#start\">start</a> &lt; (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#addr\">addr</a>+<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#kclist_lock\">kclist_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#list\">list</a> == &amp;<a class=\"id\" href=\"#kclist_head\">kclist_head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clear_user\">clear_user</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#tsz\">tsz</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#is_vmalloc_or_module_addr\">is_vmalloc_or_module_addr</a>((void *)<a class=\"id\" href=\"#start\">start</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char * <a class=\"id\" href=\"#elf_buf\">elf_buf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_buf\">elf_buf</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#tsz\">tsz</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#elf_buf\">elf_buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vread\">vread</a>(<a class=\"id\" href=\"#elf_buf\">elf_buf</a>, (char *)<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#tsz\">tsz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we have to zero-fill user buffer even if no read */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#elf_buf\">elf_buf</a>, <a class=\"id\" href=\"#tsz\">tsz</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elf_buf\">elf_buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elf_buf\">elf_buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kern_addr_valid\">kern_addr_valid</a>(<a class=\"id\" href=\"#start\">start</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, (char *)<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#tsz\">tsz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We cannot distingush between fault on source</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and fault on destination. When this happens</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we clear too and hope it will trigger the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * EFAULT again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>) { ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clear_user\">clear_user</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#tsz\">tsz</a> - <a class=\"id\" href=\"#n\">n</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clear_user\">clear_user</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#tsz\">tsz</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buflen\">buflen</a> -= <a class=\"id\" href=\"#tsz\">tsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#fpos\">fpos</a> += <a class=\"id\" href=\"#tsz\">tsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> += <a class=\"id\" href=\"#tsz\">tsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acc\">acc</a> += <a class=\"id\" href=\"#tsz\">tsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#tsz\">tsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsz\">tsz</a> = (<a class=\"id\" href=\"#buflen\">buflen</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> ? <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> : <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#acc\">acc</a>;", 
"}", 
"", 
"", 
"static int <a class=\"id\" href=\"#open_kcore\">open_kcore</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_RAWIO\">CAP_SYS_RAWIO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kcore_need_update\">kcore_need_update</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kcore_update_ram\">kcore_update_ram</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>) != <a class=\"id\" href=\"#proc_root_kcore\">proc_root_kcore</a>-><a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_write\">i_size_write</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#proc_root_kcore\">proc_root_kcore</a>-><a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_kcore_operations\">proc_kcore_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#read_kcore\">read_kcore</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#open_kcore\">open_kcore</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_file_llseek\">generic_file_llseek</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG\">CONFIG_MEMORY_HOTPLUG</a>", 
"<span class=\"comment\">/* just remember that we have to update kcore */</span>", 
"static int <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#kcore_callback\">kcore_callback</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_ONLINE\">MEM_ONLINE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEM_OFFLINE\">MEM_OFFLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#kclist_lock\">kclist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kcore_need_update\">kcore_need_update</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#kclist_lock\">kclist_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"static struct <a class=\"id\" href=\"#kcore_list\">kcore_list</a> <a class=\"id\" href=\"#kcore_vmalloc\">kcore_vmalloc</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ARCH_PROC_KCORE_TEXT\">CONFIG_ARCH_PROC_KCORE_TEXT</a>", 
"static struct <a class=\"id\" href=\"#kcore_list\">kcore_list</a> <a class=\"id\" href=\"#kcore_text\">kcore_text</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If defined, special segment is used for mapping kernel text instead of</span>", 
"<span class=\"comment\"> * direct-map area. We need to create special TEXT section.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#proc_kcore_text_init\">proc_kcore_text_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kclist_add\">kclist_add</a>(&amp;<a class=\"id\" href=\"#kcore_text\">kcore_text</a>, <a class=\"id\" href=\"#_text\">_text</a>, <a class=\"id\" href=\"#_end\">_end</a> - <a class=\"id\" href=\"#_text\">_text</a>, <a class=\"id\" href=\"#KCORE_TEXT\">KCORE_TEXT</a>);", 
"}", 
"#else", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#proc_kcore_text_init\">proc_kcore_text_init</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_MODULES\">CONFIG_MODULES</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#MODULES_VADDR\">MODULES_VADDR</a>)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * MODULES_VADDR has no intersection with VMALLOC_ADDR.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kcore_list\">kcore_list</a> <a class=\"id\" href=\"#kcore_modules\">kcore_modules</a>;", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#add_modules_range\">add_modules_range</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kclist_add\">kclist_add</a>(&amp;<a class=\"id\" href=\"#kcore_modules\">kcore_modules</a>, (void *)<a class=\"id\" href=\"#MODULES_VADDR\">MODULES_VADDR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MODULES_END\">MODULES_END</a> - <a class=\"id\" href=\"#MODULES_VADDR\">MODULES_VADDR</a>, <a class=\"id\" href=\"#KCORE_VMALLOC\">KCORE_VMALLOC</a>);", 
"}", 
"#else", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#add_modules_range\">add_modules_range</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#proc_kcore_init\">proc_kcore_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_root_kcore\">proc_root_kcore</a> = <a class=\"id\" href=\"#proc_create\">proc_create</a>(\"kcore\", <a class=\"id\" href=\"#S_IRUSR\">S_IRUSR</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#proc_kcore_operations\">proc_kcore_operations</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#proc_root_kcore\">proc_root_kcore</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"couldn't create /proc/kcore\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0; <span class=\"comment\">/* Always returns 0. */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Store text area if it's special */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_kcore_text_init\">proc_kcore_text_init</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Store vmalloc area */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kclist_add\">kclist_add</a>(&amp;<a class=\"id\" href=\"#kcore_vmalloc\">kcore_vmalloc</a>, (void *)<a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a> - <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a>, <a class=\"id\" href=\"#KCORE_VMALLOC\">KCORE_VMALLOC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_modules_range\">add_modules_range</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Store direct-map area from physical memory map */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kcore_update_ram\">kcore_update_ram</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotplug_memory_notifier\">hotplug_memory_notifier</a>(<a class=\"id\" href=\"#kcore_callback\">kcore_callback</a>, 0);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#proc_kcore_init\">proc_kcore_init</a>);", 
];
xr_frag_insert('l/a8/bca758c81284c643fcb50ac10c3eb93155893e.xr', __xr_tmp);
