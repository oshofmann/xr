var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_wakeup\">do_wakeup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible_sync\">wake_up_interruptible_sync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#fasync_readers\">fasync_readers</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#POLL_IN\">POLL_IN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_wakeup\">do_wakeup</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#waiting_writers\">waiting_writers</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe_wait\">pipe_wait</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#waiting_writers\">waiting_writers</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_wakeup\">do_wakeup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#fasync_readers\">fasync_readers</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#POLL_IN\">POLL_IN</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#page_nr\">page_nr</a> &lt; <a class=\"id\" href=\"#spd_pages\">spd_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#spd_release\">spd_release</a>(<a class=\"id\" href=\"#spd\">spd</a>, <a class=\"id\" href=\"#page_nr\">page_nr</a>++);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#spd_release_page\">spd_release_page</a>(struct <a class=\"id\" href=\"#splice_pipe_desc\">splice_pipe_desc</a> *<a class=\"id\" href=\"#spd\">spd</a>, unsigned int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check if we need to grow the arrays holding pages and partial page</span>", 
"<span class=\"comment\"> * descriptions.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#splice_grow_spd\">splice_grow_spd</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, struct <a class=\"id\" href=\"#splice_pipe_desc\">splice_pipe_desc</a> *<a class=\"id\" href=\"#spd\">spd</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> <= <a class=\"id\" href=\"#PIPE_DEF_BUFFERS\">PIPE_DEF_BUFFERS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> * sizeof(struct <a class=\"id\" href=\"#page\">page</a> *), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> * sizeof(struct <a class=\"id\" href=\"#partial_page\">partial_page</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#pages\">pages</a> && <a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#partial\">partial</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#partial\">partial</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#splice_shrink_spd\">splice_shrink_spd</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#splice_pipe_desc\">splice_pipe_desc</a> *<a class=\"id\" href=\"#spd\">spd</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> <= <a class=\"id\" href=\"#PIPE_DEF_BUFFERS\">PIPE_DEF_BUFFERS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#spd\">spd</a>-><a class=\"id\" href=\"#partial\">partial</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#__generic_file_splice_read\">__generic_file_splice_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#loff\">loff</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#req_pages\">req_pages</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#PIPE_DEF_BUFFERS\">PIPE_DEF_BUFFERS</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#partial_page\">partial_page</a> <a class=\"id\" href=\"#partial\">partial</a>[<a class=\"id\" href=\"#PIPE_DEF_BUFFERS\">PIPE_DEF_BUFFERS</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#end_index\">end_index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#isize\">isize</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#page_nr\">page_nr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#splice_pipe_desc\">splice_pipe_desc</a> <a class=\"id\" href=\"#spd\">spd</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#partial\">partial</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ops\">ops</a> = &amp;<a class=\"id\" href=\"#page_cache_pipe_buf_ops\">page_cache_pipe_buf_ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#spd_release\">spd_release</a> = <a class=\"id\" href=\"#spd_release_page\">spd_release_page</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#splice_grow_spd\">splice_grow_spd</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#spd\">spd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = *<a class=\"id\" href=\"#ppos\">ppos</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff\">loff</a> = *<a class=\"id\" href=\"#ppos\">ppos</a> &amp; ~<a class=\"id\" href=\"#PAGE_CACHE_MASK\">PAGE_CACHE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req_pages\">req_pages</a> = (<a class=\"id\" href=\"#len\">len</a> + <a class=\"id\" href=\"#loff\">loff</a> + <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - 1) >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#req_pages\">req_pages</a>, <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Lookup the (hopefully) full range of pages we need.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#find_get_pages_contig\">find_get_pages_contig</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> += <a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If find_get_pages_contig() returned fewer pages than we needed,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * readahead/allocate the rest and fill in the holes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_sync_readahead\">page_cache_sync_readahead</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, &amp;<a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_ra\">f_ra</a>, <a class=\"id\" href=\"#in\">in</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#req_pages\">req_pages</a> - <a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Page could be there, find_get_pages_contig() breaks on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the first hole.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_get_page\">find_get_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * page didn't exist, allocate one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#page_cache_alloc_cold\">page_cache_alloc_cold</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#add_to_page_cache_lru\">add_to_page_cache_lru</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * add_to_page_cache() locks the page, unlock it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to avoid convoluting the logic below even more.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a>++] = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now loop over the map and see if we need to start IO on any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pages, fill in the partial map, etc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = *<a class=\"id\" href=\"#ppos\">ppos</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#page_nr\">page_nr</a> = 0; <a class=\"id\" href=\"#page_nr\">page_nr</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#page_nr\">page_nr</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#this_len\">this_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this_len is the max we'll use from this page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_len\">this_len</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned long, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - <a class=\"id\" href=\"#loff\">loff</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#page_nr\">page_nr</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageReadahead\">PageReadahead</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_async_readahead\">page_cache_async_readahead</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, &amp;<a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_ra\">f_ra</a>, <a class=\"id\" href=\"#in\">in</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#req_pages\">req_pages</a> - <a class=\"id\" href=\"#page_nr\">page_nr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the page isn't uptodate, we may need to start io on it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Page was truncated, or invalidated by the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * filesystem.  Redo the find/create, but this time the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * page is kept locked, so there's no chance of another</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * race with truncate/invalidate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_or_create_page\">find_or_create_page</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping_gfp_mask\">mapping_gfp_mask</a>(<a class=\"id\" href=\"#mapping\">mapping</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#page_nr\">page_nr</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#page_nr\">page_nr</a>] = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * page was already under io and is now done, great</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fill_it\">fill_it</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * need to read in the page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#readpage\">readpage</a>(<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We really should re-lookup the page here,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * but it complicates things a lot. Instead</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * lets just do what we already stored, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we'll get it the next time we are called.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == <a class=\"id\" href=\"#AOP_TRUNCATED_PAGE\">AOP_TRUNCATED_PAGE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#fill_it\">fill_it</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * i_size must be checked after PageUptodate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isize\">isize</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_index\">end_index</a> = (<a class=\"id\" href=\"#isize\">isize</a> - 1) >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#isize\">isize</a> || <a class=\"id\" href=\"#index\">index</a> &gt; <a class=\"id\" href=\"#end_index\">end_index</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if this is the last page, see if we need to shrink</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the length and stop</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end_index\">end_index</a> == <a class=\"id\" href=\"#index\">index</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#plen\">plen</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * max good bytes in this page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plen\">plen</a> = ((<a class=\"id\" href=\"#isize\">isize</a> - 1) &amp; ~<a class=\"id\" href=\"#PAGE_CACHE_MASK\">PAGE_CACHE_MASK</a>) + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#plen\">plen</a> <= <a class=\"id\" href=\"#loff\">loff</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * force quit after adding this page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_len\">this_len</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#this_len\">this_len</a>, <a class=\"id\" href=\"#plen\">plen</a> - <a class=\"id\" href=\"#loff\">loff</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#this_len\">this_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#partial\">partial</a>[<a class=\"id\" href=\"#page_nr\">page_nr</a>].<a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#loff\">loff</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#partial\">partial</a>[<a class=\"id\" href=\"#page_nr\">page_nr</a>].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#this_len\">this_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#this_len\">this_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff\">loff</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Release any pages at the end, if we quit early. 'page_nr' is how far</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we got, 'nr_pages' is how many pages are in the map.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#page_nr\">page_nr</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#page_nr\">page_nr</a>++]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_ra\">f_ra</a>.<a class=\"id\" href=\"#prev_pos\">prev_pos</a> = (<a class=\"id\" href=\"#loff_t\">loff_t</a>)<a class=\"id\" href=\"#index\">index</a> << <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#splice_to_pipe\">splice_to_pipe</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#spd\">spd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#splice_shrink_spd\">splice_shrink_spd</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#spd\">spd</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_file_splice_read - splice data from file to a pipe</span>", 
"<span class=\"comment\"> * @in:<span class=\"ts\"/><span class=\"ts\"/>file to splice from</span>", 
"<span class=\"comment\"> * @ppos:<span class=\"ts\"/>position in @in</span>", 
"<span class=\"comment\"> * @pipe:<span class=\"ts\"/>pipe to splice to</span>", 
"<span class=\"comment\"> * @len:<span class=\"ts\"/>number of bytes to splice</span>", 
"<span class=\"comment\"> * @flags:<span class=\"ts\"/>splice modifier flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Will read pages from given file and fill them into a pipe. Can be</span>", 
"<span class=\"comment\"> *    used as long as the address_space operations for the source implements</span>", 
"<span class=\"comment\"> *    a readpage() hook.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#generic_file_splice_read\">generic_file_splice_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#isize\">isize</a>, <a class=\"id\" href=\"#left\">left</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isize\">isize</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(*<a class=\"id\" href=\"#ppos\">ppos</a> >= <a class=\"id\" href=\"#isize\">isize</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#isize\">isize</a> - *<a class=\"id\" href=\"#ppos\">ppos</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#left\">left</a> &lt; <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#left\">left</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__generic_file_splice_read\">__generic_file_splice_read</a>(<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_accessed\">file_accessed</a>(<a class=\"id\" href=\"#in\">in</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_file_splice_read\">generic_file_splice_read</a>);", 
"", 
"static const struct <a class=\"id\" href=\"#pipe_buf_operations\">pipe_buf_operations</a> <a class=\"id\" href=\"#default_pipe_buf_ops\">default_pipe_buf_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#can_merge\">can_merge</a> = 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#generic_pipe_buf_map\">generic_pipe_buf_map</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unmap\">unmap</a> = <a class=\"id\" href=\"#generic_pipe_buf_unmap\">generic_pipe_buf_unmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#confirm\">confirm</a> = <a class=\"id\" href=\"#generic_pipe_buf_confirm\">generic_pipe_buf_confirm</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#generic_pipe_buf_release\">generic_pipe_buf_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#steal\">steal</a> = <a class=\"id\" href=\"#generic_pipe_buf_steal\">generic_pipe_buf_steal</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get\">get</a> = <a class=\"id\" href=\"#generic_pipe_buf_get\">generic_pipe_buf_get</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#kernel_readv\">kernel_readv</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#vec\">vec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#vlen\">vlen</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a> <a class=\"id\" href=\"#old_fs\">old_fs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_fs\">old_fs</a> = <a class=\"id\" href=\"#get_fs\">get_fs</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#get_ds\">get_ds</a>());", 
"<span class=\"ts\"/><span class=\"comment\">/* The cast to a user pointer is valid due to the set_fs() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#vfs_readv\">vfs_readv</a>(<a class=\"id\" href=\"#file\">file</a>, (const struct <a class=\"id\" href=\"#iovec\">iovec</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#vec\">vec</a>, <a class=\"id\" href=\"#vlen\">vlen</a>, &amp;<a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#old_fs\">old_fs</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#kernel_write\">kernel_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a> <a class=\"id\" href=\"#old_fs\">old_fs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_fs\">old_fs</a> = <a class=\"id\" href=\"#get_fs\">get_fs</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#get_ds\">get_ds</a>());", 
"<span class=\"ts\"/><span class=\"comment\">/* The cast to a user pointer is valid due to the set_fs() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#vfs_write\">vfs_write</a>(<a class=\"id\" href=\"#file\">file</a>, (const char <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#old_fs\">old_fs</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#default_file_splice_read\">default_file_splice_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_freed\">nr_freed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#PIPE_DEF_BUFFERS\">PIPE_DEF_BUFFERS</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#partial_page\">partial_page</a> <a class=\"id\" href=\"#partial\">partial</a>[<a class=\"id\" href=\"#PIPE_DEF_BUFFERS\">PIPE_DEF_BUFFERS</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#vec\">vec</a>, <a class=\"id\" href=\"#__vec\">__vec</a>[<a class=\"id\" href=\"#PIPE_DEF_BUFFERS\">PIPE_DEF_BUFFERS</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#this_len\">this_len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#splice_pipe_desc\">splice_pipe_desc</a> <a class=\"id\" href=\"#spd\">spd</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#partial\">partial</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ops\">ops</a> = &amp;<a class=\"id\" href=\"#default_pipe_buf_ops\">default_pipe_buf_ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#spd_release\">spd_release</a> = <a class=\"id\" href=\"#spd_release_page\">spd_release_page</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#splice_grow_spd\">splice_grow_spd</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#spd\">spd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a> = <a class=\"id\" href=\"#__vec\">__vec</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> &gt; <a class=\"id\" href=\"#PIPE_DEF_BUFFERS\">PIPE_DEF_BUFFERS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> * sizeof(struct <a class=\"id\" href=\"#iovec\">iovec</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vec\">vec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#shrink_ret\">shrink_ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = *<a class=\"id\" href=\"#ppos\">ppos</a> &amp; ~<a class=\"id\" href=\"#PAGE_CACHE_MASK\">PAGE_CACHE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = (<a class=\"id\" href=\"#len\">len</a> + <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - 1) >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a> && <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> && <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_page\">alloc_page</a>(<a class=\"id\" href=\"#GFP_USER\">GFP_USER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_len\">this_len</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#iov_base\">iov_base</a> = (void <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#iov_len\">iov_len</a> = <a class=\"id\" href=\"#this_len\">this_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#this_len\">this_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#kernel_readv\">kernel_readv</a>(<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#vec\">vec</a>, <a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_freed\">nr_freed</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_len\">this_len</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#vec\">vec</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#iov_len\">iov_len</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#partial\">partial</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#partial\">partial</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#this_len\">this_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#this_len\">this_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_freed\">nr_freed</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> -= <a class=\"id\" href=\"#this_len\">this_len</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a> -= <a class=\"id\" href=\"#nr_freed\">nr_freed</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#splice_to_pipe\">splice_to_pipe</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#spd\">spd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<a class=\"id\" href=\"#shrink_ret\">shrink_ret</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vec\">vec</a> != <a class=\"id\" href=\"#__vec\">__vec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#vec\">vec</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#splice_shrink_spd\">splice_shrink_spd</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#spd\">spd</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#spd\">spd</a>.<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#shrink_ret\">shrink_ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#default_file_splice_read\">default_file_splice_read</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Send 'sd-&gt;len' bytes to socket from 'sd-&gt;file' at position 'sd-&gt;pos'</span>", 
"<span class=\"comment\"> * using sendpage(). Return the number of bytes sent.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pipe_to_sendpage\">pipe_to_sendpage</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a>, struct <a class=\"id\" href=\"#splice_desc\">splice_desc</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#more\">more</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#confirm\">confirm</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#more\">more</a> = (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SPLICE_F_MORE\">SPLICE_F_MORE</a>) || <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#total_len\">total_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#sendpage\">sendpage</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#sendpage\">sendpage</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#len\">len</a>, &amp;<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#more\">more</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is a little more tricky than the file -&gt; pipe splicing. There are</span>", 
"<span class=\"comment\"> * basically three cases:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Destination page already exists in the address space and there</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  are users of it. For that case we have no other option that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  copying the data. Tough luck.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Destination page already exists in the address space, but there</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  are no users of it. Make sure it's uptodate, then drop it. Fall</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  through to last case.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- Destination page does not exist, we can add the pipe page to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  the page cache and avoid the copy.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If asked to move pages to the output file (SPLICE_F_MOVE is set in</span>", 
"<span class=\"comment\"> * sd-&gt;flags), we attempt to migrate pages from the pipe to the output</span>", 
"<span class=\"comment\"> * file address space page cache. This is possible if no one else has</span>", 
"<span class=\"comment\"> * the pipe page referenced outside of the pipe and page cache. If</span>", 
"<span class=\"comment\"> * SPLICE_F_MOVE isn't set, or we cannot move the page, we simply create</span>", 
"<span class=\"comment\"> * a new page in the output file page cache and fill/dirty that.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pipe_to_file\">pipe_to_file</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#splice_desc\">splice_desc</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#this_len\">this_len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#fsdata\">fsdata</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make sure the data in this buffer is uptodate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#confirm\">confirm</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#pos\">pos</a> &amp; ~<a class=\"id\" href=\"#PAGE_CACHE_MASK\">PAGE_CACHE_MASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_len\">this_len</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_len\">this_len</a> + <a class=\"id\" href=\"#offset\">offset</a> &gt; <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_len\">this_len</a> = <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pagecache_write_begin\">pagecache_write_begin</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#this_len\">this_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#AOP_FLAG_UNINTERRUPTIBLE\">AOP_FLAG_UNINTERRUPTIBLE</a>, &amp;<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page\">page</a> != <a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Careful, -&gt;map() uses KM_USER0!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#src\">src</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#map\">map</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dst\">dst</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#src\">src</a> + <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#this_len\">this_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_page\">flush_dcache_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#unmap\">unmap</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pagecache_write_end\">pagecache_write_end</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#this_len\">this_len</a>, <a class=\"id\" href=\"#this_len\">this_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pipe_to_file\">pipe_to_file</a>);", 
"", 
"static void <a class=\"id\" href=\"#wakeup_pipe_writers\">wakeup_pipe_writers</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#fasync_writers\">fasync_writers</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#POLL_OUT\">POLL_OUT</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * splice_from_pipe_feed - feed available data from a pipe to a file</span>", 
"<span class=\"comment\"> * @pipe:<span class=\"ts\"/>pipe to splice from</span>", 
"<span class=\"comment\"> * @sd:<span class=\"ts\"/><span class=\"ts\"/>information to @actor</span>", 
"<span class=\"comment\"> * @actor:<span class=\"ts\"/>handler that splices the data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    This function loops over the pipe and calls @actor to do the</span>", 
"<span class=\"comment\"> *    actual moving of a single struct pipe_buffer to the desired</span>", 
"<span class=\"comment\"> *    destination.  It returns when there's no more buffers left in</span>", 
"<span class=\"comment\"> *    the pipe or if the requested number of bytes (@sd-&gt;total_len)</span>", 
"<span class=\"comment\"> *    have been copied.  It returns a positive number (one) if the</span>", 
"<span class=\"comment\"> *    pipe needs to be filled with more data, zero if the required</span>", 
"<span class=\"comment\"> *    number of bytes have been copied and -errno on error.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    This, together with splice_from_pipe_{begin,end,next}, may be</span>", 
"<span class=\"comment\"> *    used to implement the functionality of __splice_from_pipe() when</span>", 
"<span class=\"comment\"> *    locking is required around copying the pipe buffers to the</span>", 
"<span class=\"comment\"> *    destination.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#splice_from_pipe_feed\">splice_from_pipe_feed</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, struct <a class=\"id\" href=\"#splice_desc\">splice_desc</a> *<a class=\"id\" href=\"#sd\">sd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#splice_actor\">splice_actor</a> *<a class=\"id\" href=\"#actor\">actor</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a> + <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#pipe_buf_operations\">pipe_buf_operations</a> *<a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#total_len\">total_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#total_len\">total_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#actor\">actor</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ENODATA\">ENODATA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#num_spliced\">num_spliced</a> += <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#total_len\">total_len</a> -= <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#release\">release</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a> = (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a> + 1) &amp; (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#need_wakeup\">need_wakeup</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#total_len\">total_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#splice_from_pipe_feed\">splice_from_pipe_feed</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * splice_from_pipe_next - wait for some data to splice from</span>", 
"<span class=\"comment\"> * @pipe:<span class=\"ts\"/>pipe to splice from</span>", 
"<span class=\"comment\"> * @sd:<span class=\"ts\"/><span class=\"ts\"/>information about the splice operation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    This function will wait for some data and return a positive</span>", 
"<span class=\"comment\"> *    value (one) if pipe buffers are available.  It will return zero</span>", 
"<span class=\"comment\"> *    or -errno if no more data needs to be spliced.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#splice_from_pipe_next\">splice_from_pipe_next</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, struct <a class=\"id\" href=\"#splice_desc\">splice_desc</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#writers\">writers</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#waiting_writers\">waiting_writers</a> && <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#num_spliced\">num_spliced</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SPLICE_F_NONBLOCK\">SPLICE_F_NONBLOCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#need_wakeup\">need_wakeup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wakeup_pipe_writers\">wakeup_pipe_writers</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#need_wakeup\">need_wakeup</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe_wait\">pipe_wait</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#splice_from_pipe_next\">splice_from_pipe_next</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * splice_from_pipe_begin - start splicing from pipe</span>", 
"<span class=\"comment\"> * @sd:<span class=\"ts\"/><span class=\"ts\"/>information about the splice operation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    This function should be called before a loop containing</span>", 
"<span class=\"comment\"> *    splice_from_pipe_next() and splice_from_pipe_feed() to</span>", 
"<span class=\"comment\"> *    initialize the necessary fields of @sd.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#splice_from_pipe_begin\">splice_from_pipe_begin</a>(struct <a class=\"id\" href=\"#splice_desc\">splice_desc</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#num_spliced\">num_spliced</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#need_wakeup\">need_wakeup</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#splice_from_pipe_begin\">splice_from_pipe_begin</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * splice_from_pipe_end - finish splicing from pipe</span>", 
"<span class=\"comment\"> * @pipe:<span class=\"ts\"/>pipe to splice from</span>", 
"<span class=\"comment\"> * @sd:<span class=\"ts\"/><span class=\"ts\"/>information about the splice operation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    This function will wake up pipe writers if necessary.  It should</span>", 
"<span class=\"comment\"> *    be called after a loop containing splice_from_pipe_next() and</span>", 
"<span class=\"comment\"> *    splice_from_pipe_feed().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#splice_from_pipe_end\">splice_from_pipe_end</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, struct <a class=\"id\" href=\"#splice_desc\">splice_desc</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#need_wakeup\">need_wakeup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wakeup_pipe_writers\">wakeup_pipe_writers</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#splice_from_pipe_end\">splice_from_pipe_end</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __splice_from_pipe - splice data from a pipe to given actor</span>", 
"<span class=\"comment\"> * @pipe:<span class=\"ts\"/>pipe to splice from</span>", 
"<span class=\"comment\"> * @sd:<span class=\"ts\"/><span class=\"ts\"/>information to @actor</span>", 
"<span class=\"comment\"> * @actor:<span class=\"ts\"/>handler that splices the data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    This function does little more than loop over the pipe and call</span>", 
"<span class=\"comment\"> *    @actor to do the actual moving of a single struct pipe_buffer to</span>", 
"<span class=\"comment\"> *    the desired destination. See pipe_to_file, pipe_to_sendpage, or</span>", 
"<span class=\"comment\"> *    pipe_to_user.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#__splice_from_pipe\">__splice_from_pipe</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, struct <a class=\"id\" href=\"#splice_desc\">splice_desc</a> *<a class=\"id\" href=\"#sd\">sd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#splice_actor\">splice_actor</a> *<a class=\"id\" href=\"#actor\">actor</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#splice_from_pipe_begin\">splice_from_pipe_begin</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#splice_from_pipe_next\">splice_from_pipe_next</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#splice_from_pipe_feed\">splice_from_pipe_feed</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#actor\">actor</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#splice_from_pipe_end\">splice_from_pipe_end</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#sd\">sd</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#num_spliced\">num_spliced</a> ? <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#num_spliced\">num_spliced</a> : <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__splice_from_pipe\">__splice_from_pipe</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * splice_from_pipe - splice data from a pipe to a file</span>", 
"<span class=\"comment\"> * @pipe:<span class=\"ts\"/>pipe to splice from</span>", 
"<span class=\"comment\"> * @out:<span class=\"ts\"/>file to splice to</span>", 
"<span class=\"comment\"> * @ppos:<span class=\"ts\"/>position in @out</span>", 
"<span class=\"comment\"> * @len:<span class=\"ts\"/>how many bytes to splice</span>", 
"<span class=\"comment\"> * @flags:<span class=\"ts\"/>splice modifier flags</span>", 
"<span class=\"comment\"> * @actor:<span class=\"ts\"/>handler that splices the data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    See __splice_from_pipe. This function locks the pipe inode,</span>", 
"<span class=\"comment\"> *    otherwise it's identical to __splice_from_pipe().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#splice_from_pipe\">splice_from_pipe</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#splice_actor\">splice_actor</a> *<a class=\"id\" href=\"#actor\">actor</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#splice_desc\">splice_desc</a> <a class=\"id\" href=\"#sd\">sd</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#total_len\">total_len</a> = <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#pos\">pos</a> = *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_lock\">pipe_lock</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__splice_from_pipe\">__splice_from_pipe</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#actor\">actor</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_file_splice_write - splice data from a pipe to a file</span>", 
"<span class=\"comment\"> * @pipe:<span class=\"ts\"/>pipe info</span>", 
"<span class=\"comment\"> * @out:<span class=\"ts\"/>file to write to</span>", 
"<span class=\"comment\"> * @ppos:<span class=\"ts\"/>position in @out</span>", 
"<span class=\"comment\"> * @len:<span class=\"ts\"/>number of bytes to splice</span>", 
"<span class=\"comment\"> * @flags:<span class=\"ts\"/>splice modifier flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Will either move or copy pages (determined by @flags options) from</span>", 
"<span class=\"comment\"> *    the given pipe inode to the given file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#generic_file_splice_write\">generic_file_splice_write</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#splice_desc\">splice_desc</a> <a class=\"id\" href=\"#sd\">sd</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#total_len\">total_len</a> = <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#pos\">pos</a> = *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_lock\">pipe_lock</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#splice_from_pipe_begin\">splice_from_pipe_begin</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#splice_from_pipe_next\">splice_from_pipe_next</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock_nested\">mutex_lock_nested</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>, <a class=\"id\" href=\"#I_MUTEX_CHILD\">I_MUTEX_CHILD</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#file_remove_suid\">file_remove_suid</a>(<a class=\"id\" href=\"#out\">out</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_update_time\">file_update_time</a>(<a class=\"id\" href=\"#out\">out</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#splice_from_pipe_feed\">splice_from_pipe_feed</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#pipe_to_file\">pipe_to_file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#splice_from_pipe_end\">splice_from_pipe_end</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>.<a class=\"id\" href=\"#num_spliced\">num_spliced</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sd\">sd</a>.<a class=\"id\" href=\"#num_spliced\">num_spliced</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = (<a class=\"id\" href=\"#ret\">ret</a> + <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - 1) >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#generic_write_sync\">generic_write_sync</a>(<a class=\"id\" href=\"#out\">out</a>, *<a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#balance_dirty_pages_ratelimited_nr\">balance_dirty_pages_ratelimited_nr</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_file_splice_write\">generic_file_splice_write</a>);", 
"", 
"static int <a class=\"id\" href=\"#write_pipe_buf\">write_pipe_buf</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#splice_desc\">splice_desc</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#confirm\">confirm</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#map\">map</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kernel_write\">kernel_write</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#unmap\">unmap</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#default_file_splice_write\">default_file_splice_write</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#splice_from_pipe\">splice_from_pipe</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#write_pipe_buf\">write_pipe_buf</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_splice_sendpage - splice data from a pipe to a socket</span>", 
"<span class=\"comment\"> * @pipe:<span class=\"ts\"/>pipe to splice from</span>", 
"<span class=\"comment\"> * @out:<span class=\"ts\"/>socket to write to</span>", 
"<span class=\"comment\"> * @ppos:<span class=\"ts\"/>position in @out</span>", 
"<span class=\"comment\"> * @len:<span class=\"ts\"/>number of bytes to splice</span>", 
"<span class=\"comment\"> * @flags:<span class=\"ts\"/>splice modifier flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Will send @len bytes from the pipe to a network socket. No data copying</span>", 
"<span class=\"comment\"> *    is involved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#generic_splice_sendpage\">generic_splice_sendpage</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#splice_from_pipe\">splice_from_pipe</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pipe_to_sendpage\">pipe_to_sendpage</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_splice_sendpage\">generic_splice_sendpage</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attempt to initiate a splice from pipe to file.</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#do_splice_from\">do_splice_from</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#splice_write\">splice_write</a>)(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *, struct <a class=\"id\" href=\"#file\">file</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, unsigned int);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_APPEND\">O_APPEND</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rw_verify_area\">rw_verify_area</a>(<a class=\"id\" href=\"#WRITE\">WRITE</a>, <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#splice_write\">splice_write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#splice_write\">splice_write</a> = <a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#splice_write\">splice_write</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#splice_write\">splice_write</a> = <a class=\"id\" href=\"#default_file_splice_write\">default_file_splice_write</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#splice_write\">splice_write</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attempt to initiate a splice from a file to a pipe.</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#do_splice_to\">do_splice_to</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#splice_read\">splice_read</a>)(struct <a class=\"id\" href=\"#file\">file</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, unsigned int);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rw_verify_area\">rw_verify_area</a>(<a class=\"id\" href=\"#READ\">READ</a>, <a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#splice_read\">splice_read</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#splice_read\">splice_read</a> = <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#splice_read\">splice_read</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#splice_read\">splice_read</a> = <a class=\"id\" href=\"#default_file_splice_read\">default_file_splice_read</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#splice_read\">splice_read</a>(<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * splice_direct_to_actor - splices data directly between two non-pipes</span>", 
"<span class=\"comment\"> * @in:<span class=\"ts\"/><span class=\"ts\"/>file to splice from</span>", 
"<span class=\"comment\"> * @sd:<span class=\"ts\"/><span class=\"ts\"/>actor information on where to splice to</span>", 
"<span class=\"comment\"> * @actor:<span class=\"ts\"/>handles the data splicing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    This is a special case helper to splice directly between two</span>", 
"<span class=\"comment\"> *    points, without requiring an explicit pipe. Internally an allocated</span>", 
"<span class=\"comment\"> *    pipe is cached in the process, and reused during the lifetime of</span>", 
"<span class=\"comment\"> *    that process.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#splice_direct_to_actor\">splice_direct_to_actor</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#in\">in</a>, struct <a class=\"id\" href=\"#splice_desc\">splice_desc</a> *<a class=\"id\" href=\"#sd\">sd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#splice_direct_actor\">splice_direct_actor</a> *<a class=\"id\" href=\"#actor\">actor</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#umode_t\">umode_t</a> <a class=\"id\" href=\"#i_mode\">i_mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We require the input being a regular file, as we don't want to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * randomly drop data for eg socket -&gt; socket splicing. Use the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * piped splicing for that!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#i_mode\">i_mode</a>) && !<a class=\"id\" href=\"#S_ISBLK\">S_ISBLK</a>(<a class=\"id\" href=\"#i_mode\">i_mode</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * neither in nor out is a pipe, setup an internal pipe attached to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 'out' and transfer the wanted data from 'in' to 'out' through that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#splice_pipe\">splice_pipe</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pipe\">pipe</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#alloc_pipe_info\">alloc_pipe_info</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We don't have an immediate reader, but we'll read the stuff</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * out of the pipe right after the splice_to_pipe(). So set</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * PIPE_READERS appropriately.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#readers\">readers</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#splice_pipe\">splice_pipe</a> = <a class=\"id\" href=\"#pipe\">pipe</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do the splice.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#total_len\">total_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't block on output, we have to drain the direct pipe.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#SPLICE_F_NONBLOCK\">SPLICE_F_NONBLOCK</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#read_len\">read_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#prev_pos\">prev_pos</a> = <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_splice_to\">do_splice_to</a>(<a class=\"id\" href=\"#in\">in</a>, &amp;<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> <= 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_release\">out_release</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_len\">read_len</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#total_len\">total_len</a> = <a class=\"id\" href=\"#read_len\">read_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * NOTE: nonblocking mode only applies to the input. We</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * must not do the output in nonblocking mode as then we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * could get stuck data in the internal pipe:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#actor\">actor</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> <= 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#prev_pos\">prev_pos</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_release\">out_release</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> += <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; <a class=\"id\" href=\"#read_len\">read_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#prev_pos\">prev_pos</a> + <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_release\">out_release</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file_accessed\">file_accessed</a>(<a class=\"id\" href=\"#in\">in</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"", 
"<a class=\"id\" href=\"#out_release\">out_release</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we did an incomplete transfer we must release</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the pipe buffers in question:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#release\">release</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bytes\">bytes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#splice_direct_to_actor\">splice_direct_to_actor</a>);", 
"", 
"static int <a class=\"id\" href=\"#direct_splice_actor\">direct_splice_actor</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#splice_desc\">splice_desc</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#file\">file</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_splice_from\">do_splice_from</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#total_len\">total_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * do_splice_direct - splices data directly between two files</span>", 
"<span class=\"comment\"> * @in:<span class=\"ts\"/><span class=\"ts\"/>file to splice from</span>", 
"<span class=\"comment\"> * @ppos:<span class=\"ts\"/>input file offset</span>", 
"<span class=\"comment\"> * @out:<span class=\"ts\"/>file to splice to</span>", 
"<span class=\"comment\"> * @len:<span class=\"ts\"/>number of bytes to splice</span>", 
"<span class=\"comment\"> * @flags:<span class=\"ts\"/>splice modifier flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    For use by do_sendfile(). splice can easily emulate sendfile, but</span>", 
"<span class=\"comment\"> *    doing it in the application would incur an extra system call</span>", 
"<span class=\"comment\"> *    (splice in + splice out, as compared to just sendfile()). So this helper</span>", 
"<span class=\"comment\"> *    can splice directly through a process-private pipe.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#do_splice_direct\">do_splice_direct</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#splice_desc\">splice_desc</a> <a class=\"id\" href=\"#sd\">sd</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#len\">len</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#total_len\">total_len</a><span class=\"ts\"/>= <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#pos\">pos</a><span class=\"ts\"/><span class=\"ts\"/>= *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#file\">file</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#out\">out</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#splice_direct_to_actor\">splice_direct_to_actor</a>(<a class=\"id\" href=\"#in\">in</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#direct_splice_actor\">direct_splice_actor</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> = <a class=\"id\" href=\"#sd\">sd</a>.<a class=\"id\" href=\"#pos\">pos</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#splice_pipe_to_pipe\">splice_pipe_to_pipe</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#ipipe\">ipipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#opipe\">opipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * After the inode slimming patch, i_pipe/i_bdev/i_cdev share the same</span>", 
"<span class=\"comment\"> * location, so checking -&gt;i_pipe is not enough to verify that this is a</span>", 
"<span class=\"comment\"> * pipe.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe_info\">pipe_info</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISFIFO\">S_ISFIFO</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Determine where to splice to/from.</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#do_splice\">do_splice</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#off_in\">off_in</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#off_out\">off_out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#ipipe\">ipipe</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#opipe\">opipe</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, *<a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipipe\">ipipe</a> = <a class=\"id\" href=\"#pipe_info\">pipe_info</a>(<a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opipe\">opipe</a> = <a class=\"id\" href=\"#pipe_info\">pipe_info</a>(<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ipipe\">ipipe</a> && <a class=\"id\" href=\"#opipe\">opipe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#off_in\">off_in</a> || <a class=\"id\" href=\"#off_out\">off_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ESPIPE\">ESPIPE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Splicing to self would be fun, but... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ipipe\">ipipe</a> == <a class=\"id\" href=\"#opipe\">opipe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#splice_pipe_to_pipe\">splice_pipe_to_pipe</a>(<a class=\"id\" href=\"#ipipe\">ipipe</a>, <a class=\"id\" href=\"#opipe\">opipe</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ipipe\">ipipe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#off_in\">off_in</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ESPIPE\">ESPIPE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#off_out\">off_out</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_PWRITE\">FMODE_PWRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#off_out\">off_out</a>, sizeof(<a class=\"id\" href=\"#loff_t\">loff_t</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = &amp;<a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = &amp;<a class=\"id\" href=\"#out\">out</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_splice_from\">do_splice_from</a>(<a class=\"id\" href=\"#ipipe\">ipipe</a>, <a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#off_out\">off_out</a> && <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#off_out\">off_out</a>, <a class=\"id\" href=\"#off\">off</a>, sizeof(<a class=\"id\" href=\"#loff_t\">loff_t</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opipe\">opipe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#off_out\">off_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ESPIPE\">ESPIPE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#off_in\">off_in</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_PREAD\">FMODE_PREAD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#off_in\">off_in</a>, sizeof(<a class=\"id\" href=\"#loff_t\">loff_t</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = &amp;<a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = &amp;<a class=\"id\" href=\"#in\">in</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_splice_to\">do_splice_to</a>(<a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#opipe\">opipe</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#off_in\">off_in</a> && <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#off_in\">off_in</a>, <a class=\"id\" href=\"#off\">off</a>, sizeof(<a class=\"id\" href=\"#loff_t\">loff_t</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Map an iov into an array of pages and offset/length tupples. With the</span>", 
"<span class=\"comment\"> * partial_page structure, we can map several non-contiguous ranges into</span>", 
"<span class=\"comment\"> * our ones pages[] map instead of splitting that operation into pieces.</span>", 
"<span class=\"comment\"> * Could easily be exported as a generic helper for other users, in which</span>", 
"<span class=\"comment\"> * case one would probably want to add a 'max_nr_pages' parameter as well.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#get_iovec_page_array\">get_iovec_page_array</a>(const struct <a class=\"id\" href=\"#iovec\">iovec</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_vecs\">nr_vecs</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#partial_page\">partial_page</a> *<a class=\"id\" href=\"#partial\">partial</a>, int <a class=\"id\" href=\"#aligned\">aligned</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#pipe_buffers\">pipe_buffers</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#buffers\">buffers</a> = 0, <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_vecs\">nr_vecs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#npages\">npages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#iovec\">iovec</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#iov\">iov</a>, sizeof(<a class=\"id\" href=\"#entry\">entry</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#iov_base\">iov_base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#iov_len\">iov_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Sanity check this iovec. 0 read succeeds.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_READ\">VERIFY_READ</a>, <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get this base offset and number of pages, then map</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in the user pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = (unsigned long) <a class=\"id\" href=\"#base\">base</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If asked for alignment, the offset must be zero and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * length a multiple of the PAGE_SIZE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#aligned\">aligned</a> && (<a class=\"id\" href=\"#off\">off</a> || <a class=\"id\" href=\"#len\">len</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#npages\">npages</a> = (<a class=\"id\" href=\"#off\">off</a> + <a class=\"id\" href=\"#len\">len</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#npages\">npages</a> &gt; <a class=\"id\" href=\"#pipe_buffers\">pipe_buffers</a> - <a class=\"id\" href=\"#buffers\">buffers</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#npages\">npages</a> = <a class=\"id\" href=\"#pipe_buffers\">pipe_buffers</a> - <a class=\"id\" href=\"#buffers\">buffers</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_user_pages_fast\">get_user_pages_fast</a>((unsigned long)<a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#npages\">npages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0, &amp;<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#buffers\">buffers</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a> <= 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Fill this contiguous range into the partial page map.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#error\">error</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const int <a class=\"id\" href=\"#plen\">plen</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#off\">off</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>[<a class=\"id\" href=\"#buffers\">buffers</a>].<a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>[<a class=\"id\" href=\"#buffers\">buffers</a>].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#plen\">plen</a>;", 
"", 
];
xr_frag_insert('l/a8/bd47575ef029f6a26f6e98e81170e36987bfd9.xr', __xr_tmp);
