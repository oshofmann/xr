var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions related to barrier IO handling</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"blk.h\"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_ordered - does this queue support ordered writes</span>", 
"<span class=\"comment\"> * @q:        the request queue</span>", 
"<span class=\"comment\"> * @ordered:  one of QUEUE_ORDERED_*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   For journalled file systems, doing ordered writes on a commit</span>", 
"<span class=\"comment\"> *   block instead of explicitly doing wait_on_buffer (which is bad</span>", 
"<span class=\"comment\"> *   for performance) can be a big win. Block drivers supporting this</span>", 
"<span class=\"comment\"> *   feature should call this function and indicate so.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"int <a class=\"id\" href=\"#blk_queue_ordered\">blk_queue_ordered</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned <a class=\"id\" href=\"#ordered\">ordered</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ordered\">ordered</a> != <a class=\"id\" href=\"#QUEUE_ORDERED_NONE\">QUEUE_ORDERED_NONE</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ordered\">ordered</a> != <a class=\"id\" href=\"#QUEUE_ORDERED_DRAIN\">QUEUE_ORDERED_DRAIN</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ordered\">ordered</a> != <a class=\"id\" href=\"#QUEUE_ORDERED_DRAIN_FLUSH\">QUEUE_ORDERED_DRAIN_FLUSH</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ordered\">ordered</a> != <a class=\"id\" href=\"#QUEUE_ORDERED_DRAIN_FUA\">QUEUE_ORDERED_DRAIN_FUA</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ordered\">ordered</a> != <a class=\"id\" href=\"#QUEUE_ORDERED_TAG\">QUEUE_ORDERED_TAG</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ordered\">ordered</a> != <a class=\"id\" href=\"#QUEUE_ORDERED_TAG_FLUSH\">QUEUE_ORDERED_TAG_FLUSH</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ordered\">ordered</a> != <a class=\"id\" href=\"#QUEUE_ORDERED_TAG_FUA\">QUEUE_ORDERED_TAG_FUA</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"blk_queue_ordered: bad value %d\\n\", <a class=\"id\" href=\"#ordered\">ordered</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordered\">ordered</a> = <a class=\"id\" href=\"#ordered\">ordered</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#next_ordered\">next_ordered</a> = <a class=\"id\" href=\"#ordered\">ordered</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_ordered\">blk_queue_ordered</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Cache flushing for ordered writes handling</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned <a class=\"id\" href=\"#blk_ordered_cur_seq\">blk_ordered_cur_seq</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordseq\">ordseq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1 << <a class=\"id\" href=\"#ffz\">ffz</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordseq\">ordseq</a>);", 
"}", 
"", 
"unsigned <a class=\"id\" href=\"#blk_ordered_req_seq\">blk_ordered_req_seq</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordseq\">ordseq</a> == 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a> == &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pre_flush_rq\">pre_flush_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#QUEUE_ORDSEQ_PREFLUSH\">QUEUE_ORDSEQ_PREFLUSH</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a> == &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#bar_rq\">bar_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#QUEUE_ORDSEQ_BAR\">QUEUE_ORDSEQ_BAR</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a> == &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#post_flush_rq\">post_flush_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#QUEUE_ORDSEQ_POSTFLUSH\">QUEUE_ORDSEQ_POSTFLUSH</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * !fs requests don't need to follow barrier ordering.  Always</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * put them at the front.  This fixes the following deadlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * http://thread.gmane.org/gmane.linux.kernel/537473</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> != <a class=\"id\" href=\"#REQ_TYPE_FS\">REQ_TYPE_FS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#QUEUE_ORDSEQ_DRAIN\">QUEUE_ORDSEQ_DRAIN</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_ORDERED_COLOR\">REQ_ORDERED_COLOR</a>) ==", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#orig_bar_rq\">orig_bar_rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_ORDERED_COLOR\">REQ_ORDERED_COLOR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#QUEUE_ORDSEQ_DRAIN\">QUEUE_ORDSEQ_DRAIN</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#QUEUE_ORDSEQ_DONE\">QUEUE_ORDSEQ_DONE</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#blk_ordered_complete_seq\">blk_ordered_complete_seq</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned <a class=\"id\" href=\"#seq\">seq</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> && !<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#orderr\">orderr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#orderr\">orderr</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordseq\">ordseq</a> &amp; <a class=\"id\" href=\"#seq\">seq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordseq\">ordseq</a> |= <a class=\"id\" href=\"#seq\">seq</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_ordered_cur_seq\">blk_ordered_cur_seq</a>(<a class=\"id\" href=\"#q\">q</a>) != <a class=\"id\" href=\"#QUEUE_ORDSEQ_DONE\">QUEUE_ORDSEQ_DONE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Okay, sequence complete.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordseq\">ordseq</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#orig_bar_rq\">orig_bar_rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__blk_end_request_all\">__blk_end_request_all</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#orderr\">orderr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pre_flush_end_io\">pre_flush_end_io</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elv_completed_request\">elv_completed_request</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_ordered_complete_seq\">blk_ordered_complete_seq</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#QUEUE_ORDSEQ_PREFLUSH\">QUEUE_ORDSEQ_PREFLUSH</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#bar_end_io\">bar_end_io</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elv_completed_request\">elv_completed_request</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_ordered_complete_seq\">blk_ordered_complete_seq</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#QUEUE_ORDSEQ_BAR\">QUEUE_ORDSEQ_BAR</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#post_flush_end_io\">post_flush_end_io</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elv_completed_request\">elv_completed_request</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_ordered_complete_seq\">blk_ordered_complete_seq</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#QUEUE_ORDSEQ_POSTFLUSH\">QUEUE_ORDSEQ_POSTFLUSH</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#queue_flush\">queue_flush</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned <a class=\"id\" href=\"#which\">which</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq_end_io_fn\">rq_end_io_fn</a> *<a class=\"id\" href=\"#end_io\">end_io</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#which\">which</a> == <a class=\"id\" href=\"#QUEUE_ORDERED_DO_PREFLUSH\">QUEUE_ORDERED_DO_PREFLUSH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pre_flush_rq\">pre_flush_rq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_io\">end_io</a> = <a class=\"id\" href=\"#pre_flush_end_io\">pre_flush_end_io</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#post_flush_rq\">post_flush_rq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_io\">end_io</a> = <a class=\"id\" href=\"#post_flush_end_io\">post_flush_end_io</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_init\">blk_rq_init</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> = <a class=\"id\" href=\"#REQ_TYPE_FS\">REQ_TYPE_FS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> = <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a> | <a class=\"id\" href=\"#REQ_FLUSH\">REQ_FLUSH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#orig_bar_rq\">orig_bar_rq</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#end_io\">end_io</a> = <a class=\"id\" href=\"#end_io\">end_io</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elv_insert\">elv_insert</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#ELEVATOR_INSERT_FRONT\">ELEVATOR_INSERT_FRONT</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#start_ordered\">start_ordered</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> **<a class=\"id\" href=\"#rqp\">rqp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a> = *<a class=\"id\" href=\"#rqp\">rqp</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#skip\">skip</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#orderr\">orderr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordered\">ordered</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#next_ordered\">next_ordered</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordseq\">ordseq</a> |= <a class=\"id\" href=\"#QUEUE_ORDSEQ_STARTED\">QUEUE_ORDSEQ_STARTED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For an empty barrier, there's no actual BAR request, which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in turn makes POSTFLUSH unnecessary.  Mask them off.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#blk_rq_sectors\">blk_rq_sectors</a>(<a class=\"id\" href=\"#rq\">rq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordered\">ordered</a> &= ~(<a class=\"id\" href=\"#QUEUE_ORDERED_DO_BAR\">QUEUE_ORDERED_DO_BAR</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#QUEUE_ORDERED_DO_POSTFLUSH\">QUEUE_ORDERED_DO_POSTFLUSH</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Empty barrier on a write-through device w/ ordered</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tag has no command to issue and without any command</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to issue, ordering by tag can't be used.  Drain</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * instead.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordered\">ordered</a> &amp; <a class=\"id\" href=\"#QUEUE_ORDERED_BY_TAG\">QUEUE_ORDERED_BY_TAG</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordered\">ordered</a> &amp; <a class=\"id\" href=\"#QUEUE_ORDERED_DO_PREFLUSH\">QUEUE_ORDERED_DO_PREFLUSH</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordered\">ordered</a> &= ~<a class=\"id\" href=\"#QUEUE_ORDERED_BY_TAG\">QUEUE_ORDERED_BY_TAG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordered\">ordered</a> |= <a class=\"id\" href=\"#QUEUE_ORDERED_BY_DRAIN\">QUEUE_ORDERED_BY_DRAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* stash away the original request */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_dequeue_request\">blk_dequeue_request</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#orig_bar_rq\">orig_bar_rq</a> = <a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Queue ordered sequence.  As we stack them at the head, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to queue in reverse order.  Note that we rely on that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no fs request uses ELEVATOR_INSERT_FRONT and thus no fs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * request gets inbetween ordered sequence.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordered\">ordered</a> &amp; <a class=\"id\" href=\"#QUEUE_ORDERED_DO_POSTFLUSH\">QUEUE_ORDERED_DO_POSTFLUSH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flush\">queue_flush</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#QUEUE_ORDERED_DO_POSTFLUSH\">QUEUE_ORDERED_DO_POSTFLUSH</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#post_flush_rq\">post_flush_rq</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skip\">skip</a> |= <a class=\"id\" href=\"#QUEUE_ORDSEQ_POSTFLUSH\">QUEUE_ORDSEQ_POSTFLUSH</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordered\">ordered</a> &amp; <a class=\"id\" href=\"#QUEUE_ORDERED_DO_BAR\">QUEUE_ORDERED_DO_BAR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#bar_rq\">bar_rq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* initialize proxy request and queue it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_init\">blk_rq_init</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_data_dir\">bio_data_dir</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#orig_bar_rq\">orig_bar_rq</a>-><a class=\"id\" href=\"#bio\">bio</a>) == <a class=\"id\" href=\"#WRITE\">WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_WRITE\">REQ_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordered\">ordered</a> &amp; <a class=\"id\" href=\"#QUEUE_ORDERED_DO_FUA\">QUEUE_ORDERED_DO_FUA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_FUA\">REQ_FUA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_request_from_bio\">init_request_from_bio</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#orig_bar_rq\">orig_bar_rq</a>-><a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#end_io\">end_io</a> = <a class=\"id\" href=\"#bar_end_io\">bar_end_io</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elv_insert\">elv_insert</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#ELEVATOR_INSERT_FRONT\">ELEVATOR_INSERT_FRONT</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skip\">skip</a> |= <a class=\"id\" href=\"#QUEUE_ORDSEQ_BAR\">QUEUE_ORDSEQ_BAR</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordered\">ordered</a> &amp; <a class=\"id\" href=\"#QUEUE_ORDERED_DO_PREFLUSH\">QUEUE_ORDERED_DO_PREFLUSH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flush\">queue_flush</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#QUEUE_ORDERED_DO_PREFLUSH\">QUEUE_ORDERED_DO_PREFLUSH</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pre_flush_rq\">pre_flush_rq</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skip\">skip</a> |= <a class=\"id\" href=\"#QUEUE_ORDSEQ_PREFLUSH\">QUEUE_ORDSEQ_PREFLUSH</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordered\">ordered</a> &amp; <a class=\"id\" href=\"#QUEUE_ORDERED_BY_DRAIN\">QUEUE_ORDERED_BY_DRAIN</a>) && <a class=\"id\" href=\"#queue_in_flight\">queue_in_flight</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skip\">skip</a> |= <a class=\"id\" href=\"#QUEUE_ORDSEQ_DRAIN\">QUEUE_ORDSEQ_DRAIN</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rqp\">rqp</a> = <a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Complete skipped sequences.  If whole sequence is complete,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return false to tell elevator that this request is gone.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#blk_ordered_complete_seq\">blk_ordered_complete_seq</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#skip\">skip</a>, 0);", 
"}", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#blk_do_ordered\">blk_do_ordered</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> **<a class=\"id\" href=\"#rqp\">rqp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a> = *<a class=\"id\" href=\"#rqp\">rqp</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#is_barrier\">is_barrier</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> == <a class=\"id\" href=\"#REQ_TYPE_FS\">REQ_TYPE_FS</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordseq\">ordseq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_barrier\">is_barrier</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#next_ordered\">next_ordered</a> != <a class=\"id\" href=\"#QUEUE_ORDERED_NONE\">QUEUE_ORDERED_NONE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#start_ordered\">start_ordered</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rqp\">rqp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Queue ordering not supported.  Terminate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * with prejudice.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_dequeue_request\">blk_dequeue_request</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__blk_end_request_all\">__blk_end_request_all</a>(<a class=\"id\" href=\"#rq\">rq</a>, -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rqp\">rqp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ordered sequence in progress</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Special requests are not subject to ordering rules. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> != <a class=\"id\" href=\"#REQ_TYPE_FS\">REQ_TYPE_FS</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#rq\">rq</a> != &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#pre_flush_rq\">pre_flush_rq</a> && <a class=\"id\" href=\"#rq\">rq</a> != &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#post_flush_rq\">post_flush_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#ordered\">ordered</a> &amp; <a class=\"id\" href=\"#QUEUE_ORDERED_BY_TAG\">QUEUE_ORDERED_BY_TAG</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ordered by tag.  Blocking the next barrier is enough. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_barrier\">is_barrier</a> && <a class=\"id\" href=\"#rq\">rq</a> != &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#bar_rq\">bar_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rqp\">rqp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ordered by draining.  Wait for turn. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#blk_ordered_req_seq\">blk_ordered_req_seq</a>(<a class=\"id\" href=\"#rq\">rq</a>) &lt; <a class=\"id\" href=\"#blk_ordered_cur_seq\">blk_ordered_cur_seq</a>(<a class=\"id\" href=\"#q\">q</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_ordered_req_seq\">blk_ordered_req_seq</a>(<a class=\"id\" href=\"#rq\">rq</a>) &gt; <a class=\"id\" href=\"#blk_ordered_cur_seq\">blk_ordered_cur_seq</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rqp\">rqp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#bio_end_empty_barrier\">bio_end_empty_barrier</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, int <a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#BIO_EOPNOTSUPP\">BIO_EOPNOTSUPP</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#BIO_UPTODATE\">BIO_UPTODATE</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blkdev_issue_flush - queue a flush</span>", 
"<span class=\"comment\"> * @bdev:<span class=\"ts\"/>blockdev to issue flush for</span>", 
"<span class=\"comment\"> * @gfp_mask:<span class=\"ts\"/>memory allocation flags (for bio_alloc)</span>", 
"<span class=\"comment\"> * @error_sector:<span class=\"ts\"/>error sector</span>", 
"<span class=\"comment\"> * @flags:<span class=\"ts\"/>BLKDEV_IFL_* flags to control behaviour</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Issue a flush for the block device in question. Caller can supply</span>", 
"<span class=\"comment\"> *    room for storing the error offset in case of a flush error, if they</span>", 
"<span class=\"comment\"> *    wish to. If WAIT flag is not passed then caller may check only what</span>", 
"<span class=\"comment\"> *    request was pushed in some internal queue for later handling.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#blkdev_issue_flush\">blkdev_issue_flush</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> *<a class=\"id\" href=\"#error_sector\">error_sector</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_COMPLETION_ONSTACK\">DECLARE_COMPLETION_ONSTACK</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * some block devices may not have their queue correctly set up here</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (e.g. loop device without a backing file) and so issuing a flush</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here will panic. Ensure there is a request function before issuing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the barrier.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#make_request_fn\">make_request_fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio_alloc\">bio_alloc</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_end_io\">bi_end_io</a> = <a class=\"id\" href=\"#bio_end_empty_barrier\">bio_end_empty_barrier</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a> = <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#BLKDEV_WAIT\">BLKDEV_WAIT</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a> = &amp;<a class=\"id\" href=\"#wait\">wait</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_get\">bio_get</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#submit_bio\">submit_bio</a>(<a class=\"id\" href=\"#WRITE_BARRIER\">WRITE_BARRIER</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#BLKDEV_WAIT\">BLKDEV_WAIT</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The driver must store the error location in -&gt;bi_sector, if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it supports it. For non-stacked drivers, this should be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * copied from blk_rq_pos(rq).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error_sector\">error_sector</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#error_sector\">error_sector</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_flagged\">bio_flagged</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#BIO_EOPNOTSUPP\">BIO_EOPNOTSUPP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#bio_flagged\">bio_flagged</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#BIO_UPTODATE\">BIO_UPTODATE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blkdev_issue_flush\">blkdev_issue_flush</a>);", 
];
xr_frag_insert('l/a8/ec511e8c75b648062cd8a282a20d5bbc6fdbe3.xr', __xr_tmp);
