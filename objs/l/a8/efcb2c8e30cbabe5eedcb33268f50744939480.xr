var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Oct 15, 2000 Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * Nicer crc32 functions/docs submitted by linux@horizon.com.  Thanks!</span>", 
"<span class=\"comment\"> * Code was from the public domain, copyright abandoned.  Code was</span>", 
"<span class=\"comment\"> * subsequently included in the kernel, thus was re-licensed under the</span>", 
"<span class=\"comment\"> * GNU GPL v2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Oct 12, 2000 Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * Same crc32 function was used in 5 other places in the kernel.</span>", 
"<span class=\"comment\"> * I made one version, and deleted the others.</span>", 
"<span class=\"comment\"> * There are various incantations of crc32().  Some use a seed of 0 or ~0.</span>", 
"<span class=\"comment\"> * Some xor at the end with ~0.  The generic crc32() function takes</span>", 
"<span class=\"comment\"> * seed as an argument, and doesn't xor at the end.  Then individual</span>", 
"<span class=\"comment\"> * users can do whatever they need.</span>", 
"<span class=\"comment\"> *   drivers/net/smc9194.c uses seed ~0, doesn't xor with ~0.</span>", 
"<span class=\"comment\"> *   fs/jffs2 uses seed 0, doesn't xor with ~0.</span>", 
"<span class=\"comment\"> *   fs/partitions/efi.c uses seed ~0, xor's with ~0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This source code is licensed under the GNU General Public License,</span>", 
"<span class=\"comment\"> * Version 2.  See the file COPYING for more details.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#crc32\">crc32</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"crc32defs.h\"", 
"#if <a class=\"id\" href=\"#CRC_LE_BITS\">CRC_LE_BITS</a> == 8", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tole\">tole</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#__constant_cpu_to_le32\">__constant_cpu_to_le32</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tole\">tole</a>(<a class=\"id\" href=\"#x\">x</a>) (<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#CRC_BE_BITS\">CRC_BE_BITS</a> == 8", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tobe\">tobe</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#__constant_cpu_to_be32\">__constant_cpu_to_be32</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#tobe\">tobe</a>(<a class=\"id\" href=\"#x\">x</a>) (<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#include\">include</a> \"crc32table.h\"", 
"", 
"<a class=\"id\" href=\"#MODULE_AUTHOR\">MODULE_AUTHOR</a>(\"Matt Domsch <Matt_Domsch@dell.com>\");", 
"<a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(\"Ethernet CRC32 calculations\");", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"", 
"#if <a class=\"id\" href=\"#CRC_LE_BITS\">CRC_LE_BITS</a> == 8 || <a class=\"id\" href=\"#CRC_BE_BITS\">CRC_BE_BITS</a> == 8", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a>", 
"<a class=\"id\" href=\"#crc32_body\">crc32_body</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#crc\">crc</a>, unsigned char const *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, const <a class=\"id\" href=\"#u32\">u32</a> (*<a class=\"id\" href=\"#tab\">tab</a>)[256])", 
"{", 
"# <a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__LITTLE_ENDIAN\">__LITTLE_ENDIAN</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DO_CRC\">DO_CRC</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#crc\">crc</a> = <a class=\"id\" href=\"#tab\">tab</a>[0][(<a class=\"id\" href=\"#crc\">crc</a> ^ (<a class=\"id\" href=\"#x\">x</a>)) &amp; 255] ^ (<a class=\"id\" href=\"#crc\">crc</a> >> 8)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DO_CRC4\">DO_CRC4</a> <a class=\"id\" href=\"#crc\">crc</a> = <a class=\"id\" href=\"#tab\">tab</a>[3][(<a class=\"id\" href=\"#crc\">crc</a>) &amp; 255] ^ \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tab\">tab</a>[2][(<a class=\"id\" href=\"#crc\">crc</a> >> 8) &amp; 255] ^ \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tab\">tab</a>[1][(<a class=\"id\" href=\"#crc\">crc</a> >> 16) &amp; 255] ^ \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tab\">tab</a>[0][(<a class=\"id\" href=\"#crc\">crc</a> >> 24) &amp; 255]", 
"# else", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DO_CRC\">DO_CRC</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#crc\">crc</a> = <a class=\"id\" href=\"#tab\">tab</a>[0][((<a class=\"id\" href=\"#crc\">crc</a> >> 24) ^ (<a class=\"id\" href=\"#x\">x</a>)) &amp; 255] ^ (<a class=\"id\" href=\"#crc\">crc</a> << 8)", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DO_CRC4\">DO_CRC4</a> <a class=\"id\" href=\"#crc\">crc</a> = <a class=\"id\" href=\"#tab\">tab</a>[0][(<a class=\"id\" href=\"#crc\">crc</a>) &amp; 255] ^ \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tab\">tab</a>[1][(<a class=\"id\" href=\"#crc\">crc</a> >> 8) &amp; 255] ^ \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tab\">tab</a>[2][(<a class=\"id\" href=\"#crc\">crc</a> >> 16) &amp; 255] ^ \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tab\">tab</a>[3][(<a class=\"id\" href=\"#crc\">crc</a> >> 24) &amp; 255]", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a>    <a class=\"id\" href=\"#rem_len\">rem_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Align it */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((long)<a class=\"id\" href=\"#buf\">buf</a> &amp; 3 && <a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DO_CRC\">DO_CRC</a>(*<a class=\"id\" href=\"#buf\">buf</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/>} while ((--<a class=\"id\" href=\"#len\">len</a>) && ((long)<a class=\"id\" href=\"#buf\">buf</a>)&amp;3);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rem_len\">rem_len</a> = <a class=\"id\" href=\"#len\">len</a> &amp; 3;", 
"<span class=\"ts\"/><span class=\"comment\">/* load data 32 bits wide, xor data 32 bits wide. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#len\">len</a> >> 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = (const <a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>for (--<a class=\"id\" href=\"#b\">b</a>; <a class=\"id\" href=\"#len\">len</a>; --<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> ^= *++<a class=\"id\" href=\"#b\">b</a>; <span class=\"comment\">/* use pre increment for speed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DO_CRC4\">DO_CRC4</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#rem_len\">rem_len</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* And the last few bytes */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#p\">p</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)(<a class=\"id\" href=\"#b\">b</a> + 1) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DO_CRC\">DO_CRC</a>(*++<a class=\"id\" href=\"#p\">p</a>); <span class=\"comment\">/* use pre increment for speed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (--<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#crc\">crc</a>;", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#DO_CRC\">DO_CRC</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#DO_CRC4\">DO_CRC4</a>", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * crc32_le() - Calculate bitwise little-endian Ethernet AUTODIN II CRC32</span>", 
"<span class=\"comment\"> * @crc: seed value for computation.  ~0 for Ethernet, sometimes 0 for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>other uses, or the previous crc32 value if computing incrementally.</span>", 
"<span class=\"comment\"> * @p: pointer to buffer over which CRC is run</span>", 
"<span class=\"comment\"> * @len: length of buffer @p</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__pure\">__pure</a> <a class=\"id\" href=\"#crc32_le\">crc32_le</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#crc\">crc</a>, unsigned char const *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"#if <a class=\"id\" href=\"#CRC_LE_BITS\">CRC_LE_BITS</a> == 1", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In fact, the table-based code will work in this case, but it can be</span>", 
"<span class=\"comment\"> * simplified by inlining the table in ?: form.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__pure\">__pure</a> <a class=\"id\" href=\"#crc32_le\">crc32_le</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#crc\">crc</a>, unsigned char const *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> ^= *<a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 8; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = (<a class=\"id\" href=\"#crc\">crc</a> >> 1) ^ ((<a class=\"id\" href=\"#crc\">crc</a> &amp; 1) ? <a class=\"id\" href=\"#CRCPOLY_LE\">CRCPOLY_LE</a> : 0);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#crc\">crc</a>;", 
"}", 
"#else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Table-based approach */</span>", 
"", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__pure\">__pure</a> <a class=\"id\" href=\"#crc32_le\">crc32_le</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#crc\">crc</a>, unsigned char const *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"# if <a class=\"id\" href=\"#CRC_LE_BITS\">CRC_LE_BITS</a> == 8", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u32\">u32</a>      (*<a class=\"id\" href=\"#tab\">tab</a>)[] = <a class=\"id\" href=\"#crc32table_le\">crc32table_le</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = <a class=\"id\" href=\"#__cpu_to_le32\">__cpu_to_le32</a>(<a class=\"id\" href=\"#crc\">crc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = <a class=\"id\" href=\"#crc32_body\">crc32_body</a>(<a class=\"id\" href=\"#crc\">crc</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#tab\">tab</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__le32_to_cpu\">__le32_to_cpu</a>(<a class=\"id\" href=\"#crc\">crc</a>);", 
"# <a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#CRC_LE_BITS\">CRC_LE_BITS</a> == 4", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> ^= *<a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = (<a class=\"id\" href=\"#crc\">crc</a> >> 4) ^ <a class=\"id\" href=\"#crc32table_le\">crc32table_le</a>[<a class=\"id\" href=\"#crc\">crc</a> &amp; 15];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = (<a class=\"id\" href=\"#crc\">crc</a> >> 4) ^ <a class=\"id\" href=\"#crc32table_le\">crc32table_le</a>[<a class=\"id\" href=\"#crc\">crc</a> &amp; 15];", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#crc\">crc</a>;", 
"# <a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#CRC_LE_BITS\">CRC_LE_BITS</a> == 2", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> ^= *<a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = (<a class=\"id\" href=\"#crc\">crc</a> >> 2) ^ <a class=\"id\" href=\"#crc32table_le\">crc32table_le</a>[<a class=\"id\" href=\"#crc\">crc</a> &amp; 3];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = (<a class=\"id\" href=\"#crc\">crc</a> >> 2) ^ <a class=\"id\" href=\"#crc32table_le\">crc32table_le</a>[<a class=\"id\" href=\"#crc\">crc</a> &amp; 3];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = (<a class=\"id\" href=\"#crc\">crc</a> >> 2) ^ <a class=\"id\" href=\"#crc32table_le\">crc32table_le</a>[<a class=\"id\" href=\"#crc\">crc</a> &amp; 3];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = (<a class=\"id\" href=\"#crc\">crc</a> >> 2) ^ <a class=\"id\" href=\"#crc32table_le\">crc32table_le</a>[<a class=\"id\" href=\"#crc\">crc</a> &amp; 3];", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#crc\">crc</a>;", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * crc32_be() - Calculate bitwise big-endian Ethernet AUTODIN II CRC32</span>", 
"<span class=\"comment\"> * @crc: seed value for computation.  ~0 for Ethernet, sometimes 0 for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>other uses, or the previous crc32 value if computing incrementally.</span>", 
"<span class=\"comment\"> * @p: pointer to buffer over which CRC is run</span>", 
"<span class=\"comment\"> * @len: length of buffer @p</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__pure\">__pure</a> <a class=\"id\" href=\"#crc32_be\">crc32_be</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#crc\">crc</a>, unsigned char const *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"#if <a class=\"id\" href=\"#CRC_BE_BITS\">CRC_BE_BITS</a> == 1", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In fact, the table-based code will work in this case, but it can be</span>", 
"<span class=\"comment\"> * simplified by inlining the table in ?: form.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__pure\">__pure</a> <a class=\"id\" href=\"#crc32_be\">crc32_be</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#crc\">crc</a>, unsigned char const *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> ^= *<a class=\"id\" href=\"#p\">p</a>++ << 24;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 8; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#crc\">crc</a> << 1) ^ ((<a class=\"id\" href=\"#crc\">crc</a> &amp; 0x80000000) ? <a class=\"id\" href=\"#CRCPOLY_BE\">CRCPOLY_BE</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  0);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#crc\">crc</a>;", 
"}", 
"", 
"#else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Table-based approach */</span>", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__pure\">__pure</a> <a class=\"id\" href=\"#crc32_be\">crc32_be</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#crc\">crc</a>, unsigned char const *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"# if <a class=\"id\" href=\"#CRC_BE_BITS\">CRC_BE_BITS</a> == 8", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u32\">u32</a>      (*<a class=\"id\" href=\"#tab\">tab</a>)[] = <a class=\"id\" href=\"#crc32table_be\">crc32table_be</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = <a class=\"id\" href=\"#__cpu_to_be32\">__cpu_to_be32</a>(<a class=\"id\" href=\"#crc\">crc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = <a class=\"id\" href=\"#crc32_body\">crc32_body</a>(<a class=\"id\" href=\"#crc\">crc</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#tab\">tab</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__be32_to_cpu\">__be32_to_cpu</a>(<a class=\"id\" href=\"#crc\">crc</a>);", 
"# <a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#CRC_BE_BITS\">CRC_BE_BITS</a> == 4", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> ^= *<a class=\"id\" href=\"#p\">p</a>++ << 24;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = (<a class=\"id\" href=\"#crc\">crc</a> << 4) ^ <a class=\"id\" href=\"#crc32table_be\">crc32table_be</a>[<a class=\"id\" href=\"#crc\">crc</a> >> 28];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = (<a class=\"id\" href=\"#crc\">crc</a> << 4) ^ <a class=\"id\" href=\"#crc32table_be\">crc32table_be</a>[<a class=\"id\" href=\"#crc\">crc</a> >> 28];", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#crc\">crc</a>;", 
"# <a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#CRC_BE_BITS\">CRC_BE_BITS</a> == 2", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> ^= *<a class=\"id\" href=\"#p\">p</a>++ << 24;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = (<a class=\"id\" href=\"#crc\">crc</a> << 2) ^ <a class=\"id\" href=\"#crc32table_be\">crc32table_be</a>[<a class=\"id\" href=\"#crc\">crc</a> >> 30];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = (<a class=\"id\" href=\"#crc\">crc</a> << 2) ^ <a class=\"id\" href=\"#crc32table_be\">crc32table_be</a>[<a class=\"id\" href=\"#crc\">crc</a> >> 30];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = (<a class=\"id\" href=\"#crc\">crc</a> << 2) ^ <a class=\"id\" href=\"#crc32table_be\">crc32table_be</a>[<a class=\"id\" href=\"#crc\">crc</a> >> 30];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = (<a class=\"id\" href=\"#crc\">crc</a> << 2) ^ <a class=\"id\" href=\"#crc32table_be\">crc32table_be</a>[<a class=\"id\" href=\"#crc\">crc</a> >> 30];", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#crc\">crc</a>;", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#crc32_le\">crc32_le</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#crc32_be\">crc32_be</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A brief CRC tutorial.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A CRC is a long-division remainder.  You add the CRC to the message,</span>", 
"<span class=\"comment\"> * and the whole thing (message+CRC) is a multiple of the given</span>", 
"<span class=\"comment\"> * CRC polynomial.  To check the CRC, you can either check that the</span>", 
"<span class=\"comment\"> * CRC matches the recomputed value, *or* you can check that the</span>", 
"<span class=\"comment\"> * remainder computed on the message+CRC is 0.  This latter approach</span>", 
"<span class=\"comment\"> * is used by a lot of hardware implementations, and is why so many</span>", 
"<span class=\"comment\"> * protocols put the end-of-frame flag after the CRC.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It's actually the same long division you learned in school, except that</span>", 
"<span class=\"comment\"> * - We're working in binary, so the digits are only 0 and 1, and</span>", 
"<span class=\"comment\"> * - When dividing polynomials, there are no carries.  Rather than add and</span>", 
"<span class=\"comment\"> *   subtract, we just xor.  Thus, we tend to get a bit sloppy about</span>", 
"<span class=\"comment\"> *   the difference between adding and subtracting.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A 32-bit CRC polynomial is actually 33 bits long.  But since it's</span>", 
"<span class=\"comment\"> * 33 bits long, bit 32 is always going to be set, so usually the CRC</span>", 
"<span class=\"comment\"> * is written in hex with the most significant bit omitted.  (If you're</span>", 
"<span class=\"comment\"> * familiar with the IEEE 754 floating-point format, it's the same idea.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that a CRC is computed over a string of *bits*, so you have</span>", 
"<span class=\"comment\"> * to decide on the endianness of the bits within each byte.  To get</span>", 
"<span class=\"comment\"> * the best error-detecting properties, this should correspond to the</span>", 
"<span class=\"comment\"> * order they're actually sent.  For example, standard RS-232 serial is</span>", 
"<span class=\"comment\"> * little-endian; the most significant bit (sometimes used for parity)</span>", 
"<span class=\"comment\"> * is sent last.  And when appending a CRC word to a message, you should</span>", 
"<span class=\"comment\"> * do it in the right order, matching the endianness.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Just like with ordinary division, the remainder is always smaller than</span>", 
"<span class=\"comment\"> * the divisor (the CRC polynomial) you're dividing by.  Each step of the</span>", 
"<span class=\"comment\"> * division, you take one more digit (bit) of the dividend and append it</span>", 
"<span class=\"comment\"> * to the current remainder.  Then you figure out the appropriate multiple</span>", 
"<span class=\"comment\"> * of the divisor to subtract to being the remainder back into range.</span>", 
"<span class=\"comment\"> * In binary, it's easy - it has to be either 0 or 1, and to make the</span>", 
"<span class=\"comment\"> * XOR cancel, it's just a copy of bit 32 of the remainder.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When computing a CRC, we don't care about the quotient, so we can</span>", 
"<span class=\"comment\"> * throw the quotient bit away, but subtract the appropriate multiple of</span>", 
"<span class=\"comment\"> * the polynomial from the remainder and we're back to where we started,</span>", 
"<span class=\"comment\"> * ready to process the next bit.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A big-endian CRC written this way would be coded like:</span>", 
"<span class=\"comment\"> * for (i = 0; i &lt; input_bits; i++) {</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>multiple = remainder &amp; 0x80000000 ? CRCPOLY : 0;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>remainder = (remainder &lt;&lt; 1 | next_input_bit()) ^ multiple;</span>", 
"<span class=\"comment\"> * }</span>", 
"<span class=\"comment\"> * Notice how, to get at bit 32 of the shifted remainder, we look</span>", 
"<span class=\"comment\"> * at bit 31 of the remainder *before* shifting it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * But also notice how the next_input_bit() bits we're shifting into</span>", 
"<span class=\"comment\"> * the remainder don't actually affect any decision-making until</span>", 
"<span class=\"comment\"> * 32 bits later.  Thus, the first 32 cycles of this are pretty boring.</span>", 
"<span class=\"comment\"> * Also, to add the CRC to a message, we need a 32-bit-long hole for it at</span>", 
"<span class=\"comment\"> * the end, so we have to add 32 extra cycles shifting in zeros at the</span>", 
"<span class=\"comment\"> * end of every message,</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So the standard trick is to rearrage merging in the next_input_bit()</span>", 
"<span class=\"comment\"> * until the moment it's needed.  Then the first 32 cycles can be precomputed,</span>", 
"<span class=\"comment\"> * and merging in the final 32 zero bits to make room for the CRC can be</span>", 
"<span class=\"comment\"> * skipped entirely.</span>", 
"<span class=\"comment\"> * This changes the code to:</span>", 
"<span class=\"comment\"> * for (i = 0; i &lt; input_bits; i++) {</span>", 
"<span class=\"comment\"> *      remainder ^= next_input_bit() &lt;&lt; 31;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>multiple = (remainder &amp; 0x80000000) ? CRCPOLY : 0;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>remainder = (remainder &lt;&lt; 1) ^ multiple;</span>", 
"<span class=\"comment\"> * }</span>", 
"<span class=\"comment\"> * With this optimization, the little-endian code is simpler:</span>", 
"<span class=\"comment\"> * for (i = 0; i &lt; input_bits; i++) {</span>", 
"<span class=\"comment\"> *      remainder ^= next_input_bit();</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>multiple = (remainder &amp; 1) ? CRCPOLY : 0;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>remainder = (remainder &gt;&gt; 1) ^ multiple;</span>", 
"<span class=\"comment\"> * }</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that the other details of endianness have been hidden in CRCPOLY</span>", 
"<span class=\"comment\"> * (which must be bit-reversed) and next_input_bit().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * However, as long as next_input_bit is returning the bits in a sensible</span>", 
"<span class=\"comment\"> * order, we can actually do the merging 8 or more bits at a time rather</span>", 
"<span class=\"comment\"> * than one bit at a time:</span>", 
"<span class=\"comment\"> * for (i = 0; i &lt; input_bytes; i++) {</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>remainder ^= next_input_byte() &lt;&lt; 24;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>for (j = 0; j &lt; 8; j++) {</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>multiple = (remainder &amp; 0x80000000) ? CRCPOLY : 0;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>remainder = (remainder &lt;&lt; 1) ^ multiple;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>}</span>", 
"<span class=\"comment\"> * }</span>", 
"<span class=\"comment\"> * Or in little-endian:</span>", 
];
xr_frag_insert('l/a8/efcb2c8e30cbabe5eedcb33268f50744939480.xr', __xr_tmp);
