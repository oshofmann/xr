var __xr_tmp = [
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ata_acpi_dissociate - dissociate ATA host from ACPI objects</span>", 
"<span class=\"comment\"> * @host: target ATA host</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called during driver detach after the whole host</span>", 
"<span class=\"comment\"> * is shut down.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * EH context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_acpi_dissociate\">ata_acpi_dissociate</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Restore initial _GTM values so that driver which attaches</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * afterward can use them too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#ata_acpi_gtm\">ata_acpi_gtm</a> *<a class=\"id\" href=\"#gtm\">gtm</a> = <a class=\"id\" href=\"#ata_acpi_init_gtm\">ata_acpi_init_gtm</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> && <a class=\"id\" href=\"#gtm\">gtm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_acpi_stm\">ata_acpi_stm</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#gtm\">gtm</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ata_acpi_gtm - execute _GTM</span>", 
"<span class=\"comment\"> * @ap: target ATA port</span>", 
"<span class=\"comment\"> * @gtm: out parameter for _GTM result</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Evaluate _GTM and store the result in @gtm.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * EH context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 0 on success, -ENOENT if _GTM doesn't exist, -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_acpi_gtm\">ata_acpi_gtm</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, struct <a class=\"id\" href=\"#ata_acpi_gtm\">ata_acpi_gtm</a> *<a class=\"id\" href=\"#gtm\">gtm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_buffer\">acpi_buffer</a> <a class=\"id\" href=\"#output\">output</a> = { .<a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE_BUFFER\">ACPI_ALLOCATE_BUFFER</a> };", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_object\">acpi_object</a> *<a class=\"id\" href=\"#out_obj\">out_obj</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a>, \"_GTM\", <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#output\">output</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_printk\">ata_port_printk</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"ACPI get timing mode failed (AE 0x%x)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out_obj\">out_obj</a> = <a class=\"id\" href=\"#output\">output</a>.<a class=\"id\" href=\"#pointer\">pointer</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out_obj\">out_obj</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_BUFFER\">ACPI_TYPE_BUFFER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_printk\">ata_port_printk</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"_GTM returned unexpected object type 0x%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_obj\">out_obj</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out_obj\">out_obj</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a> != sizeof(struct <a class=\"id\" href=\"#ata_acpi_gtm\">ata_acpi_gtm</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_printk\">ata_port_printk</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"_GTM returned invalid length %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_obj\">out_obj</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#gtm\">gtm</a>, <a class=\"id\" href=\"#out_obj\">out_obj</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>, sizeof(struct <a class=\"id\" href=\"#ata_acpi_gtm\">ata_acpi_gtm</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
" <a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#output\">output</a>.<a class=\"id\" href=\"#pointer\">pointer</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_acpi_gtm\">ata_acpi_gtm</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ata_acpi_stm - execute _STM</span>", 
"<span class=\"comment\"> * @ap: target ATA port</span>", 
"<span class=\"comment\"> * @stm: timing parameter to _STM</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Evaluate _STM with timing parameter @stm.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * EH context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 0 on success, -ENOENT if _STM doesn't exist, -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_acpi_stm\">ata_acpi_stm</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, const struct <a class=\"id\" href=\"#ata_acpi_gtm\">ata_acpi_gtm</a> *<a class=\"id\" href=\"#stm\">stm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_acpi_gtm\">ata_acpi_gtm</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stm_buf\">stm_buf</a> = *<a class=\"id\" href=\"#stm\">stm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_object_list\">acpi_object_list</a>         <a class=\"id\" href=\"#input\">input</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_object\">acpi_object</a>               <a class=\"id\" href=\"#in_params\">in_params</a>[3];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_params\">in_params</a>[0].<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ACPI_TYPE_BUFFER\">ACPI_TYPE_BUFFER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_params\">in_params</a>[0].<a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a> = sizeof(struct <a class=\"id\" href=\"#ata_acpi_gtm\">ata_acpi_gtm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_params\">in_params</a>[0].<a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)&amp;<a class=\"id\" href=\"#stm_buf\">stm_buf</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Buffers for id may need byteswapping ? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_params\">in_params</a>[1].<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ACPI_TYPE_BUFFER\">ACPI_TYPE_BUFFER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_params\">in_params</a>[1].<a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a> = 512;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_params\">in_params</a>[1].<a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#device\">device</a>[0].<a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_params\">in_params</a>[2].<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ACPI_TYPE_BUFFER\">ACPI_TYPE_BUFFER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_params\">in_params</a>[2].<a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a> = 512;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_params\">in_params</a>[2].<a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#device\">device</a>[1].<a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input\">input</a>.<a class=\"id\" href=\"#count\">count</a> = 3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input\">input</a>.<a class=\"id\" href=\"#pointer\">pointer</a> = <a class=\"id\" href=\"#in_params\">in_params</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a>, \"_STM\", &amp;<a class=\"id\" href=\"#input\">input</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_printk\">ata_port_printk</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"ACPI set timing mode failed (status=0x%x)\\n\", <a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_acpi_stm\">ata_acpi_stm</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ata_dev_get_GTF - get the drive bootup default taskfile settings</span>", 
"<span class=\"comment\"> * @dev: target ATA device</span>", 
"<span class=\"comment\"> * @gtf: output parameter for buffer containing _GTF taskfile arrays</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This applies to both PATA and SATA drives.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The _GTF method has no input parameters.</span>", 
"<span class=\"comment\"> * It returns a variable number of register set values (registers</span>", 
"<span class=\"comment\"> * hex 1F1..1F7, taskfiles).</span>", 
"<span class=\"comment\"> * The &lt;variable number&gt; is not known in advance, so have ACPI-CA</span>", 
"<span class=\"comment\"> * allocate the buffer as needed and return it, then free it later.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * EH context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Number of taskfiles on success, 0 if _GTF doesn't exist.  -EINVAL</span>", 
"<span class=\"comment\"> * if _GTF is invalid.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ata_dev_get_GTF\">ata_dev_get_GTF</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#ata_acpi_gtf\">ata_acpi_gtf</a> **<a class=\"id\" href=\"#gtf\">gtf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_buffer\">acpi_buffer</a> <a class=\"id\" href=\"#output\">output</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_object\">acpi_object</a> *<a class=\"id\" href=\"#out_obj\">out_obj</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if _GTF is cached, use the cached value */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#gtf_cache\">gtf_cache</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_obj\">out_obj</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#gtf_cache\">gtf_cache</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set up output buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#output\">output</a>.<a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE_BUFFER\">ACPI_ALLOCATE_BUFFER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#output\">output</a>.<a class=\"id\" href=\"#pointer\">pointer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"comment\">/* ACPI-CA sets this; save/free it later */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_msg_probe\">ata_msg_probe</a>(<a class=\"id\" href=\"#ap\">ap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, \"%s: ENTER: port#: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#port_no\">port_no</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* _GTF has no input parameters */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a>, \"_GTF\", <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#output\">output</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out_obj\">out_obj</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#gtf_cache\">gtf_cache</a> = <a class=\"id\" href=\"#output\">output</a>.<a class=\"id\" href=\"#pointer\">pointer</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"_GTF evaluation failed (AE 0x%x)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#output\">output</a>.<a class=\"id\" href=\"#length\">length</a> || !<a class=\"id\" href=\"#output\">output</a>.<a class=\"id\" href=\"#pointer\">pointer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_msg_probe\">ata_msg_probe</a>(<a class=\"id\" href=\"#ap\">ap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, \"%s: Run _GTF: \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"length or ptr is NULL (0x%llx, 0x%p)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#output\">output</a>.<a class=\"id\" href=\"#length\">length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#output\">output</a>.<a class=\"id\" href=\"#pointer\">pointer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out_obj\">out_obj</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_BUFFER\">ACPI_TYPE_BUFFER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"_GTF unexpected object type 0x%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#out_obj\">out_obj</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out_obj\">out_obj</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a> % <a class=\"id\" href=\"#REGS_PER_GTF\">REGS_PER_GTF</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"unexpected _GTF length (%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#out_obj\">out_obj</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#out_obj\">out_obj</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a> / <a class=\"id\" href=\"#REGS_PER_GTF\">REGS_PER_GTF</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gtf\">gtf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#gtf\">gtf</a> = (void *)<a class=\"id\" href=\"#out_obj\">out_obj</a>-><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_msg_probe\">ata_msg_probe</a>(<a class=\"id\" href=\"#ap\">ap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"%s: returning gtf=%p, gtf_count=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, *<a class=\"id\" href=\"#gtf\">gtf</a>, <a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
" <a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_acpi_clear_gtf\">ata_acpi_clear_gtf</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ata_acpi_gtm_xfermode - determine xfermode from GTM parameter</span>", 
"<span class=\"comment\"> * @dev: target device</span>", 
"<span class=\"comment\"> * @gtm: GTM parameter to use</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determine xfermask for @dev from @gtm.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Determined xfermask.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#ata_acpi_gtm_xfermask\">ata_acpi_gtm_xfermask</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#ata_acpi_gtm\">ata_acpi_gtm</a> *<a class=\"id\" href=\"#gtm\">gtm</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#unit\">unit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#mode\">mode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we always use the 0 slot for crap hardware */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unit\">unit</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gtm\">gtm</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; 0x10))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unit\">unit</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* PIO */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#ata_timing_cycle2mode\">ata_timing_cycle2mode</a>(<a class=\"id\" href=\"#ATA_SHIFT_PIO\">ATA_SHIFT_PIO</a>, <a class=\"id\" href=\"#gtm\">gtm</a>-><a class=\"id\" href=\"#drive\">drive</a>[<a class=\"id\" href=\"#unit\">unit</a>].<a class=\"id\" href=\"#pio\">pio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> |= <a class=\"id\" href=\"#ata_xfer_mode2mask\">ata_xfer_mode2mask</a>(<a class=\"id\" href=\"#mode\">mode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* See if we have MWDMA or UDMA data. We don't bother with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MWDMA if UDMA is available as this means the BIOS set UDMA</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and our error changedown if it works is UDMA to PIO anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gtm\">gtm</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (1 << (2 * <a class=\"id\" href=\"#unit\">unit</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ATA_SHIFT_MWDMA\">ATA_SHIFT_MWDMA</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#ata_timing_cycle2mode\">ata_timing_cycle2mode</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#gtm\">gtm</a>-><a class=\"id\" href=\"#drive\">drive</a>[<a class=\"id\" href=\"#unit\">unit</a>].<a class=\"id\" href=\"#dma\">dma</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> |= <a class=\"id\" href=\"#ata_xfer_mode2mask\">ata_xfer_mode2mask</a>(<a class=\"id\" href=\"#mode\">mode</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xfer_mask\">xfer_mask</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_acpi_gtm_xfermask\">ata_acpi_gtm_xfermask</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ata_acpi_cbl_80wire<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>Check for 80 wire cable</span>", 
"<span class=\"comment\"> * @ap: Port to check</span>", 
"<span class=\"comment\"> * @gtm: GTM data to use</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 1 if the @gtm indicates the BIOS selected an 80wire mode.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_acpi_cbl_80wire\">ata_acpi_cbl_80wire</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, const struct <a class=\"id\" href=\"#ata_acpi_gtm\">ata_acpi_gtm</a> *<a class=\"id\" href=\"#gtm\">gtm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_dev\">ata_for_each_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ENABLED\">ENABLED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#xfer_mask\">xfer_mask</a>, <a class=\"id\" href=\"#udma_mask\">udma_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> = <a class=\"id\" href=\"#ata_acpi_gtm_xfermask\">ata_acpi_gtm_xfermask</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#gtm\">gtm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_unpack_xfermask\">ata_unpack_xfermask</a>(<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#udma_mask\">udma_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#udma_mask\">udma_mask</a> &amp; ~<a class=\"id\" href=\"#ATA_UDMA_MASK_40C\">ATA_UDMA_MASK_40C</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_acpi_cbl_80wire\">ata_acpi_cbl_80wire</a>);", 
"", 
"static void <a class=\"id\" href=\"#ata_acpi_gtf_to_tf\">ata_acpi_gtf_to_tf</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#ata_acpi_gtf\">ata_acpi_gtf</a> *<a class=\"id\" href=\"#gtf\">gtf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_tf_init\">ata_tf_init</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#tf\">tf</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_ISADDR\">ATA_TFLAG_ISADDR</a> | <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATA_PROT_NODATA\">ATA_PROT_NODATA</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#feature\">feature</a> = <a class=\"id\" href=\"#gtf\">gtf</a>-><a class=\"id\" href=\"#tf\">tf</a>[0];<span class=\"ts\"/><span class=\"comment\">/* 0x1f1 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a>   = <a class=\"id\" href=\"#gtf\">gtf</a>-><a class=\"id\" href=\"#tf\">tf</a>[1];<span class=\"ts\"/><span class=\"comment\">/* 0x1f2 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbal\">lbal</a>    = <a class=\"id\" href=\"#gtf\">gtf</a>-><a class=\"id\" href=\"#tf\">tf</a>[2];<span class=\"ts\"/><span class=\"comment\">/* 0x1f3 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a>    = <a class=\"id\" href=\"#gtf\">gtf</a>-><a class=\"id\" href=\"#tf\">tf</a>[3];<span class=\"ts\"/><span class=\"comment\">/* 0x1f4 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a>    = <a class=\"id\" href=\"#gtf\">gtf</a>-><a class=\"id\" href=\"#tf\">tf</a>[4];<span class=\"ts\"/><span class=\"comment\">/* 0x1f5 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a>  = <a class=\"id\" href=\"#gtf\">gtf</a>-><a class=\"id\" href=\"#tf\">tf</a>[5];<span class=\"ts\"/><span class=\"comment\">/* 0x1f6 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#gtf\">gtf</a>-><a class=\"id\" href=\"#tf\">tf</a>[6];<span class=\"ts\"/><span class=\"comment\">/* 0x1f7 */</span>", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ata_acpi_filter_tf\">ata_acpi_filter_tf</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#ptf\">ptf</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#gtf_filter\">gtf_filter</a> &amp; <a class=\"id\" href=\"#ATA_ACPI_FILTER_SETXFER\">ATA_ACPI_FILTER_SETXFER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* libata doesn't use ACPI to configure transfer mode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It will only confuse device configuration.  Skip.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> == <a class=\"id\" href=\"#ATA_CMD_SET_FEATURES\">ATA_CMD_SET_FEATURES</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#feature\">feature</a> == <a class=\"id\" href=\"#SETFEATURES_XFER\">SETFEATURES_XFER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#gtf_filter\">gtf_filter</a> &amp; <a class=\"id\" href=\"#ATA_ACPI_FILTER_LOCK\">ATA_ACPI_FILTER_LOCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* BIOS writers, sorry but we don't wanna lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * features unless the user explicitly said so.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* DEVICE CONFIGURATION FREEZE LOCK */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> == <a class=\"id\" href=\"#ATA_CMD_CONF_OVERLAY\">ATA_CMD_CONF_OVERLAY</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#feature\">feature</a> == <a class=\"id\" href=\"#ATA_DCO_FREEZE_LOCK\">ATA_DCO_FREEZE_LOCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SECURITY FREEZE LOCK */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> == <a class=\"id\" href=\"#ATA_CMD_SEC_FREEZE_LOCK\">ATA_CMD_SEC_FREEZE_LOCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SET MAX LOCK and SET MAX FREEZE LOCK */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((!<a class=\"id\" href=\"#ptf\">ptf</a> || <a class=\"id\" href=\"#ptf\">ptf</a>-><a class=\"id\" href=\"#command\">command</a> != <a class=\"id\" href=\"#ATA_CMD_READ_NATIVE_MAX\">ATA_CMD_READ_NATIVE_MAX</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> == <a class=\"id\" href=\"#ATA_CMD_SET_MAX\">ATA_CMD_SET_MAX</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#feature\">feature</a> == <a class=\"id\" href=\"#ATA_SET_MAX_LOCK\">ATA_SET_MAX_LOCK</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#feature\">feature</a> == <a class=\"id\" href=\"#ATA_SET_MAX_FREEZE_LOCK\">ATA_SET_MAX_FREEZE_LOCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> == <a class=\"id\" href=\"#ATA_CMD_SET_FEATURES\">ATA_CMD_SET_FEATURES</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#feature\">feature</a> == <a class=\"id\" href=\"#SETFEATURES_SATA_ENABLE\">SETFEATURES_SATA_ENABLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* inhibit enabling DIPM */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#gtf_filter\">gtf_filter</a> &amp; <a class=\"id\" href=\"#ATA_ACPI_FILTER_DIPM\">ATA_ACPI_FILTER_DIPM</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a> == <a class=\"id\" href=\"#SATA_DIPM\">SATA_DIPM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* inhibit FPDMA non-zero offset */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#gtf_filter\">gtf_filter</a> &amp; <a class=\"id\" href=\"#ATA_ACPI_FILTER_FPDMA_OFFSET\">ATA_ACPI_FILTER_FPDMA_OFFSET</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a> == <a class=\"id\" href=\"#SATA_FPDMA_OFFSET\">SATA_FPDMA_OFFSET</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a> == <a class=\"id\" href=\"#SATA_FPDMA_IN_ORDER\">SATA_FPDMA_IN_ORDER</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* inhibit FPDMA auto activation */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#gtf_filter\">gtf_filter</a> &amp; <a class=\"id\" href=\"#ATA_ACPI_FILTER_FPDMA_AA\">ATA_ACPI_FILTER_FPDMA_AA</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a> == <a class=\"id\" href=\"#SATA_FPDMA_AA\">SATA_FPDMA_AA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ata_acpi_run_tf - send taskfile registers to host controller</span>", 
"<span class=\"comment\"> * @dev: target ATA device</span>", 
"<span class=\"comment\"> * @gtf: raw ATA taskfile register set (0x1f1 - 0x1f7)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Outputs ATA taskfile to standard ATA host controller using MMIO</span>", 
"<span class=\"comment\"> * or PIO as indicated by the ATA_FLAG_MMIO flag.</span>", 
"<span class=\"comment\"> * Writes the control, feature, nsect, lbal, lbam, and lbah registers.</span>", 
"<span class=\"comment\"> * Optionally (ATA_TFLAG_LBA48) writes hob_feature, hob_nsect,</span>", 
"<span class=\"comment\"> * hob_lbal, hob_lbam, and hob_lbah.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function waits for idle (!BUSY and !DRQ) after writing</span>", 
"<span class=\"comment\"> * registers.  If the control register has a new value, this</span>", 
"<span class=\"comment\"> * function also waits for idle after writing control and before</span>", 
"<span class=\"comment\"> * writing the remaining registers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * EH context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 1 if command is executed successfully.  0 if ignored, rejected or</span>", 
"<span class=\"comment\"> * filtered out, -errno on other errors.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ata_acpi_run_tf\">ata_acpi_run_tf</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#ata_acpi_gtf\">ata_acpi_gtf</a> *<a class=\"id\" href=\"#gtf\">gtf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#ata_acpi_gtf\">ata_acpi_gtf</a> *<a class=\"id\" href=\"#prev_gtf\">prev_gtf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#pptf\">pptf</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> <a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#ptf\">ptf</a>, <a class=\"id\" href=\"#rtf\">rtf</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#descr\">descr</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#msg\">msg</a>[60];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#gtf\">gtf</a>-><a class=\"id\" href=\"#tf\">tf</a>[0] == 0) && (<a class=\"id\" href=\"#gtf\">gtf</a>-><a class=\"id\" href=\"#tf\">tf</a>[1] == 0) && (<a class=\"id\" href=\"#gtf\">gtf</a>-><a class=\"id\" href=\"#tf\">tf</a>[2] == 0)", 
"<span class=\"ts\"/>    && (<a class=\"id\" href=\"#gtf\">gtf</a>-><a class=\"id\" href=\"#tf\">tf</a>[3] == 0) && (<a class=\"id\" href=\"#gtf\">gtf</a>-><a class=\"id\" href=\"#tf\">tf</a>[4] == 0) && (<a class=\"id\" href=\"#gtf\">gtf</a>-><a class=\"id\" href=\"#tf\">tf</a>[5] == 0)", 
"<span class=\"ts\"/>    && (<a class=\"id\" href=\"#gtf\">gtf</a>-><a class=\"id\" href=\"#tf\">tf</a>[6] == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_acpi_gtf_to_tf\">ata_acpi_gtf_to_tf</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#gtf\">gtf</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev_gtf\">prev_gtf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_acpi_gtf_to_tf\">ata_acpi_gtf_to_tf</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#prev_gtf\">prev_gtf</a>, &amp;<a class=\"id\" href=\"#ptf\">ptf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pptf\">pptf</a> = &amp;<a class=\"id\" href=\"#ptf\">ptf</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_acpi_filter_tf\">ata_acpi_filter_tf</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#pptf\">pptf</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtf\">rtf</a> = <a class=\"id\" href=\"#tf\">tf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#ata_exec_internal\">ata_exec_internal</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#rtf\">rtf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#err_mask\">err_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#msg\">msg</a>, sizeof(<a class=\"id\" href=\"#msg\">msg</a>), \"succeeded\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#AC_ERR_DEV\">AC_ERR_DEV</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#msg\">msg</a>, sizeof(<a class=\"id\" href=\"#msg\">msg</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"rejected by device (Stat=0x%02x Err=0x%02x)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#rtf\">rtf</a>.<a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#rtf\">rtf</a>.<a class=\"id\" href=\"#feature\">feature</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#msg\">msg</a>, sizeof(<a class=\"id\" href=\"#msg\">msg</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"failed (Emask=0x%x Stat=0x%02x Err=0x%02x)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#err_mask\">err_mask</a>, <a class=\"id\" href=\"#rtf\">rtf</a>.<a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#rtf\">rtf</a>.<a class=\"id\" href=\"#feature\">feature</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#msg\">msg</a>, sizeof(<a class=\"id\" href=\"#msg\">msg</a>), \"filtered out\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#descr\">descr</a> = <a class=\"id\" href=\"#ata_get_cmd_descript\">ata_get_cmd_descript</a>(<a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#level\">level</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"ACPI cmd %02x/%02x:%02x:%02x:%02x:%02x:%02x (%s) %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#feature\">feature</a>, <a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#nsect\">nsect</a>, <a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#lbal\">lbal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#lbam\">lbam</a>, <a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#lbah\">lbah</a>, <a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#device\">device</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#descr\">descr</a> ? <a class=\"id\" href=\"#descr\">descr</a> : \"unknown\"), <a class=\"id\" href=\"#msg\">msg</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ata_acpi_exec_tfs - get then write drive taskfile settings</span>", 
"<span class=\"comment\"> * @dev: target ATA device</span>", 
"<span class=\"comment\"> * @nr_executed: out parameter for the number of executed commands</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Evaluate _GTF and execute returned taskfiles.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * EH context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Number of executed taskfiles on success, 0 if _GTF doesn't exist.</span>", 
"<span class=\"comment\"> * -errno on other errors.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ata_acpi_exec_tfs\">ata_acpi_exec_tfs</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int *<a class=\"id\" href=\"#nr_executed\">nr_executed</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_acpi_gtf\">ata_acpi_gtf</a> *<a class=\"id\" href=\"#gtf\">gtf</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#pgtf\">pgtf</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#gtf_count\">gtf_count</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* get taskfiles */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_dev_get_GTF\">ata_dev_get_GTF</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#gtf\">gtf</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gtf_count\">gtf_count</a> = <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* execute them */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#gtf_count\">gtf_count</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#gtf\">gtf</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_acpi_run_tf\">ata_acpi_run_tf</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#gtf\">gtf</a>, <a class=\"id\" href=\"#pgtf\">pgtf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#nr_executed\">nr_executed</a>)++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgtf\">pgtf</a> = <a class=\"id\" href=\"#gtf\">gtf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_acpi_clear_gtf\">ata_acpi_clear_gtf</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ata_acpi_push_id - send Identify data to drive</span>", 
"<span class=\"comment\"> * @dev: target ATA device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * _SDD ACPI object: for SATA mode only</span>", 
"<span class=\"comment\"> * Must be after Identify (Packet) Device -- uses its data</span>", 
"<span class=\"comment\"> * ATM this function never returns a failure.  It is an optional</span>", 
"<span class=\"comment\"> * method and if it fails for whatever reason, we should still</span>", 
"<span class=\"comment\"> * just keep going.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * EH context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 0 on success, -ENOENT if _SDD doesn't exist, -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ata_acpi_push_id\">ata_acpi_push_id</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_object_list\">acpi_object_list</a> <a class=\"id\" href=\"#input\">input</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_object\">acpi_object</a> <a class=\"id\" href=\"#in_params\">in_params</a>[1];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_msg_probe\">ata_msg_probe</a>(<a class=\"id\" href=\"#ap\">ap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, \"%s: ix = %d, port#: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a>, <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#port_no\">port_no</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Give the drive Identify data to the drive via the _SDD method */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* _SDD: set up input parameters */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input\">input</a>.<a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input\">input</a>.<a class=\"id\" href=\"#pointer\">pointer</a> = <a class=\"id\" href=\"#in_params\">in_params</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_params\">in_params</a>[0].<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ACPI_TYPE_BUFFER\">ACPI_TYPE_BUFFER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_params\">in_params</a>[0].<a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a> = sizeof(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>[0]) * <a class=\"id\" href=\"#ATA_ID_WORDS\">ATA_ID_WORDS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#in_params\">in_params</a>[0].<a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Output buffer: _SDD has no output */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* It's OK for _SDD to be missing too. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap_buf_le16\">swap_buf_le16</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#ATA_ID_WORDS\">ATA_ID_WORDS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a>, \"_SDD\", &amp;<a class=\"id\" href=\"#input\">input</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap_buf_le16\">swap_buf_le16</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#ATA_ID_WORDS\">ATA_ID_WORDS</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"ACPI _SDD failed (AE 0x%x)\\n\", <a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ata_acpi_on_suspend - ATA ACPI hook called on suspend</span>", 
"<span class=\"comment\"> * @ap: target ATA port</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called when @ap is about to be suspended.  All</span>", 
"<span class=\"comment\"> * devices are already put to sleep but the port_suspend() callback</span>", 
"<span class=\"comment\"> * hasn't been executed yet.  Error return from this function aborts</span>", 
"<span class=\"comment\"> * suspend.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * EH context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 0 on success, -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_acpi_on_suspend\">ata_acpi_on_suspend</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* nada */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ata_acpi_on_resume - ATA ACPI hook called on resume</span>", 
"<span class=\"comment\"> * @ap: target ATA port</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called when @ap is resumed - right after port</span>", 
"<span class=\"comment\"> * itself is resumed but before any EH action is taken.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * EH context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_acpi_on_resume\">ata_acpi_on_resume</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ata_acpi_gtm\">ata_acpi_gtm</a> *<a class=\"id\" href=\"#gtm\">gtm</a> = <a class=\"id\" href=\"#ata_acpi_init_gtm\">ata_acpi_init_gtm</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> && <a class=\"id\" href=\"#gtm\">gtm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* _GTM valid */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* restore timing parameters */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_acpi_stm\">ata_acpi_stm</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#gtm\">gtm</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* _GTF should immediately follow _STM so that it can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * use values set by _STM.  Cache _GTF result and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * schedule _GTF.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_dev\">ata_for_each_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ALL\">ALL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_acpi_clear_gtf\">ata_acpi_clear_gtf</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_dev_enabled\">ata_dev_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ata_dev_get_GTF\">ata_dev_get_GTF</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>) >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_DFLAG_ACPI_PENDING\">ATA_DFLAG_ACPI_PENDING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SATA _GTF needs to be evaulated after _SDD and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * there's no reason to evaluate IDE _GTF early</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * without _STM.  Clear cache and schedule _GTF.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_dev\">ata_for_each_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ALL\">ALL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_acpi_clear_gtf\">ata_acpi_clear_gtf</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_dev_enabled\">ata_dev_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_DFLAG_ACPI_PENDING\">ATA_DFLAG_ACPI_PENDING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ata_acpi_set_state - set the port power state</span>", 
"<span class=\"comment\"> * @ap: target ATA port</span>", 
"<span class=\"comment\"> * @state: state, on/off</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function executes the _PS0/_PS3 ACPI method to set the power state.</span>", 
"<span class=\"comment\"> * ACPI spec requires _PS0 when IDE power on and _PS3 when power off</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_acpi_set_state\">ata_acpi_set_state</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> || (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_ACPI_SATA\">ATA_FLAG_ACPI_SATA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* channel first and then drives for power on and vica versa</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   for power off */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#event\">event</a> == <a class=\"id\" href=\"#PM_EVENT_ON\">PM_EVENT_ON</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_bus_set_power\">acpi_bus_set_power</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a>, <a class=\"id\" href=\"#ACPI_STATE_D0\">ACPI_STATE_D0</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_dev\">ata_for_each_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ENABLED\">ENABLED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_bus_set_power\">acpi_bus_set_power</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#event\">event</a> == <a class=\"id\" href=\"#PM_EVENT_ON\">PM_EVENT_ON</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_STATE_D0\">ACPI_STATE_D0</a> : <a class=\"id\" href=\"#ACPI_STATE_D3\">ACPI_STATE_D3</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#event\">event</a> != <a class=\"id\" href=\"#PM_EVENT_ON\">PM_EVENT_ON</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_bus_set_power\">acpi_bus_set_power</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a>, <a class=\"id\" href=\"#ACPI_STATE_D3\">ACPI_STATE_D3</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ata_acpi_on_devcfg - ATA ACPI hook called on device donfiguration</span>", 
"<span class=\"comment\"> * @dev: target ATA device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called when @dev is about to be configured.</span>", 
"<span class=\"comment\"> * IDENTIFY data might have been modified after this hook is run.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * EH context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Positive number if IDENTIFY data needs to be refreshed, 0 if not,</span>", 
"<span class=\"comment\"> * -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_acpi_on_devcfg\">ata_acpi_on_devcfg</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_eh_context\">ata_eh_context</a> *<a class=\"id\" href=\"#ehc\">ehc</a> = &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#eh_context\">eh_context</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#acpi_sata\">acpi_sata</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_ACPI_SATA\">ATA_FLAG_ACPI_SATA</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_executed\">nr_executed</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do we need to do _GTF? */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_ACPI_PENDING\">ATA_DFLAG_ACPI_PENDING</a>) &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#acpi_sata\">acpi_sata</a> && (<a class=\"id\" href=\"#ehc\">ehc</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_EHI_DID_HARDRESET\">ATA_EHI_DID_HARDRESET</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do _SDD if SATA */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_sata\">acpi_sata</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_acpi_push_id\">ata_acpi_push_id</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> && <a class=\"id\" href=\"#rc\">rc</a> != -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#acpi_err\">acpi_err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do _GTF */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_acpi_exec_tfs\">ata_acpi_exec_tfs</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#nr_executed\">nr_executed</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#acpi_err\">acpi_err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#ATA_DFLAG_ACPI_PENDING\">ATA_DFLAG_ACPI_PENDING</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* refresh IDENTIFY page if any _GTF command has been executed */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_executed\">nr_executed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_dev_reread_id\">ata_dev_reread_id</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, \"failed to IDENTIFY \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"after ACPI commands\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#acpi_err\">acpi_err</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* ignore evaluation failure if we can continue safely */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == -<a class=\"id\" href=\"#EINVAL\">EINVAL</a> && !<a class=\"id\" href=\"#nr_executed\">nr_executed</a> && !(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_FROZEN\">ATA_PFLAG_FROZEN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* fail and let EH retry once more for unknown IO errors */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_ACPI_FAILED\">ATA_DFLAG_ACPI_FAILED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_DFLAG_ACPI_FAILED\">ATA_DFLAG_ACPI_FAILED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"ACPI: failed the second time, disabled\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We can safely continue if no _GTF command has been executed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and port is not frozen.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr_executed\">nr_executed</a> && !(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_FROZEN\">ATA_PFLAG_FROZEN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ata_acpi_on_disable - ATA ACPI hook called when a device is disabled</span>", 
"<span class=\"comment\"> * @dev: target ATA device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called when @dev is about to be disabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * LOCKING:</span>", 
"<span class=\"comment\"> * EH context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_acpi_on_disable\">ata_acpi_on_disable</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_acpi_clear_gtf\">ata_acpi_clear_gtf</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
];
xr_frag_insert('l/a8/efd16fafc750c5311d70ed1b20ac296018fd59.xr', __xr_tmp);
