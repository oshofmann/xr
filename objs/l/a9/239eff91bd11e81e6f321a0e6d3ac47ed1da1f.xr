var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NET<span class=\"ts\"/><span class=\"ts\"/>An implementation of the SOCKET network access protocol.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Version:<span class=\"ts\"/>@(#)socket.c<span class=\"ts\"/>1.1.93<span class=\"ts\"/>18/02/95</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:<span class=\"ts\"/>Orest Zborowski, &lt;obz@Kodak.COM&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Ross Biro</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Fred N. van Kempen, &lt;waltje@uWalt.NL.Mugnet.ORG&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fixes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Anonymous<span class=\"ts\"/>:<span class=\"ts\"/>NOTSOCK/BADF cleanup. Error fix in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>shutdown()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>verify_area() fixes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Removed DDI</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Jonathan Kamens<span class=\"ts\"/>:<span class=\"ts\"/>SOCK_DGRAM reconnect bug</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Moved a load of checks to the very</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>top level.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Move address structures to/from user</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>mode above the protocol layers.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Rob Janssen<span class=\"ts\"/>:<span class=\"ts\"/>Allow 0 length sends.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Asynchronous I/O support (cribbed from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>tty drivers).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Niibe Yutaka<span class=\"ts\"/>:<span class=\"ts\"/>Asynchronous I/O for writes (4.4BSD style)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Jeff Uphoff<span class=\"ts\"/>:<span class=\"ts\"/>Made max number of sockets command-line</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>configurable.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Matti Aarnio<span class=\"ts\"/>:<span class=\"ts\"/>Made the number of sockets dynamic,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>to be allocated when needed, and mr.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Uphoff's max is used as max to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>allowed to allocate.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Linus<span class=\"ts\"/><span class=\"ts\"/>:<span class=\"ts\"/>Argh. removed all the socket allocation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>altogether: it's in the inode now.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Made sock_alloc()/sock_release() public</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for NetROM and future kernel nfsd type</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>stuff.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>sendmsg/recvmsg basics.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Tom Dyas<span class=\"ts\"/>:<span class=\"ts\"/>Export net symbols.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Marcin Dalecki<span class=\"ts\"/>:<span class=\"ts\"/>Fixed problems with CONFIG_NET=\"n\".</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Added thread locking to sys_* calls</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for sockets. May have errors at the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>moment.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Kevin Buhr<span class=\"ts\"/>:<span class=\"ts\"/>Fixed the dumb errors in the above.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Andi Kleen<span class=\"ts\"/>:<span class=\"ts\"/>Some small cleanups, optimizations,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>and fixed a copy_from_user() bug.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Tigran Aivazian<span class=\"ts\"/>:<span class=\"ts\"/>sys_send(args) calls sys_sendto(args, NULL, 0)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Tigran Aivazian<span class=\"ts\"/>:<span class=\"ts\"/>Made listen(2) backlog sanity checks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>protocol-independent</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This module is effectively the top level interface to the BSD socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>paradigm.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Based upon Swansea University Computer Society NET3.039</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#net\">net</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#thread_info\">thread_info</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wanrouter\">wanrouter</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_bridge\">if_bridge</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_frad\">if_frad</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_vlan\">if_vlan</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compat\">compat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmod\">kmod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wireless\">wireless</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nsproxy\">nsproxy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#compat\">compat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#wext\">wext</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#cls_cgroup\">cls_cgroup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#sock\">sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netfilter\">netfilter</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_tun\">if_tun</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ipv6_route\">ipv6_route</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#route\">route</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sockios\">sockios</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#atalk\">atalk</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static int <a class=\"id\" href=\"#sock_no_open\">sock_no_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#irrelevant\">irrelevant</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#dontcare\">dontcare</a>);", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sock_aio_read\">sock_aio_read</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>);", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sock_aio_write\">sock_aio_write</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>);", 
"static int <a class=\"id\" href=\"#sock_mmap\">sock_mmap</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"static int <a class=\"id\" href=\"#sock_close\">sock_close</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"static unsigned int <a class=\"id\" href=\"#sock_poll\">sock_poll</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#poll_table_struct\">poll_table_struct</a> *<a class=\"id\" href=\"#wait\">wait</a>);", 
"static long <a class=\"id\" href=\"#sock_ioctl\">sock_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"static long <a class=\"id\" href=\"#compat_sock_ioctl\">compat_sock_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"static int <a class=\"id\" href=\"#sock_fasync\">sock_fasync</a>(int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, int <a class=\"id\" href=\"#on\">on</a>);", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sock_sendpage\">sock_sendpage</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>, int <a class=\"id\" href=\"#more\">more</a>);", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sock_splice_read\">sock_splice_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Socket files have a set of 'special' operations as well as the generic file ones. These don't appear</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in the operation structures but are done directly via the socketcall() multiplexor.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#socket_file_ops\">socket_file_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a> =<span class=\"ts\"/><a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a> =<span class=\"ts\"/><a class=\"id\" href=\"#no_llseek\">no_llseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#aio_read\">aio_read</a> =<span class=\"ts\"/><a class=\"id\" href=\"#sock_aio_read\">sock_aio_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#aio_write\">aio_write</a> =<span class=\"ts\"/><a class=\"id\" href=\"#sock_aio_write\">sock_aio_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poll\">poll</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_poll\">sock_poll</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unlocked_ioctl\">unlocked_ioctl</a> = <a class=\"id\" href=\"#sock_ioctl\">sock_ioctl</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#compat_ioctl\">compat_ioctl</a> = <a class=\"id\" href=\"#compat_sock_ioctl\">compat_sock_ioctl</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mmap\">mmap</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_mmap\">sock_mmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> =<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_no_open\">sock_no_open</a>,<span class=\"ts\"/><span class=\"comment\">/* special open code to disallow open via /proc */</span>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> =<span class=\"ts\"/><a class=\"id\" href=\"#sock_close\">sock_close</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fasync\">fasync</a> =<span class=\"ts\"/><a class=\"id\" href=\"#sock_fasync\">sock_fasync</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sendpage\">sendpage</a> =<span class=\"ts\"/><a class=\"id\" href=\"#sock_sendpage\">sock_sendpage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#splice_write\">splice_write</a> = <a class=\"id\" href=\"#generic_splice_sendpage\">generic_splice_sendpage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#splice_read\">splice_read</a> =<span class=\"ts\"/><a class=\"id\" href=\"#sock_splice_read\">sock_splice_read</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The protocol list. Each protocol is registered in here.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#net_family_lock\">net_family_lock</a>);", 
"static const struct <a class=\"id\" href=\"#net_proto_family\">net_proto_family</a> *<a class=\"id\" href=\"#net_families\">net_families</a>[<a class=\"id\" href=\"#NPROTO\">NPROTO</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Statistics counters of the socket lists</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(int, <a class=\"id\" href=\"#sockets_in_use\">sockets_in_use</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Support routines.</span>", 
"<span class=\"comment\"> * Move socket addresses back and forth across the kernel/user</span>", 
"<span class=\"comment\"> * divide and look after the messy bits.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>move_addr_to_kernel<span class=\"ts\"/>-<span class=\"ts\"/>copy a socket address into kernel space</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@uaddr: Address in user space</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@kaddr: Address in kernel space</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ulen: Length in user space</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The address is copied into kernel space. If the provided address is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>too long an error code of -EINVAL is returned. If the copy gives</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>invalid addresses -EFAULT is returned. On a success 0 is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#move_addr_to_kernel\">move_addr_to_kernel</a>(void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>, int <a class=\"id\" href=\"#ulen\">ulen</a>, struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#kaddr\">kaddr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ulen\">ulen</a> &lt; 0 || <a class=\"id\" href=\"#ulen\">ulen</a> &gt; sizeof(struct <a class=\"id\" href=\"#sockaddr_storage\">sockaddr_storage</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ulen\">ulen</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#kaddr\">kaddr</a>, <a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#ulen\">ulen</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#audit_sockaddr\">audit_sockaddr</a>(<a class=\"id\" href=\"#ulen\">ulen</a>, <a class=\"id\" href=\"#kaddr\">kaddr</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>move_addr_to_user<span class=\"ts\"/>-<span class=\"ts\"/>copy an address to user space</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@kaddr: kernel space address</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@klen: length of address in kernel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@uaddr: user space address</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ulen: pointer to user length field</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The value pointed to by ulen on entry is the buffer length available.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is overwritten with the buffer space used. -EINVAL is returned</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if an overlong buffer is specified or a negative buffer size. -EFAULT</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is returned if either the buffer or the length field are not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>accessible.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>After copying the data up to the limit the user specifies, the true</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>length of the data is written over the length limit the user</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>specified. Zero is returned for a success.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#move_addr_to_user\">move_addr_to_user</a>(struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#kaddr\">kaddr</a>, int <a class=\"id\" href=\"#klen\">klen</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uaddr\">uaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ulen\">ulen</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#ulen\">ulen</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#klen\">klen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#klen\">klen</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 0 || <a class=\"id\" href=\"#len\">len</a> &gt; sizeof(struct <a class=\"id\" href=\"#sockaddr_storage\">sockaddr_storage</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_sockaddr\">audit_sockaddr</a>(<a class=\"id\" href=\"#klen\">klen</a>, <a class=\"id\" href=\"#kaddr\">kaddr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#uaddr\">uaddr</a>, <a class=\"id\" href=\"#kaddr\">kaddr</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      \"fromlen shall refer to the value before truncation..\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *                      1003.1g</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__put_user\">__put_user</a>(<a class=\"id\" href=\"#klen\">klen</a>, <a class=\"id\" href=\"#ulen\">ulen</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#sock_inode_cachep\">sock_inode_cachep</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#sock_alloc_inode\">sock_alloc_inode</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket_alloc\">socket_alloc</a> *<a class=\"id\" href=\"#ei\">ei</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#sock_inode_cachep\">sock_inode_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ei\">ei</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#wq\">wq</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#socket_wq\">socket_wq</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#wq\">wq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#sock_inode_cachep\">sock_inode_cachep</a>, <a class=\"id\" href=\"#ei\">ei</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#fasync_list\">fasync_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#SS_UNCONNECTED\">SS_UNCONNECTED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#vfs_inode\">vfs_inode</a>;", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#wq_free_rcu\">wq_free_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket_wq\">socket_wq</a> *<a class=\"id\" href=\"#wq\">wq</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#socket_wq\">socket_wq</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#wq\">wq</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sock_destroy_inode\">sock_destroy_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket_alloc\">socket_alloc</a> *<a class=\"id\" href=\"#ei\">ei</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#socket_alloc\">socket_alloc</a>, <a class=\"id\" href=\"#vfs_inode\">vfs_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#wq_free_rcu\">wq_free_rcu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#sock_inode_cachep\">sock_inode_cachep</a>, <a class=\"id\" href=\"#ei\">ei</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#init_once\">init_once</a>(void *<a class=\"id\" href=\"#foo\">foo</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket_alloc\">socket_alloc</a> *<a class=\"id\" href=\"#ei\">ei</a> = (struct <a class=\"id\" href=\"#socket_alloc\">socket_alloc</a> *)<a class=\"id\" href=\"#foo\">foo</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode_init_once\">inode_init_once</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#vfs_inode\">vfs_inode</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#init_inodecache\">init_inodecache</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_inode_cachep\">sock_inode_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"sock_inode_cache\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      sizeof(struct <a class=\"id\" href=\"#socket_alloc\">socket_alloc</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (<a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#SLAB_MEM_SPREAD\">SLAB_MEM_SPREAD</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#init_once\">init_once</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sock_inode_cachep\">sock_inode_cachep</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#super_operations\">super_operations</a> <a class=\"id\" href=\"#sockfs_ops\">sockfs_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#alloc_inode\">alloc_inode</a><span class=\"ts\"/>= <a class=\"id\" href=\"#sock_alloc_inode\">sock_alloc_inode</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#destroy_inode\">destroy_inode</a><span class=\"ts\"/>= <a class=\"id\" href=\"#sock_destroy_inode\">sock_destroy_inode</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#statfs\">statfs</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#simple_statfs\">simple_statfs</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#sockfs_get_sb\">sockfs_get_sb</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#flags\">flags</a>, const char *<a class=\"id\" href=\"#dev_name\">dev_name</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_sb_pseudo\">get_sb_pseudo</a>(<a class=\"id\" href=\"#fs_type\">fs_type</a>, \"socket:\", &amp;<a class=\"id\" href=\"#sockfs_ops\">sockfs_ops</a>, <a class=\"id\" href=\"#SOCKFS_MAGIC\">SOCKFS_MAGIC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#sock_mnt\">sock_mnt</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> <a class=\"id\" href=\"#sock_fs_type\">sock_fs_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> =<span class=\"ts\"/><span class=\"ts\"/>\"sockfs\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_sb\">get_sb</a> =<span class=\"ts\"/><a class=\"id\" href=\"#sockfs_get_sb\">sockfs_get_sb</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#kill_sb\">kill_sb</a> =<span class=\"ts\"/><a class=\"id\" href=\"#kill_anon_super\">kill_anon_super</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sockfs_dname() is called from d_path().</span>", 
"<span class=\"comment\"> */</span>", 
"static char *<a class=\"id\" href=\"#sockfs_dname\">sockfs_dname</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dynamic_dname\">dynamic_dname</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, \"socket:[%lu]\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#dentry_operations\">dentry_operations</a> <a class=\"id\" href=\"#sockfs_dentry_operations\">sockfs_dentry_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#d_dname\">d_dname</a>  = <a class=\"id\" href=\"#sockfs_dname\">sockfs_dname</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Obtains the first available file descriptor and sets it up for use.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>These functions create file structures and maps them to fd space</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of the current process. On success it returns file descriptor</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and file struct implicitly stored in sock-&gt;file.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note that another thread may close file descriptor before we return</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from this function. We use the fact that now we do not refer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to socket after mapping. If one day we will need it, this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>function will increment ref. count on file by 1.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>In any case returned fd MAY BE not valid!</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This race condition is unavoidable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with shared fd spaces, we cannot solve it inside kernel,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>but we take care of internal coherence yet.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#sock_alloc_file\">sock_alloc_file</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, struct <a class=\"id\" href=\"#file\">file</a> **<a class=\"id\" href=\"#f\">f</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#qstr\">qstr</a> <a class=\"id\" href=\"#name\">name</a> = { .<a class=\"id\" href=\"#name\">name</a> = \"\" };", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fd\">fd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fd\">fd</a> = <a class=\"id\" href=\"#get_unused_fd_flags\">get_unused_fd_flags</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#fd\">fd</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fd\">fd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#d_alloc\">d_alloc</a>(<a class=\"id\" href=\"#sock_mnt\">sock_mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>, &amp;<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_unused_fd\">put_unused_fd</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mntget\">mntget</a>(<a class=\"id\" href=\"#sock_mnt\">sock_mnt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a> = &amp;<a class=\"id\" href=\"#sockfs_dentry_operations\">sockfs_dentry_operations</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_instantiate\">d_instantiate</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#SOCK_INODE\">SOCK_INODE</a>(<a class=\"id\" href=\"#sock\">sock</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SOCK_INODE\">SOCK_INODE</a>(<a class=\"id\" href=\"#sock\">sock</a>)-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#socket_file_ops\">socket_file_ops</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#alloc_file\">alloc_file</a>(&amp;<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a> | <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#socket_file_ops\">socket_file_ops</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#file\">file</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* drop dentry, keep inode */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_unused_fd\">put_unused_fd</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENFILE\">ENFILE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> = <a class=\"id\" href=\"#O_RDWR\">O_RDWR</a> | (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = <a class=\"id\" href=\"#sock\">sock</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fd\">fd</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#sock_map_fd\">sock_map_fd</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#newfile\">newfile</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fd\">fd</a> = <a class=\"id\" href=\"#sock_alloc_file\">sock_alloc_file</a>(<a class=\"id\" href=\"#sock\">sock</a>, &amp;<a class=\"id\" href=\"#newfile\">newfile</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#fd\">fd</a> >= 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fd_install\">fd_install</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#newfile\">newfile</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fd\">fd</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_map_fd\">sock_map_fd</a>);", 
"", 
"static struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock_from_file\">sock_from_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int *<a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> == &amp;<a class=\"id\" href=\"#socket_file_ops\">socket_file_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;<span class=\"ts\"/><span class=\"comment\">/* set in sock_map_fd */</span>", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOTSOCK\">ENOTSOCK</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sockfd_lookup - Go from a file number to its socket slot</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@fd: file handle</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@err: pointer to an error code return</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The file handle passed in is locked and the socket it is bound</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>too is returned. If an error occurs the err pointer is overwritten</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with a negative errno code and NULL is returned. The function checks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for both invalid handles and passing a handle which is not a socket.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On a success the socket object pointer is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sockfd_lookup\">sockfd_lookup</a>(int <a class=\"id\" href=\"#fd\">fd</a>, int *<a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#sock_from_file\">sock_from_file</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sock\">sock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sock\">sock</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sockfd_lookup\">sockfd_lookup</a>);", 
"", 
"static struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sockfd_lookup_light\">sockfd_lookup_light</a>(int <a class=\"id\" href=\"#fd\">fd</a>, int *<a class=\"id\" href=\"#err\">err</a>, int *<a class=\"id\" href=\"#fput_needed\">fput_needed</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget_light\">fget_light</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#fput_needed\">fput_needed</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#sock_from_file\">sock_from_file</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sock\">sock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sock\">sock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput_light\">fput_light</a>(<a class=\"id\" href=\"#file\">file</a>, *<a class=\"id\" href=\"#fput_needed\">fput_needed</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sock_alloc<span class=\"ts\"/>-<span class=\"ts\"/>allocate a socket</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate a new inode and socket object. The two are bound together</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and initialised. The socket is then returned. If we are out of inodes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NULL is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock_alloc\">sock_alloc</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#new_inode\">new_inode</a>(<a class=\"id\" href=\"#sock_mnt\">sock_mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#SOCKET_I\">SOCKET_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_annotate_bitfield\">kmemcheck_annotate_bitfield</a>(<a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#S_IFSOCK\">S_IFSOCK</a> | <a class=\"id\" href=\"#S_IRWXUGO\">S_IRWXUGO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> = <a class=\"id\" href=\"#current_fsuid\">current_fsuid</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> = <a class=\"id\" href=\"#current_fsgid\">current_fsgid</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_add\">percpu_add</a>(<a class=\"id\" href=\"#sockets_in_use\">sockets_in_use</a>, 1);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sock\">sock</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>In theory you can't get an open on this inode, but /proc provides</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a back door. Remember to keep it shut otherwise you'll let the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>creepy crawlies in.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#sock_no_open\">sock_no_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#irrelevant\">irrelevant</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#dontcare\">dontcare</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#bad_sock_fops\">bad_sock_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#sock_no_open\">sock_no_open</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sock_release<span class=\"ts\"/>-<span class=\"ts\"/>close a socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock: socket to close</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The socket is released from the protocol stack if it has a release</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>callback, and the inode is then released if the socket is bound to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>an inode not a file.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#sock_release\">sock_release</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#ops\">ops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#owner\">owner</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#release\">release</a>(<a class=\"id\" href=\"#sock\">sock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#fasync_list\">fasync_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"sock_release: fasync list not empty!\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_sub\">percpu_sub</a>(<a class=\"id\" href=\"#sockets_in_use\">sockets_in_use</a>, 1);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#SOCK_INODE\">SOCK_INODE</a>(<a class=\"id\" href=\"#sock\">sock</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_release\">sock_release</a>);", 
"", 
"int <a class=\"id\" href=\"#sock_tx_timestamp\">sock_tx_timestamp</a>(struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      union <a class=\"id\" href=\"#skb_shared_tx\">skb_shared_tx</a> *<a class=\"id\" href=\"#shtx\">shtx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shtx\">shtx</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_TIMESTAMPING_TX_HARDWARE\">SOCK_TIMESTAMPING_TX_HARDWARE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shtx\">shtx</a>-><a class=\"id\" href=\"#hardware\">hardware</a> = 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_TIMESTAMPING_TX_SOFTWARE\">SOCK_TIMESTAMPING_TX_SOFTWARE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shtx\">shtx</a>-><a class=\"id\" href=\"#software\">software</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_tx_timestamp\">sock_tx_timestamp</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__sock_sendmsg\">__sock_sendmsg</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock_iocb\">sock_iocb</a> *<a class=\"id\" href=\"#si\">si</a> = <a class=\"id\" href=\"#kiocb_to_siocb\">kiocb_to_siocb</a>(<a class=\"id\" href=\"#iocb\">iocb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_update_classid\">sock_update_classid</a>(<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#sock\">sock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#scm\">scm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#msg\">msg</a> = <a class=\"id\" href=\"#msg\">msg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_socket_sendmsg\">security_socket_sendmsg</a>(<a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sendmsg\">sendmsg</a>(<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#sock_sendmsg\">sock_sendmsg</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kiocb\">kiocb</a> <a class=\"id\" href=\"#iocb\">iocb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock_iocb\">sock_iocb</a> <a class=\"id\" href=\"#siocb\">siocb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_sync_kiocb\">init_sync_kiocb</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>.<a class=\"id\" href=\"#private\">private</a> = &amp;<a class=\"id\" href=\"#siocb\">siocb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__sock_sendmsg\">__sock_sendmsg</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (-<a class=\"id\" href=\"#EIOCBQUEUED\">EIOCBQUEUED</a> == <a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#wait_on_sync_kiocb\">wait_on_sync_kiocb</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_sendmsg\">sock_sendmsg</a>);", 
"", 
"int <a class=\"id\" href=\"#kernel_sendmsg\">kernel_sendmsg</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#kvec\">kvec</a> *<a class=\"id\" href=\"#vec\">vec</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a> <a class=\"id\" href=\"#oldfs\">oldfs</a> = <a class=\"id\" href=\"#get_fs\">get_fs</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#KERNEL_DS\">KERNEL_DS</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the following is safe, since for compiler definitions of kvec and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * iovec are identical, yielding the same in-core layout and alignment</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_iov\">msg_iov</a> = (struct <a class=\"id\" href=\"#iovec\">iovec</a> *)<a class=\"id\" href=\"#vec\">vec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_iovlen\">msg_iovlen</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#sock_sendmsg\">sock_sendmsg</a>(<a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#oldfs\">oldfs</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kernel_sendmsg\">kernel_sendmsg</a>);", 
"", 
"static int <a class=\"id\" href=\"#ktime2ts\">ktime2ts</a>(<a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#kt\">kt</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kt\">kt</a>.<a class=\"id\" href=\"#tv64\">tv64</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ts\">ts</a> = <a class=\"id\" href=\"#ktime_to_timespec\">ktime_to_timespec</a>(<a class=\"id\" href=\"#kt\">kt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * called from sock_recv_timestamp() if sock_flag(sk, SOCK_RCVTSTAMP)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__sock_recv_timestamp\">__sock_recv_timestamp</a>(struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#need_software_tstamp\">need_software_tstamp</a> = <a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_RCVTSTAMP\">SOCK_RCVTSTAMP</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a>[3];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#empty\">empty</a> = 1;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#skb_shared_hwtstamps\">skb_shared_hwtstamps</a> *<a class=\"id\" href=\"#shhwtstamps\">shhwtstamps</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_hwtstamps\">skb_hwtstamps</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Race occurred between timestamp enabling and packet</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   receiving.  Fill in the current time for now. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_software_tstamp\">need_software_tstamp</a> && <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a>.<a class=\"id\" href=\"#tv64\">tv64</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__net_timestamp\">__net_timestamp</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_software_tstamp\">need_software_tstamp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_RCVTSTAMPNS\">SOCK_RCVTSTAMPNS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#tv\">tv</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_get_timestamp\">skb_get_timestamp</a>(<a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#tv\">tv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cmsg\">put_cmsg</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#SOL_SOCKET\">SOL_SOCKET</a>, <a class=\"id\" href=\"#SCM_TIMESTAMP\">SCM_TIMESTAMP</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(<a class=\"id\" href=\"#tv\">tv</a>), &amp;<a class=\"id\" href=\"#tv\">tv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_get_timestampns\">skb_get_timestampns</a>(<a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#ts\">ts</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cmsg\">put_cmsg</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#SOL_SOCKET\">SOL_SOCKET</a>, <a class=\"id\" href=\"#SCM_TIMESTAMPNS\">SCM_TIMESTAMPNS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(<a class=\"id\" href=\"#ts\">ts</a>[0]), &amp;<a class=\"id\" href=\"#ts\">ts</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ts\">ts</a>, 0, sizeof(<a class=\"id\" href=\"#ts\">ts</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_TIMESTAMPING_SOFTWARE\">SOCK_TIMESTAMPING_SOFTWARE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_get_timestampns\">skb_get_timestampns</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ts\">ts</a> + 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#empty\">empty</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shhwtstamps\">shhwtstamps</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_TIMESTAMPING_SYS_HARDWARE\">SOCK_TIMESTAMPING_SYS_HARDWARE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ktime2ts\">ktime2ts</a>(<a class=\"id\" href=\"#shhwtstamps\">shhwtstamps</a>-><a class=\"id\" href=\"#syststamp\">syststamp</a>, <a class=\"id\" href=\"#ts\">ts</a> + 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#empty\">empty</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_TIMESTAMPING_RAW_HARDWARE\">SOCK_TIMESTAMPING_RAW_HARDWARE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ktime2ts\">ktime2ts</a>(<a class=\"id\" href=\"#shhwtstamps\">shhwtstamps</a>-><a class=\"id\" href=\"#hwtstamp\">hwtstamp</a>, <a class=\"id\" href=\"#ts\">ts</a> + 2))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#empty\">empty</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#empty\">empty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cmsg\">put_cmsg</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#SOL_SOCKET\">SOL_SOCKET</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SCM_TIMESTAMPING\">SCM_TIMESTAMPING</a>, sizeof(<a class=\"id\" href=\"#ts\">ts</a>), &amp;<a class=\"id\" href=\"#ts\">ts</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__sock_recv_timestamp\">__sock_recv_timestamp</a>);", 
"", 
"<a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sock_recv_drops\">sock_recv_drops</a>(struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_RXQ_OVFL\">SOCK_RXQ_OVFL</a>) && <a class=\"id\" href=\"#skb\">skb</a> && <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dropcount\">dropcount</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cmsg\">put_cmsg</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#SOL_SOCKET\">SOL_SOCKET</a>, <a class=\"id\" href=\"#SO_RXQ_OVFL\">SO_RXQ_OVFL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#__u32\">__u32</a>), &amp;<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dropcount\">dropcount</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__sock_recv_ts_and_drops\">__sock_recv_ts_and_drops</a>(struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_recv_timestamp\">sock_recv_timestamp</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_recv_drops\">sock_recv_drops</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__sock_recv_ts_and_drops\">__sock_recv_ts_and_drops</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__sock_recvmsg_nosec\">__sock_recvmsg_nosec</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock_iocb\">sock_iocb</a> *<a class=\"id\" href=\"#si\">si</a> = <a class=\"id\" href=\"#kiocb_to_siocb\">kiocb_to_siocb</a>(<a class=\"id\" href=\"#iocb\">iocb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_update_classid\">sock_update_classid</a>(<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#sock\">sock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#scm\">scm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#msg\">msg</a> = <a class=\"id\" href=\"#msg\">msg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#recvmsg\">recvmsg</a>(<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__sock_recvmsg\">__sock_recvmsg</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_socket_recvmsg\">security_socket_recvmsg</a>(<a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a> ?: <a class=\"id\" href=\"#__sock_recvmsg_nosec\">__sock_recvmsg_nosec</a>(<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#sock_recvmsg\">sock_recvmsg</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kiocb\">kiocb</a> <a class=\"id\" href=\"#iocb\">iocb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock_iocb\">sock_iocb</a> <a class=\"id\" href=\"#siocb\">siocb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_sync_kiocb\">init_sync_kiocb</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>.<a class=\"id\" href=\"#private\">private</a> = &amp;<a class=\"id\" href=\"#siocb\">siocb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__sock_recvmsg\">__sock_recvmsg</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (-<a class=\"id\" href=\"#EIOCBQUEUED\">EIOCBQUEUED</a> == <a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#wait_on_sync_kiocb\">wait_on_sync_kiocb</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_recvmsg\">sock_recvmsg</a>);", 
"", 
"static int <a class=\"id\" href=\"#sock_recvmsg_nosec\">sock_recvmsg_nosec</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kiocb\">kiocb</a> <a class=\"id\" href=\"#iocb\">iocb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock_iocb\">sock_iocb</a> <a class=\"id\" href=\"#siocb\">siocb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_sync_kiocb\">init_sync_kiocb</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>.<a class=\"id\" href=\"#private\">private</a> = &amp;<a class=\"id\" href=\"#siocb\">siocb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__sock_recvmsg_nosec\">__sock_recvmsg_nosec</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (-<a class=\"id\" href=\"#EIOCBQUEUED\">EIOCBQUEUED</a> == <a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#wait_on_sync_kiocb\">wait_on_sync_kiocb</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#kernel_recvmsg\">kernel_recvmsg</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#kvec\">kvec</a> *<a class=\"id\" href=\"#vec\">vec</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a> <a class=\"id\" href=\"#oldfs\">oldfs</a> = <a class=\"id\" href=\"#get_fs\">get_fs</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#KERNEL_DS\">KERNEL_DS</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the following is safe, since for compiler definitions of kvec and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * iovec are identical, yielding the same in-core layout and alignment</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_iov\">msg_iov</a> = (struct <a class=\"id\" href=\"#iovec\">iovec</a> *)<a class=\"id\" href=\"#vec\">vec</a>, <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_iovlen\">msg_iovlen</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#sock_recvmsg\">sock_recvmsg</a>(<a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#oldfs\">oldfs</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kernel_recvmsg\">kernel_recvmsg</a>);", 
"", 
"static void <a class=\"id\" href=\"#sock_aio_dtor\">sock_aio_dtor</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#private\">private</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sock_sendpage\">sock_sendpage</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>, int <a class=\"id\" href=\"#more\">more</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = !(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>) ? 0 : <a class=\"id\" href=\"#MSG_DONTWAIT\">MSG_DONTWAIT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#more\">more</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#MSG_MORE\">MSG_MORE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kernel_sendpage\">kernel_sendpage</a>(<a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sock_splice_read\">sock_splice_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#splice_read\">splice_read</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_update_classid\">sock_update_classid</a>(<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#splice_read\">splice_read</a>(<a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sock_iocb\">sock_iocb</a> *<a class=\"id\" href=\"#alloc_sock_iocb\">alloc_sock_iocb</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#sock_iocb\">sock_iocb</a> *<a class=\"id\" href=\"#siocb\">siocb</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_sync_kiocb\">is_sync_kiocb</a>(<a class=\"id\" href=\"#iocb\">iocb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#siocb\">siocb</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#siocb\">siocb</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#siocb\">siocb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_dtor\">ki_dtor</a> = <a class=\"id\" href=\"#sock_aio_dtor\">sock_aio_dtor</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#siocb\">siocb</a>-><a class=\"id\" href=\"#kiocb\">kiocb</a> = <a class=\"id\" href=\"#iocb\">iocb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#siocb\">siocb</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#siocb\">siocb</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#do_sock_read\">do_sock_read</a>(struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_segs\">nr_segs</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#iov\">iov</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#iov_len\">iov_len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_name\">msg_name</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_namelen\">msg_namelen</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_control\">msg_control</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_controllen\">msg_controllen</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_iov\">msg_iov</a> = (struct <a class=\"id\" href=\"#iovec\">iovec</a> *)<a class=\"id\" href=\"#iov\">iov</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_iovlen\">msg_iovlen</a> = <a class=\"id\" href=\"#nr_segs\">nr_segs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_flags\">msg_flags</a> = (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>) ? <a class=\"id\" href=\"#MSG_DONTWAIT\">MSG_DONTWAIT</a> : 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__sock_recvmsg\">__sock_recvmsg</a>(<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_flags\">msg_flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sock_aio_read\">sock_aio_read</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock_iocb\">sock_iocb</a> <a class=\"id\" href=\"#siocb\">siocb</a>, *<a class=\"id\" href=\"#x\">x</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ESPIPE\">ESPIPE</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_left\">ki_left</a> == 0)<span class=\"ts\"/><span class=\"comment\">/* Match SYS5 behaviour */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#alloc_sock_iocb\">alloc_sock_iocb</a>(<a class=\"id\" href=\"#iocb\">iocb</a>, &amp;<a class=\"id\" href=\"#siocb\">siocb</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x\">x</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_sock_read\">do_sock_read</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#async_msg\">async_msg</a>, <a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>, <a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#do_sock_write\">do_sock_write</a>(struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_segs\">nr_segs</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#iov\">iov</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#iov_len\">iov_len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_name\">msg_name</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_namelen\">msg_namelen</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_control\">msg_control</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_controllen\">msg_controllen</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_iov\">msg_iov</a> = (struct <a class=\"id\" href=\"#iovec\">iovec</a> *)<a class=\"id\" href=\"#iov\">iov</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_iovlen\">msg_iovlen</a> = <a class=\"id\" href=\"#nr_segs\">nr_segs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_flags\">msg_flags</a> = (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>) ? <a class=\"id\" href=\"#MSG_DONTWAIT\">MSG_DONTWAIT</a> : 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#SOCK_SEQPACKET\">SOCK_SEQPACKET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_flags\">msg_flags</a> |= <a class=\"id\" href=\"#MSG_EOR\">MSG_EOR</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__sock_sendmsg\">__sock_sendmsg</a>(<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sock_aio_write\">sock_aio_write</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock_iocb\">sock_iocb</a> <a class=\"id\" href=\"#siocb\">siocb</a>, *<a class=\"id\" href=\"#x\">x</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ESPIPE\">ESPIPE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#alloc_sock_iocb\">alloc_sock_iocb</a>(<a class=\"id\" href=\"#iocb\">iocb</a>, &amp;<a class=\"id\" href=\"#siocb\">siocb</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x\">x</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_sock_write\">do_sock_write</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#async_msg\">async_msg</a>, <a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>, <a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Atomic setting of ioctl hooks to avoid race</span>", 
"<span class=\"comment\"> * with module unload.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#br_ioctl_mutex\">br_ioctl_mutex</a>);", 
"static int (*<a class=\"id\" href=\"#br_ioctl_hook\">br_ioctl_hook</a>) (struct <a class=\"id\" href=\"#net\">net</a> *, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"void <a class=\"id\" href=\"#brioctl_set\">brioctl_set</a>(int (*<a class=\"id\" href=\"#hook\">hook</a>) (struct <a class=\"id\" href=\"#net\">net</a> *, unsigned int, void <a class=\"id\" href=\"#__user\">__user</a> *))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#br_ioctl_mutex\">br_ioctl_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_ioctl_hook\">br_ioctl_hook</a> = <a class=\"id\" href=\"#hook\">hook</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#br_ioctl_mutex\">br_ioctl_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#brioctl_set\">brioctl_set</a>);", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#vlan_ioctl_mutex\">vlan_ioctl_mutex</a>);", 
"static int (*<a class=\"id\" href=\"#vlan_ioctl_hook\">vlan_ioctl_hook</a>) (struct <a class=\"id\" href=\"#net\">net</a> *, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"void <a class=\"id\" href=\"#vlan_ioctl_set\">vlan_ioctl_set</a>(int (*<a class=\"id\" href=\"#hook\">hook</a>) (struct <a class=\"id\" href=\"#net\">net</a> *, void <a class=\"id\" href=\"#__user\">__user</a> *))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#vlan_ioctl_mutex\">vlan_ioctl_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vlan_ioctl_hook\">vlan_ioctl_hook</a> = <a class=\"id\" href=\"#hook\">hook</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#vlan_ioctl_mutex\">vlan_ioctl_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vlan_ioctl_set\">vlan_ioctl_set</a>);", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#dlci_ioctl_mutex\">dlci_ioctl_mutex</a>);", 
"static int (*<a class=\"id\" href=\"#dlci_ioctl_hook\">dlci_ioctl_hook</a>) (unsigned int, void <a class=\"id\" href=\"#__user\">__user</a> *);", 
"", 
"void <a class=\"id\" href=\"#dlci_ioctl_set\">dlci_ioctl_set</a>(int (*<a class=\"id\" href=\"#hook\">hook</a>) (unsigned int, void <a class=\"id\" href=\"#__user\">__user</a> *))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dlci_ioctl_mutex\">dlci_ioctl_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dlci_ioctl_hook\">dlci_ioctl_hook</a> = <a class=\"id\" href=\"#hook\">hook</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dlci_ioctl_mutex\">dlci_ioctl_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dlci_ioctl_set\">dlci_ioctl_set</a>);", 
"", 
"static long <a class=\"id\" href=\"#sock_do_ioctl\">sock_do_ioctl</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#argp\">argp</a> = (void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ioctl\">ioctl</a>(<a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this ioctl is unknown try to hand it down</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the NIC driver.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#ENOIOCTLCMD\">ENOIOCTLCMD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#dev_ioctl\">dev_ioctl</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#argp\">argp</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>With an ioctl, arg may well be a user mode pointer, but we don't know</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>what to do with it - that's up to the protocol still.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static long <a class=\"id\" href=\"#sock_ioctl\">sock_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#argp\">argp</a> = (void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> >= <a class=\"id\" href=\"#SIOCDEVPRIVATE\">SIOCDEVPRIVATE</a> && <a class=\"id\" href=\"#cmd\">cmd</a> <= (<a class=\"id\" href=\"#SIOCDEVPRIVATE\">SIOCDEVPRIVATE</a> + 15)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#dev_ioctl\">dev_ioctl</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#argp\">argp</a>);", 
"<span class=\"ts\"/>} else", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_WEXT_CORE\">CONFIG_WEXT_CORE</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a> >= <a class=\"id\" href=\"#SIOCIWFIRST\">SIOCIWFIRST</a> && <a class=\"id\" href=\"#cmd\">cmd</a> <= <a class=\"id\" href=\"#SIOCIWLAST\">SIOCIWLAST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#dev_ioctl\">dev_ioctl</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#argp\">argp</a>);", 
"<span class=\"ts\"/>} else", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FIOSETOWN\">FIOSETOWN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSPGRP\">SIOCSPGRP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#pid\">pid</a>, (int <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#argp\">argp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#f_setown\">f_setown</a>(<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#pid\">pid</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FIOGETOWN\">FIOGETOWN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCGPGRP\">SIOCGPGRP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#f_getown\">f_getown</a>(<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#file\">file</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       (int <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#argp\">argp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCGIFBR\">SIOCGIFBR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSIFBR\">SIOCSIFBR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCBRADDBR\">SIOCBRADDBR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCBRDELBR\">SIOCBRDELBR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOPKG\">ENOPKG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#br_ioctl_hook\">br_ioctl_hook</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"bridge\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#br_ioctl_mutex\">br_ioctl_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#br_ioctl_hook\">br_ioctl_hook</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#br_ioctl_hook\">br_ioctl_hook</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#argp\">argp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#br_ioctl_mutex\">br_ioctl_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCGIFVLAN\">SIOCGIFVLAN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCSIFVLAN\">SIOCSIFVLAN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOPKG\">ENOPKG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vlan_ioctl_hook\">vlan_ioctl_hook</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"8021q\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#vlan_ioctl_mutex\">vlan_ioctl_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vlan_ioctl_hook\">vlan_ioctl_hook</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#vlan_ioctl_hook\">vlan_ioctl_hook</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#argp\">argp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#vlan_ioctl_mutex\">vlan_ioctl_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCADDDLCI\">SIOCADDDLCI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCDELDLCI\">SIOCDELDLCI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOPKG\">ENOPKG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dlci_ioctl_hook\">dlci_ioctl_hook</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"dlci\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dlci_ioctl_mutex\">dlci_ioctl_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dlci_ioctl_hook\">dlci_ioctl_hook</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#dlci_ioctl_hook\">dlci_ioctl_hook</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#argp\">argp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dlci_ioctl_mutex\">dlci_ioctl_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sock_do_ioctl\">sock_do_ioctl</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#sock_create_lite\">sock_create_lite</a>(int <a class=\"id\" href=\"#family\">family</a>, int <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#protocol\">protocol</a>, struct <a class=\"id\" href=\"#socket\">socket</a> **<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_socket_create\">security_socket_create</a>(<a class=\"id\" href=\"#family\">family</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#protocol\">protocol</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#sock_alloc\">sock_alloc</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sock\">sock</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_socket_post_create\">security_socket_post_create</a>(<a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#family\">family</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#protocol\">protocol</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_release\">out_release</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#sock\">sock</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<a class=\"id\" href=\"#out_release\">out_release</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_release\">sock_release</a>(<a class=\"id\" href=\"#sock\">sock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sock_create_lite\">sock_create_lite</a>);", 
"", 
"<span class=\"comment\">/* No kernel lock held - perfect */</span>", 
"static unsigned int <a class=\"id\" href=\"#sock_poll\">sock_poll</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      We can't return errors to poll, so it's either yes or no.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#poll\">poll</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sock_mmap\">sock_mmap</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#mmap\">mmap</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#sock\">sock</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sock_close\">sock_close</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      It was possible the inode is NULL we were</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      closing an unfinished socket.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"sock_close: NULL inode\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_release\">sock_release</a>(<a class=\"id\" href=\"#SOCKET_I\">SOCKET_I</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Update the socket async list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Fasync_list locking strategy.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1. fasync_list is modified only under process context socket lock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   i.e. under semaphore.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2. fasync_list is used under read_lock(&amp;sk-&gt;sk_callback_lock)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   or under socket lock</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#sock_fasync\">sock_fasync</a>(int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, int <a class=\"id\" href=\"#on\">on</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>;", 
];
xr_frag_insert('l/a9/239eff91bd11e81e6f321a0e6d3ac47ed1da1f.xr', __xr_tmp);
