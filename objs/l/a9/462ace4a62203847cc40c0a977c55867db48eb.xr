var __xr_tmp = [
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>, <a class=\"id\" href=\"#end_pfn\">end_pfn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#start_page\">start_page</a>, *<a class=\"id\" href=\"#end_page\">end_page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_pfn\">start_pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a> &amp; ~(<a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>-1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_page\">start_page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#start_pfn\">start_pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_page\">end_page</a> = <a class=\"id\" href=\"#start_page\">start_page</a> + <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_pfn\">end_pfn</a> = <a class=\"id\" href=\"#start_pfn\">start_pfn</a> + <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a> - 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do not cross zone boundaries */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start_pfn\">start_pfn</a> &lt; <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_page\">start_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end_pfn\">end_pfn</a> >= <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> + <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#move_freepages\">move_freepages</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#start_page\">start_page</a>, <a class=\"id\" href=\"#end_page\">end_page</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#change_pageblock_range\">change_pageblock_range</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pageblock_page\">pageblock_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#start_order\">start_order</a>, int <a class=\"id\" href=\"#migratetype\">migratetype</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pageblocks\">nr_pageblocks</a> = 1 << (<a class=\"id\" href=\"#start_order\">start_order</a> - <a class=\"id\" href=\"#pageblock_order\">pageblock_order</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_pageblocks\">nr_pageblocks</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pageblock_migratetype\">set_pageblock_migratetype</a>(<a class=\"id\" href=\"#pageblock_page\">pageblock_page</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pageblock_page\">pageblock_page</a> += <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Remove an element from the buddy allocator from the fallback list */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#__rmqueue_fallback\">__rmqueue_fallback</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, int <a class=\"id\" href=\"#order\">order</a>, int <a class=\"id\" href=\"#start_migratetype\">start_migratetype</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#free_area\">free_area</a> * <a class=\"id\" href=\"#area\">area</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#current_order\">current_order</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the largest possible block of pages in the other list */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#current_order\">current_order</a> = <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>-1; <a class=\"id\" href=\"#current_order\">current_order</a> >= <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#current_order\">current_order</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MIGRATE_TYPES\">MIGRATE_TYPES</a> - 1; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migratetype\">migratetype</a> = <a class=\"id\" href=\"#fallbacks\">fallbacks</a>[<a class=\"id\" href=\"#start_migratetype\">start_migratetype</a>][<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* MIGRATE_RESERVE handled later if necessary */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#migratetype\">migratetype</a> == <a class=\"id\" href=\"#MIGRATE_RESERVE\">MIGRATE_RESERVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a> = &amp;(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#free_area\">free_area</a>[<a class=\"id\" href=\"#current_order\">current_order</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#free_list\">free_list</a>[<a class=\"id\" href=\"#migratetype\">migratetype</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#free_list\">free_list</a>[<a class=\"id\" href=\"#migratetype\">migratetype</a>].<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#nr_free\">nr_free</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If breaking a large block of pages, move all free</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pages to the preferred allocation list. If falling</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * back for a reclaimable kernel allocation, be more</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * agressive about taking ownership of free pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#current_order\">current_order</a> >= (<a class=\"id\" href=\"#pageblock_order\">pageblock_order</a> >> 1)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_migratetype\">start_migratetype</a> == <a class=\"id\" href=\"#MIGRATE_RECLAIMABLE\">MIGRATE_RECLAIMABLE</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_group_by_mobility_disabled\">page_group_by_mobility_disabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#move_freepages_block\">move_freepages_block</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_migratetype\">start_migratetype</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Claim the whole block if over half of it is free */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pages\">pages</a> >= (1 << (<a class=\"id\" href=\"#pageblock_order\">pageblock_order</a>-1)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_group_by_mobility_disabled\">page_group_by_mobility_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pageblock_migratetype\">set_pageblock_migratetype</a>(<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_migratetype\">start_migratetype</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migratetype\">migratetype</a> = <a class=\"id\" href=\"#start_migratetype\">start_migratetype</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Remove the page from the freelists */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rmv_page_order\">rmv_page_order</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Take ownership for orders &gt;= pageblock_order */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#current_order\">current_order</a> >= <a class=\"id\" href=\"#pageblock_order\">pageblock_order</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#change_pageblock_range\">change_pageblock_range</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#current_order\">current_order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_migratetype\">start_migratetype</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expand\">expand</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#current_order\">current_order</a>, <a class=\"id\" href=\"#area\">area</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_page_alloc_extfrag\">trace_mm_page_alloc_extfrag</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#current_order\">current_order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_migratetype\">start_migratetype</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do the hard work of removing an element from the buddy allocator.</span>", 
"<span class=\"comment\"> * Call me with the zone-&gt;lock already held.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#__rmqueue\">__rmqueue</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<a class=\"id\" href=\"#retry_reserve\">retry_reserve</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__rmqueue_smallest\">__rmqueue_smallest</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#page\">page</a>) && <a class=\"id\" href=\"#migratetype\">migratetype</a> != <a class=\"id\" href=\"#MIGRATE_RESERVE\">MIGRATE_RESERVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__rmqueue_fallback\">__rmqueue_fallback</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Use MIGRATE_RESERVE rather than fail an allocation. goto</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is used because __rmqueue_smallest is an inline function</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and we want just one call site</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migratetype\">migratetype</a> = <a class=\"id\" href=\"#MIGRATE_RESERVE\">MIGRATE_RESERVE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry_reserve\">retry_reserve</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_page_alloc_zone_locked\">trace_mm_page_alloc_zone_locked</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"<span class=\"comment\">/* </span>", 
"<span class=\"comment\"> * Obtain a specified number of elements from the buddy allocator, all under</span>", 
"<span class=\"comment\"> * a single hold of the lock, for efficiency.  Add them to the supplied list.</span>", 
"<span class=\"comment\"> * Returns the number of new pages which were placed at *list.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rmqueue_bulk\">rmqueue_bulk</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>, int <a class=\"id\" href=\"#cold\">cold</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__rmqueue\">__rmqueue</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Split buddy pages returned by expand() are received here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in physical page order. The page is added to the callers and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * list and the list head then moves forward. From the callers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * perspective, the linked list is ordered by page number in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * some conditions. This is useful for IO devices that can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * merge IO requests if the physical pages are ordered</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * properly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#cold\">cold</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>, -(<a class=\"id\" href=\"#i\">i</a> << <a class=\"id\" href=\"#order\">order</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from the vmstat counter updater to drain pagesets of this</span>", 
"<span class=\"comment\"> * currently executing processor on remote nodes after they have</span>", 
"<span class=\"comment\"> * expired.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this function must be called with the thread pinned to</span>", 
"<span class=\"comment\"> * a single processor.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#drain_zone_pages\">drain_zone_pages</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#per_cpu_pages\">per_cpu_pages</a> *<a class=\"id\" href=\"#pcp\">pcp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#to_drain\">to_drain</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#count\">count</a> >= <a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#batch\">batch</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_drain\">to_drain</a> = <a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#batch\">batch</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_drain\">to_drain</a> = <a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pcppages_bulk\">free_pcppages_bulk</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#to_drain\">to_drain</a>, <a class=\"id\" href=\"#pcp\">pcp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#to_drain\">to_drain</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Drain pages of the indicated processor.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The processor must either be the current processor and the</span>", 
"<span class=\"comment\"> * thread pinned to the current processor or a processor that</span>", 
"<span class=\"comment\"> * is not online.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#drain_pages\">drain_pages</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_populated_zone\">for_each_populated_zone</a>(<a class=\"id\" href=\"#zone\">zone</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#per_cpu_pageset\">per_cpu_pageset</a> *<a class=\"id\" href=\"#pset\">pset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#per_cpu_pages\">per_cpu_pages</a> *<a class=\"id\" href=\"#pcp\">pcp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pset\">pset</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pageset\">pageset</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcp\">pcp</a> = &amp;<a class=\"id\" href=\"#pset\">pset</a>-><a class=\"id\" href=\"#pcp\">pcp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pcppages_bulk\">free_pcppages_bulk</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#pcp\">pcp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Spill all of this CPU's per-cpu pages back into the buddy allocator.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#drain_local_pages\">drain_local_pages</a>(void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drain_pages\">drain_pages</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Spill all the per-cpu pages from all CPUs back into the buddy allocator</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#drain_all_pages\">drain_all_pages</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#drain_local_pages\">drain_local_pages</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIBERNATION\">CONFIG_HIBERNATION</a>", 
"", 
"void <a class=\"id\" href=\"#mark_free_pages\">mark_free_pages</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#curr\">curr</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> + <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#max_zone_pfn\">max_zone_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#swsusp_page_is_forbidden\">swsusp_page_is_forbidden</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_unset_page_free\">swsusp_unset_page_free</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_migratetype_order\">for_each_migratetype_order</a>(<a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#t\">t</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a>(<a class=\"id\" href=\"#curr\">curr</a>, &amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#free_area\">free_area</a>[<a class=\"id\" href=\"#order\">order</a>].<a class=\"id\" href=\"#free_list\">free_list</a>[<a class=\"id\" href=\"#t\">t</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#curr\">curr</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; (1UL << <a class=\"id\" href=\"#order\">order</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swsusp_set_page_free\">swsusp_set_page_free</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a> + <a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PM */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free a 0-order page</span>", 
"<span class=\"comment\"> * cold == 1 ? free a cold page : free a hot page</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#free_hot_cold_page\">free_hot_cold_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#cold\">cold</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#per_cpu_pages\">per_cpu_pages</a> *<a class=\"id\" href=\"#pcp\">pcp</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#wasMlocked\">wasMlocked</a> = <a class=\"id\" href=\"#__TestClearPageMlocked\">__TestClearPageMlocked</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#free_pages_prepare\">free_pages_prepare</a>(<a class=\"id\" href=\"#page\">page</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#migratetype\">migratetype</a> = <a class=\"id\" href=\"#get_pageblock_migratetype\">get_pageblock_migratetype</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#wasMlocked\">wasMlocked</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page_mlock\">free_page_mlock</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__count_vm_event\">__count_vm_event</a>(<a class=\"id\" href=\"#PGFREE\">PGFREE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We only track unmovable, reclaimable and movable on pcp lists.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Free ISOLATE pages back to the allocator because they are being</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * offlined but treat RESERVE as movable pages so we can get those</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * areas back if necessary. Otherwise, we may have to free</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * excessively into the page allocator</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#migratetype\">migratetype</a> >= <a class=\"id\" href=\"#MIGRATE_PCPTYPES\">MIGRATE_PCPTYPES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#migratetype\">migratetype</a> == <a class=\"id\" href=\"#MIGRATE_ISOLATE\">MIGRATE_ISOLATE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_one_page\">free_one_page</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#page\">page</a>, 0, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migratetype\">migratetype</a> = <a class=\"id\" href=\"#MIGRATE_MOVABLE\">MIGRATE_MOVABLE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcp\">pcp</a> = &amp;<a class=\"id\" href=\"#this_cpu_ptr\">this_cpu_ptr</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pageset\">pageset</a>)-><a class=\"id\" href=\"#pcp\">pcp</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cold\">cold</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#lists\">lists</a>[<a class=\"id\" href=\"#migratetype\">migratetype</a>]);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#lists\">lists</a>[<a class=\"id\" href=\"#migratetype\">migratetype</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#count\">count</a> >= <a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#high\">high</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pcppages_bulk\">free_pcppages_bulk</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#batch\">batch</a>, <a class=\"id\" href=\"#pcp\">pcp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#batch\">batch</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * split_page takes a non-compound higher-order page, and splits it into</span>", 
"<span class=\"comment\"> * n (1&lt;&lt;order) sub-pages: page[0..n]</span>", 
"<span class=\"comment\"> * Each sub-page must be freed individually.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: this is probably too low level an operation for use in drivers.</span>", 
"<span class=\"comment\"> * Please consult with lkml before using this in your driver.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#split_page\">split_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#PageCompound\">PageCompound</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KMEMCHECK\">CONFIG_KMEMCHECK</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Split shadow pages too, because free(page[0]) would</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * otherwise free the whole shadow.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kmemcheck_page_is_tracked\">kmemcheck_page_is_tracked</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#split_page\">split_page</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#page\">page</a>[0].<a class=\"id\" href=\"#shadow\">shadow</a>), <a class=\"id\" href=\"#order\">order</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; (1 << <a class=\"id\" href=\"#order\">order</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_refcounted\">set_page_refcounted</a>(<a class=\"id\" href=\"#page\">page</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Similar to split_page except the page is already free. As this is only</span>", 
"<span class=\"comment\"> * being used for migration, the migratetype of the block also changes.</span>", 
"<span class=\"comment\"> * As this is called with interrupts disabled, the caller is responsible</span>", 
"<span class=\"comment\"> * for calling arch_alloc_page() and kernel_map_page() after interrupts</span>", 
"<span class=\"comment\"> * are enabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: this is probably too low level an operation for use in drivers.</span>", 
"<span class=\"comment\"> * Please consult with lkml before using this in your driver.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#split_free_page\">split_free_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#watermark\">watermark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageBuddy\">PageBuddy</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#page_order\">page_order</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Obey watermarks as if the page was being allocated */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#watermark\">watermark</a> = <a class=\"id\" href=\"#low_wmark_pages\">low_wmark_pages</a>(<a class=\"id\" href=\"#zone\">zone</a>) + (1 << <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#zone_watermark_ok\">zone_watermark_ok</a>(<a class=\"id\" href=\"#zone\">zone</a>, 0, <a class=\"id\" href=\"#watermark\">watermark</a>, 0, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove page from free list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#free_area\">free_area</a>[<a class=\"id\" href=\"#order\">order</a>].<a class=\"id\" href=\"#nr_free\">nr_free</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rmv_page_order\">rmv_page_order</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>, -(1UL << <a class=\"id\" href=\"#order\">order</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Split into individual pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_refcounted\">set_page_refcounted</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#split_page\">split_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> >= <a class=\"id\" href=\"#pageblock_order\">pageblock_order</a> - 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#endpage\">endpage</a> = <a class=\"id\" href=\"#page\">page</a> + (1 << <a class=\"id\" href=\"#order\">order</a>) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#page\">page</a> &lt; <a class=\"id\" href=\"#endpage\">endpage</a>; <a class=\"id\" href=\"#page\">page</a> += <a class=\"id\" href=\"#pageblock_nr_pages\">pageblock_nr_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pageblock_migratetype\">set_pageblock_migratetype</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#MIGRATE_MOVABLE\">MIGRATE_MOVABLE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1 << <a class=\"id\" href=\"#order\">order</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Really, prep_compound_page() should be called from __rmqueue_bulk().  But</span>", 
"<span class=\"comment\"> * we cheat by calling it from here, in the order &gt; 0 path.  Saves a branch</span>", 
"<span class=\"comment\"> * or two.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#buffered_rmqueue\">buffered_rmqueue</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, int <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cold\">cold</a> = !!(<a class=\"id\" href=\"#gfp_flags\">gfp_flags</a> &amp; <a class=\"id\" href=\"#__GFP_COLD\">__GFP_COLD</a>);", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#order\">order</a> == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#per_cpu_pages\">per_cpu_pages</a> *<a class=\"id\" href=\"#pcp\">pcp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcp\">pcp</a> = &amp;<a class=\"id\" href=\"#this_cpu_ptr\">this_cpu_ptr</a>(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pageset\">pageset</a>)-><a class=\"id\" href=\"#pcp\">pcp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#lists\">lists</a>[<a class=\"id\" href=\"#migratetype\">migratetype</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#rmqueue_bulk\">rmqueue_bulk</a>(<a class=\"id\" href=\"#zone\">zone</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#batch\">batch</a>, <a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migratetype\">migratetype</a>, <a class=\"id\" href=\"#cold\">cold</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cold\">cold</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#gfp_flags\">gfp_flags</a> &amp; <a class=\"id\" href=\"#__GFP_NOFAIL\">__GFP_NOFAIL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * __GFP_NOFAIL is not to be used in new code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * All __GFP_NOFAIL callers should be fixed so that they</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * properly detect and handle allocation failures.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We most definitely don't want callers attempting to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * allocate greater than order-1 page units with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * __GFP_NOFAIL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#order\">order</a> &gt; 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__rmqueue\">__rmqueue</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>, -(1 << <a class=\"id\" href=\"#order\">order</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__count_zone_vm_events\">__count_zone_vm_events</a>(<a class=\"id\" href=\"#PGALLOC\">PGALLOC</a>, <a class=\"id\" href=\"#zone\">zone</a>, 1 << <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone_statistics\">zone_statistics</a>(<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>, <a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#bad_range\">bad_range</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prep_new_page\">prep_new_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<a class=\"id\" href=\"#failed\">failed</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* The ALLOC_WMARK bits are used as an index to zone-&gt;watermark */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ALLOC_WMARK_MIN\">ALLOC_WMARK_MIN</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WMARK_MIN\">WMARK_MIN</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ALLOC_WMARK_LOW\">ALLOC_WMARK_LOW</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WMARK_LOW\">WMARK_LOW</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ALLOC_WMARK_HIGH\">ALLOC_WMARK_HIGH</a><span class=\"ts\"/><a class=\"id\" href=\"#WMARK_HIGH\">WMARK_HIGH</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ALLOC_NO_WATERMARKS\">ALLOC_NO_WATERMARKS</a><span class=\"ts\"/>0x04 <span class=\"comment\">/* don't check watermarks at all */</span>", 
"", 
"<span class=\"comment\">/* Mask to get the watermark bits */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ALLOC_WMARK_MASK\">ALLOC_WMARK_MASK</a><span class=\"ts\"/>(<a class=\"id\" href=\"#ALLOC_NO_WATERMARKS\">ALLOC_NO_WATERMARKS</a>-1)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ALLOC_HARDER\">ALLOC_HARDER</a><span class=\"ts\"/><span class=\"ts\"/>0x10 <span class=\"comment\">/* try to alloc harder */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ALLOC_HIGH\">ALLOC_HIGH</a><span class=\"ts\"/><span class=\"ts\"/>0x20 <span class=\"comment\">/* __GFP_HIGH set */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ALLOC_CPUSET\">ALLOC_CPUSET</a><span class=\"ts\"/><span class=\"ts\"/>0x40 <span class=\"comment\">/* check for correct cpuset */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIL_PAGE_ALLOC\">CONFIG_FAIL_PAGE_ALLOC</a>", 
"", 
"static struct <a class=\"id\" href=\"#fail_page_alloc_attr\">fail_page_alloc_attr</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fault_attr\">fault_attr</a> <a class=\"id\" href=\"#attr\">attr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ignore_gfp_highmem\">ignore_gfp_highmem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ignore_gfp_wait\">ignore_gfp_wait</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#min_order\">min_order</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAULT_INJECTION_DEBUG_FS\">CONFIG_FAULT_INJECTION_DEBUG_FS</a>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#ignore_gfp_highmem_file\">ignore_gfp_highmem_file</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#ignore_gfp_wait_file\">ignore_gfp_wait_file</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#min_order_file\">min_order_file</a>;", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FAULT_INJECTION_DEBUG_FS */</span>", 
"", 
"} <a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#FAULT_ATTR_INITIALIZER\">FAULT_ATTR_INITIALIZER</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ignore_gfp_wait\">ignore_gfp_wait</a> = 1,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ignore_gfp_highmem\">ignore_gfp_highmem</a> = 1,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#min_order\">min_order</a> = 1,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_fail_page_alloc\">setup_fail_page_alloc</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#setup_fault_attr\">setup_fault_attr</a>(&amp;<a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#str\">str</a>);", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"fail_page_alloc=\", <a class=\"id\" href=\"#setup_fail_page_alloc\">setup_fail_page_alloc</a>);", 
"", 
"static int <a class=\"id\" href=\"#should_fail_alloc_page\">should_fail_alloc_page</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> &lt; <a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#min_order\">min_order</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_NOFAIL\">__GFP_NOFAIL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#ignore_gfp_highmem\">ignore_gfp_highmem</a> && (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#ignore_gfp_wait\">ignore_gfp_wait</a> && (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#should_fail\">should_fail</a>(&amp;<a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#attr\">attr</a>, 1 << <a class=\"id\" href=\"#order\">order</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAULT_INJECTION_DEBUG_FS\">CONFIG_FAULT_INJECTION_DEBUG_FS</a>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#fail_page_alloc_debugfs\">fail_page_alloc_debugfs</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#S_IFREG\">S_IFREG</a> | <a class=\"id\" href=\"#S_IRUSR\">S_IRUSR</a> | <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dir\">dir</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#init_fault_attr_dentries\">init_fault_attr_dentries</a>(&amp;<a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"fail_page_alloc\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dir\">dir</a> = <a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#dentries\">dentries</a>.<a class=\"id\" href=\"#dir\">dir</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#ignore_gfp_wait_file\">ignore_gfp_wait_file</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugfs_create_bool\">debugfs_create_bool</a>(\"ignore-gfp-wait\", <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#ignore_gfp_wait\">ignore_gfp_wait</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#ignore_gfp_highmem_file\">ignore_gfp_highmem_file</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugfs_create_bool\">debugfs_create_bool</a>(\"ignore-gfp-highmem\", <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#ignore_gfp_highmem\">ignore_gfp_highmem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#min_order_file\">min_order_file</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugfs_create_u32\">debugfs_create_u32</a>(\"min-order\", <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#min_order\">min_order</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#ignore_gfp_wait_file\">ignore_gfp_wait_file</a> ||", 
"            !<a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#ignore_gfp_highmem_file\">ignore_gfp_highmem_file</a> ||", 
"            !<a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#min_order_file\">min_order_file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugfs_remove\">debugfs_remove</a>(<a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#ignore_gfp_wait_file\">ignore_gfp_wait_file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugfs_remove\">debugfs_remove</a>(<a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#ignore_gfp_highmem_file\">ignore_gfp_highmem_file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugfs_remove\">debugfs_remove</a>(<a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#min_order_file\">min_order_file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cleanup_fault_attr_dentries\">cleanup_fault_attr_dentries</a>(&amp;<a class=\"id\" href=\"#fail_page_alloc\">fail_page_alloc</a>.<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#fail_page_alloc_debugfs\">fail_page_alloc_debugfs</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FAULT_INJECTION_DEBUG_FS */</span>", 
"", 
"#else <span class=\"comment\">/* CONFIG_FAIL_PAGE_ALLOC */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#should_fail_alloc_page\">should_fail_alloc_page</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FAIL_PAGE_ALLOC */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return 1 if free pages are above 'mark'. This takes into account the order</span>", 
"<span class=\"comment\"> * of the allocation.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#zone_watermark_ok\">zone_watermark_ok</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#z\">z</a>, int <a class=\"id\" href=\"#order\">order</a>, unsigned long <a class=\"id\" href=\"#mark\">mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#classzone_idx\">classzone_idx</a>, int <a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* free_pages my go negative - that's OK */</span>", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#min\">min</a> = <a class=\"id\" href=\"#mark\">mark</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#free_pages\">free_pages</a> = <a class=\"id\" href=\"#zone_nr_free_pages\">zone_nr_free_pages</a>(<a class=\"id\" href=\"#z\">z</a>) - (1 << <a class=\"id\" href=\"#order\">order</a>) + 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#o\">o</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_flags\">alloc_flags</a> &amp; <a class=\"id\" href=\"#ALLOC_HIGH\">ALLOC_HIGH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a> -= <a class=\"id\" href=\"#min\">min</a> / 2;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_flags\">alloc_flags</a> &amp; <a class=\"id\" href=\"#ALLOC_HARDER\">ALLOC_HARDER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a> -= <a class=\"id\" href=\"#min\">min</a> / 4;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free_pages\">free_pages</a> <= <a class=\"id\" href=\"#min\">min</a> + <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#lowmem_reserve\">lowmem_reserve</a>[<a class=\"id\" href=\"#classzone_idx\">classzone_idx</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#o\">o</a> = 0; <a class=\"id\" href=\"#o\">o</a> &lt; <a class=\"id\" href=\"#order\">order</a>; <a class=\"id\" href=\"#o\">o</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* At the next order, this order's pages become unavailable */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a> -= <a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#free_area\">free_area</a>[<a class=\"id\" href=\"#o\">o</a>].<a class=\"id\" href=\"#nr_free\">nr_free</a> << <a class=\"id\" href=\"#o\">o</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Require fewer higher order pages to be free */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a> >>= 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#free_pages\">free_pages</a> <= <a class=\"id\" href=\"#min\">min</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * zlc_setup - Setup for \"zonelist cache\".  Uses cached zone data to</span>", 
"<span class=\"comment\"> * skip over zones that are not allowed by the cpuset, or that have</span>", 
"<span class=\"comment\"> * been recently (in last second) found to be nearly full.  See further</span>", 
"<span class=\"comment\"> * comments in mmzone.h.  Reduces cache footprint of zonelist scans</span>", 
"<span class=\"comment\"> * that have to skip over a lot of full or unallowed zones.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the zonelist cache is present in the passed in zonelist, then</span>", 
"<span class=\"comment\"> * returns a pointer to the allowed node mask (either the current</span>", 
"<span class=\"comment\"> * tasks mems_allowed, or node_states[N_HIGH_MEMORY].)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the zonelist cache is not available for this zonelist, does</span>", 
"<span class=\"comment\"> * nothing and returns NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the fullzones BITMAP in the zonelist cache is stale (more than</span>", 
"<span class=\"comment\"> * a second since last zap'd) then we zap it out (clear its bits.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We hold off even calling zlc_setup, until after we've checked the</span>", 
"<span class=\"comment\"> * first zone in the zonelist, on the theory that most allocations will</span>", 
"<span class=\"comment\"> * be satisfied from that first zone, so best to examine that zone as</span>", 
"<span class=\"comment\"> * quickly as we can.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#zlc_setup\">zlc_setup</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, int <a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist_cache\">zonelist_cache</a> *<a class=\"id\" href=\"#zlc\">zlc</a>;<span class=\"ts\"/><span class=\"comment\">/* cached zonelist speedup info */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#allowednodes\">allowednodes</a>;<span class=\"ts\"/><span class=\"comment\">/* zonelist_cache approximation */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zlc\">zlc</a> = <a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#zlcache_ptr\">zlcache_ptr</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#zlc\">zlc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#zlc\">zlc</a>-><a class=\"id\" href=\"#last_full_zap\">last_full_zap</a> + <a class=\"id\" href=\"#HZ\">HZ</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#zlc\">zlc</a>-><a class=\"id\" href=\"#fullzones\">fullzones</a>, <a class=\"id\" href=\"#MAX_ZONES_PER_ZONELIST\">MAX_ZONES_PER_ZONELIST</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zlc\">zlc</a>-><a class=\"id\" href=\"#last_full_zap\">last_full_zap</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#allowednodes\">allowednodes</a> = !<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>() && (<a class=\"id\" href=\"#alloc_flags\">alloc_flags</a> &amp; <a class=\"id\" href=\"#ALLOC_CPUSET\">ALLOC_CPUSET</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#cpuset_current_mems_allowed\">cpuset_current_mems_allowed</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>];", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#allowednodes\">allowednodes</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Given 'z' scanning a zonelist, run a couple of quick checks to see</span>", 
"<span class=\"comment\"> * if it is worth looking at further for free memory:</span>", 
"<span class=\"comment\"> *  1) Check that the zone isn't thought to be full (doesn't have its</span>", 
"<span class=\"comment\"> *     bit set in the zonelist_cache fullzones BITMAP).</span>", 
"<span class=\"comment\"> *  2) Check that the zones node (obtained from the zonelist_cache</span>", 
"<span class=\"comment\"> *     z_to_n[] mapping) is allowed in the passed in allowednodes mask.</span>", 
"<span class=\"comment\"> * Return true (non-zero) if zone is worth looking at further, or</span>", 
"<span class=\"comment\"> * else return false (zero) if it is not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This check -ignores- the distinction between various watermarks,</span>", 
"<span class=\"comment\"> * such as GFP_HIGH, GFP_ATOMIC, PF_MEMALLOC, ...  If a zone is</span>", 
"<span class=\"comment\"> * found to be full for any variation of these watermarks, it will</span>", 
"<span class=\"comment\"> * be considered full for up to one second by all requests, unless</span>", 
"<span class=\"comment\"> * we are so low on memory on all allowed nodes that we are forced</span>", 
"<span class=\"comment\"> * into the second scan of the zonelist.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In the second scan we ignore this zonelist cache and exactly</span>", 
"<span class=\"comment\"> * apply the watermarks to all zones, even it is slower to do so.</span>", 
"<span class=\"comment\"> * We are low on memory in the second scan, and should leave no stone</span>", 
"<span class=\"comment\"> * unturned looking for a free page.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#zlc_zone_worth_trying\">zlc_zone_worth_trying</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#allowednodes\">allowednodes</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist_cache\">zonelist_cache</a> *<a class=\"id\" href=\"#zlc\">zlc</a>;<span class=\"ts\"/><span class=\"comment\">/* cached zonelist speedup info */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* index of *z in zonelist zones */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* node that zone *z is on */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zlc\">zlc</a> = <a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#zlcache_ptr\">zlcache_ptr</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#zlc\">zlc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#z\">z</a> - <a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#zlc\">zlc</a>-><a class=\"id\" href=\"#z_to_n\">z_to_n</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This zone is worth trying if it is allowed but not full */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node_isset\">node_isset</a>(<a class=\"id\" href=\"#n\">n</a>, *<a class=\"id\" href=\"#allowednodes\">allowednodes</a>) && !<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#zlc\">zlc</a>-><a class=\"id\" href=\"#fullzones\">fullzones</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Given 'z' scanning a zonelist, set the corresponding bit in</span>", 
"<span class=\"comment\"> * zlc-&gt;fullzones, so that subsequent attempts to allocate a page</span>", 
"<span class=\"comment\"> * from that zone don't waste time re-examining it.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#zlc_mark_zone_full\">zlc_mark_zone_full</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist_cache\">zonelist_cache</a> *<a class=\"id\" href=\"#zlc\">zlc</a>;<span class=\"ts\"/><span class=\"comment\">/* cached zonelist speedup info */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* index of *z in zonelist zones */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zlc\">zlc</a> = <a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#zlcache_ptr\">zlcache_ptr</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#zlc\">zlc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#z\">z</a> - <a class=\"id\" href=\"#zonelist\">zonelist</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#zlc\">zlc</a>-><a class=\"id\" href=\"#fullzones\">fullzones</a>);", 
"}", 
"", 
"#else<span class=\"ts\"/><span class=\"comment\">/* CONFIG_NUMA */</span>", 
"", 
"static <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#zlc_setup\">zlc_setup</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, int <a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#zlc_zone_worth_trying\">zlc_zone_worth_trying</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#allowednodes\">allowednodes</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#zlc_mark_zone_full\">zlc_mark_zone_full</a>(struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_NUMA */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * get_page_from_freelist goes through the zonelist trying to allocate</span>", 
"<span class=\"comment\"> * a page.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#get_page_from_freelist\">get_page_from_freelist</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, int <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>, int <a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>, int <a class=\"id\" href=\"#migratetype\">migratetype</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#classzone_idx\">classzone_idx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#allowednodes\">allowednodes</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"comment\">/* zonelist_cache approximation */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#zlc_active\">zlc_active</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set if using zonelist_cache */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#did_zlc_setup\">did_zlc_setup</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* just call zlc_setup() one time */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#classzone_idx\">classzone_idx</a> = <a class=\"id\" href=\"#zone_idx\">zone_idx</a>(<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>);", 
"<a class=\"id\" href=\"#zonelist_scan\">zonelist_scan</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Scan zonelist, looking for a zone with enough free.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See also cpuset_zone_allowed() comment in kernel/cpuset.c.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone_zonelist_nodemask\">for_each_zone_zonelist_nodemask</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#NUMA_BUILD\">NUMA_BUILD</a> && <a class=\"id\" href=\"#zlc_active\">zlc_active</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#zlc_zone_worth_trying\">zlc_zone_worth_trying</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#allowednodes\">allowednodes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#alloc_flags\">alloc_flags</a> &amp; <a class=\"id\" href=\"#ALLOC_CPUSET\">ALLOC_CPUSET</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#cpuset_zone_allowed_softwall\">cpuset_zone_allowed_softwall</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#try_next_zone\">try_next_zone</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#ALLOC_NO_WATERMARKS\">ALLOC_NO_WATERMARKS</a> &lt; <a class=\"id\" href=\"#NR_WMARK\">NR_WMARK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#alloc_flags\">alloc_flags</a> &amp; <a class=\"id\" href=\"#ALLOC_NO_WATERMARKS\">ALLOC_NO_WATERMARKS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mark\">mark</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a> = <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#watermark\">watermark</a>[<a class=\"id\" href=\"#alloc_flags\">alloc_flags</a> &amp; <a class=\"id\" href=\"#ALLOC_WMARK_MASK\">ALLOC_WMARK_MASK</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_watermark_ok\">zone_watermark_ok</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#mark\">mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#classzone_idx\">classzone_idx</a>, <a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#try_this_zone\">try_this_zone</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone_reclaim_mode\">zone_reclaim_mode</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#this_zone_full\">this_zone_full</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#zone_reclaim\">zone_reclaim</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ZONE_RECLAIM_NOSCAN\">ZONE_RECLAIM_NOSCAN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* did not scan */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#try_next_zone\">try_next_zone</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ZONE_RECLAIM_FULL\">ZONE_RECLAIM_FULL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* scanned but unreclaimable */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#this_zone_full\">this_zone_full</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* did we reclaim enough */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#zone_watermark_ok\">zone_watermark_ok</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#mark\">mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#classzone_idx\">classzone_idx</a>, <a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#this_zone_full\">this_zone_full</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#try_this_zone\">try_this_zone</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#buffered_rmqueue\">buffered_rmqueue</a>(<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>, <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<a class=\"id\" href=\"#this_zone_full\">this_zone_full</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#NUMA_BUILD\">NUMA_BUILD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zlc_mark_zone_full\">zlc_mark_zone_full</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#z\">z</a>);", 
"<a class=\"id\" href=\"#try_next_zone\">try_next_zone</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#NUMA_BUILD\">NUMA_BUILD</a> && !<a class=\"id\" href=\"#did_zlc_setup\">did_zlc_setup</a> && <a class=\"id\" href=\"#nr_online_nodes\">nr_online_nodes</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we do zlc_setup after the first zone is tried but only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if there are multiple nodes make it worthwhile</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allowednodes\">allowednodes</a> = <a class=\"id\" href=\"#zlc_setup\">zlc_setup</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zlc_active\">zlc_active</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#did_zlc_setup\">did_zlc_setup</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#NUMA_BUILD\">NUMA_BUILD</a> && <a class=\"id\" href=\"#page\">page</a> == <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#zlc_active\">zlc_active</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Disable zlc cache for second zonelist scan */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zlc_active\">zlc_active</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#zonelist_scan\">zonelist_scan</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#should_alloc_retry\">should_alloc_retry</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pages_reclaimed\">pages_reclaimed</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Do not loop if specifically requested */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_NORETRY\">__GFP_NORETRY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In this implementation, order &lt;= PAGE_ALLOC_COSTLY_ORDER</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * means __GFP_NOFAIL, but that may not be true in other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * implementations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> <= <a class=\"id\" href=\"#PAGE_ALLOC_COSTLY_ORDER\">PAGE_ALLOC_COSTLY_ORDER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For order &gt; PAGE_ALLOC_COSTLY_ORDER, if __GFP_REPEAT is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * specified, then we retry until we no longer reclaim any pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (above), or we've reclaimed an order of pages at least as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * large as the allocation's order. In both cases, if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocation still fails, we stop retrying.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_REPEAT\">__GFP_REPEAT</a> && <a class=\"id\" href=\"#pages_reclaimed\">pages_reclaimed</a> &lt; (1 << <a class=\"id\" href=\"#order\">order</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't let big-order allocations loop unless the caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * explicitly requests that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_NOFAIL\">__GFP_NOFAIL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#__alloc_pages_may_oom\">__alloc_pages_may_oom</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Acquire the OOM killer lock for the zones in zonelist */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#try_set_zonelist_oom\">try_set_zonelist_oom</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout_uninterruptible\">schedule_timeout_uninterruptible</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Go through the zonelist yet one more time, keep very high watermark</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here, this is only to catch a parallel oom killing, we must fail if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we're still under heavy pressure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#get_page_from_freelist\">get_page_from_freelist</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>|<a class=\"id\" href=\"#__GFP_HARDWALL\">__GFP_HARDWALL</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ALLOC_WMARK_HIGH\">ALLOC_WMARK_HIGH</a>|<a class=\"id\" href=\"#ALLOC_CPUSET\">ALLOC_CPUSET</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_NOFAIL\">__GFP_NOFAIL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The OOM killer will not help higher order allocs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> &gt; <a class=\"id\" href=\"#PAGE_ALLOC_COSTLY_ORDER\">PAGE_ALLOC_COSTLY_ORDER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The OOM killer does not needlessly kill tasks for lowmem */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a> &lt; <a class=\"id\" href=\"#ZONE_NORMAL\">ZONE_NORMAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * GFP_THISNODE contains __GFP_NORETRY and we never hit this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Sanity check for bare calls of __GFP_THISNODE, not real OOM.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The caller should handle page allocation failure by itself if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it specifies __GFP_THISNODE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note: Hugepage uses it but will hit PAGE_ALLOC_COSTLY_ORDER.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_THISNODE\">__GFP_THISNODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Exhausted what can be done so it's blamo time */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out_of_memory\">out_of_memory</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_zonelist_oom\">clear_zonelist_oom</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPACTION\">CONFIG_COMPACTION</a>", 
"<span class=\"comment\">/* Try memory compaction for high-order allocations before reclaim */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#__alloc_pages_direct_compact\">__alloc_pages_direct_compact</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>, int <a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>, unsigned long *<a class=\"id\" href=\"#did_some_progress\">did_some_progress</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#order\">order</a> || <a class=\"id\" href=\"#compaction_deferred\">compaction_deferred</a>(<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#did_some_progress\">did_some_progress</a> = <a class=\"id\" href=\"#try_to_compact_pages\">try_to_compact_pages</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask\">nodemask</a>);", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#did_some_progress\">did_some_progress</a> != <a class=\"id\" href=\"#COMPACT_SKIPPED\">COMPACT_SKIPPED</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Page migration frees to the PCP lists but we want merging */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_pages\">drain_pages</a>(<a class=\"id\" href=\"#get_cpu\">get_cpu</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#get_page_from_freelist\">get_page_from_freelist</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>, <a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>-><a class=\"id\" href=\"#compact_considered\">compact_considered</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>-><a class=\"id\" href=\"#compact_defer_shift\">compact_defer_shift</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#COMPACTSUCCESS\">COMPACTSUCCESS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It's bad if compaction run occurs and fails.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The most likely reason is that pages exist,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but not enough to satisfy watermarks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#COMPACTFAIL\">COMPACTFAIL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#defer_compaction\">defer_compaction</a>(<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#__alloc_pages_direct_compact\">__alloc_pages_direct_compact</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>, int <a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>, unsigned long *<a class=\"id\" href=\"#did_some_progress\">did_some_progress</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_COMPACTION */</span>", 
"", 
"<span class=\"comment\">/* The really slow allocator path where we enter direct reclaim */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#__alloc_pages_direct_reclaim\">__alloc_pages_direct_reclaim</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>, int <a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>, unsigned long *<a class=\"id\" href=\"#did_some_progress\">did_some_progress</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> <a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#drained\">drained</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We now go into synchronous reclaim */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuset_memory_pressure_bump\">cpuset_memory_pressure_bump</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_MEMALLOC\">PF_MEMALLOC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_current_reclaim_state\">lockdep_set_current_reclaim_state</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>.<a class=\"id\" href=\"#reclaimed_slab\">reclaimed_slab</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> = &amp;<a class=\"id\" href=\"#reclaim_state\">reclaim_state</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#did_some_progress\">did_some_progress</a> = <a class=\"id\" href=\"#try_to_free_pages\">try_to_free_pages</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#reclaim_state\">reclaim_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_clear_current_reclaim_state\">lockdep_clear_current_reclaim_state</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_MEMALLOC\">PF_MEMALLOC</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(*<a class=\"id\" href=\"#did_some_progress\">did_some_progress</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#get_page_from_freelist\">get_page_from_freelist</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>, <a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If an allocation failed after direct reclaim, it could be because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pages are pinned on the per-cpu lists. Drain them and try again</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a> && !<a class=\"id\" href=\"#drained\">drained</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drain_all_pages\">drain_all_pages</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drained\">drained</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is called in the allocator slow-path if the allocation request is of</span>", 
"<span class=\"comment\"> * sufficient urgency to ignore watermarks and take other desperate measures</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#__alloc_pages_high_priority\">__alloc_pages_high_priority</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#get_page_from_freelist\">get_page_from_freelist</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>, <a class=\"id\" href=\"#ALLOC_NO_WATERMARKS\">ALLOC_NO_WATERMARKS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a> && <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_NOFAIL\">__GFP_NOFAIL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#congestion_wait\">congestion_wait</a>(<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>, <a class=\"id\" href=\"#HZ\">HZ</a>/50);", 
"<span class=\"ts\"/>} while (!<a class=\"id\" href=\"#page\">page</a> && (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_NOFAIL\">__GFP_NOFAIL</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#wake_all_kswapd\">wake_all_kswapd</a>(unsigned int <a class=\"id\" href=\"#order\">order</a>, struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone_zonelist\">for_each_zone_zonelist</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wakeup_kswapd\">wakeup_kswapd</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#gfp_to_alloc_flags\">gfp_to_alloc_flags</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#alloc_flags\">alloc_flags</a> = <a class=\"id\" href=\"#ALLOC_WMARK_MIN\">ALLOC_WMARK_MIN</a> | <a class=\"id\" href=\"#ALLOC_CPUSET\">ALLOC_CPUSET</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#wait\">wait</a> = <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* __GFP_HIGH is assumed to be the same as ALLOC_HIGH to save a branch. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#__GFP_HIGH\">__GFP_HIGH</a> != <a class=\"id\" href=\"#ALLOC_HIGH\">ALLOC_HIGH</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The caller may dip into page reserves a bit more if the caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cannot run direct reclaim, or if the caller has realtime scheduling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * policy or is asking for __GFP_HIGH memory.  GFP_ATOMIC requests will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set both ALLOC_HARDER (!wait) and ALLOC_HIGH (__GFP_HIGH).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_flags\">alloc_flags</a> |= (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_HIGH\">__GFP_HIGH</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#wait\">wait</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_flags\">alloc_flags</a> |= <a class=\"id\" href=\"#ALLOC_HARDER\">ALLOC_HARDER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ignore cpuset if GFP_ATOMIC (!wait) rather than fail alloc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * See also cpuset_zone_allowed() comment in kernel/cpuset.c.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_flags\">alloc_flags</a> &= ~<a class=\"id\" href=\"#ALLOC_CPUSET\">ALLOC_CPUSET</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rt_task\">rt_task</a>(<a class=\"id\" href=\"#p\">p</a>)) && !<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_flags\">alloc_flags</a> |= <a class=\"id\" href=\"#ALLOC_HARDER\">ALLOC_HARDER</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_NOMEMALLOC\">__GFP_NOMEMALLOC</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>() &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_MEMALLOC\">PF_MEMALLOC</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_MEMDIE\">TIF_MEMDIE</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_flags\">alloc_flags</a> |= <a class=\"id\" href=\"#ALLOC_NO_WATERMARKS\">ALLOC_NO_WATERMARKS</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#__alloc_pages_slowpath\">__alloc_pages_slowpath</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>, enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>, struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#wait\">wait</a> = <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pages_reclaimed\">pages_reclaimed</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#did_some_progress\">did_some_progress</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In the slowpath, we sanity check order to avoid ever trying to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reclaim &gt;= MAX_ORDER areas which will never succeed. Callers may</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be using allocators in order of preference for an area that is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * too large.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> >= <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * GFP_THISNODE (meaning __GFP_THISNODE, __GFP_NORETRY and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __GFP_NOWARN set) should not cause reclaim since the subsystem</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (f.e. slab) using GFP_THISNODE may choose to trigger reclaim</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * using a larger set of nodes after it has established that the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allowed per node queues are empty and that nodes are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * over allocated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#NUMA_BUILD\">NUMA_BUILD</a> && (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#GFP_THISNODE\">GFP_THISNODE</a>) == <a class=\"id\" href=\"#GFP_THISNODE\">GFP_THISNODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nopage\">nopage</a>;", 
"", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_all_kswapd\">wake_all_kswapd</a>(<a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * OK, we're below the kswapd watermark and have kicked background</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reclaim. Now things get more complex, so set up alloc_flags according</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to how we want to proceed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_flags\">alloc_flags</a> = <a class=\"id\" href=\"#gfp_to_alloc_flags\">gfp_to_alloc_flags</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This is the last chance, in general, before the goto nopage. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#get_page_from_freelist\">get_page_from_freelist</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>, <a class=\"id\" href=\"#alloc_flags\">alloc_flags</a> &amp; ~<a class=\"id\" href=\"#ALLOC_NO_WATERMARKS\">ALLOC_NO_WATERMARKS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_pg\">got_pg</a>;", 
"", 
"<a class=\"id\" href=\"#rebalance\">rebalance</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate without watermarks if the context allows */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_flags\">alloc_flags</a> &amp; <a class=\"id\" href=\"#ALLOC_NO_WATERMARKS\">ALLOC_NO_WATERMARKS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__alloc_pages_high_priority\">__alloc_pages_high_priority</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>, <a class=\"id\" href=\"#nodemask\">nodemask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_pg\">got_pg</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Atomic allocations - we can't balance anything */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#wait\">wait</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nopage\">nopage</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Avoid recursion of direct reclaim */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_MEMALLOC\">PF_MEMALLOC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nopage\">nopage</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Avoid allocations with no watermarks from looping endlessly */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_MEMDIE\">TIF_MEMDIE</a>) && !(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_NOFAIL\">__GFP_NOFAIL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nopage\">nopage</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Try direct compaction */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__alloc_pages_direct_compact\">__alloc_pages_direct_compact</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask\">nodemask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>, <a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migratetype\">migratetype</a>, &amp;<a class=\"id\" href=\"#did_some_progress\">did_some_progress</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_pg\">got_pg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Try direct reclaim and then allocating */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__alloc_pages_direct_reclaim\">__alloc_pages_direct_reclaim</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask\">nodemask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_flags\">alloc_flags</a>, <a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migratetype\">migratetype</a>, &amp;<a class=\"id\" href=\"#did_some_progress\">did_some_progress</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_pg\">got_pg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we failed to make any progress reclaiming, then we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * running out of options and have to consider going OOM</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#did_some_progress\">did_some_progress</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a>) && !(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_NORETRY\">__GFP_NORETRY</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#oom_killer_disabled\">oom_killer_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nopage\">nopage</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__alloc_pages_may_oom\">__alloc_pages_may_oom</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#high_zoneidx\">high_zoneidx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask\">nodemask</a>, <a class=\"id\" href=\"#preferred_zone\">preferred_zone</a>,", 
];
xr_frag_insert('l/a9/462ace4a62203847cc40c0a977c55867db48eb.xr', __xr_tmp);
