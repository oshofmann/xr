var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_MODULE_H\">_LINUX_MODULE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_MODULE_H\">_LINUX_MODULE_H</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Dynamic loading of modules into the kernel.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Rewritten by Richard Henderson &lt;rth@tamu.edu&gt; Dec 1996</span>", 
"<span class=\"comment\"> * Rewritten again by Rusty Russell, 2002</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stat\">stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmod\">kmod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#elf\">elf</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stringify\">stringify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kobject\">kobject</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#moduleparam\">moduleparam</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tracepoint\">tracepoint</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Not Yet Implemented */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_SUPPORTED_DEVICE\">MODULE_SUPPORTED_DEVICE</a>(<a class=\"id\" href=\"#name\">name</a>)", 
"", 
"<span class=\"comment\">/* Some toolchains use a `_' prefix for all user symbols. */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYMBOL_PREFIX\">CONFIG_SYMBOL_PREFIX</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_SYMBOL_PREFIX\">MODULE_SYMBOL_PREFIX</a> <a class=\"id\" href=\"#CONFIG_SYMBOL_PREFIX\">CONFIG_SYMBOL_PREFIX</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_SYMBOL_PREFIX\">MODULE_SYMBOL_PREFIX</a> \"\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a> <a class=\"id\" href=\"#MAX_PARAM_PREFIX_LEN\">MAX_PARAM_PREFIX_LEN</a>", 
"", 
"struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a>", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#modversion_info\">modversion_info</a>", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#crc\">crc</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#module\">module</a>;", 
"", 
"struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> {", 
"        struct <a class=\"id\" href=\"#attribute\">attribute</a> <a class=\"id\" href=\"#attr\">attr</a>;", 
"        <a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#show\">show</a>)(struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *, struct <a class=\"id\" href=\"#module\">module</a> *, char *);", 
"        <a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#store\">store</a>)(struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *, struct <a class=\"id\" href=\"#module\">module</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#setup\">setup</a>)(struct <a class=\"id\" href=\"#module\">module</a> *, const char *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#test\">test</a>)(struct <a class=\"id\" href=\"#module\">module</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#free\">free</a>)(struct <a class=\"id\" href=\"#module\">module</a> *);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#module_kobject\">module_kobject</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> <a class=\"id\" href=\"#kobj\">kobj</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#drivers_dir\">drivers_dir</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_param_attrs\">module_param_attrs</a> *<a class=\"id\" href=\"#mp\">mp</a>;", 
"};", 
"", 
"<span class=\"comment\">/* These are either module local, or the kernel's dummy ones. */</span>", 
"extern int <a class=\"id\" href=\"#init_module\">init_module</a>(void);", 
"extern void <a class=\"id\" href=\"#cleanup_module\">cleanup_module</a>(void);", 
"", 
"<span class=\"comment\">/* Archs provide a method of finding the correct exception table. */</span>", 
"struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a>;", 
"", 
"const struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *", 
"<a class=\"id\" href=\"#search_extable\">search_extable</a>(const struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#first\">first</a>,", 
"<span class=\"ts\"/>       const struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#last\">last</a>,", 
"<span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#value\">value</a>);", 
"void <a class=\"id\" href=\"#sort_extable\">sort_extable</a>(struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#finish\">finish</a>);", 
"void <a class=\"id\" href=\"#sort_main_extable\">sort_main_extable</a>(void);", 
"void <a class=\"id\" href=\"#trim_init_extable\">trim_init_extable</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#m\">m</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#MODULE\">MODULE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_GENERIC_TABLE\">MODULE_GENERIC_TABLE</a>(<a class=\"id\" href=\"#gtype\">gtype</a>,<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"extern const struct <a class=\"id\" href=\"#gtype\">gtype</a>##<a class=\"id\" href=\"#_id\">_id</a> <a class=\"id\" href=\"#__mod_\">__mod_</a>##<a class=\"id\" href=\"#gtype\">gtype</a>##<a class=\"id\" href=\"#_table\">_table</a><span class=\"ts\"/><span class=\"ts\"/>\\", 
"  <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#unused\">unused</a>, <a class=\"id\" href=\"#alias\">alias</a>(<a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#name\">name</a>))))", 
"", 
"extern struct <a class=\"id\" href=\"#module\">module</a> <a class=\"id\" href=\"#__this_module\">__this_module</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a> (&amp;<a class=\"id\" href=\"#__this_module\">__this_module</a>)", 
"#else  <span class=\"comment\">/* !MODULE */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_GENERIC_TABLE\">MODULE_GENERIC_TABLE</a>(<a class=\"id\" href=\"#gtype\">gtype</a>,<a class=\"id\" href=\"#name\">name</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a> ((struct <a class=\"id\" href=\"#module\">module</a> *)0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Generic info of form tag = \"info\" */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_INFO\">MODULE_INFO</a>(<a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#info\">info</a>) <a class=\"id\" href=\"#__MODULE_INFO\">__MODULE_INFO</a>(<a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#tag\">tag</a>, <a class=\"id\" href=\"#info\">info</a>)", 
"", 
"<span class=\"comment\">/* For userspace: you can also call me... */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_ALIAS\">MODULE_ALIAS</a>(<a class=\"id\" href=\"#_alias\">_alias</a>) <a class=\"id\" href=\"#MODULE_INFO\">MODULE_INFO</a>(<a class=\"id\" href=\"#alias\">alias</a>, <a class=\"id\" href=\"#_alias\">_alias</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following license idents are currently accepted as indicating free</span>", 
"<span class=\"comment\"> * software modules</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>\"GPL\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>[GNU Public License v2 or later]</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>\"GPL v2\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>[GNU Public License v2]</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>\"GPL and additional rights\"<span class=\"ts\"/>[GNU Public License v2 rights and more]</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>\"Dual BSD/GPL\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>[GNU Public License v2</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> or BSD license choice]</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>\"Dual MIT/GPL\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>[GNU Public License v2</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> or MIT license choice]</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>\"Dual MPL/GPL\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>[GNU Public License v2</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> or Mozilla license choice]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The following other idents are available</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>\"Proprietary\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>[Non free products]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are dual licensed components, but when running with Linux it is the</span>", 
"<span class=\"comment\"> * GPL that is relevant so this is a non issue. Similarly LGPL linked with GPL</span>", 
"<span class=\"comment\"> * is a GPL combined work.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This exists for several reasons</span>", 
"<span class=\"comment\"> * 1.<span class=\"ts\"/>So modinfo can show license info for users wanting to vet their setup </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is free</span>", 
"<span class=\"comment\"> * 2.<span class=\"ts\"/>So the community can ignore bug reports including proprietary modules</span>", 
"<span class=\"comment\"> * 3.<span class=\"ts\"/>So vendors can do likewise based on their own policies</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(<a class=\"id\" href=\"#_license\">_license</a>) <a class=\"id\" href=\"#MODULE_INFO\">MODULE_INFO</a>(<a class=\"id\" href=\"#license\">license</a>, <a class=\"id\" href=\"#_license\">_license</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Author(s), use \"Name &lt;email&gt;\" or just \"Name\", for multiple</span>", 
"<span class=\"comment\"> * authors use multiple MODULE_AUTHOR() statements/lines.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_AUTHOR\">MODULE_AUTHOR</a>(<a class=\"id\" href=\"#_author\">_author</a>) <a class=\"id\" href=\"#MODULE_INFO\">MODULE_INFO</a>(<a class=\"id\" href=\"#author\">author</a>, <a class=\"id\" href=\"#_author\">_author</a>)", 
"  ", 
"<span class=\"comment\">/* What your module does. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(<a class=\"id\" href=\"#_description\">_description</a>) <a class=\"id\" href=\"#MODULE_INFO\">MODULE_INFO</a>(<a class=\"id\" href=\"#description\">description</a>, <a class=\"id\" href=\"#_description\">_description</a>)", 
"", 
"<span class=\"comment\">/* One for each parameter, describing how to use it.  Some files do</span>", 
"<span class=\"comment\">   multiple of these per line, so can't just use MODULE_INFO. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#_parm\">_parm</a>, <a class=\"id\" href=\"#desc\">desc</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__MODULE_INFO\">__MODULE_INFO</a>(<a class=\"id\" href=\"#parm\">parm</a>, <a class=\"id\" href=\"#_parm\">_parm</a>, #<a class=\"id\" href=\"#_parm\">_parm</a> \":\" <a class=\"id\" href=\"#desc\">desc</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_DEVICE_TABLE\">MODULE_DEVICE_TABLE</a>(<a class=\"id\" href=\"#type\">type</a>,<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"  <a class=\"id\" href=\"#MODULE_GENERIC_TABLE\">MODULE_GENERIC_TABLE</a>(<a class=\"id\" href=\"#type\">type</a>##<a class=\"id\" href=\"#_device\">_device</a>,<a class=\"id\" href=\"#name\">name</a>)", 
"", 
"<span class=\"comment\">/* Version of form [&lt;epoch&gt;:]&lt;version&gt;[-&lt;extra-version&gt;].</span>", 
"<span class=\"comment\">   Or for CVS/RCS ID version, everything but the number is stripped.</span>", 
"<span class=\"comment\">  &lt;epoch&gt;: A (small) unsigned integer which allows you to start versions</span>", 
"<span class=\"comment\">           anew. If not mentioned, it's zero.  eg. \"2:1.0\" is after</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   \"1:2.0\".</span>", 
"<span class=\"comment\">  &lt;version&gt;: The &lt;version&gt; may contain only alphanumerics and the</span>", 
"<span class=\"comment\">           character `.'.  Ordered by numeric sort for numeric parts,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   ascii sort for ascii parts (as per RPM or DEB algorithm).</span>", 
"<span class=\"comment\">  &lt;extraversion&gt;: Like &lt;version&gt;, but inserted for local</span>", 
"<span class=\"comment\">           customizations, eg \"rh3\" or \"rusty1\".</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  Using this automatically adds a checksum of the .c files and the</span>", 
"<span class=\"comment\">  local headers in \"srcversion\".</span>", 
"<span class=\"comment\">*/</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_VERSION\">MODULE_VERSION</a>(<a class=\"id\" href=\"#_version\">_version</a>) <a class=\"id\" href=\"#MODULE_INFO\">MODULE_INFO</a>(<a class=\"id\" href=\"#version\">version</a>, <a class=\"id\" href=\"#_version\">_version</a>)", 
"", 
"<span class=\"comment\">/* Optional firmware file (or files) needed by the module</span>", 
"<span class=\"comment\"> * format is simply firmware file name.  Multiple firmware</span>", 
"<span class=\"comment\"> * files require multiple MODULE_FIRMWARE() specifiers */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_FIRMWARE\">MODULE_FIRMWARE</a>(<a class=\"id\" href=\"#_firmware\">_firmware</a>) <a class=\"id\" href=\"#MODULE_INFO\">MODULE_INFO</a>(<a class=\"id\" href=\"#firmware\">firmware</a>, <a class=\"id\" href=\"#_firmware\">_firmware</a>)", 
"", 
"<span class=\"comment\">/* Given an address, look for it in the exception tables */</span>", 
"const struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#search_exception_tables\">search_exception_tables</a>(unsigned long <a class=\"id\" href=\"#add\">add</a>);", 
"", 
"struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULES\">CONFIG_MODULES</a>", 
"", 
"extern int <a class=\"id\" href=\"#modules_disabled\">modules_disabled</a>; <span class=\"comment\">/* for sysctl */</span>", 
"<span class=\"comment\">/* Get/put a kernel symbol (calls must be symmetric) */</span>", 
"void *<a class=\"id\" href=\"#__symbol_get\">__symbol_get</a>(const char *<a class=\"id\" href=\"#symbol\">symbol</a>);", 
"void *<a class=\"id\" href=\"#__symbol_get_gpl\">__symbol_get_gpl</a>(const char *<a class=\"id\" href=\"#symbol\">symbol</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#symbol_get\">symbol_get</a>(<a class=\"id\" href=\"#x\">x</a>) ((<a class=\"id\" href=\"#typeof\">typeof</a>(&amp;<a class=\"id\" href=\"#x\">x</a>))(<a class=\"id\" href=\"#__symbol_get\">__symbol_get</a>(<a class=\"id\" href=\"#MODULE_SYMBOL_PREFIX\">MODULE_SYMBOL_PREFIX</a> #<a class=\"id\" href=\"#x\">x</a>)))", 
"", 
"<span class=\"comment\">/* modules using other modules: kdb wants to see this. */</span>", 
"struct <a class=\"id\" href=\"#module_use\">module_use</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#source_list\">source_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#target_list\">target_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#source\">source</a>, *<a class=\"id\" href=\"#target\">target</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__GENKSYMS__\">__GENKSYMS__</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODVERSIONS\">CONFIG_MODVERSIONS</a>", 
"<span class=\"comment\">/* Mark the CRC weak since genksyms apparently decides not to</span>", 
"<span class=\"comment\"> * generate a checksums for some symbols */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__CRC_SYMBOL\">__CRC_SYMBOL</a>(<a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#sec\">sec</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>extern void *<a class=\"id\" href=\"#__crc_\">__crc_</a>##<a class=\"id\" href=\"#sym\">sym</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>));<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static const unsigned long <a class=\"id\" href=\"#__kcrctab_\">__kcrctab_</a>##<a class=\"id\" href=\"#sym\">sym</a><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__used\">__used</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#section\">section</a>(\"__kcrctab\" <a class=\"id\" href=\"#sec\">sec</a>), <a class=\"id\" href=\"#unused\">unused</a>))<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>= (unsigned long) &amp;<a class=\"id\" href=\"#__crc_\">__crc_</a>##<a class=\"id\" href=\"#sym\">sym</a>;", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__CRC_SYMBOL\">__CRC_SYMBOL</a>(<a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#sec\">sec</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* For every exported symbol, place a struct in the __ksymtab section */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__EXPORT_SYMBOL\">__EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#sec\">sec</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>extern <a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#sym\">sym</a>) <a class=\"id\" href=\"#sym\">sym</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__CRC_SYMBOL\">__CRC_SYMBOL</a>(<a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#sec\">sec</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static const char <a class=\"id\" href=\"#__kstrtab_\">__kstrtab_</a>##<a class=\"id\" href=\"#sym\">sym</a>[]<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#section\">section</a>(\"__ksymtab_strings\"), <a class=\"id\" href=\"#aligned\">aligned</a>(1))) \\", 
"<span class=\"ts\"/>= <a class=\"id\" href=\"#MODULE_SYMBOL_PREFIX\">MODULE_SYMBOL_PREFIX</a> #<a class=\"id\" href=\"#sym\">sym</a>;                    <span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> <a class=\"id\" href=\"#__ksymtab_\">__ksymtab_</a>##<a class=\"id\" href=\"#sym\">sym</a><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__used\">__used</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#section\">section</a>(\"__ksymtab\" <a class=\"id\" href=\"#sec\">sec</a>), <a class=\"id\" href=\"#unused\">unused</a>))<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>= { (unsigned long)&amp;<a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#__kstrtab_\">__kstrtab_</a>##<a class=\"id\" href=\"#sym\">sym</a> }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sym\">sym</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__EXPORT_SYMBOL\">__EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sym\">sym</a>, \"\")", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sym\">sym</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__EXPORT_SYMBOL\">__EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sym\">sym</a>, \"_gpl\")", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_SYMBOL_GPL_FUTURE\">EXPORT_SYMBOL_GPL_FUTURE</a>(<a class=\"id\" href=\"#sym\">sym</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__EXPORT_SYMBOL\">__EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sym\">sym</a>, \"_gpl_future\")", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_UNUSED_SYMBOLS\">CONFIG_UNUSED_SYMBOLS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_UNUSED_SYMBOL\">EXPORT_UNUSED_SYMBOL</a>(<a class=\"id\" href=\"#sym\">sym</a>) <a class=\"id\" href=\"#__EXPORT_SYMBOL\">__EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sym\">sym</a>, \"_unused\")", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_UNUSED_SYMBOL_GPL\">EXPORT_UNUSED_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sym\">sym</a>) <a class=\"id\" href=\"#__EXPORT_SYMBOL\">__EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sym\">sym</a>, \"_unused_gpl\")", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_UNUSED_SYMBOL\">EXPORT_UNUSED_SYMBOL</a>(<a class=\"id\" href=\"#sym\">sym</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_UNUSED_SYMBOL_GPL\">EXPORT_UNUSED_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sym\">sym</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"enum <a class=\"id\" href=\"#module_state\">module_state</a>", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MODULE_STATE_LIVE\">MODULE_STATE_LIVE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MODULE_STATE_COMING\">MODULE_STATE_COMING</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MODULE_STATE_GOING\">MODULE_STATE_GOING</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#module\">module</a>", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#module_state\">module_state</a> <a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Member of list of modules */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Unique handle for this module */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Sysfs stuff. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_kobject\">module_kobject</a> <a class=\"id\" href=\"#mkobj\">mkobj</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module_attribute\">module_attribute</a> *<a class=\"id\" href=\"#modinfo_attrs\">modinfo_attrs</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#version\">version</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#srcversion\">srcversion</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#holders_dir\">holders_dir</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Exported symbols */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#syms\">syms</a>;", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#crcs\">crcs</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_syms\">num_syms</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Kernel parameters. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> *<a class=\"id\" href=\"#kp\">kp</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_kp\">num_kp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* GPL-only exported symbols. */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_gpl_syms\">num_gpl_syms</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#gpl_syms\">gpl_syms</a>;", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#gpl_crcs\">gpl_crcs</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_UNUSED_SYMBOLS\">CONFIG_UNUSED_SYMBOLS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* unused exported symbols. */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#unused_syms\">unused_syms</a>;", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#unused_crcs\">unused_crcs</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_unused_syms\">num_unused_syms</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* GPL-only, unused exported symbols. */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_unused_gpl_syms\">num_unused_gpl_syms</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#unused_gpl_syms\">unused_gpl_syms</a>;", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#unused_gpl_crcs\">unused_gpl_crcs</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* symbols that will be GPL-only in the near future. */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kernel_symbol\">kernel_symbol</a> *<a class=\"id\" href=\"#gpl_future_syms\">gpl_future_syms</a>;", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#gpl_future_crcs\">gpl_future_crcs</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_gpl_future_syms\">num_gpl_future_syms</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Exception table */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_exentries\">num_exentries</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#extable\">extable</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Startup function. */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#init\">init</a>)(void);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If this is non-NULL, vfree after init() returns */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#module_init\">module_init</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Here is the actual code + data, vfree'd on unload. */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#module_core\">module_core</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Here are the sizes of the init and core sections */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#init_size\">init_size</a>, <a class=\"id\" href=\"#core_size\">core_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The size of the executable code in each section.  */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#init_text_size\">init_text_size</a>, <a class=\"id\" href=\"#core_text_size\">core_text_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Arch-specific module values */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mod_arch_specific\">mod_arch_specific</a> <a class=\"id\" href=\"#arch\">arch</a>;", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#taints\">taints</a>;<span class=\"ts\"/><span class=\"comment\">/* same bits as kernel:tainted */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GENERIC_BUG\">CONFIG_GENERIC_BUG</a>", 
];
xr_frag_insert('l/a9/4a721174f8cc2ecba2b0a616d5cfdba60ebf2b.xr', __xr_tmp);
