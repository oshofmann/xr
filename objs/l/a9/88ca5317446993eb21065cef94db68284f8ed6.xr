var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * security/tomoyo/util.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Utility functions for TOMOYO.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2005-2010  NTT DATA CORPORATION</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"common.h\"", 
"", 
"<span class=\"comment\">/* Lock for protecting policy. */</span>", 
"<a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#tomoyo_policy_lock\">tomoyo_policy_lock</a>);", 
"", 
"<span class=\"comment\">/* Has /sbin/init started? */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_policy_loaded\">tomoyo_policy_loaded</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_parse_ulong - Parse an \"unsigned long\" value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @result: Pointer to \"unsigned long\".</span>", 
"<span class=\"comment\"> * @str:    Pointer to string to parse.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns value type on success, 0 otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The @src is updated to point the first character after the value</span>", 
"<span class=\"comment\"> * on success.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#tomoyo_parse_ulong\">tomoyo_parse_ulong</a>(unsigned long *<a class=\"id\" href=\"#result\">result</a>, char **<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#cp\">cp</a> = *<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ep\">ep</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#base\">base</a> = 10;", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#cp\">cp</a> == '0') {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#c\">c</a> = *(<a class=\"id\" href=\"#cp\">cp</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> == 'x' || <a class=\"id\" href=\"#c\">c</a> == 'X') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#c\">c</a> >= '0' && <a class=\"id\" href=\"#c\">c</a> <= '7') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#cp\">cp</a>, &amp;<a class=\"id\" href=\"#ep\">ep</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cp\">cp</a> == <a class=\"id\" href=\"#ep\">ep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#ep\">ep</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#base\">base</a>) {", 
"<span class=\"ts\"/>case 16:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TOMOYO_VALUE_TYPE_HEXADECIMAL\">TOMOYO_VALUE_TYPE_HEXADECIMAL</a>;", 
"<span class=\"ts\"/>case 8:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TOMOYO_VALUE_TYPE_OCTAL\">TOMOYO_VALUE_TYPE_OCTAL</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TOMOYO_VALUE_TYPE_DECIMAL\">TOMOYO_VALUE_TYPE_DECIMAL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_print_ulong - Print an \"unsigned long\" value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @buffer:     Pointer to buffer.</span>", 
"<span class=\"comment\"> * @buffer_len: Size of @buffer.</span>", 
"<span class=\"comment\"> * @value:      An \"unsigned long\" value.</span>", 
"<span class=\"comment\"> * @type:       Type of @value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns nothing.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tomoyo_print_ulong\">tomoyo_print_ulong</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>, const int <a class=\"id\" href=\"#buffer_len\">buffer_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#value\">value</a>, const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#TOMOYO_VALUE_TYPE_DECIMAL\">TOMOYO_VALUE_TYPE_DECIMAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buffer_len\">buffer_len</a>, \"%lu\", <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#TOMOYO_VALUE_TYPE_OCTAL\">TOMOYO_VALUE_TYPE_OCTAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buffer_len\">buffer_len</a>, \"0%lo\", <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#TOMOYO_VALUE_TYPE_HEXADECIMAL\">TOMOYO_VALUE_TYPE_HEXADECIMAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buffer_len\">buffer_len</a>, \"0x%lX\", <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buffer_len\">buffer_len</a>, \"type(%u)\", <a class=\"id\" href=\"#type\">type</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_parse_name_union - Parse a tomoyo_name_union.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @filename: Name or name group.</span>", 
"<span class=\"comment\"> * @ptr:      Pointer to \"struct tomoyo_name_union\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true on success, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_parse_name_union\">tomoyo_parse_name_union</a>(const char *<a class=\"id\" href=\"#filename\">filename</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#tomoyo_name_union\">tomoyo_name_union</a> *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tomoyo_correct_word\">tomoyo_correct_word</a>(<a class=\"id\" href=\"#filename\">filename</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filename\">filename</a>[0] == '@') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#tomoyo_get_group\">tomoyo_get_group</a>(<a class=\"id\" href=\"#filename\">filename</a> + 1, <a class=\"id\" href=\"#TOMOYO_PATH_GROUP\">TOMOYO_PATH_GROUP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#is_group\">is_group</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#group\">group</a> != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#filename\">filename</a> = <a class=\"id\" href=\"#tomoyo_get_name\">tomoyo_get_name</a>(<a class=\"id\" href=\"#filename\">filename</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#is_group\">is_group</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#filename\">filename</a> != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_parse_number_union - Parse a tomoyo_number_union.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @data: Number or number range or number group.</span>", 
"<span class=\"comment\"> * @ptr:  Pointer to \"struct tomoyo_number_union\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true on success, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_parse_number_union\">tomoyo_parse_number_union</a>(char *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#tomoyo_number_union\">tomoyo_number_union</a> *<a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#num\">num</a>, 0, sizeof(*<a class=\"id\" href=\"#num\">num</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>[0] == '@') {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tomoyo_correct_word\">tomoyo_correct_word</a>(<a class=\"id\" href=\"#data\">data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>-><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#tomoyo_get_group\">tomoyo_get_group</a>(<a class=\"id\" href=\"#data\">data</a> + 1, <a class=\"id\" href=\"#TOMOYO_NUMBER_GROUP\">TOMOYO_NUMBER_GROUP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>-><a class=\"id\" href=\"#is_group\">is_group</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#num\">num</a>-><a class=\"id\" href=\"#group\">group</a> != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#tomoyo_parse_ulong\">tomoyo_parse_ulong</a>(&amp;<a class=\"id\" href=\"#v\">v</a>, &amp;<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>-><a class=\"id\" href=\"#values\">values</a>[0] = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>-><a class=\"id\" href=\"#min_type\">min_type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>-><a class=\"id\" href=\"#values\">values</a>[1] = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>-><a class=\"id\" href=\"#max_type\">max_type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#data\">data</a>++ != '-')", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#tomoyo_parse_ulong\">tomoyo_parse_ulong</a>(&amp;<a class=\"id\" href=\"#v\">v</a>, &amp;<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#type\">type</a> || *<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>-><a class=\"id\" href=\"#values\">values</a>[1] = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>-><a class=\"id\" href=\"#max_type\">max_type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_byte_range - Check whether the string is a \\ooo style octal value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @str: Pointer to the string.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if @str is a \\ooo style octal value, false otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * TOMOYO uses \\ooo style representation for 0x01 - 0x20 and 0x7F - 0xFF.</span>", 
"<span class=\"comment\"> * This function verifies that \\ooo is in valid range.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_byte_range\">tomoyo_byte_range</a>(const char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>return *<a class=\"id\" href=\"#str\">str</a> >= '0' && *<a class=\"id\" href=\"#str\">str</a>++ <= '3' &&", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#str\">str</a> >= '0' && *<a class=\"id\" href=\"#str\">str</a>++ <= '7' &&", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#str\">str</a> >= '0' && *<a class=\"id\" href=\"#str\">str</a> <= '7';", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_alphabet_char - Check whether the character is an alphabet.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @c: The character to check.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if @c is an alphabet character, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_alphabet_char\">tomoyo_alphabet_char</a>(const char <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#c\">c</a> >= 'A' && <a class=\"id\" href=\"#c\">c</a> <= 'Z') || (<a class=\"id\" href=\"#c\">c</a> >= 'a' && <a class=\"id\" href=\"#c\">c</a> <= 'z');", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_make_byte - Make byte value from three octal characters.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @c1: The first character.</span>", 
"<span class=\"comment\"> * @c2: The second character.</span>", 
"<span class=\"comment\"> * @c3: The third character.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns byte value.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#tomoyo_make_byte\">tomoyo_make_byte</a>(const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#c1\">c1</a>, const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#c2\">c2</a>, const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#c3\">c3</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#c1\">c1</a> - '0') << 6) + ((<a class=\"id\" href=\"#c2\">c2</a> - '0') << 3) + (<a class=\"id\" href=\"#c3\">c3</a> - '0');", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_str_starts - Check whether the given string starts with the given keyword.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @src:  Pointer to pointer to the string.</span>", 
"<span class=\"comment\"> * @find: Pointer to the keyword.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if @src starts with @find, false otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The @src is updated to point the first character after the @find</span>", 
"<span class=\"comment\"> * if @src starts with @find.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_str_starts\">tomoyo_str_starts</a>(char **<a class=\"id\" href=\"#src\">src</a>, const char *<a class=\"id\" href=\"#find\">find</a>)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#find\">find</a>);", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a> = *<a class=\"id\" href=\"#src\">src</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#find\">find</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#src\">src</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_normalize_line - Format string.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @buffer: The line to normalize.</span>", 
];
xr_frag_insert('l/a9/88ca5317446993eb21065cef94db68284f8ed6.xr', __xr_tmp);
