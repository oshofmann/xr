var __xr_tmp = [
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_arch_exit - Perform any architecture specific uninitalization.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function will handle the uninitalization of any architecture</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>specific callbacks, for dynamic registration and unregistration.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#kgdb_arch_exit\">kgdb_arch_exit</a>(void);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pt_regs_to_gdb_regs - Convert ptrace regs to GDB regs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gdb_regs: A pointer to hold the registers in the order GDB wants.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@regs: The &amp;struct pt_regs of the current process.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Convert the pt_regs in @regs into the format for registers that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>GDB expects, stored in @gdb_regs.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#pt_regs_to_gdb_regs\">pt_regs_to_gdb_regs</a>(unsigned long *<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sleeping_thread_to_gdb_regs - Convert ptrace regs to GDB regs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gdb_regs: A pointer to hold the registers in the order GDB wants.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p: The &amp;struct task_struct of the desired process.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Convert the register values of the sleeping process in @p to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the format that GDB expects.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is called when kgdb does not have access to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>&amp;struct pt_regs and therefore it should fill the gdb registers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gdb_regs with what has<span class=\"ts\"/>been saved in &amp;struct thread_struct</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>thread field during switch_to.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void", 
"<a class=\"id\" href=\"#sleeping_thread_to_gdb_regs\">sleeping_thread_to_gdb_regs</a>(unsigned long *<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>gdb_regs_to_pt_regs - Convert GDB regs to ptrace regs.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gdb_regs: A pointer to hold the registers we've received from GDB.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@regs: A pointer to a &amp;struct pt_regs to hold these values in.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Convert the GDB regs in @gdb_regs into the pt_regs, and store them</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in @regs.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#gdb_regs_to_pt_regs\">gdb_regs_to_pt_regs</a>(unsigned long *<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_arch_handle_exception - Handle architecture specific GDB packets.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@vector: The error vector of the exception that happened.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@signo: The signal number of the exception that happened.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@err_code: The error code of the exception that happened.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@remcom_in_buffer: The buffer of the packet we have read.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@remcom_out_buffer: The buffer of %BUFMAX bytes to write a packet into.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@regs: The &amp;struct pt_regs of the current process.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function MUST handle the 'c' and 's' command packets,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as well packets to set / remove a hardware breakpoint, if used.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If there are additional packets which the hardware needs to handle,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>they are handled here.  The code should return -1 if it wants to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>process more packets, and a %0 or %1 if it wants to exit from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb callback.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int", 
"<a class=\"id\" href=\"#kgdb_arch_handle_exception\">kgdb_arch_handle_exception</a>(int <a class=\"id\" href=\"#vector\">vector</a>, int <a class=\"id\" href=\"#signo\">signo</a>, int <a class=\"id\" href=\"#err_code\">err_code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   char *<a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   char *<a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_roundup_cpus - Get other CPUs into a holding pattern</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags: Current IRQ state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On SMP systems, we need to get the attention of the other CPUs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and get them into a known state.  This should do what is needed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to get the other CPUs to call kgdb_wait(). Note that on some arches,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the NMI approach is not used for rounding up all the CPUs. For example,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in case of MIPS, smp_call_function() is used to roundup CPUs. In</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this case, we have to make sure that interrupts are enabled before</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>calling smp_call_function(). The argument to this function is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the flags that will be used when restoring the interrupts. There is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>local_irq_save() call before kgdb_roundup_cpus().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On non-SMP systems, this is not called.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#kgdb_roundup_cpus\">kgdb_roundup_cpus</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_arch_set_pc - Generic call back to the program counter</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@regs: Current &amp;struct pt_regs.</span>", 
"<span class=\"comment\"> *  @pc: The new value for the program counter</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function handles updating the program counter and requires an</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>architecture specific implementation.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#kgdb_arch_set_pc\">kgdb_arch_set_pc</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#pc\">pc</a>);", 
"", 
"", 
"<span class=\"comment\">/* Optional functions. */</span>", 
"extern int <a class=\"id\" href=\"#kgdb_validate_break_address\">kgdb_validate_break_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"extern int <a class=\"id\" href=\"#kgdb_arch_set_breakpoint\">kgdb_arch_set_breakpoint</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, char *<a class=\"id\" href=\"#saved_instr\">saved_instr</a>);", 
"extern int <a class=\"id\" href=\"#kgdb_arch_remove_breakpoint\">kgdb_arch_remove_breakpoint</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, char *<a class=\"id\" href=\"#bundle\">bundle</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_arch_late - Perform any architecture specific initalization.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function will handle the late initalization of any</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>architecture specific callbacks.  This is an optional function for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>handling things like late initialization of hw breakpoints.  The</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>default implementation does nothing.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#kgdb_arch_late\">kgdb_arch_late</a>(void);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct kgdb_arch - Describe architecture specific values.</span>", 
"<span class=\"comment\"> * @gdb_bpt_instr: The instruction to trigger a breakpoint.</span>", 
"<span class=\"comment\"> * @flags: Flags for the breakpoint, currently just %KGDB_HW_BREAKPOINT.</span>", 
"<span class=\"comment\"> * @set_breakpoint: Allow an architecture to specify how to set a software</span>", 
"<span class=\"comment\"> * breakpoint.</span>", 
"<span class=\"comment\"> * @remove_breakpoint: Allow an architecture to specify how to remove a</span>", 
"<span class=\"comment\"> * software breakpoint.</span>", 
"<span class=\"comment\"> * @set_hw_breakpoint: Allow an architecture to specify how to set a hardware</span>", 
"<span class=\"comment\"> * breakpoint.</span>", 
"<span class=\"comment\"> * @remove_hw_breakpoint: Allow an architecture to specify how to remove a</span>", 
"<span class=\"comment\"> * hardware breakpoint.</span>", 
"<span class=\"comment\"> * @remove_all_hw_break: Allow an architecture to specify how to remove all</span>", 
"<span class=\"comment\"> * hardware breakpoints.</span>", 
"<span class=\"comment\"> * @correct_hw_break: Allow an architecture to specify how to correct the</span>", 
"<span class=\"comment\"> * hardware debug registers.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kgdb_arch\">kgdb_arch</a> {", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_bpt_instr\">gdb_bpt_instr</a>[<a class=\"id\" href=\"#BREAK_INSTR_SIZE\">BREAK_INSTR_SIZE</a>];", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#set_breakpoint\">set_breakpoint</a>)(unsigned long, char *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#remove_breakpoint\">remove_breakpoint</a>)(unsigned long, char *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#set_hw_breakpoint\">set_hw_breakpoint</a>)(unsigned long, int, enum <a class=\"id\" href=\"#kgdb_bptype\">kgdb_bptype</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#remove_hw_breakpoint\">remove_hw_breakpoint</a>)(unsigned long, int, enum <a class=\"id\" href=\"#kgdb_bptype\">kgdb_bptype</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#remove_all_hw_break\">remove_all_hw_break</a>)(void);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#correct_hw_break\">correct_hw_break</a>)(void);", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct kgdb_io - Describe the interface for an I/O driver to talk with KGDB.</span>", 
"<span class=\"comment\"> * @name: Name of the I/O driver.</span>", 
"<span class=\"comment\"> * @read_char: Pointer to a function that will return one char.</span>", 
"<span class=\"comment\"> * @write_char: Pointer to a function that will write one char.</span>", 
"<span class=\"comment\"> * @flush: Pointer to a function that will flush any pending writes.</span>", 
"<span class=\"comment\"> * @init: Pointer to a function that will initialize the device.</span>", 
"<span class=\"comment\"> * @pre_exception: Pointer to a function that will do any prep work for</span>", 
"<span class=\"comment\"> * the I/O driver.</span>", 
"<span class=\"comment\"> * @post_exception: Pointer to a function that will do any cleanup work</span>", 
"<span class=\"comment\"> * for the I/O driver.</span>", 
"<span class=\"comment\"> * @is_console: 1 if the end device is a console 0 if the I/O device is</span>", 
"<span class=\"comment\"> * not a console</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kgdb_io\">kgdb_io</a> {", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#read_char\">read_char</a>) (void);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#write_char\">write_char</a>) (<a class=\"id\" href=\"#u8\">u8</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#flush\">flush</a>) (void);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#init\">init</a>) (void);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#pre_exception\">pre_exception</a>) (void);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#post_exception\">post_exception</a>) (void);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_console\">is_console</a>;", 
"};", 
"", 
"extern struct <a class=\"id\" href=\"#kgdb_arch\">kgdb_arch</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_kgdb_ops\">arch_kgdb_ops</a>;", 
"", 
"extern unsigned long <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#kgdb_arch_pc\">kgdb_arch_pc</a>(int <a class=\"id\" href=\"#exception\">exception</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"extern int <a class=\"id\" href=\"#kgdb_register_io_module\">kgdb_register_io_module</a>(struct <a class=\"id\" href=\"#kgdb_io\">kgdb_io</a> *<a class=\"id\" href=\"#local_kgdb_io_ops\">local_kgdb_io_ops</a>);", 
"extern void <a class=\"id\" href=\"#kgdb_unregister_io_module\">kgdb_unregister_io_module</a>(struct <a class=\"id\" href=\"#kgdb_io\">kgdb_io</a> *<a class=\"id\" href=\"#local_kgdb_io_ops\">local_kgdb_io_ops</a>);", 
"extern struct <a class=\"id\" href=\"#kgdb_io\">kgdb_io</a> *<a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>;", 
"", 
"extern int <a class=\"id\" href=\"#kgdb_hex2long\">kgdb_hex2long</a>(char **<a class=\"id\" href=\"#ptr\">ptr</a>, unsigned long *<a class=\"id\" href=\"#long_val\">long_val</a>);", 
"extern char *<a class=\"id\" href=\"#kgdb_mem2hex\">kgdb_mem2hex</a>(char *<a class=\"id\" href=\"#mem\">mem</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#count\">count</a>);", 
"extern int <a class=\"id\" href=\"#kgdb_hex2mem\">kgdb_hex2mem</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#mem\">mem</a>, int <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"extern int <a class=\"id\" href=\"#kgdb_isremovedbreak\">kgdb_isremovedbreak</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"extern void <a class=\"id\" href=\"#kgdb_schedule_breakpoint\">kgdb_schedule_breakpoint</a>(void);", 
"", 
"extern int", 
"<a class=\"id\" href=\"#kgdb_handle_exception\">kgdb_handle_exception</a>(int <a class=\"id\" href=\"#ex_vector\">ex_vector</a>, int <a class=\"id\" href=\"#signo\">signo</a>, int <a class=\"id\" href=\"#err_code\">err_code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"extern int <a class=\"id\" href=\"#kgdb_nmicallback\">kgdb_nmicallback</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, void *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_single_step\">kgdb_single_step</a>;", 
"extern <a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#in_dbg_master\">in_dbg_master</a>() \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>() == <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>))", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dbg_is_early\">dbg_is_early</a>;", 
"extern void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dbg_late_init\">dbg_late_init</a>(void);", 
"#else <span class=\"comment\">/* ! CONFIG_KGDB */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#in_dbg_master\">in_dbg_master</a>() (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dbg_late_init\">dbg_late_init</a>()", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* ! CONFIG_KGDB */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _KGDB_H_ */</span>", 
];
xr_frag_insert('l/a9/97e95e75b38ba9040e14858304adbe9fe82b6b.xr', __xr_tmp);
