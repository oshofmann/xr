var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/drivers/char/keyboard.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Written for linux by Johan Myreen as a translation from</span>", 
"<span class=\"comment\"> * the assembly version by Linus (with diacriticals added)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Some additional features added by Christoph Niemann (ChN), March 1993</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Loadable keymaps by Risto Kankkunen, May 1993</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Diacriticals redone &amp; other small changes, aeb@cwi.nl, June 1993</span>", 
"<span class=\"comment\"> * Added decr/incr_console, dynamic keymaps, Unicode support,</span>", 
"<span class=\"comment\"> * dynamic function/string keys, led setting,  Sept 1994</span>", 
"<span class=\"comment\"> * `Sticky' modifier keys, 951006.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 11-11-96: SAK should now work in the raw mode (Martin Mares)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Modified to provide 'generic' keyboard support by Hamish Macdonald</span>", 
"<span class=\"comment\"> * Merge with the m68k keyboard driver and split-off of the PC low-level</span>", 
"<span class=\"comment\"> * parts by Geert Uytterhoeven, May 1997</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 27-05-97: Added support for the Magic SysRq Key (Martin Mares)</span>", 
"<span class=\"comment\"> * 30-07-98: Dead keys redone, aeb@cwi.nl.</span>", 
"<span class=\"comment\"> * 21-08-02: Converted to input API, major cleanup. (Vojtech Pavlik)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>) <a class=\"id\" href=\"#KBUILD_MODNAME\">KBUILD_MODNAME</a> \": \" <a class=\"id\" href=\"#fmt\">fmt</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#consolemap\">consolemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty\">tty</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty_flip\">tty_flip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#irq\">irq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kbd_kern\">kbd_kern</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kbd_diacr\">kbd_diacr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vt_kern\">vt_kern</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#input\">input</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#reboot\">reboot</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"extern void <a class=\"id\" href=\"#ctrl_alt_del\">ctrl_alt_del</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Exported functions/variables</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KBD_DEFMODE\">KBD_DEFMODE</a> ((1 << <a class=\"id\" href=\"#VC_REPEAT\">VC_REPEAT</a>) | (1 << <a class=\"id\" href=\"#VC_META\">VC_META</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some laptops take the 789uiojklm,. keys as number pad when NumLock is on.</span>", 
"<span class=\"comment\"> * This seems a good reason to start with NumLock off. On HIL keyboards</span>", 
"<span class=\"comment\"> * of PARISC machines however there is no NumLock key and everyone expects the keypad</span>", 
"<span class=\"comment\"> * to be used for numbers.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PARISC\">CONFIG_PARISC</a>) && (<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_KEYBOARD_HIL\">CONFIG_KEYBOARD_HIL</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_KEYBOARD_HIL_OLD\">CONFIG_KEYBOARD_HIL_OLD</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KBD_DEFLEDS\">KBD_DEFLEDS</a> (1 << <a class=\"id\" href=\"#VC_NUMLOCK\">VC_NUMLOCK</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KBD_DEFLEDS\">KBD_DEFLEDS</a> 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KBD_DEFLOCK\">KBD_DEFLOCK</a> 0", 
"", 
"void <a class=\"id\" href=\"#compute_shiftstate\">compute_shiftstate</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handler Tables.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#K_HANDLERS\">K_HANDLERS</a>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k_self\">k_self</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_fn\">k_fn</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_spec\">k_spec</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_pad\">k_pad</a>,\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k_dead\">k_dead</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_cons\">k_cons</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_cur\">k_cur</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_shift\">k_shift</a>,\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k_meta\">k_meta</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_ascii\">k_ascii</a>,<span class=\"ts\"/><a class=\"id\" href=\"#k_lock\">k_lock</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_lowercase\">k_lowercase</a>,\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k_slock\">k_slock</a>,<span class=\"ts\"/><a class=\"id\" href=\"#k_dead2\">k_dead2</a>,<span class=\"ts\"/><a class=\"id\" href=\"#k_brl\">k_brl</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_ignore\">k_ignore</a>", 
"", 
"typedef void (<a class=\"id\" href=\"#k_handler_fn\">k_handler_fn</a>)(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    char <a class=\"id\" href=\"#up_flag\">up_flag</a>);", 
"static <a class=\"id\" href=\"#k_handler_fn\">k_handler_fn</a> <a class=\"id\" href=\"#K_HANDLERS\">K_HANDLERS</a>;", 
"static <a class=\"id\" href=\"#k_handler_fn\">k_handler_fn</a> *<a class=\"id\" href=\"#k_handler\">k_handler</a>[16] = { <a class=\"id\" href=\"#K_HANDLERS\">K_HANDLERS</a> };", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FN_HANDLERS\">FN_HANDLERS</a>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fn_null\">fn_null</a>,<span class=\"ts\"/><a class=\"id\" href=\"#fn_enter\">fn_enter</a>,<span class=\"ts\"/><a class=\"id\" href=\"#fn_show_ptregs\">fn_show_ptregs</a>,<span class=\"ts\"/><a class=\"id\" href=\"#fn_show_mem\">fn_show_mem</a>,\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fn_show_state\">fn_show_state</a>,<span class=\"ts\"/><a class=\"id\" href=\"#fn_send_intr\">fn_send_intr</a>,<span class=\"ts\"/><a class=\"id\" href=\"#fn_lastcons\">fn_lastcons</a>,<span class=\"ts\"/><a class=\"id\" href=\"#fn_caps_toggle\">fn_caps_toggle</a>,\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fn_num\">fn_num</a>,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fn_hold\">fn_hold</a>,<span class=\"ts\"/><a class=\"id\" href=\"#fn_scroll_forw\">fn_scroll_forw</a>,<span class=\"ts\"/><a class=\"id\" href=\"#fn_scroll_back\">fn_scroll_back</a>,\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fn_boot_it\">fn_boot_it</a>,<span class=\"ts\"/><a class=\"id\" href=\"#fn_caps_on\">fn_caps_on</a>,<span class=\"ts\"/><a class=\"id\" href=\"#fn_compose\">fn_compose</a>,<span class=\"ts\"/><a class=\"id\" href=\"#fn_SAK\">fn_SAK</a>,\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fn_dec_console\">fn_dec_console</a>, <a class=\"id\" href=\"#fn_inc_console\">fn_inc_console</a>, <a class=\"id\" href=\"#fn_spawn_con\">fn_spawn_con</a>,<span class=\"ts\"/><a class=\"id\" href=\"#fn_bare_num\">fn_bare_num</a>", 
"", 
"typedef void (<a class=\"id\" href=\"#fn_handler_fn\">fn_handler_fn</a>)(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>);", 
"static <a class=\"id\" href=\"#fn_handler_fn\">fn_handler_fn</a> <a class=\"id\" href=\"#FN_HANDLERS\">FN_HANDLERS</a>;", 
"static <a class=\"id\" href=\"#fn_handler_fn\">fn_handler_fn</a> *<a class=\"id\" href=\"#fn_handler\">fn_handler</a>[] = { <a class=\"id\" href=\"#FN_HANDLERS\">FN_HANDLERS</a> };", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Variables exported for vt_ioctl.c</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* maximum values each key_handler can handle */</span>", 
"const int <a class=\"id\" href=\"#max_vals\">max_vals</a>[] = {", 
"<span class=\"ts\"/>255, <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#func_table\">func_table</a>) - 1, <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#fn_handler\">fn_handler</a>) - 1, <a class=\"id\" href=\"#NR_PAD\">NR_PAD</a> - 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NR_DEAD\">NR_DEAD</a> - 1, 255, 3, <a class=\"id\" href=\"#NR_SHIFT\">NR_SHIFT</a> - 1, 255, <a class=\"id\" href=\"#NR_ASCII\">NR_ASCII</a> - 1, <a class=\"id\" href=\"#NR_LOCK\">NR_LOCK</a> - 1,", 
"<span class=\"ts\"/>255, <a class=\"id\" href=\"#NR_LOCK\">NR_LOCK</a> - 1, 255, <a class=\"id\" href=\"#NR_BRL\">NR_BRL</a> - 1", 
"};", 
"", 
"const int <a class=\"id\" href=\"#NR_TYPES\">NR_TYPES</a> = <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#max_vals\">max_vals</a>);", 
"", 
"struct <a class=\"id\" href=\"#kbd_struct\">kbd_struct</a> <a class=\"id\" href=\"#kbd_table\">kbd_table</a>[<a class=\"id\" href=\"#MAX_NR_CONSOLES\">MAX_NR_CONSOLES</a>];", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kbd_table\">kbd_table</a>);", 
"static struct <a class=\"id\" href=\"#kbd_struct\">kbd_struct</a> *<a class=\"id\" href=\"#kbd\">kbd</a> = <a class=\"id\" href=\"#kbd_table\">kbd_table</a>;", 
"", 
"struct <a class=\"id\" href=\"#vt_spawn_console\">vt_spawn_console</a> <a class=\"id\" href=\"#vt_spawn_con\">vt_spawn_con</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#lock\">lock</a> = <a class=\"id\" href=\"#__SPIN_LOCK_UNLOCKED\">__SPIN_LOCK_UNLOCKED</a>(<a class=\"id\" href=\"#vt_spawn_con\">vt_spawn_con</a>.<a class=\"id\" href=\"#lock\">lock</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pid\">pid</a>  = <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sig\">sig</a>  = 0,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Variables exported for vt.c</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#shift_state\">shift_state</a> = 0;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Internal Data.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#input_handler\">input_handler</a> <a class=\"id\" href=\"#kbd_handler\">kbd_handler</a>;", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#kbd_event_lock\">kbd_event_lock</a>);", 
"static unsigned long <a class=\"id\" href=\"#key_down\">key_down</a>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#KEY_CNT\">KEY_CNT</a>)];<span class=\"ts\"/><span class=\"comment\">/* keyboard key bitmap */</span>", 
"static unsigned char <a class=\"id\" href=\"#shift_down\">shift_down</a>[<a class=\"id\" href=\"#NR_SHIFT\">NR_SHIFT</a>];<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* shift state counters.. */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dead_key_next\">dead_key_next</a>;", 
"static int <a class=\"id\" href=\"#npadch\">npadch</a> = -1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* -1 or number assembled on pad */</span>", 
"static unsigned int <a class=\"id\" href=\"#diacr\">diacr</a>;", 
"static char <a class=\"id\" href=\"#rep\">rep</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* flag telling character repeat */</span>", 
"", 
"static unsigned char <a class=\"id\" href=\"#ledstate\">ledstate</a> = 0xff;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* undefined */</span>", 
"static unsigned char <a class=\"id\" href=\"#ledioctl\">ledioctl</a>;", 
"", 
"static struct <a class=\"id\" href=\"#ledptr\">ledptr</a> {", 
"<span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#valid\">valid</a>:1;", 
"} <a class=\"id\" href=\"#ledptrs\">ledptrs</a>[3];", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Notifier list for console keyboard events</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ATOMIC_NOTIFIER_HEAD\">ATOMIC_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#keyboard_notifier_list\">keyboard_notifier_list</a>);", 
"", 
"int <a class=\"id\" href=\"#register_keyboard_notifier\">register_keyboard_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_notifier_chain_register\">atomic_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#keyboard_notifier_list\">keyboard_notifier_list</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_keyboard_notifier\">register_keyboard_notifier</a>);", 
"", 
"int <a class=\"id\" href=\"#unregister_keyboard_notifier\">unregister_keyboard_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_notifier_chain_unregister\">atomic_notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#keyboard_notifier_list\">keyboard_notifier_list</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_keyboard_notifier\">unregister_keyboard_notifier</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Translation of scancodes to keycodes. We set them on only the first</span>", 
"<span class=\"comment\"> * keyboard in the list that accepts the scancode and keycode.</span>", 
"<span class=\"comment\"> * Explanation for not choosing the first attached keyboard anymore:</span>", 
"<span class=\"comment\"> *  USB keyboards for example have two event devices: one for all \"normal\"</span>", 
"<span class=\"comment\"> *  keys and one for extra function keys (like \"volume up\", \"make coffee\",</span>", 
"<span class=\"comment\"> *  etc.). So this means that scancodes for the extra function keys won't</span>", 
"<span class=\"comment\"> *  be valid for the first event device, but will be for the second.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#getset_keycode_data\">getset_keycode_data</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#scancode\">scancode</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#keycode\">keycode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#getkeycode_helper\">getkeycode_helper</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#getset_keycode_data\">getset_keycode_data</a> *<a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#input_get_keycode\">input_get_keycode</a>(<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#scancode\">scancode</a>, &amp;<a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#keycode\">keycode</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#error\">error</a> == 0; <span class=\"comment\">/* stop as soon as we successfully get one */</span>", 
"}", 
"", 
"int <a class=\"id\" href=\"#getkeycode\">getkeycode</a>(unsigned int <a class=\"id\" href=\"#scancode\">scancode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#getset_keycode_data\">getset_keycode_data</a> <a class=\"id\" href=\"#d\">d</a> = { <a class=\"id\" href=\"#scancode\">scancode</a>, 0, -<a class=\"id\" href=\"#ENODEV\">ENODEV</a> };", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_handler_for_each_handle\">input_handler_for_each_handle</a>(&amp;<a class=\"id\" href=\"#kbd_handler\">kbd_handler</a>, &amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#getkeycode_helper\">getkeycode_helper</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#d\">d</a>.<a class=\"id\" href=\"#error\">error</a> ?: <a class=\"id\" href=\"#d\">d</a>.<a class=\"id\" href=\"#keycode\">keycode</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#setkeycode_helper\">setkeycode_helper</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#getset_keycode_data\">getset_keycode_data</a> *<a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#input_set_keycode\">input_set_keycode</a>(<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#scancode\">scancode</a>, <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#keycode\">keycode</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#error\">error</a> == 0; <span class=\"comment\">/* stop as soon as we successfully set one */</span>", 
"}", 
"", 
"int <a class=\"id\" href=\"#setkeycode\">setkeycode</a>(unsigned int <a class=\"id\" href=\"#scancode\">scancode</a>, unsigned int <a class=\"id\" href=\"#keycode\">keycode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#getset_keycode_data\">getset_keycode_data</a> <a class=\"id\" href=\"#d\">d</a> = { <a class=\"id\" href=\"#scancode\">scancode</a>, <a class=\"id\" href=\"#keycode\">keycode</a>, -<a class=\"id\" href=\"#ENODEV\">ENODEV</a> };", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_handler_for_each_handle\">input_handler_for_each_handle</a>(&amp;<a class=\"id\" href=\"#kbd_handler\">kbd_handler</a>, &amp;<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#setkeycode_helper\">setkeycode_helper</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#d\">d</a>.<a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Making beeps and bells. Note that we prefer beeps to bells, but when</span>", 
"<span class=\"comment\"> * shutting the sound off we do both.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#kd_sound_helper\">kd_sound_helper</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#hz\">hz</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_SND\">EV_SND</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#SND_TONE\">SND_TONE</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sndbit\">sndbit</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_inject_event\">input_inject_event</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#EV_SND\">EV_SND</a>, <a class=\"id\" href=\"#SND_TONE\">SND_TONE</a>, *<a class=\"id\" href=\"#hz\">hz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#hz\">hz</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#SND_BELL\">SND_BELL</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sndbit\">sndbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_inject_event\">input_inject_event</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#EV_SND\">EV_SND</a>, <a class=\"id\" href=\"#SND_BELL\">SND_BELL</a>, *<a class=\"id\" href=\"#hz\">hz</a> ? 1 : 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kd_nosound\">kd_nosound</a>(unsigned long <a class=\"id\" href=\"#ignored\">ignored</a>)", 
"{", 
"<span class=\"ts\"/>static unsigned int <a class=\"id\" href=\"#zero\">zero</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_handler_for_each_handle\">input_handler_for_each_handle</a>(&amp;<a class=\"id\" href=\"#kbd_handler\">kbd_handler</a>, &amp;<a class=\"id\" href=\"#zero\">zero</a>, <a class=\"id\" href=\"#kd_sound_helper\">kd_sound_helper</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_TIMER\">DEFINE_TIMER</a>(<a class=\"id\" href=\"#kd_mksound_timer\">kd_mksound_timer</a>, <a class=\"id\" href=\"#kd_nosound\">kd_nosound</a>, 0, 0);", 
"", 
"void <a class=\"id\" href=\"#kd_mksound\">kd_mksound</a>(unsigned int <a class=\"id\" href=\"#hz\">hz</a>, unsigned int <a class=\"id\" href=\"#ticks\">ticks</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(&amp;<a class=\"id\" href=\"#kd_mksound_timer\">kd_mksound_timer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_handler_for_each_handle\">input_handler_for_each_handle</a>(&amp;<a class=\"id\" href=\"#kbd_handler\">kbd_handler</a>, &amp;<a class=\"id\" href=\"#hz\">hz</a>, <a class=\"id\" href=\"#kd_sound_helper\">kd_sound_helper</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hz\">hz</a> && <a class=\"id\" href=\"#ticks\">ticks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#kd_mksound_timer\">kd_mksound_timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#ticks\">ticks</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kd_mksound\">kd_mksound</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setting the keyboard rate.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#kbd_rate_helper\">kbd_rate_helper</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kbd_repeat\">kbd_repeat</a> *<a class=\"id\" href=\"#rep\">rep</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_REP\">EV_REP</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rep\">rep</a>[0].<a class=\"id\" href=\"#delay\">delay</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_inject_event\">input_inject_event</a>(<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#EV_REP\">EV_REP</a>, <a class=\"id\" href=\"#REP_DELAY\">REP_DELAY</a>, <a class=\"id\" href=\"#rep\">rep</a>[0].<a class=\"id\" href=\"#delay\">delay</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rep\">rep</a>[0].<a class=\"id\" href=\"#period\">period</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_inject_event\">input_inject_event</a>(<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#EV_REP\">EV_REP</a>, <a class=\"id\" href=\"#REP_PERIOD\">REP_PERIOD</a>, <a class=\"id\" href=\"#rep\">rep</a>[0].<a class=\"id\" href=\"#period\">period</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rep\">rep</a>[1].<a class=\"id\" href=\"#delay\">delay</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#REP_DELAY\">REP_DELAY</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rep\">rep</a>[1].<a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#REP_PERIOD\">REP_PERIOD</a>];", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#kbd_rate\">kbd_rate</a>(struct <a class=\"id\" href=\"#kbd_repeat\">kbd_repeat</a> *<a class=\"id\" href=\"#rep\">rep</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kbd_repeat\">kbd_repeat</a> <a class=\"id\" href=\"#data\">data</a>[2] = { *<a class=\"id\" href=\"#rep\">rep</a> };", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_handler_for_each_handle\">input_handler_for_each_handle</a>(&amp;<a class=\"id\" href=\"#kbd_handler\">kbd_handler</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#kbd_rate_helper\">kbd_rate_helper</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rep\">rep</a> = <a class=\"id\" href=\"#data\">data</a>[1];<span class=\"ts\"/><span class=\"comment\">/* Copy currently used settings */</span>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helper Functions.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#put_queue\">put_queue</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, int <a class=\"id\" href=\"#ch\">ch</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#tty\">tty</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tty\">tty</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_insert_flip_char\">tty_insert_flip_char</a>(<a class=\"id\" href=\"#tty\">tty</a>, <a class=\"id\" href=\"#ch\">ch</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_schedule_flip\">con_schedule_flip</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#puts_queue\">puts_queue</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, char *<a class=\"id\" href=\"#cp\">cp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#tty\">tty</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tty\">tty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#cp\">cp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_insert_flip_char\">tty_insert_flip_char</a>(<a class=\"id\" href=\"#tty\">tty</a>, *<a class=\"id\" href=\"#cp\">cp</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#con_schedule_flip\">con_schedule_flip</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#applkey\">applkey</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, int <a class=\"id\" href=\"#key\">key</a>, char <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>static char <a class=\"id\" href=\"#buf\">buf</a>[] = { 0x1b, 'O', 0x00, 0x00 };", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[1] = (<a class=\"id\" href=\"#mode\">mode</a> ? 'O' : '[');", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[2] = <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#puts_queue\">puts_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Many other routines do put_queue, but I think either</span>", 
"<span class=\"comment\"> * they produce ASCII, or they produce some user-assigned</span>", 
"<span class=\"comment\"> * string, and in both cases we might assume that it is</span>", 
"<span class=\"comment\"> * in utf-8 already.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#to_utf8\">to_utf8</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#uint\">uint</a> <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> &lt; 0x80)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  0******* */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#c\">c</a> &lt; 0x800) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 110***** 10****** */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0xc0 | (<a class=\"id\" href=\"#c\">c</a> >> 6));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0x80 | (<a class=\"id\" href=\"#c\">c</a> &amp; 0x3f));", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#c\">c</a> &lt; 0x10000) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> >= 0xD800 && <a class=\"id\" href=\"#c\">c</a> &lt; 0xE000)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> == 0xFFFF)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 1110**** 10****** 10****** */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0xe0 | (<a class=\"id\" href=\"#c\">c</a> >> 12));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0x80 | ((<a class=\"id\" href=\"#c\">c</a> >> 6) &amp; 0x3f));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0x80 | (<a class=\"id\" href=\"#c\">c</a> &amp; 0x3f));", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#c\">c</a> &lt; 0x110000) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 11110*** 10****** 10****** 10****** */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0xf0 | (<a class=\"id\" href=\"#c\">c</a> >> 18));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0x80 | ((<a class=\"id\" href=\"#c\">c</a> >> 12) &amp; 0x3f));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0x80 | ((<a class=\"id\" href=\"#c\">c</a> >> 6) &amp; 0x3f));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0x80 | (<a class=\"id\" href=\"#c\">c</a> &amp; 0x3f));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called after returning from RAW mode or when changing consoles - recompute</span>", 
"<span class=\"comment\"> * shift_down[] and shift_state from key_down[] maybe called when keymap is</span>", 
"<span class=\"comment\"> * undefined, so that shiftkey release is seen</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#compute_shiftstate\">compute_shiftstate</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shift_state\">shift_state</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#shift_down\">shift_down</a>, 0, sizeof(<a class=\"id\" href=\"#shift_down\">shift_down</a>));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#key_down\">key_down</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#key_down\">key_down</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#i\">i</a> * <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>; <a class=\"id\" href=\"#j\">j</a>++, <a class=\"id\" href=\"#k\">k</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#key_down\">key_down</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sym\">sym</a> = <a class=\"id\" href=\"#U\">U</a>(<a class=\"id\" href=\"#key_maps\">key_maps</a>[0][<a class=\"id\" href=\"#k\">k</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#KTYP\">KTYP</a>(<a class=\"id\" href=\"#sym\">sym</a>) != <a class=\"id\" href=\"#KT_SHIFT\">KT_SHIFT</a> && <a class=\"id\" href=\"#KTYP\">KTYP</a>(<a class=\"id\" href=\"#sym\">sym</a>) != <a class=\"id\" href=\"#KT_SLOCK\">KT_SLOCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#sym\">sym</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> == <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_CAPSSHIFT\">K_CAPSSHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_SHIFT\">K_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift_down\">shift_down</a>[<a class=\"id\" href=\"#val\">val</a>]++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift_state\">shift_state</a> |= (1 << <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We have a combining character DIACR here, followed by the character CH.</span>", 
"<span class=\"comment\"> * If the combination occurs in the table, return the corresponding value.</span>", 
"<span class=\"comment\"> * Otherwise, if CH is a space or equals DIACR, return DIACR.</span>", 
"<span class=\"comment\"> * Otherwise, conclude that DIACR was not combining after all,</span>", 
"<span class=\"comment\"> * queue it and return CH.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#handle_diacr\">handle_diacr</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned int <a class=\"id\" href=\"#ch\">ch</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#diacr\">diacr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#diacr\">diacr</a> = 0;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#d\">d</a> &amp; ~0xff) == <a class=\"id\" href=\"#BRL_UC_ROW\">BRL_UC_ROW</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ch\">ch</a> &amp; ~0xff) == <a class=\"id\" href=\"#BRL_UC_ROW\">BRL_UC_ROW</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#d\">d</a> | <a class=\"id\" href=\"#ch\">ch</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#accent_table_size\">accent_table_size</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#accent_table\">accent_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#diacr\">diacr</a> == <a class=\"id\" href=\"#d\">d</a> && <a class=\"id\" href=\"#accent_table\">accent_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#base\">base</a> == <a class=\"id\" href=\"#ch\">ch</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#accent_table\">accent_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ch\">ch</a> == ' ' || <a class=\"id\" href=\"#ch\">ch</a> == (<a class=\"id\" href=\"#BRL_UC_ROW\">BRL_UC_ROW</a>|0) || <a class=\"id\" href=\"#ch\">ch</a> == <a class=\"id\" href=\"#d\">d</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#d\">d</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#kbdmode\">kbdmode</a> == <a class=\"id\" href=\"#VC_UNICODE\">VC_UNICODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_utf8\">to_utf8</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#conv_uni_to_8bit\">conv_uni_to_8bit</a>(<a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ch\">ch</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Special function handlers</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#fn_enter\">fn_enter</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#diacr\">diacr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#kbdmode\">kbdmode</a> == <a class=\"id\" href=\"#VC_UNICODE\">VC_UNICODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_utf8\">to_utf8</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#diacr\">diacr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#conv_uni_to_8bit\">conv_uni_to_8bit</a>(<a class=\"id\" href=\"#diacr\">diacr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#diacr\">diacr</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 13);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vc_kbd_mode\">vc_kbd_mode</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#VC_CRLF\">VC_CRLF</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 10);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_caps_toggle\">fn_caps_toggle</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rep\">rep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chg_vc_kbd_led\">chg_vc_kbd_led</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#VC_CAPSLOCK\">VC_CAPSLOCK</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_caps_on\">fn_caps_on</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rep\">rep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_vc_kbd_led\">set_vc_kbd_led</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#VC_CAPSLOCK\">VC_CAPSLOCK</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_show_ptregs\">fn_show_ptregs</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#get_irq_regs\">get_irq_regs</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regs\">regs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#show_regs\">show_regs</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_hold\">fn_hold</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#tty\">tty</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rep\">rep</a> || !<a class=\"id\" href=\"#tty\">tty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: SCROLLOCK will be set (cleared) by stop_tty (start_tty);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * these routines are also activated by ^S/^Q.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (And SCROLLOCK can also be set by the ioctl KDSKBLED.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#stopped\">stopped</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_tty\">start_tty</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stop_tty\">stop_tty</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_num\">fn_num</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vc_kbd_mode\">vc_kbd_mode</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#VC_APPLIC\">VC_APPLIC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#applkey\">applkey</a>(<a class=\"id\" href=\"#vc\">vc</a>, 'P', 1);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fn_bare_num\">fn_bare_num</a>(<a class=\"id\" href=\"#vc\">vc</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bind this to Shift-NumLock if you work in application keypad mode</span>", 
"<span class=\"comment\"> * but want to be able to change the NumLock flag.</span>", 
"<span class=\"comment\"> * Bind this to NumLock if you prefer that the NumLock key always</span>", 
"<span class=\"comment\"> * changes the NumLock flag.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#fn_bare_num\">fn_bare_num</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rep\">rep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chg_vc_kbd_led\">chg_vc_kbd_led</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#VC_NUMLOCK\">VC_NUMLOCK</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_lastcons\">fn_lastcons</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* switch to the last used console, ChN */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_console\">set_console</a>(<a class=\"id\" href=\"#last_console\">last_console</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_dec_console\">fn_dec_console</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#fg_console\">fg_console</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Currently switching?  Queue this next switch relative to that. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#want_console\">want_console</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#want_console\">want_console</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#cur\">cur</a> - 1; <a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#cur\">cur</a>; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#MAX_NR_CONSOLES\">MAX_NR_CONSOLES</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vc_cons_allocated\">vc_cons_allocated</a>(<a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_console\">set_console</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_inc_console\">fn_inc_console</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#fg_console\">fg_console</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Currently switching?  Queue this next switch relative to that. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#want_console\">want_console</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#want_console\">want_console</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#cur\">cur</a>+1; <a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#cur\">cur</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#MAX_NR_CONSOLES\">MAX_NR_CONSOLES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vc_cons_allocated\">vc_cons_allocated</a>(<a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_console\">set_console</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_send_intr\">fn_send_intr</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#tty\">tty</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tty\">tty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty_insert_flip_char\">tty_insert_flip_char</a>(<a class=\"id\" href=\"#tty\">tty</a>, 0, <a class=\"id\" href=\"#TTY_BREAK\">TTY_BREAK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#con_schedule_flip\">con_schedule_flip</a>(<a class=\"id\" href=\"#tty\">tty</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_scroll_forw\">fn_scroll_forw</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scrollfront\">scrollfront</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_scroll_back\">fn_scroll_back</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scrollback\">scrollback</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_show_mem\">fn_show_mem</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_mem\">show_mem</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_show_state\">fn_show_state</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_state\">show_state</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_boot_it\">fn_boot_it</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl_alt_del\">ctrl_alt_del</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_compose\">fn_compose</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dead_key_next\">dead_key_next</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_spawn_con\">fn_spawn_con</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#vt_spawn_con\">vt_spawn_con</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vt_spawn_con\">vt_spawn_con</a>.<a class=\"id\" href=\"#pid\">pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kill_pid\">kill_pid</a>(<a class=\"id\" href=\"#vt_spawn_con\">vt_spawn_con</a>.<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#vt_spawn_con\">vt_spawn_con</a>.<a class=\"id\" href=\"#sig\">sig</a>, 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_pid\">put_pid</a>(<a class=\"id\" href=\"#vt_spawn_con\">vt_spawn_con</a>.<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vt_spawn_con\">vt_spawn_con</a>.<a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#vt_spawn_con\">vt_spawn_con</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_SAK\">fn_SAK</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#SAK_work\">SAK_work</a> = &amp;<a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#fg_console\">fg_console</a>].<a class=\"id\" href=\"#SAK_work\">SAK_work</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(<a class=\"id\" href=\"#SAK_work\">SAK_work</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fn_null\">fn_null</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#compute_shiftstate\">compute_shiftstate</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Special key handlers</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#k_ignore\">k_ignore</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#k_spec\">k_spec</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> >= <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#fn_handler\">fn_handler</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#kbdmode\">kbdmode</a> == <a class=\"id\" href=\"#VC_RAW\">VC_RAW</a> ||", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#kbdmode\">kbdmode</a> == <a class=\"id\" href=\"#VC_MEDIUMRAW\">VC_MEDIUMRAW</a>) &&", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#value\">value</a> != <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_SAK\">K_SAK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SAK is allowed even in raw mode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fn_handler\">fn_handler</a>[<a class=\"id\" href=\"#value\">value</a>](<a class=\"id\" href=\"#vc\">vc</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#k_lowercase\">k_lowercase</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"k_lowercase was called - impossible\\n\");", 
"}", 
"", 
"static void <a class=\"id\" href=\"#k_unicode\">k_unicode</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned int <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no action, if this is a key release */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#diacr\">diacr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#handle_diacr\">handle_diacr</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dead_key_next\">dead_key_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dead_key_next\">dead_key_next</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#diacr\">diacr</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#kbdmode\">kbdmode</a> == <a class=\"id\" href=\"#VC_UNICODE\">VC_UNICODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_utf8\">to_utf8</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#conv_uni_to_8bit\">conv_uni_to_8bit</a>(<a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle dead key. Note that we now may have several</span>", 
"<span class=\"comment\"> * dead keys modifying the same character. Very useful</span>", 
"<span class=\"comment\"> * for Vietnamese.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#k_deadunicode\">k_deadunicode</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned int <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#diacr\">diacr</a> = (<a class=\"id\" href=\"#diacr\">diacr</a> ? <a class=\"id\" href=\"#handle_diacr\">handle_diacr</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#value\">value</a>) : <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#k_self\">k_self</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k_unicode\">k_unicode</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#conv_8bit_to_uni\">conv_8bit_to_uni</a>(<a class=\"id\" href=\"#value\">value</a>), <a class=\"id\" href=\"#up_flag\">up_flag</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#k_dead2\">k_dead2</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k_deadunicode\">k_deadunicode</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#up_flag\">up_flag</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Obsolete - for backwards compatibility only</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#k_dead\">k_dead</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>static const unsigned char <a class=\"id\" href=\"#ret_diacr\">ret_diacr</a>[<a class=\"id\" href=\"#NR_DEAD\">NR_DEAD</a>] = {'`', '\\'', '^', '~', '\"', ',' };", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k_deadunicode\">k_deadunicode</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#ret_diacr\">ret_diacr</a>[<a class=\"id\" href=\"#value\">value</a>], <a class=\"id\" href=\"#up_flag\">up_flag</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#k_cons\">k_cons</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_console\">set_console</a>(<a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#k_fn\">k_fn</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if ((unsigned)<a class=\"id\" href=\"#value\">value</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#func_table\">func_table</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#func_table\">func_table</a>[<a class=\"id\" href=\"#value\">value</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#puts_queue\">puts_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#func_table\">func_table</a>[<a class=\"id\" href=\"#value\">value</a>]);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"k_fn called with value=%d\\n\", <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#k_cur\">k_cur</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>static const char <a class=\"id\" href=\"#cur_chars\">cur_chars</a>[] = \"BDCA\";", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#applkey\">applkey</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#cur_chars\">cur_chars</a>[<a class=\"id\" href=\"#value\">value</a>], <a class=\"id\" href=\"#vc_kbd_mode\">vc_kbd_mode</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#VC_CKMODE\">VC_CKMODE</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#k_pad\">k_pad</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>static const char <a class=\"id\" href=\"#pad_chars\">pad_chars</a>[] = \"0123456789+-*/\\015,.?()#\";", 
"<span class=\"ts\"/>static const char <a class=\"id\" href=\"#app_map\">app_map</a>[] = \"pqrstuvwxylSRQMnnmPQS\";", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no action, if this is a key release */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* kludge... shift forces cursor/number keys */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vc_kbd_mode\">vc_kbd_mode</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#VC_APPLIC\">VC_APPLIC</a>) && !<a class=\"id\" href=\"#shift_down\">shift_down</a>[<a class=\"id\" href=\"#KG_SHIFT\">KG_SHIFT</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#applkey\">applkey</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#app_map\">app_map</a>[<a class=\"id\" href=\"#value\">value</a>], 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vc_kbd_led\">vc_kbd_led</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#VC_NUMLOCK\">VC_NUMLOCK</a>)) {", 
"", 
];
xr_frag_insert('l/a9/e03cd37973abebf612aa6832cac80fcf0c51c9.xr', __xr_tmp);
