var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_DEBUGREG_H\">_ASM_X86_DEBUGREG_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_DEBUGREG_H\">_ASM_X86_DEBUGREG_H</a>", 
"", 
"", 
"<span class=\"comment\">/* Indicate the register numbers for a number of the specific</span>", 
"<span class=\"comment\">   debug registers.  Registers 0-3 contain the addresses we wish to trap on */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_FIRSTADDR\">DR_FIRSTADDR</a> 0        <span class=\"comment\">/* u_debugreg[DR_FIRSTADDR] */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_LASTADDR\">DR_LASTADDR</a> 3         <span class=\"comment\">/* u_debugreg[DR_LASTADDR]  */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_STATUS\">DR_STATUS</a> 6           <span class=\"comment\">/* u_debugreg[DR_STATUS]     */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_CONTROL\">DR_CONTROL</a> 7          <span class=\"comment\">/* u_debugreg[DR_CONTROL] */</span>", 
"", 
"<span class=\"comment\">/* Define a few things for the status register.  We can use this to determine</span>", 
"<span class=\"comment\">   which debugging register was responsible for the trap.  The other bits</span>", 
"<span class=\"comment\">   are either reserved or not of interest to us. */</span>", 
"", 
"<span class=\"comment\">/* Define reserved bits in DR6 which are always set to 1 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR6_RESERVED\">DR6_RESERVED</a><span class=\"ts\"/>(0xFFFF0FF0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_TRAP0\">DR_TRAP0</a><span class=\"ts\"/>(0x1)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* db0 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_TRAP1\">DR_TRAP1</a><span class=\"ts\"/>(0x2)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* db1 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_TRAP2\">DR_TRAP2</a><span class=\"ts\"/>(0x4)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* db2 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_TRAP3\">DR_TRAP3</a><span class=\"ts\"/>(0x8)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* db3 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_TRAP_BITS\">DR_TRAP_BITS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#DR_TRAP0\">DR_TRAP0</a>|<a class=\"id\" href=\"#DR_TRAP1\">DR_TRAP1</a>|<a class=\"id\" href=\"#DR_TRAP2\">DR_TRAP2</a>|<a class=\"id\" href=\"#DR_TRAP3\">DR_TRAP3</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_STEP\">DR_STEP</a><span class=\"ts\"/><span class=\"ts\"/>(0x4000)<span class=\"ts\"/><span class=\"comment\">/* single-step */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_SWITCH\">DR_SWITCH</a><span class=\"ts\"/>(0x8000)<span class=\"ts\"/><span class=\"comment\">/* task switch */</span>", 
"", 
"<span class=\"comment\">/* Now define a bunch of things for manipulating the control register.</span>", 
"<span class=\"comment\">   The top two bytes of the control register consist of 4 fields of 4</span>", 
"<span class=\"comment\">   bits - each field corresponds to one of the four debug registers,</span>", 
"<span class=\"comment\">   and indicates what types of access we trap on, and how large the data</span>", 
"<span class=\"comment\">   field is that we are looking at */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_CONTROL_SHIFT\">DR_CONTROL_SHIFT</a> 16 <span class=\"comment\">/* Skip this many bits in ctl register */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_CONTROL_SIZE\">DR_CONTROL_SIZE</a> 4   <span class=\"comment\">/* 4 control bits per register */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_RW_EXECUTE\">DR_RW_EXECUTE</a> (0x0)   <span class=\"comment\">/* Settings for the access types to trap on */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_RW_WRITE\">DR_RW_WRITE</a> (0x1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_RW_READ\">DR_RW_READ</a> (0x3)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_LEN_1\">DR_LEN_1</a> (0x0) <span class=\"comment\">/* Settings for data length to trap on */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_LEN_2\">DR_LEN_2</a> (0x4)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_LEN_4\">DR_LEN_4</a> (0xC)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_LEN_8\">DR_LEN_8</a> (0x8)", 
"", 
"<span class=\"comment\">/* The low byte to the control register determine which registers are</span>", 
"<span class=\"comment\">   enabled.  There are 4 fields of two bits.  One bit is \"local\", meaning</span>", 
"<span class=\"comment\">   that the processor will reset the bit after a task switch and the other</span>", 
"<span class=\"comment\">   is global meaning that we have to explicitly reset the bit.  With linux,</span>", 
"<span class=\"comment\">   you can use either one, since we explicitly zero the register when we enter</span>", 
"<span class=\"comment\">   kernel mode. */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_LOCAL_ENABLE_SHIFT\">DR_LOCAL_ENABLE_SHIFT</a> 0    <span class=\"comment\">/* Extra shift to the local enable bit */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_GLOBAL_ENABLE_SHIFT\">DR_GLOBAL_ENABLE_SHIFT</a> 1   <span class=\"comment\">/* Extra shift to the global enable bit */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_LOCAL_ENABLE\">DR_LOCAL_ENABLE</a> (0x1)      <span class=\"comment\">/* Local enable for reg 0 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_GLOBAL_ENABLE\">DR_GLOBAL_ENABLE</a> (0x2)     <span class=\"comment\">/* Global enable for reg 0 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_ENABLE_SIZE\">DR_ENABLE_SIZE</a> 2           <span class=\"comment\">/* 2 enable bits per register */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_LOCAL_ENABLE_MASK\">DR_LOCAL_ENABLE_MASK</a> (0x55)  <span class=\"comment\">/* Set  local bits for all 4 regs */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_GLOBAL_ENABLE_MASK\">DR_GLOBAL_ENABLE_MASK</a> (0xAA) <span class=\"comment\">/* Set global bits for all 4 regs */</span>", 
"", 
"<span class=\"comment\">/* The second byte to the control register has a few special things.</span>", 
"<span class=\"comment\">   We can slow the instruction pipeline for instructions coming via the</span>", 
"<span class=\"comment\">   gdt or the ldt if we want to.  I am not sure why this is an advantage */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__i386__\">__i386__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_CONTROL_RESERVED\">DR_CONTROL_RESERVED</a> (0xFC00) <span class=\"comment\">/* Reserved by Intel */</span>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_CONTROL_RESERVED\">DR_CONTROL_RESERVED</a> (0xFFFFFFFF0000FC00UL) <span class=\"comment\">/* Reserved */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_LOCAL_SLOWDOWN\">DR_LOCAL_SLOWDOWN</a> (0x100)   <span class=\"comment\">/* Local slow the pipeline */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DR_GLOBAL_SLOWDOWN\">DR_GLOBAL_SLOWDOWN</a> (0x200)  <span class=\"comment\">/* Global slow the pipeline */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * HW breakpoint additions</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"<a class=\"id\" href=\"#DECLARE_PER_CPU\">DECLARE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#cpu_dr7\">cpu_dr7</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hw_breakpoint_disable\">hw_breakpoint_disable</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Zero the control register for HW Breakpoint */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(0UL, 7);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Zero-out the individual HW breakpoint address registers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(0UL, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(0UL, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(0UL, 2);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(0UL, 3);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hw_breakpoint_active\">hw_breakpoint_active</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_dr7\">cpu_dr7</a>) &amp; <a class=\"id\" href=\"#DR_GLOBAL_ENABLE_MASK\">DR_GLOBAL_ENABLE_MASK</a>;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#aout_dump_debugregs\">aout_dump_debugregs</a>(struct <a class=\"id\" href=\"#user\">user</a> *<a class=\"id\" href=\"#dump\">dump</a>);", 
"", 
"extern void <a class=\"id\" href=\"#hw_breakpoint_restore\">hw_breakpoint_restore</a>(void);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_DEBUGREG_H */</span>", 
];
xr_frag_insert('l/aa/1e7bdf804fe4ee84442bec71d0fb501c1ecbf4.xr', __xr_tmp);
