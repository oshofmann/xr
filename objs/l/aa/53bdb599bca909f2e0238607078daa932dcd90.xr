var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kernel Debug Core</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Maintainer: Jason Wessel &lt;jason.wessel@windriver.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2000-2001 VERITAS Software Corporation.</span>", 
"<span class=\"comment\"> * Copyright (C) 2002-2004 Timesys Corporation</span>", 
"<span class=\"comment\"> * Copyright (C) 2003-2004 Amit S. Kale &lt;amitkale@linsyssoft.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2004 Pavel Machek &lt;pavel@ucw.cz&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2004-2006 Tom Rini &lt;trini@kernel.crashing.org&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2004-2006 LinSysSoft Technologies Pvt. Ltd.</span>", 
"<span class=\"comment\"> * Copyright (C) 2005-2009 Wind River Systems, Inc.</span>", 
"<span class=\"comment\"> * Copyright (C) 2007 MontaVista Software, Inc.</span>", 
"<span class=\"comment\"> * Copyright (C) 2008 Red Hat, Inc., Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Contributors at various stages not listed above:</span>", 
"<span class=\"comment\"> *  Jason Wessel ( jason.wessel@windriver.com )</span>", 
"<span class=\"comment\"> *  George Anzinger &lt;george@mvista.com&gt;</span>", 
"<span class=\"comment\"> *  Anurekh Saxena (anurekh.saxena@timesys.com)</span>", 
"<span class=\"comment\"> *  Lake Stevens Instrument Division (Glenn Engel)</span>", 
"<span class=\"comment\"> *  Jim Kingdon, Cygnus Support.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Original KGDB stub: David Grothe &lt;dave@gcom.com&gt;,</span>", 
"<span class=\"comment\"> * Tigran Aivazian &lt;tigran@sco.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is licensed under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> * version 2. This program is licensed \"as is\" without any warranty of any</span>", 
"<span class=\"comment\"> * kind, whether express or implied.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kgdb\">kgdb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdb\">kdb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#reboot\">reboot</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unaligned\">unaligned</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"debug_core.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KGDB_MAX_THREAD_QUERY\">KGDB_MAX_THREAD_QUERY</a> 17", 
"", 
"<span class=\"comment\">/* Our I/O buffers. */</span>", 
"static char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remcom_in_buffer\">remcom_in_buffer</a>[<a class=\"id\" href=\"#BUFMAX\">BUFMAX</a>];", 
"static char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remcom_out_buffer\">remcom_out_buffer</a>[<a class=\"id\" href=\"#BUFMAX\">BUFMAX</a>];", 
"", 
"<span class=\"comment\">/* Storage for the registers, in GDB format. */</span>", 
"static unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[(<a class=\"id\" href=\"#NUMREGBYTES\">NUMREGBYTES</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(unsigned long) - 1) /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(unsigned long)];", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * GDB remote protocol parser:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KGDB_KDB\">CONFIG_KGDB_KDB</a>", 
"static int <a class=\"id\" href=\"#gdbstub_read_wait\">gdbstub_read_wait</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* poll any additional I/O interfaces that are defined */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#kdb_poll_funcs\">kdb_poll_funcs</a>[<a class=\"id\" href=\"#i\">i</a>] != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kdb_poll_funcs\">kdb_poll_funcs</a>[<a class=\"id\" href=\"#i\">i</a>]();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"#else", 
"static int <a class=\"id\" href=\"#gdbstub_read_wait\">gdbstub_read_wait</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#read_char\">read_char</a>();", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#NO_POLL_CHAR\">NO_POLL_CHAR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#read_char\">read_char</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"comment\">/* scan for the sequence $&lt;data&gt;#&lt;checksum&gt; */</span>", 
"static void <a class=\"id\" href=\"#get_packet\">get_packet</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#checksum\">checksum</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#xmitcsum\">xmitcsum</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#ch\">ch</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Spin and wait around for the start character, ignore all</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * other characters:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#ch\">ch</a> = (<a class=\"id\" href=\"#gdbstub_read_wait\">gdbstub_read_wait</a>())) != '$')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nothing */</span>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#checksum\">checksum</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xmitcsum\">xmitcsum</a> = -1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * now, read until a # or end of buffer is found:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> &lt; (<a class=\"id\" href=\"#BUFMAX\">BUFMAX</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ch\">ch</a> = <a class=\"id\" href=\"#gdbstub_read_wait\">gdbstub_read_wait</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ch\">ch</a> == '#')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#checksum\">checksum</a> = <a class=\"id\" href=\"#checksum\">checksum</a> + <a class=\"id\" href=\"#ch\">ch</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#count\">count</a>] = <a class=\"id\" href=\"#ch\">ch</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#count\">count</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#count\">count</a>] = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ch\">ch</a> == '#') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xmitcsum\">xmitcsum</a> = <a class=\"id\" href=\"#hex_to_bin\">hex_to_bin</a>(<a class=\"id\" href=\"#gdbstub_read_wait\">gdbstub_read_wait</a>()) << 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xmitcsum\">xmitcsum</a> += <a class=\"id\" href=\"#hex_to_bin\">hex_to_bin</a>(<a class=\"id\" href=\"#gdbstub_read_wait\">gdbstub_read_wait</a>());", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#checksum\">checksum</a> != <a class=\"id\" href=\"#xmitcsum\">xmitcsum</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* failed checksum */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#write_char\">write_char</a>('-');", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* successful transfer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#write_char\">write_char</a>('+');", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#flush\">flush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#flush\">flush</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#checksum\">checksum</a> != <a class=\"id\" href=\"#xmitcsum\">xmitcsum</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Send the packet in buffer.</span>", 
"<span class=\"comment\"> * Check for gdb connection if asked for.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#put_packet\">put_packet</a>(char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#checksum\">checksum</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#ch\">ch</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * $&lt;packet info&gt;#&lt;checksum&gt;.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#write_char\">write_char</a>('$');", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#checksum\">checksum</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#ch\">ch</a> = <a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#count\">count</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#write_char\">write_char</a>(<a class=\"id\" href=\"#ch\">ch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#checksum\">checksum</a> += <a class=\"id\" href=\"#ch\">ch</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#write_char\">write_char</a>('#');", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#write_char\">write_char</a>(<a class=\"id\" href=\"#hex_asc_hi\">hex_asc_hi</a>(<a class=\"id\" href=\"#checksum\">checksum</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#write_char\">write_char</a>(<a class=\"id\" href=\"#hex_asc_lo\">hex_asc_lo</a>(<a class=\"id\" href=\"#checksum\">checksum</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#flush\">flush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#flush\">flush</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Now see what we get in reply. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ch\">ch</a> = <a class=\"id\" href=\"#gdbstub_read_wait\">gdbstub_read_wait</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ch\">ch</a> == 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ch\">ch</a> = <a class=\"id\" href=\"#gdbstub_read_wait\">gdbstub_read_wait</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we get an ACK, we are done. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ch\">ch</a> == '+')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we get the start of another packet, this means</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that GDB is attempting to reconnect.  We will NAK</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the packet being sent, and stop trying to send this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * packet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ch\">ch</a> == '$') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#write_char\">write_char</a>('-');", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#flush\">flush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#flush\">flush</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static char <a class=\"id\" href=\"#gdbmsgbuf\">gdbmsgbuf</a>[<a class=\"id\" href=\"#BUFMAX\">BUFMAX</a> + 1];", 
"", 
"void <a class=\"id\" href=\"#gdbstub_msg_write\">gdbstub_msg_write</a>(const char *<a class=\"id\" href=\"#s\">s</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#bufptr\">bufptr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#wcount\">wcount</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 'O'utput */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdbmsgbuf\">gdbmsgbuf</a>[0] = 'O';", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Fill and send buffers... */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bufptr\">bufptr</a> = <a class=\"id\" href=\"#gdbmsgbuf\">gdbmsgbuf</a> + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Calculate how many this time */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> << 1) &gt; (<a class=\"id\" href=\"#BUFMAX\">BUFMAX</a> - 2))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wcount\">wcount</a> = (<a class=\"id\" href=\"#BUFMAX\">BUFMAX</a> - 2) >> 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wcount\">wcount</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Pack in hex chars */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#wcount\">wcount</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bufptr\">bufptr</a> = <a class=\"id\" href=\"#pack_hex_byte\">pack_hex_byte</a>(<a class=\"id\" href=\"#bufptr\">bufptr</a>, <a class=\"id\" href=\"#s\">s</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bufptr\">bufptr</a> = '\\0';", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Move up */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> += <a class=\"id\" href=\"#wcount\">wcount</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#wcount\">wcount</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Write packet */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_packet\">put_packet</a>(<a class=\"id\" href=\"#gdbmsgbuf\">gdbmsgbuf</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Convert the memory pointed to by mem into hex, placing result in</span>", 
"<span class=\"comment\"> * buf.  Return a pointer to the last char put in buf (null). May</span>", 
"<span class=\"comment\"> * return an error.</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#kgdb_mem2hex\">kgdb_mem2hex</a>(char *<a class=\"id\" href=\"#mem\">mem</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use the upper half of buf as an intermediate buffer for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * raw memory copy.  Hex conversion will work against this one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#probe_kernel_read\">probe_kernel_read</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#pack_hex_byte\">pack_hex_byte</a>(<a class=\"id\" href=\"#buf\">buf</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Convert the hex array pointed to by buf into binary to be placed in</span>", 
"<span class=\"comment\"> * mem.  Return a pointer to the character AFTER the last byte</span>", 
"<span class=\"comment\"> * written.  May return an error.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kgdb_hex2mem\">kgdb_hex2mem</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#mem\">mem</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp_raw\">tmp_raw</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp_hex\">tmp_hex</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use the upper half of buf as an intermediate buffer for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * raw memory that is converted from hex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp_raw\">tmp_raw</a> = <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#count\">count</a> * 2;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp_hex\">tmp_hex</a> = <a class=\"id\" href=\"#tmp_raw\">tmp_raw</a> - 1;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#tmp_hex\">tmp_hex</a> >= <a class=\"id\" href=\"#buf\">buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp_raw\">tmp_raw</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tmp_raw\">tmp_raw</a> = <a class=\"id\" href=\"#hex_to_bin\">hex_to_bin</a>(*<a class=\"id\" href=\"#tmp_hex\">tmp_hex</a>--);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tmp_raw\">tmp_raw</a> |= <a class=\"id\" href=\"#hex_to_bin\">hex_to_bin</a>(*<a class=\"id\" href=\"#tmp_hex\">tmp_hex</a>--) << 4;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#probe_kernel_write\">probe_kernel_write</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#tmp_raw\">tmp_raw</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * While we find nice hex chars, build a long_val.</span>", 
"<span class=\"comment\"> * Return number of chars processed.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kgdb_hex2long\">kgdb_hex2long</a>(char **<a class=\"id\" href=\"#ptr\">ptr</a>, unsigned long *<a class=\"id\" href=\"#long_val\">long_val</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#hex_val\">hex_val</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num\">num</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#negate\">negate</a> = 0;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#long_val\">long_val</a> = 0;", 
"", 
"<span class=\"ts\"/>if (**<a class=\"id\" href=\"#ptr\">ptr</a> == '-') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#negate\">negate</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ptr\">ptr</a>)++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while (**<a class=\"id\" href=\"#ptr\">ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hex_val\">hex_val</a> = <a class=\"id\" href=\"#hex_to_bin\">hex_to_bin</a>(**<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hex_val\">hex_val</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#long_val\">long_val</a> = (*<a class=\"id\" href=\"#long_val\">long_val</a> << 4) | <a class=\"id\" href=\"#hex_val\">hex_val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#ptr\">ptr</a>)++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#negate\">negate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#long_val\">long_val</a> = -*<a class=\"id\" href=\"#long_val\">long_val</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#num\">num</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copy the binary array pointed to by buf into mem.  Fix $, #, and</span>", 
"<span class=\"comment\"> * 0x7d escaped with 0x7d. Return -EFAULT on failure or 0 on success.</span>", 
"<span class=\"comment\"> * The input buf is overwitten with the result to write to mem.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#kgdb_ebin2mem\">kgdb_ebin2mem</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, char *<a class=\"id\" href=\"#mem\">mem</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = 0;", 
];
xr_frag_insert('l/aa/53bdb599bca909f2e0238607078daa932dcd90.xr', __xr_tmp);
