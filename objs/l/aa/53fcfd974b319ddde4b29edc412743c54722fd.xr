var __xr_tmp = [
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_sem_associate - Smack access check for sem</span>", 
"<span class=\"comment\"> * @sma: the object</span>", 
"<span class=\"comment\"> * @semflg: access requested</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current has the requested access, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_sem_associate\">smack_sem_associate</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>, int <a class=\"id\" href=\"#semflg\">semflg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may\">may</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> = <a class=\"id\" href=\"#smack_flags_to_may\">smack_flags_to_may</a>(<a class=\"id\" href=\"#semflg\">semflg</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_sem\">smk_curacc_sem</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#may\">may</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_sem_shmctl - Smack access check for sem</span>", 
"<span class=\"comment\"> * @sma: the object</span>", 
"<span class=\"comment\"> * @cmd: what it wants to do</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current has the requested access, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_sem_semctl\">smack_sem_semctl</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may\">may</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GETPID\">GETPID</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GETNCNT\">GETNCNT</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GETZCNT\">GETZCNT</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GETVAL\">GETVAL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GETALL\">GETALL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_STAT\">IPC_STAT</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SEM_STAT\">SEM_STAT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> = <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SETVAL\">SETVAL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SETALL\">SETALL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_RMID\">IPC_RMID</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_SET\">IPC_SET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> = <a class=\"id\" href=\"#MAY_READWRITE\">MAY_READWRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_INFO\">IPC_INFO</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SEM_INFO\">SEM_INFO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * System level information</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_sem\">smk_curacc_sem</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#may\">may</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_sem_semop - Smack checks of semaphore operations</span>", 
"<span class=\"comment\"> * @sma: the object</span>", 
"<span class=\"comment\"> * @sops: unused</span>", 
"<span class=\"comment\"> * @nsops: unused</span>", 
"<span class=\"comment\"> * @alter: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Treated as read and write in all cases.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if access is allowed, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_sem_semop\">smack_sem_semop</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>, struct <a class=\"id\" href=\"#sembuf\">sembuf</a> *<a class=\"id\" href=\"#sops\">sops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned <a class=\"id\" href=\"#nsops\">nsops</a>, int <a class=\"id\" href=\"#alter\">alter</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_sem\">smk_curacc_sem</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#MAY_READWRITE\">MAY_READWRITE</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_msg_alloc_security - Set the security blob for msg</span>", 
"<span class=\"comment\"> * @msq: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_msg_queue_alloc_security\">smack_msg_queue_alloc_security</a>(struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#kisp\">kisp</a> = &amp;<a class=\"id\" href=\"#msq\">msq</a>-><a class=\"id\" href=\"#q_perm\">q_perm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kisp\">kisp</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_msg_free_security - Clear the security blob for msg</span>", 
"<span class=\"comment\"> * @msq: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Clears the blob pointer</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_msg_queue_free_security\">smack_msg_queue_free_security</a>(struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#kisp\">kisp</a> = &amp;<a class=\"id\" href=\"#msq\">msq</a>-><a class=\"id\" href=\"#q_perm\">q_perm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kisp\">kisp</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_of_msq - the smack pointer for the msq</span>", 
"<span class=\"comment\"> * @msq: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer to the smack value</span>", 
"<span class=\"comment\"> */</span>", 
"static char *<a class=\"id\" href=\"#smack_of_msq\">smack_of_msq</a>(struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>)", 
"{", 
"<span class=\"ts\"/>return (char *)<a class=\"id\" href=\"#msq\">msq</a>-><a class=\"id\" href=\"#q_perm\">q_perm</a>.<a class=\"id\" href=\"#security\">security</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smk_curacc_msq : helper to check if current has access on msq</span>", 
"<span class=\"comment\"> * @msq : the msq</span>", 
"<span class=\"comment\"> * @access : access requested</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * return 0 if current has access, error otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smk_curacc_msq\">smk_curacc_msq</a>(struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>, int <a class=\"id\" href=\"#access\">access</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#msp\">msp</a> = <a class=\"id\" href=\"#smack_of_msq\">smack_of_msq</a>(<a class=\"id\" href=\"#msq\">msq</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_IPC\">LSM_AUDIT_DATA_IPC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#ipc_id\">ipc_id</a> = <a class=\"id\" href=\"#msq\">msq</a>-><a class=\"id\" href=\"#q_perm\">q_perm</a>.<a class=\"id\" href=\"#id\">id</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#msp\">msp</a>, <a class=\"id\" href=\"#access\">access</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_msg_queue_associate - Smack access check for msg_queue</span>", 
"<span class=\"comment\"> * @msq: the object</span>", 
"<span class=\"comment\"> * @msqflg: access requested</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current has the requested access, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_msg_queue_associate\">smack_msg_queue_associate</a>(struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>, int <a class=\"id\" href=\"#msqflg\">msqflg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may\">may</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> = <a class=\"id\" href=\"#smack_flags_to_may\">smack_flags_to_may</a>(<a class=\"id\" href=\"#msqflg\">msqflg</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_msq\">smk_curacc_msq</a>(<a class=\"id\" href=\"#msq\">msq</a>, <a class=\"id\" href=\"#may\">may</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_msg_queue_msgctl - Smack access check for msg_queue</span>", 
"<span class=\"comment\"> * @msq: the object</span>", 
"<span class=\"comment\"> * @cmd: what it wants to do</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current has the requested access, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_msg_queue_msgctl\">smack_msg_queue_msgctl</a>(struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may\">may</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_STAT\">IPC_STAT</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MSG_STAT\">MSG_STAT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> = <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_SET\">IPC_SET</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_RMID\">IPC_RMID</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> = <a class=\"id\" href=\"#MAY_READWRITE\">MAY_READWRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPC_INFO\">IPC_INFO</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MSG_INFO\">MSG_INFO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * System level information</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_msq\">smk_curacc_msq</a>(<a class=\"id\" href=\"#msq\">msq</a>, <a class=\"id\" href=\"#may\">may</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_msg_queue_msgsnd - Smack access check for msg_queue</span>", 
"<span class=\"comment\"> * @msq: the object</span>", 
"<span class=\"comment\"> * @msg: unused</span>", 
"<span class=\"comment\"> * @msqflg: access requested</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current has the requested access, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_msg_queue_msgsnd\">smack_msg_queue_msgsnd</a>(struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>, struct <a class=\"id\" href=\"#msg_msg\">msg_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#msqflg\">msqflg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may\">may</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#may\">may</a> = <a class=\"id\" href=\"#smack_flags_to_may\">smack_flags_to_may</a>(<a class=\"id\" href=\"#msqflg\">msqflg</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_msq\">smk_curacc_msq</a>(<a class=\"id\" href=\"#msq\">msq</a>, <a class=\"id\" href=\"#may\">may</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_msg_queue_msgsnd - Smack access check for msg_queue</span>", 
"<span class=\"comment\"> * @msq: the object</span>", 
"<span class=\"comment\"> * @msg: unused</span>", 
"<span class=\"comment\"> * @target: unused</span>", 
"<span class=\"comment\"> * @type: unused</span>", 
"<span class=\"comment\"> * @mode: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current has read and write access, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_msg_queue_msgrcv\">smack_msg_queue_msgrcv</a>(struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>, struct <a class=\"id\" href=\"#msg_msg\">msg_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>, long <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc_msq\">smk_curacc_msq</a>(<a class=\"id\" href=\"#msq\">msq</a>, <a class=\"id\" href=\"#MAY_READWRITE\">MAY_READWRITE</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_ipc_permission - Smack access for ipc_permission()</span>", 
"<span class=\"comment\"> * @ipp: the object permissions</span>", 
"<span class=\"comment\"> * @flag: access requested</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if current has read and write access, error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_ipc_permission\">smack_ipc_permission</a>(struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipp\">ipp</a>, short <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#ipp\">ipp</a>-><a class=\"id\" href=\"#security\">security</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may\">may</a> = <a class=\"id\" href=\"#smack_flags_to_may\">smack_flags_to_may</a>(<a class=\"id\" href=\"#flag\">flag</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_IPC\">LSM_AUDIT_DATA_IPC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#ipc_id\">ipc_id</a> = <a class=\"id\" href=\"#ipp\">ipp</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_curacc\">smk_curacc</a>(<a class=\"id\" href=\"#isp\">isp</a>, <a class=\"id\" href=\"#may\">may</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_ipc_getsecid - Extract smack security id</span>", 
"<span class=\"comment\"> * @ipp: the object permissions</span>", 
"<span class=\"comment\"> * @secid: where result will be saved</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_ipc_getsecid\">smack_ipc_getsecid</a>(struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipp\">ipp</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#smack\">smack</a> = <a class=\"id\" href=\"#ipp\">ipp</a>-><a class=\"id\" href=\"#security\">security</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#secid\">secid</a> = <a class=\"id\" href=\"#smack_to_secid\">smack_to_secid</a>(<a class=\"id\" href=\"#smack\">smack</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_d_instantiate - Make sure the blob is correct on an inode</span>", 
"<span class=\"comment\"> * @opt_dentry: dentry where inode will be attached</span>", 
"<span class=\"comment\"> * @inode: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set the inode's security blob if it hasn't been done already.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_d_instantiate\">smack_d_instantiate</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#opt_dentry\">opt_dentry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sbp\">sbp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#superblock_smack\">superblock_smack</a> *<a class=\"id\" href=\"#sbsp\">sbsp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_smack\">inode_smack</a> *<a class=\"id\" href=\"#isp\">isp</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#csp\">csp</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#fetched\">fetched</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#final\">final</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dp\">dp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_lock\">smk_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the inode is already instantiated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * take the quick way out</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_flags\">smk_flags</a> &amp; <a class=\"id\" href=\"#SMK_INODE_INSTANT\">SMK_INODE_INSTANT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlockandout\">unlockandout</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbp\">sbp</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sbsp\">sbsp</a> = <a class=\"id\" href=\"#sbp\">sbp</a>-><a class=\"id\" href=\"#s_security\">s_security</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We're going to use the superblock default label</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if there's no label on the file.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#sbsp\">sbsp</a>-><a class=\"id\" href=\"#smk_default\">smk_default</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is the root inode the superblock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * may be in the process of initialization.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If that is the case use the root value out</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the superblock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opt_dentry\">opt_dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a> == <a class=\"id\" href=\"#opt_dentry\">opt_dentry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_inode\">smk_inode</a> = <a class=\"id\" href=\"#sbsp\">sbsp</a>-><a class=\"id\" href=\"#smk_root\">smk_root</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_flags\">smk_flags</a> |= <a class=\"id\" href=\"#SMK_INODE_INSTANT\">SMK_INODE_INSTANT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlockandout\">unlockandout</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is pretty hackish.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Casey says that we shouldn't have to do</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * file system specific code, but it does help</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with keeping it simple.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#sbp\">sbp</a>-><a class=\"id\" href=\"#s_magic\">s_magic</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SMACK_MAGIC\">SMACK_MAGIC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Casey says that it's a little embarassing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that the smack file system doesn't do</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * extended attributes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#smack_known_star\">smack_known_star</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PIPEFS_MAGIC\">PIPEFS_MAGIC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Casey says pipes are easy (?)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#smack_known_star\">smack_known_star</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DEVPTS_SUPER_MAGIC\">DEVPTS_SUPER_MAGIC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * devpts seems content with the label of the task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Programs that change smack have to treat the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pty with respect.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#csp\">csp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SOCKFS_MAGIC\">SOCKFS_MAGIC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Casey says sockets get the smack of the task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#csp\">csp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PROC_SUPER_MAGIC\">PROC_SUPER_MAGIC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Casey says procfs appears not to care.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The superblock default suffices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TMPFS_MAGIC\">TMPFS_MAGIC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Device labels should come from the filesystem,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but watch out, because they're volitile,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * getting recreated on every reboot.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#smack_known_star\">smack_known_star</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * No break.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If a smack value has been set we want to use it,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but since tmpfs isn't giving us the opportunity</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to set mount options simulate setting the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * superblock default.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This isn't an understood special case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get the value from the xattr.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * No xattr support means, alas, no SMACK label.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Use the aforeapplied default.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It would be curious if the label of the task</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * does not match that assigned.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#getxattr\">getxattr</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get the dentry for xattr.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dp\">dp</a> = <a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#opt_dentry\">opt_dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fetched\">fetched</a> = <a class=\"id\" href=\"#smk_fetch\">smk_fetch</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#dp\">dp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fetched\">fetched</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#fetched\">fetched</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dp\">dp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#final\">final</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_inode\">smk_inode</a> = <a class=\"id\" href=\"#csp\">csp</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_inode\">smk_inode</a> = <a class=\"id\" href=\"#final\">final</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_flags\">smk_flags</a> |= <a class=\"id\" href=\"#SMK_INODE_INSTANT\">SMK_INODE_INSTANT</a>;", 
"", 
"<a class=\"id\" href=\"#unlockandout\">unlockandout</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#isp\">isp</a>-><a class=\"id\" href=\"#smk_lock\">smk_lock</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_getprocattr - Smack process attribute access</span>", 
"<span class=\"comment\"> * @p: the object task</span>", 
"<span class=\"comment\"> * @name: the name of the attribute in /proc/.../attr</span>", 
"<span class=\"comment\"> * @value: where to put the result</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Places a copy of the task Smack into value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the length of the smack label or an error code</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_getprocattr\">smack_getprocattr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, char *<a class=\"id\" href=\"#name\">name</a>, char **<a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#slen\">slen</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, \"current\") != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#task_security\">task_security</a>(<a class=\"id\" href=\"#p\">p</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cp\">cp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slen\">slen</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#cp\">cp</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#slen\">slen</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_setprocattr - Smack process attribute setting</span>", 
"<span class=\"comment\"> * @p: the object task</span>", 
"<span class=\"comment\"> * @name: the name of the attribute in /proc/.../attr</span>", 
"<span class=\"comment\"> * @value: the value to set</span>", 
"<span class=\"comment\"> * @size: the size of the value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sets the Smack value of the task. Only setting self</span>", 
"<span class=\"comment\"> * is permitted and only with privilege</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the length of the smack label or an error code</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_setprocattr\">smack_setprocattr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#newsmack\">newsmack</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Changing another process' Smack value is too dangerous</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and supports no sane use case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_MAC_ADMIN\">CAP_MAC_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#size\">size</a> == 0 || <a class=\"id\" href=\"#size\">size</a> >= <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, \"current\") != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newsmack\">newsmack</a> = <a class=\"id\" href=\"#smk_import\">smk_import</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#newsmack\">newsmack</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No process is ever allowed the web (\"@\") label.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#newsmack\">newsmack</a> == <a class=\"id\" href=\"#smack_known_web\">smack_known_web</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#prepare_creds\">prepare_creds</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#newsmack\">newsmack</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#commit_creds\">commit_creds</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_unix_stream_connect - Smack access on UDS</span>", 
"<span class=\"comment\"> * @sock: one socket</span>", 
"<span class=\"comment\"> * @other: the other socket</span>", 
"<span class=\"comment\"> * @newsk: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 if a subject with the smack of sock could access</span>", 
"<span class=\"comment\"> * an object with the smack of other, otherwise an error code</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_unix_stream_connect\">smack_unix_stream_connect</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#other\">other</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#newsk\">newsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#SOCK_INODE\">SOCK_INODE</a>(<a class=\"id\" href=\"#sock\">sock</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#SOCK_INODE\">SOCK_INODE</a>(<a class=\"id\" href=\"#other\">other</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_NET\">LSM_AUDIT_DATA_NET</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_net_sk\">smk_ad_setfield_u_net_sk</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#other\">other</a>-><a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_access\">smk_access</a>(<a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#sp\">sp</a>), <a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#op\">op</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#MAY_READWRITE\">MAY_READWRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_unix_may_send - Smack access on UDS</span>", 
"<span class=\"comment\"> * @sock: one socket</span>", 
"<span class=\"comment\"> * @other: the other socket</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 if a subject with the smack of sock could access</span>", 
"<span class=\"comment\"> * an object with the smack of other, otherwise an error code</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_unix_may_send\">smack_unix_may_send</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#other\">other</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#SOCK_INODE\">SOCK_INODE</a>(<a class=\"id\" href=\"#sock\">sock</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#SOCK_INODE\">SOCK_INODE</a>(<a class=\"id\" href=\"#other\">other</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_NET\">LSM_AUDIT_DATA_NET</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_setfield_u_net_sk\">smk_ad_setfield_u_net_sk</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#other\">other</a>-><a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_access\">smk_access</a>(<a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#sp\">sp</a>), <a class=\"id\" href=\"#smk_of_inode\">smk_of_inode</a>(<a class=\"id\" href=\"#op\">op</a>), <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_socket_sendmsg - Smack check based on destination host</span>", 
"<span class=\"comment\"> * @sock: the socket</span>", 
"<span class=\"comment\"> * @msg: the message</span>", 
"<span class=\"comment\"> * @size: the size of the message</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 if the current subject can write to the destination</span>", 
"<span class=\"comment\"> * host. This is only a question if the destination is a single</span>", 
"<span class=\"comment\"> * label host.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_socket_sendmsg\">smack_socket_sendmsg</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *<a class=\"id\" href=\"#sip\">sip</a> = (struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *) <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_name\">msg_name</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Perfectly reasonable for this to be NULL</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sip\">sip</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#sip\">sip</a>-><a class=\"id\" href=\"#sin_family\">sin_family</a> != <a class=\"id\" href=\"#AF_INET\">AF_INET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smack_netlabel_send\">smack_netlabel_send</a>(<a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#sip\">sip</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_from_secattr - Convert a netlabel attr.mls.lvl/attr.mls.cat pair to smack</span>", 
"<span class=\"comment\"> * @sap: netlabel secattr</span>", 
"<span class=\"comment\"> * @sip: where to put the result</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copies a smack label into sip</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_from_secattr\">smack_from_secattr</a>(struct <a class=\"id\" href=\"#netlbl_lsm_secattr\">netlbl_lsm_secattr</a> *<a class=\"id\" href=\"#sap\">sap</a>, char *<a class=\"id\" href=\"#sip\">sip</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#smack\">smack</a>[<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pcat\">pcat</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#NETLBL_SECATTR_MLS_LVL\">NETLBL_SECATTR_MLS_LVL</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Looks like a CIPSO packet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If there are flags but no level netlabel isn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * behaving the way we expect it to.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get the categories, if any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Without guidance regarding the smack value</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for the packet fall back on the network</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ambient value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#smack\">smack</a>, '\\0', <a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#NETLBL_SECATTR_MLS_CAT\">NETLBL_SECATTR_MLS_CAT</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#pcat\">pcat</a> = -1;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcat\">pcat</a> = <a class=\"id\" href=\"#netlbl_secattr_catmap_walk\">netlbl_secattr_catmap_walk</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mls\">mls</a>.<a class=\"id\" href=\"#cat\">cat</a>, <a class=\"id\" href=\"#pcat\">pcat</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pcat\">pcat</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack_catset_bit\">smack_catset_bit</a>(<a class=\"id\" href=\"#pcat\">pcat</a>, <a class=\"id\" href=\"#smack\">smack</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If it is CIPSO using smack direct mapping</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we are already done. WeeHee.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mls\">mls</a>.<a class=\"id\" href=\"#lvl\">lvl</a> == <a class=\"id\" href=\"#smack_cipso_direct\">smack_cipso_direct</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#sip\">sip</a>, <a class=\"id\" href=\"#smack\">smack</a>, <a class=\"id\" href=\"#SMK_MAXLEN\">SMK_MAXLEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Look it up in the supplied table if it is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a direct mapping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack_from_cipso\">smack_from_cipso</a>(<a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#mls\">mls</a>.<a class=\"id\" href=\"#lvl\">lvl</a>, <a class=\"id\" href=\"#smack\">smack</a>, <a class=\"id\" href=\"#sip\">sip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#NETLBL_SECATTR_SECID\">NETLBL_SECATTR_SECID</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Looks like a fallback, which gives us a secid.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#smack_from_secid\">smack_from_secid</a>(<a class=\"id\" href=\"#sap\">sap</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#secid\">secid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This has got to be a bug because it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * impossible to specify a fallback without</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * specifying the label, which will ensure</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it has a secid, and the only way to get a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * secid is from a fallback.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sp\">sp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#sip\">sip</a>, <a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#SMK_MAXLEN\">SMK_MAXLEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Without guidance regarding the smack value</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for the packet fall back on the network</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ambient value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#sip\">sip</a>, <a class=\"id\" href=\"#smack_net_ambient\">smack_net_ambient</a>, <a class=\"id\" href=\"#SMK_MAXLEN\">SMK_MAXLEN</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_socket_sock_rcv_skb - Smack packet delivery access check</span>", 
"<span class=\"comment\"> * @sk: socket</span>", 
"<span class=\"comment\"> * @skb: packet</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if the packet should be delivered, an error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_socket_sock_rcv_skb\">smack_socket_sock_rcv_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_lsm_secattr\">netlbl_lsm_secattr</a> <a class=\"id\" href=\"#secattr\">secattr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket_smack\">socket_smack</a> *<a class=\"id\" href=\"#ssp\">ssp</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_security\">sk_security</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#smack\">smack</a>[<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#csp\">csp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a> != <a class=\"id\" href=\"#PF_INET\">PF_INET</a> && <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a> != <a class=\"id\" href=\"#PF_INET6\">PF_INET6</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Translate what netlabel gave us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netlbl_secattr_init\">netlbl_secattr_init</a>(&amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#netlbl_skbuff_getattr\">netlbl_skbuff_getattr</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a>, &amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack_from_secattr\">smack_from_secattr</a>(&amp;<a class=\"id\" href=\"#secattr\">secattr</a>, <a class=\"id\" href=\"#smack\">smack</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csp\">csp</a> = <a class=\"id\" href=\"#smack\">smack</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csp\">csp</a> = <a class=\"id\" href=\"#smack_net_ambient\">smack_net_ambient</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netlbl_secattr_destroy\">netlbl_secattr_destroy</a>(&amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_NET\">LSM_AUDIT_DATA_NET</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#net\">net</a>.<a class=\"id\" href=\"#family\">family</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#net\">net</a>.<a class=\"id\" href=\"#netif\">netif</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#skb_iif\">skb_iif</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipv4_skb_to_auditdata\">ipv4_skb_to_auditdata</a>(<a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Receiving a packet requires that the other end</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be able to write here. Read access is not required.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is the simplist possible security model</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for networking.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_access\">smk_access</a>(<a class=\"id\" href=\"#csp\">csp</a>, <a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_in\">smk_in</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netlbl_skbuff_err\">netlbl_skbuff_err</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#rc\">rc</a>, 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_socket_getpeersec_stream - pull in packet label</span>", 
"<span class=\"comment\"> * @sock: the socket</span>", 
"<span class=\"comment\"> * @optval: user's destination</span>", 
"<span class=\"comment\"> * @optlen: size thereof</span>", 
"<span class=\"comment\"> * @len: max thereof</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * returns zero on success, an error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_socket_getpeersec_stream\">smack_socket_getpeersec_stream</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optval\">optval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optlen\">optlen</a>, unsigned <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket_smack\">socket_smack</a> *<a class=\"id\" href=\"#ssp\">ssp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#slen\">slen</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssp\">ssp</a> = <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_security\">sk_security</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slen\">slen</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_packet\">smk_packet</a>) + 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slen\">slen</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#optval\">optval</a>, <a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_packet\">smk_packet</a>, <a class=\"id\" href=\"#slen\">slen</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#slen\">slen</a>, <a class=\"id\" href=\"#optlen\">optlen</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_socket_getpeersec_dgram - pull in packet label</span>", 
"<span class=\"comment\"> * @sock: the socket</span>", 
"<span class=\"comment\"> * @skb: packet data</span>", 
"<span class=\"comment\"> * @secid: pointer to where to put the secid of the packet</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sets the netlabel socket state on sk from parent</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_socket_getpeersec_dgram\">smack_socket_getpeersec_dgram</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>)", 
"", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_lsm_secattr\">netlbl_lsm_secattr</a> <a class=\"id\" href=\"#secattr\">secattr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#smack\">smack</a>[<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#family\">family</a> = <a class=\"id\" href=\"#PF_INET\">PF_INET</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only works for families with packets.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sock\">sock</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a> != <a class=\"id\" href=\"#PF_INET\">PF_INET</a> && <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a> != <a class=\"id\" href=\"#PF_INET6\">PF_INET6</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#family\">family</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Translate what netlabel gave us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netlbl_secattr_init\">netlbl_secattr_init</a>(&amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#netlbl_skbuff_getattr\">netlbl_skbuff_getattr</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#family\">family</a>, &amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack_from_secattr\">smack_from_secattr</a>(&amp;<a class=\"id\" href=\"#secattr\">secattr</a>, <a class=\"id\" href=\"#smack\">smack</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netlbl_secattr_destroy\">netlbl_secattr_destroy</a>(&amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Give up if we couldn't get anything</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#smack_to_secid\">smack_to_secid</a>(<a class=\"id\" href=\"#smack\">smack</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#secid\">secid</a> = <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_sock_graft - Initialize a newly created socket with an existing sock</span>", 
"<span class=\"comment\"> * @sk: child sock</span>", 
"<span class=\"comment\"> * @parent: parent socket</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set the smk_{in,out} state of an existing sock based on the process that</span>", 
"<span class=\"comment\"> * is creating the new socket.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_sock_graft\">smack_sock_graft</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket_smack\">socket_smack</a> *<a class=\"id\" href=\"#ssp\">ssp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a> == <a class=\"id\" href=\"#NULL\">NULL</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a> != <a class=\"id\" href=\"#PF_INET\">PF_INET</a> && <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a> != <a class=\"id\" href=\"#PF_INET6\">PF_INET6</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssp\">ssp</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_security\">sk_security</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_in\">smk_in</a> = <a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_out\">smk_out</a> = <a class=\"id\" href=\"#current_security\">current_security</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* cssp-&gt;smk_packet is already set in smack_inet_csk_clone() */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inet_conn_request - Smack access check on connect</span>", 
"<span class=\"comment\"> * @sk: socket involved</span>", 
"<span class=\"comment\"> * @skb: packet</span>", 
"<span class=\"comment\"> * @req: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if a task with the packet label could write to</span>", 
"<span class=\"comment\"> * the socket, otherwise an error code</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_inet_conn_request\">smack_inet_conn_request</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#request_sock\">request_sock</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#family\">family</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket_smack\">socket_smack</a> *<a class=\"id\" href=\"#ssp\">ssp</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_security\">sk_security</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_lsm_secattr\">netlbl_lsm_secattr</a> <a class=\"id\" href=\"#secattr\">secattr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#hdr\">hdr</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#smack\">smack</a>[<a class=\"id\" href=\"#SMK_LABELLEN\">SMK_LABELLEN</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* handle mapped IPv4 packets arriving via IPv6 sockets */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#family\">family</a> == <a class=\"id\" href=\"#PF_INET6\">PF_INET6</a> && <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a> == <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_IP\">ETH_P_IP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#family\">family</a> = <a class=\"id\" href=\"#PF_INET\">PF_INET</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netlbl_secattr_init\">netlbl_secattr_init</a>(&amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#netlbl_skbuff_getattr\">netlbl_skbuff_getattr</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#family\">family</a>, &amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack_from_secattr\">smack_from_secattr</a>(&amp;<a class=\"id\" href=\"#secattr\">secattr</a>, <a class=\"id\" href=\"#smack\">smack</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#smack\">smack</a>, <a class=\"id\" href=\"#smack_known_huh\">smack_known_huh</a>.<a class=\"id\" href=\"#smk_known\">smk_known</a>, <a class=\"id\" href=\"#SMK_MAXLEN\">SMK_MAXLEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netlbl_secattr_destroy\">netlbl_secattr_destroy</a>(&amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_NET\">LSM_AUDIT_DATA_NET</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#net\">net</a>.<a class=\"id\" href=\"#family\">family</a> = <a class=\"id\" href=\"#family\">family</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#net\">net</a>.<a class=\"id\" href=\"#netif\">netif</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#skb_iif\">skb_iif</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipv4_skb_to_auditdata\">ipv4_skb_to_auditdata</a>(<a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Receiving a packet requires that the other end be able to write</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here. Read access is not required.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#smk_access\">smk_access</a>(<a class=\"id\" href=\"#smack\">smack</a>, <a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_in\">smk_in</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Save the peer's label in the request_sock so we can later setup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * smk_packet in the child socket so that SO_PEERCRED can report it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#peer_secid\">peer_secid</a> = <a class=\"id\" href=\"#smack_to_secid\">smack_to_secid</a>(<a class=\"id\" href=\"#smack\">smack</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to decide if we want to label the incoming connection here</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if we do we only need to label the request_sock and the stack will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * propogate the wire-label to the sock when it is created.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hdr\">hdr</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>.<a class=\"id\" href=\"#sin_addr\">sin_addr</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a> = <a class=\"id\" href=\"#hdr\">hdr</a>-><a class=\"id\" href=\"#saddr\">saddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smack_host_label\">smack_host_label</a>(&amp;<a class=\"id\" href=\"#addr\">addr</a>) == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netlbl_secattr_init\">netlbl_secattr_init</a>(&amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack_to_secattr\">smack_to_secattr</a>(<a class=\"id\" href=\"#smack\">smack</a>, &amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#netlbl_req_setattr\">netlbl_req_setattr</a>(<a class=\"id\" href=\"#req\">req</a>, &amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netlbl_secattr_destroy\">netlbl_secattr_destroy</a>(&amp;<a class=\"id\" href=\"#secattr\">secattr</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netlbl_req_delattr\">netlbl_req_delattr</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_inet_csk_clone - Copy the connection information to the new socket</span>", 
"<span class=\"comment\"> * @sk: the new socket</span>", 
"<span class=\"comment\"> * @req: the connection's request_sock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Transfer the connection's peer label to the newly created socket.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_inet_csk_clone\">smack_inet_csk_clone</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#request_sock\">request_sock</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#socket_smack\">socket_smack</a> *<a class=\"id\" href=\"#ssp\">ssp</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_security\">sk_security</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#smack\">smack</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#peer_secid\">peer_secid</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smack\">smack</a> = <a class=\"id\" href=\"#smack_from_secid\">smack_from_secid</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#peer_secid\">peer_secid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_packet\">smk_packet</a>, <a class=\"id\" href=\"#smack\">smack</a>, <a class=\"id\" href=\"#SMK_MAXLEN\">SMK_MAXLEN</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ssp\">ssp</a>-><a class=\"id\" href=\"#smk_packet\">smk_packet</a>[0] = '\\0';", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Key management security hooks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Casey has not tested key support very heavily.</span>", 
"<span class=\"comment\"> * The permission check is most likely too restrictive.</span>", 
"<span class=\"comment\"> * If you care about keys please have a look.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEYS\">CONFIG_KEYS</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_key_alloc - Set the key security blob</span>", 
"<span class=\"comment\"> * @key: object</span>", 
"<span class=\"comment\"> * @cred: the credentials to use</span>", 
"<span class=\"comment\"> * @flags: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * No allocation required</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_key_alloc\">smack_key_alloc</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_key_free - Clear the key security blob</span>", 
"<span class=\"comment\"> * @key: the object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Clear the blob pointer</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#smack_key_free\">smack_key_free</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * smack_key_permission - Smack access on a key</span>", 
"<span class=\"comment\"> * @key_ref: gets to the object</span>", 
"<span class=\"comment\"> * @cred: the credentials to use</span>", 
"<span class=\"comment\"> * @perm: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 if the task has read and write to the object,</span>", 
"<span class=\"comment\"> * an error code otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_key_permission\">smack_key_permission</a>(<a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#key_ref\">key_ref</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#key_perm_t\">key_perm_t</a> <a class=\"id\" href=\"#perm\">perm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyp\">keyp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smk_audit_info\">smk_audit_info</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#keyp\">keyp</a> = <a class=\"id\" href=\"#key_ref_to_ptr\">key_ref_to_ptr</a>(<a class=\"id\" href=\"#key_ref\">key_ref</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyp\">keyp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the key hasn't been initialized give it access so that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it may do so.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keyp\">keyp</a>-><a class=\"id\" href=\"#security\">security</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This should not occur</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smk_ad_init\">smk_ad_init</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#LSM_AUDIT_DATA_KEY\">LSM_AUDIT_DATA_KEY</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#key_struct\">key_struct</a>.<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#keyp\">keyp</a>-><a class=\"id\" href=\"#serial\">serial</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#key_struct\">key_struct</a>.<a class=\"id\" href=\"#key_desc\">key_desc</a> = <a class=\"id\" href=\"#keyp\">keyp</a>-><a class=\"id\" href=\"#description\">description</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smk_access\">smk_access</a>(<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a>, <a class=\"id\" href=\"#keyp\">keyp</a>-><a class=\"id\" href=\"#security\">security</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#MAY_READWRITE\">MAY_READWRITE</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_KEYS */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Smack Audit hooks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Audit requires a unique representation of each Smack specific</span>", 
"<span class=\"comment\"> * rule. This unique representation is used to distinguish the</span>", 
"<span class=\"comment\"> * object to be audited from remaining kernel objects and also</span>", 
"<span class=\"comment\"> * works as a glue between the audit hooks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Since repository entries are added but never deleted, we'll use</span>", 
"<span class=\"comment\"> * the smack_known label address related to the given audit rule as</span>", 
"<span class=\"comment\"> * the needed unique representation. This also better fits the smack</span>", 
"<span class=\"comment\"> * model where nearly everything is a label.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_audit_rule_init - Initialize a smack audit rule</span>", 
"<span class=\"comment\"> * @field: audit rule fields given from user-space (audit.h)</span>", 
"<span class=\"comment\"> * @op: required testing operator (=, !=, &gt;, &lt;, ...)</span>", 
"<span class=\"comment\"> * @rulestr: smack label to be audited</span>", 
"<span class=\"comment\"> * @vrule: pointer to save our own audit rule representation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Prepare to audit cases where (@field @op @rulestr) is true.</span>", 
"<span class=\"comment\"> * The label to be audited is created if necessay.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_audit_rule_init\">smack_audit_rule_init</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#op\">op</a>, char *<a class=\"id\" href=\"#rulestr\">rulestr</a>, void **<a class=\"id\" href=\"#vrule\">vrule</a>)", 
"{", 
"<span class=\"ts\"/>char **<a class=\"id\" href=\"#rule\">rule</a> = (char **)<a class=\"id\" href=\"#vrule\">vrule</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rule\">rule</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#field\">field</a> != <a class=\"id\" href=\"#AUDIT_SUBJ_USER\">AUDIT_SUBJ_USER</a> && <a class=\"id\" href=\"#field\">field</a> != <a class=\"id\" href=\"#AUDIT_OBJ_USER\">AUDIT_OBJ_USER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a> != <a class=\"id\" href=\"#Audit_equal\">Audit_equal</a> && <a class=\"id\" href=\"#op\">op</a> != <a class=\"id\" href=\"#Audit_not_equal\">Audit_not_equal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rule\">rule</a> = <a class=\"id\" href=\"#smk_import\">smk_import</a>(<a class=\"id\" href=\"#rulestr\">rulestr</a>, 0);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_audit_rule_known - Distinguish Smack audit rules</span>", 
"<span class=\"comment\"> * @krule: rule of interest, in Audit kernel representation format</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is used to filter Smack rules from remaining Audit ones.</span>", 
"<span class=\"comment\"> * If it's proved that this rule belongs to us, the</span>", 
"<span class=\"comment\"> * audit_rule_match hook will be called to do the final judgement.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_audit_rule_known\">smack_audit_rule_known</a>(struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *<a class=\"id\" href=\"#krule\">krule</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_field\">audit_field</a> *<a class=\"id\" href=\"#f\">f</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#krule\">krule</a>-><a class=\"id\" href=\"#field_count\">field_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = &amp;<a class=\"id\" href=\"#krule\">krule</a>-><a class=\"id\" href=\"#fields\">fields</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#AUDIT_SUBJ_USER\">AUDIT_SUBJ_USER</a> || <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#AUDIT_OBJ_USER\">AUDIT_OBJ_USER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * smack_audit_rule_match - Audit given object ?</span>", 
"<span class=\"comment\"> * @secid: security id for identifying the object to test</span>", 
"<span class=\"comment\"> * @field: audit rule flags given from user-space</span>", 
"<span class=\"comment\"> * @op: required testing operator</span>", 
"<span class=\"comment\"> * @vrule: smack internal rule presentation</span>", 
"<span class=\"comment\"> * @actx: audit context associated with the check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The core Audit hook. It's used to take the decision of</span>", 
"<span class=\"comment\"> * whether to audit or not to audit a given object.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#smack_audit_rule_match\">smack_audit_rule_match</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#op\">op</a>, void *<a class=\"id\" href=\"#vrule\">vrule</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#audit_context\">audit_context</a> *<a class=\"id\" href=\"#actx\">actx</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#smack\">smack</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#rule\">rule</a> = <a class=\"id\" href=\"#vrule\">vrule</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rule\">rule</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log\">audit_log</a>(<a class=\"id\" href=\"#actx\">actx</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#AUDIT_SELINUX_ERR\">AUDIT_SELINUX_ERR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Smack: missing rule\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#field\">field</a> != <a class=\"id\" href=\"#AUDIT_SUBJ_USER\">AUDIT_SUBJ_USER</a> && <a class=\"id\" href=\"#field\">field</a> != <a class=\"id\" href=\"#AUDIT_OBJ_USER\">AUDIT_OBJ_USER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smack\">smack</a> = <a class=\"id\" href=\"#smack_from_secid\">smack_from_secid</a>(<a class=\"id\" href=\"#secid\">secid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No need to do string comparisons. If a match occurs,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * both pointers will point to the same smack_known</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * label.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a> == <a class=\"id\" href=\"#Audit_equal\">Audit_equal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#rule\">rule</a> == <a class=\"id\" href=\"#smack\">smack</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a> == <a class=\"id\" href=\"#Audit_not_equal\">Audit_not_equal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#rule\">rule</a> != <a class=\"id\" href=\"#smack\">smack</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
];
xr_frag_insert('l/aa/53fcfd974b319ddde4b29edc412743c54722fd.xr', __xr_tmp);
