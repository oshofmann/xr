var __xr_tmp = [
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#TIF_FREEZE\">TIF_FREEZE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Request that a process be frozen</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_freeze_flag\">set_freeze_flag</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_thread_flag\">set_tsk_thread_flag</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#TIF_FREEZE\">TIF_FREEZE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sometimes we may need to cancel the previous 'freeze' request</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_freeze_flag\">clear_freeze_flag</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_thread_flag\">clear_tsk_thread_flag</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#TIF_FREEZE\">TIF_FREEZE</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#should_send_signal\">should_send_signal</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return !(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_FREEZER_NOSIG\">PF_FREEZER_NOSIG</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Takes and releases task alloc lock using task_lock() */</span>", 
"extern int <a class=\"id\" href=\"#thaw_process\">thaw_process</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"extern void <a class=\"id\" href=\"#refrigerator\">refrigerator</a>(void);", 
"extern int <a class=\"id\" href=\"#freeze_processes\">freeze_processes</a>(void);", 
"extern void <a class=\"id\" href=\"#thaw_processes\">thaw_processes</a>(void);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#try_to_freeze\">try_to_freeze</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#freezing\">freezing</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refrigerator\">refrigerator</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"}", 
"", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#freeze_task\">freeze_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#sig_only\">sig_only</a>);", 
"extern void <a class=\"id\" href=\"#cancel_freezing\">cancel_freezing</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_FREEZER\">CONFIG_CGROUP_FREEZER</a>", 
"extern int <a class=\"id\" href=\"#cgroup_freezing_or_frozen\">cgroup_freezing_or_frozen</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"#else <span class=\"comment\">/* !CONFIG_CGROUP_FREEZER */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cgroup_freezing_or_frozen\">cgroup_freezing_or_frozen</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_CGROUP_FREEZER */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The PF_FREEZER_SKIP flag should be set by a vfork parent right before it</span>", 
"<span class=\"comment\"> * calls wait_for_completion(&amp;vfork) and reset right after it returns from this</span>", 
"<span class=\"comment\"> * function.  Next, the parent should call try_to_freeze() to freeze itself</span>", 
"<span class=\"comment\"> * appropriately in case the child has exited before the freezing of tasks is</span>", 
"<span class=\"comment\"> * complete.  However, we don't want kernel threads to be frozen in unexpected</span>", 
"<span class=\"comment\"> * places, so we allow them to block freeze_processes() instead or to set</span>", 
"<span class=\"comment\"> * PF_NOFREEZE if needed and PF_FREEZER_SKIP is only set for userland vfork</span>", 
"<span class=\"comment\"> * parents.  Fortunately, in the ____call_usermodehelper() case the parent won't</span>", 
"<span class=\"comment\"> * really block freeze_processes(), since ____call_usermodehelper() (the child)</span>", 
"<span class=\"comment\"> * does a little before exec/exit and it can't be frozen before waking up the</span>", 
"<span class=\"comment\"> * parent.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If the current task is a user space one, tell the freezer not to count it as</span>", 
"<span class=\"comment\"> * freezable.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#freezer_do_not_count\">freezer_do_not_count</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_FREEZER_SKIP\">PF_FREEZER_SKIP</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If the current task is a user space one, tell the freezer to count it as</span>", 
"<span class=\"comment\"> * freezable again and try to freeze it.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#freezer_count\">freezer_count</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_FREEZER_SKIP\">PF_FREEZER_SKIP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_freeze\">try_to_freeze</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check if the task should be counted as freezeable by the freezer</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#freezer_should_skip\">freezer_should_skip</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return !!(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_FREEZER_SKIP\">PF_FREEZER_SKIP</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tell the freezer that the current task should be frozen by it</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_freezable\">set_freezable</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_NOFREEZE\">PF_NOFREEZE</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tell the freezer that the current task should be frozen by it and that it</span>", 
"<span class=\"comment\"> * should send a fake signal to the task to freeze it.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_freezable_with_signal\">set_freezable_with_signal</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~(<a class=\"id\" href=\"#PF_NOFREEZE\">PF_NOFREEZE</a> | <a class=\"id\" href=\"#PF_FREEZER_NOSIG\">PF_FREEZER_NOSIG</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Freezer-friendly wrappers around wait_event_interruptible() and</span>", 
"<span class=\"comment\"> * wait_event_interruptible_timeout(), originally defined in &lt;linux/wait.h&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wait_event_freezable\">wait_event_freezable</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__retval\">__retval</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__retval\">__retval</a> = <a class=\"id\" href=\"#wait_event_interruptible\">wait_event_interruptible</a>(<a class=\"id\" href=\"#wq\">wq</a>, <span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#condition\">condition</a>) || <a class=\"id\" href=\"#freezing\">freezing</a>(<a class=\"id\" href=\"#current\">current</a>));<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__retval\">__retval</a> && !<a class=\"id\" href=\"#freezing\">freezing</a>(<a class=\"id\" href=\"#current\">current</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (!(<a class=\"id\" href=\"#condition\">condition</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__retval\">__retval</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#try_to_freeze\">try_to_freeze</a>());<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__retval\">__retval</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wait_event_freezable_timeout\">wait_event_freezable_timeout</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#timeout\">timeout</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#__retval\">__retval</a> = <a class=\"id\" href=\"#timeout\">timeout</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__retval\">__retval</a> = <a class=\"id\" href=\"#wait_event_interruptible_timeout\">wait_event_interruptible_timeout</a>(<a class=\"id\" href=\"#wq\">wq</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#condition\">condition</a>) || <a class=\"id\" href=\"#freezing\">freezing</a>(<a class=\"id\" href=\"#current\">current</a>),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__retval\">__retval</a>); <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#try_to_freeze\">try_to_freeze</a>());<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__retval\">__retval</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#else <span class=\"comment\">/* !CONFIG_FREEZER */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#frozen\">frozen</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#freezing\">freezing</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_freeze_flag\">set_freeze_flag</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_freeze_flag\">clear_freeze_flag</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#thaw_process\">thaw_process</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>) { return 1; }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#refrigerator\">refrigerator</a>(void) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#freeze_processes\">freeze_processes</a>(void) { <a class=\"id\" href=\"#BUG\">BUG</a>(); return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#thaw_processes\">thaw_processes</a>(void) {}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#try_to_freeze\">try_to_freeze</a>(void) { return 0; }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#freezer_do_not_count\">freezer_do_not_count</a>(void) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#freezer_count\">freezer_count</a>(void) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#freezer_should_skip\">freezer_should_skip</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>) { return 0; }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_freezable\">set_freezable</a>(void) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_freezable_with_signal\">set_freezable_with_signal</a>(void) {}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wait_event_freezable\">wait_event_freezable</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_event_interruptible\">wait_event_interruptible</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wait_event_freezable_timeout\">wait_event_freezable_timeout</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#timeout\">timeout</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_event_interruptible_timeout\">wait_event_interruptible_timeout</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_FREEZER */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* FREEZER_H_INCLUDED */</span>", 
];
xr_frag_insert('l/aa/f651d6bd3b8eef9b62c64abf45fa6095e08deb.xr', __xr_tmp);
