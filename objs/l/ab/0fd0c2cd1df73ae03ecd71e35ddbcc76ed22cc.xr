var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2001 Jens Axboe &lt;axboe@kernel.dk&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License version 2 as</span>", 
"<span class=\"comment\"> * published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public Licens</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempool\">mempool</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#sg\">sg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for struct sg_iovec */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#block\">block</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Test patch to inline a certain number of bi_io_vec's inside the bio</span>", 
"<span class=\"comment\"> * itself, to shrink a bio data allocation from two mempool calls to one</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BIO_INLINE_VECS\">BIO_INLINE_VECS</a><span class=\"ts\"/><span class=\"ts\"/>4", 
"", 
"static <a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#bio_split_pool\">bio_split_pool</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * if you change this list, also change bvec_alloc or things will</span>", 
"<span class=\"comment\"> * break badly! cannot be bigger than what you can fit into an</span>", 
"<span class=\"comment\"> * unsigned short</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BV\">BV</a>(<a class=\"id\" href=\"#x\">x</a>) { .<a class=\"id\" href=\"#nr_vecs\">nr_vecs</a> = <a class=\"id\" href=\"#x\">x</a>, .<a class=\"id\" href=\"#name\">name</a> = \"biovec-\"<a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#x\">x</a>) }", 
"struct <a class=\"id\" href=\"#biovec_slab\">biovec_slab</a> <a class=\"id\" href=\"#bvec_slabs\">bvec_slabs</a>[<a class=\"id\" href=\"#BIOVEC_NR_POOLS\">BIOVEC_NR_POOLS</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BV\">BV</a>(1), <a class=\"id\" href=\"#BV\">BV</a>(4), <a class=\"id\" href=\"#BV\">BV</a>(16), <a class=\"id\" href=\"#BV\">BV</a>(64), <a class=\"id\" href=\"#BV\">BV</a>(128), <a class=\"id\" href=\"#BV\">BV</a>(<a class=\"id\" href=\"#BIO_MAX_PAGES\">BIO_MAX_PAGES</a>),", 
"};", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#BV\">BV</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fs_bio_set is the bio_set containing bio and iovec memory pools used by</span>", 
"<span class=\"comment\"> * IO code that does not need private memory pools.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#fs_bio_set\">fs_bio_set</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Our slab pool management</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#bio_slab\">bio_slab</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#slab\">slab</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#slab_ref\">slab_ref</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#slab_size\">slab_size</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[8];", 
"};", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#bio_slab_lock\">bio_slab_lock</a>);", 
"static struct <a class=\"id\" href=\"#bio_slab\">bio_slab</a> *<a class=\"id\" href=\"#bio_slabs\">bio_slabs</a>;", 
"static unsigned int <a class=\"id\" href=\"#bio_slab_nr\">bio_slab_nr</a>, <a class=\"id\" href=\"#bio_slab_max\">bio_slab_max</a>;", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#bio_find_or_create_slab\">bio_find_or_create_slab</a>(unsigned int <a class=\"id\" href=\"#extra_size\">extra_size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sz\">sz</a> = sizeof(struct <a class=\"id\" href=\"#bio\">bio</a>) + <a class=\"id\" href=\"#extra_size\">extra_size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#slab\">slab</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_slab\">bio_slab</a> *<a class=\"id\" href=\"#bslab\">bslab</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#entry\">entry</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bio_slab_lock\">bio_slab_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#bio_slab_nr\">bio_slab_nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bslab\">bslab</a> = &amp;<a class=\"id\" href=\"#bio_slabs\">bio_slabs</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bslab\">bslab</a>-><a class=\"id\" href=\"#slab\">slab</a> && <a class=\"id\" href=\"#entry\">entry</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#bslab\">bslab</a>-><a class=\"id\" href=\"#slab_size\">slab_size</a> == <a class=\"id\" href=\"#sz\">sz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slab\">slab</a> = <a class=\"id\" href=\"#bslab\">bslab</a>-><a class=\"id\" href=\"#slab\">slab</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bslab\">bslab</a>-><a class=\"id\" href=\"#slab_ref\">slab_ref</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slab\">slab</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_slab_nr\">bio_slab_nr</a> == <a class=\"id\" href=\"#bio_slab_max\">bio_slab_max</a> && <a class=\"id\" href=\"#entry\">entry</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_slab_max\">bio_slab_max</a> <<= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_slabs\">bio_slabs</a> = <a class=\"id\" href=\"#krealloc\">krealloc</a>(<a class=\"id\" href=\"#bio_slabs\">bio_slabs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#bio_slab_max\">bio_slab_max</a> * sizeof(struct <a class=\"id\" href=\"#bio_slab\">bio_slab</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bio_slabs\">bio_slabs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#bio_slab_nr\">bio_slab_nr</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bslab\">bslab</a> = &amp;<a class=\"id\" href=\"#bio_slabs\">bio_slabs</a>[<a class=\"id\" href=\"#entry\">entry</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#bslab\">bslab</a>-><a class=\"id\" href=\"#name\">name</a>, sizeof(<a class=\"id\" href=\"#bslab\">bslab</a>-><a class=\"id\" href=\"#name\">name</a>), \"bio-%d\", <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slab\">slab</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(<a class=\"id\" href=\"#bslab\">bslab</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#sz\">sz</a>, 0, <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#slab\">slab</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"bio: create slab <%s> at %d\\n\", <a class=\"id\" href=\"#bslab\">bslab</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bslab\">bslab</a>-><a class=\"id\" href=\"#slab\">slab</a> = <a class=\"id\" href=\"#slab\">slab</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bslab\">bslab</a>-><a class=\"id\" href=\"#slab_ref\">slab_ref</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bslab\">bslab</a>-><a class=\"id\" href=\"#slab_size\">slab_size</a> = <a class=\"id\" href=\"#sz\">sz</a>;", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bio_slab_lock\">bio_slab_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#slab\">slab</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#bio_put_slab\">bio_put_slab</a>(struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bs\">bs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_slab\">bio_slab</a> *<a class=\"id\" href=\"#bslab\">bslab</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bio_slab_lock\">bio_slab_lock</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#bio_slab_nr\">bio_slab_nr</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bio_slab\">bio_slab</a> == <a class=\"id\" href=\"#bio_slabs\">bio_slabs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#slab\">slab</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bslab\">bslab</a> = &amp;<a class=\"id\" href=\"#bio_slabs\">bio_slabs</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN\">WARN</a>(!<a class=\"id\" href=\"#bslab\">bslab</a>, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"bio: unable to find slab!\\n\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#bslab\">bslab</a>-><a class=\"id\" href=\"#slab_ref\">slab_ref</a>);", 
"", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#bslab\">bslab</a>-><a class=\"id\" href=\"#slab_ref\">slab_ref</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#bslab\">bslab</a>-><a class=\"id\" href=\"#slab\">slab</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bslab\">bslab</a>-><a class=\"id\" href=\"#slab\">slab</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bio_slab_lock\">bio_slab_lock</a>);", 
"}", 
"", 
"unsigned int <a class=\"id\" href=\"#bvec_nr_vecs\">bvec_nr_vecs</a>(unsigned short <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bvec_slabs\">bvec_slabs</a>[<a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#nr_vecs\">nr_vecs</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#bvec_free_bs\">bvec_free_bs</a>(struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bs\">bs</a>, struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bv\">bv</a>, unsigned int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BIO_BUG_ON\">BIO_BUG_ON</a>(<a class=\"id\" href=\"#idx\">idx</a> >= <a class=\"id\" href=\"#BIOVEC_NR_POOLS\">BIOVEC_NR_POOLS</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> == <a class=\"id\" href=\"#BIOVEC_MAX_IDX\">BIOVEC_MAX_IDX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_free\">mempool_free</a>(<a class=\"id\" href=\"#bv\">bv</a>, <a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bvec_pool\">bvec_pool</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#biovec_slab\">biovec_slab</a> *<a class=\"id\" href=\"#bvs\">bvs</a> = <a class=\"id\" href=\"#bvec_slabs\">bvec_slabs</a> + <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#bvs\">bvs</a>-><a class=\"id\" href=\"#slab\">slab</a>, <a class=\"id\" href=\"#bv\">bv</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvec_alloc_bs\">bvec_alloc_bs</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, int <a class=\"id\" href=\"#nr\">nr</a>, unsigned long *<a class=\"id\" href=\"#idx\">idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bs\">bs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvl\">bvl</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * see comment near bvec_array define!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#idx\">idx</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 2 ... 4:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#idx\">idx</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 5 ... 16:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#idx\">idx</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 17 ... 64:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#idx\">idx</a> = 3;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 65 ... 128:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#idx\">idx</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 129 ... <a class=\"id\" href=\"#BIO_MAX_PAGES\">BIO_MAX_PAGES</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#idx\">idx</a> = 5;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * idx now points to the pool we want to allocate from. only the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1-vec entry pool is mempool backed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#idx\">idx</a> == <a class=\"id\" href=\"#BIOVEC_MAX_IDX\">BIOVEC_MAX_IDX</a>) {", 
"<a class=\"id\" href=\"#fallback\">fallback</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bvl\">bvl</a> = <a class=\"id\" href=\"#mempool_alloc\">mempool_alloc</a>(<a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bvec_pool\">bvec_pool</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#biovec_slab\">biovec_slab</a> *<a class=\"id\" href=\"#bvs\">bvs</a> = <a class=\"id\" href=\"#bvec_slabs\">bvec_slabs</a> + *<a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#__gfp_mask\">__gfp_mask</a> = <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; ~(<a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a> | <a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Make this allocation restricted and don't dump info on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocation failures, since we'll fallback to the mempool</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in case of failure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__gfp_mask\">__gfp_mask</a> |= <a class=\"id\" href=\"#__GFP_NOMEMALLOC\">__GFP_NOMEMALLOC</a> | <a class=\"id\" href=\"#__GFP_NORETRY\">__GFP_NORETRY</a> | <a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Try a slab allocation. If this fails and __GFP_WAIT</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is set, retry with the 1-entry mempool</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bvl\">bvl</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#bvs\">bvs</a>-><a class=\"id\" href=\"#slab\">slab</a>, <a class=\"id\" href=\"#__gfp_mask\">__gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#bvl\">bvl</a> && (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#BIOVEC_MAX_IDX\">BIOVEC_MAX_IDX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fallback\">fallback</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bvl\">bvl</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#bio_free\">bio_free</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bs\">bs</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_has_allocated_vec\">bio_has_allocated_vec</a>(<a class=\"id\" href=\"#bio\">bio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bvec_free_bs\">bvec_free_bs</a>(<a class=\"id\" href=\"#bs\">bs</a>, <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>, <a class=\"id\" href=\"#BIO_POOL_IDX\">BIO_POOL_IDX</a>(<a class=\"id\" href=\"#bio\">bio</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_integrity\">bio_integrity</a>(<a class=\"id\" href=\"#bio\">bio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_integrity_free\">bio_integrity_free</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#bs\">bs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we have front padding, adjust the bio pointer before freeing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#front_pad\">front_pad</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> -= <a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#front_pad\">front_pad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_free\">mempool_free</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bio_pool\">bio_pool</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_free\">bio_free</a>);", 
"", 
"void <a class=\"id\" href=\"#bio_init\">bio_init</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bio\">bio</a>, 0, sizeof(*<a class=\"id\" href=\"#bio\">bio</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a> = 1 << <a class=\"id\" href=\"#BIO_UPTODATE\">BIO_UPTODATE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_comp_cpu\">bi_comp_cpu</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_cnt\">bi_cnt</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_init\">bio_init</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bio_alloc_bioset - allocate a bio for I/O</span>", 
"<span class=\"comment\"> * @gfp_mask:   the GFP_ mask given to the slab allocator</span>", 
"<span class=\"comment\"> * @nr_iovecs:<span class=\"ts\"/>number of iovecs to pre-allocate</span>", 
"<span class=\"comment\"> * @bs:<span class=\"ts\"/><span class=\"ts\"/>the bio_set to allocate from.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   bio_alloc_bioset will try its own mempool to satisfy the allocation.</span>", 
"<span class=\"comment\"> *   If %__GFP_WAIT is set then we will block on the internal pool waiting</span>", 
"<span class=\"comment\"> *   for a &amp;struct bio to become free.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   Note that the caller must set -&gt;bi_destructor on successful return</span>", 
"<span class=\"comment\"> *   of a bio, to do the appropriate freeing of the bio once the reference</span>", 
"<span class=\"comment\"> *   count drops to zero.</span>", 
"<span class=\"comment\"> **/</span>", 
"struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_alloc_bioset\">bio_alloc_bioset</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, int <a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a>, struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bs\">bs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#BIO_POOL_NONE\">BIO_POOL_NONE</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvl\">bvl</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#mempool_alloc\">mempool_alloc</a>(<a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bio_pool\">bio_pool</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#front_pad\">front_pad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_init\">bio_init</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_set\">out_set</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a> <= <a class=\"id\" href=\"#BIO_INLINE_VECS\">BIO_INLINE_VECS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bvl\">bvl</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_inline_vecs\">bi_inline_vecs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a> = <a class=\"id\" href=\"#BIO_INLINE_VECS\">BIO_INLINE_VECS</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bvl\">bvl</a> = <a class=\"id\" href=\"#bvec_alloc_bs\">bvec_alloc_bs</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a>, &amp;<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#bs\">bs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#bvl\">bvl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free\">err_free</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a> = <a class=\"id\" href=\"#bvec_nr_vecs\">bvec_nr_vecs</a>(<a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out_set\">out_set</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a> |= <a class=\"id\" href=\"#idx\">idx</a> << <a class=\"id\" href=\"#BIO_POOL_OFFSET\">BIO_POOL_OFFSET</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_max_vecs\">bi_max_vecs</a> = <a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a> = <a class=\"id\" href=\"#bvl\">bvl</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<a class=\"id\" href=\"#err_free\">err_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_free\">mempool_free</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#bs\">bs</a>-><a class=\"id\" href=\"#bio_pool\">bio_pool</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_alloc_bioset\">bio_alloc_bioset</a>);", 
"", 
"static void <a class=\"id\" href=\"#bio_fs_destructor\">bio_fs_destructor</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_free\">bio_free</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#fs_bio_set\">fs_bio_set</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bio_alloc - allocate a new bio, memory pool backed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp_mask: allocation mask to use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nr_iovecs: number of iovecs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bio_alloc will allocate a bio and associated bio_vec array that can hold</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>at least @nr_iovecs entries. Allocations will be done from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>fs_bio_set. Also see @bio_alloc_bioset and @bio_kmalloc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If %__GFP_WAIT is set, then bio_alloc will always be able to allocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a bio. This is due to the mempool guarantees. To make this work, callers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>must never allocate more than 1 bio at a time from this pool. Callers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that need to allocate more than 1 bio must always submit the previously</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allocated bio for IO before attempting to allocate a new one. Failure to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>do so can cause livelocks under memory pressure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Pointer to new bio on success, NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_alloc\">bio_alloc</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, int <a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio_alloc_bioset\">bio_alloc_bioset</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a>, <a class=\"id\" href=\"#fs_bio_set\">fs_bio_set</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_destructor\">bi_destructor</a> = <a class=\"id\" href=\"#bio_fs_destructor\">bio_fs_destructor</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_alloc\">bio_alloc</a>);", 
"", 
"static void <a class=\"id\" href=\"#bio_kmalloc_destructor\">bio_kmalloc_destructor</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_integrity\">bio_integrity</a>(<a class=\"id\" href=\"#bio\">bio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_integrity_free\">bio_integrity_free</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#fs_bio_set\">fs_bio_set</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bio_kmalloc - allocate a bio for I/O using kmalloc()</span>", 
"<span class=\"comment\"> * @gfp_mask:   the GFP_ mask given to the slab allocator</span>", 
"<span class=\"comment\"> * @nr_iovecs:<span class=\"ts\"/>number of iovecs to pre-allocate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Allocate a new bio with @nr_iovecs bvecs.  If @gfp_mask contains</span>", 
"<span class=\"comment\"> *   %__GFP_WAIT, the allocation is guaranteed to succeed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_kmalloc\">bio_kmalloc</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, int <a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#bio\">bio</a>) + <a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a> * sizeof(struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#bio\">bio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_init\">bio_init</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a> |= <a class=\"id\" href=\"#BIO_POOL_NONE\">BIO_POOL_NONE</a> << <a class=\"id\" href=\"#BIO_POOL_OFFSET\">BIO_POOL_OFFSET</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_max_vecs\">bi_max_vecs</a> = <a class=\"id\" href=\"#nr_iovecs\">nr_iovecs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_inline_vecs\">bi_inline_vecs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_destructor\">bi_destructor</a> = <a class=\"id\" href=\"#bio_kmalloc_destructor\">bio_kmalloc_destructor</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_kmalloc\">bio_kmalloc</a>);", 
"", 
"void <a class=\"id\" href=\"#zero_fill_bio\">zero_fill_bio</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bv\">bv</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_for_each_segment\">bio_for_each_segment</a>(<a class=\"id\" href=\"#bv\">bv</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#bvec_kmap_irq\">bvec_kmap_irq</a>(<a class=\"id\" href=\"#bv\">bv</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#data\">data</a>, 0, <a class=\"id\" href=\"#bv\">bv</a>-><a class=\"id\" href=\"#bv_len\">bv_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_page\">flush_dcache_page</a>(<a class=\"id\" href=\"#bv\">bv</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bvec_kunmap_irq\">bvec_kunmap_irq</a>(<a class=\"id\" href=\"#data\">data</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#zero_fill_bio\">zero_fill_bio</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bio_put - release a reference to a bio</span>", 
"<span class=\"comment\"> * @bio:   bio to release reference to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Put a reference to a &amp;struct bio, either one you have gotten with</span>", 
"<span class=\"comment\"> *   bio_alloc, bio_get or bio_clone. The last put of a bio will free it.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#bio_put\">bio_put</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BIO_BUG_ON\">BIO_BUG_ON</a>(!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_cnt\">bi_cnt</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * last put frees it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_cnt\">bi_cnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_destructor\">bi_destructor</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_put\">bio_put</a>);", 
"", 
"<a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#bio_phys_segments\">bio_phys_segments</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#bio_flagged\">bio_flagged</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#BIO_SEG_VALID\">BIO_SEG_VALID</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_recount_segments\">blk_recount_segments</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_phys_segments\">bi_phys_segments</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bio_phys_segments\">bio_phys_segments</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>__bio_clone<span class=\"ts\"/>-<span class=\"ts\"/>clone a bio</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@bio: destination bio</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@bio_src: bio to clone</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Clone a &amp;bio. Caller will own the returned bio, but not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the actual data it points to. Reference count of returned</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>bio will be one.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__bio_clone\">__bio_clone</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_src\">bio_src</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>, <a class=\"id\" href=\"#bio_src\">bio_src</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_src\">bio_src</a>-><a class=\"id\" href=\"#bi_max_vecs\">bi_max_vecs</a> * sizeof(struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * most users will be overriding -&gt;bi_bdev with a new target,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so we don't set nor calculate new physical/hw segment counts here</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> = <a class=\"id\" href=\"#bio_src\">bio_src</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a> = <a class=\"id\" href=\"#bio_src\">bio_src</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a> |= 1 << <a class=\"id\" href=\"#BIO_CLONED\">BIO_CLONED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> = <a class=\"id\" href=\"#bio_src\">bio_src</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a> = <a class=\"id\" href=\"#bio_src\">bio_src</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a> = <a class=\"id\" href=\"#bio_src\">bio_src</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_idx\">bi_idx</a> = <a class=\"id\" href=\"#bio_src\">bio_src</a>-><a class=\"id\" href=\"#bi_idx\">bi_idx</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bio_clone\">__bio_clone</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bio_clone<span class=\"ts\"/>-<span class=\"ts\"/>clone a bio</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bio: bio to clone</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp_mask: allocation priority</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Like __bio_clone, only also allocates the returned bio</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_clone\">bio_clone</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#bio_alloc_bioset\">bio_alloc_bioset</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_max_vecs\">bi_max_vecs</a>, <a class=\"id\" href=\"#fs_bio_set\">fs_bio_set</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
];
xr_frag_insert('l/ab/0fd0c2cd1df73ae03ecd71e35ddbcc76ed22cc.xr', __xr_tmp);
