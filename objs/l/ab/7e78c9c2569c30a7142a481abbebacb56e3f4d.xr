var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#iommu_setup_msi\">iommu_setup_msi</a>(<a class=\"id\" href=\"#iommu\">iommu</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/****************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The next functions belong to the third pass of parsing the ACPI</span>", 
"<span class=\"comment\"> * table. In this last pass the memory mapping requirements are</span>", 
"<span class=\"comment\"> * gathered (like exclusion and unity mapping reanges).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ****************************************************************************/</span>", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#free_unity_maps\">free_unity_maps</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#unity_map_entry\">unity_map_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#amd_iommu_unity_map\">amd_iommu_unity_map</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* called when we find an exclusion range definition in ACPI */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_exclusion_range\">init_exclusion_range</a>(struct <a class=\"id\" href=\"#ivmd_header\">ivmd_header</a> *<a class=\"id\" href=\"#m\">m</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_IVMD_TYPE\">ACPI_IVMD_TYPE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_device_exclusion_range\">set_device_exclusion_range</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#devid\">devid</a>, <a class=\"id\" href=\"#m\">m</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_IVMD_TYPE_ALL\">ACPI_IVMD_TYPE_ALL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#amd_iommu_last_bdf\">amd_iommu_last_bdf</a>; ++<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_device_exclusion_range\">set_device_exclusion_range</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#m\">m</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_IVMD_TYPE_RANGE\">ACPI_IVMD_TYPE_RANGE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#devid\">devid</a>; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#aux\">aux</a>; ++<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_device_exclusion_range\">set_device_exclusion_range</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#m\">m</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* called for unity map ACPI definition */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_unity_map_range\">init_unity_map_range</a>(struct <a class=\"id\" href=\"#ivmd_header\">ivmd_header</a> *<a class=\"id\" href=\"#m\">m</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#unity_map_entry\">unity_map_entry</a> *<a class=\"id\" href=\"#e\">e</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#s\">s</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#e\">e</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#e\">e</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#e\">e</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_IVMD_TYPE\">ACPI_IVMD_TYPE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = \"IVMD_TYPEi\\t\\t\\t\";", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#devid_start\">devid_start</a> = <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#devid_end\">devid_end</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#devid\">devid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_IVMD_TYPE_ALL\">ACPI_IVMD_TYPE_ALL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = \"IVMD_TYPE_ALL\\t\\t\";", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#devid_start\">devid_start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#devid_end\">devid_end</a> = <a class=\"id\" href=\"#amd_iommu_last_bdf\">amd_iommu_last_bdf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_IVMD_TYPE_RANGE\">ACPI_IVMD_TYPE_RANGE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = \"IVMD_TYPE_RANGE\\t\\t\";", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#devid_start\">devid_start</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#devid\">devid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#devid_end\">devid_end</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#aux\">aux</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#address_start\">address_start</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#range_start\">range_start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#address_end\">address_end</a> = <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#address_start\">address_start</a> + <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#range_length\">range_length</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#prot\">prot</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#flags\">flags</a> >> 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DUMP_printk\">DUMP_printk</a>(\"%s devid_start: %02x:%02x.%x devid_end: %02x:%02x.%x\"", 
"<span class=\"ts\"/><span class=\"ts\"/>    \" range_start: %016llx range_end: %016llx flags: %x\\n\", <a class=\"id\" href=\"#s\">s</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PCI_BUS\">PCI_BUS</a>(<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#devid_start\">devid_start</a>), <a class=\"id\" href=\"#PCI_SLOT\">PCI_SLOT</a>(<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#devid_start\">devid_start</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PCI_FUNC\">PCI_FUNC</a>(<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#devid_start\">devid_start</a>), <a class=\"id\" href=\"#PCI_BUS\">PCI_BUS</a>(<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#devid_end\">devid_end</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PCI_SLOT\">PCI_SLOT</a>(<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#devid_end\">devid_end</a>), <a class=\"id\" href=\"#PCI_FUNC\">PCI_FUNC</a>(<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#devid_end\">devid_end</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#address_start\">address_start</a>, <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#address_end\">address_end</a>, <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#amd_iommu_unity_map\">amd_iommu_unity_map</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* iterates over all memory definitions we find in the ACPI table */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_memory_definitions\">init_memory_definitions</a>(struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *<a class=\"id\" href=\"#table\">table</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#p\">p</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#table\">table</a>, *<a class=\"id\" href=\"#end\">end</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#table\">table</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ivmd_header\">ivmd_header</a> *<a class=\"id\" href=\"#m\">m</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> += <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#IVRS_HEADER_LENGTH\">IVRS_HEADER_LENGTH</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = (struct <a class=\"id\" href=\"#ivmd_header\">ivmd_header</a> *)<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IVMD_FLAG_EXCL_RANGE\">IVMD_FLAG_EXCL_RANGE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_exclusion_range\">init_exclusion_range</a>(<a class=\"id\" href=\"#m\">m</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IVMD_FLAG_UNITY_MAP\">IVMD_FLAG_UNITY_MAP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_unity_map_range\">init_unity_map_range</a>(<a class=\"id\" href=\"#m\">m</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Init the device table to not allow DMA access for devices and</span>", 
"<span class=\"comment\"> * suppress all page faults</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#init_device_table\">init_device_table</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#devid\">devid</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#devid\">devid</a> = 0; <a class=\"id\" href=\"#devid\">devid</a> <= <a class=\"id\" href=\"#amd_iommu_last_bdf\">amd_iommu_last_bdf</a>; ++<a class=\"id\" href=\"#devid\">devid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_dev_entry_bit\">set_dev_entry_bit</a>(<a class=\"id\" href=\"#devid\">devid</a>, <a class=\"id\" href=\"#DEV_ENTRY_VALID\">DEV_ENTRY_VALID</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_dev_entry_bit\">set_dev_entry_bit</a>(<a class=\"id\" href=\"#devid\">devid</a>, <a class=\"id\" href=\"#DEV_ENTRY_TRANSLATION\">DEV_ENTRY_TRANSLATION</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#iommu_init_flags\">iommu_init_flags</a>(struct <a class=\"id\" href=\"#amd_iommu\">amd_iommu</a> *<a class=\"id\" href=\"#iommu\">iommu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#acpi_flags\">acpi_flags</a> &amp; <a class=\"id\" href=\"#IVHD_FLAG_HT_TUN_EN_MASK\">IVHD_FLAG_HT_TUN_EN_MASK</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_feature_enable\">iommu_feature_enable</a>(<a class=\"id\" href=\"#iommu\">iommu</a>, <a class=\"id\" href=\"#CONTROL_HT_TUN_EN\">CONTROL_HT_TUN_EN</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_feature_disable\">iommu_feature_disable</a>(<a class=\"id\" href=\"#iommu\">iommu</a>, <a class=\"id\" href=\"#CONTROL_HT_TUN_EN\">CONTROL_HT_TUN_EN</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#acpi_flags\">acpi_flags</a> &amp; <a class=\"id\" href=\"#IVHD_FLAG_PASSPW_EN_MASK\">IVHD_FLAG_PASSPW_EN_MASK</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_feature_enable\">iommu_feature_enable</a>(<a class=\"id\" href=\"#iommu\">iommu</a>, <a class=\"id\" href=\"#CONTROL_PASSPW_EN\">CONTROL_PASSPW_EN</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_feature_disable\">iommu_feature_disable</a>(<a class=\"id\" href=\"#iommu\">iommu</a>, <a class=\"id\" href=\"#CONTROL_PASSPW_EN\">CONTROL_PASSPW_EN</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#acpi_flags\">acpi_flags</a> &amp; <a class=\"id\" href=\"#IVHD_FLAG_RESPASSPW_EN_MASK\">IVHD_FLAG_RESPASSPW_EN_MASK</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_feature_enable\">iommu_feature_enable</a>(<a class=\"id\" href=\"#iommu\">iommu</a>, <a class=\"id\" href=\"#CONTROL_RESPASSPW_EN\">CONTROL_RESPASSPW_EN</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_feature_disable\">iommu_feature_disable</a>(<a class=\"id\" href=\"#iommu\">iommu</a>, <a class=\"id\" href=\"#CONTROL_RESPASSPW_EN\">CONTROL_RESPASSPW_EN</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#acpi_flags\">acpi_flags</a> &amp; <a class=\"id\" href=\"#IVHD_FLAG_ISOC_EN_MASK\">IVHD_FLAG_ISOC_EN_MASK</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_feature_enable\">iommu_feature_enable</a>(<a class=\"id\" href=\"#iommu\">iommu</a>, <a class=\"id\" href=\"#CONTROL_ISOC_EN\">CONTROL_ISOC_EN</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_feature_disable\">iommu_feature_disable</a>(<a class=\"id\" href=\"#iommu\">iommu</a>, <a class=\"id\" href=\"#CONTROL_ISOC_EN\">CONTROL_ISOC_EN</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make IOMMU memory accesses cache coherent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iommu_feature_enable\">iommu_feature_enable</a>(<a class=\"id\" href=\"#iommu\">iommu</a>, <a class=\"id\" href=\"#CONTROL_COHERENT_EN\">CONTROL_COHERENT_EN</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#iommu_apply_quirks\">iommu_apply_quirks</a>(struct <a class=\"id\" href=\"#amd_iommu\">amd_iommu</a> *<a class=\"id\" href=\"#iommu\">iommu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_rd890_iommu\">is_rd890_iommu</a>(<a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#dev\">dev</a>, 0xf0, <a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#cache_cfg\">cache_cfg</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#dev\">dev</a>, 0xf4, <a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#cache_cfg\">cache_cfg</a>[1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#dev\">dev</a>, 0xf8, <a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#cache_cfg\">cache_cfg</a>[2]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#dev\">dev</a>, 0xfc, <a class=\"id\" href=\"#iommu\">iommu</a>-><a class=\"id\" href=\"#cache_cfg\">cache_cfg</a>[3]);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function finally enables all IOMMUs found in the system after</span>", 
"<span class=\"comment\"> * they have been initialized</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#enable_iommus\">enable_iommus</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_iommu\">amd_iommu</a> *<a class=\"id\" href=\"#iommu\">iommu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_iommu\">for_each_iommu</a>(<a class=\"id\" href=\"#iommu\">iommu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_disable\">iommu_disable</a>(<a class=\"id\" href=\"#iommu\">iommu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_apply_quirks\">iommu_apply_quirks</a>(<a class=\"id\" href=\"#iommu\">iommu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_init_flags\">iommu_init_flags</a>(<a class=\"id\" href=\"#iommu\">iommu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_set_device_table\">iommu_set_device_table</a>(<a class=\"id\" href=\"#iommu\">iommu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_enable_command_buffer\">iommu_enable_command_buffer</a>(<a class=\"id\" href=\"#iommu\">iommu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_enable_event_buffer\">iommu_enable_event_buffer</a>(<a class=\"id\" href=\"#iommu\">iommu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_set_exclusion_range\">iommu_set_exclusion_range</a>(<a class=\"id\" href=\"#iommu\">iommu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_init_msi\">iommu_init_msi</a>(<a class=\"id\" href=\"#iommu\">iommu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_enable\">iommu_enable</a>(<a class=\"id\" href=\"#iommu\">iommu</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#disable_iommus\">disable_iommus</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#amd_iommu\">amd_iommu</a> *<a class=\"id\" href=\"#iommu\">iommu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_iommu\">for_each_iommu</a>(<a class=\"id\" href=\"#iommu\">iommu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_disable\">iommu_disable</a>(<a class=\"id\" href=\"#iommu\">iommu</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Suspend/Resume support</span>", 
"<span class=\"comment\"> * disable suspend until real resume implemented</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#amd_iommu_resume\">amd_iommu_resume</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* re-load the hardware */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_iommus\">enable_iommus</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we have to flush after the IOMMUs are enabled because a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disabled IOMMU will never execute the commands we send</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_flush_all_devices\">amd_iommu_flush_all_devices</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_flush_all_domains\">amd_iommu_flush_all_domains</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#amd_iommu_suspend\">amd_iommu_suspend</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* disable IOMMUs to go out of the way for BIOS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disable_iommus\">disable_iommus</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sysdev_class\">sysdev_class</a> <a class=\"id\" href=\"#amd_iommu_sysdev_class\">amd_iommu_sysdev_class</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"amd_iommu\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#suspend\">suspend</a> = <a class=\"id\" href=\"#amd_iommu_suspend\">amd_iommu_suspend</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#resume\">resume</a> = <a class=\"id\" href=\"#amd_iommu_resume\">amd_iommu_resume</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#sys_device\">sys_device</a> <a class=\"id\" href=\"#device_amd_iommu\">device_amd_iommu</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#id\">id</a> = 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cls\">cls</a> = &amp;<a class=\"id\" href=\"#amd_iommu_sysdev_class\">amd_iommu_sysdev_class</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the core init function for AMD IOMMU hardware in the system.</span>", 
"<span class=\"comment\"> * This function is called from the generic x86 DMA layer initialization</span>", 
"<span class=\"comment\"> * code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function basically parses the ACPI table for AMD IOMMU (IVRS)</span>", 
"<span class=\"comment\"> * three times:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1 pass) Find the highest PCI device id the driver has to handle.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Upon this information the size of the data structures is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>determined that needs to be allocated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2 pass) Initialize the data structures just allocated with the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>information in the ACPI table about available AMD IOMMUs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>in the system. It also maps the PCI devices in the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>system to specific IOMMUs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>3 pass) After the basic data structures are allocated and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>initialized we update them with information about memory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>remapping requirements parsed out of the ACPI table in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>this last pass.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After that the hardware is initialized and ready to go. In the last</span>", 
"<span class=\"comment\"> * step we do some Linux specific things like registering the driver in</span>", 
"<span class=\"comment\"> * the dma_ops interface and initializing the suspend/resume support</span>", 
"<span class=\"comment\"> * functions. Finally it prints some information about AMD IOMMUs and</span>", 
"<span class=\"comment\"> * the driver state and enables the hardware.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#amd_iommu_init\">amd_iommu_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First parse ACPI tables to find the largest Bus/Dev/Func</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we need to handle. Upon this information the shared data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * structures for the IOMMUs in the system will be allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_table_parse\">acpi_table_parse</a>(\"IVRS\", <a class=\"id\" href=\"#find_last_devid_acpi\">find_last_devid_acpi</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#amd_iommu_init_err\">amd_iommu_init_err</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_table_size\">dev_table_size</a>     = <a class=\"id\" href=\"#tbl_size\">tbl_size</a>(<a class=\"id\" href=\"#DEV_TABLE_ENTRY_SIZE\">DEV_TABLE_ENTRY_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alias_table_size\">alias_table_size</a>   = <a class=\"id\" href=\"#tbl_size\">tbl_size</a>(<a class=\"id\" href=\"#ALIAS_TABLE_ENTRY_SIZE\">ALIAS_TABLE_ENTRY_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rlookup_table_size\">rlookup_table_size</a> = <a class=\"id\" href=\"#tbl_size\">tbl_size</a>(<a class=\"id\" href=\"#RLOOKUP_TABLE_ENTRY_SIZE\">RLOOKUP_TABLE_ENTRY_SIZE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Device table - directly used by all IOMMUs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_dev_table\">amd_iommu_dev_table</a> = (void *)<a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#dev_table_size\">dev_table_size</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#amd_iommu_dev_table\">amd_iommu_dev_table</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Alias table - map PCI Bus/Dev/Func to Bus/Dev/Func the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IOMMU see for that device</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_alias_table\">amd_iommu_alias_table</a> = (void *)<a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#alias_table_size\">alias_table_size</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#amd_iommu_alias_table\">amd_iommu_alias_table</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free\">free</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* IOMMU rlookup table - find the IOMMU for a specific device */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_rlookup_table\">amd_iommu_rlookup_table</a> = (void *)<a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#rlookup_table_size\">rlookup_table_size</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#amd_iommu_rlookup_table\">amd_iommu_rlookup_table</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free\">free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_pd_alloc_bitmap\">amd_iommu_pd_alloc_bitmap</a> = (void *)<a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#MAX_DOMAIN_ID\">MAX_DOMAIN_ID</a>/8));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#amd_iommu_pd_alloc_bitmap\">amd_iommu_pd_alloc_bitmap</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free\">free</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* init the device table */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_device_table\">init_device_table</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * let all alias entries point to itself</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#amd_iommu_last_bdf\">amd_iommu_last_bdf</a>; ++<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_alias_table\">amd_iommu_alias_table</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * never allocate domain 0 because its used as the non-allocated and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * error value placeholder</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_pd_alloc_bitmap\">amd_iommu_pd_alloc_bitmap</a>[0] = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#amd_iommu_pd_lock\">amd_iommu_pd_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * now the data structures are allocated and basically initialized</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * start the real acpi table scan</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_table_parse\">acpi_table_parse</a>(\"IVRS\", <a class=\"id\" href=\"#init_iommu_all\">init_iommu_all</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free\">free</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#amd_iommu_init_err\">amd_iommu_init_err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#amd_iommu_init_err\">amd_iommu_init_err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free\">free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_table_parse\">acpi_table_parse</a>(\"IVRS\", <a class=\"id\" href=\"#init_memory_definitions\">init_memory_definitions</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free\">free</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#amd_iommu_init_err\">amd_iommu_init_err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#amd_iommu_init_err\">amd_iommu_init_err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free\">free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sysdev_class_register\">sysdev_class_register</a>(&amp;<a class=\"id\" href=\"#amd_iommu_sysdev_class\">amd_iommu_sysdev_class</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free\">free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sysdev_register\">sysdev_register</a>(&amp;<a class=\"id\" href=\"#device_amd_iommu\">device_amd_iommu</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free\">free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#amd_iommu_init_devices\">amd_iommu_init_devices</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free\">free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_iommus\">enable_iommus</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iommu_pass_through\">iommu_pass_through</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#amd_iommu_init_passthrough\">amd_iommu_init_passthrough</a>();", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#amd_iommu_init_dma_ops\">amd_iommu_init_dma_ops</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_disable\">free_disable</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_init_api\">amd_iommu_init_api</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_init_notifier\">amd_iommu_init_notifier</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iommu_pass_through\">iommu_pass_through</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#amd_iommu_unmap_flush\">amd_iommu_unmap_flush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"AMD-Vi: IO/TLB flush on unmap enabled\\n\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"AMD-Vi: Lazy IO/TLB flushing enabled\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#iommu_shutdown\">iommu_shutdown</a> = <a class=\"id\" href=\"#disable_iommus\">disable_iommus</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#free_disable\">free_disable</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disable_iommus\">disable_iommus</a>();", 
"", 
"<a class=\"id\" href=\"#free\">free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_uninit_devices\">amd_iommu_uninit_devices</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#amd_iommu_pd_alloc_bitmap\">amd_iommu_pd_alloc_bitmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#MAX_DOMAIN_ID\">MAX_DOMAIN_ID</a>/8));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#amd_iommu_rlookup_table\">amd_iommu_rlookup_table</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#rlookup_table_size\">rlookup_table_size</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#amd_iommu_alias_table\">amd_iommu_alias_table</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#alias_table_size\">alias_table_size</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#amd_iommu_dev_table\">amd_iommu_dev_table</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#dev_table_size\">dev_table_size</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_iommu_all\">free_iommu_all</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_unity_maps\">free_unity_maps</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GART_IOMMU\">CONFIG_GART_IOMMU</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We failed to initialize the AMD IOMMU - try fallback to GART</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if possible.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gart_iommu_init\">gart_iommu_init</a>();", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"<span class=\"comment\">/****************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Early detect code. This code runs at IOMMU detection time in the DMA</span>", 
"<span class=\"comment\"> * layer. It just looks if there is an IVRS ACPI table to detect AMD</span>", 
"<span class=\"comment\"> * IOMMUs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ****************************************************************************/</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_amd_iommu_detect\">early_amd_iommu_detect</a>(struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *<a class=\"id\" href=\"#table\">table</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#amd_iommu_detect\">amd_iommu_detect</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#no_iommu\">no_iommu</a> || (<a class=\"id\" href=\"#iommu_detected\">iommu_detected</a> && !<a class=\"id\" href=\"#gart_iommu_aperture\">gart_iommu_aperture</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#amd_iommu_disabled\">amd_iommu_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_table_parse\">acpi_table_parse</a>(\"IVRS\", <a class=\"id\" href=\"#early_amd_iommu_detect\">early_amd_iommu_detect</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iommu_detected\">iommu_detected</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_detected\">amd_iommu_detected</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#iommu\">iommu</a>.<a class=\"id\" href=\"#iommu_init\">iommu_init</a> = <a class=\"id\" href=\"#amd_iommu_init\">amd_iommu_init</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure ACS will be enabled */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_request_acs\">pci_request_acs</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/****************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Parsing functions for the AMD IOMMU specific kernel command line</span>", 
"<span class=\"comment\"> * options.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ****************************************************************************/</span>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_amd_iommu_dump\">parse_amd_iommu_dump</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_dump\">amd_iommu_dump</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_amd_iommu_options\">parse_amd_iommu_options</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>for (; *<a class=\"id\" href=\"#str\">str</a>; ++<a class=\"id\" href=\"#str\">str</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"fullflush\", 9) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_unmap_flush\">amd_iommu_unmap_flush</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"off\", 3) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#amd_iommu_disabled\">amd_iommu_disabled</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"amd_iommu_dump\", <a class=\"id\" href=\"#parse_amd_iommu_dump\">parse_amd_iommu_dump</a>);", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"amd_iommu=\", <a class=\"id\" href=\"#parse_amd_iommu_options\">parse_amd_iommu_options</a>);", 
];
xr_frag_insert('l/ab/7e78c9c2569c30a7142a481abbebacb56e3f4d.xr', __xr_tmp);
