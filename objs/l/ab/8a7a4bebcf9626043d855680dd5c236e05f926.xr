var __xr_tmp = [
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#try_to_free_swap\">try_to_free_swap</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_swapcount\">page_swapcount</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Once hibernation has begun to create its image of memory,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there's a danger that one of the calls to try_to_free_swap()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - most probably a call from __try_to_reclaim_swap() while</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hibernation is allocating its own swap pages for the image,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but conceivably even a call from memory reclaim - will free</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the swap from a page which has already been recorded in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * image as a clean swapcache page, and then reuse its swap for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * another page of the image.  On waking from hibernation, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * original page might be freed under memory pressure, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * later read back in from swap, now with the wrong data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hibernation clears bits from gfp_allowed_mask to prevent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * memory reclaim from writing to disk, so check that here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gfp_allowed_mask\">gfp_allowed_mask</a> &amp; <a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delete_from_swap_cache\">delete_from_swap_cache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SetPageDirty\">SetPageDirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free the swap entry like above, but also try to</span>", 
"<span class=\"comment\"> * free the page cache entry if it is the last user.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#free_swap_and_cache\">free_swap_and_cache</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#non_swap_entry\">non_swap_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#swap_info_get\">swap_info_get</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#swap_entry_free\">swap_entry_free</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#entry\">entry</a>, 1) == <a class=\"id\" href=\"#SWAP_HAS_CACHE\">SWAP_HAS_CACHE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_get_page\">find_get_page</a>(&amp;<a class=\"id\" href=\"#swapper_space\">swapper_space</a>, <a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> && !<a class=\"id\" href=\"#trylock_page\">trylock_page</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Not mapped elsewhere, or swap space full? Free it!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Also recheck PageSwapCache now page is locked (above).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>) && !<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(!<a class=\"id\" href=\"#page_mapped\">page_mapped</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#vm_swap_full\">vm_swap_full</a>())) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delete_from_swap_cache\">delete_from_swap_cache</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageDirty\">SetPageDirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUP_MEM_RES_CTLR\">CONFIG_CGROUP_MEM_RES_CTLR</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mem_cgroup_count_swap_user - count the user of a swap entry</span>", 
"<span class=\"comment\"> * @ent: the swap entry to be checked</span>", 
"<span class=\"comment\"> * @pagep: the pointer for the swap cache page of the entry to be stored</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the number of the user of the swap entry. The number is valid only</span>", 
"<span class=\"comment\"> * for swaps of anonymous pages.</span>", 
"<span class=\"comment\"> * If the entry is found on swap cache, the page is stored to pagep with</span>", 
"<span class=\"comment\"> * refcount of it being incremented.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mem_cgroup_count_swap_user\">mem_cgroup_count_swap_user</a>(<a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#ent\">ent</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pagep\">pagep</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_get_page\">find_get_page</a>(&amp;<a class=\"id\" href=\"#swapper_space\">swapper_space</a>, <a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#swap_info_get\">swap_info_get</a>(<a class=\"id\" href=\"#ent\">ent</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#swap_count\">swap_count</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#swp_offset\">swp_offset</a>(<a class=\"id\" href=\"#ent\">ent</a>)]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pagep\">pagep</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIBERNATION\">CONFIG_HIBERNATION</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Find the swap type that corresponds to given device (if any).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @offset - number of the PAGE_SIZE-sized block of the device, starting</span>", 
"<span class=\"comment\"> * from 0, in which the swap header is expected to be located.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is needed for the suspend to disk (aka swsusp).</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#swap_type_of\">swap_type_of</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#offset\">offset</a>, struct <a class=\"id\" href=\"#block_device\">block_device</a> **<a class=\"id\" href=\"#bdev_p\">bdev_p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#device\">device</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#bdget\">bdget</a>(<a class=\"id\" href=\"#device\">device</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#type\">type</a> = 0; <a class=\"id\" href=\"#type\">type</a> &lt; <a class=\"id\" href=\"#nr_swapfiles\">nr_swapfiles</a>; <a class=\"id\" href=\"#type\">type</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#sis\">sis</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_WRITEOK\">SWP_WRITEOK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdev\">bdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev_p\">bdev_p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bdev_p\">bdev_p</a> = <a class=\"id\" href=\"#bdgrab\">bdgrab</a>(<a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#bdev\">bdev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a> == <a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#bdev\">bdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_extent\">swap_extent</a> *<a class=\"id\" href=\"#se\">se</a> = &amp;<a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#first_swap_extent\">first_swap_extent</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#start_block\">start_block</a> == <a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev_p\">bdev_p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bdev_p\">bdev_p</a> = <a class=\"id\" href=\"#bdgrab\">bdgrab</a>(<a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#bdev\">bdev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdput\">bdput</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdput\">bdput</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get the (PAGE_SIZE) block corresponding to given offset on the swapdev</span>", 
"<span class=\"comment\"> * corresponding to given index in swap_info (swap type).</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#swapdev_block\">swapdev_block</a>(int <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>;", 
"", 
"<span class=\"ts\"/>if ((unsigned int)<a class=\"id\" href=\"#type\">type</a> >= <a class=\"id\" href=\"#nr_swapfiles\">nr_swapfiles</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>]-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_WRITEOK\">SWP_WRITEOK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#map_swap_entry\">map_swap_entry</a>(<a class=\"id\" href=\"#swp_entry\">swp_entry</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#offset\">offset</a>), &amp;<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return either the total number of swap pages of given type, or the number</span>", 
"<span class=\"comment\"> * of free pages of that type (depending on @free)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is needed for software suspend</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#count_swap_pages\">count_swap_pages</a>(int <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#free\">free</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#n\">n</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>if ((unsigned int)<a class=\"id\" href=\"#type\">type</a> &lt; <a class=\"id\" href=\"#nr_swapfiles\">nr_swapfiles</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#sis\">sis</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SWP_WRITEOK\">SWP_WRITEOK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#free\">free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#sis\">sis</a>-><a class=\"id\" href=\"#inuse_pages\">inuse_pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#swap_lock\">swap_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HIBERNATION */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * No need to decide whether this PTE shares the swap entry with others,</span>", 
"<span class=\"comment\"> * just let do_wp_page work it out if a write is requested later - to</span>", 
"<span class=\"comment\"> * force COW, vm_page_prot omits write permission from any private vma.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#unuse_pte\">unuse_pte</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_try_charge_swapin\">mem_cgroup_try_charge_swapin</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, &amp;<a class=\"id\" href=\"#ptr\">ptr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_nolock\">out_nolock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pte_same\">pte_same</a>(*<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#swp_entry_to_pte\">swp_entry_to_pte</a>(<a class=\"id\" href=\"#entry\">entry</a>)))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_cancel_charge_swapin\">mem_cgroup_cancel_charge_swapin</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dec_mm_counter\">dec_mm_counter</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#MM_SWAPENTS\">MM_SWAPENTS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_mm_counter\">inc_mm_counter</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#MM_ANONPAGES\">MM_ANONPAGES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte\">pte</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#pte_mkold\">pte_mkold</a>(<a class=\"id\" href=\"#mk_pte\">mk_pte</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_add_anon_rmap\">page_add_anon_rmap</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_commit_charge_swapin\">mem_cgroup_commit_charge_swapin</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap_free\">swap_free</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Move the page to the active list so it is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * immediately swapped out again after swapon.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#activate_page\">activate_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<a class=\"id\" href=\"#out_nolock\">out_nolock</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#unuse_pte_range\">unuse_pte_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#swp_pte\">swp_pte</a> = <a class=\"id\" href=\"#swp_entry_to_pte\">swp_entry_to_pte</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't actually need pte lock while scanning for swp_pte: since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we hold page lock and mmap_sem, swp_pte cannot be inserted into the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page table while we're scanning; though it could get zapped, and on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * some architectures (e.g. x86_32 with PAE) we might catch a glimpse</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of unmatched parts which look like swp_pte, so unuse_pte must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * recheck under pte lock.  Scanning without pte lock lets it be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * preemptible whenever CONFIG_PREEMPT but not CONFIG_HIGHPTE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_offset_map\">pte_offset_map</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * swapoff spends a _lot_ of time in this loop!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Test inline before going to call unuse_pte.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pte_same\">pte_same</a>(*<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#swp_pte\">swp_pte</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap\">pte_unmap</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#unuse_pte\">unuse_pte</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_offset_map\">pte_offset_map</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pte\">pte</a>++, <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap\">pte_unmap</a>(<a class=\"id\" href=\"#pte\">pte</a> - 1);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#unuse_pmd_range\">unuse_pmd_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pmd_addr_end\">pmd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_none_or_clear_bad\">pmd_none_or_clear_bad</a>(<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#unuse_pte_range\">unuse_pte_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pmd\">pmd</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#unuse_pud_range\">unuse_pud_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pud_addr_end\">pud_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_none_or_clear_bad\">pud_none_or_clear_bad</a>(<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#unuse_pmd_range\">unuse_pmd_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pud\">pud</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#unuse_vma\">unuse_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_anon_vma\">page_anon_vma</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#page_address_in_vma\">page_address_in_vma</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> == -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pgd_addr_end\">pgd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none_or_clear_bad\">pgd_none_or_clear_bad</a>(<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#unuse_pud_range\">unuse_pud_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pgd\">pgd</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#unuse_mm\">unuse_mm</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#down_read_trylock\">down_read_trylock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Activate page so shrink_inactive_list is unlikely to unmap</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * its ptes while lock is dropped, so swapoff can make progress.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#activate_page\">activate_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>; <a class=\"id\" href=\"#vma\">vma</a>; <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a> && (<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#unuse_vma\">unuse_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)? <a class=\"id\" href=\"#ret\">ret</a>: 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Scan swap_map from current position to next entry still in use.</span>", 
"<span class=\"comment\"> * Recycle to start on reaching the end, returning 0 when empty.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#find_next_to_unuse\">find_next_to_unuse</a>(struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#si\">si</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#prev\">prev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No need for swap_lock here: we're just looking</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for whether an entry is in use, not modifying it; false</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hits are okay, and sys_swapoff() has already prevented new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocations from this area (while holding swap_lock).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#max\">max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#prev\">prev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * No entries in use at top of swap_map,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * loop back to start and recheck there.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#prev\">prev</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> && <a class=\"id\" href=\"#swap_count\">swap_count</a>(<a class=\"id\" href=\"#count\">count</a>) != <a class=\"id\" href=\"#SWAP_MAP_BAD\">SWAP_MAP_BAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We completely avoid races by reading each swap page in advance,</span>", 
"<span class=\"comment\"> * and then search for the process using it.  All the necessary</span>", 
"<span class=\"comment\"> * page table adjustments can then be made atomically.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#try_to_unuse\">try_to_unuse</a>(unsigned int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#swap_info_struct\">swap_info_struct</a> *<a class=\"id\" href=\"#si\">si</a> = <a class=\"id\" href=\"#swap_info\">swap_info</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#start_mm\">start_mm</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#swap_map\">swap_map</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#swcount\">swcount</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When searching mms for an entry, a good strategy is to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * start at the first mm we freed the previous entry from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (though actually we don't notice whether we or coincidence</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * freed the entry).  Initialize this start_mm with a hold.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A simpler strategy would be to start at the last mm we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * freed the previous entry from; but that would take less</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * advantage of mmlist ordering, which clusters forked mms</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * together, child after parent.  If we race with dup_mmap(), we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prefer to resolve parent before child, lest we miss entries</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * duplicated after we scanned child: using last mm would invert</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_mm\">start_mm</a> = &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>.<a class=\"id\" href=\"#mm_users\">mm_users</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Keep on scanning until all entries have gone.  Usually,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one pass through swap_map is enough, but not necessarily:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there are races when an instance of an entry might be missed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#find_next_to_unuse\">find_next_to_unuse</a>(<a class=\"id\" href=\"#si\">si</a>, <a class=\"id\" href=\"#i\">i</a>)) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get a page for the entry, using the existing swap</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cache page if there is one.  Otherwise, get a clean</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * page and read the swap into it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap_map\">swap_map</a> = &amp;<a class=\"id\" href=\"#si\">si</a>-><a class=\"id\" href=\"#swap_map\">swap_map</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#swp_entry\">swp_entry</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#read_swap_cache_async\">read_swap_cache_async</a>(<a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Either swap_duplicate() failed because entry</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * has been freed independently, and will not be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * reused since sys_swapoff() already disabled</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * allocation from here, or alloc_page() failed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#swap_map\">swap_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
];
xr_frag_insert('l/ab/8a7a4bebcf9626043d855680dd5c236e05f926.xr', __xr_tmp);
