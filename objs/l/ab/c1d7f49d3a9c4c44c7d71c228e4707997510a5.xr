var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_CPUMASK_H\">__LINUX_CPUMASK_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_CPUMASK_H\">__LINUX_CPUMASK_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Cpumasks provide a bitmap suitable for representing the</span>", 
"<span class=\"comment\"> * set of CPU's in a system, one bit position per CPU number.  In general,</span>", 
"<span class=\"comment\"> * only nr_cpu_ids (&lt;= NR_CPUS) bits are valid.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#threads\">threads</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitmap\">bitmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"typedef struct <a class=\"id\" href=\"#cpumask\">cpumask</a> { <a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>); } <a class=\"id\" href=\"#cpumask_t\">cpumask_t</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_bits - get the bits in a cpumask</span>", 
"<span class=\"comment\"> * @maskp: the struct cpumask *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should only assume nr_cpu_ids bits of this mask are valid.  This is</span>", 
"<span class=\"comment\"> * a macro so it's const-correct.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#maskp\">maskp</a>) ((<a class=\"id\" href=\"#maskp\">maskp</a>)-><a class=\"id\" href=\"#bits\">bits</a>)", 
"", 
"#if <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> == 1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#else", 
"extern int <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CPUMASK_OFFSTACK\">CONFIG_CPUMASK_OFFSTACK</a>", 
"<span class=\"comment\">/* Assuming NR_CPUS is huge, a runtime limit is more efficient.  Also,</span>", 
"<span class=\"comment\"> * not all bits may be allocated. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a><span class=\"ts\"/><a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a><span class=\"ts\"/><a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following particular system cpumasks and operations manage</span>", 
"<span class=\"comment\"> * possible, present, active and online cpus.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     cpu_possible_mask- has bit 'cpu' set iff cpu is populatable</span>", 
"<span class=\"comment\"> *     cpu_present_mask - has bit 'cpu' set iff cpu is populated</span>", 
"<span class=\"comment\"> *     cpu_online_mask  - has bit 'cpu' set iff cpu available to scheduler</span>", 
"<span class=\"comment\"> *     cpu_active_mask  - has bit 'cpu' set iff cpu available to migration</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  If !CONFIG_HOTPLUG_CPU, present == possible, and active == online.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  The cpu_possible_mask is fixed at boot time, as the set of CPU id's</span>", 
"<span class=\"comment\"> *  that it is possible might ever be plugged in at anytime during the</span>", 
"<span class=\"comment\"> *  life of that system boot.  The cpu_present_mask is dynamic(*),</span>", 
"<span class=\"comment\"> *  representing which CPUs are currently plugged in.  And</span>", 
"<span class=\"comment\"> *  cpu_online_mask is the dynamic subset of cpu_present_mask,</span>", 
"<span class=\"comment\"> *  indicating those CPUs available for scheduling.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  If HOTPLUG is enabled, then cpu_possible_mask is forced to have</span>", 
"<span class=\"comment\"> *  all NR_CPUS bits set, otherwise it is just the set of CPUs that</span>", 
"<span class=\"comment\"> *  ACPI reports present at boot.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  If HOTPLUG is enabled, then cpu_present_mask varies dynamically,</span>", 
"<span class=\"comment\"> *  depending on what ACPI reports as currently plugged in, otherwise</span>", 
"<span class=\"comment\"> *  cpu_present_mask is just a copy of cpu_possible_mask.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  (*) Well, cpu_present_mask is dynamic in the hotplug case.  If not</span>", 
"<span class=\"comment\"> *      hotplug, it's a copy of cpu_possible_mask, hence fixed at boot.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Subtleties:</span>", 
"<span class=\"comment\"> * 1) UP arch's (NR_CPUS == 1, CONFIG_SMP not defined) hardcode</span>", 
"<span class=\"comment\"> *    assumption that their single CPU is online.  The UP</span>", 
"<span class=\"comment\"> *    cpu_{online,possible,present}_masks are placebos.  Changing them</span>", 
"<span class=\"comment\"> *    will have no useful affect on the following num_*_cpus()</span>", 
"<span class=\"comment\"> *    and cpu_*() macros in the UP case.  This ugliness is a UP</span>", 
"<span class=\"comment\"> *    optimization - don't waste any instructions or memory references</span>", 
"<span class=\"comment\"> *    asking if you're online or how many CPUs there are if there is</span>", 
"<span class=\"comment\"> *    only one CPU.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"extern const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *const <a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>;", 
"extern const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *const <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>;", 
"extern const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *const <a class=\"id\" href=\"#cpu_present_mask\">cpu_present_mask</a>;", 
"extern const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *const <a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>;", 
"", 
"#if <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> &gt; 1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>()<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>()<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#num_present_cpus\">num_present_cpus</a>()<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#cpu_present_mask\">cpu_present_mask</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#num_active_cpus\">num_active_cpus</a>()<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_possible\">cpu_possible</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_present\">cpu_present</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpu_present_mask\">cpu_present_mask</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_active\">cpu_active</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>()<span class=\"ts\"/>1U", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>()<span class=\"ts\"/>1U", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#num_present_cpus\">num_present_cpus</a>()<span class=\"ts\"/>1U", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#num_active_cpus\">num_active_cpus</a>()<span class=\"ts\"/>1U", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#cpu\">cpu</a>) == 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_possible\">cpu_possible</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#cpu\">cpu</a>) == 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_present\">cpu_present</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#cpu\">cpu</a>) == 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_active\">cpu_active</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#cpu\">cpu</a>) == 0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* verify cpu argument to cpumask_* operators */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#cpumask_check\">cpumask_check</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PER_CPU_MAPS\">CONFIG_DEBUG_PER_CPU_MAPS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#cpu\">cpu</a> >= <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_DEBUG_PER_CPU_MAPS */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> == 1", 
"<span class=\"comment\">/* Uniprocessor.  Assume all masks are \"1\". */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Valid inputs for n are -1 and 0. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#cpumask_next\">cpumask_next</a>(int <a class=\"id\" href=\"#n\">n</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>+1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#cpumask_next_zero\">cpumask_next_zero</a>(int <a class=\"id\" href=\"#n\">n</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>+1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#cpumask_next_and\">cpumask_next_and</a>(int <a class=\"id\" href=\"#n\">n</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#andp\">andp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>+1;", 
"}", 
"", 
"<span class=\"comment\">/* cpu must be a valid cpu, ie 0, so there's no other choice. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#cpumask_any_but\">cpumask_any_but</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#cpu\">cpu</a>) = 0; (<a class=\"id\" href=\"#cpu\">cpu</a>) &lt; 1; (<a class=\"id\" href=\"#cpu\">cpu</a>)++, (void)<a class=\"id\" href=\"#mask\">mask</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_cpu_not\">for_each_cpu_not</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#cpu\">cpu</a>) = 0; (<a class=\"id\" href=\"#cpu\">cpu</a>) &lt; 1; (<a class=\"id\" href=\"#cpu\">cpu</a>)++, (void)<a class=\"id\" href=\"#mask\">mask</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_cpu_and\">for_each_cpu_and</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#and\">and</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#cpu\">cpu</a>) = 0; (<a class=\"id\" href=\"#cpu\">cpu</a>) &lt; 1; (<a class=\"id\" href=\"#cpu\">cpu</a>)++, (void)<a class=\"id\" href=\"#mask\">mask</a>, (void)<a class=\"id\" href=\"#and\">and</a>)", 
"#else", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_first - get the first cpu in a cpumask</span>", 
"<span class=\"comment\"> * @srcp: the cpumask pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns &gt;= nr_cpu_ids if no cpus set.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#find_first_bit\">find_first_bit</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#srcp\">srcp</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_next - get the next cpu in a cpumask</span>", 
"<span class=\"comment\"> * @n: the cpu prior to the place to search (ie. return will be &gt; @n)</span>", 
"<span class=\"comment\"> * @srcp: the cpumask pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns &gt;= nr_cpu_ids if no further cpus set.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#cpumask_next\">cpumask_next</a>(int <a class=\"id\" href=\"#n\">n</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* -1 is a legal arg here. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_check\">cpumask_check</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#srcp\">srcp</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>, <a class=\"id\" href=\"#n\">n</a>+1);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_next_zero - get the next unset cpu in a cpumask</span>", 
"<span class=\"comment\"> * @n: the cpu prior to the place to search (ie. return will be &gt; @n)</span>", 
"<span class=\"comment\"> * @srcp: the cpumask pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns &gt;= nr_cpu_ids if no further cpus unset.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#cpumask_next_zero\">cpumask_next_zero</a>(int <a class=\"id\" href=\"#n\">n</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* -1 is a legal arg here. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_check\">cpumask_check</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#find_next_zero_bit\">find_next_zero_bit</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#srcp\">srcp</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>, <a class=\"id\" href=\"#n\">n</a>+1);", 
"}", 
"", 
"int <a class=\"id\" href=\"#cpumask_next_and\">cpumask_next_and</a>(int <a class=\"id\" href=\"#n\">n</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *);", 
"int <a class=\"id\" href=\"#cpumask_any_but\">cpumask_any_but</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * for_each_cpu - iterate over every cpu in a mask</span>", 
"<span class=\"comment\"> * @cpu: the (optionally unsigned) integer iterator</span>", 
"<span class=\"comment\"> * @mask: the cpumask pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After the loop, cpu is &gt;= nr_cpu_ids.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#cpu\">cpu</a>) = -1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#cpumask_next\">cpumask_next</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), (<a class=\"id\" href=\"#mask\">mask</a>)),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpu\">cpu</a>) &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>;)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * for_each_cpu_not - iterate over every cpu in a complemented mask</span>", 
"<span class=\"comment\"> * @cpu: the (optionally unsigned) integer iterator</span>", 
"<span class=\"comment\"> * @mask: the cpumask pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After the loop, cpu is &gt;= nr_cpu_ids.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_cpu_not\">for_each_cpu_not</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#cpu\">cpu</a>) = -1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#cpumask_next_zero\">cpumask_next_zero</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), (<a class=\"id\" href=\"#mask\">mask</a>)),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpu\">cpu</a>) &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>;)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * for_each_cpu_and - iterate over every cpu in both masks</span>", 
"<span class=\"comment\"> * @cpu: the (optionally unsigned) integer iterator</span>", 
"<span class=\"comment\"> * @mask: the first cpumask pointer</span>", 
"<span class=\"comment\"> * @and: the second cpumask pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This saves a temporary CPU mask in many places.  It is equivalent to:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct cpumask tmp;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cpumask_and(&amp;tmp, &amp;mask, &amp;and);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for_each_cpu(cpu, &amp;tmp)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After the loop, cpu is &gt;= nr_cpu_ids.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_cpu_and\">for_each_cpu_and</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#and\">and</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#cpu\">cpu</a>) = -1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#cpumask_next_and\">cpumask_next_and</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), (<a class=\"id\" href=\"#mask\">mask</a>), (<a class=\"id\" href=\"#and\">and</a>)),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpu\">cpu</a>) &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>;)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* SMP */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_BITS_NONE\">CPU_BITS_NONE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[0 ... <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)-1] = 0UL<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_BITS_CPU0\">CPU_BITS_CPU0</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[0] =  1UL<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_set_cpu - set a cpu in a cpumask</span>", 
"<span class=\"comment\"> * @cpu: cpu number (&lt; nr_cpu_ids)</span>", 
"<span class=\"comment\"> * @dstp: the cpumask pointer</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#dstp\">dstp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#cpumask_check\">cpumask_check</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#dstp\">dstp</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_clear_cpu - clear a cpu in a cpumask</span>", 
"<span class=\"comment\"> * @cpu: cpu number (&lt; nr_cpu_ids)</span>", 
"<span class=\"comment\"> * @dstp: the cpumask pointer</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#dstp\">dstp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#cpumask_check\">cpumask_check</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#dstp\">dstp</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_test_cpu - test for a cpu in a cpumask</span>", 
"<span class=\"comment\"> * @cpu: cpu number (&lt; nr_cpu_ids)</span>", 
"<span class=\"comment\"> * @cpumask: the cpumask pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * No static inline type checking - see Subtlety (1) above.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpumask\">cpumask</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#cpumask_check\">cpumask_check</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>((<a class=\"id\" href=\"#cpumask\">cpumask</a>)))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_test_and_set_cpu - atomically test and set a cpu in a cpumask</span>", 
"<span class=\"comment\"> * @cpu: cpu number (&lt; nr_cpu_ids)</span>", 
"<span class=\"comment\"> * @cpumask: the cpumask pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * test_and_set_bit wrapper for cpumasks.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpumask_test_and_set_cpu\">cpumask_test_and_set_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask\">cpumask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#cpumask_check\">cpumask_check</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#cpumask\">cpumask</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_test_and_clear_cpu - atomically test and clear a cpu in a cpumask</span>", 
"<span class=\"comment\"> * @cpu: cpu number (&lt; nr_cpu_ids)</span>", 
"<span class=\"comment\"> * @cpumask: the cpumask pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * test_and_clear_bit wrapper for cpumasks.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpumask_test_and_clear_cpu\">cpumask_test_and_clear_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask\">cpumask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#cpumask_check\">cpumask_check</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#cpumask\">cpumask</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_setall - set all cpus (&lt; nr_cpu_ids) in a cpumask</span>", 
"<span class=\"comment\"> * @dstp: the cpumask pointer</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpumask_setall\">cpumask_setall</a>(struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#dstp\">dstp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_fill\">bitmap_fill</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#dstp\">dstp</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_clear - clear all cpus (&lt; nr_cpu_ids) in a cpumask</span>", 
"<span class=\"comment\"> * @dstp: the cpumask pointer</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#dstp\">dstp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#dstp\">dstp</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_and - *dstp = *src1p &amp; *src2p</span>", 
"<span class=\"comment\"> * @dstp: the cpumask result</span>", 
"<span class=\"comment\"> * @src1p: the first input</span>", 
"<span class=\"comment\"> * @src2p: the second input</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#dstp\">dstp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src1p\">src1p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src2p\">src2p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_and\">bitmap_and</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#dstp\">dstp</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#src1p\">src1p</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#src2p\">src2p</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_or - *dstp = *src1p | *src2p</span>", 
"<span class=\"comment\"> * @dstp: the cpumask result</span>", 
"<span class=\"comment\"> * @src1p: the first input</span>", 
"<span class=\"comment\"> * @src2p: the second input</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpumask_or\">cpumask_or</a>(struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#dstp\">dstp</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src1p\">src1p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src2p\">src2p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_or\">bitmap_or</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#dstp\">dstp</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#src1p\">src1p</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#src2p\">src2p</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_xor - *dstp = *src1p ^ *src2p</span>", 
"<span class=\"comment\"> * @dstp: the cpumask result</span>", 
"<span class=\"comment\"> * @src1p: the first input</span>", 
"<span class=\"comment\"> * @src2p: the second input</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpumask_xor\">cpumask_xor</a>(struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#dstp\">dstp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src1p\">src1p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src2p\">src2p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_xor\">bitmap_xor</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#dstp\">dstp</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#src1p\">src1p</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#src2p\">src2p</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_andnot - *dstp = *src1p &amp; ~*src2p</span>", 
"<span class=\"comment\"> * @dstp: the cpumask result</span>", 
"<span class=\"comment\"> * @src1p: the first input</span>", 
"<span class=\"comment\"> * @src2p: the second input</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpumask_andnot\">cpumask_andnot</a>(struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#dstp\">dstp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src1p\">src1p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src2p\">src2p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_andnot\">bitmap_andnot</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#dstp\">dstp</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#src1p\">src1p</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#src2p\">src2p</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_complement - *dstp = ~*srcp</span>", 
"<span class=\"comment\"> * @dstp: the cpumask result</span>", 
"<span class=\"comment\"> * @srcp: the input to invert</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpumask_complement\">cpumask_complement</a>(struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#dstp\">dstp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_complement\">bitmap_complement</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#dstp\">dstp</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#srcp\">srcp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_equal - *src1p == *src2p</span>", 
"<span class=\"comment\"> * @src1p: the first input</span>", 
"<span class=\"comment\"> * @src2p: the second input</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cpumask_equal\">cpumask_equal</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src1p\">src1p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src2p\">src2p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_equal\">bitmap_equal</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#src1p\">src1p</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#src2p\">src2p</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_intersects - (*src1p &amp; *src2p) != 0</span>", 
"<span class=\"comment\"> * @src1p: the first input</span>", 
"<span class=\"comment\"> * @src2p: the second input</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cpumask_intersects\">cpumask_intersects</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src1p\">src1p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src2p\">src2p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_intersects\">bitmap_intersects</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#src1p\">src1p</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#src2p\">src2p</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_subset - (*src1p &amp; ~*src2p) == 0</span>", 
"<span class=\"comment\"> * @src1p: the first input</span>", 
"<span class=\"comment\"> * @src2p: the second input</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpumask_subset\">cpumask_subset</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src1p\">src1p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src2p\">src2p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_subset\">bitmap_subset</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#src1p\">src1p</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#src2p\">src2p</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_empty - *srcp == 0</span>", 
"<span class=\"comment\"> * @srcp: the cpumask to that all cpus &lt; nr_cpu_ids are clear.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_empty\">bitmap_empty</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#srcp\">srcp</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_full - *srcp == 0xFFFFFFFF...</span>", 
"<span class=\"comment\"> * @srcp: the cpumask to that all cpus &lt; nr_cpu_ids are set.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cpumask_full\">cpumask_full</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_full\">bitmap_full</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#srcp\">srcp</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_weight - Count of bits in *srcp</span>", 
"<span class=\"comment\"> * @srcp: the cpumask to count bits (&lt; nr_cpu_ids) in.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_weight\">bitmap_weight</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#srcp\">srcp</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_shift_right - *dstp = *srcp &gt;&gt; n</span>", 
"<span class=\"comment\"> * @dstp: the cpumask result</span>", 
"<span class=\"comment\"> * @srcp: the input to shift</span>", 
"<span class=\"comment\"> * @n: the number of bits to shift by</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpumask_shift_right\">cpumask_shift_right</a>(struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#dstp\">dstp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>, int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_shift_right\">bitmap_shift_right</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#dstp\">dstp</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#srcp\">srcp</a>), <a class=\"id\" href=\"#n\">n</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_shift_left - *dstp = *srcp &lt;&lt; n</span>", 
"<span class=\"comment\"> * @dstp: the cpumask result</span>", 
"<span class=\"comment\"> * @srcp: the input to shift</span>", 
"<span class=\"comment\"> * @n: the number of bits to shift by</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpumask_shift_left\">cpumask_shift_left</a>(struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#dstp\">dstp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>, int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_shift_left\">bitmap_shift_left</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#dstp\">dstp</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#srcp\">srcp</a>), <a class=\"id\" href=\"#n\">n</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_copy - *dstp = *srcp</span>", 
"<span class=\"comment\"> * @dstp: the result</span>", 
"<span class=\"comment\"> * @srcp: the input cpumask</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#dstp\">dstp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_copy\">bitmap_copy</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#dstp\">dstp</a>), <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#srcp\">srcp</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_any - pick a \"random\" cpu from *srcp</span>", 
"<span class=\"comment\"> * @srcp: the input cpumask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns &gt;= nr_cpu_ids if no cpus set.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpumask_any\">cpumask_any</a>(<a class=\"id\" href=\"#srcp\">srcp</a>) <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_first_and - return the first cpu from *srcp1 &amp; *srcp2</span>", 
"<span class=\"comment\"> * @src1p: the first input</span>", 
"<span class=\"comment\"> * @src2p: the second input</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns &gt;= nr_cpu_ids if no cpus set in both.  See also cpumask_next_and().</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpumask_first_and\">cpumask_first_and</a>(<a class=\"id\" href=\"#src1p\">src1p</a>, <a class=\"id\" href=\"#src2p\">src2p</a>) <a class=\"id\" href=\"#cpumask_next_and\">cpumask_next_and</a>(-1, (<a class=\"id\" href=\"#src1p\">src1p</a>), (<a class=\"id\" href=\"#src2p\">src2p</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_any_and - pick a \"random\" cpu from *mask1 &amp; *mask2</span>", 
"<span class=\"comment\"> * @mask1: the first input cpumask</span>", 
"<span class=\"comment\"> * @mask2: the second input cpumask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns &gt;= nr_cpu_ids if no cpus set.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpumask_any_and\">cpumask_any_and</a>(<a class=\"id\" href=\"#mask1\">mask1</a>, <a class=\"id\" href=\"#mask2\">mask2</a>) <a class=\"id\" href=\"#cpumask_first_and\">cpumask_first_and</a>((<a class=\"id\" href=\"#mask1\">mask1</a>), (<a class=\"id\" href=\"#mask2\">mask2</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_of - the cpumask containing just a given cpu</span>", 
"<span class=\"comment\"> * @cpu: the cpu (&lt;= nr_cpu_ids)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) (<a class=\"id\" href=\"#get_cpu_mask\">get_cpu_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_scnprintf - print a cpumask into a string as comma-separated hex</span>", 
"<span class=\"comment\"> * @buf: the buffer to sprintf into</span>", 
"<span class=\"comment\"> * @len: the length of the buffer</span>", 
"<span class=\"comment\"> * @srcp: the cpumask to print</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If len is zero, returns zero.  Otherwise returns the length of the</span>", 
"<span class=\"comment\"> * (nul-terminated) @buf string.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpumask_scnprintf\">cpumask_scnprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_scnprintf\">bitmap_scnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#srcp\">srcp</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_parse_user - extract a cpumask from a user string</span>", 
"<span class=\"comment\"> * @buf: the buffer to extract from</span>", 
"<span class=\"comment\"> * @len: the length of the buffer</span>", 
"<span class=\"comment\"> * @dstp: the cpumask to set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns -errno, or 0 for success.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpumask_parse_user\">cpumask_parse_user</a>(const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#dstp\">dstp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_parse_user\">bitmap_parse_user</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#dstp\">dstp</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpulist_scnprintf - print a cpumask into a string as comma-separated list</span>", 
"<span class=\"comment\"> * @buf: the buffer to sprintf into</span>", 
"<span class=\"comment\"> * @len: the length of the buffer</span>", 
"<span class=\"comment\"> * @srcp: the cpumask to print</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If len is zero, returns zero.  Otherwise returns the length of the</span>", 
"<span class=\"comment\"> * (nul-terminated) @buf string.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpulist_scnprintf\">cpulist_scnprintf</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_scnlistprintf\">bitmap_scnlistprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#srcp\">srcp</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpulist_parse_user - extract a cpumask from a user string of ranges</span>", 
"<span class=\"comment\"> * @buf: the buffer to extract from</span>", 
"<span class=\"comment\"> * @len: the length of the buffer</span>", 
"<span class=\"comment\"> * @dstp: the cpumask to set.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns -errno, or 0 for success.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#cpulist_parse\">cpulist_parse</a>(const char *<a class=\"id\" href=\"#buf\">buf</a>, struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#dstp\">dstp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bitmap_parselist\">bitmap_parselist</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#dstp\">dstp</a>), <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_size - size to allocate for a 'struct cpumask' in bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This will eventually be a runtime variable, depending on nr_cpu_ids.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cpumask_size\">cpumask_size</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME: Once all cpumask assignments are eliminated, this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can be nr_cpumask_bits */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>) * sizeof(long);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cpumask_var_t: struct cpumask for stack usage.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Oh, the wicked games we play!  In order to make kernel coding a</span>", 
"<span class=\"comment\"> * little more difficult, we typedef cpumask_var_t to an array or a</span>", 
"<span class=\"comment\"> * pointer: doing &amp;mask on an array is a noop, so it still works.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ie.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cpumask_var_t tmpmask;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if (!alloc_cpumask_var(&amp;tmpmask, GFP_KERNEL))</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>return -ENOMEM;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  ... use 'tmpmask' like a normal struct cpumask * ...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>free_cpumask_var(tmpmask);</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CPUMASK_OFFSTACK\">CONFIG_CPUMASK_OFFSTACK</a>", 
"typedef struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a>;", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#alloc_cpumask_var_node\">alloc_cpumask_var_node</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>);", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#zalloc_cpumask_var_node\">zalloc_cpumask_var_node</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#zalloc_cpumask_var\">zalloc_cpumask_var</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>);", 
"void <a class=\"id\" href=\"#alloc_bootmem_cpumask_var\">alloc_bootmem_cpumask_var</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#mask\">mask</a>);", 
"void <a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#mask\">mask</a>);", 
"void <a class=\"id\" href=\"#free_bootmem_cpumask_var\">free_bootmem_cpumask_var</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"#else", 
"typedef struct <a class=\"id\" href=\"#cpumask\">cpumask</a> <a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a>[1];", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#alloc_cpumask_var_node\">alloc_cpumask_var_node</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#zalloc_cpumask_var\">zalloc_cpumask_var</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(*<a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#zalloc_cpumask_var_node\">zalloc_cpumask_var_node</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(*<a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#alloc_bootmem_cpumask_var\">alloc_bootmem_cpumask_var</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_bootmem_cpumask_var\">free_bootmem_cpumask_var</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_CPUMASK_OFFSTACK */</span>", 
"", 
"<span class=\"comment\">/* It's common to want to use cpu_all_mask in struct member initializers,</span>", 
"<span class=\"comment\"> * so it has to refer to an address rather than a pointer. */</span>", 
"extern const <a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#cpu_all_bits\">cpu_all_bits</a>, <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_all_mask\">cpu_all_mask</a> <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_all_bits\">cpu_all_bits</a>)", 
"", 
"<span class=\"comment\">/* First bits of cpu_bit_bitmap are in fact unset. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_none_mask\">cpu_none_mask</a> <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#cpu_bit_bitmap\">cpu_bit_bitmap</a>[0])", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) <a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)   <a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_present_cpu\">for_each_present_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)  <a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpu_present_mask\">cpu_present_mask</a>)", 
"", 
"<span class=\"comment\">/* Wrappers for arch boot code to manipulate normally-constant masks */</span>", 
"void <a class=\"id\" href=\"#set_cpu_possible\">set_cpu_possible</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#possible\">possible</a>);", 
"void <a class=\"id\" href=\"#set_cpu_present\">set_cpu_present</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#present\">present</a>);", 
"void <a class=\"id\" href=\"#set_cpu_online\">set_cpu_online</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#online\">online</a>);", 
"void <a class=\"id\" href=\"#set_cpu_active\">set_cpu_active</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#active\">active</a>);", 
"void <a class=\"id\" href=\"#init_cpu_present\">init_cpu_present</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src\">src</a>);", 
"void <a class=\"id\" href=\"#init_cpu_possible\">init_cpu_possible</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src\">src</a>);", 
"void <a class=\"id\" href=\"#init_cpu_online\">init_cpu_online</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src\">src</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * to_cpumask - convert an NR_CPUS bitmap to a struct cpumask *</span>", 
"<span class=\"comment\"> * @bitmap: the bitmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are a few places where cpumask_var_t isn't appropriate and</span>", 
"<span class=\"comment\"> * static cpumasks must be used (eg. very early boot), yet we don't</span>", 
"<span class=\"comment\"> * expose the definition of 'struct cpumask'.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This does the conversion, and can be used as a constant initializer.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *)(1 ? (<a class=\"id\" href=\"#bitmap\">bitmap</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    : (void *)sizeof(<a class=\"id\" href=\"#__check_is_bitmap\">__check_is_bitmap</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>))))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__check_is_bitmap\">__check_is_bitmap</a>(const unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Special-case data structure for \"single bit set only\" constant CPU masks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We pre-generate all the 64 (or 32) possible bit positions, with enough</span>", 
"<span class=\"comment\"> * padding to the left and the right, and return the constant pointer</span>", 
"<span class=\"comment\"> * appropriately offset.</span>", 
"<span class=\"comment\"> */</span>", 
"extern const unsigned long", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_bit_bitmap\">cpu_bit_bitmap</a>[<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>+1][<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)];", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#get_cpu_mask\">get_cpu_mask</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#cpu_bit_bitmap\">cpu_bit_bitmap</a>[1 + <a class=\"id\" href=\"#cpu\">cpu</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> -= <a class=\"id\" href=\"#cpu\">cpu</a> / <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_is_offline\">cpu_is_offline</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/><a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"", 
"#if <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> <= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_BITS_ALL\">CPU_BITS_ALL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)-1] = <a class=\"id\" href=\"#CPU_MASK_LAST_WORD\">CPU_MASK_LAST_WORD</a><span class=\"ts\"/>\\", 
"}", 
"", 
"#else <span class=\"comment\">/* NR_CPUS &gt; BITS_PER_LONG */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_BITS_ALL\">CPU_BITS_ALL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[0 ... <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)-2] = ~0UL,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)-1] = <a class=\"id\" href=\"#CPU_MASK_LAST_WORD\">CPU_MASK_LAST_WORD</a><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* NR_CPUS &gt; BITS_PER_LONG */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * From here down, all obsolete.  Use cpumask_ variants!</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_DISABLE_OBSOLETE_CPUMASK_FUNCTIONS\">CONFIG_DISABLE_OBSOLETE_CPUMASK_FUNCTIONS</a>", 
"<span class=\"comment\">/* These strip const, as traditionally they weren't const. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_possible_map\">cpu_possible_map</a><span class=\"ts\"/>(*(<a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> *)<a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_online_map\">cpu_online_map</a><span class=\"ts\"/><span class=\"ts\"/>(*(<a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> *)<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_present_map\">cpu_present_map</a><span class=\"ts\"/><span class=\"ts\"/>(*(<a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> *)<a class=\"id\" href=\"#cpu_present_mask\">cpu_present_mask</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_active_map\">cpu_active_map</a><span class=\"ts\"/><span class=\"ts\"/>(*(<a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> *)<a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpumask_of_cpu\">cpumask_of_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) (*<a class=\"id\" href=\"#get_cpu_mask\">get_cpu_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_MASK_LAST_WORD\">CPU_MASK_LAST_WORD</a> <a class=\"id\" href=\"#BITMAP_LAST_WORD_MASK\">BITMAP_LAST_WORD_MASK</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)", 
"", 
"#if <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> <= <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_MASK_ALL\">CPU_MASK_ALL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"(<a class=\"id\" href=\"#cpumask_t\">cpumask_t</a>) { {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)-1] = <a class=\"id\" href=\"#CPU_MASK_LAST_WORD\">CPU_MASK_LAST_WORD</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} }", 
"", 
"#else", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_MASK_ALL\">CPU_MASK_ALL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"(<a class=\"id\" href=\"#cpumask_t\">cpumask_t</a>) { {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[0 ... <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)-2] = ~0UL,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)-1] = <a class=\"id\" href=\"#CPU_MASK_LAST_WORD\">CPU_MASK_LAST_WORD</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} }", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_MASK_NONE\">CPU_MASK_NONE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"(<a class=\"id\" href=\"#cpumask_t\">cpumask_t</a>) { {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[0 ... <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)-1] =  0UL<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPU_MASK_CPU0\">CPU_MASK_CPU0</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"(<a class=\"id\" href=\"#cpumask_t\">cpumask_t</a>) { {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[0] =  1UL<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} }", 
"", 
"#if <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> == 1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#first_cpu\">first_cpu</a>(<a class=\"id\" href=\"#src\">src</a>)<span class=\"ts\"/><span class=\"ts\"/>({ (void)(<a class=\"id\" href=\"#src\">src</a>); 0; })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#next_cpu\">next_cpu</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#src\">src</a>)<span class=\"ts\"/>({ (void)(<a class=\"id\" href=\"#src\">src</a>); 1; })", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#any_online_cpu\">any_online_cpu</a>(<a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_cpu_mask\">for_each_cpu_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#cpu\">cpu</a>) = 0; (<a class=\"id\" href=\"#cpu\">cpu</a>) &lt; 1; (<a class=\"id\" href=\"#cpu\">cpu</a>)++, (void)<a class=\"id\" href=\"#mask\">mask</a>)", 
"#else <span class=\"comment\">/* NR_CPUS &gt; 1 */</span>", 
"int <a class=\"id\" href=\"#__first_cpu\">__first_cpu</a>(const <a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>);", 
"int <a class=\"id\" href=\"#__next_cpu\">__next_cpu</a>(int <a class=\"id\" href=\"#n\">n</a>, const <a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>);", 
"int <a class=\"id\" href=\"#__any_online_cpu\">__any_online_cpu</a>(const <a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> *<a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#first_cpu\">first_cpu</a>(<a class=\"id\" href=\"#src\">src</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__first_cpu\">__first_cpu</a>(&amp;(<a class=\"id\" href=\"#src\">src</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#next_cpu\">next_cpu</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#src\">src</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__next_cpu\">__next_cpu</a>((<a class=\"id\" href=\"#n\">n</a>), &amp;(<a class=\"id\" href=\"#src\">src</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#any_online_cpu\">any_online_cpu</a>(<a class=\"id\" href=\"#mask\">mask</a>) <a class=\"id\" href=\"#__any_online_cpu\">__any_online_cpu</a>(&amp;(<a class=\"id\" href=\"#mask\">mask</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_cpu_mask\">for_each_cpu_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#cpu\">cpu</a>) = -1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#next_cpu\">next_cpu</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), (<a class=\"id\" href=\"#mask\">mask</a>)),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpu\">cpu</a>) &lt; <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>; )", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* SMP */</span>", 
"", 
"#if <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> <= 64", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_cpu_mask_nr\">for_each_cpu_mask_nr</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu_mask\">for_each_cpu_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)", 
"", 
"#else <span class=\"comment\">/* NR_CPUS &gt; 64 */</span>", 
"", 
"int <a class=\"id\" href=\"#__next_cpu_nr\">__next_cpu_nr</a>(int <a class=\"id\" href=\"#n\">n</a>, const <a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_cpu_mask_nr\">for_each_cpu_mask_nr</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#mask\">mask</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#cpu\">cpu</a>) = -1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#__next_cpu_nr\">__next_cpu_nr</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), &amp;(<a class=\"id\" href=\"#mask\">mask</a>)),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpu\">cpu</a>) &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>; )", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* NR_CPUS &gt; 64 */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpus_addr\">cpus_addr</a>(<a class=\"id\" href=\"#src\">src</a>) ((<a class=\"id\" href=\"#src\">src</a>).<a class=\"id\" href=\"#bits\">bits</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_set\">cpu_set</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#dst\">dst</a>) <a class=\"id\" href=\"#__cpu_set\">__cpu_set</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), &amp;(<a class=\"id\" href=\"#dst\">dst</a>))", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__cpu_set\">__cpu_set</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, volatile <a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_clear\">cpu_clear</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#dst\">dst</a>) <a class=\"id\" href=\"#__cpu_clear\">__cpu_clear</a>((<a class=\"id\" href=\"#cpu\">cpu</a>), &amp;(<a class=\"id\" href=\"#dst\">dst</a>))", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__cpu_clear\">__cpu_clear</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, volatile <a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> *<a class=\"id\" href=\"#dstp\">dstp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#dstp\">dstp</a>-><a class=\"id\" href=\"#bits\">bits</a>);", 
"}", 
"", 
];
xr_frag_insert('l/ab/c1d7f49d3a9c4c44c7d71c228e4707997510a5.xr', __xr_tmp);
