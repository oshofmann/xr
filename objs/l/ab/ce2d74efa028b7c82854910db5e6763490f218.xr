var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * drivers/net/phy/phy_device.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Framework for finding and configuring PHYs.</span>", 
"<span class=\"comment\"> * Also contains generic PHY driver</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: Andy Fleming</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2004 Freescale Semiconductor, Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute  it and/or modify it</span>", 
"<span class=\"comment\"> * under  the terms of  the GNU General  Public License as published by the</span>", 
"<span class=\"comment\"> * Free Software Foundation;  either version 2 of the  License, or (at your</span>", 
"<span class=\"comment\"> * option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#etherdevice\">etherdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mii\">mii</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ethtool\">ethtool</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#phy\">phy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#irq\">irq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(\"PHY library\");", 
"<a class=\"id\" href=\"#MODULE_AUTHOR\">MODULE_AUTHOR</a>(\"Andy Fleming\");", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"", 
"void <a class=\"id\" href=\"#phy_device_free\">phy_device_free</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_device_free\">phy_device_free</a>);", 
"", 
"static void <a class=\"id\" href=\"#phy_device_release\">phy_device_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phy_device_free\">phy_device_free</a>(<a class=\"id\" href=\"#to_phy_device\">to_phy_device</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#phy_driver\">phy_driver</a> <a class=\"id\" href=\"#genphy_driver\">genphy_driver</a>;", 
"extern int <a class=\"id\" href=\"#mdio_bus_init\">mdio_bus_init</a>(void);", 
"extern void <a class=\"id\" href=\"#mdio_bus_exit\">mdio_bus_exit</a>(void);", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#phy_fixup_list\">phy_fixup_list</a>);", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#phy_fixup_lock\">phy_fixup_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Creates a new phy_fixup and adds it to the list</span>", 
"<span class=\"comment\"> * @bus_id: A string which matches phydev-&gt;dev.bus_id (or PHY_ANY_ID)</span>", 
"<span class=\"comment\"> * @phy_uid: Used to match against phydev-&gt;phy_id (the UID of the PHY)</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>It can also be PHY_ANY_UID</span>", 
"<span class=\"comment\"> * @phy_uid_mask: Applied to phydev-&gt;phy_id and fixup-&gt;phy_uid before</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>comparison</span>", 
"<span class=\"comment\"> * @run: The actual code to be run when a matching PHY is found</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#phy_register_fixup\">phy_register_fixup</a>(const char *<a class=\"id\" href=\"#bus_id\">bus_id</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phy_uid\">phy_uid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phy_uid_mask\">phy_uid_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#run\">run</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#phy_fixup\">phy_fixup</a> *<a class=\"id\" href=\"#fixup\">fixup</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fixup\">fixup</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#phy_fixup\">phy_fixup</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fixup\">fixup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#fixup\">fixup</a>-><a class=\"id\" href=\"#bus_id\">bus_id</a>, <a class=\"id\" href=\"#bus_id\">bus_id</a>, sizeof(<a class=\"id\" href=\"#fixup\">fixup</a>-><a class=\"id\" href=\"#bus_id\">bus_id</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fixup\">fixup</a>-><a class=\"id\" href=\"#phy_uid\">phy_uid</a> = <a class=\"id\" href=\"#phy_uid\">phy_uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fixup\">fixup</a>-><a class=\"id\" href=\"#phy_uid_mask\">phy_uid_mask</a> = <a class=\"id\" href=\"#phy_uid_mask\">phy_uid_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fixup\">fixup</a>-><a class=\"id\" href=\"#run\">run</a> = <a class=\"id\" href=\"#run\">run</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#phy_fixup_lock\">phy_fixup_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#fixup\">fixup</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#phy_fixup_list\">phy_fixup_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#phy_fixup_lock\">phy_fixup_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_register_fixup\">phy_register_fixup</a>);", 
"", 
"<span class=\"comment\">/* Registers a fixup to be run on any PHY with the UID in phy_uid */</span>", 
"int <a class=\"id\" href=\"#phy_register_fixup_for_uid\">phy_register_fixup_for_uid</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phy_uid\">phy_uid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phy_uid_mask\">phy_uid_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#run\">run</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *))", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#phy_register_fixup\">phy_register_fixup</a>(<a class=\"id\" href=\"#PHY_ANY_ID\">PHY_ANY_ID</a>, <a class=\"id\" href=\"#phy_uid\">phy_uid</a>, <a class=\"id\" href=\"#phy_uid_mask\">phy_uid_mask</a>, <a class=\"id\" href=\"#run\">run</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_register_fixup_for_uid\">phy_register_fixup_for_uid</a>);", 
"", 
"<span class=\"comment\">/* Registers a fixup to be run on the PHY with id string bus_id */</span>", 
"int <a class=\"id\" href=\"#phy_register_fixup_for_id\">phy_register_fixup_for_id</a>(const char *<a class=\"id\" href=\"#bus_id\">bus_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#run\">run</a>)(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *))", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#phy_register_fixup\">phy_register_fixup</a>(<a class=\"id\" href=\"#bus_id\">bus_id</a>, <a class=\"id\" href=\"#PHY_ANY_UID\">PHY_ANY_UID</a>, 0xffffffff, <a class=\"id\" href=\"#run\">run</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_register_fixup_for_id\">phy_register_fixup_for_id</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns 1 if fixup matches phydev in bus_id and phy_uid.</span>", 
"<span class=\"comment\"> * Fixups can be set to match any in one or more fields.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#phy_needs_fixup\">phy_needs_fixup</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>, struct <a class=\"id\" href=\"#phy_fixup\">phy_fixup</a> *<a class=\"id\" href=\"#fixup\">fixup</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#fixup\">fixup</a>-><a class=\"id\" href=\"#bus_id\">bus_id</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#dev\">dev</a>)) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#fixup\">fixup</a>-><a class=\"id\" href=\"#bus_id\">bus_id</a>, <a class=\"id\" href=\"#PHY_ANY_ID\">PHY_ANY_ID</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#fixup\">fixup</a>-><a class=\"id\" href=\"#phy_uid\">phy_uid</a> &amp; <a class=\"id\" href=\"#fixup\">fixup</a>-><a class=\"id\" href=\"#phy_uid_mask\">phy_uid_mask</a>) !=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#phy_id\">phy_id</a> &amp; <a class=\"id\" href=\"#fixup\">fixup</a>-><a class=\"id\" href=\"#phy_uid_mask\">phy_uid_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fixup\">fixup</a>-><a class=\"id\" href=\"#phy_uid\">phy_uid</a> != <a class=\"id\" href=\"#PHY_ANY_UID\">PHY_ANY_UID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/* Runs any matching fixups for this phydev */</span>", 
"int <a class=\"id\" href=\"#phy_scan_fixups\">phy_scan_fixups</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#phy_fixup\">phy_fixup</a> *<a class=\"id\" href=\"#fixup\">fixup</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#phy_fixup_lock\">phy_fixup_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#fixup\">fixup</a>, &amp;<a class=\"id\" href=\"#phy_fixup_list\">phy_fixup_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#phy_needs_fixup\">phy_needs_fixup</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#fixup\">fixup</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#fixup\">fixup</a>-><a class=\"id\" href=\"#run\">run</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#phy_fixup_lock\">phy_fixup_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#phy_fixup_lock\">phy_fixup_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_scan_fixups\">phy_scan_fixups</a>);", 
"", 
"struct <a class=\"id\" href=\"#phy_device\">phy_device</a>* <a class=\"id\" href=\"#phy_device_create\">phy_device_create</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, int <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#phy_id\">phy_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We allocate the device, and initialize the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * default values */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#NULL\">NULL</a> == <a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (struct <a class=\"id\" href=\"#phy_device\">phy_device</a>*) <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>((void*)-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#phy_device_release\">phy_device_release</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#speed\">speed</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#duplex\">duplex</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pause\">pause</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#asym_pause\">asym_pause</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#interface\">interface</a> = <a class=\"id\" href=\"#PHY_INTERFACE_MODE_GMII\">PHY_INTERFACE_MODE_GMII</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a> = <a class=\"id\" href=\"#AUTONEG_ENABLE\">AUTONEG_ENABLE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#phy_id\">phy_id</a> = <a class=\"id\" href=\"#phy_id\">phy_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#bus\">bus</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#bus\">bus</a> = &amp;<a class=\"id\" href=\"#mdio_bus_type\">mdio_bus_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#irq\">irq</a> != <a class=\"id\" href=\"#NULL\">NULL</a> ? <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#irq\">irq</a>[<a class=\"id\" href=\"#addr\">addr</a>] : <a class=\"id\" href=\"#PHY_POLL\">PHY_POLL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_name\">dev_set_name</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PHY_ID_FMT\">PHY_ID_FMT</a>, <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PHY_DOWN\">PHY_DOWN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_DELAYED_WORK\">INIT_DELAYED_WORK</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state_queue\">state_queue</a>, <a class=\"id\" href=\"#phy_state_machine\">phy_state_machine</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Request the appropriate module unconditionally; don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   bother trying to do so only if it isn't already loaded,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   because that gets complicated. A hotplug event would have</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   done an unconditional modprobe anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   We don't do normal hotplug because it won't work for MDIO</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   -- because it relies on the device staying around for long</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   enough for the driver to get loaded. With MDIO, the NIC</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   driver will get bored and give up as soon as it finds that</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   there's no driver _already_ loaded. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(<a class=\"id\" href=\"#MDIO_MODULE_PREFIX\">MDIO_MODULE_PREFIX</a> <a class=\"id\" href=\"#MDIO_ID_FMT\">MDIO_ID_FMT</a>, <a class=\"id\" href=\"#MDIO_ID_ARGS\">MDIO_ID_ARGS</a>(<a class=\"id\" href=\"#phy_id\">phy_id</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_device_create\">phy_device_create</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_phy_id - reads the specified addr for its ID.</span>", 
"<span class=\"comment\"> * @bus: the target MII bus</span>", 
"<span class=\"comment\"> * @addr: PHY address on the MII bus</span>", 
"<span class=\"comment\"> * @phy_id: where to store the ID retrieved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Reads the ID registers of the PHY at @addr on the</span>", 
"<span class=\"comment\"> *   @bus, stores it in @phy_id and returns zero on success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#get_phy_id\">get_phy_id</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, int <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#phy_id\">phy_id</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#phy_reg\">phy_reg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Grab the bits from PHYIR1, and put them</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the upper half */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phy_reg\">phy_reg</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#read\">read</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#MII_PHYSID1\">MII_PHYSID1</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#phy_reg\">phy_reg</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#phy_id\">phy_id</a> = (<a class=\"id\" href=\"#phy_reg\">phy_reg</a> &amp; 0xffff) << 16;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Grab the bits from PHYIR2, and put them in the lower half */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phy_reg\">phy_reg</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#read\">read</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#MII_PHYSID2\">MII_PHYSID2</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#phy_reg\">phy_reg</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#phy_id\">phy_id</a> |= (<a class=\"id\" href=\"#phy_reg\">phy_reg</a> &amp; 0xffff);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_phy_id\">get_phy_id</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_phy_device - reads the specified PHY device and returns its @phy_device struct</span>", 
"<span class=\"comment\"> * @bus: the target MII bus</span>", 
"<span class=\"comment\"> * @addr: PHY address on the MII bus</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Reads the ID registers of the PHY at @addr on the</span>", 
"<span class=\"comment\"> *   @bus, then allocates and returns the phy_device to represent it.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#phy_device\">phy_device</a> * <a class=\"id\" href=\"#get_phy_device\">get_phy_device</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>, int <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phy_id\">phy_id</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#get_phy_id\">get_phy_id</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#phy_id\">phy_id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#r\">r</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the phy_id is mostly Fs, there is no device there */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#phy_id\">phy_id</a> &amp; 0x1fffffff) == 0x1fffffff)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#phy_device_create\">phy_device_create</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#phy_id\">phy_id</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_phy_device\">get_phy_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_device_register - Register the phy device on the MDIO bus</span>", 
"<span class=\"comment\"> * @phydev: phy_device structure to be added to the MDIO bus</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#phy_device_register\">phy_device_register</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't register a phy if one is already registered at this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * address */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#phy_map\">phy_map</a>[<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#addr\">addr</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#phy_map\">phy_map</a>[<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#addr\">addr</a>] = <a class=\"id\" href=\"#phydev\">phydev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Run all of the fixups for this PHY */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phy_scan_fixups\">phy_scan_fixups</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#device_register\">device_register</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"phy %d failed to register\\n\", <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#phy_map\">phy_map</a>[<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#addr\">addr</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_device_register\">phy_device_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_find_first - finds the first PHY device on the bus</span>", 
"<span class=\"comment\"> * @bus: the target MII bus</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phy_find_first\">phy_find_first</a>(struct <a class=\"id\" href=\"#mii_bus\">mii_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#addr\">addr</a> = 0; <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#PHY_MAX_ADDR\">PHY_MAX_ADDR</a>; <a class=\"id\" href=\"#addr\">addr</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#phy_map\">phy_map</a>[<a class=\"id\" href=\"#addr\">addr</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#phy_map\">phy_map</a>[<a class=\"id\" href=\"#addr\">addr</a>];", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_find_first\">phy_find_first</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_prepare_link - prepares the PHY layer to monitor link status</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> * @handler: callback function for link status change notifications</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Tells the PHY infrastructure to handle the</span>", 
"<span class=\"comment\"> *   gory details on monitoring link status (whether through</span>", 
"<span class=\"comment\"> *   polling or an interrupt), and to call back to the</span>", 
"<span class=\"comment\"> *   connected device driver when the link status changes.</span>", 
"<span class=\"comment\"> *   If you want to monitor your own link state, don't call</span>", 
"<span class=\"comment\"> *   this function.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#phy_prepare_link\">phy_prepare_link</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#handler\">handler</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#adjust_link\">adjust_link</a> = <a class=\"id\" href=\"#handler\">handler</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_connect_direct - connect an ethernet device to a specific phy_device</span>", 
"<span class=\"comment\"> * @dev: the network device to connect</span>", 
"<span class=\"comment\"> * @phydev: the pointer to the phy device</span>", 
"<span class=\"comment\"> * @handler: callback function for state change notifications</span>", 
"<span class=\"comment\"> * @flags: PHY device's dev_flags</span>", 
"<span class=\"comment\"> * @interface: PHY device's interface</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#phy_connect_direct\">phy_connect_direct</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       void (*<a class=\"id\" href=\"#handler\">handler</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *), <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#phy_interface_t\">phy_interface_t</a> <a class=\"id\" href=\"#interface\">interface</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#phy_attach_direct\">phy_attach_direct</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#interface\">interface</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phy_prepare_link\">phy_prepare_link</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#handler\">handler</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phy_start_machine\">phy_start_machine</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#irq\">irq</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phy_start_interrupts\">phy_start_interrupts</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_connect_direct\">phy_connect_direct</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_connect - connect an ethernet device to a PHY device</span>", 
"<span class=\"comment\"> * @dev: the network device to connect</span>", 
"<span class=\"comment\"> * @bus_id: the id string of the PHY device to connect</span>", 
"<span class=\"comment\"> * @handler: callback function for state change notifications</span>", 
"<span class=\"comment\"> * @flags: PHY device's dev_flags</span>", 
"<span class=\"comment\"> * @interface: PHY device's interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Convenience function for connecting ethernet</span>", 
"<span class=\"comment\"> *   devices to PHY devices.  The default behavior is for</span>", 
"<span class=\"comment\"> *   the PHY infrastructure to handle everything, and only notify</span>", 
"<span class=\"comment\"> *   the connected driver when the link status changes.  If you</span>", 
"<span class=\"comment\"> *   don't want, or can't use the provided functionality, you may</span>", 
"<span class=\"comment\"> *   choose to call only the subset of functions which provide</span>", 
"<span class=\"comment\"> *   the desired functionality.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#phy_device\">phy_device</a> * <a class=\"id\" href=\"#phy_connect\">phy_connect</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const char *<a class=\"id\" href=\"#bus_id\">bus_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#handler\">handler</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *), <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phy_interface_t\">phy_interface_t</a> <a class=\"id\" href=\"#interface\">interface</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Search the list of PHY devices on the mdio bus for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PHY with the requested name */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#bus_find_device_by_name\">bus_find_device_by_name</a>(&amp;<a class=\"id\" href=\"#mdio_bus_type\">mdio_bus_type</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#bus_id\">bus_id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#d\">d</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"PHY %s not found\\n\", <a class=\"id\" href=\"#bus_id\">bus_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENODEV\">ENODEV</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a> = <a class=\"id\" href=\"#to_phy_device\">to_phy_device</a>(<a class=\"id\" href=\"#d\">d</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#phy_connect_direct\">phy_connect_direct</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#handler\">handler</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#interface\">interface</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#rc\">rc</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#phydev\">phydev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_connect\">phy_connect</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_disconnect - disable interrupts, stop state machine, and detach a PHY device</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#phy_disconnect\">phy_disconnect</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#irq\">irq</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phy_stop_interrupts\">phy_stop_interrupts</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phy_stop_machine\">phy_stop_machine</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#adjust_link\">adjust_link</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phy_detach\">phy_detach</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_disconnect\">phy_disconnect</a>);", 
"", 
"int <a class=\"id\" href=\"#phy_init_hw\">phy_init_hw</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a> || !<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#config_init\">config_init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#phy_scan_fixups\">phy_scan_fixups</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#config_init\">config_init</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_attach_direct - attach a network device to a given PHY device pointer</span>", 
"<span class=\"comment\"> * @dev: network device to attach</span>", 
"<span class=\"comment\"> * @phydev: Pointer to phy_device to attach</span>", 
"<span class=\"comment\"> * @flags: PHY device's dev_flags</span>", 
"<span class=\"comment\"> * @interface: PHY device's interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Called by drivers to attach to a particular PHY</span>", 
"<span class=\"comment\"> *     device. The phy_device is found, and properly hooked up</span>", 
"<span class=\"comment\"> *     to the phy_driver.  If no driver is attached, then the</span>", 
"<span class=\"comment\"> *     genphy_driver is used.  The phy_device is given a ptr to</span>", 
"<span class=\"comment\"> *     the attaching device, and given a callback for link status</span>", 
"<span class=\"comment\"> *     change.  The phy_device is returned to the attaching driver.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#phy_attach_direct\">phy_attach_direct</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#phy_interface_t\">phy_interface_t</a> <a class=\"id\" href=\"#interface\">interface</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#d\">d</a> = &amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Assume that if there is no driver, that it doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * exist, and we should use the genphy driver. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#NULL\">NULL</a> == <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#driver\">driver</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#driver\">driver</a> = &amp;<a class=\"id\" href=\"#genphy_driver\">genphy_driver</a>.<a class=\"id\" href=\"#driver\">driver</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#probe\">probe</a>(<a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#device_bind_driver\">device_bind_driver</a>(<a class=\"id\" href=\"#d\">d</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#attached_dev\">attached_dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"PHY already attached\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#attached_dev\">attached_dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#phydev\">phydev</a> = <a class=\"id\" href=\"#phydev\">phydev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#interface\">interface</a> = <a class=\"id\" href=\"#interface\">interface</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PHY_READY\">PHY_READY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do initial configuration here, now that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we have certain key parameters</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (dev_flags and interface) */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#phy_init_hw\">phy_init_hw</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_attach_direct\">phy_attach_direct</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_attach - attach a network device to a particular PHY device</span>", 
"<span class=\"comment\"> * @dev: network device to attach</span>", 
"<span class=\"comment\"> * @bus_id: Bus ID of PHY device to attach</span>", 
"<span class=\"comment\"> * @flags: PHY device's dev_flags</span>", 
"<span class=\"comment\"> * @interface: PHY device's interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Same as phy_attach_direct() except that a PHY bus_id</span>", 
"<span class=\"comment\"> *     string is passed instead of a pointer to a struct phy_device.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phy_attach\">phy_attach</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#bus_id\">bus_id</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#phy_interface_t\">phy_interface_t</a> <a class=\"id\" href=\"#interface\">interface</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bus_type\">bus_type</a> *<a class=\"id\" href=\"#bus\">bus</a> = &amp;<a class=\"id\" href=\"#mdio_bus_type\">mdio_bus_type</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Search the list of PHY devices on the mdio bus for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PHY with the requested name */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#bus_find_device_by_name\">bus_find_device_by_name</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#bus_id\">bus_id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#d\">d</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"PHY %s not found\\n\", <a class=\"id\" href=\"#bus_id\">bus_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENODEV\">ENODEV</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a> = <a class=\"id\" href=\"#to_phy_device\">to_phy_device</a>(<a class=\"id\" href=\"#d\">d</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#phy_attach_direct\">phy_attach_direct</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#interface\">interface</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#rc\">rc</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#phydev\">phydev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_attach\">phy_attach</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_detach - detach a PHY device from its network device</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#phy_detach\">phy_detach</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#attached_dev\">attached_dev</a>-><a class=\"id\" href=\"#phydev\">phydev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#attached_dev\">attached_dev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the device had no specific driver before (i.e. - it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * was using the generic driver), we unbind the device</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from the generic driver so that there's a chance a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * real driver could be loaded */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#driver\">driver</a> == &amp;<a class=\"id\" href=\"#genphy_driver\">genphy_driver</a>.<a class=\"id\" href=\"#driver\">driver</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_release_driver\">device_release_driver</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_detach\">phy_detach</a>);", 
"", 
"", 
"<span class=\"comment\">/* Generic PHY support and helper functions */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * genphy_config_advert - sanitize and advertise auto-negotation parameters</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Writes MII_ADVERTISE with the appropriate values,</span>", 
"<span class=\"comment\"> *   after sanitizing the values to make sure we only advertise</span>", 
"<span class=\"comment\"> *   what is supported.  Returns &lt; 0 on error, 0 if the PHY's advertisement</span>", 
"<span class=\"comment\"> *   hasn't changed, and &gt; 0 if it has changed.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#genphy_config_advert\">genphy_config_advert</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#advertise\">advertise</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#oldadv\">oldadv</a>, <a class=\"id\" href=\"#adv\">adv</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#changed\">changed</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only allow advertising what</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this PHY supports */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#advertising\">advertising</a> &= <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#supported\">supported</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#advertise\">advertise</a> = <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#advertising\">advertising</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Setup standard advertisement */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldadv\">oldadv</a> = <a class=\"id\" href=\"#adv\">adv</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_ADVERTISE\">MII_ADVERTISE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#adv\">adv</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#adv\">adv</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#adv\">adv</a> &= ~(<a class=\"id\" href=\"#ADVERTISE_ALL\">ADVERTISE_ALL</a> | <a class=\"id\" href=\"#ADVERTISE_100BASE4\">ADVERTISE_100BASE4</a> | <a class=\"id\" href=\"#ADVERTISE_PAUSE_CAP\">ADVERTISE_PAUSE_CAP</a> | ", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ADVERTISE_PAUSE_ASYM\">ADVERTISE_PAUSE_ASYM</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#advertise\">advertise</a> &amp; <a class=\"id\" href=\"#ADVERTISED_10baseT_Half\">ADVERTISED_10baseT_Half</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adv\">adv</a> |= <a class=\"id\" href=\"#ADVERTISE_10HALF\">ADVERTISE_10HALF</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#advertise\">advertise</a> &amp; <a class=\"id\" href=\"#ADVERTISED_10baseT_Full\">ADVERTISED_10baseT_Full</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adv\">adv</a> |= <a class=\"id\" href=\"#ADVERTISE_10FULL\">ADVERTISE_10FULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#advertise\">advertise</a> &amp; <a class=\"id\" href=\"#ADVERTISED_100baseT_Half\">ADVERTISED_100baseT_Half</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adv\">adv</a> |= <a class=\"id\" href=\"#ADVERTISE_100HALF\">ADVERTISE_100HALF</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#advertise\">advertise</a> &amp; <a class=\"id\" href=\"#ADVERTISED_100baseT_Full\">ADVERTISED_100baseT_Full</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adv\">adv</a> |= <a class=\"id\" href=\"#ADVERTISE_100FULL\">ADVERTISE_100FULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#advertise\">advertise</a> &amp; <a class=\"id\" href=\"#ADVERTISED_Pause\">ADVERTISED_Pause</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adv\">adv</a> |= <a class=\"id\" href=\"#ADVERTISE_PAUSE_CAP\">ADVERTISE_PAUSE_CAP</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#advertise\">advertise</a> &amp; <a class=\"id\" href=\"#ADVERTISED_Asym_Pause\">ADVERTISED_Asym_Pause</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adv\">adv</a> |= <a class=\"id\" href=\"#ADVERTISE_PAUSE_ASYM\">ADVERTISE_PAUSE_ASYM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#adv\">adv</a> != <a class=\"id\" href=\"#oldadv\">oldadv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#phy_write\">phy_write</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_ADVERTISE\">MII_ADVERTISE</a>, <a class=\"id\" href=\"#adv\">adv</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changed\">changed</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Configure gigabit if it's supported */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#supported\">supported</a> &amp; (<a class=\"id\" href=\"#SUPPORTED_1000baseT_Half\">SUPPORTED_1000baseT_Half</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SUPPORTED_1000baseT_Full\">SUPPORTED_1000baseT_Full</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oldadv\">oldadv</a> = <a class=\"id\" href=\"#adv\">adv</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_CTRL1000\">MII_CTRL1000</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#adv\">adv</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#adv\">adv</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adv\">adv</a> &= ~(<a class=\"id\" href=\"#ADVERTISE_1000FULL\">ADVERTISE_1000FULL</a> | <a class=\"id\" href=\"#ADVERTISE_1000HALF\">ADVERTISE_1000HALF</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#advertise\">advertise</a> &amp; <a class=\"id\" href=\"#SUPPORTED_1000baseT_Half\">SUPPORTED_1000baseT_Half</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adv\">adv</a> |= <a class=\"id\" href=\"#ADVERTISE_1000HALF\">ADVERTISE_1000HALF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#advertise\">advertise</a> &amp; <a class=\"id\" href=\"#SUPPORTED_1000baseT_Full\">SUPPORTED_1000baseT_Full</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adv\">adv</a> |= <a class=\"id\" href=\"#ADVERTISE_1000FULL\">ADVERTISE_1000FULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#adv\">adv</a> != <a class=\"id\" href=\"#oldadv\">oldadv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#phy_write\">phy_write</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_CTRL1000\">MII_CTRL1000</a>, <a class=\"id\" href=\"#adv\">adv</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changed\">changed</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#changed\">changed</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#genphy_config_advert\">genphy_config_advert</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * genphy_setup_forced - configures/forces speed/duplex from @phydev</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Configures MII_BMCR to force speed/duplex</span>", 
"<span class=\"comment\"> *   to the values in phydev. Assumes that the values are valid.</span>", 
"<span class=\"comment\"> *   Please see phy_sanitize_settings().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#genphy_setup_forced\">genphy_setup_forced</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ctl\">ctl</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#pause\">pause</a> = <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#asym_pause\">asym_pause</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#SPEED_1000\">SPEED_1000</a> == <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctl\">ctl</a> |= <a class=\"id\" href=\"#BMCR_SPEED1000\">BMCR_SPEED1000</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#SPEED_100\">SPEED_100</a> == <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctl\">ctl</a> |= <a class=\"id\" href=\"#BMCR_SPEED100\">BMCR_SPEED100</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#DUPLEX_FULL\">DUPLEX_FULL</a> == <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctl\">ctl</a> |= <a class=\"id\" href=\"#BMCR_FULLDPLX\">BMCR_FULLDPLX</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#phy_write\">phy_write</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_BMCR\">MII_BMCR</a>, <a class=\"id\" href=\"#ctl\">ctl</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * genphy_restart_aneg - Enable and Restart Autonegotiation</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#genphy_restart_aneg\">genphy_restart_aneg</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ctl\">ctl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctl\">ctl</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_BMCR\">MII_BMCR</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctl\">ctl</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ctl\">ctl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctl\">ctl</a> |= (<a class=\"id\" href=\"#BMCR_ANENABLE\">BMCR_ANENABLE</a> | <a class=\"id\" href=\"#BMCR_ANRESTART\">BMCR_ANRESTART</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't isolate the PHY if we're negotiating */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctl\">ctl</a> &= ~(<a class=\"id\" href=\"#BMCR_ISOLATE\">BMCR_ISOLATE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctl\">ctl</a> = <a class=\"id\" href=\"#phy_write\">phy_write</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_BMCR\">MII_BMCR</a>, <a class=\"id\" href=\"#ctl\">ctl</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ctl\">ctl</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#genphy_restart_aneg\">genphy_restart_aneg</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * genphy_config_aneg - restart auto-negotiation or write BMCR</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: If auto-negotiation is enabled, we configure the</span>", 
"<span class=\"comment\"> *   advertising, and then restart auto-negotiation.  If it is not</span>", 
"<span class=\"comment\"> *   enabled, then we write the BMCR.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#genphy_config_aneg\">genphy_config_aneg</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#AUTONEG_ENABLE\">AUTONEG_ENABLE</a> != <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#genphy_setup_forced\">genphy_setup_forced</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#genphy_config_advert\">genphy_config_advert</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> &lt; 0) <span class=\"comment\">/* error */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Advertisment hasn't changed, but maybe aneg was never on to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * begin with?  Or maybe phy was isolated? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ctl\">ctl</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_BMCR\">MII_BMCR</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ctl\">ctl</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ctl\">ctl</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ctl\">ctl</a> &amp; <a class=\"id\" href=\"#BMCR_ANENABLE\">BMCR_ANENABLE</a>) || (<a class=\"id\" href=\"#ctl\">ctl</a> &amp; <a class=\"id\" href=\"#BMCR_ISOLATE\">BMCR_ISOLATE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = 1; <span class=\"comment\">/* do restart aneg */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only restart aneg if we are advertising something different</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * than we were before.<span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#genphy_restart_aneg\">genphy_restart_aneg</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#genphy_config_aneg\">genphy_config_aneg</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * genphy_update_link - update link status in @phydev</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Update the value in phydev-&gt;link to reflect the</span>", 
"<span class=\"comment\"> *   current link value.  In order to do this, we need to read</span>", 
"<span class=\"comment\"> *   the status register twice, keeping the second value.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#genphy_update_link\">genphy_update_link</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do a fake read */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_BMSR\">MII_BMSR</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Read link and autonegotiation status */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_BMSR\">MII_BMSR</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#BMSR_LSTATUS\">BMSR_LSTATUS</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#link\">link</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#link\">link</a> = 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#genphy_update_link\">genphy_update_link</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * genphy_read_status - check the link status and update current link state</span>", 
"<span class=\"comment\"> * @phydev: target phy_device struct</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Check the link, then figure out the current state</span>", 
"<span class=\"comment\"> *   by comparing what we advertise with what the link partner</span>", 
"<span class=\"comment\"> *   advertises.  Start by checking the gigabit possibilities,</span>", 
"<span class=\"comment\"> *   then move on to 10/100.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#genphy_read_status\">genphy_read_status</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#adv\">adv</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lpa\">lpa</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lpagb\">lpagb</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update the link, but return if there</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * was an error */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#genphy_update_link\">genphy_update_link</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#AUTONEG_ENABLE\">AUTONEG_ENABLE</a> == <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#autoneg\">autoneg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#supported\">supported</a> &amp; (<a class=\"id\" href=\"#SUPPORTED_1000baseT_Half\">SUPPORTED_1000baseT_Half</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>| <a class=\"id\" href=\"#SUPPORTED_1000baseT_Full\">SUPPORTED_1000baseT_Full</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lpagb\">lpagb</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_STAT1000\">MII_STAT1000</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lpagb\">lpagb</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#lpagb\">lpagb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adv\">adv</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_CTRL1000\">MII_CTRL1000</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#adv\">adv</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#adv\">adv</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lpagb\">lpagb</a> &= <a class=\"id\" href=\"#adv\">adv</a> << 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lpa\">lpa</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_LPA\">MII_LPA</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lpa\">lpa</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#lpa\">lpa</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#adv\">adv</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_ADVERTISE\">MII_ADVERTISE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#adv\">adv</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#adv\">adv</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lpa\">lpa</a> &= <a class=\"id\" href=\"#adv\">adv</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#SPEED_10\">SPEED_10</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#DUPLEX_HALF\">DUPLEX_HALF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#pause\">pause</a> = <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#asym_pause\">asym_pause</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lpagb\">lpagb</a> &amp; (<a class=\"id\" href=\"#LPA_1000FULL\">LPA_1000FULL</a> | <a class=\"id\" href=\"#LPA_1000HALF\">LPA_1000HALF</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#SPEED_1000\">SPEED_1000</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lpagb\">lpagb</a> &amp; <a class=\"id\" href=\"#LPA_1000FULL\">LPA_1000FULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#DUPLEX_FULL\">DUPLEX_FULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#lpa\">lpa</a> &amp; (<a class=\"id\" href=\"#LPA_100FULL\">LPA_100FULL</a> | <a class=\"id\" href=\"#LPA_100HALF\">LPA_100HALF</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#SPEED_100\">SPEED_100</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lpa\">lpa</a> &amp; <a class=\"id\" href=\"#LPA_100FULL\">LPA_100FULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#DUPLEX_FULL\">DUPLEX_FULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lpa\">lpa</a> &amp; <a class=\"id\" href=\"#LPA_10FULL\">LPA_10FULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#DUPLEX_FULL\">DUPLEX_FULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a> == <a class=\"id\" href=\"#DUPLEX_FULL\">DUPLEX_FULL</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#pause\">pause</a> = <a class=\"id\" href=\"#lpa\">lpa</a> &amp; <a class=\"id\" href=\"#LPA_PAUSE_CAP\">LPA_PAUSE_CAP</a> ? 1 : 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#asym_pause\">asym_pause</a> = <a class=\"id\" href=\"#lpa\">lpa</a> &amp; <a class=\"id\" href=\"#LPA_PAUSE_ASYM\">LPA_PAUSE_ASYM</a> ? 1 : 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#bmcr\">bmcr</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_BMCR\">MII_BMCR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bmcr\">bmcr</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bmcr\">bmcr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bmcr\">bmcr</a> &amp; <a class=\"id\" href=\"#BMCR_FULLDPLX\">BMCR_FULLDPLX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#DUPLEX_FULL\">DUPLEX_FULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#duplex\">duplex</a> = <a class=\"id\" href=\"#DUPLEX_HALF\">DUPLEX_HALF</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bmcr\">bmcr</a> &amp; <a class=\"id\" href=\"#BMCR_SPEED1000\">BMCR_SPEED1000</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#SPEED_1000\">SPEED_1000</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#bmcr\">bmcr</a> &amp; <a class=\"id\" href=\"#BMCR_SPEED100\">BMCR_SPEED100</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#SPEED_100\">SPEED_100</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#speed\">speed</a> = <a class=\"id\" href=\"#SPEED_10\">SPEED_10</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#pause\">pause</a> = <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#asym_pause\">asym_pause</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#genphy_read_status\">genphy_read_status</a>);", 
"", 
"static int <a class=\"id\" href=\"#genphy_config_init\">genphy_config_init</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#features\">features</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* For now, I'll claim that the generic driver supports</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all possible port types */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#features\">features</a> = (<a class=\"id\" href=\"#SUPPORTED_TP\">SUPPORTED_TP</a> | <a class=\"id\" href=\"#SUPPORTED_MII\">SUPPORTED_MII</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>| <a class=\"id\" href=\"#SUPPORTED_AUI\">SUPPORTED_AUI</a> | <a class=\"id\" href=\"#SUPPORTED_FIBRE\">SUPPORTED_FIBRE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SUPPORTED_BNC\">SUPPORTED_BNC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do we support autonegotiation? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_BMSR\">MII_BMSR</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#BMSR_ANEGCAPABLE\">BMSR_ANEGCAPABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#features\">features</a> |= <a class=\"id\" href=\"#SUPPORTED_Autoneg\">SUPPORTED_Autoneg</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#BMSR_100FULL\">BMSR_100FULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#features\">features</a> |= <a class=\"id\" href=\"#SUPPORTED_100baseT_Full\">SUPPORTED_100baseT_Full</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#BMSR_100HALF\">BMSR_100HALF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#features\">features</a> |= <a class=\"id\" href=\"#SUPPORTED_100baseT_Half\">SUPPORTED_100baseT_Half</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#BMSR_10FULL\">BMSR_10FULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#features\">features</a> |= <a class=\"id\" href=\"#SUPPORTED_10baseT_Full\">SUPPORTED_10baseT_Full</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#BMSR_10HALF\">BMSR_10HALF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#features\">features</a> |= <a class=\"id\" href=\"#SUPPORTED_10baseT_Half\">SUPPORTED_10baseT_Half</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#BMSR_ESTATEN\">BMSR_ESTATEN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_ESTATUS\">MII_ESTATUS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#ESTATUS_1000_TFULL\">ESTATUS_1000_TFULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#features\">features</a> |= <a class=\"id\" href=\"#SUPPORTED_1000baseT_Full\">SUPPORTED_1000baseT_Full</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#ESTATUS_1000_THALF\">ESTATUS_1000_THALF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#features\">features</a> |= <a class=\"id\" href=\"#SUPPORTED_1000baseT_Half\">SUPPORTED_1000baseT_Half</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#supported\">supported</a> = <a class=\"id\" href=\"#features\">features</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#advertising\">advertising</a> = <a class=\"id\" href=\"#features\">features</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"int <a class=\"id\" href=\"#genphy_suspend\">genphy_suspend</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_BMCR\">MII_BMCR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phy_write\">phy_write</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_BMCR\">MII_BMCR</a>, (<a class=\"id\" href=\"#value\">value</a> | <a class=\"id\" href=\"#BMCR_PDOWN\">BMCR_PDOWN</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#genphy_suspend\">genphy_suspend</a>);", 
"", 
"int <a class=\"id\" href=\"#genphy_resume\">genphy_resume</a>(struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#phy_read\">phy_read</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_BMCR\">MII_BMCR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phy_write\">phy_write</a>(<a class=\"id\" href=\"#phydev\">phydev</a>, <a class=\"id\" href=\"#MII_BMCR\">MII_BMCR</a>, (<a class=\"id\" href=\"#value\">value</a> &amp; ~<a class=\"id\" href=\"#BMCR_PDOWN\">BMCR_PDOWN</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#genphy_resume\">genphy_resume</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_probe - probe and init a PHY device</span>", 
"<span class=\"comment\"> * @dev: device to probe and init</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Take care of setting up the phy_device structure,</span>", 
"<span class=\"comment\"> *   set the state to READY (the driver's init function should</span>", 
"<span class=\"comment\"> *   set it to STARTING if needed).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#phy_probe\">phy_probe</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#phy_driver\">phy_driver</a> *<a class=\"id\" href=\"#phydrv\">phydrv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a> = <a class=\"id\" href=\"#to_phy_device\">to_phy_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure the driver is held.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX -- Is this correct? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#get_driver\">get_driver</a>(<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydrv\">phydrv</a> = <a class=\"id\" href=\"#to_phy_driver\">to_phy_driver</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#phydrv\">phydrv</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Disable the interrupt if the PHY doesn't support it */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#phydrv\">phydrv</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PHY_HAS_INTERRUPT\">PHY_HAS_INTERRUPT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#PHY_POLL\">PHY_POLL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Start out supporting everything. Eventually,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a controller will attach, and may modify one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or both of these values */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#supported\">supported</a> = <a class=\"id\" href=\"#phydrv\">phydrv</a>-><a class=\"id\" href=\"#features\">features</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#advertising\">advertising</a> = <a class=\"id\" href=\"#phydrv\">phydrv</a>-><a class=\"id\" href=\"#features\">features</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the state to READY by default */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PHY_READY\">PHY_READY</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#probe\">probe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#probe\">probe</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"}", 
"", 
"static int <a class=\"id\" href=\"#phy_remove\">phy_remove</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#phy_device\">phy_device</a> *<a class=\"id\" href=\"#phydev\">phydev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a> = <a class=\"id\" href=\"#to_phy_device\">to_phy_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PHY_DOWN\">PHY_DOWN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#remove\">remove</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#remove\">remove</a>(<a class=\"id\" href=\"#phydev\">phydev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_driver\">put_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phydev\">phydev</a>-><a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * phy_driver_register - register a phy_driver with the PHY layer</span>", 
"<span class=\"comment\"> * @new_driver: new phy_driver to register</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#phy_driver_register\">phy_driver_register</a>(struct <a class=\"id\" href=\"#phy_driver\">phy_driver</a> *<a class=\"id\" href=\"#new_driver\">new_driver</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_driver\">new_driver</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#new_driver\">new_driver</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_driver\">new_driver</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#bus\">bus</a> = &amp;<a class=\"id\" href=\"#mdio_bus_type\">mdio_bus_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_driver\">new_driver</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#probe\">probe</a> = <a class=\"id\" href=\"#phy_probe\">phy_probe</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_driver\">new_driver</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#remove\">remove</a> = <a class=\"id\" href=\"#phy_remove\">phy_remove</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#driver_register\">driver_register</a>(&amp;<a class=\"id\" href=\"#new_driver\">new_driver</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: Error %d in registering driver\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_driver\">new_driver</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#retval\">retval</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: Registered new driver\\n\", <a class=\"id\" href=\"#new_driver\">new_driver</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_driver_register\">phy_driver_register</a>);", 
"", 
"void <a class=\"id\" href=\"#phy_driver_unregister\">phy_driver_unregister</a>(struct <a class=\"id\" href=\"#phy_driver\">phy_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver_unregister\">driver_unregister</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#phy_driver_unregister\">phy_driver_unregister</a>);", 
"", 
"static struct <a class=\"id\" href=\"#phy_driver\">phy_driver</a> <a class=\"id\" href=\"#genphy_driver\">genphy_driver</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#phy_id\">phy_id</a><span class=\"ts\"/><span class=\"ts\"/>= 0xffffffff,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#phy_id_mask\">phy_id_mask</a><span class=\"ts\"/>= 0xffffffff,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"Generic PHY\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#config_init\">config_init</a><span class=\"ts\"/>= <a class=\"id\" href=\"#genphy_config_init\">genphy_config_init</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#features\">features</a><span class=\"ts\"/>= 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#config_aneg\">config_aneg</a><span class=\"ts\"/>= <a class=\"id\" href=\"#genphy_config_aneg\">genphy_config_aneg</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read_status\">read_status</a><span class=\"ts\"/>= <a class=\"id\" href=\"#genphy_read_status\">genphy_read_status</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#suspend\">suspend</a><span class=\"ts\"/>= <a class=\"id\" href=\"#genphy_suspend\">genphy_suspend</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#resume\">resume</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#genphy_resume\">genphy_resume</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#driver\">driver</a><span class=\"ts\"/><span class=\"ts\"/>= {.<a class=\"id\" href=\"#owner\">owner</a>= <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>, },", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#phy_init\">phy_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#mdio_bus_init\">mdio_bus_init</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#phy_driver_register\">phy_driver_register</a>(&amp;<a class=\"id\" href=\"#genphy_driver\">genphy_driver</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdio_bus_exit\">mdio_bus_exit</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#phy_exit\">phy_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phy_driver_unregister\">phy_driver_unregister</a>(&amp;<a class=\"id\" href=\"#genphy_driver\">genphy_driver</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdio_bus_exit\">mdio_bus_exit</a>();", 
"}", 
"", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#phy_init\">phy_init</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#phy_exit\">phy_exit</a>);", 
];
xr_frag_insert('l/ab/ce2d74efa028b7c82854910db5e6763490f218.xr', __xr_tmp);
