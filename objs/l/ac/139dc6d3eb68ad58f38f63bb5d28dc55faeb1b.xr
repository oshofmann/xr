var __xr_tmp = [
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: Snd Bus RST\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__func__\">__func__</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#eh_bus_reset_handler\">eh_bus_reset_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#eh_bus_reset_handler\">eh_bus_reset_handler</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#skip_settle_delay\">skip_settle_delay</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ssleep\">ssleep</a>(<a class=\"id\" href=\"#BUS_RESET_SETTLE_TIME\">BUS_RESET_SETTLE_TIME</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_report_bus_reset\">scsi_report_bus_reset</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#scmd_channel\">scmd_channel</a>(<a class=\"id\" href=\"#scmd\">scmd</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__scsi_report_device_reset\">__scsi_report_device_reset</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#was_reset\">was_reset</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#expecting_cc_ua\">expecting_cc_ua</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_try_target_reset - Ask host to perform a target reset</span>", 
"<span class=\"comment\"> * @scmd:<span class=\"ts\"/>SCSI cmd used to send a target reset</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    There is no timeout for this operation.  if this operation is</span>", 
"<span class=\"comment\"> *    unreliable for a given host, then the host itself needs to put a</span>", 
"<span class=\"comment\"> *    timer on it, and set the host back to a consistent state prior to</span>", 
"<span class=\"comment\"> *    returning.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_try_target_reset\">scsi_try_target_reset</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#eh_target_reset_handler\">eh_target_reset_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#eh_target_reset_handler\">eh_target_reset_handler</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__starget_for_each_device\">__starget_for_each_device</a>(<a class=\"id\" href=\"#scsi_target\">scsi_target</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>), <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__scsi_report_device_reset\">__scsi_report_device_reset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_try_bus_device_reset - Ask host to perform a BDR on a dev</span>", 
"<span class=\"comment\"> * @scmd:<span class=\"ts\"/>SCSI cmd used to send BDR</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    There is no timeout for this operation.  if this operation is</span>", 
"<span class=\"comment\"> *    unreliable for a given host, then the host itself needs to put a</span>", 
"<span class=\"comment\"> *    timer on it, and set the host back to a consistent state prior to</span>", 
"<span class=\"comment\"> *    returning.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_try_bus_device_reset\">scsi_try_bus_device_reset</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#eh_device_reset_handler\">eh_device_reset_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#eh_device_reset_handler\">eh_device_reset_handler</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__scsi_report_device_reset\">__scsi_report_device_reset</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__scsi_try_to_abort_cmd\">__scsi_try_to_abort_cmd</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#eh_abort_handler\">eh_abort_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#eh_abort_handler\">eh_abort_handler</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_try_to_abort_cmd - Ask host to abort a running command.</span>", 
"<span class=\"comment\"> * @scmd:<span class=\"ts\"/>SCSI cmd to abort from Lower Level.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    This function will not return until the user's completion function</span>", 
"<span class=\"comment\"> *    has been called.  there is no timeout on this operation.  if the</span>", 
"<span class=\"comment\"> *    author of the low-level driver wishes this operation to be timed,</span>", 
"<span class=\"comment\"> *    they can provide this facility themselves.  helper functions in</span>", 
"<span class=\"comment\"> *    scsi_error.c can be supplied to make this easier to do.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_try_to_abort_cmd\">scsi_try_to_abort_cmd</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scsi_done was called just after the command timed out and before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we had a chance to process it. (db)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#serial_number\">serial_number</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__scsi_try_to_abort_cmd\">__scsi_try_to_abort_cmd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#scsi_abort_eh_cmnd\">scsi_abort_eh_cmnd</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__scsi_try_to_abort_cmd\">__scsi_try_to_abort_cmd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>) != <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_try_bus_device_reset\">scsi_try_bus_device_reset</a>(<a class=\"id\" href=\"#scmd\">scmd</a>) != <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_try_target_reset\">scsi_try_target_reset</a>(<a class=\"id\" href=\"#scmd\">scmd</a>) != <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_try_bus_reset\">scsi_try_bus_reset</a>(<a class=\"id\" href=\"#scmd\">scmd</a>) != <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_try_host_reset\">scsi_try_host_reset</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_prep_cmnd  - Save a scsi command info as part of error recory</span>", 
"<span class=\"comment\"> * @scmd:       SCSI command structure to hijack</span>", 
"<span class=\"comment\"> * @ses:        structure to save restore information</span>", 
"<span class=\"comment\"> * @cmnd:       CDB to send. Can be NULL if no new cmnd is needed</span>", 
"<span class=\"comment\"> * @cmnd_size:  size in bytes of @cmnd (must be &lt;= BLK_MAX_CDB)</span>", 
"<span class=\"comment\"> * @sense_bytes: size of sense data to copy. or 0 (if != 0 @cmnd is ignored)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is used to save a scsi command information before re-execution</span>", 
"<span class=\"comment\"> * as part of the error recovery process.  If @sense_bytes is 0 the command</span>", 
"<span class=\"comment\"> * sent must be one that does not transfer any data.  If @sense_bytes != 0</span>", 
"<span class=\"comment\"> * @cmnd is ignored and this functions sets up a REQUEST_SENSE command</span>", 
"<span class=\"comment\"> * and cmnd buffers to read @sense_bytes into @scmd-&gt;sense_buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_eh_prep_cmnd\">scsi_eh_prep_cmnd</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>, struct <a class=\"id\" href=\"#scsi_eh_save\">scsi_eh_save</a> *<a class=\"id\" href=\"#ses\">ses</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#cmnd\">cmnd</a>, int <a class=\"id\" href=\"#cmnd_size\">cmnd_size</a>, unsigned <a class=\"id\" href=\"#sense_bytes\">sense_bytes</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need saved copies of a number of fields - this is because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * error handling may need to overwrite these with different values</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to run different commands, and once error handling is complete,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we will need to restore these values prior to running the actual</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * command.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#data_direction\">data_direction</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sc_data_direction\">sc_data_direction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#sdb\">sdb</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#underflow\">underflow</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#underflow\">underflow</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#prot_op\">prot_op</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#prot_op\">prot_op</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#prot_op\">prot_op</a> = <a class=\"id\" href=\"#SCSI_PROT_NORMAL\">SCSI_PROT_NORMAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a> = <a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#eh_cmnd\">eh_cmnd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>, 0, <a class=\"id\" href=\"#BLK_MAX_CDB\">BLK_MAX_CDB</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>, 0, sizeof(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sense_bytes\">sense_bytes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>.<a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned, <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sense_bytes\">sense_bytes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_init_one\">sg_init_one</a>(&amp;<a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#sense_sgl\">sense_sgl</a>, <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>.<a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>.<a class=\"id\" href=\"#table\">table</a>.<a class=\"id\" href=\"#sgl\">sgl</a> = &amp;<a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#sense_sgl\">sense_sgl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sc_data_direction\">sc_data_direction</a> = <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>.<a class=\"id\" href=\"#table\">table</a>.<a class=\"id\" href=\"#nents\">nents</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>[0] = <a class=\"id\" href=\"#REQUEST_SENSE\">REQUEST_SENSE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>[4] = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>.<a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> = <a class=\"id\" href=\"#COMMAND_SIZE\">COMMAND_SIZE</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>[0]);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sc_data_direction\">sc_data_direction</a> = <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmnd\">cmnd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cmnd_size\">cmnd_size</a> &gt; <a class=\"id\" href=\"#BLK_MAX_CDB\">BLK_MAX_CDB</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>, <a class=\"id\" href=\"#cmnd\">cmnd</a>, <a class=\"id\" href=\"#cmnd_size\">cmnd_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> = <a class=\"id\" href=\"#COMMAND_SIZE\">COMMAND_SIZE</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#underflow\">underflow</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> <= <a class=\"id\" href=\"#SCSI_2\">SCSI_2</a> && <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> != <a class=\"id\" href=\"#SCSI_UNKNOWN\">SCSI_UNKNOWN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>[1] = (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>[1] &amp; 0x1f) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#lun\">lun</a> << 5 &amp; 0xe0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Zero the sense buffer.  The scsi spec mandates that any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * untransferred sense data should be interpreted as being zero.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>, 0, <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_eh_prep_cmnd\">scsi_eh_prep_cmnd</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_restore_cmnd  - Restore a scsi command info as part of error recory</span>", 
"<span class=\"comment\"> * @scmd:       SCSI command structure to restore</span>", 
"<span class=\"comment\"> * @ses:        saved information from a coresponding call to scsi_eh_prep_cmnd</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Undo any damage done by above scsi_eh_prep_cmnd().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_eh_restore_cmnd\">scsi_eh_restore_cmnd</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a>* <a class=\"id\" href=\"#scmd\">scmd</a>, struct <a class=\"id\" href=\"#scsi_eh_save\">scsi_eh_save</a> *<a class=\"id\" href=\"#ses\">ses</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Restore original data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> = <a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a> = <a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sc_data_direction\">sc_data_direction</a> = <a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#data_direction\">data_direction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a> = <a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#sdb\">sdb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a> = <a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#underflow\">underflow</a> = <a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#underflow\">underflow</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#prot_op\">prot_op</a> = <a class=\"id\" href=\"#ses\">ses</a>-><a class=\"id\" href=\"#prot_op\">prot_op</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_eh_restore_cmnd\">scsi_eh_restore_cmnd</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_send_eh_cmnd  - submit a scsi command as part of error recory</span>", 
"<span class=\"comment\"> * @scmd:       SCSI command structure to hijack</span>", 
"<span class=\"comment\"> * @cmnd:       CDB to send</span>", 
"<span class=\"comment\"> * @cmnd_size:  size in bytes of @cmnd</span>", 
"<span class=\"comment\"> * @timeout:    timeout for this request</span>", 
"<span class=\"comment\"> * @sense_bytes: size of sense data to copy or 0</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is used to send a scsi command down to a target device</span>", 
"<span class=\"comment\"> * as part of the error recovery process. See also scsi_eh_prep_cmnd() above.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return value:</span>", 
"<span class=\"comment\"> *    SUCCESS or FAILED or NEEDS_RETRY</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_send_eh_cmnd\">scsi_send_eh_cmnd</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>, unsigned char *<a class=\"id\" href=\"#cmnd\">cmnd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#cmnd_size\">cmnd_size</a>, int <a class=\"id\" href=\"#timeout\">timeout</a>, unsigned <a class=\"id\" href=\"#sense_bytes\">sense_bytes</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_COMPLETION_ONSTACK\">DECLARE_COMPLETION_ONSTACK</a>(<a class=\"id\" href=\"#done\">done</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeleft\">timeleft</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_eh_save\">scsi_eh_save</a> <a class=\"id\" href=\"#ses\">ses</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_prep_cmnd\">scsi_eh_prep_cmnd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, &amp;<a class=\"id\" href=\"#ses\">ses</a>, <a class=\"id\" href=\"#cmnd\">cmnd</a>, <a class=\"id\" href=\"#cmnd_size\">cmnd_size</a>, <a class=\"id\" href=\"#sense_bytes\">sense_bytes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#eh_action\">eh_action</a> = &amp;<a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_log_send\">scsi_log_send</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#queuecommand\">queuecommand</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#scsi_eh_done\">scsi_eh_done</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timeleft\">timeleft</a> = <a class=\"id\" href=\"#wait_for_completion_timeout\">wait_for_completion_timeout</a>(&amp;<a class=\"id\" href=\"#done\">done</a>, <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#eh_action\">eh_action</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_log_completion\">scsi_log_completion</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s: scmd: %p, timeleft: %ld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#timeleft\">timeleft</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there is time left scsi_eh_done got called, and we will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * examine the actual status codes to see whether the command</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * actually did complete normally, else tell the host to forget</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * about this command.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timeleft\">timeleft</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_eh_completed_normally\">scsi_eh_completed_normally</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s: scsi_eh_completed_normally %x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#rtn\">rtn</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#rtn\">rtn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FAILED\">FAILED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ADD_TO_MLQUEUE\">ADD_TO_MLQUEUE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_abort_eh_cmnd\">scsi_abort_eh_cmnd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_restore_cmnd\">scsi_eh_restore_cmnd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, &amp;<a class=\"id\" href=\"#ses\">ses</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_request_sense - Request sense data from a particular target.</span>", 
"<span class=\"comment\"> * @scmd:<span class=\"ts\"/>SCSI cmd for request sense.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    Some hosts automatically obtain this information, others require</span>", 
"<span class=\"comment\"> *    that we obtain it on our own. This function will *not* return until</span>", 
"<span class=\"comment\"> *    the command either times out, or it completes.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_request_sense\">scsi_request_sense</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#scsi_send_eh_cmnd\">scsi_send_eh_cmnd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, <a class=\"id\" href=\"#SENSE_TIMEOUT\">SENSE_TIMEOUT</a>, ~0);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_finish_cmd - Handle a cmd that eh is finished with.</span>", 
"<span class=\"comment\"> * @scmd:<span class=\"ts\"/>Original SCSI cmd that eh has finished.</span>", 
"<span class=\"comment\"> * @done_q:<span class=\"ts\"/>Queue for processed commands.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    We don't want to use the normal command completion while we are are</span>", 
"<span class=\"comment\"> *    still handling errors - it may cause other commands to be queued,</span>", 
"<span class=\"comment\"> *    and that would disturb what we are doing.  Thus we really want to</span>", 
"<span class=\"comment\"> *    keep a list of pending commands for final completion, and once we</span>", 
"<span class=\"comment\"> *    are ready to leave error handling we handle completion for real.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_eh_finish_cmd\">scsi_eh_finish_cmd</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#done_q\">done_q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_failed\">host_failed</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#eh_eflags\">eh_eflags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#eh_entry\">eh_entry</a>, <a class=\"id\" href=\"#done_q\">done_q</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_eh_finish_cmd\">scsi_eh_finish_cmd</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_get_sense - Get device sense data.</span>", 
"<span class=\"comment\"> * @work_q:<span class=\"ts\"/>Queue of commands to process.</span>", 
"<span class=\"comment\"> * @done_q:<span class=\"ts\"/>Queue of processed commands.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    See if we need to request sense information.  if so, then get it</span>", 
"<span class=\"comment\"> *    now, so we have a better idea of what to do.  </span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    This has the unfortunate side effect that if a shost adapter does</span>", 
"<span class=\"comment\"> *    not automatically request sense information, we end up shutting</span>", 
"<span class=\"comment\"> *    it down before we request it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    All drivers should request sense information internally these days,</span>", 
"<span class=\"comment\"> *    so for now all I have to say is tough noogies if you end up in here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    XXX: Long term this code should go away, but that needs an audit of</span>", 
"<span class=\"comment\"> *         all LLDDs first.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_eh_get_sense\">scsi_eh_get_sense</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#work_q\">work_q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#done_q\">done_q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#eh_eflags\">eh_eflags</a> &amp; <a class=\"id\" href=\"#SCSI_EH_CANCEL_CMD\">SCSI_EH_CANCEL_CMD</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#SCSI_SENSE_VALID\">SCSI_SENSE_VALID</a>(<a class=\"id\" href=\"#scmd\">scmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(2, <a class=\"id\" href=\"#scmd_printk\">scmd_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#scmd\">scmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"%s: requesting sense\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_request_sense\">scsi_request_sense</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> != <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"sense requested for %p\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \" result %x\\n\", <a class=\"id\" href=\"#scmd\">scmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#scsi_print_sense\">scsi_print_sense</a>(\"bh\", <a class=\"id\" href=\"#scmd\">scmd</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_decide_disposition\">scsi_decide_disposition</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if the result was normal, then just pass it along to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * upper level.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we don't want this command reissued, just</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * finished with the sense data, so set</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * retries to the max allowed to ensure it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * won't get reissued */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#retries\">retries</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#allowed\">allowed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#rtn\">rtn</a> != <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_finish_cmd\">scsi_eh_finish_cmd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#done_q\">done_q</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#work_q\">work_q</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#scsi_eh_get_sense\">scsi_eh_get_sense</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_tur - Send TUR to device.</span>", 
"<span class=\"comment\"> * @scmd:<span class=\"ts\"/>&amp;scsi_cmnd to send TUR</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return value:</span>", 
"<span class=\"comment\"> *    0 - Device is ready. 1 - Device NOT ready.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_eh_tur\">scsi_eh_tur</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"<span class=\"ts\"/>static unsigned char <a class=\"id\" href=\"#tur_command\">tur_command</a>[6] = {<a class=\"id\" href=\"#TEST_UNIT_READY\">TEST_UNIT_READY</a>, 0, 0, 0, 0, 0};", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retry_cnt\">retry_cnt</a> = 1, <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"", 
"<a class=\"id\" href=\"#retry_tur\">retry_tur</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_send_eh_cmnd\">scsi_send_eh_cmnd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#tur_command\">tur_command</a>, 6, <a class=\"id\" href=\"#SENSE_TIMEOUT\">SENSE_TIMEOUT</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: scmd %p rtn %x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#rtn\">rtn</a>));", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#rtn\">rtn</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retry_cnt\">retry_cnt</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry_tur\">retry_tur</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*FALLTHRU*/</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_abort_cmds - abort pending commands.</span>", 
"<span class=\"comment\"> * @work_q:<span class=\"ts\"/>&amp;list_head for pending commands.</span>", 
"<span class=\"comment\"> * @done_q:<span class=\"ts\"/>&amp;list_head for processed commands.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Decription:</span>", 
"<span class=\"comment\"> *    Try and see whether or not it makes sense to try and abort the</span>", 
"<span class=\"comment\"> *    running command.  This only works out to be the case if we have one</span>", 
"<span class=\"comment\"> *    command that has timed out.  If the command simply failed, it makes</span>", 
"<span class=\"comment\"> *    no sense to try and abort the command, since as far as the shost</span>", 
"<span class=\"comment\"> *    adapter is concerned, it isn't running.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_eh_abort_cmds\">scsi_eh_abort_cmds</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#work_q\">work_q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#done_q\">done_q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#eh_eflags\">eh_eflags</a> &amp; <a class=\"id\" href=\"#SCSI_EH_CANCEL_CMD\">SCSI_EH_CANCEL_CMD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: aborting cmd:\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"0x%p\\n\", <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#scmd\">scmd</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_try_to_abort_cmd\">scsi_try_to_abort_cmd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a> || <a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#FAST_IO_FAIL\">FAST_IO_FAIL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#eh_eflags\">eh_eflags</a> &= ~<a class=\"id\" href=\"#SCSI_EH_CANCEL_CMD\">SCSI_EH_CANCEL_CMD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_device_online\">scsi_device_online</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#FAST_IO_FAIL\">FAST_IO_FAIL</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#scsi_eh_tur\">scsi_eh_tur</a>(<a class=\"id\" href=\"#scmd\">scmd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_finish_cmd\">scsi_eh_finish_cmd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#done_q\">done_q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: aborting\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \" cmd failed:\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"0x%p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#scmd\">scmd</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#work_q\">work_q</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_try_stu - Send START_UNIT to device.</span>", 
"<span class=\"comment\"> * @scmd:<span class=\"ts\"/>&amp;scsi_cmnd to send START_UNIT</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return value:</span>", 
"<span class=\"comment\"> *    0 - Device is ready. 1 - Device NOT ready.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_eh_try_stu\">scsi_eh_try_stu</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"<span class=\"ts\"/>static unsigned char <a class=\"id\" href=\"#stu_command\">stu_command</a>[6] = {<a class=\"id\" href=\"#START_STOP\">START_STOP</a>, 0, 0, 0, 1, 0};", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#allow_restart\">allow_restart</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a> && <a class=\"id\" href=\"#i\">i</a> &lt; 2; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_send_eh_cmnd\">scsi_send_eh_cmnd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#stu_command\">stu_command</a>, 6, <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>-><a class=\"id\" href=\"#rq_timeout\">rq_timeout</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
" <span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_stu - send START_UNIT if needed</span>", 
"<span class=\"comment\"> * @shost:<span class=\"ts\"/>&amp;scsi host being recovered.</span>", 
"<span class=\"comment\"> * @work_q:     &amp;list_head for pending commands.</span>", 
"<span class=\"comment\"> * @done_q:<span class=\"ts\"/>&amp;list_head for processed commands.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    If commands are failing due to not ready, initializing command required,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>try revalidating the device, which will end up sending a start unit. </span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_eh_stu\">scsi_eh_stu</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#work_q\">work_q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#done_q\">done_q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>, *<a class=\"id\" href=\"#stu_scmd\">stu_scmd</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost_for_each_device\">shost_for_each_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#shost\">shost</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stu_scmd\">stu_scmd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#sdev\">sdev</a> && <a class=\"id\" href=\"#SCSI_SENSE_VALID\">SCSI_SENSE_VALID</a>(<a class=\"id\" href=\"#scmd\">scmd</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#scsi_check_sense\">scsi_check_sense</a>(<a class=\"id\" href=\"#scmd\">scmd</a>) == <a class=\"id\" href=\"#FAILED\">FAILED</a> ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stu_scmd\">stu_scmd</a> = <a class=\"id\" href=\"#scmd\">scmd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#stu_scmd\">stu_scmd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: Sending START_UNIT to sdev:\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \" 0x%p\\n\", <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#sdev\">sdev</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_eh_try_stu\">scsi_eh_try_stu</a>(<a class=\"id\" href=\"#stu_scmd\">stu_scmd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_device_online\">scsi_device_online</a>(<a class=\"id\" href=\"#sdev\">sdev</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#scsi_eh_tur\">scsi_eh_tur</a>(<a class=\"id\" href=\"#stu_scmd\">stu_scmd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#sdev\">sdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_finish_cmd\">scsi_eh_finish_cmd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#done_q\">done_q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s: START_UNIT failed to sdev:\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \" 0x%p\\n\", <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#sdev\">sdev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#work_q\">work_q</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_bus_device_reset - send bdr if needed</span>", 
"<span class=\"comment\"> * @shost:<span class=\"ts\"/>scsi host being recovered.</span>", 
"<span class=\"comment\"> * @work_q:     &amp;list_head for pending commands.</span>", 
"<span class=\"comment\"> * @done_q:<span class=\"ts\"/>&amp;list_head for processed commands.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    Try a bus device reset.  Still, look to see whether we have multiple</span>", 
"<span class=\"comment\"> *    devices that are jammed or not - if we have multiple devices, it</span>", 
"<span class=\"comment\"> *    makes no sense to try bus_device_reset - we really would need to try</span>", 
"<span class=\"comment\"> *    a bus_reset instead. </span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_eh_bus_device_reset\">scsi_eh_bus_device_reset</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#work_q\">work_q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#done_q\">done_q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>, *<a class=\"id\" href=\"#bdr_scmd\">bdr_scmd</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost_for_each_device\">shost_for_each_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#shost\">shost</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdr_scmd\">bdr_scmd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#sdev\">sdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdr_scmd\">bdr_scmd</a> = <a class=\"id\" href=\"#scmd\">scmd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdr_scmd\">bdr_scmd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: Sending BDR sdev:\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \" 0x%p\\n\", <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sdev\">sdev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_try_bus_device_reset\">scsi_try_bus_device_reset</a>(<a class=\"id\" href=\"#bdr_scmd\">bdr_scmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a> || <a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#FAST_IO_FAIL\">FAST_IO_FAIL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_device_online\">scsi_device_online</a>(<a class=\"id\" href=\"#sdev\">sdev</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#FAST_IO_FAIL\">FAST_IO_FAIL</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#scsi_eh_tur\">scsi_eh_tur</a>(<a class=\"id\" href=\"#bdr_scmd\">bdr_scmd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#sdev\">sdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_finish_cmd\">scsi_eh_finish_cmd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#done_q\">done_q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: BDR\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \" failed sdev:\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"0x%p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sdev\">sdev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#work_q\">work_q</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_target_reset - send target reset if needed</span>", 
"<span class=\"comment\"> * @shost:<span class=\"ts\"/>scsi host being recovered.</span>", 
"<span class=\"comment\"> * @work_q:     &amp;list_head for pending commands.</span>", 
"<span class=\"comment\"> * @done_q:<span class=\"ts\"/>&amp;list_head for processed commands.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    Try a target reset.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_eh_target_reset\">scsi_eh_target_reset</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#work_q\">work_q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#done_q\">done_q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>, *<a class=\"id\" href=\"#tgtr_scmd\">tgtr_scmd</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#id\">id</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tgtr_scmd\">tgtr_scmd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> == <a class=\"id\" href=\"#scmd_id\">scmd_id</a>(<a class=\"id\" href=\"#scmd\">scmd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tgtr_scmd\">tgtr_scmd</a> = <a class=\"id\" href=\"#scmd\">scmd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tgtr_scmd\">tgtr_scmd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* not one exactly equal; find the next highest */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd_id\">scmd_id</a>(<a class=\"id\" href=\"#scmd\">scmd</a>) &gt; <a class=\"id\" href=\"#id\">id</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#tgtr_scmd\">tgtr_scmd</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#scmd_id\">scmd_id</a>(<a class=\"id\" href=\"#tgtr_scmd\">tgtr_scmd</a>) &gt; <a class=\"id\" href=\"#scmd_id\">scmd_id</a>(<a class=\"id\" href=\"#scmd\">scmd</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tgtr_scmd\">tgtr_scmd</a> = <a class=\"id\" href=\"#scmd\">scmd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tgtr_scmd\">tgtr_scmd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no more commands, that's it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: Sending target reset \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"to target %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#id\">id</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_try_target_reset\">scsi_try_target_reset</a>(<a class=\"id\" href=\"#tgtr_scmd\">tgtr_scmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a> || <a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#FAST_IO_FAIL\">FAST_IO_FAIL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> == <a class=\"id\" href=\"#scmd_id\">scmd_id</a>(<a class=\"id\" href=\"#scmd\">scmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_device_online\">scsi_device_online</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#FAST_IO_FAIL\">FAST_IO_FAIL</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#scsi_eh_tur\">scsi_eh_tur</a>(<a class=\"id\" href=\"#tgtr_scmd\">tgtr_scmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_finish_cmd\">scsi_eh_finish_cmd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#done_q\">done_q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: Target reset\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \" failed target: \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#id\">id</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>++;", 
"<span class=\"ts\"/>} while(<a class=\"id\" href=\"#id\">id</a> != 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#work_q\">work_q</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_bus_reset - send a bus reset </span>", 
"<span class=\"comment\"> * @shost:<span class=\"ts\"/>&amp;scsi host being recovered.</span>", 
"<span class=\"comment\"> * @work_q:     &amp;list_head for pending commands.</span>", 
"<span class=\"comment\"> * @done_q:<span class=\"ts\"/>&amp;list_head for processed commands.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_eh_bus_reset\">scsi_eh_bus_reset</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#work_q\">work_q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#done_q\">done_q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>, *<a class=\"id\" href=\"#chan_scmd\">chan_scmd</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#channel\">channel</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we really want to loop over the various channels, and do this on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a channel by channel basis.  we should also check to see if any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the failed commands are on soft_reset devices, and if so, skip</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the reset.  </span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#channel\">channel</a> = 0; <a class=\"id\" href=\"#channel\">channel</a> <= <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#max_channel\">max_channel</a>; <a class=\"id\" href=\"#channel\">channel</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan_scmd\">chan_scmd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#channel\">channel</a> == <a class=\"id\" href=\"#scmd_channel\">scmd_channel</a>(<a class=\"id\" href=\"#scmd\">scmd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan_scmd\">chan_scmd</a> = <a class=\"id\" href=\"#scmd\">scmd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * FIXME add back in some support for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * soft_reset devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#chan_scmd\">chan_scmd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: Sending BRST chan:\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \" %d\\n\", <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#channel\">channel</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_try_bus_reset\">scsi_try_bus_reset</a>(<a class=\"id\" href=\"#chan_scmd\">chan_scmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a> || <a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#FAST_IO_FAIL\">FAST_IO_FAIL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#channel\">channel</a> == <a class=\"id\" href=\"#scmd_channel\">scmd_channel</a>(<a class=\"id\" href=\"#scmd\">scmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_device_online\">scsi_device_online</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#FAST_IO_FAIL\">FAST_IO_FAIL</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#scsi_eh_tur\">scsi_eh_tur</a>(<a class=\"id\" href=\"#scmd\">scmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_finish_cmd\">scsi_eh_finish_cmd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#done_q\">done_q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: BRST\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \" failed chan: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#channel\">channel</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#work_q\">work_q</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_host_reset - send a host reset </span>", 
"<span class=\"comment\"> * @work_q:<span class=\"ts\"/>list_head for processed commands.</span>", 
"<span class=\"comment\"> * @done_q:<span class=\"ts\"/>list_head for processed commands.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#scsi_eh_host_reset\">scsi_eh_host_reset</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#work_q\">work_q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#done_q\">done_q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#work_q\">work_q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#work_q\">work_q</a>-><a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: Sending HRST\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  , <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_try_host_reset\">scsi_try_host_reset</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a> || <a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#FAST_IO_FAIL\">FAST_IO_FAIL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_device_online\">scsi_device_online</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#FAST_IO_FAIL\">FAST_IO_FAIL</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#scsi_eh_try_stu\">scsi_eh_try_stu</a>(<a class=\"id\" href=\"#scmd\">scmd</a>) && !<a class=\"id\" href=\"#scsi_eh_tur\">scsi_eh_tur</a>(<a class=\"id\" href=\"#scmd\">scmd</a>)) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#scsi_eh_tur\">scsi_eh_tur</a>(<a class=\"id\" href=\"#scmd\">scmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_finish_cmd\">scsi_eh_finish_cmd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#done_q\">done_q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: HRST\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \" failed\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#work_q\">work_q</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_offline_sdevs - offline scsi devices that fail to recover</span>", 
"<span class=\"comment\"> * @work_q:<span class=\"ts\"/>list_head for processed commands.</span>", 
"<span class=\"comment\"> * @done_q:<span class=\"ts\"/>list_head for processed commands.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_eh_offline_sdevs\">scsi_eh_offline_sdevs</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#work_q\">work_q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#done_q\">done_q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>, \"Device offlined - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"not ready after error recovery\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_device_set_state\">scsi_device_set_state</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#SDEV_OFFLINE\">SDEV_OFFLINE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#eh_eflags\">eh_eflags</a> &amp; <a class=\"id\" href=\"#SCSI_EH_CANCEL_CMD\">SCSI_EH_CANCEL_CMD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * FIXME: Handle lost cmds.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_finish_cmd\">scsi_eh_finish_cmd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#done_q\">done_q</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_noretry_cmd - determinte if command should be failed fast</span>", 
"<span class=\"comment\"> * @scmd:<span class=\"ts\"/>SCSI cmd to examine.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_noretry_cmd\">scsi_noretry_cmd</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#host_byte\">host_byte</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>)) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_OK\">DID_OK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_BUS_BUSY\">DID_BUS_BUSY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_FAILFAST_TRANSPORT\">REQ_FAILFAST_TRANSPORT</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_PARITY\">DID_PARITY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_FAILFAST_DEV\">REQ_FAILFAST_DEV</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_ERROR\">DID_ERROR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg_byte\">msg_byte</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>) == <a class=\"id\" href=\"#COMMAND_COMPLETE\">COMMAND_COMPLETE</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#status_byte\">status_byte</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>) == <a class=\"id\" href=\"#RESERVATION_CONFLICT\">RESERVATION_CONFLICT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_SOFT_ERROR\">DID_SOFT_ERROR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_FAILFAST_DRIVER\">REQ_FAILFAST_DRIVER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#status_byte\">status_byte</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>)) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CHECK_CONDITION\">CHECK_CONDITION</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * assume caller has checked sense and determinted</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the check condition was retryable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_FAILFAST_DEV\">REQ_FAILFAST_DEV</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> == <a class=\"id\" href=\"#REQ_TYPE_BLOCK_PC\">REQ_TYPE_BLOCK_PC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_decide_disposition - Disposition a cmd on return from LLD.</span>", 
"<span class=\"comment\"> * @scmd:<span class=\"ts\"/>SCSI cmd to examine.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    This is *only* called when we are examining the status after sending</span>", 
"<span class=\"comment\"> *    out the actual data command.  any commands that are queued for error</span>", 
"<span class=\"comment\"> *    recovery (e.g. test_unit_ready) do *not* come through here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    When this routine returns failed, it means the error handler thread</span>", 
"<span class=\"comment\"> *    is woken.  In cases where the error code indicates an error that</span>", 
"<span class=\"comment\"> *    doesn't require the error handler read (i.e. we don't need to</span>", 
"<span class=\"comment\"> *    abort/reset), this function should return SUCCESS.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_decide_disposition\">scsi_decide_disposition</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the device is offline, then we clearly just pass the result back</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * up to the top level.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_device_online\">scsi_device_online</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(5, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: device offline - report\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \" as SUCCESS\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__func__\">__func__</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * first check the host byte, to see if there is anything in there</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that would indicate what we need to do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#host_byte\">host_byte</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>)) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_PASSTHROUGH\">DID_PASSTHROUGH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * no matter what, pass this through to the upper layer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * nuke this special code so that it looks like we are saying</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * did_ok.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a> &= 0xff00ffff;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_OK\">DID_OK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * looks good.  drop through, and check the next byte.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_NO_CONNECT\">DID_NO_CONNECT</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_BAD_TARGET\">DID_BAD_TARGET</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_ABORT\">DID_ABORT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * note - this means that we just report the status back</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to the top level driver, not that we actually think</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that it indicates SUCCESS.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when the low level driver returns did_soft_error,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it is responsible for keeping an internal retry counter </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in order to avoid endless loops (db)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * actually this is a bug in this function here.  we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be mindful of the maximum number of retries specified</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and not get stuck in a loop.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_SOFT_ERROR\">DID_SOFT_ERROR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#maybe_retry\">maybe_retry</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_IMM_RETRY\">DID_IMM_RETRY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_REQUEUE\">DID_REQUEUE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ADD_TO_MLQUEUE\">ADD_TO_MLQUEUE</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_TRANSPORT_DISRUPTED\">DID_TRANSPORT_DISRUPTED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * LLD/transport was disrupted during processing of the IO.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The transport class is now blocked/blocking,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and the transport will decide what to do with the IO</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * based on its timers and recovery capablilities if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * there are enough retries.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#maybe_retry\">maybe_retry</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_TRANSPORT_FAILFAST\">DID_TRANSPORT_FAILFAST</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The transport decided to failfast the IO (most likely</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the fast io fail tmo fired), so send IO directly upwards.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_ERROR\">DID_ERROR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg_byte\">msg_byte</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>) == <a class=\"id\" href=\"#COMMAND_COMPLETE\">COMMAND_COMPLETE</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#status_byte\">status_byte</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>) == <a class=\"id\" href=\"#RESERVATION_CONFLICT\">RESERVATION_CONFLICT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * execute reservation conflict processing code</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * lower down</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fallthrough */</span>", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_BUS_BUSY\">DID_BUS_BUSY</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_PARITY\">DID_PARITY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#maybe_retry\">maybe_retry</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_TIME_OUT\">DID_TIME_OUT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when we scan the bus, we get timeout messages for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * these commands if there is no device available.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * other hosts report did_no_connect for the same thing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>[0] == <a class=\"id\" href=\"#TEST_UNIT_READY\">TEST_UNIT_READY</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>[0] == <a class=\"id\" href=\"#INQUIRY\">INQUIRY</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DID_RESET\">DID_RESET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * next, check the message byte.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msg_byte\">msg_byte</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>) != <a class=\"id\" href=\"#COMMAND_COMPLETE\">COMMAND_COMPLETE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check the status byte to see if this indicates anything special.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#status_byte\">status_byte</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>)) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#QUEUE_FULL\">QUEUE_FULL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_handle_queue_full\">scsi_handle_queue_full</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the case of trying to send too many commands to a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tagged queueing device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BUSY\">BUSY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * device can't talk to us at the moment.  Should only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * occur (SAM-3) when the task queue is empty, so will cause</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the empty queue handling to trigger a stall in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ADD_TO_MLQUEUE\">ADD_TO_MLQUEUE</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GOOD\">GOOD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_handle_queue_ramp_up\">scsi_handle_queue_ramp_up</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#COMMAND_TERMINATED\">COMMAND_TERMINATED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TASK_ABORTED\">TASK_ABORTED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#maybe_retry\">maybe_retry</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CHECK_CONDITION\">CHECK_CONDITION</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_check_sense\">scsi_check_sense</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#maybe_retry\">maybe_retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if rtn == FAILED, we have no sense information;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * returning FAILED will wake the error handler thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to collect the sense and redo the decide</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * disposition */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CONDITION_GOOD\">CONDITION_GOOD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#INTERMEDIATE_GOOD\">INTERMEDIATE_GOOD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#INTERMEDIATE_C_GOOD\">INTERMEDIATE_C_GOOD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACA_ACTIVE\">ACA_ACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * who knows?  FIXME(eric)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RESERVATION_CONFLICT\">RESERVATION_CONFLICT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"reservation conflict\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>; <span class=\"comment\">/* causes immediate i/o error */</span>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"", 
"      <a class=\"id\" href=\"#maybe_retry\">maybe_retry</a>:", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we requeue for retry because the error was retryable, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the request was not marked fast fail.  Note that above,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * even if the request is marked fast fail, we still requeue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for queue congestion conditions (QUEUE_FULL or BUSY) */</span>", 
"<span class=\"ts\"/>if ((++<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#retries\">retries</a>) <= <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#allowed\">allowed</a>", 
"<span class=\"ts\"/>    && !<a class=\"id\" href=\"#scsi_noretry_cmd\">scsi_noretry_cmd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NEEDS_RETRY\">NEEDS_RETRY</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * no more retries - report this one back to upper level.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#eh_lock_door_done\">eh_lock_door_done</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>, int <a class=\"id\" href=\"#uptodate\">uptodate</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__blk_put_request\">__blk_put_request</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_lock_door - Prevent medium removal for the specified device</span>", 
"<span class=\"comment\"> * @sdev:<span class=\"ts\"/>SCSI device to prevent medium removal</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>We must be called from process context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>We queue up an asynchronous \"ALLOW MEDIUM REMOVAL\" request on the</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>head of the devices request queue, and continue.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_eh_lock_door\">scsi_eh_lock_door</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * blk_get_request with GFP_KERNEL (__GFP_WAIT) sleeps until a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * request becomes available</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#blk_get_request\">blk_get_request</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#READ\">READ</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd\">cmd</a>[0] = <a class=\"id\" href=\"#ALLOW_MEDIUM_REMOVAL\">ALLOW_MEDIUM_REMOVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd\">cmd</a>[1] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd\">cmd</a>[2] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd\">cmd</a>[3] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd\">cmd</a>[4] = <a class=\"id\" href=\"#SCSI_REMOVAL_PREVENT\">SCSI_REMOVAL_PREVENT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd\">cmd</a>[5] = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> = <a class=\"id\" href=\"#COMMAND_SIZE\">COMMAND_SIZE</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd\">cmd</a>[0]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> = <a class=\"id\" href=\"#REQ_TYPE_BLOCK_PC\">REQ_TYPE_BLOCK_PC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_QUIET\">REQ_QUIET</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#timeout\">timeout</a> = 10 * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#retries\">retries</a> = 5;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_execute_rq_nowait\">blk_execute_rq_nowait</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#req\">req</a>, 1, <a class=\"id\" href=\"#eh_lock_door_done\">eh_lock_door_done</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_restart_operations - restart io operations to the specified host.</span>", 
"<span class=\"comment\"> * @shost:<span class=\"ts\"/>Host we are restarting.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    When we entered the error handler, we blocked all further i/o to</span>", 
"<span class=\"comment\"> *    this device.  we need to 'reverse' this process.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_restart_operations\">scsi_restart_operations</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the door was locked, we need to insert a door lock request</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * onto the head of the SCSI request queue for the device.  There</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is no point trying to lock the door of an off-line device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost_for_each_device\">shost_for_each_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#shost\">shost</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_device_online\">scsi_device_online</a>(<a class=\"id\" href=\"#sdev\">sdev</a>) && <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#locked\">locked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_lock_door\">scsi_eh_lock_door</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * next free up anything directly waiting upon the host.  this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will be requests for character device operations, and also for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ioctls to queued block devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: waking up host to restart\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__func__\">__func__</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_host_set_state\">scsi_host_set_state</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#SHOST_RUNNING\">SHOST_RUNNING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_host_set_state\">scsi_host_set_state</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#SHOST_CANCEL\">SHOST_CANCEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#scsi_host_set_state\">scsi_host_set_state</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#SHOST_DEL\">SHOST_DEL</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_wait\">host_wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * finally we need to re-initiate requests that may be pending.  we will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have had everything blocked while error handling is taking place, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * now that error recovery is done, we will need to ensure that these</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * requests are started.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_run_host_queues\">scsi_run_host_queues</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_ready_devs - check device ready state and recover if not.</span>", 
"<span class=\"comment\"> * @shost: <span class=\"ts\"/>host to be recovered.</span>", 
"<span class=\"comment\"> * @work_q:     &amp;list_head for pending commands.</span>", 
"<span class=\"comment\"> * @done_q:<span class=\"ts\"/>&amp;list_head for processed commands.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_eh_ready_devs\">scsi_eh_ready_devs</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#work_q\">work_q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#done_q\">done_q</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_eh_stu\">scsi_eh_stu</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#done_q\">done_q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_eh_bus_device_reset\">scsi_eh_bus_device_reset</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#done_q\">done_q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_eh_target_reset\">scsi_eh_target_reset</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#done_q\">done_q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_eh_bus_reset\">scsi_eh_bus_reset</a>(<a class=\"id\" href=\"#shost\">shost</a>, <a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#done_q\">done_q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_eh_host_reset\">scsi_eh_host_reset</a>(<a class=\"id\" href=\"#work_q\">work_q</a>, <a class=\"id\" href=\"#done_q\">done_q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_offline_sdevs\">scsi_eh_offline_sdevs</a>(<a class=\"id\" href=\"#work_q\">work_q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#done_q\">done_q</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#scsi_eh_ready_devs\">scsi_eh_ready_devs</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_eh_flush_done_q - finish processed commands or retry them.</span>", 
"<span class=\"comment\"> * @done_q:<span class=\"ts\"/>list_head of processed commands.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_eh_flush_done_q\">scsi_eh_flush_done_q</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#done_q\">done_q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#done_q\">done_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#eh_entry\">eh_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_device_online\">scsi_device_online</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#scsi_noretry_cmd\">scsi_noretry_cmd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (++<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#retries\">retries</a> <= <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#allowed\">allowed</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: flush\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \" retry cmd: %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#scmd\">scmd</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_queue_insert\">scsi_queue_insert</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#SCSI_MLQUEUE_EH_RETRY\">SCSI_MLQUEUE_EH_RETRY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If just we got sense for the device (called</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * scsi_eh_get_sense), scmd-&gt;result is already</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * set, do not set DRIVER_TIMEOUT.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a> |= (<a class=\"id\" href=\"#DRIVER_TIMEOUT\">DRIVER_TIMEOUT</a> << 24);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"%s: flush finish\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" cmd: %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#scmd\">scmd</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_finish_command\">scsi_finish_command</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_eh_flush_done_q\">scsi_eh_flush_done_q</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_unjam_host - Attempt to fix a host which has a cmd that failed.</span>", 
"<span class=\"comment\"> * @shost:<span class=\"ts\"/>Host to unjam.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    When we come in here, we *know* that all commands on the bus have</span>", 
"<span class=\"comment\"> *    either completed, failed or timed out.  we also know that no further</span>", 
"<span class=\"comment\"> *    commands are being sent to the host, so things are relatively quiet</span>", 
"<span class=\"comment\"> *    and we have freedom to fiddle with things as we wish.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    This is only the *default* implementation.  it is possible for</span>", 
"<span class=\"comment\"> *    individual drivers to supply their own version of this function, and</span>", 
"<span class=\"comment\"> *    if the maintainer wishes to do this, it is strongly suggested that</span>", 
"<span class=\"comment\"> *    this function be taken as a template and modified.  this function</span>", 
"<span class=\"comment\"> *    was designed to correctly handle problems for about 95% of the</span>", 
"<span class=\"comment\"> *    different cases out there, and it should always provide at least a</span>", 
"<span class=\"comment\"> *    reasonable amount of error recovery.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    Any command marked 'failed' or 'timeout' must eventually have</span>", 
"<span class=\"comment\"> *    scsi_finish_cmd() called for it.  we do all of the retry stuff</span>", 
"<span class=\"comment\"> *    here, so when we restart the host after we return it should have an</span>", 
"<span class=\"comment\"> *    empty queue.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_unjam_host\">scsi_unjam_host</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#eh_work_q\">eh_work_q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#eh_done_q\">eh_done_q</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_splice_init\">list_splice_init</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#eh_cmd_q\">eh_cmd_q</a>, &amp;<a class=\"id\" href=\"#eh_work_q\">eh_work_q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(1, <a class=\"id\" href=\"#scsi_eh_prt_fail_stats\">scsi_eh_prt_fail_stats</a>(<a class=\"id\" href=\"#shost\">shost</a>, &amp;<a class=\"id\" href=\"#eh_work_q\">eh_work_q</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_eh_get_sense\">scsi_eh_get_sense</a>(&amp;<a class=\"id\" href=\"#eh_work_q\">eh_work_q</a>, &amp;<a class=\"id\" href=\"#eh_done_q\">eh_done_q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_eh_abort_cmds\">scsi_eh_abort_cmds</a>(&amp;<a class=\"id\" href=\"#eh_work_q\">eh_work_q</a>, &amp;<a class=\"id\" href=\"#eh_done_q\">eh_done_q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_ready_devs\">scsi_eh_ready_devs</a>(<a class=\"id\" href=\"#shost\">shost</a>, &amp;<a class=\"id\" href=\"#eh_work_q\">eh_work_q</a>, &amp;<a class=\"id\" href=\"#eh_done_q\">eh_done_q</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_flush_done_q\">scsi_eh_flush_done_q</a>(&amp;<a class=\"id\" href=\"#eh_done_q\">eh_done_q</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_error_handler - SCSI error handler thread</span>", 
"<span class=\"comment\"> * @data:<span class=\"ts\"/>Host for which we are running.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *    This is the main error handling loop.  This is run as a kernel thread</span>", 
"<span class=\"comment\"> *    for every SCSI host and handles all error handling activity.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_error_handler\">scsi_error_handler</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use TASK_INTERRUPTIBLE so that the thread is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * counted against the load average as a running process.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We never actually get interrupted because kthread_run</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disables signal delivery for the created thread.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_failed\">host_failed</a> == 0 && <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_eh_scheduled\">host_eh_scheduled</a> == 0) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_failed\">host_failed</a> != <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_busy\">host_busy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Error handler scsi_eh_%d sleeping\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_no\">host_no</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Error handler scsi_eh_%d waking up\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_no\">host_no</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We have a host that is failing for some reason.  Figure out</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * what we need to do to get it up and online again (if we can).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we fail, we end up taking the thing offline.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_autopm_get_host\">scsi_autopm_get_host</a>(<a class=\"id\" href=\"#shost\">shost</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Error handler scsi_eh_%d \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"unable to autoresume\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_no\">host_no</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>-><a class=\"id\" href=\"#eh_strategy_handler\">eh_strategy_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>-><a class=\"id\" href=\"#eh_strategy_handler\">eh_strategy_handler</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_unjam_host\">scsi_unjam_host</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note - if the above fails completely, the action is to take</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * individual devices offline and flush the queue of any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * outstanding requests that may have been pending.  When we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * restart, we restart any I/O to any other devices on the bus</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * which are still online.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_restart_operations\">scsi_restart_operations</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_autopm_put_host\">scsi_autopm_put_host</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(1,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Error handler scsi_eh_%d exiting\\n\", <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_no\">host_no</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#ehandler\">ehandler</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function:    scsi_report_bus_reset()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:     Utility function used by low-level drivers to report that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>they have observed a bus reset on the bus being handled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments:   shost       - Host in question</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>channel     - channel on which reset was observed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:     Nothing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock status: Host lock must be held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:       This only needs to be called if the reset is one which</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>originates from an unknown location.  Resets originated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>by the mid-level itself don't need to call this, but there</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>should be no harm.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>The main purpose of this is to make sure that a CHECK_CONDITION</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>is properly treated.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_report_bus_reset\">scsi_report_bus_reset</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>, int <a class=\"id\" href=\"#channel\">channel</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__shost_for_each_device\">__shost_for_each_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#shost\">shost</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#channel\">channel</a> == <a class=\"id\" href=\"#sdev_channel\">sdev_channel</a>(<a class=\"id\" href=\"#sdev\">sdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__scsi_report_device_reset\">__scsi_report_device_reset</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_report_bus_reset\">scsi_report_bus_reset</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function:    scsi_report_device_reset()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:     Utility function used by low-level drivers to report that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>they have observed a device reset on the device being handled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments:   shost       - Host in question</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>channel     - channel on which reset was observed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>target<span class=\"ts\"/>    - target on which reset was observed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:     Nothing</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock status: Host lock must be held</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:       This only needs to be called if the reset is one which</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>originates from an unknown location.  Resets originated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>by the mid-level itself don't need to call this, but there</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>should be no harm.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>The main purpose of this is to make sure that a CHECK_CONDITION</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>is properly treated.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#scsi_report_device_reset\">scsi_report_device_reset</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>, int <a class=\"id\" href=\"#channel\">channel</a>, int <a class=\"id\" href=\"#target\">target</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__shost_for_each_device\">__shost_for_each_device</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#shost\">shost</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#channel\">channel</a> == <a class=\"id\" href=\"#sdev_channel\">sdev_channel</a>(<a class=\"id\" href=\"#sdev\">sdev</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#target\">target</a> == <a class=\"id\" href=\"#sdev_id\">sdev_id</a>(<a class=\"id\" href=\"#sdev\">sdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__scsi_report_device_reset\">__scsi_report_device_reset</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_report_device_reset\">scsi_report_device_reset</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#scsi_reset_provider_done_command\">scsi_reset_provider_done_command</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Function:<span class=\"ts\"/>scsi_reset_provider</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Purpose:<span class=\"ts\"/>Send requested reset to a bus or device at any phase.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Arguments:<span class=\"ts\"/>device<span class=\"ts\"/>- device to send reset to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>flag - reset type (see scsi.h)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:<span class=\"ts\"/>SUCCESS/FAILURE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:<span class=\"ts\"/>This is used by the SCSI Generic driver to provide</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Bus/Device reset capability.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#scsi_reset_provider\">scsi_reset_provider</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> <a class=\"id\" href=\"#req\">req</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_autopm_get_host\">scsi_autopm_get_host</a>(<a class=\"id\" href=\"#shost\">shost</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a> = <a class=\"id\" href=\"#scsi_get_command\">scsi_get_command</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_init\">blk_rq_init</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#request\">request</a> = &amp;<a class=\"id\" href=\"#req\">req</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a> = <a class=\"id\" href=\"#req\">req</a>.<a class=\"id\" href=\"#cmd\">cmd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#scsi_done\">scsi_done</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#scsi_reset_provider_done_command\">scsi_reset_provider_done_command</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>, 0, sizeof(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sdb\">sdb</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sc_data_direction\">sc_data_direction</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#DMA_BIDIRECTIONAL\">DMA_BIDIRECTIONAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#tmf_in_progress\">tmf_in_progress</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#flag\">flag</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCSI_TRY_RESET_DEVICE\">SCSI_TRY_RESET_DEVICE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_try_bus_device_reset\">scsi_try_bus_device_reset</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FALLTHROUGH */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCSI_TRY_RESET_TARGET\">SCSI_TRY_RESET_TARGET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_try_target_reset\">scsi_try_target_reset</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FALLTHROUGH */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCSI_TRY_RESET_BUS\">SCSI_TRY_RESET_BUS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_try_bus_reset\">scsi_try_bus_reset</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rtn\">rtn</a> == <a class=\"id\" href=\"#SUCCESS\">SUCCESS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FALLTHROUGH */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SCSI_TRY_RESET_HOST\">SCSI_TRY_RESET_HOST</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#scsi_try_host_reset\">scsi_try_host_reset</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtn\">rtn</a> = <a class=\"id\" href=\"#FAILED\">FAILED</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#tmf_in_progress\">tmf_in_progress</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_lock\">host_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be sure to wake up anyone who was sleeping or had their queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * suspended while we performed the TMF.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_ERROR_RECOVERY\">SCSI_LOG_ERROR_RECOVERY</a>(3,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s: waking up host to restart after TMF\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#host_wait\">host_wait</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_run_host_queues\">scsi_run_host_queues</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_next_command\">scsi_next_command</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_autopm_put_host\">scsi_autopm_put_host</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rtn\">rtn</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_reset_provider\">scsi_reset_provider</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_normalize_sense - normalize main elements from either fixed or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>descriptor sense data format into a common format.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @sense_buffer:<span class=\"ts\"/>byte array containing sense data returned by device</span>", 
"<span class=\"comment\"> * @sb_len:<span class=\"ts\"/><span class=\"ts\"/>number of valid bytes in sense_buffer</span>", 
"<span class=\"comment\"> * @sshdr:<span class=\"ts\"/><span class=\"ts\"/>pointer to instance of structure that common</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>elements are written to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The \"main elements\" from sense data are: response_code, sense_key,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>asc, ascq and additional_length (only for descriptor format).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Typically this function can be called after a device has</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>responded to a SCSI command with the CHECK_CONDITION status.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return value:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1 if valid sense data information found, else 0;</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_normalize_sense\">scsi_normalize_sense</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>, int <a class=\"id\" href=\"#sb_len\">sb_len</a>,", 
"                         struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> *<a class=\"id\" href=\"#sshdr\">sshdr</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a> || !<a class=\"id\" href=\"#sb_len\">sb_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#sshdr\">sshdr</a>, 0, sizeof(struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#response_code\">response_code</a> = (<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[0] &amp; 0x7f);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_sense_valid\">scsi_sense_valid</a>(<a class=\"id\" href=\"#sshdr\">sshdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#response_code\">response_code</a> >= 0x72) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * descriptor format</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb_len\">sb_len</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#sense_key\">sense_key</a> = (<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[1] &amp; 0xf);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb_len\">sb_len</a> &gt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#asc\">asc</a> = <a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[2];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb_len\">sb_len</a> &gt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#ascq\">ascq</a> = <a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[3];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb_len\">sb_len</a> &gt; 7)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#additional_length\">additional_length</a> = <a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[7];", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fixed format</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb_len\">sb_len</a> &gt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#sense_key\">sense_key</a> = (<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[2] &amp; 0xf);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb_len\">sb_len</a> &gt; 7) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb_len\">sb_len</a> = (<a class=\"id\" href=\"#sb_len\">sb_len</a> &lt; (<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[7] + 8)) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#sb_len\">sb_len</a> : (<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[7] + 8);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb_len\">sb_len</a> &gt; 12)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#asc\">asc</a> = <a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[12];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb_len\">sb_len</a> &gt; 13)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#ascq\">ascq</a> = <a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[13];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_normalize_sense\">scsi_normalize_sense</a>);", 
"", 
"int <a class=\"id\" href=\"#scsi_command_normalize_sense\">scsi_command_normalize_sense</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> *<a class=\"id\" href=\"#sshdr\">sshdr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#scsi_normalize_sense\">scsi_normalize_sense</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>, <a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_command_normalize_sense\">scsi_command_normalize_sense</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_sense_desc_find - search for a given descriptor type in<span class=\"ts\"/>descriptor sense data format.</span>", 
"<span class=\"comment\"> * @sense_buffer:<span class=\"ts\"/>byte array of descriptor format sense data</span>", 
"<span class=\"comment\"> * @sb_len:<span class=\"ts\"/><span class=\"ts\"/>number of valid bytes in sense_buffer</span>", 
"<span class=\"comment\"> * @desc_type:<span class=\"ts\"/><span class=\"ts\"/>value of descriptor type to find</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(e.g. 0 -&gt; information)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>only valid when sense data is in descriptor format</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return value:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pointer to start of (first) descriptor if found else NULL</span>", 
"<span class=\"comment\"> */</span>", 
"const <a class=\"id\" href=\"#u8\">u8</a> * <a class=\"id\" href=\"#scsi_sense_desc_find\">scsi_sense_desc_find</a>(const <a class=\"id\" href=\"#u8\">u8</a> * <a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>, int <a class=\"id\" href=\"#sb_len\">sb_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#desc_type\">desc_type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#add_sen_len\">add_sen_len</a>, <a class=\"id\" href=\"#add_len\">add_len</a>, <a class=\"id\" href=\"#desc_len\">desc_len</a>, <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> * <a class=\"id\" href=\"#descp\">descp</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#sb_len\">sb_len</a> &lt; 8) || (0 == (<a class=\"id\" href=\"#add_sen_len\">add_sen_len</a> = <a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[7])))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[0] &lt; 0x72) || (<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[0] &gt; 0x73))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_sen_len\">add_sen_len</a> = (<a class=\"id\" href=\"#add_sen_len\">add_sen_len</a> &lt; (<a class=\"id\" href=\"#sb_len\">sb_len</a> - 8)) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_sen_len\">add_sen_len</a> : (<a class=\"id\" href=\"#sb_len\">sb_len</a> - 8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#descp\">descp</a> = &amp;<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[8];", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#desc_len\">desc_len</a> = 0, <a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#add_sen_len\">add_sen_len</a>; <a class=\"id\" href=\"#k\">k</a> += <a class=\"id\" href=\"#desc_len\">desc_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#descp\">descp</a> += <a class=\"id\" href=\"#desc_len\">desc_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_len\">add_len</a> = (<a class=\"id\" href=\"#k\">k</a> &lt; (<a class=\"id\" href=\"#add_sen_len\">add_sen_len</a> - 1)) ? <a class=\"id\" href=\"#descp\">descp</a>[1]: -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc_len\">desc_len</a> = <a class=\"id\" href=\"#add_len\">add_len</a> + 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#descp\">descp</a>[0] == <a class=\"id\" href=\"#desc_type\">desc_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#descp\">descp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#add_len\">add_len</a> &lt; 0) <span class=\"comment\">// short descriptor ??</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_sense_desc_find\">scsi_sense_desc_find</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_get_sense_info_fld - get information field from sense data (either fixed or descriptor format)</span>", 
"<span class=\"comment\"> * @sense_buffer:<span class=\"ts\"/>byte array of sense data</span>", 
"<span class=\"comment\"> * @sb_len:<span class=\"ts\"/><span class=\"ts\"/>number of valid bytes in sense_buffer</span>", 
"<span class=\"comment\"> * @info_out:<span class=\"ts\"/><span class=\"ts\"/>pointer to 64 integer where 8 or 4 byte information</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>field will be placed if found.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return value:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1 if information field found, 0 if not found.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#scsi_get_sense_info_fld\">scsi_get_sense_info_fld</a>(const <a class=\"id\" href=\"#u8\">u8</a> * <a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>, int <a class=\"id\" href=\"#sb_len\">sb_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u64\">u64</a> * <a class=\"id\" href=\"#info_out\">info_out</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> * <a class=\"id\" href=\"#ucp\">ucp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ull\">ull</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb_len\">sb_len</a> &lt; 7)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[0] &amp; 0x7f) {", 
"<span class=\"ts\"/>case 0x70:", 
"<span class=\"ts\"/>case 0x71:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[0] &amp; 0x80) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#info_out\">info_out</a> = (<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[3] << 24) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[4] << 16) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[5] << 8) + <a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[6];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>case 0x72:", 
"<span class=\"ts\"/>case 0x73:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ucp\">ucp</a> = <a class=\"id\" href=\"#scsi_sense_desc_find\">scsi_sense_desc_find</a>(<a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>, <a class=\"id\" href=\"#sb_len\">sb_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   0 <span class=\"comment\">/* info desc */</span>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ucp\">ucp</a> && (0xa == <a class=\"id\" href=\"#ucp\">ucp</a>[1])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ull\">ull</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; 8; ++<a class=\"id\" href=\"#j\">j</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#j\">j</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ull\">ull</a> <<= 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ull\">ull</a> |= <a class=\"id\" href=\"#ucp\">ucp</a>[4 + <a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#info_out\">info_out</a> = <a class=\"id\" href=\"#ull\">ull</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_get_sense_info_fld\">scsi_get_sense_info_fld</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * scsi_build_sense_buffer - build sense data in a buffer</span>", 
"<span class=\"comment\"> * @desc:<span class=\"ts\"/>Sense format (non zero == descriptor format,</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>0 == fixed format)</span>", 
"<span class=\"comment\"> * @buf:<span class=\"ts\"/>Where to build sense data</span>", 
"<span class=\"comment\"> * @key:<span class=\"ts\"/>Sense key</span>", 
"<span class=\"comment\"> * @asc:<span class=\"ts\"/>Additional sense code</span>", 
"<span class=\"comment\"> * @ascq:<span class=\"ts\"/>Additional sense code qualifier</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#scsi_build_sense_buffer\">scsi_build_sense_buffer</a>(int <a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#asc\">asc</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ascq\">ascq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[0] = 0x72;<span class=\"ts\"/><span class=\"comment\">/* descriptor, current */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[1] = <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[2] = <a class=\"id\" href=\"#asc\">asc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[3] = <a class=\"id\" href=\"#ascq\">ascq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[7] = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[0] = 0x70;<span class=\"ts\"/><span class=\"comment\">/* fixed, current */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[2] = <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[7] = 0xa;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[12] = <a class=\"id\" href=\"#asc\">asc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[13] = <a class=\"id\" href=\"#ascq\">ascq</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#scsi_build_sense_buffer\">scsi_build_sense_buffer</a>);", 
];
xr_frag_insert('l/ac/139dc6d3eb68ad58f38f63bb5d28dc55faeb1b.xr', __xr_tmp);
