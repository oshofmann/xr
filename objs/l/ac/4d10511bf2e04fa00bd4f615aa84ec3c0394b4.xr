var __xr_tmp = [
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_copy_to_linear_data_offset\">skb_copy_to_linear_data_offset</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const void *<a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#skb_init\">skb_init</a>(void);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#skb_get_ktime\">skb_get_ktime</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_get_timestamp - get timestamp from a skb</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: skb to get stamp from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@stamp: pointer to struct timeval to store stamp in</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Timestamps are stored in the skb as offsets to a base timestamp.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function converts the offset back to a struct timeval and stores</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it in stamp.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_get_timestamp\">skb_get_timestamp</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#timeval\">timeval</a> *<a class=\"id\" href=\"#stamp\">stamp</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#stamp\">stamp</a> = <a class=\"id\" href=\"#ktime_to_timeval\">ktime_to_timeval</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_get_timestampns\">skb_get_timestampns</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#stamp\">stamp</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#stamp\">stamp</a> = <a class=\"id\" href=\"#ktime_to_timespec\">ktime_to_timespec</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__net_timestamp\">__net_timestamp</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a> = <a class=\"id\" href=\"#ktime_get_real\">ktime_get_real</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#net_timedelta\">net_timedelta</a>(<a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#ktime_get_real\">ktime_get_real</a>(), <a class=\"id\" href=\"#t\">t</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#net_invalid_timestamp\">net_invalid_timestamp</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ktime_set\">ktime_set</a>(0, 0);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#skb_timestamping_init\">skb_timestamping_init</a>(void);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NETWORK_PHY_TIMESTAMPING\">CONFIG_NETWORK_PHY_TIMESTAMPING</a>", 
"", 
"extern void <a class=\"id\" href=\"#skb_clone_tx_timestamp\">skb_clone_tx_timestamp</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skb_defer_rx_timestamp\">skb_defer_rx_timestamp</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"#else <span class=\"comment\">/* CONFIG_NETWORK_PHY_TIMESTAMPING */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_clone_tx_timestamp\">skb_clone_tx_timestamp</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skb_defer_rx_timestamp\">skb_defer_rx_timestamp</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_NETWORK_PHY_TIMESTAMPING */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * skb_complete_tx_timestamp() - deliver cloned skb with tx timestamps</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @skb: clone of the the original outgoing packet</span>", 
"<span class=\"comment\"> * @hwtstamps: hardware time stamps</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#skb_complete_tx_timestamp\">skb_complete_tx_timestamp</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#skb_shared_hwtstamps\">skb_shared_hwtstamps</a> *<a class=\"id\" href=\"#hwtstamps\">hwtstamps</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * skb_tstamp_tx - queue clone of skb with send time stamps</span>", 
"<span class=\"comment\"> * @orig_skb:<span class=\"ts\"/>the original outgoing packet</span>", 
"<span class=\"comment\"> * @hwtstamps:<span class=\"ts\"/>hardware time stamps, may be NULL if not available</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the skb has a socket associated, then this function clones the</span>", 
"<span class=\"comment\"> * skb (thus sharing the actual data and optional structures), stores</span>", 
"<span class=\"comment\"> * the optional hardware time stamping information (if non NULL) or</span>", 
"<span class=\"comment\"> * generates a software time stamp (otherwise), then queues the clone</span>", 
"<span class=\"comment\"> * to the error queue of the socket.  Errors are silently ignored.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#skb_tstamp_tx\">skb_tstamp_tx</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#orig_skb\">orig_skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#skb_shared_hwtstamps\">skb_shared_hwtstamps</a> *<a class=\"id\" href=\"#hwtstamps\">hwtstamps</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sw_tx_timestamp\">sw_tx_timestamp</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#skb_shared_tx\">skb_shared_tx</a> *<a class=\"id\" href=\"#shtx\">shtx</a> = <a class=\"id\" href=\"#skb_tx\">skb_tx</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shtx\">shtx</a>-><a class=\"id\" href=\"#software\">software</a> && !<a class=\"id\" href=\"#shtx\">shtx</a>-><a class=\"id\" href=\"#in_progress\">in_progress</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_tstamp_tx\">skb_tstamp_tx</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * skb_tx_timestamp() - Driver hook for transmit timestamping</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Ethernet MAC Drivers should call this function in their hard_xmit()</span>", 
"<span class=\"comment\"> * function as soon as possible after giving the sk_buff to the MAC</span>", 
"<span class=\"comment\"> * hardware, but before freeing the sk_buff.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @skb: A socket buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_tx_timestamp\">skb_tx_timestamp</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_clone_tx_timestamp\">skb_clone_tx_timestamp</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sw_tx_timestamp\">sw_tx_timestamp</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"extern <a class=\"id\" href=\"#__sum16\">__sum16</a> <a class=\"id\" href=\"#__skb_checksum_complete_head\">__skb_checksum_complete_head</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#len\">len</a>);", 
"extern <a class=\"id\" href=\"#__sum16\">__sum16</a> <a class=\"id\" href=\"#__skb_checksum_complete\">__skb_checksum_complete</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_csum_unnecessary\">skb_csum_unnecessary</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> &amp; <a class=\"id\" href=\"#CHECKSUM_UNNECESSARY\">CHECKSUM_UNNECESSARY</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_checksum_complete - Calculate checksum of an entire packet</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: packet to process</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function calculates the checksum over the entire packet plus</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the value of skb-&gt;csum.  The latter can be used to supply the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>checksum of a pseudo header as used by TCP/UDP.  It returns the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>checksum.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>For protocols that contain complete checksums such as ICMP/TCP/UDP,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this function can be used to verify that checksum on received</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>packets.  In that case the function should return zero if the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>checksum is correct.  In particular, this function will return zero</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if skb-&gt;ip_summed is CHECKSUM_UNNECESSARY which indicates that the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>hardware has already verified the correctness of the checksum.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__sum16\">__sum16</a> <a class=\"id\" href=\"#skb_checksum_complete\">skb_checksum_complete</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_csum_unnecessary\">skb_csum_unnecessary</a>(<a class=\"id\" href=\"#skb\">skb</a>) ?", 
"<span class=\"ts\"/>       0 : <a class=\"id\" href=\"#__skb_checksum_complete\">__skb_checksum_complete</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK\">CONFIG_NF_CONNTRACK</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK_MODULE\">CONFIG_NF_CONNTRACK_MODULE</a>)", 
"extern void <a class=\"id\" href=\"#nf_conntrack_destroy\">nf_conntrack_destroy</a>(struct <a class=\"id\" href=\"#nf_conntrack\">nf_conntrack</a> *<a class=\"id\" href=\"#nfct\">nfct</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#nf_conntrack_put\">nf_conntrack_put</a>(struct <a class=\"id\" href=\"#nf_conntrack\">nf_conntrack</a> *<a class=\"id\" href=\"#nfct\">nfct</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nfct\">nfct</a> && <a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#nfct\">nfct</a>-><a class=\"id\" href=\"#use\">use</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nf_conntrack_destroy\">nf_conntrack_destroy</a>(<a class=\"id\" href=\"#nfct\">nfct</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#nf_conntrack_get\">nf_conntrack_get</a>(struct <a class=\"id\" href=\"#nf_conntrack\">nf_conntrack</a> *<a class=\"id\" href=\"#nfct\">nfct</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nfct\">nfct</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#nfct\">nfct</a>-><a class=\"id\" href=\"#use\">use</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#nf_conntrack_get_reasm\">nf_conntrack_get_reasm</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#users\">users</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#nf_conntrack_put_reasm\">nf_conntrack_put_reasm</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BRIDGE_NETFILTER\">CONFIG_BRIDGE_NETFILTER</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#nf_bridge_put\">nf_bridge_put</a>(struct <a class=\"id\" href=\"#nf_bridge_info\">nf_bridge_info</a> *<a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nf_bridge\">nf_bridge</a> && <a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>-><a class=\"id\" href=\"#use\">use</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#nf_bridge_get\">nf_bridge_get</a>(struct <a class=\"id\" href=\"#nf_bridge_info\">nf_bridge_info</a> *<a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>-><a class=\"id\" href=\"#use\">use</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_BRIDGE_NETFILTER */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#nf_reset\">nf_reset</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK\">CONFIG_NF_CONNTRACK</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK_MODULE\">CONFIG_NF_CONNTRACK_MODULE</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_conntrack_put\">nf_conntrack_put</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nfct\">nfct</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nfct\">nfct</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_conntrack_put_reasm\">nf_conntrack_put_reasm</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nfct_reasm\">nfct_reasm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nfct_reasm\">nfct_reasm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BRIDGE_NETFILTER\">CONFIG_BRIDGE_NETFILTER</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_bridge_put\">nf_bridge_put</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nf_bridge\">nf_bridge</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/* Note: This doesn't put any conntrack and bridge info in dst. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__nf_copy\">__nf_copy</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#dst\">dst</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK\">CONFIG_NF_CONNTRACK</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK_MODULE\">CONFIG_NF_CONNTRACK_MODULE</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#nfct\">nfct</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#nfct\">nfct</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_conntrack_get\">nf_conntrack_get</a>(<a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#nfct\">nfct</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#nfctinfo\">nfctinfo</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#nfctinfo\">nfctinfo</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#nfct_reasm\">nfct_reasm</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#nfct_reasm\">nfct_reasm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_conntrack_get_reasm\">nf_conntrack_get_reasm</a>(<a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#nfct_reasm\">nfct_reasm</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BRIDGE_NETFILTER\">CONFIG_BRIDGE_NETFILTER</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>  = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_bridge_get\">nf_bridge_get</a>(<a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#nf_copy\">nf_copy</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#dst\">dst</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK\">CONFIG_NF_CONNTRACK</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK_MODULE\">CONFIG_NF_CONNTRACK_MODULE</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_conntrack_put\">nf_conntrack_put</a>(<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#nfct\">nfct</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_conntrack_put_reasm\">nf_conntrack_put_reasm</a>(<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#nfct_reasm\">nfct_reasm</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BRIDGE_NETFILTER\">CONFIG_BRIDGE_NETFILTER</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_bridge_put\">nf_bridge_put</a>(<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__nf_copy\">__nf_copy</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NETWORK_SECMARK\">CONFIG_NETWORK_SECMARK</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_copy_secmark\">skb_copy_secmark</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#to\">to</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#secmark\">secmark</a> = <a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#secmark\">secmark</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_init_secmark\">skb_init_secmark</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#secmark\">secmark</a> = 0;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_copy_secmark\">skb_copy_secmark</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#to\">to</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#from\">from</a>)", 
"{ }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_init_secmark\">skb_init_secmark</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{ }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_set_queue_mapping\">skb_set_queue_mapping</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#queue_mapping\">queue_mapping</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#queue_mapping\">queue_mapping</a> = <a class=\"id\" href=\"#queue_mapping\">queue_mapping</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#skb_get_queue_mapping\">skb_get_queue_mapping</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#queue_mapping\">queue_mapping</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_copy_queue_mapping\">skb_copy_queue_mapping</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#to\">to</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#queue_mapping\">queue_mapping</a> = <a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#queue_mapping\">queue_mapping</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_record_rx_queue\">skb_record_rx_queue</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#rx_queue\">rx_queue</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#queue_mapping\">queue_mapping</a> = <a class=\"id\" href=\"#rx_queue\">rx_queue</a> + 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#skb_get_rx_queue\">skb_get_rx_queue</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#queue_mapping\">queue_mapping</a> - 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skb_rx_queue_recorded\">skb_rx_queue_recorded</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#queue_mapping\">queue_mapping</a> != 0);", 
"}", 
"", 
"extern <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#skb_tx_hash\">skb_tx_hash</a>(const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_XFRM\">CONFIG_XFRM</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sec_path\">sec_path</a> *<a class=\"id\" href=\"#skb_sec_path\">skb_sec_path</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sp\">sp</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sec_path\">sec_path</a> *<a class=\"id\" href=\"#skb_sec_path\">skb_sec_path</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_is_gso\">skb_is_gso</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#gso_size\">gso_size</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_is_gso_v6\">skb_is_gso_v6</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#gso_type\">gso_type</a> &amp; <a class=\"id\" href=\"#SKB_GSO_TCPV6\">SKB_GSO_TCPV6</a>;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#__skb_warn_lro_forwarding\">__skb_warn_lro_forwarding</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skb_warn_if_lro\">skb_warn_if_lro</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* LRO sets gso_size but not gso_type, whereas if GSO is really</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wanted then gso_type will be set. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#skb_shared_info\">skb_shared_info</a> *<a class=\"id\" href=\"#shinfo\">shinfo</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_is_nonlinear\">skb_is_nonlinear</a>(<a class=\"id\" href=\"#skb\">skb</a>) && <a class=\"id\" href=\"#shinfo\">shinfo</a>-><a class=\"id\" href=\"#gso_size\">gso_size</a> != 0 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#shinfo\">shinfo</a>-><a class=\"id\" href=\"#gso_type\">gso_type</a> == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_warn_lro_forwarding\">__skb_warn_lro_forwarding</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_forward_csum\">skb_forward_csum</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Unfortunately we don't support this one.  Any brave souls? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_COMPLETE\">CHECKSUM_COMPLETE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skb_partial_csum_set\">skb_partial_csum_set</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#off\">off</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* __KERNEL__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _LINUX_SKBUFF_H */</span>", 
];
xr_frag_insert('l/ac/4d10511bf2e04fa00bd4f615aa84ec3c0394b4.xr', __xr_tmp);
