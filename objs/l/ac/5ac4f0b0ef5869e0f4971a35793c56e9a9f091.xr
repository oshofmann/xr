var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>x86 SMP booting functions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(c) 1995 Alan Cox, Building #3 &lt;alan@lxorguk.ukuu.org.uk&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(c) 1998, 1999, 2000, 2009 Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copyright 2001 Andi Kleen, SuSE Labs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Much of the core SMP work is based on previous work by Thomas Radke, to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>whom a great many thanks are extended.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Thanks to Intel for making available several different Pentium,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Pentium Pro and Pentium-II/Xeon MP machines.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Original development of Linux SMP code supported by Caldera.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This code is released under the GNU General Public License version 2 or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>later.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Fixes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Felix Koop<span class=\"ts\"/>:<span class=\"ts\"/>NR_CPUS used properly</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Jose Renau<span class=\"ts\"/>:<span class=\"ts\"/>Handle single CPU case.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>By repeated request 8) - Total BogoMIPS report.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Greg Wright<span class=\"ts\"/>:<span class=\"ts\"/>Fix for kernel stacks panic.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Erich Boleyn<span class=\"ts\"/>:<span class=\"ts\"/>MP v1.4 and additional changes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Matthias Sattler<span class=\"ts\"/>:<span class=\"ts\"/>Changes for 2.1 kernel map.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Michel Lespinasse<span class=\"ts\"/>:<span class=\"ts\"/>Changes for 2.1 kernel map.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Michael Chastain<span class=\"ts\"/>:<span class=\"ts\"/>Change trampoline.S to gnu as.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Dumb bug: 'B' step PPro's are fine</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Ingo Molnar<span class=\"ts\"/>:<span class=\"ts\"/>Added APIC timers, based on code</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>from Jose Renau</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Ingo Molnar<span class=\"ts\"/>:<span class=\"ts\"/>various cleanups and rewrites</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Tigran Aivazian<span class=\"ts\"/>:<span class=\"ts\"/>fixed \"0.00 in /proc/uptime on SMP\" bug.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Maciej W. Rozycki<span class=\"ts\"/>:<span class=\"ts\"/>Bits for genuine 82489DX APICs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Andi Kleen<span class=\"ts\"/><span class=\"ts\"/>:<span class=\"ts\"/>Changed for SMP boot into long mode.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Martin J. Bligh<span class=\"ts\"/>: <span class=\"ts\"/>Added support for multi-quad systems</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Dave Jones<span class=\"ts\"/>:<span class=\"ts\"/>Report invalid combinations of Athlon CPUs.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Rusty Russell<span class=\"ts\"/>:<span class=\"ts\"/>Hacked into shape for new \"hotplug\" boot process.</span>", 
"<span class=\"comment\"> *      Andi Kleen              :       Converted to new state machine.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Ashok Raj<span class=\"ts\"/><span class=\"ts\"/>: <span class=\"ts\"/>CPU hotplug support</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Glauber Costa<span class=\"ts\"/><span class=\"ts\"/>:<span class=\"ts\"/>i386 and x86_64 integration</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nmi\">nmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tboot\">tboot</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stackprotector\">stackprotector</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#desc\">desc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#nmi\">nmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#irq\">irq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#idle\">idle</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#trampoline\">trampoline</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#numa\">numa</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mtrr\">mtrr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#vmi\">vmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#setup\">setup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uv\">uv</a>/<a class=\"id\" href=\"#uv\">uv</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mc146818rtc\">mc146818rtc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#smpboot_hooks\">smpboot_hooks</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#i8259\">i8259</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#apicid_2_node\">apicid_2_node</a>[<a class=\"id\" href=\"#MAX_APICID\">MAX_APICID</a>];", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* State of each CPU */</span>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(int, <a class=\"id\" href=\"#cpu_state\">cpu_state</a>) = { 0 };", 
"", 
"<span class=\"comment\">/* Store all idle threads, this can be reused instead of creating</span>", 
"<span class=\"comment\">* a new thread. Also avoids complicated thread destroy functionality</span>", 
"<span class=\"comment\">* for idle threads.</span>", 
"<span class=\"comment\">*/</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Needed only for CONFIG_HOTPLUG_CPU because __cpuinitdata is</span>", 
"<span class=\"comment\"> * removed after init for !CONFIG_HOTPLUG_CPU.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *, <a class=\"id\" href=\"#idle_thread_array\">idle_thread_array</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_idle_for_cpu\">get_idle_for_cpu</a>(<a class=\"id\" href=\"#x\">x</a>)      (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#idle_thread_array\">idle_thread_array</a>, <a class=\"id\" href=\"#x\">x</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_idle_for_cpu\">set_idle_for_cpu</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#p\">p</a>)   (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#idle_thread_array\">idle_thread_array</a>, <a class=\"id\" href=\"#x\">x</a>) = (<a class=\"id\" href=\"#p\">p</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We need this for trampoline_base protection from concurrent accesses when</span>", 
"<span class=\"comment\"> * off- and onlining cores wildly.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#x86_cpu_hotplug_driver_mutex\">x86_cpu_hotplug_driver_mutex</a>);", 
"", 
"void <a class=\"id\" href=\"#cpu_hotplug_driver_lock\">cpu_hotplug_driver_lock</a>()", 
"{", 
"        <a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#x86_cpu_hotplug_driver_mutex\">x86_cpu_hotplug_driver_mutex</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#cpu_hotplug_driver_unlock\">cpu_hotplug_driver_unlock</a>()", 
"{", 
"        <a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#x86_cpu_hotplug_driver_mutex\">x86_cpu_hotplug_driver_mutex</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#arch_cpu_probe\">arch_cpu_probe</a>(const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>) { return -1; }", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#arch_cpu_release\">arch_cpu_release</a>(const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>) { return -1; }", 
"#else", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#idle_thread_array\">idle_thread_array</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>] <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> ;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_idle_for_cpu\">get_idle_for_cpu</a>(<a class=\"id\" href=\"#x\">x</a>)      (<a class=\"id\" href=\"#idle_thread_array\">idle_thread_array</a>[(<a class=\"id\" href=\"#x\">x</a>)])", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_idle_for_cpu\">set_idle_for_cpu</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#p\">p</a>)   (<a class=\"id\" href=\"#idle_thread_array\">idle_thread_array</a>[(<a class=\"id\" href=\"#x\">x</a>)] = (<a class=\"id\" href=\"#p\">p</a>))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Number of siblings per CPU package */</span>", 
"int <a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a> = 1;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a>);", 
"", 
"<span class=\"comment\">/* Last level cache ID of each logical CPU */</span>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(<a class=\"id\" href=\"#u16\">u16</a>, <a class=\"id\" href=\"#cpu_llc_id\">cpu_llc_id</a>) = <a class=\"id\" href=\"#BAD_APICID\">BAD_APICID</a>;", 
"", 
"<span class=\"comment\">/* representing HT siblings of each logical CPU */</span>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a>, <a class=\"id\" href=\"#cpu_sibling_map\">cpu_sibling_map</a>);", 
"<a class=\"id\" href=\"#EXPORT_PER_CPU_SYMBOL\">EXPORT_PER_CPU_SYMBOL</a>(<a class=\"id\" href=\"#cpu_sibling_map\">cpu_sibling_map</a>);", 
"", 
"<span class=\"comment\">/* representing HT and core siblings of each logical CPU */</span>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a>, <a class=\"id\" href=\"#cpu_core_map\">cpu_core_map</a>);", 
"<a class=\"id\" href=\"#EXPORT_PER_CPU_SYMBOL\">EXPORT_PER_CPU_SYMBOL</a>(<a class=\"id\" href=\"#cpu_core_map\">cpu_core_map</a>);", 
"", 
"<span class=\"comment\">/* Per CPU bogomips and other parameters */</span>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU_SHARED_ALIGNED\">DEFINE_PER_CPU_SHARED_ALIGNED</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a>, <a class=\"id\" href=\"#cpu_info\">cpu_info</a>);", 
"<a class=\"id\" href=\"#EXPORT_PER_CPU_SYMBOL\">EXPORT_PER_CPU_SYMBOL</a>(<a class=\"id\" href=\"#cpu_info\">cpu_info</a>);", 
"", 
"<a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#init_deasserted\">init_deasserted</a>;", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>)", 
"<span class=\"comment\">/* which node each logical CPU is on */</span>", 
"int <a class=\"id\" href=\"#cpu_to_node_map\">cpu_to_node_map</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = { [0 ... <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>-1] = 0 };", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cpu_to_node_map\">cpu_to_node_map</a>);", 
"", 
"<span class=\"comment\">/* set up a mapping between cpu and node. */</span>", 
"static void <a class=\"id\" href=\"#map_cpu_to_node\">map_cpu_to_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Mapping cpu %d to node %d\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#node_to_cpumask_map\">node_to_cpumask_map</a>[<a class=\"id\" href=\"#node\">node</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_node_map\">cpu_to_node_map</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#node\">node</a>;", 
"}", 
"", 
"<span class=\"comment\">/* undo a mapping between cpu and node. */</span>", 
"static void <a class=\"id\" href=\"#unmap_cpu_to_node\">unmap_cpu_to_node</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Unmapping cpu %d from all nodes\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#node\">node</a> = 0; <a class=\"id\" href=\"#node\">node</a> &lt; <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>; <a class=\"id\" href=\"#node\">node</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#node_to_cpumask_map\">node_to_cpumask_map</a>[<a class=\"id\" href=\"#node\">node</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_to_node_map\">cpu_to_node_map</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = 0;", 
"}", 
"#else <span class=\"comment\">/* !(CONFIG_NUMA &amp;&amp; CONFIG_X86_32) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#map_cpu_to_node\">map_cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#node\">node</a>)<span class=\"ts\"/>({})", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unmap_cpu_to_node\">unmap_cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)<span class=\"ts\"/>({})", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"static int <a class=\"id\" href=\"#boot_cpu_logical_apicid\">boot_cpu_logical_apicid</a>;", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cpu_2_logical_apicid\">cpu_2_logical_apicid</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>{ [0 ... <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>-1] = <a class=\"id\" href=\"#BAD_APICID\">BAD_APICID</a> };", 
"", 
"static void <a class=\"id\" href=\"#map_cpu_to_logical_apicid\">map_cpu_to_logical_apicid</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#apicid\">apicid</a> = <a class=\"id\" href=\"#logical_smp_processor_id\">logical_smp_processor_id</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>(<a class=\"id\" href=\"#apicid\">apicid</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#node\">node</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#first_online_node\">first_online_node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_2_logical_apicid\">cpu_2_logical_apicid</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#apicid\">apicid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map_cpu_to_node\">map_cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#numa_remove_cpu\">numa_remove_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_2_logical_apicid\">cpu_2_logical_apicid</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#BAD_APICID\">BAD_APICID</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unmap_cpu_to_node\">unmap_cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#map_cpu_to_logical_apicid\">map_cpu_to_logical_apicid</a>()  do {} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Report back to the Boot Processor.</span>", 
"<span class=\"comment\"> * Running on AP.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#smp_callin\">smp_callin</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpuid\">cpuid</a>, <a class=\"id\" href=\"#phys_id\">phys_id</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If waken up by an INIT in an 82489DX configuration</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we may get here before an INIT-deassert IPI reaches</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * our local APIC.  We have to wait for the IPI or we'll</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock up on an APIC access.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#wait_for_init_deassert\">wait_for_init_deassert</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#wait_for_init_deassert\">wait_for_init_deassert</a>(&amp;<a class=\"id\" href=\"#init_deasserted\">init_deasserted</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (This works even if the APIC is not enabled.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_id\">phys_id</a> = <a class=\"id\" href=\"#read_apic_id\">read_apic_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpuid\">cpuid</a>, <a class=\"id\" href=\"#cpu_callin_mask\">cpu_callin_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"%s: phys CPU#%d, CPU#%d already present??\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys_id\">phys_id</a>, <a class=\"id\" href=\"#cpuid\">cpuid</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"CPU#%d (phys ID: %d) waiting for CALLOUT\\n\", <a class=\"id\" href=\"#cpuid\">cpuid</a>, <a class=\"id\" href=\"#phys_id\">phys_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * STARTUP IPIs are fragile beasts as they might sometimes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * trigger some glue motherboard logic. Complete APIC bus</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * silence for 1 second, this overestimates the time the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * boot CPU is spending to send the up to 2 STARTUP IPIs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by a factor of two. This should be enough.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Waiting 2s total for startup (udelay is not yet working)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + 2*<a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#timeout\">timeout</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Has the boot CPU finished it's STARTUP sequence?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpuid\">cpuid</a>, <a class=\"id\" href=\"#cpu_callout_mask\">cpu_callout_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#timeout\">timeout</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"%s: CPU%d started up but did not get a callout!\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#cpuid\">cpuid</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the boot CPU has finished the init stage and is spinning</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on callin_map until we finish. We are free to set up this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPU, first the APIC. (this is probably redundant on most</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * boards)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"CALLIN, before setup_local_APIC().\\n\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#smp_callin_clear_local_apic\">smp_callin_clear_local_apic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#smp_callin_clear_local_apic\">smp_callin_clear_local_apic</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_local_APIC\">setup_local_APIC</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_local_APIC_setup\">end_local_APIC_setup</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map_cpu_to_logical_apicid\">map_cpu_to_logical_apicid</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Need to setup vector mappings before we enable interrupts.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_vector_irq\">setup_vector_irq</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get our bogomips.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Need to enable IRQs because it can take longer and then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the NMI watchdog might kill us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calibrate_delay\">calibrate_delay</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Stack at about %p\\n\", &amp;<a class=\"id\" href=\"#cpuid\">cpuid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Save our processor parameters</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_store_cpu_info\">smp_store_cpu_info</a>(<a class=\"id\" href=\"#cpuid\">cpuid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#notify_cpu_starting\">notify_cpu_starting</a>(<a class=\"id\" href=\"#cpuid\">cpuid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allow the master to continue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpuid\">cpuid</a>, <a class=\"id\" href=\"#cpu_callin_mask\">cpu_callin_mask</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Activate a secondary processor.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#notrace\">notrace</a> static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#start_secondary\">start_secondary</a>(void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't put *anything* before cpu_init(), SMP booting is too</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fragile that we want to limit the things done here to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * most necessary things.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Switch away from the trampoline page-table</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do this before cpu_init() because it needs to access per-cpu</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * data which may not be mapped in the trampoline page-table.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_cr3\">load_cr3</a>(<a class=\"id\" href=\"#swapper_pg_dir\">swapper_pg_dir</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__flush_tlb_all\">__flush_tlb_all</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmi_bringup\">vmi_bringup</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_init\">cpu_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_callin\">smp_callin</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* otherwise gcc will move up smp_processor_id before the cpu_init */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check TSC synchronization with the BP:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_tsc_sync_target\">check_tsc_sync_target</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmi_watchdog\">nmi_watchdog</a> == <a class=\"id\" href=\"#NMI_IO_APIC\">NMI_IO_APIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#mask\">mask</a>(0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_NMI_through_LVT0\">enable_NMI_through_LVT0</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#unmask\">unmask</a>(0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This must be done before setting cpu_online_mask */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_sibling_map\">set_cpu_sibling_map</a>(<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wmb\">wmb</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to hold call_lock, so there is no inconsistency</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * between the time smp_call_function() determines number of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IPI recipients, and the time when the determination is made</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for which cpus receive the IPI. Holding this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock helps us to not include this cpu in a currently in progress</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * smp_call_function().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to hold vector_lock so there the set of online cpus</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * does not change while we are assigning vectors to cpus.  Holding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this lock ensures we don't half assign or remove an irq from a cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipi_call_lock\">ipi_call_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_vector_lock\">lock_vector_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_online\">set_cpu_online</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_vector_lock\">unlock_vector_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipi_call_unlock\">ipi_call_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_state\">cpu_state</a>, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()) = <a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#nmi_init\">nmi_init</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* enable local interrupts */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* to prevent fake stack check failure in clock setup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#boot_init_stack_canary\">boot_init_stack_canary</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_cpuinit\">x86_cpuinit</a>.<a class=\"id\" href=\"#setup_percpu_clockev\">setup_percpu_clockev</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wmb\">wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_idle\">cpu_idle</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CPUMASK_OFFSTACK\">CONFIG_CPUMASK_OFFSTACK</a>", 
"<span class=\"comment\">/* In this case, llc_shared_map is a pointer to a cpumask. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#copy_cpuinfo_x86\">copy_cpuinfo_x86</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#llc\">llc</a> = <a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#llc_shared_map\">llc_shared_map</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dst\">dst</a> = *<a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#llc_shared_map\">llc_shared_map</a> = <a class=\"id\" href=\"#llc\">llc</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#copy_cpuinfo_x86\">copy_cpuinfo_x86</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dst\">dst</a> = *<a class=\"id\" href=\"#src\">src</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_CPUMASK_OFFSTACK */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The bootstrap kernel entry code has set these up. Save them for</span>", 
"<span class=\"comment\"> * a given CPU</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#smp_store_cpu_info\">smp_store_cpu_info</a>(int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a> = &amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copy_cpuinfo_x86\">copy_cpuinfo_x86</a>(<a class=\"id\" href=\"#c\">c</a>, &amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpu_index\">cpu_index</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#identify_secondary_cpu\">identify_secondary_cpu</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"}", 
"", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#set_cpu_sibling_map\">set_cpu_sibling_map</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a> = &amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_sibling_setup_mask\">cpu_sibling_setup_mask</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_num_siblings\">smp_num_siblings</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_sibling_setup_mask\">cpu_sibling_setup_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#o\">o</a> = &amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#phys_proc_id\">phys_proc_id</a> == <a class=\"id\" href=\"#o\">o</a>-><a class=\"id\" href=\"#phys_proc_id\">phys_proc_id</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpu_core_id\">cpu_core_id</a> == <a class=\"id\" href=\"#o\">o</a>-><a class=\"id\" href=\"#cpu_core_id\">cpu_core_id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_sibling_mask\">cpu_sibling_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_sibling_mask\">cpu_sibling_mask</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_core_mask\">cpu_core_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_core_mask\">cpu_core_mask</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#llc_shared_map\">llc_shared_map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#o\">o</a>-><a class=\"id\" href=\"#llc_shared_map\">llc_shared_map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_sibling_mask\">cpu_sibling_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#llc_shared_map\">llc_shared_map</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current_cpu_data\">current_cpu_data</a>.<a class=\"id\" href=\"#x86_max_cores\">x86_max_cores</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#cpu_core_mask\">cpu_core_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cpu_sibling_mask\">cpu_sibling_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#booted_cores\">booted_cores</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_sibling_setup_mask\">cpu_sibling_setup_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_llc_id\">cpu_llc_id</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) != <a class=\"id\" href=\"#BAD_APICID\">BAD_APICID</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_llc_id\">cpu_llc_id</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) == <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_llc_id\">cpu_llc_id</a>, <a class=\"id\" href=\"#i\">i</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#llc_shared_map\">llc_shared_map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#llc_shared_map\">llc_shared_map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#phys_proc_id\">phys_proc_id</a> == <a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#phys_proc_id\">phys_proc_id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu_core_mask\">cpu_core_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_core_mask\">cpu_core_mask</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *  Does this new cpu bringup a new core?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#cpu_sibling_mask\">cpu_sibling_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for each core in package, increment</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the booted_cores for this new cpu</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#cpu_sibling_mask\">cpu_sibling_mask</a>(<a class=\"id\" href=\"#i\">i</a>)) == <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#booted_cores\">booted_cores</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * increment the core count for all</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the other cpus in this package</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#booted_cores\">booted_cores</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#cpu\">cpu</a> && !<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#booted_cores\">booted_cores</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#booted_cores\">booted_cores</a> = <a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#i\">i</a>).<a class=\"id\" href=\"#booted_cores\">booted_cores</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* maps the cpu to the sched domain representing multi-core */</span>", 
"const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpu_coregroup_mask\">cpu_coregroup_mask</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a> = &amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For perf, we return last level cache shared map.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * And for power savings, we return cpu_core_map</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#sched_mc_power_savings\">sched_mc_power_savings</a> || <a class=\"id\" href=\"#sched_smt_power_savings\">sched_smt_power_savings</a>) &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_AMD_DCM\">X86_FEATURE_AMD_DCM</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_core_mask\">cpu_core_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#llc_shared_map\">llc_shared_map</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#impress_friends\">impress_friends</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bogosum\">bogosum</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allow the user to impress friends.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Before bogomips.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_callout_mask\">cpu_callout_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bogosum\">bogosum</a> += <a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"Total of %d processors activated (%lu.%02lu BogoMIPS).\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bogosum\">bogosum</a>/(500000/<a class=\"id\" href=\"#HZ\">HZ</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#bogosum\">bogosum</a>/(5000/<a class=\"id\" href=\"#HZ\">HZ</a>))%100);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Before bogocount - setting activated=1.\\n\");", 
"}", 
"", 
"void <a class=\"id\" href=\"#__inquire_remote_apic\">__inquire_remote_apic</a>(int <a class=\"id\" href=\"#apicid\">apicid</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#regs\">regs</a>[] = { <a class=\"id\" href=\"#APIC_ID\">APIC_ID</a> >> 4, <a class=\"id\" href=\"#APIC_LVR\">APIC_LVR</a> >> 4, <a class=\"id\" href=\"#APIC_SPIV\">APIC_SPIV</a> >> 4 };", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#names\">names</a>[] = { \"ID\", \"VERSION\", \"SPIV\" };", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Inquiring remote APIC 0x%x...\\n\", <a class=\"id\" href=\"#apicid\">apicid</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#regs\">regs</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"... APIC 0x%x %s: \", <a class=\"id\" href=\"#apicid\">apicid</a>, <a class=\"id\" href=\"#names\">names</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Wait for idle.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#safe_apic_wait_icr_idle\">safe_apic_wait_icr_idle</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"a previous APIC delivery may have failed\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_icr_write\">apic_icr_write</a>(<a class=\"id\" href=\"#APIC_DM_REMRD\">APIC_DM_REMRD</a> | <a class=\"id\" href=\"#regs\">regs</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#apicid\">apicid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(100);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ICR\">APIC_ICR</a>) &amp; <a class=\"id\" href=\"#APIC_ICR_RR_MASK\">APIC_ICR_RR_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#APIC_ICR_RR_INPROG\">APIC_ICR_RR_INPROG</a> && <a class=\"id\" href=\"#timeout\">timeout</a>++ &lt; 1000);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#status\">status</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#APIC_ICR_RR_VALID\">APIC_ICR_RR_VALID</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_RRR\">APIC_RRR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"%08x\\n\", <a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"failed\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Poke the other CPU in the eye via NMI to wake it up. Remember that the normal</span>", 
"<span class=\"comment\"> * INIT, INIT, STARTUP sequence will reset the chip hard for us, and this</span>", 
"<span class=\"comment\"> * won't ... remember to clear down the APIC, etc later.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a>", 
"<a class=\"id\" href=\"#wakeup_secondary_cpu_via_nmi\">wakeup_secondary_cpu_via_nmi</a>(int <a class=\"id\" href=\"#logical_apicid\">logical_apicid</a>, unsigned long <a class=\"id\" href=\"#start_eip\">start_eip</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#send_status\">send_status</a>, <a class=\"id\" href=\"#accept_status\">accept_status</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#maxlvt\">maxlvt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Target chip */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Boot on the stack */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Kick the second */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_icr_write\">apic_icr_write</a>(<a class=\"id\" href=\"#APIC_DM_NMI\">APIC_DM_NMI</a> | <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#dest_logical\">dest_logical</a>, <a class=\"id\" href=\"#logical_apicid\">logical_apicid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Waiting for send to finish...\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#send_status\">send_status</a> = <a class=\"id\" href=\"#safe_apic_wait_icr_idle\">safe_apic_wait_icr_idle</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Give the other CPU some time to accept the IPI.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(200);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#APIC_INTEGRATED\">APIC_INTEGRATED</a>(<a class=\"id\" href=\"#apic_version\">apic_version</a>[<a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maxlvt\">maxlvt</a> = <a class=\"id\" href=\"#lapic_get_maxlvt\">lapic_get_maxlvt</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> &gt; 3)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Due to the Pentium erratum 3AP.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#accept_status\">accept_status</a> = (<a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>) &amp; 0xEF);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"NMI sent.\\n\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#send_status\">send_status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"APIC never delivered???\\n\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#accept_status\">accept_status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"APIC delivery error (%lx).\\n\", <a class=\"id\" href=\"#accept_status\">accept_status</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#send_status\">send_status</a> | <a class=\"id\" href=\"#accept_status\">accept_status</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a>", 
"<a class=\"id\" href=\"#wakeup_secondary_cpu_via_init\">wakeup_secondary_cpu_via_init</a>(int <a class=\"id\" href=\"#phys_apicid\">phys_apicid</a>, unsigned long <a class=\"id\" href=\"#start_eip\">start_eip</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#send_status\">send_status</a>, <a class=\"id\" href=\"#accept_status\">accept_status</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#maxlvt\">maxlvt</a>, <a class=\"id\" href=\"#num_starts\">num_starts</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maxlvt\">maxlvt</a> = <a class=\"id\" href=\"#lapic_get_maxlvt\">lapic_get_maxlvt</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Be paranoid about clearing APIC errors.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#APIC_INTEGRATED\">APIC_INTEGRATED</a>(<a class=\"id\" href=\"#apic_version\">apic_version</a>[<a class=\"id\" href=\"#phys_apicid\">phys_apicid</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> &gt; 3)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Due to the Pentium erratum 3AP.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Asserting INIT.\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Turn INIT on target chip</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Send IPI</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_icr_write\">apic_icr_write</a>(<a class=\"id\" href=\"#APIC_INT_LEVELTRIG\">APIC_INT_LEVELTRIG</a> | <a class=\"id\" href=\"#APIC_INT_ASSERT\">APIC_INT_ASSERT</a> | <a class=\"id\" href=\"#APIC_DM_INIT\">APIC_DM_INIT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#phys_apicid\">phys_apicid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Waiting for send to finish...\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#send_status\">send_status</a> = <a class=\"id\" href=\"#safe_apic_wait_icr_idle\">safe_apic_wait_icr_idle</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdelay\">mdelay</a>(10);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Deasserting INIT.\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Target chip */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Send IPI */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_icr_write\">apic_icr_write</a>(<a class=\"id\" href=\"#APIC_INT_LEVELTRIG\">APIC_INT_LEVELTRIG</a> | <a class=\"id\" href=\"#APIC_DM_INIT\">APIC_DM_INIT</a>, <a class=\"id\" href=\"#phys_apicid\">phys_apicid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Waiting for send to finish...\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#send_status\">send_status</a> = <a class=\"id\" href=\"#safe_apic_wait_icr_idle\">safe_apic_wait_icr_idle</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb\">mb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#init_deasserted\">init_deasserted</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Should we send STARTUP IPIs ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Determine this based on the APIC version.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we don't have an integrated APIC, don't send the STARTUP IPIs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#APIC_INTEGRATED\">APIC_INTEGRATED</a>(<a class=\"id\" href=\"#apic_version\">apic_version</a>[<a class=\"id\" href=\"#phys_apicid\">phys_apicid</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_starts\">num_starts</a> = 2;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_starts\">num_starts</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Paravirt / VMI wants a startup IPI hook here to set up the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * target processor state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#startup_ipi_hook\">startup_ipi_hook</a>(<a class=\"id\" href=\"#phys_apicid\">phys_apicid</a>, (unsigned long) <a class=\"id\" href=\"#start_secondary\">start_secondary</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long)<a class=\"id\" href=\"#stack_start\">stack_start</a>.<a class=\"id\" href=\"#sp\">sp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Run STARTUP IPI loop.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"#startup loops: %d.\\n\", <a class=\"id\" href=\"#num_starts\">num_starts</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 1; <a class=\"id\" href=\"#j\">j</a> <= <a class=\"id\" href=\"#num_starts\">num_starts</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Sending STARTUP #%d.\\n\", <a class=\"id\" href=\"#j\">j</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> &gt; 3)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Due to the Pentium erratum 3AP.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"After apic_write.\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * STARTUP IPI</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Target chip */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Boot on the stack */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Kick the second */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_icr_write\">apic_icr_write</a>(<a class=\"id\" href=\"#APIC_DM_STARTUP\">APIC_DM_STARTUP</a> | (<a class=\"id\" href=\"#start_eip\">start_eip</a> >> 12),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#phys_apicid\">phys_apicid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Give the other CPU some time to accept the IPI.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(300);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Startup point 1.\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Waiting for send to finish...\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_status\">send_status</a> = <a class=\"id\" href=\"#safe_apic_wait_icr_idle\">safe_apic_wait_icr_idle</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Give the other CPU some time to accept the IPI.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(200);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> &gt; 3)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Due to the Pentium erratum 3AP.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#accept_status\">accept_status</a> = (<a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>) &amp; 0xEF);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#send_status\">send_status</a> || <a class=\"id\" href=\"#accept_status\">accept_status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"After Startup.\\n\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#send_status\">send_status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"APIC never delivered???\\n\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#accept_status\">accept_status</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"APIC delivery error (%lx).\\n\", <a class=\"id\" href=\"#accept_status\">accept_status</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#send_status\">send_status</a> | <a class=\"id\" href=\"#accept_status\">accept_status</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#create_idle\">create_idle</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#idle\">idle</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#do_fork_idle\">do_fork_idle</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#create_idle\">create_idle</a> *<a class=\"id\" href=\"#c_idle\">c_idle</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#create_idle\">create_idle</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c_idle\">c_idle</a>-><a class=\"id\" href=\"#idle\">idle</a> = <a class=\"id\" href=\"#fork_idle\">fork_idle</a>(<a class=\"id\" href=\"#c_idle\">c_idle</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#c_idle\">c_idle</a>-><a class=\"id\" href=\"#done\">done</a>);", 
"}", 
"", 
"<span class=\"comment\">/* reduce the number of lines printed when booting a large cpu count system */</span>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#announce_cpu\">announce_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#apicid\">apicid</a>)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#current_node\">current_node</a> = -1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#system_state\">system_state</a> == <a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> != <a class=\"id\" href=\"#current_node\">current_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#current_node\">current_node</a> &gt; (-1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_cont\">pr_cont</a>(\" Ok.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_node\">current_node</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Booting Node %3d, Processors \", <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_cont\">pr_cont</a>(\" #%d%s\", <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu\">cpu</a> == (<a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> - 1) ? \" Ok.\\n\" : \"\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Booting Node %d Processor %d APIC 0x%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#apicid\">apicid</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTE - on most systems this is a PHYSICAL apic ID, but on multiquad</span>", 
"<span class=\"comment\"> * (ie clustered apic addressing mode), this is a LOGICAL apic ID.</span>", 
"<span class=\"comment\"> * Returns zero if CPU booted OK, else error code from</span>", 
"<span class=\"comment\"> * -&gt;wakeup_secondary_cpu.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#do_boot_cpu\">do_boot_cpu</a>(int <a class=\"id\" href=\"#apicid\">apicid</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#boot_error\">boot_error</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_ip\">start_ip</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#create_idle\">create_idle</a> <a class=\"id\" href=\"#c_idle\">c_idle</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#cpu\">cpu</a><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#done\">done</a><span class=\"ts\"/>= <a class=\"id\" href=\"#COMPLETION_INITIALIZER_ONSTACK\">COMPLETION_INITIALIZER_ONSTACK</a>(<a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#done\">done</a>),", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK_ON_STACK\">INIT_WORK_ON_STACK</a>(&amp;<a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#do_fork_idle\">do_fork_idle</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alternatives_smp_switch\">alternatives_smp_switch</a>(1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#idle\">idle</a> = <a class=\"id\" href=\"#get_idle_for_cpu\">get_idle_for_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can't use kernel_thread since we must avoid to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reschedule the child.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#idle\">idle</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#idle\">idle</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a> = (unsigned long) (((struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a> +  <a class=\"id\" href=\"#task_stack_page\">task_stack_page</a>(<a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#idle\">idle</a>))) - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_idle\">init_idle</a>(<a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#idle\">idle</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#do_rest\">do_rest</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#done\">done</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#idle\">idle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"failed fork for CPU %d\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy_work_on_stack\">destroy_work_on_stack</a>(&amp;<a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#idle\">idle</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_idle_for_cpu\">set_idle_for_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#idle\">idle</a>);", 
"<a class=\"id\" href=\"#do_rest\">do_rest</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#current_task\">current_task</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#idle\">idle</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Stack for startup_32 can be just as for start_secondary onwards */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_ctx_init\">irq_ctx_init</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#initial_page_table\">initial_page_table</a> = <a class=\"id\" href=\"#__pa\">__pa</a>(&amp;<a class=\"id\" href=\"#trampoline_pg_dir\">trampoline_pg_dir</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_thread_flag\">clear_tsk_thread_flag</a>(<a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#idle\">idle</a>, <a class=\"id\" href=\"#TIF_FORK\">TIF_FORK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#initial_gs\">initial_gs</a> = <a class=\"id\" href=\"#per_cpu_offset\">per_cpu_offset</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#kernel_stack\">kernel_stack</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) =", 
"<span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#task_stack_page\">task_stack_page</a>(<a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#idle\">idle</a>) -", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#KERNEL_STACK_OFFSET\">KERNEL_STACK_OFFSET</a> + <a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_gdt_descr\">early_gdt_descr</a>.<a class=\"id\" href=\"#address\">address</a> = (unsigned long)<a class=\"id\" href=\"#get_cpu_gdt_table\">get_cpu_gdt_table</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#initial_code\">initial_code</a> = (unsigned long)<a class=\"id\" href=\"#start_secondary\">start_secondary</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stack_start\">stack_start</a>.<a class=\"id\" href=\"#sp\">sp</a> = (void *) <a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#idle\">idle</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* start_ip had better be page-aligned! */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_ip\">start_ip</a> = <a class=\"id\" href=\"#setup_trampoline\">setup_trampoline</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* So we see what's up */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#announce_cpu\">announce_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#apicid\">apicid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This grunge runs the startup process for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the targeted processor.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#init_deasserted\">init_deasserted</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_uv_system_type\">get_uv_system_type</a>() != <a class=\"id\" href=\"#UV_NON_UNIQUE_APIC\">UV_NON_UNIQUE_APIC</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Setting warm reset code and vector.\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smpboot_setup_warm_reset_vector\">smpboot_setup_warm_reset_vector</a>(<a class=\"id\" href=\"#start_ip\">start_ip</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Be paranoid about clearing APIC errors.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#APIC_INTEGRATED\">APIC_INTEGRATED</a>(<a class=\"id\" href=\"#apic_version\">apic_version</a>[<a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Kick the secondary CPU. Use the method in the APIC driver</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if it's defined - or use an INIT boot APIC message otherwise:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#wakeup_secondary_cpu\">wakeup_secondary_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boot_error\">boot_error</a> = <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#wakeup_secondary_cpu\">wakeup_secondary_cpu</a>(<a class=\"id\" href=\"#apicid\">apicid</a>, <a class=\"id\" href=\"#start_ip\">start_ip</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boot_error\">boot_error</a> = <a class=\"id\" href=\"#wakeup_secondary_cpu_via_init\">wakeup_secondary_cpu_via_init</a>(<a class=\"id\" href=\"#apicid\">apicid</a>, <a class=\"id\" href=\"#start_ip\">start_ip</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#boot_error\">boot_error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allow APs to start initializing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Before Callout %d.\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_callout_mask\">cpu_callout_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"After Callout %d.\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Wait 5s total for a response</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#timeout\">timeout</a> = 0; <a class=\"id\" href=\"#timeout\">timeout</a> &lt; 50000; <a class=\"id\" href=\"#timeout\">timeout</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_callin_mask\">cpu_callin_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"comment\">/* It has booted */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(100);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Allow other tasks to run while we wait for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * AP to come online. This also gives a chance</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for the MTRR work(triggered by the AP coming online)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to be completed in the stop machine context.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_callin_mask\">cpu_callin_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"CPU%d: has booted.\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boot_error\">boot_error</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*((volatile unsigned char *)<a class=\"id\" href=\"#trampoline_base\">trampoline_base</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>== 0xA5)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* trampoline started but...? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"CPU%d: Stuck ??\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* trampoline code not run */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"CPU%d: Not responding.\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#inquire_remote_apic\">inquire_remote_apic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#inquire_remote_apic\">inquire_remote_apic</a>(<a class=\"id\" href=\"#apicid\">apicid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_error\">boot_error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Try to put things back the way they were before ... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numa_remove_cpu\">numa_remove_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>); <span class=\"comment\">/* was set by numa_add_cpu */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* was set by do_boot_cpu() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_callout_mask\">cpu_callout_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* was set by cpu_init() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_initialized_mask\">cpu_initialized_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_present\">set_cpu_present</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#x86_cpu_to_apicid\">x86_cpu_to_apicid</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#BAD_APICID\">BAD_APICID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mark \"stuck\" area as not stuck */</span>", 
"<span class=\"ts\"/>*((volatile unsigned long *)<a class=\"id\" href=\"#trampoline_base\">trampoline_base</a>) = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_uv_system_type\">get_uv_system_type</a>() != <a class=\"id\" href=\"#UV_NON_UNIQUE_APIC\">UV_NON_UNIQUE_APIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Cleanup possible dangling ends...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smpboot_restore_warm_reset_vector\">smpboot_restore_warm_reset_vector</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_work_on_stack\">destroy_work_on_stack</a>(&amp;<a class=\"id\" href=\"#c_idle\">c_idle</a>.<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#boot_error\">boot_error</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#native_cpu_up\">native_cpu_up</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#apicid\">apicid</a> = <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#cpu_present_to_apicid\">cpu_present_to_apicid</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"++++++++++++++++++++=_---CPU UP  %u\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apicid\">apicid</a> == <a class=\"id\" href=\"#BAD_APICID\">BAD_APICID</a> || <a class=\"id\" href=\"#apicid\">apicid</a> == <a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a> ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#physid_isset\">physid_isset</a>(<a class=\"id\" href=\"#apicid\">apicid</a>, <a class=\"id\" href=\"#phys_cpu_present_map\">phys_cpu_present_map</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: bad cpu %d\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Already booted CPU?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_callin_mask\">cpu_callin_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"do_boot_cpu %d Already started\\n\", <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Save current MTRR state in case it was changed since early boot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (e.g. by the ACPI SMI) to initialize new CPUs with MTRRs in sync:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mtrr_save_state\">mtrr_save_state</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_state\">cpu_state</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_boot_cpu\">do_boot_cpu</a>(<a class=\"id\" href=\"#apicid\">apicid</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"do_boot_cpu failed %d\\n\", <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check TSC synchronization with the AP (keep irqs disabled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * while doing so):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_tsc_sync_source\">check_tsc_sync_source</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fall back to non SMP mode after errors.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RED-PEN audit/test this more. I bet there is more state messed up here.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#disable_smp\">disable_smp</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_cpu_present\">init_cpu_present</a>(<a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(0));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_cpu_possible\">init_cpu_possible</a>(<a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(0));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smpboot_clear_io_apic_irqs\">smpboot_clear_io_apic_irqs</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_found_config\">smp_found_config</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physid_set_mask_of_physid\">physid_set_mask_of_physid</a>(<a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>, &amp;<a class=\"id\" href=\"#phys_cpu_present_map\">phys_cpu_present_map</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physid_set_mask_of_physid\">physid_set_mask_of_physid</a>(0, &amp;<a class=\"id\" href=\"#phys_cpu_present_map\">phys_cpu_present_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map_cpu_to_logical_apicid\">map_cpu_to_logical_apicid</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(0, <a class=\"id\" href=\"#cpu_sibling_mask\">cpu_sibling_mask</a>(0));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(0, <a class=\"id\" href=\"#cpu_core_mask\">cpu_core_mask</a>(0));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Various sanity checks.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#smp_sanity_check\">smp_sanity_check</a>(unsigned <a class=\"id\" href=\"#max_cpus\">max_cpus</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_BIGSMP\">CONFIG_X86_BIGSMP</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>)", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#def_to_bigsmp\">def_to_bigsmp</a> && <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> &gt; 8) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"More than 8 CPUs detected - skipping them.\\n\"", 
];
xr_frag_insert('l/ac/5ac4f0b0ef5869e0f4971a35793c56e9a9f091.xr', __xr_tmp);
