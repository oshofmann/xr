var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NET3:<span class=\"ts\"/>Garbage Collector For AF_UNIX sockets</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Garbage Collector:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copyright (C) Barak A. Pearlmutter.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Released under the GPL version 2 or later.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Chopped about by Alan Cox 22/3/96 to make it fit the AF_UNIX socket problem.</span>", 
"<span class=\"comment\"> * If it doesn't work blame me, it worked when Barak sent it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Assumptions:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - object w/ a bit</span>", 
"<span class=\"comment\"> *  - free list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Current optimizations:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - explicit stack instead of recursion</span>", 
"<span class=\"comment\"> *  - tail recurse on first born instead of immediate push/pop</span>", 
"<span class=\"comment\"> *  - we gather the stuff that should not be killed into tree</span>", 
"<span class=\"comment\"> *    and stack is just a path from root to the current pointer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Future optimizations:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - don't just push entire root set; process in place</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Fixes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Alan Cox<span class=\"ts\"/>07 Sept<span class=\"ts\"/>1997<span class=\"ts\"/>Vmalloc internal stack as needed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Cope with changing max_files.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Al Viro<span class=\"ts\"/><span class=\"ts\"/>11 Oct 1998</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Graph may have cycles. That is, we can send the descriptor</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>of foo to bar and vice versa. Current code chokes on that.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Fix: move SCM_RIGHTS ones into the separate list and then</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>skb_free() them all instead of doing explicit fput's.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Another problem: since fput() may block somebody may</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>create a new unix_socket when we are in the middle of sweep</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>phase. Fix: revert the logic wrt MARKED. Mark everything</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>upon the beginning and unmark non-junk ones.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>[12 Oct 1998] AAARGH! New code purges all SCM_RIGHTS</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>sent to connect()'ed but still not accept()'ed sockets.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Fixed. Old code had slightly different problem here:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>extra fput() in situation when we passed the descriptor via</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>such socket and closed it (descriptor). That would happen on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>each unix_gc() until the accept(). Since the struct file in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>question would go to the free list and might be reused...</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>That might be the reason of random oopses on filp_close()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>in unrelated processes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>AV<span class=\"ts\"/><span class=\"ts\"/>28 Feb 1999</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Kill the explicit allocation of stack. Now we keep the tree</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>with root in dummy + pointer (gc_current) to one of the nodes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Stack is represented as path from gc_current to dummy. Unmark</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>now means \"add to tree\". Push == \"make it a son of gc_current\".</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Pop == \"move gc_current to parent\". We keep only pointers to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>parents (-&gt;gc_tree).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>AV<span class=\"ts\"/><span class=\"ts\"/>1 Mar 1999</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Damn. Added missing check for -&gt;dead in listen queues scanning.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Miklos Szeredi 25 Jun 2007</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Reimplement with a cycle collecting algorithm. This should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>solve several problems with the previous code, like being racy</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>wrt receive and holding up unrelated socket operations.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#un\">un</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#net\">net</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#sock\">sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#af_unix\">af_unix</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#scm\">scm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#tcp_states\">tcp_states</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Internal data structures and random procedures: */</span>", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#gc_inflight_list\">gc_inflight_list</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#gc_candidates\">gc_candidates</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#unix_gc_lock\">unix_gc_lock</a>);", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#unix_gc_wait\">unix_gc_wait</a>);", 
"", 
"unsigned int <a class=\"id\" href=\"#unix_tot_inflight\">unix_tot_inflight</a>;", 
"", 
"", 
"static struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#unix_get_socket\">unix_get_socket</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#u_sock\">u_sock</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Socket ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISSOCK\">S_ISSOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a> = <a class=\"id\" href=\"#SOCKET_I\">SOCKET_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#sk\">sk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>PF_UNIX ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a> && <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#ops\">ops</a> && <a class=\"id\" href=\"#sock\">sock</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#family\">family</a> == <a class=\"id\" href=\"#PF_UNIX\">PF_UNIX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u_sock\">u_sock</a> = <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#u_sock\">u_sock</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Keep the number of times in flight count for the file</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>descriptor if it is for an AF_UNIX socket.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#unix_inflight\">unix_inflight</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#fp\">fp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#unix_get_socket\">unix_get_socket</a>(<a class=\"id\" href=\"#fp\">fp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a> *<a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#unix_sk\">unix_sk</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#unix_gc_lock\">unix_gc_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_long_inc_return\">atomic_long_inc_return</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#inflight\">inflight</a>) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#link\">link</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#gc_inflight_list\">gc_inflight_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#link\">link</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unix_tot_inflight\">unix_tot_inflight</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#unix_gc_lock\">unix_gc_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#unix_notinflight\">unix_notinflight</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#fp\">fp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#unix_get_socket\">unix_get_socket</a>(<a class=\"id\" href=\"#fp\">fp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a> *<a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#unix_sk\">unix_sk</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#unix_gc_lock\">unix_gc_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#link\">link</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_long_dec_and_test\">atomic_long_dec_and_test</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#inflight\">inflight</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unix_tot_inflight\">unix_tot_inflight</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#unix_gc_lock\">unix_gc_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#scan_inflight\">scan_inflight</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#x\">x</a>, void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a> *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#hitlist\">hitlist</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#sk_receive_queue\">sk_receive_queue</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_walk_safe\">skb_queue_walk_safe</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#sk_receive_queue\">sk_receive_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>Do we have file descriptors ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#UNIXCB\">UNIXCB</a>(<a class=\"id\" href=\"#skb\">skb</a>).<a class=\"id\" href=\"#fp\">fp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#hit\">hit</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>Process the descriptors of this socket</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nfd\">nfd</a> = <a class=\"id\" href=\"#UNIXCB\">UNIXCB</a>(<a class=\"id\" href=\"#skb\">skb</a>).<a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> **<a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#UNIXCB\">UNIXCB</a>(<a class=\"id\" href=\"#skb\">skb</a>).<a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#fp\">fp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#nfd\">nfd</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>Get the socket the fd matches</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *<span class=\"ts\"/>if it indeed does so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#unix_get_socket\">unix_get_socket</a>(*<a class=\"id\" href=\"#fp\">fp</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a> *<a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#unix_sk\">unix_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Ignore non-candidates, they could</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * have been added to the queues after</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * starting the garbage collection</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#gc_candidate\">gc_candidate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hit\">hit</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#u\">u</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hit\">hit</a> && <a class=\"id\" href=\"#hitlist\">hitlist</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_unlink\">__skb_unlink</a>(<a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#sk_receive_queue\">sk_receive_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_tail\">__skb_queue_tail</a>(<a class=\"id\" href=\"#hitlist\">hitlist</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#sk_receive_queue\">sk_receive_queue</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#scan_children\">scan_children</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#x\">x</a>, void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a> *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#hitlist\">hitlist</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a> != <a class=\"id\" href=\"#TCP_LISTEN\">TCP_LISTEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scan_inflight\">scan_inflight</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#hitlist\">hitlist</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a> *<a class=\"id\" href=\"#u\">u</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#embryos\">embryos</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For a listening socket collect the queued embryos</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and perform a scan on them as well.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#sk_receive_queue\">sk_receive_queue</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_walk_safe\">skb_queue_walk_safe</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#sk_receive_queue\">sk_receive_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#unix_sk\">unix_sk</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * An embryo cannot be in-flight, so it's safe</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to use the list link.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#link\">link</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#embryos\">embryos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#sk_receive_queue\">sk_receive_queue</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#embryos\">embryos</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#embryos\">embryos</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a>, <a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scan_inflight\">scan_inflight</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#hitlist\">hitlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dec_inflight\">dec_inflight</a>(struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a> *<a class=\"id\" href=\"#usk\">usk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_dec\">atomic_long_dec</a>(&amp;<a class=\"id\" href=\"#usk\">usk</a>-><a class=\"id\" href=\"#inflight\">inflight</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#inc_inflight\">inc_inflight</a>(struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a> *<a class=\"id\" href=\"#usk\">usk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_inc\">atomic_long_inc</a>(&amp;<a class=\"id\" href=\"#usk\">usk</a>-><a class=\"id\" href=\"#inflight\">inflight</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#inc_inflight_move_tail\">inc_inflight_move_tail</a>(struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a> *<a class=\"id\" href=\"#u\">u</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_inc\">atomic_long_inc</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#inflight\">inflight</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this still might be part of a cycle, move it to the end</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the list, so that it's checked even if it was already</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * passed over</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#gc_maybe_cycle\">gc_maybe_cycle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#gc_candidates\">gc_candidates</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#gc_in_progress\">gc_in_progress</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"void <a class=\"id\" href=\"#wait_for_unix_gc\">wait_for_unix_gc</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_event\">wait_event</a>(<a class=\"id\" href=\"#unix_gc_wait\">unix_gc_wait</a>, <a class=\"id\" href=\"#gc_in_progress\">gc_in_progress</a> == <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"", 
"<span class=\"comment\">/* The external entry point: unix_gc() */</span>", 
"void <a class=\"id\" href=\"#unix_gc\">unix_gc</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a> *<a class=\"id\" href=\"#u\">u</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> <a class=\"id\" href=\"#hitlist\">hitlist</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#cursor\">cursor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#not_cycle_list\">not_cycle_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#unix_gc_lock\">unix_gc_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Avoid a recursive GC. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gc_in_progress\">gc_in_progress</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gc_in_progress\">gc_in_progress</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First, select candidates for garbage collection.  Only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in-flight sockets are considered, and from those only ones</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which don't have any external reference.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Holding unix_gc_lock will protect these candidates from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * being detached, and hence from gaining an external</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reference.  Since there are no possible receivers, all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buffers currently on the candidates' queues stay there</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * during the garbage collection.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We also know that no new candidate can be added onto the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * receive queues.  Other, non candidate sockets _can_ be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * added to queue, so we must make sure only to touch</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * candidates.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#u\">u</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#gc_inflight_list\">gc_inflight_list</a>, <a class=\"id\" href=\"#link\">link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#total_refs\">total_refs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#inflight_refs\">inflight_refs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_refs\">total_refs</a> = <a class=\"id\" href=\"#file_count\">file_count</a>(<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#sk\">sk</a>.<a class=\"id\" href=\"#sk_socket\">sk_socket</a>-><a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inflight_refs\">inflight_refs</a> = <a class=\"id\" href=\"#atomic_long_read\">atomic_long_read</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#inflight\">inflight</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#inflight_refs\">inflight_refs</a> &lt; 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#total_refs\">total_refs</a> &lt; <a class=\"id\" href=\"#inflight_refs\">inflight_refs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#total_refs\">total_refs</a> == <a class=\"id\" href=\"#inflight_refs\">inflight_refs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#gc_candidates\">gc_candidates</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#gc_candidate\">gc_candidate</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#gc_maybe_cycle\">gc_maybe_cycle</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now remove all internal in-flight reference to children of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the candidates.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#u\">u</a>, &amp;<a class=\"id\" href=\"#gc_candidates\">gc_candidates</a>, <a class=\"id\" href=\"#link\">link</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scan_children\">scan_children</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#dec_inflight\">dec_inflight</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Restore the references for children of all candidates,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which have remaining references.  Do this recursively, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only those remain, which form cyclic references.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use a \"cursor\" link, to make the list traversal safe, even</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * though elements might be moved about.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cursor\">cursor</a>, &amp;<a class=\"id\" href=\"#gc_candidates\">gc_candidates</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cursor\">cursor</a>.<a class=\"id\" href=\"#next\">next</a> != &amp;<a class=\"id\" href=\"#gc_candidates\">gc_candidates</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#cursor\">cursor</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a>, <a class=\"id\" href=\"#link\">link</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Move cursor to after the current position. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#cursor\">cursor</a>, &amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#link\">link</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_long_read\">atomic_long_read</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#inflight\">inflight</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#not_cycle_list\">not_cycle_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#gc_maybe_cycle\">gc_maybe_cycle</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scan_children\">scan_children</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#inc_inflight_move_tail\">inc_inflight_move_tail</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#cursor\">cursor</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not_cycle_list contains those sockets which do not make up a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cycle.  Restore these to the inflight list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#not_cycle_list\">not_cycle_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#not_cycle_list\">not_cycle_list</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#unix_sock\">unix_sock</a>, <a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#gc_candidate\">gc_candidate</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#gc_inflight_list\">gc_inflight_list</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now gc_candidates contains only garbage.  Restore original</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inflight counters for these as well, and remove the skbuffs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which are creating the cycle(s).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_head_init\">skb_queue_head_init</a>(&amp;<a class=\"id\" href=\"#hitlist\">hitlist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#u\">u</a>, &amp;<a class=\"id\" href=\"#gc_candidates\">gc_candidates</a>, <a class=\"id\" href=\"#link\">link</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scan_children\">scan_children</a>(&amp;<a class=\"id\" href=\"#u\">u</a>-><a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#inc_inflight\">inc_inflight</a>, &amp;<a class=\"id\" href=\"#hitlist\">hitlist</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#unix_gc_lock\">unix_gc_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Here we are. Hitlist is filled. Die. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_purge\">__skb_queue_purge</a>(&amp;<a class=\"id\" href=\"#hitlist\">hitlist</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#unix_gc_lock\">unix_gc_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All candidates should have been detached by now. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#gc_candidates\">gc_candidates</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gc_in_progress\">gc_in_progress</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#unix_gc_wait\">unix_gc_wait</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#unix_gc_lock\">unix_gc_lock</a>);", 
"}", 
];
xr_frag_insert('l/ac/da05490d5443906971c9eb22182f755feabf1d.xr', __xr_tmp);
