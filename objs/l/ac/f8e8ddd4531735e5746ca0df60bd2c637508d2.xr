var __xr_tmp = [
"<span class=\"comment\">/************************************************************</span>", 
"<span class=\"comment\"> * EFI GUID Partition Table handling</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * http://www.uefi.org/specs/</span>", 
"<span class=\"comment\"> * http://www.intel.com/technology/efi/</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * efi.[ch] by Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> *   Copyright 2000,2001,2002,2004 Dell Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> *  (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> *  GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> *  along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * TODO:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Changelog:</span>", 
"<span class=\"comment\"> * Mon Nov 09 2004 Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * - test for valid PMBR and valid PGPT before ever reading</span>", 
"<span class=\"comment\"> *   AGPT, allow override with 'gpt' kernel command line option.</span>", 
"<span class=\"comment\"> * - check for first/last_usable_lba outside of size of disk</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Tue  Mar 26 2002 Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * - Ported to 2.5.7-pre1 and 2.5.7-dj2</span>", 
"<span class=\"comment\"> * - Applied patch to avoid fault in alternate header handling</span>", 
"<span class=\"comment\"> * - cleaned up find_valid_gpt</span>", 
"<span class=\"comment\"> * - On-disk structure and copy in memory is *always* LE now - </span>", 
"<span class=\"comment\"> *   swab fields as needed</span>", 
"<span class=\"comment\"> * - remove print_gpt_header()</span>", 
"<span class=\"comment\"> * - only use first max_p partition entries, to keep the kernel minor number</span>", 
"<span class=\"comment\"> *   and partition numbers tied.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mon  Feb 04 2002 Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * - Removed __PRIPTR_PREFIX - not being used</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mon  Jan 14 2002 Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * - Ported to 2.5.2-pre11 + library crc32 patch Linus applied</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Thu Dec 6 2001 Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * - Added compare_gpts().</span>", 
"<span class=\"comment\"> * - moved le_efi_guid_to_cpus() back into this file.  GPT is the only</span>", 
"<span class=\"comment\"> *   thing that keeps EFI GUIDs on disk.</span>", 
"<span class=\"comment\"> * - Changed gpt structure names and members to be simpler and more Linux-like.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * Wed Oct 17 2001 Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * - Removed CONFIG_DEVFS_VOLUMES_UUID code entirely per Martin Wilck</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Wed Oct 10 2001 Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * - Changed function comments to DocBook style per Andreas Dilger suggestion.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mon Oct 08 2001 Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * - Change read_lba() to use the page cache per Al Viro's work.</span>", 
"<span class=\"comment\"> * - print u64s properly on all architectures</span>", 
"<span class=\"comment\"> * - fixed debug_printk(), now Dprintk()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mon Oct 01 2001 Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * - Style cleanups</span>", 
"<span class=\"comment\"> * - made most functions static</span>", 
"<span class=\"comment\"> * - Endianness addition</span>", 
"<span class=\"comment\"> * - remove test for second alternate header, as it's not per spec,</span>", 
"<span class=\"comment\"> *   and is unnecessary.  There's now a method to read/write the last</span>", 
"<span class=\"comment\"> *   sector of an odd-sized disk from user space.  No tools have ever</span>", 
"<span class=\"comment\"> *   been released which used this code, so it's effectively dead.</span>", 
"<span class=\"comment\"> * - Per Asit Mallick of Intel, added a test for a valid PMBR.</span>", 
"<span class=\"comment\"> * - Added kernel command line option 'gpt' to override valid PMBR test.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Wed Jun  6 2001 Martin Wilck &lt;Martin.Wilck@Fujitsu-Siemens.com&gt;</span>", 
"<span class=\"comment\"> * - added devfs volume UUID support (/dev/volumes/uuids) for</span>", 
"<span class=\"comment\"> *   mounting file systems by the partition GUID. </span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Tue Dec  5 2000 Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * - Moved crc32() to linux/lib, added efi_crc32().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Thu Nov 30 2000 Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * - Replaced Intel's CRC32 function with an equivalent</span>", 
"<span class=\"comment\"> *   non-license-restricted version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Wed Oct 25 2000 Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * - Fixed the last_lba() call to return the proper last block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Thu Oct 12 2000 Matt Domsch &lt;Matt_Domsch@dell.com&gt;</span>", 
"<span class=\"comment\"> * - Thanks to Andries Brouwer for his debugging assistance.</span>", 
"<span class=\"comment\"> * - Code works, detects all the partitions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ************************************************************/</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#crc32\">crc32</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#math64\">math64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"check.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"efi.h\"", 
"", 
"<span class=\"comment\">/* This allows a kernel command line option 'gpt' to override</span>", 
"<span class=\"comment\"> * the test for invalid PMBR.  Not __initdata because reloading</span>", 
"<span class=\"comment\"> * the partition tables happens after init too.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#force_gpt\">force_gpt</a>;", 
"static int <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#force_gpt_fn\">force_gpt_fn</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_gpt\">force_gpt</a> = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"gpt\", <a class=\"id\" href=\"#force_gpt_fn\">force_gpt_fn</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * efi_crc32() - EFI version of crc32 function</span>", 
"<span class=\"comment\"> * @buf: buffer to calculate crc32 of</span>", 
"<span class=\"comment\"> * @len - length of buf</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Returns EFI-style CRC32 value for @buf</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * This function uses the little endian Ethernet polynomial</span>", 
"<span class=\"comment\"> * but seeds the function with ~0, and xor's with ~0 at the end.</span>", 
"<span class=\"comment\"> * Note, the EFI Specification, v1.02, has a reference to</span>", 
"<span class=\"comment\"> * Dr. Dobbs Journal, May 1994 (actually it's in May 1992).</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a>", 
"<a class=\"id\" href=\"#efi_crc32\">efi_crc32</a>(const void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#crc32\">crc32</a>(~0L, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>) ^ ~0L);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * last_lba(): return number of last logical block of device</span>", 
"<span class=\"comment\"> * @bdev: block device</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * Description: Returns last LBA value on success, 0 on error.</span>", 
"<span class=\"comment\"> * This is stored (by sd and ide-geometry) in</span>", 
"<span class=\"comment\"> *  the part[0] entry for this disk, and is the number of</span>", 
"<span class=\"comment\"> *  physical sectors available on the disk.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#last_lba\">last_lba</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdev\">bdev</a> || !<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#div_u64\">div_u64</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bdev_logical_block_size\">bdev_logical_block_size</a>(<a class=\"id\" href=\"#bdev\">bdev</a>)) - 1ULL;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#pmbr_part_valid\">pmbr_part_valid</a>(struct <a class=\"id\" href=\"#partition\">partition</a> *<a class=\"id\" href=\"#part\">part</a>)", 
"{", 
"        if (<a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#sys_ind\">sys_ind</a> == <a class=\"id\" href=\"#EFI_PMBR_OSTYPE_EFI_GPT\">EFI_PMBR_OSTYPE_EFI_GPT</a> &&", 
"            <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#start_sect\">start_sect</a>) == 1UL)", 
"                return 1;", 
"        return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_pmbr_valid(): test Protective MBR for validity</span>", 
"<span class=\"comment\"> * @mbr: pointer to a legacy mbr structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Returns 1 if PMBR is valid, 0 otherwise.</span>", 
"<span class=\"comment\"> * Validity depends on two things:</span>", 
"<span class=\"comment\"> *  1) MSDOS signature is in the last two bytes of the MBR</span>", 
"<span class=\"comment\"> *  2) One partition of type 0xEE is found</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#is_pmbr_valid\">is_pmbr_valid</a>(<a class=\"id\" href=\"#legacy_mbr\">legacy_mbr</a> *<a class=\"id\" href=\"#mbr\">mbr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mbr\">mbr</a> || <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#mbr\">mbr</a>-><a class=\"id\" href=\"#signature\">signature</a>) != <a class=\"id\" href=\"#MSDOS_MBR_SIGNATURE\">MSDOS_MBR_SIGNATURE</a>)", 
"                return 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pmbr_part_valid\">pmbr_part_valid</a>(&amp;<a class=\"id\" href=\"#mbr\">mbr</a>-><a class=\"id\" href=\"#partition_record\">partition_record</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"                        return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * read_lba(): Read bytes from disk, starting at given LBA</span>", 
"<span class=\"comment\"> * @state</span>", 
"<span class=\"comment\"> * @lba</span>", 
"<span class=\"comment\"> * @buffer</span>", 
"<span class=\"comment\"> * @size_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Reads @count bytes from @state-&gt;bdev into @buffer.</span>", 
"<span class=\"comment\"> * Returns number of bytes read on success, 0 on error.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#read_lba\">read_lba</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#lba\">lba</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#totalreadcount\">totalreadcount</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#lba\">lba</a> * (<a class=\"id\" href=\"#bdev_logical_block_size\">bdev_logical_block_size</a>(<a class=\"id\" href=\"#bdev\">bdev</a>) / 512);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a> || <a class=\"id\" href=\"#lba\">lba</a> &gt; <a class=\"id\" href=\"#last_lba\">last_lba</a>(<a class=\"id\" href=\"#bdev\">bdev</a>))", 
"                return 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#copied\">copied</a> = 512;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#Sector\">Sector</a> <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#read_part_sector\">read_part_sector</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#n\">n</a>++, &amp;<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copied\">copied</a> &gt; <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#copied\">copied</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_dev_sector\">put_dev_sector</a>(<a class=\"id\" href=\"#sect\">sect</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> += <a class=\"id\" href=\"#copied\">copied</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#totalreadcount\">totalreadcount</a> +=<a class=\"id\" href=\"#copied\">copied</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= <a class=\"id\" href=\"#copied\">copied</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#totalreadcount\">totalreadcount</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * alloc_read_gpt_entries(): reads partition entries from disk</span>", 
"<span class=\"comment\"> * @state</span>", 
"<span class=\"comment\"> * @gpt - GPT header</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * Description: Returns ptes on success,  NULL on error.</span>", 
"<span class=\"comment\"> * Allocates space for PTEs based on information found in @gpt.</span>", 
"<span class=\"comment\"> * Notes: remember to free pte when you're done!</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#gpt_entry\">gpt_entry</a> *<a class=\"id\" href=\"#alloc_read_gpt_entries\">alloc_read_gpt_entries</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#gpt_header\">gpt_header</a> *<a class=\"id\" href=\"#gpt\">gpt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpt_entry\">gpt_entry</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gpt\">gpt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#gpt\">gpt</a>-><a class=\"id\" href=\"#num_partition_entries\">num_partition_entries</a>) *", 
"                <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#gpt\">gpt</a>-><a class=\"id\" href=\"#sizeof_partition_entry\">sizeof_partition_entry</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_lba\">read_lba</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(<a class=\"id\" href=\"#gpt\">gpt</a>-><a class=\"id\" href=\"#partition_entry_lba\">partition_entry_lba</a>),", 
"                     (<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#pte\">pte</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#count\">count</a>) &lt; <a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"                <a class=\"id\" href=\"#pte\">pte</a>=<a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pte\">pte</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * alloc_read_gpt_header(): Allocates GPT header, reads into it from disk</span>", 
"<span class=\"comment\"> * @state</span>", 
"<span class=\"comment\"> * @lba is the Logical Block Address of the partition table</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * Description: returns GPT header on success, NULL on error.   Allocates</span>", 
"<span class=\"comment\"> * and fills a GPT header starting at @ from @state-&gt;bdev.</span>", 
"<span class=\"comment\"> * Note: remember to free gpt when finished with it.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#gpt_header\">gpt_header</a> *<a class=\"id\" href=\"#alloc_read_gpt_header\">alloc_read_gpt_header</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#lba\">lba</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpt_header\">gpt_header</a> *<a class=\"id\" href=\"#gpt\">gpt</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#ssz\">ssz</a> = <a class=\"id\" href=\"#bdev_logical_block_size\">bdev_logical_block_size</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bdev\">bdev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpt\">gpt</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#ssz\">ssz</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gpt\">gpt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read_lba\">read_lba</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#lba\">lba</a>, (<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#gpt\">gpt</a>, <a class=\"id\" href=\"#ssz\">ssz</a>) &lt; <a class=\"id\" href=\"#ssz\">ssz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#gpt\">gpt</a>);", 
"                <a class=\"id\" href=\"#gpt\">gpt</a>=<a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#gpt\">gpt</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_gpt_valid() - tests one GPT header and PTEs for validity</span>", 
"<span class=\"comment\"> * @state</span>", 
"<span class=\"comment\"> * @lba is the logical block address of the GPT header to test</span>", 
"<span class=\"comment\"> * @gpt is a GPT header ptr, filled on return.</span>", 
"<span class=\"comment\"> * @ptes is a PTEs ptr, filled on return.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: returns 1 if valid,  0 on error.</span>", 
"<span class=\"comment\"> * If valid, returns pointers to newly allocated GPT header and PTEs.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#is_gpt_valid\">is_gpt_valid</a>(struct <a class=\"id\" href=\"#parsed_partitions\">parsed_partitions</a> *<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#lba\">lba</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpt_header\">gpt_header</a> **<a class=\"id\" href=\"#gpt\">gpt</a>, <a class=\"id\" href=\"#gpt_entry\">gpt_entry</a> **<a class=\"id\" href=\"#ptes\">ptes</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#crc\">crc</a>, <a class=\"id\" href=\"#origcrc\">origcrc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#lastlba\">lastlba</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptes\">ptes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!(*<a class=\"id\" href=\"#gpt\">gpt</a> = <a class=\"id\" href=\"#alloc_read_gpt_header\">alloc_read_gpt_header</a>(<a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#lba\">lba</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check the GUID Partition Table signature */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>((*<a class=\"id\" href=\"#gpt\">gpt</a>)-><a class=\"id\" href=\"#signature\">signature</a>) != <a class=\"id\" href=\"#GPT_HEADER_SIGNATURE\">GPT_HEADER_SIGNATURE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"GUID Partition Table Header signature is wrong:\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"%lld != %lld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long long)<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>((*<a class=\"id\" href=\"#gpt\">gpt</a>)-><a class=\"id\" href=\"#signature\">signature</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long long)<a class=\"id\" href=\"#GPT_HEADER_SIGNATURE\">GPT_HEADER_SIGNATURE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check the GUID Partition Table CRC */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#origcrc\">origcrc</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>((*<a class=\"id\" href=\"#gpt\">gpt</a>)-><a class=\"id\" href=\"#header_crc32\">header_crc32</a>);", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#gpt\">gpt</a>)-><a class=\"id\" href=\"#header_crc32\">header_crc32</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = <a class=\"id\" href=\"#efi_crc32\">efi_crc32</a>((const unsigned char *) (*<a class=\"id\" href=\"#gpt\">gpt</a>), <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>((*<a class=\"id\" href=\"#gpt\">gpt</a>)-><a class=\"id\" href=\"#header_size\">header_size</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#crc\">crc</a> != <a class=\"id\" href=\"#origcrc\">origcrc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"GUID Partition Table Header CRC is wrong: %x != %x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#crc\">crc</a>, <a class=\"id\" href=\"#origcrc\">origcrc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#gpt\">gpt</a>)-><a class=\"id\" href=\"#header_crc32\">header_crc32</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#origcrc\">origcrc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check that the my_lba entry points to the LBA that contains</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the GUID Partition Table */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>((*<a class=\"id\" href=\"#gpt\">gpt</a>)-><a class=\"id\" href=\"#my_lba\">my_lba</a>) != <a class=\"id\" href=\"#lba\">lba</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"GPT my_lba incorrect: %lld != %lld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long long)<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>((*<a class=\"id\" href=\"#gpt\">gpt</a>)-><a class=\"id\" href=\"#my_lba\">my_lba</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long long)<a class=\"id\" href=\"#lba\">lba</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check the first_usable_lba and last_usable_lba are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * within the disk.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lastlba\">lastlba</a> = <a class=\"id\" href=\"#last_lba\">last_lba</a>(<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>((*<a class=\"id\" href=\"#gpt\">gpt</a>)-><a class=\"id\" href=\"#first_usable_lba\">first_usable_lba</a>) &gt; <a class=\"id\" href=\"#lastlba\">lastlba</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"GPT: first_usable_lba incorrect: %lld > %lld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long long)<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>((*<a class=\"id\" href=\"#gpt\">gpt</a>)-><a class=\"id\" href=\"#first_usable_lba\">first_usable_lba</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long long)<a class=\"id\" href=\"#lastlba\">lastlba</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>((*<a class=\"id\" href=\"#gpt\">gpt</a>)-><a class=\"id\" href=\"#last_usable_lba\">last_usable_lba</a>) &gt; <a class=\"id\" href=\"#lastlba\">lastlba</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"GPT: last_usable_lba incorrect: %lld > %lld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long long)<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>((*<a class=\"id\" href=\"#gpt\">gpt</a>)-><a class=\"id\" href=\"#last_usable_lba\">last_usable_lba</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long long)<a class=\"id\" href=\"#lastlba\">lastlba</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!(*<a class=\"id\" href=\"#ptes\">ptes</a> = <a class=\"id\" href=\"#alloc_read_gpt_entries\">alloc_read_gpt_entries</a>(<a class=\"id\" href=\"#state\">state</a>, *<a class=\"id\" href=\"#gpt\">gpt</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check the GUID Partition Entry Array CRC */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crc\">crc</a> = <a class=\"id\" href=\"#efi_crc32\">efi_crc32</a>((const unsigned char *) (*<a class=\"id\" href=\"#ptes\">ptes</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>((*<a class=\"id\" href=\"#gpt\">gpt</a>)-><a class=\"id\" href=\"#num_partition_entries\">num_partition_entries</a>) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>((*<a class=\"id\" href=\"#gpt\">gpt</a>)-><a class=\"id\" href=\"#sizeof_partition_entry\">sizeof_partition_entry</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#crc\">crc</a> != <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>((*<a class=\"id\" href=\"#gpt\">gpt</a>)-><a class=\"id\" href=\"#partition_entry_array_crc32\">partition_entry_array_crc32</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"GUID Partitition Entry Array CRC check failed.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_ptes\">fail_ptes</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We're done, all's well */</span>", 
"<span class=\"ts\"/>return 1;", 
"", 
" <a class=\"id\" href=\"#fail_ptes\">fail_ptes</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(*<a class=\"id\" href=\"#ptes\">ptes</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ptes\">ptes</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
" <a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(*<a class=\"id\" href=\"#gpt\">gpt</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#gpt\">gpt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_pte_valid() - tests one PTE for validity</span>", 
];
xr_frag_insert('l/ac/f8e8ddd4531735e5746ca0df60bd2c637508d2.xr', __xr_tmp);
