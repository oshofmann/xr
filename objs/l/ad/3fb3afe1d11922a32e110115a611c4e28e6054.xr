var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ns_internalize_name\">ns_internalize_name</a>);", 
"", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#external_name\">external_name</a>) || (*<a class=\"id\" href=\"#external_name\">external_name</a> == 0) || (!<a class=\"id\" href=\"#converted_name\">converted_name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the length of the new internal name */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#external_name\">external_name</a> = <a class=\"id\" href=\"#external_name\">external_name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ns_get_internal_name_length\">acpi_ns_get_internal_name_length</a>(&amp;<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We need a segment to store the internal  name */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#internal_name\">internal_name</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE_ZEROED\">ACPI_ALLOCATE_ZEROED</a>(<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#internal_name\">internal_name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Build the name */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#internal_name\">internal_name</a> = <a class=\"id\" href=\"#internal_name\">internal_name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_build_internal_name\">acpi_ns_build_internal_name</a>(&amp;<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#internal_name\">internal_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#converted_name\">converted_name</a> = <a class=\"id\" href=\"#internal_name\">internal_name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_externalize_name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  internal_name_length - Lenth of the internal name below</span>", 
"<span class=\"comment\"> *              internal_name       - Internal representation of name</span>", 
"<span class=\"comment\"> *              converted_name_length - Where the length is returned</span>", 
"<span class=\"comment\"> *              converted_name      - Where the resulting external name</span>", 
"<span class=\"comment\"> *                                    is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Convert internal name (e.g. 5c 2f 02 5f 50 52 5f 43 50 55 30)</span>", 
"<span class=\"comment\"> *              to its external (printable) form (e.g. \"\\_PR_.CPU0\")</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_externalize_name\">acpi_ns_externalize_name</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#internal_name_length\">internal_name_length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#internal_name\">internal_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u32\">u32</a> * <a class=\"id\" href=\"#converted_name_length\">converted_name_length</a>, char **<a class=\"id\" href=\"#converted_name\">converted_name</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#names_index\">names_index</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#num_segments\">num_segments</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#required_length\">required_length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#prefix_length\">prefix_length</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#j\">j</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ns_externalize_name\">ns_externalize_name</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#internal_name_length\">internal_name_length</a> || !<a class=\"id\" href=\"#internal_name\">internal_name</a> || !<a class=\"id\" href=\"#converted_name\">converted_name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for a prefix (one '\\' | one or more '^') */</span>", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#internal_name\">internal_name</a>[0]) {", 
"<span class=\"ts\"/>case '\\\\':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefix_length\">prefix_length</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case '^':", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#internal_name_length\">internal_name_length</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#internal_name\">internal_name</a>[<a class=\"id\" href=\"#i\">i</a>] == '^') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefix_length\">prefix_length</a> = <a class=\"id\" href=\"#i\">i</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#internal_name_length\">internal_name_length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefix_length\">prefix_length</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for object names. Note that there could be 0-255 of these</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 4-byte elements.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prefix_length\">prefix_length</a> &lt; <a class=\"id\" href=\"#internal_name_length\">internal_name_length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#internal_name\">internal_name</a>[<a class=\"id\" href=\"#prefix_length\">prefix_length</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#AML_MULTI_NAME_PREFIX_OP\">AML_MULTI_NAME_PREFIX_OP</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* &lt;count&gt; 4-byte names */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#names_index\">names_index</a> = <a class=\"id\" href=\"#prefix_length\">prefix_length</a> + 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_segments\">num_segments</a> = (<a class=\"id\" href=\"#u8\">u8</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#internal_name\">internal_name</a>[(<a class=\"id\" href=\"#acpi_size\">acpi_size</a>) <a class=\"id\" href=\"#prefix_length\">prefix_length</a> + 1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#AML_DUAL_NAME_PREFIX\">AML_DUAL_NAME_PREFIX</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Two 4-byte names */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#names_index\">names_index</a> = <a class=\"id\" href=\"#prefix_length\">prefix_length</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_segments\">num_segments</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case 0:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* null_name */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#names_index\">names_index</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_segments\">num_segments</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* one 4-byte name */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#names_index\">names_index</a> = <a class=\"id\" href=\"#prefix_length\">prefix_length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_segments\">num_segments</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Calculate the length of converted_name, which equals the length</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the prefix, length of all object names, length of any required</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * punctuation ('.') between object names, plus the NULL terminator.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
];
xr_frag_insert('l/ad/3fb3afe1d11922a32e110115a611c4e28e6054.xr', __xr_tmp);
