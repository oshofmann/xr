var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/pipe.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992, 1999  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#log2\">log2</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pipe_fs_i\">pipe_fs_i</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uio\">uio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fcntl\">fcntl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#ioctls\">ioctls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The max size that a non-root user is allowed to grow the pipe. Can</span>", 
"<span class=\"comment\"> * be set by root in /proc/sys/fs/pipe-max-size</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#pipe_max_size\">pipe_max_size</a> = 1048576;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Minimum pipe size, as required by POSIX</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#pipe_min_size\">pipe_min_size</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We use a start+len construction, which provides full use of the </span>", 
"<span class=\"comment\"> * allocated memory.</span>", 
"<span class=\"comment\"> * -- Florian Coosmann (FGC)</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * Reads with count = 0 should always return 0.</span>", 
"<span class=\"comment\"> * -- Julian Bradfield 1999-06-07.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FIFOs and Pipes now generate SIGIO for both readers and writers.</span>", 
"<span class=\"comment\"> * -- Jeremy Elson &lt;jelson@circlemud.org&gt; 2001-08-16</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * pipe_read &amp; write cleanup</span>", 
"<span class=\"comment\"> * -- Manfred Spraul &lt;manfred@colorfullife.com&gt; 2002-05-09</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#pipe_lock_nested\">pipe_lock_nested</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, int <a class=\"id\" href=\"#subclass\">subclass</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock_nested\">mutex_lock_nested</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>, <a class=\"id\" href=\"#subclass\">subclass</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#pipe_lock\">pipe_lock</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pipe_lock() nests non-pipe inode locks (for writing to a file)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_lock_nested\">pipe_lock_nested</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#I_MUTEX_PARENT\">I_MUTEX_PARENT</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pipe_lock\">pipe_lock</a>);", 
"", 
"void <a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>);", 
"", 
"void <a class=\"id\" href=\"#pipe_double_lock\">pipe_double_lock</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe1\">pipe1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe2\">pipe2</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pipe1\">pipe1</a> == <a class=\"id\" href=\"#pipe2\">pipe2</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pipe1\">pipe1</a> &lt; <a class=\"id\" href=\"#pipe2\">pipe2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe_lock_nested\">pipe_lock_nested</a>(<a class=\"id\" href=\"#pipe1\">pipe1</a>, <a class=\"id\" href=\"#I_MUTEX_PARENT\">I_MUTEX_PARENT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe_lock_nested\">pipe_lock_nested</a>(<a class=\"id\" href=\"#pipe2\">pipe2</a>, <a class=\"id\" href=\"#I_MUTEX_CHILD\">I_MUTEX_CHILD</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe_lock_nested\">pipe_lock_nested</a>(<a class=\"id\" href=\"#pipe2\">pipe2</a>, <a class=\"id\" href=\"#I_MUTEX_PARENT\">I_MUTEX_PARENT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe_lock_nested\">pipe_lock_nested</a>(<a class=\"id\" href=\"#pipe1\">pipe1</a>, <a class=\"id\" href=\"#I_MUTEX_CHILD\">I_MUTEX_CHILD</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Drop the inode semaphore and wait for a pipe event, atomically */</span>", 
"void <a class=\"id\" href=\"#pipe_wait\">pipe_wait</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Pipes are system-local resources, so sleeping on them</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is considered a noninteractive wait:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_unlock\">pipe_unlock</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_lock\">pipe_lock</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#pipe_iov_copy_from_user\">pipe_iov_copy_from_user</a>(void *<a class=\"id\" href=\"#to\">to</a>, struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#atomic\">atomic</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#copy\">copy</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned long, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic\">atomic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__copy_from_user_inatomic\">__copy_from_user_inatomic</a>(<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a>, <a class=\"id\" href=\"#copy\">copy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a>, <a class=\"id\" href=\"#copy\">copy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a> -= <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#pipe_iov_copy_to_user\">pipe_iov_copy_to_user</a>(struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>, const void *<a class=\"id\" href=\"#from\">from</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#atomic\">atomic</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#copy\">copy</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned long, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic\">atomic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__copy_to_user_inatomic\">__copy_to_user_inatomic</a>(<a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#copy\">copy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#copy\">copy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a> += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a> -= <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attempt to pre-fault in the user memory, so we can use atomic copies.</span>", 
"<span class=\"comment\"> * Returns the number of bytes not faulted in.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#iov_fault_in_pages_write\">iov_fault_in_pages_write</a>(struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>++;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#this_len\">this_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_len\">this_len</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned long, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fault_in_pages_writeable\">fault_in_pages_writeable</a>(<a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a>, <a class=\"id\" href=\"#this_len\">this_len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#this_len\">this_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Pre-fault in the user memory, so we can use atomic copies.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#iov_fault_in_pages_read\">iov_fault_in_pages_read</a>(struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>++;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#this_len\">this_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_len\">this_len</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned long, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fault_in_pages_readable\">fault_in_pages_readable</a>(<a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a>, <a class=\"id\" href=\"#this_len\">this_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#this_len\">this_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#anon_pipe_buf_release\">anon_pipe_buf_release</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If nobody else uses this page, and we don't already have a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * temporary page, let's keep track of it as a one-deep</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocation cache. (Otherwise just release our reference to it)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>) == 1 && !<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#tmp_page\">tmp_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#tmp_page\">tmp_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_pipe_buf_map - virtually map a pipe buffer</span>", 
"<span class=\"comment\"> * @pipe:<span class=\"ts\"/>the pipe that the buffer belongs to</span>", 
"<span class=\"comment\"> * @buf:<span class=\"ts\"/>the buffer that should be mapped</span>", 
"<span class=\"comment\"> * @atomic:<span class=\"ts\"/>whether to use an atomic map</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function returns a kernel virtual address mapping for the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pipe_buffer passed in @buf. If @atomic is set, an atomic map is provided</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and the caller has to be careful not to fault before calling</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the unmap function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note that this function occupies KM_USER0 if @atomic != 0.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#generic_pipe_buf_map\">generic_pipe_buf_map</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#atomic\">atomic</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic\">atomic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PIPE_BUF_FLAG_ATOMIC\">PIPE_BUF_FLAG_ATOMIC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmap\">kmap</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_pipe_buf_map\">generic_pipe_buf_map</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_pipe_buf_unmap - unmap a previously mapped pipe buffer</span>", 
"<span class=\"comment\"> * @pipe:<span class=\"ts\"/>the pipe that the buffer belongs to</span>", 
"<span class=\"comment\"> * @buf:<span class=\"ts\"/>the buffer that should be unmapped</span>", 
"<span class=\"comment\"> * @map_data:<span class=\"ts\"/>the data that the mapping function returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function undoes the mapping that -&gt;map() provided.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#generic_pipe_buf_unmap\">generic_pipe_buf_unmap</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a>, void *<a class=\"id\" href=\"#map_data\">map_data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PIPE_BUF_FLAG_ATOMIC\">PIPE_BUF_FLAG_ATOMIC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PIPE_BUF_FLAG_ATOMIC\">PIPE_BUF_FLAG_ATOMIC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#map_data\">map_data</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap\">kunmap</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_pipe_buf_unmap\">generic_pipe_buf_unmap</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_pipe_buf_steal - attempt to take ownership of a &amp;pipe_buffer</span>", 
"<span class=\"comment\"> * @pipe:<span class=\"ts\"/>the pipe that the buffer belongs to</span>", 
"<span class=\"comment\"> * @buf:<span class=\"ts\"/>the buffer to attempt to steal</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function attempts to steal the &amp;struct page attached to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf. If successful, this function returns 0 and returns with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the page locked. The caller may then reuse the page for whatever</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>he wishes; the typical use is insertion into a different file</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>page cache.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#generic_pipe_buf_steal\">generic_pipe_buf_steal</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A reference of one is golden, that means that the owner of this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page is the only one holding a reference to it. lock the page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and return OK.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_pipe_buf_steal\">generic_pipe_buf_steal</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_pipe_buf_get - get a reference to a &amp;struct pipe_buffer</span>", 
"<span class=\"comment\"> * @pipe:<span class=\"ts\"/>the pipe that the buffer belongs to</span>", 
"<span class=\"comment\"> * @buf:<span class=\"ts\"/>the buffer to get a reference to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function grabs an extra reference to @buf. It's used in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in the tee() system call, when we duplicate the buffers in one</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pipe into another.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#generic_pipe_buf_get\">generic_pipe_buf_get</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_get\">page_cache_get</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_pipe_buf_get\">generic_pipe_buf_get</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_pipe_buf_confirm - verify contents of the pipe buffer</span>", 
"<span class=\"comment\"> * @info:<span class=\"ts\"/>the pipe that the buffer belongs to</span>", 
"<span class=\"comment\"> * @buf:<span class=\"ts\"/>the buffer to confirm</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function does nothing, because the generic pipe code uses</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pages that are always good when inserted into the pipe.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#generic_pipe_buf_confirm\">generic_pipe_buf_confirm</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_pipe_buf_confirm\">generic_pipe_buf_confirm</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_pipe_buf_release - put a reference to a &amp;struct pipe_buffer</span>", 
"<span class=\"comment\"> * @pipe:<span class=\"ts\"/>the pipe that the buffer belongs to</span>", 
"<span class=\"comment\"> * @buf:<span class=\"ts\"/>the buffer to put a reference to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function releases a reference to @buf.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#generic_pipe_buf_release\">generic_pipe_buf_release</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_pipe_buf_release\">generic_pipe_buf_release</a>);", 
"", 
"static const struct <a class=\"id\" href=\"#pipe_buf_operations\">pipe_buf_operations</a> <a class=\"id\" href=\"#anon_pipe_buf_ops\">anon_pipe_buf_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#can_merge\">can_merge</a> = 1,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#generic_pipe_buf_map\">generic_pipe_buf_map</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unmap\">unmap</a> = <a class=\"id\" href=\"#generic_pipe_buf_unmap\">generic_pipe_buf_unmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#confirm\">confirm</a> = <a class=\"id\" href=\"#generic_pipe_buf_confirm\">generic_pipe_buf_confirm</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#anon_pipe_buf_release\">anon_pipe_buf_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#steal\">steal</a> = <a class=\"id\" href=\"#generic_pipe_buf_steal\">generic_pipe_buf_steal</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get\">get</a> = <a class=\"id\" href=\"#generic_pipe_buf_get\">generic_pipe_buf_get</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#pipe_read\">pipe_read</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#_iov\">_iov</a>,", 
"<span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#do_wakeup\">do_wakeup</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a> = (struct <a class=\"id\" href=\"#iovec\">iovec</a> *)<a class=\"id\" href=\"#_iov\">_iov</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#total_len\">total_len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total_len\">total_len</a> = <a class=\"id\" href=\"#iov_length\">iov_length</a>(<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Null read succeeds. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#total_len\">total_len</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_wakeup\">do_wakeup</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>;", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#bufs\">bufs</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bufs\">bufs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#curbuf\">curbuf</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a> + <a class=\"id\" href=\"#curbuf\">curbuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#pipe_buf_operations\">pipe_buf_operations</a> *<a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#chars\">chars</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#atomic\">atomic</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chars\">chars</a> &gt; <a class=\"id\" href=\"#total_len\">total_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chars\">chars</a> = <a class=\"id\" href=\"#total_len\">total_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#confirm\">confirm</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic\">atomic</a> = !<a class=\"id\" href=\"#iov_fault_in_pages_write\">iov_fault_in_pages_write</a>(<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#chars\">chars</a>);", 
"<a class=\"id\" href=\"#redo\">redo</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#map\">map</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#atomic\">atomic</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#pipe_iov_copy_to_user\">pipe_iov_copy_to_user</a>(<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#chars\">chars</a>, <a class=\"id\" href=\"#atomic\">atomic</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#unmap\">unmap</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Just retry with the slow path if we failed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic\">atomic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic\">atomic</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#redo\">redo</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#chars\">chars</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#chars\">chars</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#chars\">chars</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#release\">release</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curbuf\">curbuf</a> = (<a class=\"id\" href=\"#curbuf\">curbuf</a> + 1) &amp; (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a> = <a class=\"id\" href=\"#curbuf\">curbuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a> = --<a class=\"id\" href=\"#bufs\">bufs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_wakeup\">do_wakeup</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_len\">total_len</a> -= <a class=\"id\" href=\"#chars\">chars</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#total_len\">total_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"comment\">/* common path: read succeeded */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bufs\">bufs</a>)<span class=\"ts\"/><span class=\"comment\">/* More to do? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#writers\">writers</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#waiting_writers\">waiting_writers</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* syscall merging: Usually we must not sleep</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if O_NONBLOCK is set, or if we got some data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * But if a writer sleeps in kernel space, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we can wait for that data without violating POSIX.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_wakeup\">do_wakeup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible_sync\">wake_up_interruptible_sync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#fasync_writers\">fasync_writers</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#POLL_OUT\">POLL_OUT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe_wait\">pipe_wait</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Signal writers asynchronously that there is more room. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_wakeup\">do_wakeup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible_sync\">wake_up_interruptible_sync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#fasync_writers\">fasync_writers</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#POLL_OUT\">POLL_OUT</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_accessed\">file_accessed</a>(<a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#pipe_write\">pipe_write</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#_iov\">_iov</a>,", 
"<span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#do_wakeup\">do_wakeup</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a> = (struct <a class=\"id\" href=\"#iovec\">iovec</a> *)<a class=\"id\" href=\"#_iov\">_iov</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#total_len\">total_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#chars\">chars</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total_len\">total_len</a> = <a class=\"id\" href=\"#iov_length\">iov_length</a>(<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Null write succeeds. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#total_len\">total_len</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_wakeup\">do_wakeup</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#readers\">readers</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sig\">send_sig</a>(<a class=\"id\" href=\"#SIGPIPE\">SIGPIPE</a>, <a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EPIPE\">EPIPE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We try to merge small writes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chars\">chars</a> = <a class=\"id\" href=\"#total_len\">total_len</a> &amp; (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>-1); <span class=\"comment\">/* size of the last buffer */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a> && <a class=\"id\" href=\"#chars\">chars</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#lastbuf\">lastbuf</a> = (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a> + <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a> - 1) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a> + <a class=\"id\" href=\"#lastbuf\">lastbuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#pipe_buf_operations\">pipe_buf_operations</a> *<a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#can_merge\">can_merge</a> && <a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#chars\">chars</a> <= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#atomic\">atomic</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#confirm\">confirm</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov_fault_in_pages_read\">iov_fault_in_pages_read</a>(<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#chars\">chars</a>);", 
"<a class=\"id\" href=\"#redo1\">redo1</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#map\">map</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#atomic\">atomic</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#pipe_iov_copy_from_user\">pipe_iov_copy_from_user</a>(<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chars\">chars</a>, <a class=\"id\" href=\"#atomic\">atomic</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#unmap\">unmap</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_wakeup\">do_wakeup</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic\">atomic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic\">atomic</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#redo1\">redo1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#chars\">chars</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_len\">total_len</a> -= <a class=\"id\" href=\"#chars\">chars</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#chars\">chars</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#total_len\">total_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#bufs\">bufs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#readers\">readers</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sig\">send_sig</a>(<a class=\"id\" href=\"#SIGPIPE\">SIGPIPE</a>, <a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EPIPE\">EPIPE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bufs\">bufs</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bufs\">bufs</a> &lt; <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#newbuf\">newbuf</a> = (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a> + <a class=\"id\" href=\"#bufs\">bufs</a>) &amp; (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a>-1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a> + <a class=\"id\" href=\"#newbuf\">newbuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#tmp_page\">tmp_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#atomic\">atomic</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_page\">alloc_page</a>(<a class=\"id\" href=\"#GFP_HIGHUSER\">GFP_HIGHUSER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret\">ret</a> ? : -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#tmp_page\">tmp_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Always wake up, even if the copy fails. Otherwise</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we lock up (O_NONBLOCK-)readers that sleep due to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * syscall merging.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * FIXME! Is this really true?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_wakeup\">do_wakeup</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chars\">chars</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chars\">chars</a> &gt; <a class=\"id\" href=\"#total_len\">total_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chars\">chars</a> = <a class=\"id\" href=\"#total_len\">total_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov_fault_in_pages_read\">iov_fault_in_pages_read</a>(<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#chars\">chars</a>);", 
"<a class=\"id\" href=\"#redo2\">redo2</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic\">atomic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> = <a class=\"id\" href=\"#kmap\">kmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#pipe_iov_copy_from_user\">pipe_iov_copy_from_user</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#chars\">chars</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic\">atomic</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic\">atomic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap\">kunmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#error\">error</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic\">atomic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic\">atomic</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#redo2\">redo2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#chars\">chars</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Insert it into the buffer array */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a> = &amp;<a class=\"id\" href=\"#anon_pipe_buf_ops\">anon_pipe_buf_ops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#chars\">chars</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a> = ++<a class=\"id\" href=\"#bufs\">bufs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#tmp_page\">tmp_page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_len\">total_len</a> -= <a class=\"id\" href=\"#chars\">chars</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#total_len\">total_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bufs\">bufs</a> &lt; <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_wakeup\">do_wakeup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible_sync\">wake_up_interruptible_sync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#fasync_readers\">fasync_readers</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#POLL_IN\">POLL_IN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_wakeup\">do_wakeup</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#waiting_writers\">waiting_writers</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe_wait\">pipe_wait</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#waiting_writers\">waiting_writers</a>--;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_wakeup\">do_wakeup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible_sync\">wake_up_interruptible_sync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#fasync_readers\">fasync_readers</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#POLL_IN\">POLL_IN</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_update_time\">file_update_time</a>(<a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#bad_pipe_r\">bad_pipe_r</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#bad_pipe_w\">bad_pipe_w</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/>   <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"}", 
"", 
"static long <a class=\"id\" href=\"#pipe_ioctl\">pipe_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#nrbufs\">nrbufs</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#FIONREAD\">FIONREAD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nrbufs\">nrbufs</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (--<a class=\"id\" href=\"#nrbufs\">nrbufs</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a>[<a class=\"id\" href=\"#buf\">buf</a>].<a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = (<a class=\"id\" href=\"#buf\">buf</a>+1) &amp; (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#count\">count</a>, (int <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* No kernel lock held - fine */</span>", 
"static unsigned int", 
"<a class=\"id\" href=\"#pipe_poll\">pipe_poll</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nrbufs\">nrbufs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_wait\">poll_wait</a>(<a class=\"id\" href=\"#filp\">filp</a>, &amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reading only -- no need for acquiring the semaphore.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nrbufs\">nrbufs</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = (<a class=\"id\" href=\"#nrbufs\">nrbufs</a> &gt; 0) ? <a class=\"id\" href=\"#POLLIN\">POLLIN</a> | <a class=\"id\" href=\"#POLLRDNORM\">POLLRDNORM</a> : 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#writers\">writers</a> && <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_version\">f_version</a> != <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#w_counter\">w_counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= <a class=\"id\" href=\"#POLLHUP\">POLLHUP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= (<a class=\"id\" href=\"#nrbufs\">nrbufs</a> &lt; <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a>) ? <a class=\"id\" href=\"#POLLOUT\">POLLOUT</a> | <a class=\"id\" href=\"#POLLWRNORM\">POLLWRNORM</a> : 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Most Unices do not set POLLERR for FIFOs but on Linux they</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * behave exactly like pipes for poll().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#readers\">readers</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= <a class=\"id\" href=\"#POLLERR\">POLLERR</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#pipe_release\">pipe_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#decr\">decr</a>, int <a class=\"id\" href=\"#decw\">decw</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#readers\">readers</a> -= <a class=\"id\" href=\"#decr\">decr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#writers\">writers</a> -= <a class=\"id\" href=\"#decw\">decw</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#readers\">readers</a> && !<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#writers\">writers</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pipe_info\">free_pipe_info</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible_sync\">wake_up_interruptible_sync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#fasync_readers\">fasync_readers</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#POLL_IN\">POLL_IN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#fasync_writers\">fasync_writers</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#POLL_OUT\">POLL_OUT</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#pipe_read_fasync\">pipe_read_fasync</a>(int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, int <a class=\"id\" href=\"#on\">on</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#fasync_helper\">fasync_helper</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#on\">on</a>, &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>-><a class=\"id\" href=\"#fasync_readers\">fasync_readers</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"", 
"static int", 
"<a class=\"id\" href=\"#pipe_write_fasync\">pipe_write_fasync</a>(int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, int <a class=\"id\" href=\"#on\">on</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#fasync_helper\">fasync_helper</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#on\">on</a>, &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>-><a class=\"id\" href=\"#fasync_writers\">fasync_writers</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"", 
"static int", 
"<a class=\"id\" href=\"#pipe_rdwr_fasync\">pipe_rdwr_fasync</a>(int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, int <a class=\"id\" href=\"#on\">on</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#fasync_helper\">fasync_helper</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#on\">on</a>, &amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#fasync_readers\">fasync_readers</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#fasync_helper\">fasync_helper</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#on\">on</a>, &amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#fasync_writers\">fasync_writers</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0) <span class=\"comment\">/* this can happen only if on == T */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fasync_helper\">fasync_helper</a>(-1, <a class=\"id\" href=\"#filp\">filp</a>, 0, &amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#fasync_readers\">fasync_readers</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"", 
"static int", 
"<a class=\"id\" href=\"#pipe_read_release\">pipe_read_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pipe_release\">pipe_release</a>(<a class=\"id\" href=\"#inode\">inode</a>, 1, 0);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#pipe_write_release\">pipe_write_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pipe_release\">pipe_release</a>(<a class=\"id\" href=\"#inode\">inode</a>, 0, 1);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#pipe_rdwr_release\">pipe_rdwr_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#decr\">decr</a>, <a class=\"id\" href=\"#decw\">decw</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#decr\">decr</a> = (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>) != 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#decw\">decw</a> = (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>) != 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pipe_release\">pipe_release</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#decr\">decr</a>, <a class=\"id\" href=\"#decw\">decw</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#pipe_read_open\">pipe_read_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>-><a class=\"id\" href=\"#readers\">readers</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#pipe_write_open\">pipe_write_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>-><a class=\"id\" href=\"#writers\">writers</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#pipe_rdwr_open\">pipe_rdwr_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>-><a class=\"id\" href=\"#readers\">readers</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>-><a class=\"id\" href=\"#writers\">writers</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The file_operations structs are not static because they</span>", 
"<span class=\"comment\"> * are also used in linux/fs/fifo.c to do operations on FIFOs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Pipes reuse fifos' file_operations structs.</span>", 
"<span class=\"comment\"> */</span>", 
"const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#read_pipefifo_fops\">read_pipefifo_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#no_llseek\">no_llseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#do_sync_read\">do_sync_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#aio_read\">aio_read</a><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_read\">pipe_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#bad_pipe_w\">bad_pipe_w</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poll\">poll</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_poll\">pipe_poll</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unlocked_ioctl\">unlocked_ioctl</a><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_ioctl\">pipe_ioctl</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_read_open\">pipe_read_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_read_release\">pipe_read_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fasync\">fasync</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_read_fasync\">pipe_read_fasync</a>,", 
"};", 
"", 
"const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#write_pipefifo_fops\">write_pipefifo_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#no_llseek\">no_llseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#bad_pipe_r\">bad_pipe_r</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#do_sync_write\">do_sync_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#aio_write\">aio_write</a><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_write\">pipe_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poll\">poll</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_poll\">pipe_poll</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unlocked_ioctl\">unlocked_ioctl</a><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_ioctl\">pipe_ioctl</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_write_open\">pipe_write_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_write_release\">pipe_write_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fasync\">fasync</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_write_fasync\">pipe_write_fasync</a>,", 
"};", 
"", 
"const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#rdwr_pipefifo_fops\">rdwr_pipefifo_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#no_llseek\">no_llseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#do_sync_read\">do_sync_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#aio_read\">aio_read</a><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_read\">pipe_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#do_sync_write\">do_sync_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#aio_write\">aio_write</a><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_write\">pipe_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poll\">poll</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_poll\">pipe_poll</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unlocked_ioctl\">unlocked_ioctl</a><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_ioctl\">pipe_ioctl</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_rdwr_open\">pipe_rdwr_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_rdwr_release\">pipe_rdwr_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fasync\">fasync</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pipe_rdwr_fasync\">pipe_rdwr_fasync</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> * <a class=\"id\" href=\"#alloc_pipe_info\">alloc_pipe_info</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pipe\">pipe</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a>) * <a class=\"id\" href=\"#PIPE_DEF_BUFFERS\">PIPE_DEF_BUFFERS</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#r_counter\">r_counter</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#w_counter\">w_counter</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> = <a class=\"id\" href=\"#PIPE_DEF_BUFFERS\">PIPE_DEF_BUFFERS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pipe\">pipe</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__free_pipe_info\">__free_pipe_info</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#release\">release</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#tmp_page\">tmp_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#tmp_page\">tmp_page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pipe\">pipe</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_pipe_info\">free_pipe_info</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_pipe_info\">__free_pipe_info</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#pipe_mnt\">pipe_mnt</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * pipefs_dname() is called from d_path().</span>", 
"<span class=\"comment\"> */</span>", 
"static char *<a class=\"id\" href=\"#pipefs_dname\">pipefs_dname</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dynamic_dname\">dynamic_dname</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#buflen\">buflen</a>, \"pipe:[%lu]\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#dentry_operations\">dentry_operations</a> <a class=\"id\" href=\"#pipefs_dentry_operations\">pipefs_dentry_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#d_dname\">d_dname</a><span class=\"ts\"/>= <a class=\"id\" href=\"#pipefs_dname\">pipefs_dname</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#get_pipe_inode\">get_pipe_inode</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#new_inode\">new_inode</a>(<a class=\"id\" href=\"#pipe_mnt\">pipe_mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_inode\">fail_inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#alloc_pipe_info\">alloc_pipe_info</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_iput\">fail_iput</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a> = <a class=\"id\" href=\"#pipe\">pipe</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#readers\">readers</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#writers\">writers</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#rdwr_pipefifo_fops\">rdwr_pipefifo_fops</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Mark the inode dirty from the very beginning,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that way it will never be moved to the dirty</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list because \"mark_inode_dirty()\" will think</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that it already _is_ on the dirty list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> = <a class=\"id\" href=\"#I_DIRTY\">I_DIRTY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#S_IFIFO\">S_IFIFO</a> | <a class=\"id\" href=\"#S_IRUSR\">S_IRUSR</a> | <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> = <a class=\"id\" href=\"#current_fsuid\">current_fsuid</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> = <a class=\"id\" href=\"#current_fsgid\">current_fsgid</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a> = <a class=\"id\" href=\"#CURRENT_TIME\">CURRENT_TIME</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<a class=\"id\" href=\"#fail_iput\">fail_iput</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<a class=\"id\" href=\"#fail_inode\">fail_inode</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#create_write_pipe\">create_write_pipe</a>(int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#qstr\">qstr</a> <a class=\"id\" href=\"#name\">name</a> = { .<a class=\"id\" href=\"#name\">name</a> = \"\" };", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENFILE\">ENFILE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#get_pipe_inode\">get_pipe_inode</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#d_alloc\">d_alloc</a>(<a class=\"id\" href=\"#pipe_mnt\">pipe_mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>, &amp;<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_inode\">err_inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mntget\">mntget</a>(<a class=\"id\" href=\"#pipe_mnt\">pipe_mnt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a> = &amp;<a class=\"id\" href=\"#pipefs_dentry_operations\">pipefs_dentry_operations</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_instantiate\">d_instantiate</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENFILE\">ENFILE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#alloc_file\">alloc_file</a>(&amp;<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>, &amp;<a class=\"id\" href=\"#write_pipefifo_fops\">write_pipefifo_fops</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#f\">f</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_dentry\">err_dentry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> = <a class=\"id\" href=\"#O_WRONLY\">O_WRONLY</a> | (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_version\">f_version</a> = 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#f\">f</a>;", 
"", 
" <a class=\"id\" href=\"#err_dentry\">err_dentry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pipe_info\">free_pipe_info</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"", 
" <a class=\"id\" href=\"#err_inode\">err_inode</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pipe_info\">free_pipe_info</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
" <a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_write_pipe\">free_write_pipe</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pipe_info\">free_pipe_info</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_dentry\">f_dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_path\">f_path</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_filp\">put_filp</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#create_read_pipe\">create_read_pipe</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#wrf\">wrf</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Grab pipe from the writer */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#alloc_file\">alloc_file</a>(&amp;<a class=\"id\" href=\"#wrf\">wrf</a>-><a class=\"id\" href=\"#f_path\">f_path</a>, <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#read_pipefifo_fops\">read_pipefifo_fops</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#f\">f</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENFILE\">ENFILE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_get\">path_get</a>(&amp;<a class=\"id\" href=\"#wrf\">wrf</a>-><a class=\"id\" href=\"#f_path\">f_path</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> = <a class=\"id\" href=\"#O_RDONLY\">O_RDONLY</a> | (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#f\">f</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#do_pipe_flags\">do_pipe_flags</a>(int *<a class=\"id\" href=\"#fd\">fd</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#fw\">fw</a>, *<a class=\"id\" href=\"#fr\">fr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fdw\">fdw</a>, <a class=\"id\" href=\"#fdr\">fdr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; ~(<a class=\"id\" href=\"#O_CLOEXEC\">O_CLOEXEC</a> | <a class=\"id\" href=\"#O_NONBLOCK\">O_NONBLOCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fw\">fw</a> = <a class=\"id\" href=\"#create_write_pipe\">create_write_pipe</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#fw\">fw</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#fw\">fw</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fr\">fr</a> = <a class=\"id\" href=\"#create_read_pipe\">create_read_pipe</a>(<a class=\"id\" href=\"#fw\">fw</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#fr\">fr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#fr\">fr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_write_pipe\">err_write_pipe</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_unused_fd_flags\">get_unused_fd_flags</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_read_pipe\">err_read_pipe</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdr\">fdr</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_unused_fd_flags\">get_unused_fd_flags</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_fdr\">err_fdr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdw\">fdw</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_fd_pair\">audit_fd_pair</a>(<a class=\"id\" href=\"#fdr\">fdr</a>, <a class=\"id\" href=\"#fdw\">fdw</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fd_install\">fd_install</a>(<a class=\"id\" href=\"#fdr\">fdr</a>, <a class=\"id\" href=\"#fr\">fr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fd_install\">fd_install</a>(<a class=\"id\" href=\"#fdw\">fdw</a>, <a class=\"id\" href=\"#fw\">fw</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fd\">fd</a>[0] = <a class=\"id\" href=\"#fdr\">fdr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fd\">fd</a>[1] = <a class=\"id\" href=\"#fdw\">fdw</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#err_fdr\">err_fdr</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_unused_fd\">put_unused_fd</a>(<a class=\"id\" href=\"#fdr\">fdr</a>);", 
" <a class=\"id\" href=\"#err_read_pipe\">err_read_pipe</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#fr\">fr</a>-><a class=\"id\" href=\"#f_path\">f_path</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_filp\">put_filp</a>(<a class=\"id\" href=\"#fr\">fr</a>);", 
" <a class=\"id\" href=\"#err_write_pipe\">err_write_pipe</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_write_pipe\">free_write_pipe</a>(<a class=\"id\" href=\"#fw\">fw</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sys_pipe() is the normal C calling standard for creating</span>", 
"<span class=\"comment\"> * a pipe. It's not the way Unix traditionally does this, though.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#pipe2\">pipe2</a>, int <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#fildes\">fildes</a>, int, <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fd\">fd</a>[2];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#do_pipe_flags\">do_pipe_flags</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#fildes\">fildes</a>, <a class=\"id\" href=\"#fd\">fd</a>, sizeof(<a class=\"id\" href=\"#fd\">fd</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sys_close\">sys_close</a>(<a class=\"id\" href=\"#fd\">fd</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sys_close\">sys_close</a>(<a class=\"id\" href=\"#fd\">fd</a>[1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, int <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#fildes\">fildes</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sys_pipe2\">sys_pipe2</a>(<a class=\"id\" href=\"#fildes\">fildes</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate a new array of pipe buffers and copy the info over. Returns the</span>", 
"<span class=\"comment\"> * pipe size if successful, or return -ERROR on error.</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#pipe_set_size\">pipe_set_size</a>(struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>, unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a> *<a class=\"id\" href=\"#bufs\">bufs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can shrink the pipe, if arg &gt;= pipe-&gt;nrbufs. Since we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * expect a lot of shrink+grow operations, just free and allocate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * again like we would do for growing. If the pipe currently</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * contains more buffers than arg, then return busy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> &lt; <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bufs\">bufs</a> = <a class=\"id\" href=\"#kcalloc\">kcalloc</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, sizeof(struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#bufs\">bufs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The pipe array wraps around, so just start the new one at zero</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and adjust the indexes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a> + <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tail\">tail</a> &lt; <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> &= (<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> - 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#nrbufs\">nrbufs</a> - <a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#bufs\">bufs</a>, <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a> + <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a>, <a class=\"id\" href=\"#head\">head</a> * sizeof(struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tail\">tail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#bufs\">bufs</a> + <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a>, <a class=\"id\" href=\"#tail\">tail</a> * sizeof(struct <a class=\"id\" href=\"#pipe_buffer\">pipe_buffer</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#curbuf\">curbuf</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#bufs\">bufs</a> = <a class=\"id\" href=\"#bufs\">bufs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_pages\">nr_pages</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Currently we rely on the pipe array holding a power-of-2 number</span>", 
"<span class=\"comment\"> * of pages.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#round_pipe_size\">round_pipe_size</a>(unsigned int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = (<a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#roundup_pow_of_two\">roundup_pow_of_two</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This should work even if CONFIG_PROC_FS isn't set, as proc_dointvec_minmax</span>", 
"<span class=\"comment\"> * will return an error.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pipe_proc_fn\">pipe_proc_fn</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#proc_dointvec_minmax\">proc_dointvec_minmax</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#write\">write</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#ppos\">ppos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0 || !<a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe_max_size\">pipe_max_size</a> = <a class=\"id\" href=\"#round_pipe_size\">round_pipe_size</a>(<a class=\"id\" href=\"#pipe_max_size\">pipe_max_size</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"long <a class=\"id\" href=\"#pipe_fcntl\">pipe_fcntl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a> *<a class=\"id\" href=\"#pipe\">pipe</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pipe\">pipe</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pipe\">pipe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETPIPE_SZ\">F_SETPIPE_SZ</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#round_pipe_size\">round_pipe_size</a>(<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#size\">size</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_RESOURCE\">CAP_SYS_RESOURCE</a>) && <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#pipe_max_size\">pipe_max_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pipe_set_size\">pipe_set_size</a>(<a class=\"id\" href=\"#pipe\">pipe</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETPIPE_SZ\">F_GETPIPE_SZ</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#buffers\">buffers</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pipe\">pipe</a>-><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * pipefs should _never_ be mounted by userland - too much of security hassle,</span>", 
"<span class=\"comment\"> * no real gain from having the whole whorehouse mounted. So we don't need</span>", 
"<span class=\"comment\"> * any operations on the root directory. However, we need a non-trivial</span>", 
"<span class=\"comment\"> * d_name - pipe: will go nicely and kill the special-casing in procfs.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pipefs_get_sb\">pipefs_get_sb</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#flags\">flags</a>, const char *<a class=\"id\" href=\"#dev_name\">dev_name</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_sb_pseudo\">get_sb_pseudo</a>(<a class=\"id\" href=\"#fs_type\">fs_type</a>, \"pipe:\", <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#PIPEFS_MAGIC\">PIPEFS_MAGIC</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> <a class=\"id\" href=\"#pipe_fs_type\">pipe_fs_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"pipefs\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_sb\">get_sb</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pipefs_get_sb\">pipefs_get_sb</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#kill_sb\">kill_sb</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kill_anon_super\">kill_anon_super</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_pipe_fs\">init_pipe_fs</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#register_filesystem\">register_filesystem</a>(&amp;<a class=\"id\" href=\"#pipe_fs_type\">pipe_fs_type</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pipe_mnt\">pipe_mnt</a> = <a class=\"id\" href=\"#kern_mount\">kern_mount</a>(&amp;<a class=\"id\" href=\"#pipe_fs_type\">pipe_fs_type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#pipe_mnt\">pipe_mnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#pipe_mnt\">pipe_mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_filesystem\">unregister_filesystem</a>(&amp;<a class=\"id\" href=\"#pipe_fs_type\">pipe_fs_type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#exit_pipe_fs\">exit_pipe_fs</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_filesystem\">unregister_filesystem</a>(&amp;<a class=\"id\" href=\"#pipe_fs_type\">pipe_fs_type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#pipe_mnt\">pipe_mnt</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#fs_initcall\">fs_initcall</a>(<a class=\"id\" href=\"#init_pipe_fs\">init_pipe_fs</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#exit_pipe_fs\">exit_pipe_fs</a>);", 
];
xr_frag_insert('l/ad/634e8cd2ca9e22c06d6b4afe0fb8ccd091669f.xr', __xr_tmp);
