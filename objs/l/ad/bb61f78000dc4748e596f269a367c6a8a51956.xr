var __xr_tmp = [
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#chain\">chain</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* i_data is not going away, no lock needed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_chain\">add_chain</a> (<a class=\"id\" href=\"#chain\">chain</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_data\">i_data</a> + *<a class=\"id\" href=\"#offsets\">offsets</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#key\">key</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_block\">no_block</a>;", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#depth\">depth</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_bread\">sb_bread</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#key\">key</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failure\">failure</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_meta_lock\">i_meta_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#verify_chain\">verify_chain</a>(<a class=\"id\" href=\"#chain\">chain</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#changed\">changed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_chain\">add_chain</a>(++<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#bh\">bh</a>, (<a class=\"id\" href=\"#__le32\">__le32</a>*)<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a> + *++<a class=\"id\" href=\"#offsets\">offsets</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_meta_lock\">i_meta_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#key\">key</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_block\">no_block</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<a class=\"id\" href=\"#changed\">changed</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_meta_lock\">i_meta_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#no_block\">no_block</a>;", 
"<a class=\"id\" href=\"#failure\">failure</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<a class=\"id\" href=\"#no_block\">no_block</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext2_find_near - find a place for allocation with sufficient locality</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: owner</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ind: descriptor of indirect block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function returns the preferred place for block allocation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It is used when heuristic for sequential allocation fails.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Rules are:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  + if there is a block to the left of our position - allocate near it.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  + if pointer will live in indirect block - allocate near that block.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  + if pointer will live in inode - allocate in the same cylinder group.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In the latter case we colour the starting block by the callers PID to</span>", 
"<span class=\"comment\"> * prevent it from clashing with concurrent allocations for a different inode</span>", 
"<span class=\"comment\"> * in the same block group.   The PID is used here so that functionally related</span>", 
"<span class=\"comment\"> * files will be close-by on-disk.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Caller must make sure that @ind is valid and will stay that way.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#ext2_find_near\">ext2_find_near</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#ind\">ind</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_inode_info\">ext2_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ind\">ind</a>-><a class=\"id\" href=\"#bh\">bh</a> ? (<a class=\"id\" href=\"#__le32\">__le32</a> *) <a class=\"id\" href=\"#ind\">ind</a>-><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a> : <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data\">i_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#bg_start\">bg_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#colour\">colour</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Try to find previous block */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#ind\">ind</a>-><a class=\"id\" href=\"#p\">p</a> - 1; <a class=\"id\" href=\"#p\">p</a> >= <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#p\">p</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No such thing, so let's try location of indirect block */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ind\">ind</a>-><a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ind\">ind</a>-><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is going to be refered from inode itself? OK, just put it into</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the same cylinder group then.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bg_start\">bg_start</a> = <a class=\"id\" href=\"#ext2_group_first_block_no\">ext2_group_first_block_no</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_group\">i_block_group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#colour\">colour</a> = (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a> % 16) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#EXT2_BLOCKS_PER_GROUP\">EXT2_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>) / 16);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bg_start\">bg_start</a> + <a class=\"id\" href=\"#colour\">colour</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext2_find_goal - find a preferred place for allocation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: owner</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@block:  block we want</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@partial: pointer to the last triple within a chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns preferred place for a block (the goal).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#ext2_find_goal\">ext2_find_goal</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, long <a class=\"id\" href=\"#block\">block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#partial\">partial</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_block_alloc_info\">ext2_block_alloc_info</a> *<a class=\"id\" href=\"#block_i\">block_i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a> = <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * try the heuristic for sequential allocation,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * failing that at least try to get decent locality.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#block_i\">block_i</a> && (<a class=\"id\" href=\"#block\">block</a> == <a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#last_alloc_logical_block\">last_alloc_logical_block</a> + 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>&& (<a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#last_alloc_physical_block\">last_alloc_physical_block</a> != 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#last_alloc_physical_block\">last_alloc_physical_block</a> + 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ext2_find_near\">ext2_find_near</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#partial\">partial</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext2_blks_to_allocate: Look up the block map and count the number</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of direct blocks need to be allocated for the given branch.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@branch: chain of indirect blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@k: number of blocks need for indirect blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@blks: number of data blocks to be mapped.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@blocks_to_boundary:  the offset in the indirect block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>return the total number of blocks to be allocate, including the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>direct and indirect blocks.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#ext2_blks_to_allocate\">ext2_blks_to_allocate</a>(<a class=\"id\" href=\"#Indirect\">Indirect</a> * <a class=\"id\" href=\"#branch\">branch</a>, int <a class=\"id\" href=\"#k\">k</a>, unsigned long <a class=\"id\" href=\"#blks\">blks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Simple case, [t,d]Indirect block(s) has not allocated yet</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then it's clear blocks on that path have not allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* right now don't hanel cross boundary allocation */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blks\">blks</a> &lt; <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a> + 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#blks\">blks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#blks\">blks</a> && <a class=\"id\" href=\"#count\">count</a> <= <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*(<a class=\"id\" href=\"#branch\">branch</a>[0].<a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#count\">count</a>)) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext2_alloc_blocks: multiple allocate blocks needed for a branch</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@indirect_blks: the number of blocks need to allocate for indirect</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>blocks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new_blocks: on return it will store the new block numbers for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the indirect blocks(if needed) and the first direct block,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@blks:<span class=\"ts\"/>on return it will store the total number of allocated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>direct blocks</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext2_alloc_blocks\">ext2_alloc_blocks</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>, int <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>, int <a class=\"id\" href=\"#blks\">blks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[4], int *<a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#current_block\">current_block</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Here we try to allocate the requested multiple blocks at once,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on a best-effort basis.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To build a branch, we should allocate blocks for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the indirect blocks(if not allocated yet), and at least</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the first direct block of this branch.  That's the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * minimum number of blocks need to allocate(required)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a> = <a class=\"id\" href=\"#blks\">blks</a> + <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#target\">target</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* allocating blocks for indirect blocks and direct blocks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_block\">current_block</a> = <a class=\"id\" href=\"#ext2_new_blocks\">ext2_new_blocks</a>(<a class=\"id\" href=\"#inode\">inode</a>,<a class=\"id\" href=\"#goal\">goal</a>,&amp;<a class=\"id\" href=\"#count\">count</a>,<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed_out\">failed_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a> -= <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* allocate blocks for indirect blocks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#index\">index</a> &lt; <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a> && <a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#index\">index</a>++] = <a class=\"id\" href=\"#current_block\">current_block</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* save the new block number for the first direct block */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#index\">index</a>] = <a class=\"id\" href=\"#current_block\">current_block</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* total number of blocks allocated for direct blocks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<a class=\"id\" href=\"#failed_out\">failed_out</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt;<a class=\"id\" href=\"#index\">index</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_free_blocks\">ext2_free_blocks</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#i\">i</a>], 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext2_alloc_branch - allocate and set up a chain of blocks.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: owner</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@num: depth of the chain (number of blocks to allocate)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@offsets: offsets (in the blocks) to store the pointers to next.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@branch: place to store the chain in.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function allocates @num blocks, zeroes out all but the last one,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>links them into chain and (if we are synchronous) writes them to disk.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>In other words, it prepares a branch that can be spliced onto the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>inode. It stores the information about that chain in the branch[], in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the same format as ext2_get_branch() would do. We are calling it after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>we had read the existing part of chain and partial points to the last</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>triple of that (one with zero -&gt;key). Upon the exit we have the same</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>picture as after the successful ext2_get_block(), excpet that in one</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>place chain is disconnected - *branch-&gt;p is still zero (we did not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>set the last link), but branch-&gt;key contains the number that should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be placed into *branch-&gt;p to fill that gap.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If allocation fails we free all blocks we've allocated (and forget</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>their buffer_heads) and return the error value the from failed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext2_alloc_block() (normally -ENOSPC). Otherwise we set the chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as described above and return 0.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#ext2_alloc_branch\">ext2_alloc_branch</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>, int *<a class=\"id\" href=\"#blks\">blks</a>, <a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#branch\">branch</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#blocksize\">blocksize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#n\">n</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#current_block\">current_block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#ext2_alloc_blocks\">ext2_alloc_blocks</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#blks\">blks</a>, <a class=\"id\" href=\"#new_blocks\">new_blocks</a>, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#branch\">branch</a>[0].<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#new_blocks\">new_blocks</a>[0]);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * metadata blocks and data blocks are allocated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = 1; <a class=\"id\" href=\"#n\">n</a> <= <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>;  <a class=\"id\" href=\"#n\">n</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get buffer_head for parent block, zero it out</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and set the pointer to new one, then send</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * parent to disk.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_getblk\">sb_getblk</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#n\">n</a>-1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, 0, <a class=\"id\" href=\"#blocksize\">blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#p\">p</a> = (<a class=\"id\" href=\"#__le32\">__le32</a> *) <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a> + <a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#n\">n</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ( <a class=\"id\" href=\"#n\">n</a> == <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_block\">current_block</a> = <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#n\">n</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * End of chain, update the last new metablock of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the chain to point to the new allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * data blocks numbers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>=1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#i\">i</a>) = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(++<a class=\"id\" href=\"#current_block\">current_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty_inode\">mark_buffer_dirty_inode</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We used to sync bh here if IS_SYNC(inode).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * But we now rely upon generic_write_sync()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and b_inode_buffers.  But not for directories.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) && <a class=\"id\" href=\"#IS_DIRSYNC\">IS_DIRSYNC</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_dirty_buffer\">sync_dirty_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#blks\">blks</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext2_splice_branch - splice the allocated branch onto inode.</span>", 
"<span class=\"comment\"> * @inode: owner</span>", 
"<span class=\"comment\"> * @block: (logical) number of block we are adding</span>", 
"<span class=\"comment\"> * @where: location of missing link</span>", 
"<span class=\"comment\"> * @num:   number of indirect blocks we are adding</span>", 
"<span class=\"comment\"> * @blks:  number of direct blocks we are adding</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function fills the missing link and does all housekeeping needed in</span>", 
"<span class=\"comment\"> * inode (-&gt;i_blocks, etc.). In case of success we end up with the full</span>", 
"<span class=\"comment\"> * chain to new block and return 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext2_splice_branch\">ext2_splice_branch</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#where\">where</a>, int <a class=\"id\" href=\"#num\">num</a>, int <a class=\"id\" href=\"#blks\">blks</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_block_alloc_info\">ext2_block_alloc_info</a> *<a class=\"id\" href=\"#block_i\">block_i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#current_block\">current_block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a> = <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* XXX LOCKING probably should have i_meta_lock ?*/</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* That's it */</span>", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Update the host buffer_head or inode to point to more just allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * direct blocks blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> == 0 && <a class=\"id\" href=\"#blks\">blks</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_block\">current_block</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#key\">key</a>) + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#blks\">blks</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#i\">i</a> ) = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#current_block\">current_block</a>++);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * update the most recently allocated logical &amp; physical block</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in i_block_alloc_info, to assist find the proper goal block for next</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#block_i\">block_i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#last_alloc_logical_block\">last_alloc_logical_block</a> = <a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#blks\">blks</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_i\">block_i</a>-><a class=\"id\" href=\"#last_alloc_physical_block\">last_alloc_physical_block</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#where\">where</a>[<a class=\"id\" href=\"#num\">num</a>].<a class=\"id\" href=\"#key\">key</a>) + <a class=\"id\" href=\"#blks\">blks</a> - 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We are done with atomic stuff, now do the rest of housekeeping */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* had we spliced it onto indirect block? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty_inode\">mark_buffer_dirty_inode</a>(<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a> = <a class=\"id\" href=\"#CURRENT_TIME_SEC\">CURRENT_TIME_SEC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocation strategy is simple: if we have to allocate something, we will</span>", 
"<span class=\"comment\"> * have to go the whole way to leaf. So let's do it before attaching anything</span>", 
"<span class=\"comment\"> * to tree, set linkage between the newborn blocks, write them if sync is</span>", 
"<span class=\"comment\"> * required, recheck the path, free and repeat if check fails, otherwise</span>", 
"<span class=\"comment\"> * set the last missing link (that will protect us from any truncate-generated</span>", 
"<span class=\"comment\"> * removals - all blocks on the path are immune now) and possibly force the</span>", 
"<span class=\"comment\"> * write on the parent block.</span>", 
"<span class=\"comment\"> * That has a nice additional property: no special recovery from the failed</span>", 
"<span class=\"comment\"> * allocations is needed - we simply release blocks and do not touch anything</span>", 
"<span class=\"comment\"> * reachable from inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * `handle' can be NULL if create == 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * return &gt; 0, # of blocks mapped or allocated.</span>", 
"<span class=\"comment\"> * return = 0, if plain lookup failed.</span>", 
"<span class=\"comment\"> * return &lt; 0, error case.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext2_get_blocks\">ext2_get_blocks</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>, unsigned long <a class=\"id\" href=\"#maxblocks\">maxblocks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh_result\">bh_result</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#create\">create</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offsets\">offsets</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> <a class=\"id\" href=\"#chain\">chain</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#partial\">partial</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#depth\">depth</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext2_inode_info\">ext2_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT2_I\">EXT2_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#first_block\">first_block</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#depth\">depth</a> = <a class=\"id\" href=\"#ext2_block_to_path\">ext2_block_to_path</a>(<a class=\"id\" href=\"#inode\">inode</a>,<a class=\"id\" href=\"#iblock\">iblock</a>,<a class=\"id\" href=\"#offsets\">offsets</a>,&amp;<a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#depth\">depth</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#ext2_get_branch\">ext2_get_branch</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#depth\">depth</a>, <a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#chain\">chain</a>, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Simplest case - block found, no allocation needed */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#partial\">partial</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_block\">first_block</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#chain\">chain</a>[<a class=\"id\" href=\"#depth\">depth</a> - 1].<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_new\">clear_buffer_new</a>(<a class=\"id\" href=\"#bh_result\">bh_result</a>); <span class=\"comment\">/* What's this do? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*map more blocks*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#maxblocks\">maxblocks</a> && <a class=\"id\" href=\"#count\">count</a> <= <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_fsblk_t\">ext2_fsblk_t</a> <a class=\"id\" href=\"#blk\">blk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#verify_chain\">verify_chain</a>(<a class=\"id\" href=\"#chain\">chain</a>, <a class=\"id\" href=\"#chain\">chain</a> + <a class=\"id\" href=\"#depth\">depth</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Indirect block might be removed by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * truncate while we were reading it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Handling of that case: forget what we've</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * got now, go to reread.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk\">blk</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*(<a class=\"id\" href=\"#chain\">chain</a>[<a class=\"id\" href=\"#depth\">depth</a>-1].<a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#count\">count</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk\">blk</a> == <a class=\"id\" href=\"#first_block\">first_block</a> + <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> != -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_it\">got_it</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Next simple case - plain lookup or failed read of indirect block */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#create\">create</a> || <a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EIO\">EIO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#truncate_mutex\">truncate_mutex</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the indirect block is missing while we are reading</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the chain(ext3_get_branch() returns -EAGAIN err), or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the chain has been changed after we grab the semaphore,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (either because another process truncated this branch, or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * another get_block allocated this branch) re-grab the chain to see if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the request block has been allocated or not.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since we already block the truncate/other get_block</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at this point, we will have the current copy of the chain when we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * splice the branch into the tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a> || !<a class=\"id\" href=\"#verify_chain\">verify_chain</a>(<a class=\"id\" href=\"#chain\">chain</a>, <a class=\"id\" href=\"#partial\">partial</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#partial\">partial</a> &gt; <a class=\"id\" href=\"#chain\">chain</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#ext2_get_branch\">ext2_get_branch</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#depth\">depth</a>, <a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#chain\">chain</a>, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#partial\">partial</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#truncate_mutex\">truncate_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_new\">clear_buffer_new</a>(<a class=\"id\" href=\"#bh_result\">bh_result</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_it\">got_it</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Okay, we need to do block allocation.  Lazily initialize the block</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocation info here if necessary</span>", 
"<span class=\"comment\"><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) && (!<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_alloc_info\">i_block_alloc_info</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_init_block_alloc_info\">ext2_init_block_alloc_info</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#ext2_find_goal\">ext2_find_goal</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iblock\">iblock</a>, <a class=\"id\" href=\"#partial\">partial</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the number of blocks need to allocate for [d,t]indirect blocks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#indirect_blks\">indirect_blks</a> = (<a class=\"id\" href=\"#chain\">chain</a> + <a class=\"id\" href=\"#depth\">depth</a>) - <a class=\"id\" href=\"#partial\">partial</a> - 1;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Next look up the indirect map to count the totoal number of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * direct blocks to allocate for this branch.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#ext2_blks_to_allocate\">ext2_blks_to_allocate</a>(<a class=\"id\" href=\"#partial\">partial</a>, <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maxblocks\">maxblocks</a>, <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX ???? Block out ext2_truncate while we alter the tree</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext2_alloc_branch\">ext2_alloc_branch</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>, &amp;<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#goal\">goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a> + (<a class=\"id\" href=\"#partial\">partial</a> - <a class=\"id\" href=\"#chain\">chain</a>), <a class=\"id\" href=\"#partial\">partial</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#truncate_mutex\">truncate_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext2_use_xip\">ext2_use_xip</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we need to clear the block</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext2_clear_xip_target\">ext2_clear_xip_target</a> (<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#chain\">chain</a>[<a class=\"id\" href=\"#depth\">depth</a>-1].<a class=\"id\" href=\"#key\">key</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#truncate_mutex\">truncate_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext2_splice_branch\">ext2_splice_branch</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iblock\">iblock</a>, <a class=\"id\" href=\"#partial\">partial</a>, <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#truncate_mutex\">truncate_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_new\">set_buffer_new</a>(<a class=\"id\" href=\"#bh_result\">bh_result</a>);", 
"<a class=\"id\" href=\"#got_it\">got_it</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>(<a class=\"id\" href=\"#bh_result\">bh_result</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#chain\">chain</a>[<a class=\"id\" href=\"#depth\">depth</a>-1].<a class=\"id\" href=\"#key\">key</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_boundary\">set_buffer_boundary</a>(<a class=\"id\" href=\"#bh_result\">bh_result</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Clean up and exit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#chain\">chain</a> + <a class=\"id\" href=\"#depth\">depth</a> - 1;<span class=\"ts\"/><span class=\"comment\">/* the whole chain */</span>", 
"<a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#partial\">partial</a> &gt; <a class=\"id\" href=\"#chain\">chain</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ext2_get_block\">ext2_get_block</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh_result\">bh_result</a>, int <a class=\"id\" href=\"#create\">create</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#max_blocks\">max_blocks</a> = <a class=\"id\" href=\"#bh_result\">bh_result</a>-><a class=\"id\" href=\"#b_size\">b_size</a> >> <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext2_get_blocks\">ext2_get_blocks</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iblock\">iblock</a>, <a class=\"id\" href=\"#max_blocks\">max_blocks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#bh_result\">bh_result</a>, <a class=\"id\" href=\"#create\">create</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh_result\">bh_result</a>-><a class=\"id\" href=\"#b_size\">b_size</a> = (<a class=\"id\" href=\"#ret\">ret</a> << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"}", 
"", 
"int <a class=\"id\" href=\"#ext2_fiemap\">ext2_fiemap</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#fiemap_extent_info\">fiemap_extent_info</a> *<a class=\"id\" href=\"#fieinfo\">fieinfo</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#generic_block_fiemap\">generic_block_fiemap</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#fieinfo\">fieinfo</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ext2_get_block\">ext2_get_block</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext2_writepage\">ext2_writepage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#block_write_full_page\">block_write_full_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#ext2_get_block\">ext2_get_block</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext2_readpage\">ext2_readpage</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mpage_readpage\">mpage_readpage</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#ext2_get_block\">ext2_get_block</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ext2_readpages\">ext2_readpages</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pages\">pages</a>, unsigned <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mpage_readpages\">mpage_readpages</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pages\">pages</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#ext2_get_block\">ext2_get_block</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ext2_write_begin\">ext2_write_begin</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pagep\">pagep</a>, void **<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#block_write_begin\">block_write_begin</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pagep\">pagep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_get_block\">ext2_get_block</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_write_failed\">ext2_write_failed</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext2_write_end\">ext2_write_end</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#generic_write_end\">generic_write_end</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#copied\">copied</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_write_failed\">ext2_write_failed</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ext2_nobh_write_begin\">ext2_nobh_write_begin</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pagep\">pagep</a>, void **<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#nobh_write_begin\">nobh_write_begin</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pagep\">pagep</a>, <a class=\"id\" href=\"#fsdata\">fsdata</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ext2_get_block\">ext2_get_block</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext2_write_failed\">ext2_write_failed</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext2_nobh_writepage\">ext2_nobh_writepage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nobh_writepage\">nobh_writepage</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#ext2_get_block\">ext2_get_block</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#ext2_bmap\">ext2_bmap</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#generic_block_bmap\">generic_block_bmap</a>(<a class=\"id\" href=\"#mapping\">mapping</a>,<a class=\"id\" href=\"#block\">block</a>,<a class=\"id\" href=\"#ext2_get_block\">ext2_get_block</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#ext2_direct_IO\">ext2_direct_IO</a>(int <a class=\"id\" href=\"#rw\">rw</a>, struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#blockdev_direct_IO\">blockdev_direct_IO</a>(<a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>,", 
];
xr_frag_insert('l/ad/bb61f78000dc4748e596f269a367c6a8a51956.xr', __xr_tmp);
