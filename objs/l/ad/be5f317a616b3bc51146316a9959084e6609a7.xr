var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_MMU_NOTIFIER_H\">_LINUX_MMU_NOTIFIER_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_MMU_NOTIFIER_H\">_LINUX_MMU_NOTIFIER_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm_types\">mm_types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a>;", 
"struct <a class=\"id\" href=\"#mmu_notifier_ops\">mmu_notifier_ops</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU_NOTIFIER\">CONFIG_MMU_NOTIFIER</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The mmu notifier_mm structure is allocated and installed in</span>", 
"<span class=\"comment\"> * mm-&gt;mmu_notifier_mm inside the mm_take_all_locks() protected</span>", 
"<span class=\"comment\"> * critical section and it's released only when mm_count reaches zero</span>", 
"<span class=\"comment\"> * in mmdrop().</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* all mmu notifiers registerd in this mm are queued in this list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* to serialize the list modifications and hlist_unhashed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#mmu_notifier_ops\">mmu_notifier_ops</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Called either by mmu_notifier_unregister or when the mm is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * being destroyed by exit_mmap, always before all pages are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * freed. This can run concurrently with other mmu notifier</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * methods (the ones invoked outside the mm context) and it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should tear down all secondary mmu mappings and freeze the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * secondary mmu. If this method isn't implemented you've to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be sure that nothing could possibly write to the pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * through the secondary mmu by the time the last thread with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tsk-&gt;mm == mm exits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * As side note: the pages freed after -&gt;release returns could</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be immediately reallocated by the gart at an alias physical</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * address with a different cache model, so if -&gt;release isn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * implemented because all _software_ driven memory accesses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * through the secondary mmu are terminated by the time the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * last thread of this mm quits, you've also to be sure that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * speculative _hardware_ operations can't allocate dirty</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cachelines in the cpu that could not be snooped and made</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * coherent with the other read and write operations happening</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * through the gart alias address, so leading to memory</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * corruption.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#release\">release</a>)(struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * clear_flush_young is called after the VM is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * test-and-clearing the young/accessed bitflag in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pte. This way the VM will provide proper aging to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * accesses to the page through the secondary MMUs and not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only to the ones through the Linux pte.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#clear_flush_young\">clear_flush_young</a>)(struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * change_pte is called in cases that pte mapping to page is changed:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for example, when ksm remaps pte to point to a new shared page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#change_pte\">change_pte</a>)(struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Before this is invoked any secondary MMU is still ok to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * read/write to the page previously pointed to by the Linux</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pte because the page hasn't been freed yet and it won't be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * freed until this returns. If required set_page_dirty has to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be called internally to this method.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#invalidate_page\">invalidate_page</a>)(struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invalidate_range_start() and invalidate_range_end() must be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * paired and are called only when the mmap_sem and/or the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * locks protecting the reverse maps are held. The subsystem</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * must guarantee that no additional references are taken to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the pages in the range established between the call to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invalidate_range_start() and the matching call to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invalidate_range_end().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Invalidation of multiple concurrent ranges may be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * optionally permitted by the driver. Either way the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * establishment of sptes is forbidden in the range passed to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invalidate_range_begin/end for the whole duration of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invalidate_range_begin/end critical section.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invalidate_range_start() is called when all pages in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * range are still mapped and have at least a refcount of one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invalidate_range_end() is called when all pages in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * range have been unmapped and the pages have been freed by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the VM.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The VM will remove the page table entries and potentially</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the page between invalidate_range_start() and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invalidate_range_end(). If the page must not be freed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because of pending I/O or other circumstances then the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invalidate_range_start() callback (or the initial mapping</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by the driver) must make sure that the refcount is kept</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * elevated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the driver increases the refcount when the pages are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * initially mapped into an address space then either</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invalidate_range_start() or invalidate_range_end() may</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * decrease the refcount. If the refcount is decreased on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invalidate_range_start() then the VM can free pages as page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * table entries are removed.  If the refcount is only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * droppped on invalidate_range_end() then the driver itself</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will drop the last refcount but it must take care to flush</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any secondary tlb before doing the final free on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page. Pages will no longer be referenced by the linux</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * address space but may still be referenced by sptes until</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the last refcount is dropped.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#invalidate_range_start\">invalidate_range_start</a>)(struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#invalidate_range_end\">invalidate_range_end</a>)(struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>);", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The notifier chains are protected by mmap_sem and/or the reverse map</span>", 
"<span class=\"comment\"> * semaphores. Notifier chains are only changed when all reverse maps and</span>", 
"<span class=\"comment\"> * the mmap_sem locks are taken.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Therefore notifier chains can only be traversed when either</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1. mmap_sem is held.</span>", 
"<span class=\"comment\"> * 2. One of the reverse map locks is held (i_mmap_lock or anon_vma-&gt;lock).</span>", 
"<span class=\"comment\"> * 3. No other concurrent thread can access the list (release)</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> <a class=\"id\" href=\"#hlist\">hlist</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#mmu_notifier_ops\">mmu_notifier_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mm_has_notifiers\">mm_has_notifiers</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>);", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#mmu_notifier_register\">mmu_notifier_register</a>(struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"extern int <a class=\"id\" href=\"#__mmu_notifier_register\">__mmu_notifier_register</a>(struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"extern void <a class=\"id\" href=\"#mmu_notifier_unregister\">mmu_notifier_unregister</a>(struct <a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a> *<a class=\"id\" href=\"#mn\">mn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"extern void <a class=\"id\" href=\"#__mmu_notifier_mm_destroy\">__mmu_notifier_mm_destroy</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"extern void <a class=\"id\" href=\"#__mmu_notifier_release\">__mmu_notifier_release</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"extern int <a class=\"id\" href=\"#__mmu_notifier_clear_flush_young\">__mmu_notifier_clear_flush_young</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#address\">address</a>);", 
"extern void <a class=\"id\" href=\"#__mmu_notifier_change_pte\">__mmu_notifier_change_pte</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>);", 
"extern void <a class=\"id\" href=\"#__mmu_notifier_invalidate_page\">__mmu_notifier_invalidate_page</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#address\">address</a>);", 
"extern void <a class=\"id\" href=\"#__mmu_notifier_invalidate_range_start\">__mmu_notifier_invalidate_range_start</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>);", 
"extern void <a class=\"id\" href=\"#__mmu_notifier_invalidate_range_end\">__mmu_notifier_invalidate_range_end</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmu_notifier_release\">mmu_notifier_release</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm_has_notifiers\">mm_has_notifiers</a>(<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mmu_notifier_release\">__mmu_notifier_release</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mmu_notifier_clear_flush_young\">mmu_notifier_clear_flush_young</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm_has_notifiers\">mm_has_notifiers</a>(<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__mmu_notifier_clear_flush_young\">__mmu_notifier_clear_flush_young</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmu_notifier_change_pte\">mmu_notifier_change_pte</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm_has_notifiers\">mm_has_notifiers</a>(<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mmu_notifier_change_pte\">__mmu_notifier_change_pte</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmu_notifier_invalidate_page\">mmu_notifier_invalidate_page</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm_has_notifiers\">mm_has_notifiers</a>(<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mmu_notifier_invalidate_page\">__mmu_notifier_invalidate_page</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmu_notifier_invalidate_range_start\">mmu_notifier_invalidate_range_start</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm_has_notifiers\">mm_has_notifiers</a>(<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mmu_notifier_invalidate_range_start\">__mmu_notifier_invalidate_range_start</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmu_notifier_invalidate_range_end\">mmu_notifier_invalidate_range_end</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm_has_notifiers\">mm_has_notifiers</a>(<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mmu_notifier_invalidate_range_end\">__mmu_notifier_invalidate_range_end</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmu_notifier_mm_init\">mmu_notifier_mm_init</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmu_notifier_mm_destroy\">mmu_notifier_mm_destroy</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm_has_notifiers\">mm_has_notifiers</a>(<a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mmu_notifier_mm_destroy\">__mmu_notifier_mm_destroy</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These two macros will sometime replace ptep_clear_flush.</span>", 
"<span class=\"comment\"> * ptep_clear_flush is impleemnted as macro itself, so this also is</span>", 
"<span class=\"comment\"> * implemented as a macro until ptep_clear_flush will converted to an</span>", 
"<span class=\"comment\"> * inline function, to diminish the risk of compilation failure. The</span>", 
"<span class=\"comment\"> * invalidate_page method over time can be moved outside the PT lock</span>", 
"<span class=\"comment\"> * and these two macros can be later removed.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ptep_clear_flush_notify\">ptep_clear_flush_notify</a>(<a class=\"id\" href=\"#__vma\">__vma</a>, <a class=\"id\" href=\"#__address\">__address</a>, <a class=\"id\" href=\"#__ptep\">__ptep</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#__pte\">__pte</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#___vma\">___vma</a> = <a class=\"id\" href=\"#__vma\">__vma</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#___address\">___address</a> = <a class=\"id\" href=\"#__address\">__address</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a> = <a class=\"id\" href=\"#ptep_clear_flush\">ptep_clear_flush</a>(<a class=\"id\" href=\"#___vma\">___vma</a>, <a class=\"id\" href=\"#___address\">___address</a>, <a class=\"id\" href=\"#__ptep\">__ptep</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmu_notifier_invalidate_page\">mmu_notifier_invalidate_page</a>(<a class=\"id\" href=\"#___vma\">___vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#___address\">___address</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pte\">__pte</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ptep_clear_flush_young_notify\">ptep_clear_flush_young_notify</a>(<a class=\"id\" href=\"#__vma\">__vma</a>, <a class=\"id\" href=\"#__address\">__address</a>, <a class=\"id\" href=\"#__ptep\">__ptep</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__young\">__young</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#___vma\">___vma</a> = <a class=\"id\" href=\"#__vma\">__vma</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#___address\">___address</a> = <a class=\"id\" href=\"#__address\">__address</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__young\">__young</a> = <a class=\"id\" href=\"#ptep_clear_flush_young\">ptep_clear_flush_young</a>(<a class=\"id\" href=\"#___vma\">___vma</a>, <a class=\"id\" href=\"#___address\">___address</a>, <a class=\"id\" href=\"#__ptep\">__ptep</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__young\">__young</a> |= <a class=\"id\" href=\"#mmu_notifier_clear_flush_young\">mmu_notifier_clear_flush_young</a>(<a class=\"id\" href=\"#___vma\">___vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#___address\">___address</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__young\">__young</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_pte_at_notify\">set_pte_at_notify</a>(<a class=\"id\" href=\"#__mm\">__mm</a>, <a class=\"id\" href=\"#__address\">__address</a>, <a class=\"id\" href=\"#__ptep\">__ptep</a>, <a class=\"id\" href=\"#__pte\">__pte</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#___mm\">___mm</a> = <a class=\"id\" href=\"#__mm\">__mm</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#___address\">___address</a> = <a class=\"id\" href=\"#__address\">__address</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#___pte\">___pte</a> = <a class=\"id\" href=\"#__pte\">__pte</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(<a class=\"id\" href=\"#___mm\">___mm</a>, <a class=\"id\" href=\"#___address\">___address</a>, <a class=\"id\" href=\"#__ptep\">__ptep</a>, <a class=\"id\" href=\"#___pte\">___pte</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmu_notifier_change_pte\">mmu_notifier_change_pte</a>(<a class=\"id\" href=\"#___mm\">___mm</a>, <a class=\"id\" href=\"#___address\">___address</a>, <a class=\"id\" href=\"#___pte\">___pte</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#else <span class=\"comment\">/* CONFIG_MMU_NOTIFIER */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmu_notifier_release\">mmu_notifier_release</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mmu_notifier_clear_flush_young\">mmu_notifier_clear_flush_young</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmu_notifier_change_pte\">mmu_notifier_change_pte</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmu_notifier_invalidate_page\">mmu_notifier_invalidate_page</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmu_notifier_invalidate_range_start\">mmu_notifier_invalidate_range_start</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmu_notifier_invalidate_range_end\">mmu_notifier_invalidate_range_end</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmu_notifier_mm_init\">mmu_notifier_mm_init</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mmu_notifier_mm_destroy\">mmu_notifier_mm_destroy</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ptep_clear_flush_young_notify\">ptep_clear_flush_young_notify</a> <a class=\"id\" href=\"#ptep_clear_flush_young\">ptep_clear_flush_young</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ptep_clear_flush_notify\">ptep_clear_flush_notify</a> <a class=\"id\" href=\"#ptep_clear_flush\">ptep_clear_flush</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_pte_at_notify\">set_pte_at_notify</a> <a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MMU_NOTIFIER */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_MMU_NOTIFIER_H */</span>", 
];
xr_frag_insert('l/ad/be5f317a616b3bc51146316a9959084e6609a7.xr', __xr_tmp);
