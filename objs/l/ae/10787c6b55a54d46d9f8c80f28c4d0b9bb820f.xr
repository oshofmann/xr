var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wakeup_watermark\">wakeup_watermark</a>; <span class=\"comment\">/* bytes before wakeup   */</span>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp_type\">bp_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp_addr\">bp_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp_len\">bp_len</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Ioctls that can be done on a perf event fd:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_EVENT_IOC_ENABLE\">PERF_EVENT_IOC_ENABLE</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_IO\">_IO</a> ('$', 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_EVENT_IOC_DISABLE\">PERF_EVENT_IOC_DISABLE</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_IO\">_IO</a> ('$', 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_EVENT_IOC_REFRESH\">PERF_EVENT_IOC_REFRESH</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_IO\">_IO</a> ('$', 2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_EVENT_IOC_RESET\">PERF_EVENT_IOC_RESET</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_IO\">_IO</a> ('$', 3)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_EVENT_IOC_PERIOD\">PERF_EVENT_IOC_PERIOD</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_IOW\">_IOW</a>('$', 4, <a class=\"id\" href=\"#__u64\">__u64</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_EVENT_IOC_SET_OUTPUT\">PERF_EVENT_IOC_SET_OUTPUT</a><span class=\"ts\"/><a class=\"id\" href=\"#_IO\">_IO</a> ('$', 5)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_EVENT_IOC_SET_FILTER\">PERF_EVENT_IOC_SET_FILTER</a><span class=\"ts\"/><a class=\"id\" href=\"#_IOW\">_IOW</a>('$', 6, char *)", 
"", 
"enum <a class=\"id\" href=\"#perf_event_ioc_flags\">perf_event_ioc_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_IOC_FLAG_GROUP\">PERF_IOC_FLAG_GROUP</a><span class=\"ts\"/><span class=\"ts\"/>= 1U << 0,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Structure of the page that can be mapped via mmap</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#perf_event_mmap_page\">perf_event_mmap_page</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#version\">version</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* version number of this structure */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#compat_version\">compat_version</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* lowest version this is compat with */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Bits needed to read the hw events in user-space.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   u32 seq;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   s64 count;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   do {</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     seq = pc-&gt;lock;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     barrier()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     if (pc-&gt;index) {</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       count = pmc_read(pc-&gt;index - 1);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       count += pc-&gt;offset;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     } else</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       goto regular_read;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     barrier();</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   } while (pc-&gt;lock != seq);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: for obvious reason this only works on self-monitoring</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       processes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* seqlock for synchronization */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hardware event identifier */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__s64\">__s64</a><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* add to hardware event value */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><a class=\"id\" href=\"#time_enabled\">time_enabled</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* time event active */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><a class=\"id\" href=\"#time_running\">time_running</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* time event on cpu */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Hole for extension of the self monitor capabilities</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><a class=\"id\" href=\"#__reserved\">__reserved</a>[123];<span class=\"ts\"/><span class=\"comment\">/* align to 1k */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Control data for the mmap() data buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * User-space reading the @data_head value should issue an rmb(), on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SMP capable platforms, after reading this value -- see</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * perf_event_wakeup().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When the mapping is PROT_WRITE the @data_tail value should be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * written by userspace to reflect the last read data. In this case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the kernel will not over-write unread data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a>   <a class=\"id\" href=\"#data_head\">data_head</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* head in the data section */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><a class=\"id\" href=\"#data_tail\">data_tail</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* user-space written tail */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_RECORD_MISC_CPUMODE_MASK\">PERF_RECORD_MISC_CPUMODE_MASK</a><span class=\"ts\"/><span class=\"ts\"/>(7 << 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_RECORD_MISC_CPUMODE_UNKNOWN\">PERF_RECORD_MISC_CPUMODE_UNKNOWN</a><span class=\"ts\"/>(0 << 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_RECORD_MISC_KERNEL\">PERF_RECORD_MISC_KERNEL</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(1 << 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_RECORD_MISC_USER\">PERF_RECORD_MISC_USER</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(2 << 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_RECORD_MISC_HYPERVISOR\">PERF_RECORD_MISC_HYPERVISOR</a><span class=\"ts\"/><span class=\"ts\"/>(3 << 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_RECORD_MISC_GUEST_KERNEL\">PERF_RECORD_MISC_GUEST_KERNEL</a><span class=\"ts\"/><span class=\"ts\"/>(4 << 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_RECORD_MISC_GUEST_USER\">PERF_RECORD_MISC_GUEST_USER</a><span class=\"ts\"/><span class=\"ts\"/>(5 << 0)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Indicates that the content of PERF_SAMPLE_IP points to</span>", 
"<span class=\"comment\"> * the actual instruction that triggered the event. See also</span>", 
"<span class=\"comment\"> * perf_event_attr::precise_ip.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_RECORD_MISC_EXACT_IP\">PERF_RECORD_MISC_EXACT_IP</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 14)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reserve the last bit to indicate some extended misc field</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERF_RECORD_MISC_EXT_RESERVED\">PERF_RECORD_MISC_EXT_RESERVED</a><span class=\"ts\"/><span class=\"ts\"/>(1 << 15)", 
"", 
"struct <a class=\"id\" href=\"#perf_event_header\">perf_event_header</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><a class=\"id\" href=\"#misc\">misc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>;", 
"};", 
"", 
"enum <a class=\"id\" href=\"#perf_event_type\">perf_event_type</a> {", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The MMAP events record the PROT_EXEC mappings so that we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * correlate userspace IPs to code. They have the following structure:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * struct {</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>struct perf_event_header<span class=\"ts\"/>header;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u32<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>pid, tid;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>addr;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>len;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>pgoff;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>filename[];</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * };</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_RECORD_MMAP\">PERF_RECORD_MMAP</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 1,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * struct {</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>struct perf_event_header<span class=\"ts\"/>header;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>id;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>lost;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * };</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_RECORD_LOST\">PERF_RECORD_LOST</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 2,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * struct {</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>struct perf_event_header<span class=\"ts\"/>header;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u32<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>pid, tid;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>comm[];</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * };</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_RECORD_COMM\">PERF_RECORD_COMM</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 3,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * struct {</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>struct perf_event_header<span class=\"ts\"/>header;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u32<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>pid, ppid;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u32<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>tid, ptid;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>time;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * };</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_RECORD_EXIT\">PERF_RECORD_EXIT</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 4,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * struct {</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>struct perf_event_header<span class=\"ts\"/>header;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>time;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>id;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>stream_id;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * };</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_RECORD_THROTTLE\">PERF_RECORD_THROTTLE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 5,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_RECORD_UNTHROTTLE\">PERF_RECORD_UNTHROTTLE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 6,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * struct {</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>struct perf_event_header<span class=\"ts\"/>header;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u32<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>pid, ppid;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u32<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>tid, ptid;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>time;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * };</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_RECORD_FORK\">PERF_RECORD_FORK</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 7,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * struct {</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>struct perf_event_header<span class=\"ts\"/>header;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>u32<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>pid, tid;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>struct read_format<span class=\"ts\"/><span class=\"ts\"/>values;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * };</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PERF_RECORD_READ\">PERF_RECORD_READ</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 8,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * struct {</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>struct perf_event_header<span class=\"ts\"/>header;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>{ u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>ip;<span class=\"ts\"/>  } &amp;&amp; PERF_SAMPLE_IP</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>{ u32<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>pid, tid; } &amp;&amp; PERF_SAMPLE_TID</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>{ u64<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>time;     } &amp;&amp; PERF_SAMPLE_TIME</span>", 
];
xr_frag_insert('l/ae/10787c6b55a54d46d9f8c80f28c4d0b9bb820f.xr', __xr_tmp);
