var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/ipc/ipcns_notifier.c</span>", 
"<span class=\"comment\"> * Copyright (C) 2007 BULL SA. Nadia Derbey</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notification mechanism for ipc namespaces:</span>", 
"<span class=\"comment\"> * The callback routine registered in the memory chain invokes the ipcns</span>", 
"<span class=\"comment\"> * notifier chain with the IPCNS_MEMCHANGED event.</span>", 
"<span class=\"comment\"> * Each callback routine registered in the ipcns namespace recomputes msgmni</span>", 
"<span class=\"comment\"> * for the owning namespace.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#msg\">msg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nsproxy\">nsproxy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"util.h\"", 
"", 
"", 
"", 
"static <a class=\"id\" href=\"#BLOCKING_NOTIFIER_HEAD\">BLOCKING_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#ipcns_chain\">ipcns_chain</a>);", 
"", 
"", 
"static int <a class=\"id\" href=\"#ipcns_callback\">ipcns_callback</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPCNS_MEMCHANGED\">IPCNS_MEMCHANGED</a>:   <span class=\"comment\">/* amount of lowmem has changed */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPCNS_CREATED\">IPCNS_CREATED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPCNS_REMOVED\">IPCNS_REMOVED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It's time to recompute msgmni</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#self\">self</a>, struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a>, <a class=\"id\" href=\"#ipcns_nb\">ipcns_nb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * No need to get a reference on the ns: the 1st job of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * free_ipc_ns() is to unregister the callback routine.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * blocking_notifier_chain_unregister takes the wr lock to do</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When this callback routine is called the rd lock is held by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * blocking_notifier_call_chain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * So the ipc ns cannot be freed while we are here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#recompute_msgmni\">recompute_msgmni</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#register_ipcns_notifier\">register_ipcns_notifier</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ipcns_nb\">ipcns_nb</a>, 0, sizeof(<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ipcns_nb\">ipcns_nb</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ipcns_nb\">ipcns_nb</a>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#ipcns_callback\">ipcns_callback</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ipcns_nb\">ipcns_nb</a>.<a class=\"id\" href=\"#priority\">priority</a> = <a class=\"id\" href=\"#IPCNS_CALLBACK_PRI\">IPCNS_CALLBACK_PRI</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#blocking_notifier_chain_register\">blocking_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#ipcns_chain\">ipcns_chain</a>, &amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ipcns_nb\">ipcns_nb</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#auto_msgmni\">auto_msgmni</a> = 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#cond_register_ipcns_notifier\">cond_register_ipcns_notifier</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ipcns_nb\">ipcns_nb</a>, 0, sizeof(<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ipcns_nb\">ipcns_nb</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ipcns_nb\">ipcns_nb</a>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#ipcns_callback\">ipcns_callback</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ipcns_nb\">ipcns_nb</a>.<a class=\"id\" href=\"#priority\">priority</a> = <a class=\"id\" href=\"#IPCNS_CALLBACK_PRI\">IPCNS_CALLBACK_PRI</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#blocking_notifier_chain_cond_register\">blocking_notifier_chain_cond_register</a>(&amp;<a class=\"id\" href=\"#ipcns_chain\">ipcns_chain</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ipcns_nb\">ipcns_nb</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#auto_msgmni\">auto_msgmni</a> = 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#unregister_ipcns_notifier\">unregister_ipcns_notifier</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocking_notifier_chain_unregister\">blocking_notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#ipcns_chain\">ipcns_chain</a>, &amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ipcns_nb\">ipcns_nb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#auto_msgmni\">auto_msgmni</a> = 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ipcns_notify\">ipcns_notify</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#ipcns_chain\">ipcns_chain</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
];
xr_frag_insert('l/ae/4abca37ac004f6a4e20d67d75056c81091fe06.xr', __xr_tmp);
