var __xr_tmp = [
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_gso_segment\">skb_gso_segment</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#features\">features</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#segs\">segs</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EPROTONOSUPPORT\">EPROTONOSUPPORT</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *<a class=\"id\" href=\"#ptype\">ptype</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_mac_header\">skb_reset_mac_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_len\">mac_len</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#network_header\">network_header</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_pull\">__skb_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_len\">mac_len</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> != <a class=\"id\" href=\"#CHECKSUM_PARTIAL\">CHECKSUM_PARTIAL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ethtool_drvinfo\">ethtool_drvinfo</a> <a class=\"id\" href=\"#info\">info</a> = {};", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a> && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ethtool_ops\">ethtool_ops</a> && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ethtool_ops\">ethtool_ops</a>-><a class=\"id\" href=\"#get_drvinfo\">get_drvinfo</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ethtool_ops\">ethtool_ops</a>-><a class=\"id\" href=\"#get_drvinfo\">get_drvinfo</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"%s: caps=(0x%lx, 0x%lx) len=%d data_len=%d \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"ip_summed=%d\",", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#driver\">driver</a>, <a class=\"id\" href=\"#dev\">dev</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> : 0L,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a> ? <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_route_caps\">sk_route_caps</a> : 0L,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_header_cloned\">skb_header_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0, 0, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#ptype\">ptype</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#ptype_base\">ptype_base</a>[<a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#type\">type</a>) &amp; <a class=\"id\" href=\"#PTYPE_HASH_MASK\">PTYPE_HASH_MASK</a>], <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#type\">type</a> && !<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#dev\">dev</a> && <a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#gso_segment\">gso_segment</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> != <a class=\"id\" href=\"#CHECKSUM_PARTIAL\">CHECKSUM_PARTIAL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#gso_send_check\">gso_send_check</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#segs\">segs</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> || <a class=\"id\" href=\"#skb_gso_ok\">skb_gso_ok</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#features\">features</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_push\">__skb_push</a>(<a class=\"id\" href=\"#skb\">skb</a>, (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#skb_network_header\">skb_network_header</a>(<a class=\"id\" href=\"#skb\">skb</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#segs\">segs</a> = <a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#gso_segment\">gso_segment</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#features\">features</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_push\">__skb_push</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#skb_mac_header\">skb_mac_header</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#segs\">segs</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_gso_segment\">skb_gso_segment</a>);", 
"", 
"<span class=\"comment\">/* Take action when hardware reception checksum errors are detected. */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BUG\">CONFIG_BUG</a>", 
"void <a class=\"id\" href=\"#netdev_rx_csum_fault\">netdev_rx_csum_fault</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: hw csum failure.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a> : \"<unknown>\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netdev_rx_csum_fault\">netdev_rx_csum_fault</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Actually, we should eliminate this check as soon as we know, that:</span>", 
"<span class=\"comment\"> * 1. IOMMU is present and allows to map all the memory.</span>", 
"<span class=\"comment\"> * 2. No high memory really exists on this machine.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#illegal_highdma\">illegal_highdma</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_HIGHDMA\">NETIF_F_HIGHDMA</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PCI_DMA_BUS_IS_PHYS\">PCI_DMA_BUS_IS_PHYS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#page_to_phys\">page_to_phys</a>(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dma_mask\">dma_mask</a> || <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1 &gt; *<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dma_mask\">dma_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#dev_gso_cb\">dev_gso_cb</a> {", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#destructor\">destructor</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEV_GSO_CB\">DEV_GSO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>) ((struct <a class=\"id\" href=\"#dev_gso_cb\">dev_gso_cb</a> *)(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#cb\">cb</a>)", 
"", 
"static void <a class=\"id\" href=\"#dev_gso_skb_destructor\">dev_gso_skb_destructor</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dev_gso_cb\">dev_gso_cb</a> *<a class=\"id\" href=\"#cb\">cb</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#nskb\">nskb</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#nskb\">nskb</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nskb\">nskb</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#nskb\">nskb</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a> = <a class=\"id\" href=\"#DEV_GSO_CB\">DEV_GSO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#destructor\">destructor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#destructor\">destructor</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_gso_segment - Perform emulated hardware segmentation on skb.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to segment</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function segments the given skb and stores the list of segments</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in skb-&gt;next.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dev_gso_segment\">dev_gso_segment</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#segs\">segs</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#features\">features</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; ~(<a class=\"id\" href=\"#illegal_highdma\">illegal_highdma</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#skb\">skb</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#NETIF_F_SG\">NETIF_F_SG</a> : 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#segs\">segs</a> = <a class=\"id\" href=\"#skb_gso_segment\">skb_gso_segment</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#features\">features</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Verifying header integrity only. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#segs\">segs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#segs\">segs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#segs\">segs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#segs\">segs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEV_GSO_CB\">DEV_GSO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#destructor\">destructor</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#destructor\">destructor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#destructor\">destructor</a> = <a class=\"id\" href=\"#dev_gso_skb_destructor\">dev_gso_skb_destructor</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to orphan skb early, right before transmission by the device.</span>", 
"<span class=\"comment\"> * We cannot orphan skb if tx timestamp is requested, since</span>", 
"<span class=\"comment\"> * drivers need to call skb_tstamp_tx() to send the timestamp.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_orphan_try\">skb_orphan_try</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a> && !<a class=\"id\" href=\"#skb_tx\">skb_tx</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flags\">flags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skb_tx_hash() wont be able to get sk.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We copy sk_hash into skb-&gt;rxhash</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#rxhash\">rxhash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#rxhash\">rxhash</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_hash\">sk_hash</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_orphan\">skb_orphan</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns true if either:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1. skb has frag_list and the device doesn't support FRAGLIST, or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2. skb is fragmented and the device does not support SG, or if</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   at least one of fragments is in highmem and device does not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   support DMA from it.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_needs_linearize\">skb_needs_linearize</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_is_nonlinear\">skb_is_nonlinear</a>(<a class=\"id\" href=\"#skb\">skb</a>) &&", 
"<span class=\"ts\"/>       ((<a class=\"id\" href=\"#skb_has_frags\">skb_has_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>) && !(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_FRAGLIST\">NETIF_F_FRAGLIST</a>)) ||", 
"<span class=\"ts\"/>        (<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> && (!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_SG\">NETIF_F_SG</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#illegal_highdma\">illegal_highdma</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#skb\">skb</a>))));", 
"}", 
"", 
"int <a class=\"id\" href=\"#dev_hard_start_xmit\">dev_hard_start_xmit</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#txq\">txq</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#net_device_ops\">net_device_ops</a> *<a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#netdev_ops\">netdev_ops</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#NETDEV_TX_OK\">NETDEV_TX_OK</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ptype_all\">ptype_all</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_queue_xmit_nit\">dev_queue_xmit_nit</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If device doesnt need skb-&gt;dst, release it right now while</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * its hot in this cpu cache</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#priv_flags\">priv_flags</a> &amp; <a class=\"id\" href=\"#IFF_XMIT_DST_RELEASE\">IFF_XMIT_DST_RELEASE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_dst_drop\">skb_dst_drop</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_orphan_try\">skb_orphan_try</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#netif_needs_gso\">netif_needs_gso</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#dev_gso_segment\">dev_gso_segment</a>(<a class=\"id\" href=\"#skb\">skb</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_kfree_skb\">out_kfree_skb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#gso\">gso</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_needs_linearize\">skb_needs_linearize</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#dev\">dev</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__skb_linearize\">__skb_linearize</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_kfree_skb\">out_kfree_skb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If packet is not checksummed and device does not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * support checksumming for this protocol, complete</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * checksumming here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_PARTIAL\">CHECKSUM_PARTIAL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_set_transport_header\">skb_set_transport_header</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum_start\">csum_start</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#skb_headroom\">skb_headroom</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev_can_checksum\">dev_can_checksum</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#skb\">skb</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#skb_checksum_help\">skb_checksum_help</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_kfree_skb\">out_kfree_skb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ndo_start_xmit\">ndo_start_xmit</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == <a class=\"id\" href=\"#NETDEV_TX_OK\">NETDEV_TX_OK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#txq_trans_update\">txq_trans_update</a>(<a class=\"id\" href=\"#txq\">txq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#gso\">gso</a>:", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#nskb\">nskb</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#nskb\">nskb</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nskb\">nskb</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If device doesnt need nskb-&gt;dst, release it right now while</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * its hot in this cpu cache</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#priv_flags\">priv_flags</a> &amp; <a class=\"id\" href=\"#IFF_XMIT_DST_RELEASE\">IFF_XMIT_DST_RELEASE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_dst_drop\">skb_dst_drop</a>(<a class=\"id\" href=\"#nskb\">nskb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ndo_start_xmit\">ndo_start_xmit</a>(<a class=\"id\" href=\"#nskb\">nskb</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rc\">rc</a> != <a class=\"id\" href=\"#NETDEV_TX_OK\">NETDEV_TX_OK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &amp; ~<a class=\"id\" href=\"#NETDEV_TX_MASK\">NETDEV_TX_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_kfree_gso_skb\">out_kfree_gso_skb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nskb\">nskb</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#nskb\">nskb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#txq_trans_update\">txq_trans_update</a>(<a class=\"id\" href=\"#txq\">txq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#netif_tx_queue_stopped\">netif_tx_queue_stopped</a>(<a class=\"id\" href=\"#txq\">txq</a>) && <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NETDEV_TX_BUSY\">NETDEV_TX_BUSY</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"", 
"<a class=\"id\" href=\"#out_kfree_gso_skb\">out_kfree_gso_skb</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#destructor\">destructor</a> = <a class=\"id\" href=\"#DEV_GSO_CB\">DEV_GSO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#destructor\">destructor</a>;", 
"<a class=\"id\" href=\"#out_kfree_skb\">out_kfree_skb</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hashrnd\">hashrnd</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#skb_tx_hash\">skb_tx_hash</a>(const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hash\">hash</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_rx_queue_recorded\">skb_rx_queue_recorded</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#skb_get_rx_queue\">skb_get_rx_queue</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#hash\">hash</a> >= <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#real_num_tx_queues\">real_num_tx_queues</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> -= <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#real_num_tx_queues\">real_num_tx_queues</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a> && <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_hash\">sk_hash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_hash\">sk_hash</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u16\">u16</a>) <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a> ^ <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#rxhash\">rxhash</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#jhash_1word\">jhash_1word</a>(<a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#hashrnd\">hashrnd</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u16\">u16</a>) (((<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#hash\">hash</a> * <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#real_num_tx_queues\">real_num_tx_queues</a>) >> 32);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_tx_hash\">skb_tx_hash</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#dev_cap_txqueue\">dev_cap_txqueue</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#queue_index\">queue_index</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#queue_index\">queue_index</a> >= <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#real_num_tx_queues\">real_num_tx_queues</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"%s selects TX queue %d, but \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"real number of TX queues is %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#queue_index\">queue_index</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#real_num_tx_queues\">real_num_tx_queues</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#queue_index\">queue_index</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#dev_pick_tx\">dev_pick_tx</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#queue_index\">queue_index</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#net_device_ops\">net_device_ops</a> *<a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#netdev_ops\">netdev_ops</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ndo_select_queue\">ndo_select_queue</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_index\">queue_index</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#ndo_select_queue\">ndo_select_queue</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_index\">queue_index</a> = <a class=\"id\" href=\"#dev_cap_txqueue\">dev_cap_txqueue</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#queue_index\">queue_index</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_index\">queue_index</a> = <a class=\"id\" href=\"#sk_tx_queue_get\">sk_tx_queue_get</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#queue_index\">queue_index</a> &lt; 0) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_index\">queue_index</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#real_num_tx_queues\">real_num_tx_queues</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_index\">queue_index</a> = <a class=\"id\" href=\"#skb_tx_hash\">skb_tx_hash</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_dst_cache\">sk_dst_cache</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a> && <a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>) == <a class=\"id\" href=\"#dst\">dst</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_tx_queue_set\">sk_tx_queue_set</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#queue_index\">queue_index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_set_queue_mapping\">skb_set_queue_mapping</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#queue_index\">queue_index</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#netdev_get_tx_queue\">netdev_get_tx_queue</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#queue_index\">queue_index</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__dev_xmit_skb\">__dev_xmit_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#Qdisc\">Qdisc</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#txq\">txq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#root_lock\">root_lock</a> = <a class=\"id\" href=\"#qdisc_lock\">qdisc_lock</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#contended\">contended</a> = <a class=\"id\" href=\"#qdisc_is_running\">qdisc_is_running</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Heuristic to force contended enqueues to serialize on a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * separate lock before trying to get qdisc main lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This permits __QDISC_STATE_RUNNING owner to get the lock more often</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and dequeue packets faster.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#contended\">contended</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#busylock\">busylock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#root_lock\">root_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#__QDISC_STATE_DEACTIVATED\">__QDISC_STATE_DEACTIVATED</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#state\">state</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#NET_XMIT_DROP\">NET_XMIT_DROP</a>;", 
"<span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TCQ_F_CAN_BYPASS\">TCQ_F_CAN_BYPASS</a>) && !<a class=\"id\" href=\"#qdisc_qlen\">qdisc_qlen</a>(<a class=\"id\" href=\"#q\">q</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#qdisc_run_begin\">qdisc_run_begin</a>(<a class=\"id\" href=\"#q\">q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is a work-conserving queue; there are no old skbs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * waiting to be sent out; and the qdisc is not running -</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * xmit the skb directly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#priv_flags\">priv_flags</a> &amp; <a class=\"id\" href=\"#IFF_XMIT_DST_RELEASE\">IFF_XMIT_DST_RELEASE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_dst_force\">skb_dst_force</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__qdisc_update_bstats\">__qdisc_update_bstats</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sch_direct_xmit\">sch_direct_xmit</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#txq\">txq</a>, <a class=\"id\" href=\"#root_lock\">root_lock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#contended\">contended</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#busylock\">busylock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#contended\">contended</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__qdisc_run\">__qdisc_run</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qdisc_run_end\">qdisc_run_end</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#NET_XMIT_SUCCESS\">NET_XMIT_SUCCESS</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_dst_force\">skb_dst_force</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#qdisc_enqueue_root\">qdisc_enqueue_root</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qdisc_run_begin\">qdisc_run_begin</a>(<a class=\"id\" href=\"#q\">q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#contended\">contended</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#busylock\">busylock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#contended\">contended</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__qdisc_run\">__qdisc_run</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#root_lock\">root_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#contended\">contended</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#busylock\">busylock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev_queue_xmit - transmit a buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to transmit</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Queue a buffer for transmission to a network device. The caller must</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>have set the device and priority and built the buffer before calling</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this function. The function can be called from an interrupt.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>A negative errno code is returned on a failure. A success does not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>guarantee the frame will be transmitted as it may be dropped due</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to congestion or traffic shaping.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * -----------------------------------------------------------------------------------</span>", 
"<span class=\"comment\"> *      I notice this method can also return errors from the queue disciplines,</span>", 
"<span class=\"comment\"> *      including NET_XMIT_DROP, which is a positive value.  So, errors can also</span>", 
"<span class=\"comment\"> *      be positive.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      Regardless of the return value, the skb is consumed, so it is currently</span>", 
"<span class=\"comment\"> *      difficult to retry a send to this method.  (You can bump the ref count</span>", 
"<span class=\"comment\"> *      before sending to hold a reference for retry if you are careful.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      When calling this method, interrupts MUST be enabled.  This is because</span>", 
"<span class=\"comment\"> *      the BH enable code must have IRQs enabled so that it will not deadlock.</span>", 
"<span class=\"comment\"> *          --BLG</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dev_queue_xmit\">dev_queue_xmit</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#txq\">txq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Qdisc\">Qdisc</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Disable soft irqs for various locks below. Also</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stops preemption for RCU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock_bh\">rcu_read_lock_bh</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#txq\">txq</a> = <a class=\"id\" href=\"#dev_pick_tx\">dev_pick_tx</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#rcu_dereference_bh\">rcu_dereference_bh</a>(<a class=\"id\" href=\"#txq\">txq</a>-><a class=\"id\" href=\"#qdisc\">qdisc</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_CLS_ACT\">CONFIG_NET_CLS_ACT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tc_verd\">tc_verd</a> = <a class=\"id\" href=\"#SET_TC_AT\">SET_TC_AT</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tc_verd\">tc_verd</a>, <a class=\"id\" href=\"#AT_EGRESS\">AT_EGRESS</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#enqueue\">enqueue</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#__dev_xmit_skb\">__dev_xmit_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#txq\">txq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The device has no queue. Common case for software devices:</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   loopback, all the sorts of tunnels...</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Really, it is unlikely that netif_tx_lock protection is necessary</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   here.  (f.e. loopback and IP tunnels are clean ignoring statistics</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   counters.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   However, it is possible, that they rely on protection</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   made by us here.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Check this and shot the lock. It is not prone from deadlocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Either shot noqueue qdisc, it is even simpler 8)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IFF_UP\">IFF_UP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(); <span class=\"comment\">/* ok because BHs are off */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#txq\">txq</a>-><a class=\"id\" href=\"#xmit_lock_owner\">xmit_lock_owner</a> != <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#HARD_TX_LOCK\">HARD_TX_LOCK</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#txq\">txq</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#netif_tx_queue_stopped\">netif_tx_queue_stopped</a>(<a class=\"id\" href=\"#txq\">txq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#dev_hard_start_xmit\">dev_hard_start_xmit</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#txq\">txq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev_xmit_complete\">dev_xmit_complete</a>(<a class=\"id\" href=\"#rc\">rc</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#HARD_TX_UNLOCK\">HARD_TX_UNLOCK</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#txq\">txq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#HARD_TX_UNLOCK\">HARD_TX_UNLOCK</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#txq\">txq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"Virtual device %s asks to \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"queue packet!\\n\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Recursion is detected! It is possible,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * unfortunately */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"Dead loop on virtual device \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"%s, fix it urgently!\\n\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENETDOWN\">ENETDOWN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock_bh\">rcu_read_unlock_bh</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock_bh\">rcu_read_unlock_bh</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_queue_xmit\">dev_queue_xmit</a>);", 
"", 
"", 
"<span class=\"comment\">/*=======================================================================</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Receiver routines</span>", 
"<span class=\"comment\">  =======================================================================*/</span>", 
"", 
"int <a class=\"id\" href=\"#netdev_max_backlog\">netdev_max_backlog</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1000;", 
"int <a class=\"id\" href=\"#netdev_tstamp_prequeue\">netdev_tstamp_prequeue</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"int <a class=\"id\" href=\"#netdev_budget\">netdev_budget</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 300;", 
"int <a class=\"id\" href=\"#weight_p\">weight_p</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 64;            <span class=\"comment\">/* old backlog weight */</span>", 
"", 
"<span class=\"comment\">/* Called with irq disabled */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#____napi_schedule\">____napi_schedule</a>(struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#poll_list\">poll_list</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#poll_list\">poll_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__raise_softirq_irqoff\">__raise_softirq_irqoff</a>(<a class=\"id\" href=\"#NET_RX_SOFTIRQ\">NET_RX_SOFTIRQ</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"", 
"<span class=\"comment\">/* One global table that all flow-based protocols share. */</span>", 
"struct <a class=\"id\" href=\"#rps_sock_flow_table\">rps_sock_flow_table</a> *<a class=\"id\" href=\"#rps_sock_flow_table\">rps_sock_flow_table</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#rps_sock_flow_table\">rps_sock_flow_table</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * get_rps_cpu is called from netif_receive_skb and returns the target</span>", 
"<span class=\"comment\"> * CPU from the RPS map of the receiving queue for a given skb.</span>", 
"<span class=\"comment\"> * rcu_read_lock must be held on entry.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#get_rps_cpu\">get_rps_cpu</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#rps_dev_flow\">rps_dev_flow</a> **<a class=\"id\" href=\"#rflowp\">rflowp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipv6hdr\">ipv6hdr</a> *<a class=\"id\" href=\"#ip6\">ip6</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_rx_queue\">netdev_rx_queue</a> *<a class=\"id\" href=\"#rxqueue\">rxqueue</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rps_map\">rps_map</a> *<a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rps_dev_flow_table\">rps_dev_flow_table</a> *<a class=\"id\" href=\"#flow_table\">flow_table</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rps_sock_flow_table\">rps_sock_flow_table</a> *<a class=\"id\" href=\"#sock_flow_table\">sock_flow_table</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ip_proto\">ip_proto</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tcpu\">tcpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#addr1\">addr1</a>, <a class=\"id\" href=\"#addr2\">addr2</a>, <a class=\"id\" href=\"#ihl\">ihl</a>;", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#v32\">v32</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#v16\">v16</a>[2];", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#ports\">ports</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_rx_queue_recorded\">skb_rx_queue_recorded</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#skb_get_rx_queue\">skb_get_rx_queue</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#num_rx_queues\">num_rx_queues</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#num_rx_queues\">num_rx_queues</a> &gt; 1, \"%s received packet \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"on queue %u, but number of RX queues is %u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#num_rx_queues\">num_rx_queues</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rxqueue\">rxqueue</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#_rx\">_rx</a> + <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rxqueue\">rxqueue</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#_rx\">_rx</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rxqueue\">rxqueue</a>-><a class=\"id\" href=\"#rps_map\">rps_map</a> && !<a class=\"id\" href=\"#rxqueue\">rxqueue</a>-><a class=\"id\" href=\"#rps_flow_table\">rps_flow_table</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#rxhash\">rxhash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_hash\">got_hash</a>; <span class=\"comment\">/* Skip hash computation on packet header */</span>", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#__constant_htons\">__constant_htons</a>(<a class=\"id\" href=\"#ETH_P_IP\">ETH_P_IP</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, sizeof(*<a class=\"id\" href=\"#ip\">ip</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a> = (struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *) <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip_proto\">ip_proto</a> = <a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr1\">addr1</a> = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#saddr\">saddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr2\">addr2</a> = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#daddr\">daddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ihl\">ihl</a> = <a class=\"id\" href=\"#ip\">ip</a>-><a class=\"id\" href=\"#ihl\">ihl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#__constant_htons\">__constant_htons</a>(<a class=\"id\" href=\"#ETH_P_IPV6\">ETH_P_IPV6</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, sizeof(*<a class=\"id\" href=\"#ip6\">ip6</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip6\">ip6</a> = (struct <a class=\"id\" href=\"#ipv6hdr\">ipv6hdr</a> *) <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip_proto\">ip_proto</a> = <a class=\"id\" href=\"#ip6\">ip6</a>-><a class=\"id\" href=\"#nexthdr\">nexthdr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr1\">addr1</a> = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#ip6\">ip6</a>-><a class=\"id\" href=\"#saddr\">saddr</a>.<a class=\"id\" href=\"#s6_addr32\">s6_addr32</a>[3];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr2\">addr2</a> = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#ip6\">ip6</a>-><a class=\"id\" href=\"#daddr\">daddr</a>.<a class=\"id\" href=\"#s6_addr32\">s6_addr32</a>[3];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ihl\">ihl</a> = (40 >> 2);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#ip_proto\">ip_proto</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPPROTO_TCP\">IPPROTO_TCP</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPPROTO_UDP\">IPPROTO_UDP</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPPROTO_DCCP\">IPPROTO_DCCP</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPPROTO_ESP\">IPPROTO_ESP</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPPROTO_AH\">IPPROTO_AH</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPPROTO_SCTP\">IPPROTO_SCTP</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IPPROTO_UDPLITE\">IPPROTO_UDPLITE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, (<a class=\"id\" href=\"#ihl\">ihl</a> * 4) + 4)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ports\">ports</a>.<a class=\"id\" href=\"#v32\">v32</a> = * (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a> *) (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + (<a class=\"id\" href=\"#ihl\">ihl</a> * 4));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ports\">ports</a>.<a class=\"id\" href=\"#v16\">v16</a>[1] &lt; <a class=\"id\" href=\"#ports\">ports</a>.<a class=\"id\" href=\"#v16\">v16</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap\">swap</a>(<a class=\"id\" href=\"#ports\">ports</a>.<a class=\"id\" href=\"#v16\">v16</a>[0], <a class=\"id\" href=\"#ports\">ports</a>.<a class=\"id\" href=\"#v16\">v16</a>[1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ports\">ports</a>.<a class=\"id\" href=\"#v32\">v32</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* get a consistent hash (same value on both flow directions) */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr2\">addr2</a> &lt; <a class=\"id\" href=\"#addr1\">addr1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap\">swap</a>(<a class=\"id\" href=\"#addr1\">addr1</a>, <a class=\"id\" href=\"#addr2\">addr2</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#rxhash\">rxhash</a> = <a class=\"id\" href=\"#jhash_3words\">jhash_3words</a>(<a class=\"id\" href=\"#addr1\">addr1</a>, <a class=\"id\" href=\"#addr2\">addr2</a>, <a class=\"id\" href=\"#ports\">ports</a>.<a class=\"id\" href=\"#v32\">v32</a>, <a class=\"id\" href=\"#hashrnd\">hashrnd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#rxhash\">rxhash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#rxhash\">rxhash</a> = 1;", 
"", 
"<a class=\"id\" href=\"#got_hash\">got_hash</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flow_table\">flow_table</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#rxqueue\">rxqueue</a>-><a class=\"id\" href=\"#rps_flow_table\">rps_flow_table</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_flow_table\">sock_flow_table</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#rps_sock_flow_table\">rps_sock_flow_table</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flow_table\">flow_table</a> && <a class=\"id\" href=\"#sock_flow_table\">sock_flow_table</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#next_cpu\">next_cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rps_dev_flow\">rps_dev_flow</a> *<a class=\"id\" href=\"#rflow\">rflow</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rflow\">rflow</a> = &amp;<a class=\"id\" href=\"#flow_table\">flow_table</a>-><a class=\"id\" href=\"#flows\">flows</a>[<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#rxhash\">rxhash</a> &amp; <a class=\"id\" href=\"#flow_table\">flow_table</a>-><a class=\"id\" href=\"#mask\">mask</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcpu\">tcpu</a> = <a class=\"id\" href=\"#rflow\">rflow</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_cpu\">next_cpu</a> = <a class=\"id\" href=\"#sock_flow_table\">sock_flow_table</a>-><a class=\"id\" href=\"#ents\">ents</a>[<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#rxhash\">rxhash</a> &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sock_flow_table\">sock_flow_table</a>-><a class=\"id\" href=\"#mask\">mask</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the desired CPU (where last recvmsg was done) is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * different from current CPU (one in the rx-queue flow</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * table entry), switch if one of the following holds:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *   - Current CPU is unset (equal to RPS_NO_CPU).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *   - Current CPU is offline.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *   - The current CPU's queue tail has advanced beyond the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *     last packet that was enqueued using this table entry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *     This guarantees that all previous packets for the flow</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *     have been dequeued, thus preserving in order delivery.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tcpu\">tcpu</a> != <a class=\"id\" href=\"#next_cpu\">next_cpu</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#tcpu\">tcpu</a> == <a class=\"id\" href=\"#RPS_NO_CPU\">RPS_NO_CPU</a> || !<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#tcpu\">tcpu</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     ((int)(<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>, <a class=\"id\" href=\"#tcpu\">tcpu</a>).<a class=\"id\" href=\"#input_queue_head\">input_queue_head</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#rflow\">rflow</a>-><a class=\"id\" href=\"#last_qtail\">last_qtail</a>)) >= 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcpu\">tcpu</a> = <a class=\"id\" href=\"#rflow\">rflow</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#next_cpu\">next_cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcpu\">tcpu</a> != <a class=\"id\" href=\"#RPS_NO_CPU\">RPS_NO_CPU</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rflow\">rflow</a>-><a class=\"id\" href=\"#last_qtail\">last_qtail</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tcpu\">tcpu</a>).<a class=\"id\" href=\"#input_queue_head\">input_queue_head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcpu\">tcpu</a> != <a class=\"id\" href=\"#RPS_NO_CPU\">RPS_NO_CPU</a> && <a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#tcpu\">tcpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rflowp\">rflowp</a> = <a class=\"id\" href=\"#rflow\">rflow</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#tcpu\">tcpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#rxqueue\">rxqueue</a>-><a class=\"id\" href=\"#rps_map\">rps_map</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#map\">map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcpu\">tcpu</a> = <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#cpus\">cpus</a>[((<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#rxhash\">rxhash</a> * <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#len\">len</a>) >> 32];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#tcpu\">tcpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#tcpu\">tcpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Called from hardirq (IPI) context */</span>", 
"static void <a class=\"id\" href=\"#rps_trigger_softirq\">rps_trigger_softirq</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#____napi_schedule\">____napi_schedule</a>(<a class=\"id\" href=\"#sd\">sd</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#backlog\">backlog</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#received_rps\">received_rps</a>++;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_RPS */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check if this softnet_data structure is another cpu one</span>", 
"<span class=\"comment\"> * If yes, queue it to our IPI list and return 1</span>", 
"<span class=\"comment\"> * If no, return 0</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rps_ipi_queued\">rps_ipi_queued</a>(struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#mysd\">mysd</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a> != <a class=\"id\" href=\"#mysd\">mysd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#rps_ipi_next\">rps_ipi_next</a> = <a class=\"id\" href=\"#mysd\">mysd</a>-><a class=\"id\" href=\"#rps_ipi_list\">rps_ipi_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mysd\">mysd</a>-><a class=\"id\" href=\"#rps_ipi_list\">rps_ipi_list</a> = <a class=\"id\" href=\"#sd\">sd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__raise_softirq_irqoff\">__raise_softirq_irqoff</a>(<a class=\"id\" href=\"#NET_RX_SOFTIRQ\">NET_RX_SOFTIRQ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_RPS */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * enqueue_to_backlog is called to queue an skb to a per CPU backlog</span>", 
"<span class=\"comment\"> * queue (may be a remote CPU queue).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#enqueue_to_backlog\">enqueue_to_backlog</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int *<a class=\"id\" href=\"#qtail\">qtail</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rps_lock\">rps_lock</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_queue_len\">skb_queue_len</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#input_pkt_queue\">input_pkt_queue</a>) <= <a class=\"id\" href=\"#netdev_max_backlog\">netdev_max_backlog</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_queue_len\">skb_queue_len</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#input_pkt_queue\">input_pkt_queue</a>)) {", 
"<a class=\"id\" href=\"#enqueue\">enqueue</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_tail\">__skb_queue_tail</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#input_pkt_queue\">input_pkt_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_queue_tail_incr_save\">input_queue_tail_incr_save</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#qtail\">qtail</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rps_unlock\">rps_unlock</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NET_RX_SUCCESS\">NET_RX_SUCCESS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Schedule NAPI for backlog device</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can use non atomic operation since we own the queue lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#__test_and_set_bit\">__test_and_set_bit</a>(<a class=\"id\" href=\"#NAPI_STATE_SCHED\">NAPI_STATE_SCHED</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#backlog\">backlog</a>.<a class=\"id\" href=\"#state\">state</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rps_ipi_queued\">rps_ipi_queued</a>(<a class=\"id\" href=\"#sd\">sd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#____napi_schedule\">____napi_schedule</a>(<a class=\"id\" href=\"#sd\">sd</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#backlog\">backlog</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#enqueue\">enqueue</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#dropped\">dropped</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rps_unlock\">rps_unlock</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NET_RX_DROP\">NET_RX_DROP</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netif_rx<span class=\"ts\"/>-<span class=\"ts\"/>post buffer to the network code</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to post</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function receives a packet from a device driver and queues it for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the upper (protocol) levels to process.  It always succeeds. The buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>may be dropped during processing for congestion control or by the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>protocol layers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>return values:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NET_RX_SUCCESS<span class=\"ts\"/>(no congestion)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NET_RX_DROP     (packet was dropped)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#netif_rx\">netif_rx</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if netpoll wants it, pretend we never saw it */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#netpoll_rx\">netpoll_rx</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NET_RX_DROP\">NET_RX_DROP</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#netdev_tstamp_prequeue\">netdev_tstamp_prequeue</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net_timestamp_check\">net_timestamp_check</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rps_dev_flow\">rps_dev_flow</a> <a class=\"id\" href=\"#voidflow\">voidflow</a>, *<a class=\"id\" href=\"#rflow\">rflow</a> = &amp;<a class=\"id\" href=\"#voidflow\">voidflow</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#get_rps_cpu\">get_rps_cpu</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#rflow\">rflow</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#enqueue_to_backlog\">enqueue_to_backlog</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#rflow\">rflow</a>-><a class=\"id\" href=\"#last_qtail\">last_qtail</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>}", 
"#else", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#qtail\">qtail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#enqueue_to_backlog\">enqueue_to_backlog</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#get_cpu\">get_cpu</a>(), &amp;<a class=\"id\" href=\"#qtail\">qtail</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netif_rx\">netif_rx</a>);", 
"", 
"int <a class=\"id\" href=\"#netif_rx_ni\">netif_rx_ni</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#netif_rx\">netif_rx</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local_softirq_pending\">local_softirq_pending</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_softirq\">do_softirq</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netif_rx_ni\">netif_rx_ni</a>);", 
"", 
"static void <a class=\"id\" href=\"#net_tx_action\">net_tx_action</a>(struct <a class=\"id\" href=\"#softirq_action\">softirq_action</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#completion_queue\">completion_queue</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#clist\">clist</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clist\">clist</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#completion_queue\">completion_queue</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#completion_queue\">completion_queue</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#clist\">clist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#clist\">clist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clist\">clist</a> = <a class=\"id\" href=\"#clist\">clist</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#users\">users</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kfree_skb\">__kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#output_queue\">output_queue</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#Qdisc\">Qdisc</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#output_queue\">output_queue</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#output_queue\">output_queue</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#output_queue_tailp\">output_queue_tailp</a> = &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#output_queue\">output_queue</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#Qdisc\">Qdisc</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#root_lock\">root_lock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next_sched\">next_sched</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root_lock\">root_lock</a> = <a class=\"id\" href=\"#qdisc_lock\">qdisc_lock</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#spin_trylock\">spin_trylock</a>(<a class=\"id\" href=\"#root_lock\">root_lock</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__before_clear_bit\">smp_mb__before_clear_bit</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#__QDISC_STATE_SCHED\">__QDISC_STATE_SCHED</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qdisc_run\">qdisc_run</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#root_lock\">root_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#__QDISC_STATE_DEACTIVATED\">__QDISC_STATE_DEACTIVATED</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#state\">state</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__netif_reschedule\">__netif_reschedule</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__before_clear_bit\">smp_mb__before_clear_bit</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#__QDISC_STATE_SCHED\">__QDISC_STATE_SCHED</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#deliver_skb\">deliver_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *<a class=\"id\" href=\"#pt_prev\">pt_prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#orig_dev\">orig_dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#users\">users</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pt_prev\">pt_prev</a>-><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pt_prev\">pt_prev</a>, <a class=\"id\" href=\"#orig_dev\">orig_dev</a>);", 
"}", 
"", 
"#if (<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_BRIDGE\">CONFIG_BRIDGE</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_BRIDGE_MODULE\">CONFIG_BRIDGE_MODULE</a>)) && \\", 
"    (<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ATM_LANE\">CONFIG_ATM_LANE</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ATM_LANE_MODULE\">CONFIG_ATM_LANE_MODULE</a>))", 
"<span class=\"comment\">/* This hook is defined here for ATM LANE */</span>", 
"int (*<a class=\"id\" href=\"#br_fdb_test_addr_hook\">br_fdb_test_addr_hook</a>)(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned char *<a class=\"id\" href=\"#addr\">addr</a>) <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#br_fdb_test_addr_hook\">br_fdb_test_addr_hook</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_CLS_ACT\">CONFIG_NET_CLS_ACT</a>", 
"<span class=\"comment\">/* TODO: Maybe we should just force sch_ingress to be compiled in</span>", 
"<span class=\"comment\"> * when CONFIG_NET_CLS_ACT is? otherwise some useless instructions</span>", 
"<span class=\"comment\"> * a compare and 2 stores extra right now if we dont have it on</span>", 
"<span class=\"comment\"> * but have CONFIG_NET_CLS_ACT</span>", 
"<span class=\"comment\"> * NOTE: This doesnt stop any functionality; if you dont have</span>", 
"<span class=\"comment\"> * the ingress scheduler, you just cant add policies on ingress.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ing_filter\">ing_filter</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ttl\">ttl</a> = <a class=\"id\" href=\"#G_TC_RTTL\">G_TC_RTTL</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tc_verd\">tc_verd</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netdev_queue\">netdev_queue</a> *<a class=\"id\" href=\"#rxq\">rxq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#TC_ACT_OK\">TC_ACT_OK</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Qdisc\">Qdisc</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#MAX_RED_LOOP\">MAX_RED_LOOP</a> &lt; <a class=\"id\" href=\"#ttl\">ttl</a>++)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>( \"Redir loop detected Dropping packet (%d->%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#skb_iif\">skb_iif</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TC_ACT_SHOT\">TC_ACT_SHOT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tc_verd\">tc_verd</a> = <a class=\"id\" href=\"#SET_TC_RTTL\">SET_TC_RTTL</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tc_verd\">tc_verd</a>, <a class=\"id\" href=\"#ttl\">ttl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tc_verd\">tc_verd</a> = <a class=\"id\" href=\"#SET_TC_AT\">SET_TC_AT</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tc_verd\">tc_verd</a>, <a class=\"id\" href=\"#AT_INGRESS\">AT_INGRESS</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rxq\">rxq</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rx_queue\">rx_queue</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#rxq\">rxq</a>-><a class=\"id\" href=\"#qdisc\">qdisc</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a> != &amp;<a class=\"id\" href=\"#noop_qdisc\">noop_qdisc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#qdisc_lock\">qdisc_lock</a>(<a class=\"id\" href=\"#q\">q</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#__QDISC_STATE_DEACTIVATED\">__QDISC_STATE_DEACTIVATED</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#state\">state</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#qdisc_enqueue_root\">qdisc_enqueue_root</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#qdisc_lock\">qdisc_lock</a>(<a class=\"id\" href=\"#q\">q</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#handle_ing\">handle_ing</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#packet_type\">packet_type</a> **<a class=\"id\" href=\"#pt_prev\">pt_prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int *<a class=\"id\" href=\"#ret\">ret</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#orig_dev\">orig_dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rx_queue\">rx_queue</a>.<a class=\"id\" href=\"#qdisc\">qdisc</a> == &amp;<a class=\"id\" href=\"#noop_qdisc\">noop_qdisc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pt_prev\">pt_prev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#deliver_skb\">deliver_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>, *<a class=\"id\" href=\"#pt_prev\">pt_prev</a>, <a class=\"id\" href=\"#orig_dev\">orig_dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pt_prev\">pt_prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#ing_filter\">ing_filter</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TC_ACT_SHOT\">TC_ACT_SHOT</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TC_ACT_STOLEN\">TC_ACT_STOLEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tc_verd\">tc_verd</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>netif_nit_deliver - deliver received packets to network taps</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@skb: buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>This function is used to deliver incoming packets to network</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>taps. It should be used when the normal netif_receive_skb path</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>is bypassed, for example because of VLAN acceleration.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#netif_nit_deliver\">netif_nit_deliver</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *<a class=\"id\" href=\"#ptype\">ptype</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ptype_all\">ptype_all</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_network_header\">skb_reset_network_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_transport_header\">skb_reset_transport_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_len\">mac_len</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#network_header\">network_header</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#ptype\">ptype</a>, &amp;<a class=\"id\" href=\"#ptype_all\">ptype_all</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#dev\">dev</a> || <a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deliver_skb\">deliver_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ptype\">ptype</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netdev_rx_handler_register - register receive handler</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device to register a handler for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rx_handler: receive handler to register</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rx_handler_data: data pointer that is used by rx handler</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Register a receive hander for a device. This handler will then be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>called from __netif_receive_skb. A negative errno code is returned</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on a failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The caller must hold the rtnl_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#netdev_rx_handler_register\">netdev_rx_handler_register</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#rx_handler_func_t\">rx_handler_func_t</a> *<a class=\"id\" href=\"#rx_handler\">rx_handler</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#rx_handler_data\">rx_handler_data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rx_handler\">rx_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rx_handler_data\">rx_handler_data</a>, <a class=\"id\" href=\"#rx_handler_data\">rx_handler_data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rx_handler\">rx_handler</a>, <a class=\"id\" href=\"#rx_handler\">rx_handler</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#netdev_rx_handler_register\">netdev_rx_handler_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netdev_rx_handler_unregister - unregister receive handler</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device to unregister a handler from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Unregister a receive hander from a device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The caller must hold the rtnl_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#netdev_rx_handler_unregister\">netdev_rx_handler_unregister</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSERT_RTNL\">ASSERT_RTNL</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rx_handler\">rx_handler</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rx_handler_data\">rx_handler_data</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#netdev_rx_handler_unregister\">netdev_rx_handler_unregister</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_bond_set_mac_by_master\">skb_bond_set_mac_by_master</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#master\">master</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#pkt_type\">pkt_type</a> == <a class=\"id\" href=\"#PACKET_HOST\">PACKET_HOST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#dest\">dest</a> = (<a class=\"id\" href=\"#u16\">u16</a> *) <a class=\"id\" href=\"#eth_hdr\">eth_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#h_dest\">h_dest</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* On bonding slaves other than the currently active slave, suppress</span>", 
"<span class=\"comment\"> * duplicates except for 802.3ad ETH_P_SLOW, alb non-mcast/bcast, and</span>", 
"<span class=\"comment\"> * ARP on active-backup slaves with arp_validate enabled.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__skb_bond_should_drop\">__skb_bond_should_drop</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#master\">master</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#priv_flags\">priv_flags</a> &amp; <a class=\"id\" href=\"#IFF_MASTER_ARPMON\">IFF_MASTER_ARPMON</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#last_rx\">last_rx</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#priv_flags\">priv_flags</a> &amp; <a class=\"id\" href=\"#IFF_MASTER_ALB\">IFF_MASTER_ALB</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#priv_flags\">priv_flags</a> &amp; <a class=\"id\" href=\"#IFF_BRIDGE_PORT\">IFF_BRIDGE_PORT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Do address unmangle. The local destination address</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will be always the one master has. Provides the right</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * functionality in a bridge.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_bond_set_mac_by_master\">skb_bond_set_mac_by_master</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#master\">master</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#priv_flags\">priv_flags</a> &amp; <a class=\"id\" href=\"#IFF_SLAVE_INACTIVE\">IFF_SLAVE_INACTIVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#priv_flags\">priv_flags</a> &amp; <a class=\"id\" href=\"#IFF_SLAVE_NEEDARP\">IFF_SLAVE_NEEDARP</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a> == <a class=\"id\" href=\"#__cpu_to_be16\">__cpu_to_be16</a>(<a class=\"id\" href=\"#ETH_P_ARP\">ETH_P_ARP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#priv_flags\">priv_flags</a> &amp; <a class=\"id\" href=\"#IFF_MASTER_ALB\">IFF_MASTER_ALB</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#pkt_type\">pkt_type</a> != <a class=\"id\" href=\"#PACKET_BROADCAST\">PACKET_BROADCAST</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#pkt_type\">pkt_type</a> != <a class=\"id\" href=\"#PACKET_MULTICAST\">PACKET_MULTICAST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#master\">master</a>-><a class=\"id\" href=\"#priv_flags\">priv_flags</a> &amp; <a class=\"id\" href=\"#IFF_MASTER_8023AD\">IFF_MASTER_8023AD</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a> == <a class=\"id\" href=\"#__cpu_to_be16\">__cpu_to_be16</a>(<a class=\"id\" href=\"#ETH_P_SLOW\">ETH_P_SLOW</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__skb_bond_should_drop\">__skb_bond_should_drop</a>);", 
"", 
"static int <a class=\"id\" href=\"#__netif_receive_skb\">__netif_receive_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *<a class=\"id\" href=\"#ptype\">ptype</a>, *<a class=\"id\" href=\"#pt_prev\">pt_prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rx_handler_func_t\">rx_handler_func_t</a> *<a class=\"id\" href=\"#rx_handler\">rx_handler</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#orig_dev\">orig_dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#master\">master</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#null_or_orig\">null_or_orig</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#orig_or_bond\">orig_or_bond</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NET_RX_DROP\">NET_RX_DROP</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#netdev_tstamp_prequeue\">netdev_tstamp_prequeue</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net_timestamp_check\">net_timestamp_check</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vlan_tx_tag_present\">vlan_tx_tag_present</a>(<a class=\"id\" href=\"#skb\">skb</a>) && <a class=\"id\" href=\"#vlan_hwaccel_do_receive\">vlan_hwaccel_do_receive</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NET_RX_SUCCESS\">NET_RX_SUCCESS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if we've gotten here through NAPI, check netpoll */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#netpoll_receive_skb\">netpoll_receive_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NET_RX_DROP\">NET_RX_DROP</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#skb_iif\">skb_iif</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#skb_iif\">skb_iif</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bonding note: skbs received on inactive slaves should only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be delivered to pkt handlers that are exact matches.  Also</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the deliver_no_wcard flag will be set.  If packet handlers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are sensitive to duplicate packets these skbs will need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be dropped at the handler.  The vlan accel path may have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already set the deliver_no_wcard flag.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#null_or_orig\">null_or_orig</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#orig_dev\">orig_dev</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#master\">master</a> = <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#orig_dev\">orig_dev</a>-><a class=\"id\" href=\"#master\">master</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#deliver_no_wcard\">deliver_no_wcard</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#null_or_orig\">null_or_orig</a> = <a class=\"id\" href=\"#orig_dev\">orig_dev</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#master\">master</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_bond_should_drop\">skb_bond_should_drop</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#master\">master</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#deliver_no_wcard\">deliver_no_wcard</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#null_or_orig\">null_or_orig</a> = <a class=\"id\" href=\"#orig_dev\">orig_dev</a>; <span class=\"comment\">/* deliver only exact match */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#master\">master</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_inc\">__this_cpu_inc</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>.<a class=\"id\" href=\"#processed\">processed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_network_header\">skb_reset_network_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_transport_header\">skb_reset_transport_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_len\">mac_len</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#network_header\">network_header</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pt_prev\">pt_prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_CLS_ACT\">CONFIG_NET_CLS_ACT</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tc_verd\">tc_verd</a> &amp; <a class=\"id\" href=\"#TC_NCLS\">TC_NCLS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tc_verd\">tc_verd</a> = <a class=\"id\" href=\"#CLR_TC_NCLS\">CLR_TC_NCLS</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tc_verd\">tc_verd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#ncls\">ncls</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#ptype\">ptype</a>, &amp;<a class=\"id\" href=\"#ptype_all\">ptype_all</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#null_or_orig\">null_or_orig</a> || <a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#orig_dev\">orig_dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pt_prev\">pt_prev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#deliver_skb\">deliver_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#pt_prev\">pt_prev</a>, <a class=\"id\" href=\"#orig_dev\">orig_dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pt_prev\">pt_prev</a> = <a class=\"id\" href=\"#ptype\">ptype</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_CLS_ACT\">CONFIG_NET_CLS_ACT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#handle_ing\">handle_ing</a>(<a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#pt_prev\">pt_prev</a>, &amp;<a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#orig_dev\">orig_dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<a class=\"id\" href=\"#ncls\">ncls</a>:", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Handle special case of bridge or macvlan */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rx_handler\">rx_handler</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rx_handler\">rx_handler</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rx_handler\">rx_handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pt_prev\">pt_prev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#deliver_skb\">deliver_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#pt_prev\">pt_prev</a>, <a class=\"id\" href=\"#orig_dev\">orig_dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pt_prev\">pt_prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#rx_handler\">rx_handler</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure frames received on VLAN interfaces stacked on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bonding interfaces still make their way to any base bonding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * device that may have registered for a specific ptype.  The</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * handler may have to adjust skb-&gt;dev and orig_dev.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#orig_or_bond\">orig_or_bond</a> = <a class=\"id\" href=\"#orig_dev\">orig_dev</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#priv_flags\">priv_flags</a> &amp; <a class=\"id\" href=\"#IFF_802_1Q_VLAN\">IFF_802_1Q_VLAN</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#vlan_dev_real_dev\">vlan_dev_real_dev</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#priv_flags\">priv_flags</a> &amp; <a class=\"id\" href=\"#IFF_BONDING\">IFF_BONDING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#orig_or_bond\">orig_or_bond</a> = <a class=\"id\" href=\"#vlan_dev_real_dev\">vlan_dev_real_dev</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#ptype\">ptype</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#ptype_base\">ptype_base</a>[<a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#type\">type</a>) &amp; <a class=\"id\" href=\"#PTYPE_HASH_MASK\">PTYPE_HASH_MASK</a>], <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#type\">type</a> && (<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#null_or_orig\">null_or_orig</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> || <a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#orig_dev\">orig_dev</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#orig_or_bond\">orig_or_bond</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pt_prev\">pt_prev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#deliver_skb\">deliver_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#pt_prev\">pt_prev</a>, <a class=\"id\" href=\"#orig_dev\">orig_dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pt_prev\">pt_prev</a> = <a class=\"id\" href=\"#ptype\">ptype</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pt_prev\">pt_prev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pt_prev\">pt_prev</a>-><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pt_prev\">pt_prev</a>, <a class=\"id\" href=\"#orig_dev\">orig_dev</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Jamal, now you will not able to escape explaining</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * me how you were going to use this. :-)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NET_RX_DROP\">NET_RX_DROP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netif_receive_skb - process receive buffer from network</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to process</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netif_receive_skb() is the main receive data processing function.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It always succeeds. The buffer may be dropped during processing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for congestion control or by the protocol layers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function may only be called from softirq context and interrupts</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>should be enabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return values (usually ignored):</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NET_RX_SUCCESS: no congestion</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NET_RX_DROP: packet was dropped</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#netif_receive_skb\">netif_receive_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#netdev_tstamp_prequeue\">netdev_tstamp_prequeue</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net_timestamp_check\">net_timestamp_check</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_defer_rx_timestamp\">skb_defer_rx_timestamp</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NET_RX_SUCCESS\">NET_RX_SUCCESS</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rps_dev_flow\">rps_dev_flow</a> <a class=\"id\" href=\"#voidflow\">voidflow</a>, *<a class=\"id\" href=\"#rflow\">rflow</a> = &amp;<a class=\"id\" href=\"#voidflow\">voidflow</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#get_rps_cpu\">get_rps_cpu</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#rflow\">rflow</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#enqueue_to_backlog\">enqueue_to_backlog</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#rflow\">rflow</a>-><a class=\"id\" href=\"#last_qtail\">last_qtail</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__netif_receive_skb\">__netif_receive_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__netif_receive_skb\">__netif_receive_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netif_receive_skb\">netif_receive_skb</a>);", 
"", 
"<span class=\"comment\">/* Network device is going away, flush any packets still pending</span>", 
"<span class=\"comment\"> * Called with irqs disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#flush_backlog\">flush_backlog</a>(void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rps_lock\">rps_lock</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_walk_safe\">skb_queue_walk_safe</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#input_pkt_queue\">input_pkt_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_unlink\">__skb_unlink</a>(<a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#input_pkt_queue\">input_pkt_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_queue_head_incr\">input_queue_head_incr</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rps_unlock\">rps_unlock</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_walk_safe\">skb_queue_walk_safe</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#process_queue\">process_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_unlink\">__skb_unlink</a>(<a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#process_queue\">process_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_queue_head_incr\">input_queue_head_incr</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#napi_gro_complete\">napi_gro_complete</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *<a class=\"id\" href=\"#ptype\">ptype</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#ptype_base\">ptype_base</a>[<a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#type\">type</a>) &amp; <a class=\"id\" href=\"#PTYPE_HASH_MASK\">PTYPE_HASH_MASK</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#count\">count</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#gso_size\">gso_size</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#ptype\">ptype</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#type\">type</a> || <a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#dev\">dev</a> || !<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#gro_complete\">gro_complete</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#gro_complete\">gro_complete</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(&amp;<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#list\">list</a> == <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NET_RX_SUCCESS\">NET_RX_SUCCESS</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#netif_receive_skb\">netif_receive_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#napi_gro_flush\">napi_gro_flush</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#gro_list\">gro_list</a>; <a class=\"id\" href=\"#skb\">skb</a>; <a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#napi_gro_complete\">napi_gro_complete</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#gro_count\">gro_count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#gro_list\">gro_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"enum <a class=\"id\" href=\"#gro_result\">gro_result</a> <a class=\"id\" href=\"#dev_gro_receive\">dev_gro_receive</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> **<a class=\"id\" href=\"#pp\">pp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#packet_type\">packet_type</a> *<a class=\"id\" href=\"#ptype\">ptype</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#ptype_base\">ptype_base</a>[<a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#type\">type</a>) &amp; <a class=\"id\" href=\"#PTYPE_HASH_MASK\">PTYPE_HASH_MASK</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#same_flow\">same_flow</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mac_len\">mac_len</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#gro_result\">gro_result</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#features\">features</a> &amp; <a class=\"id\" href=\"#NETIF_F_GRO\">NETIF_F_GRO</a>) || <a class=\"id\" href=\"#netpoll_rx_on\">netpoll_rx_on</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#normal\">normal</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_is_gso\">skb_is_gso</a>(<a class=\"id\" href=\"#skb\">skb</a>) || <a class=\"id\" href=\"#skb_has_frags\">skb_has_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#normal\">normal</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#ptype\">ptype</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#type\">type</a> || <a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#dev\">dev</a> || !<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#gro_receive\">gro_receive</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_set_network_header\">skb_set_network_header</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb_gro_offset\">skb_gro_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mac_len\">mac_len</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#network_header\">network_header</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_len\">mac_len</a> = <a class=\"id\" href=\"#mac_len\">mac_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#same_flow\">same_flow</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flush\">flush</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#free\">free</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pp\">pp</a> = <a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#gro_receive\">gro_receive</a>(&amp;<a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#gro_list\">gro_list</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#ptype\">ptype</a>-><a class=\"id\" href=\"#list\">list</a> == <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#normal\">normal</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#same_flow\">same_flow</a> = <a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#same_flow\">same_flow</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#free\">free</a> ? <a class=\"id\" href=\"#GRO_MERGED_FREE\">GRO_MERGED_FREE</a> : <a class=\"id\" href=\"#GRO_MERGED\">GRO_MERGED</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pp\">pp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#nskb\">nskb</a> = *<a class=\"id\" href=\"#pp\">pp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pp\">pp</a> = <a class=\"id\" href=\"#nskb\">nskb</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nskb\">nskb</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#napi_gro_complete\">napi_gro_complete</a>(<a class=\"id\" href=\"#nskb\">nskb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#gro_count\">gro_count</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#same_flow\">same_flow</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#ok\">ok</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#flush\">flush</a> || <a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#gro_count\">gro_count</a> >= <a class=\"id\" href=\"#MAX_GRO_SKBS\">MAX_GRO_SKBS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#normal\">normal</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#gro_count\">gro_count</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#gso_size\">gso_size</a> = <a class=\"id\" href=\"#skb_gro_len\">skb_gro_len</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#gro_list\">gro_list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#gro_list\">gro_list</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#GRO_HELD\">GRO_HELD</a>;", 
"", 
"<a class=\"id\" href=\"#pull\">pull</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>) &lt; <a class=\"id\" href=\"#skb_gro_offset\">skb_gro_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#grow\">grow</a> = <a class=\"id\" href=\"#skb_gro_offset\">skb_gro_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>) - <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a> &lt; <a class=\"id\" href=\"#grow\">grow</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#skb_tail_pointer\">skb_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>), <a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag0\">frag0</a>, <a class=\"id\" href=\"#grow\">grow</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a> += <a class=\"id\" href=\"#grow\">grow</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a> -= <a class=\"id\" href=\"#grow\">grow</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[0].<a class=\"id\" href=\"#page_offset\">page_offset</a> += <a class=\"id\" href=\"#grow\">grow</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[0].<a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#grow\">grow</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[0].<a class=\"id\" href=\"#size\">size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[0].<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a> + 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> * sizeof(<a class=\"id\" href=\"#skb_frag_t\">skb_frag_t</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#ok\">ok</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#normal\">normal</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#GRO_NORMAL\">GRO_NORMAL</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#pull\">pull</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dev_gro_receive\">dev_gro_receive</a>);", 
"", 
"static <a class=\"id\" href=\"#gro_result_t\">gro_result_t</a>", 
"<a class=\"id\" href=\"#__napi_gro_receive\">__napi_gro_receive</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#gro_list\">gro_list</a>; <a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#same_flow\">same_flow</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#compare_ether_header\">compare_ether_header</a>(<a class=\"id\" href=\"#skb_mac_header\">skb_mac_header</a>(<a class=\"id\" href=\"#p\">p</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#skb_gro_mac_header\">skb_gro_mac_header</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#flush\">flush</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev_gro_receive\">dev_gro_receive</a>(<a class=\"id\" href=\"#napi\">napi</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#gro_result_t\">gro_result_t</a> <a class=\"id\" href=\"#napi_skb_finish\">napi_skb_finish</a>(<a class=\"id\" href=\"#gro_result_t\">gro_result_t</a> <a class=\"id\" href=\"#ret\">ret</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GRO_NORMAL\">GRO_NORMAL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#netif_receive_skb\">netif_receive_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#GRO_DROP\">GRO_DROP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GRO_DROP\">GRO_DROP</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GRO_MERGED_FREE\">GRO_MERGED_FREE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GRO_HELD\">GRO_HELD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GRO_MERGED\">GRO_MERGED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#napi_skb_finish\">napi_skb_finish</a>);", 
"", 
"void <a class=\"id\" href=\"#skb_gro_reset_offset\">skb_gro_reset_offset</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#data_offset\">data_offset</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag0\">frag0</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag0_len\">frag0_len</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#mac_header\">mac_header</a> == <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a> &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[0].<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag0\">frag0</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[0].<a class=\"id\" href=\"#page\">page</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[0].<a class=\"id\" href=\"#page_offset\">page_offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NAPI_GRO_CB\">NAPI_GRO_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frag0_len\">frag0_len</a> = <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[0].<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#skb_gro_reset_offset\">skb_gro_reset_offset</a>);", 
"", 
"<a class=\"id\" href=\"#gro_result_t\">gro_result_t</a> <a class=\"id\" href=\"#napi_gro_receive\">napi_gro_receive</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_gro_reset_offset\">skb_gro_reset_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#napi_skb_finish\">napi_skb_finish</a>(<a class=\"id\" href=\"#__napi_gro_receive\">__napi_gro_receive</a>(<a class=\"id\" href=\"#napi\">napi</a>, <a class=\"id\" href=\"#skb\">skb</a>), <a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#napi_gro_receive\">napi_gro_receive</a>);", 
"", 
"void <a class=\"id\" href=\"#napi_reuse_skb\">napi_reuse_skb</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_pull\">__skb_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#NET_IP_ALIGN\">NET_IP_ALIGN</a> - <a class=\"id\" href=\"#skb_headroom\">skb_headroom</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#napi_reuse_skb\">napi_reuse_skb</a>);", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#napi_get_frags\">napi_get_frags</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#netdev_alloc_skb_ip_align\">netdev_alloc_skb_ip_align</a>(<a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#GRO_MAX_HEAD\">GRO_MAX_HEAD</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#napi_get_frags\">napi_get_frags</a>);", 
"", 
"<a class=\"id\" href=\"#gro_result_t\">gro_result_t</a> <a class=\"id\" href=\"#napi_frags_finish\">napi_frags_finish</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#gro_result_t\">gro_result_t</a> <a class=\"id\" href=\"#ret\">ret</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GRO_NORMAL\">GRO_NORMAL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GRO_HELD\">GRO_HELD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#eth_type_trans\">eth_type_trans</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#GRO_HELD\">GRO_HELD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_gro_pull\">skb_gro_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, -<a class=\"id\" href=\"#ETH_HLEN\">ETH_HLEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#netif_receive_skb\">netif_receive_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#GRO_DROP\">GRO_DROP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GRO_DROP\">GRO_DROP</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GRO_MERGED_FREE\">GRO_MERGED_FREE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#napi_reuse_skb\">napi_reuse_skb</a>(<a class=\"id\" href=\"#napi\">napi</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#GRO_MERGED\">GRO_MERGED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#napi_frags_finish\">napi_frags_finish</a>);", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#napi_frags_skb\">napi_frags_skb</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ethhdr\">ethhdr</a> *<a class=\"id\" href=\"#eth\">eth</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hlen\">hlen</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#off\">off</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_mac_header\">skb_reset_mac_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_gro_reset_offset\">skb_gro_reset_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#skb_gro_offset\">skb_gro_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlen\">hlen</a> = <a class=\"id\" href=\"#off\">off</a> + sizeof(*<a class=\"id\" href=\"#eth\">eth</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eth\">eth</a> = <a class=\"id\" href=\"#skb_gro_header_fast\">skb_gro_header_fast</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#off\">off</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_gro_header_hard\">skb_gro_header_hard</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#hlen\">hlen</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eth\">eth</a> = <a class=\"id\" href=\"#skb_gro_header_slow\">skb_gro_header_slow</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#hlen\">hlen</a>, <a class=\"id\" href=\"#off\">off</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#eth\">eth</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#napi_reuse_skb\">napi_reuse_skb</a>(<a class=\"id\" href=\"#napi\">napi</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_gro_pull\">skb_gro_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, sizeof(*<a class=\"id\" href=\"#eth\">eth</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This works because the only protocols we care about don't require</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * special handling.  We'll fix it up properly at the end.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_proto\">h_proto</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#napi_frags_skb\">napi_frags_skb</a>);", 
"", 
"<a class=\"id\" href=\"#gro_result_t\">gro_result_t</a> <a class=\"id\" href=\"#napi_gro_frags\">napi_gro_frags</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#napi_frags_skb\">napi_frags_skb</a>(<a class=\"id\" href=\"#napi\">napi</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#GRO_DROP\">GRO_DROP</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#napi_frags_finish\">napi_frags_finish</a>(<a class=\"id\" href=\"#napi\">napi</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#__napi_gro_receive\">__napi_gro_receive</a>(<a class=\"id\" href=\"#napi\">napi</a>, <a class=\"id\" href=\"#skb\">skb</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#napi_gro_frags\">napi_gro_frags</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * net_rps_action sends any pending IPI's for rps.</span>", 
"<span class=\"comment\"> * Note: called with local irq disabled, but exits with local irq enabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#net_rps_action_and_irq_enable\">net_rps_action_and_irq_enable</a>(struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#remsd\">remsd</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#rps_ipi_list\">rps_ipi_list</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#remsd\">remsd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#rps_ipi_list\">rps_ipi_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Send pending IPI's to kick RPS processing on remote cpus. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#remsd\">remsd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#remsd\">remsd</a>-><a class=\"id\" href=\"#rps_ipi_next\">rps_ipi_next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#remsd\">remsd</a>-><a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__smp_call_function_single\">__smp_call_function_single</a>(<a class=\"id\" href=\"#remsd\">remsd</a>-><a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#remsd\">remsd</a>-><a class=\"id\" href=\"#csd\">csd</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remsd\">remsd</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#process_backlog\">process_backlog</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>, int <a class=\"id\" href=\"#quota\">quota</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#work\">work</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#napi\">napi</a>, struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a>, <a class=\"id\" href=\"#backlog\">backlog</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RPS\">CONFIG_RPS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if we have pending ipi, its better to send them now,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not waiting net_rx_action() end.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#rps_ipi_list\">rps_ipi_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#net_rps_action_and_irq_enable\">net_rps_action_and_irq_enable</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#weight_p\">weight_p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#work\">work</a> &lt; <a class=\"id\" href=\"#quota\">quota</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#qlen\">qlen</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while ((<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#__skb_dequeue\">__skb_dequeue</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#process_queue\">process_queue</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__netif_receive_skb\">__netif_receive_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_queue_head_incr\">input_queue_head_incr</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#work\">work</a> >= <a class=\"id\" href=\"#quota\">quota</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rps_lock\">rps_lock</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qlen\">qlen</a> = <a class=\"id\" href=\"#skb_queue_len\">skb_queue_len</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#input_pkt_queue\">input_pkt_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qlen\">qlen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_splice_tail_init\">skb_queue_splice_tail_init</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#input_pkt_queue\">input_pkt_queue</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#process_queue\">process_queue</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qlen\">qlen</a> &lt; <a class=\"id\" href=\"#quota\">quota</a> - <a class=\"id\" href=\"#work\">work</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Inline a custom version of __napi_complete().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * only current cpu owns and manipulates this napi,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and NAPI_STATE_SCHED is the only possible flag set on backlog.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we can use a plain write instead of clear_bit(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and we dont need an smp_mb() memory barrier.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#poll_list\">poll_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#state\">state</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quota\">quota</a> = <a class=\"id\" href=\"#work\">work</a> + <a class=\"id\" href=\"#qlen\">qlen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rps_unlock\">rps_unlock</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#work\">work</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __napi_schedule - schedule for receive</span>", 
"<span class=\"comment\"> * @n: entry to schedule</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The entry's receive function will be scheduled to run</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__napi_schedule\">__napi_schedule</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#____napi_schedule\">____napi_schedule</a>(&amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>), <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__napi_schedule\">__napi_schedule</a>);", 
"", 
"void <a class=\"id\" href=\"#__napi_complete\">__napi_complete</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#NAPI_STATE_SCHED\">NAPI_STATE_SCHED</a>, &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#state\">state</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#gro_list\">gro_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#poll_list\">poll_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__before_clear_bit\">smp_mb__before_clear_bit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#NAPI_STATE_SCHED\">NAPI_STATE_SCHED</a>, &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__napi_complete\">__napi_complete</a>);", 
"", 
"void <a class=\"id\" href=\"#napi_complete\">napi_complete</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't let napi dequeue from the cpu poll list</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * just in case its running on a different cpu</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#NAPI_STATE_NPSVC\">NAPI_STATE_NPSVC</a>, &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#state\">state</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi_gro_flush\">napi_gro_flush</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__napi_complete\">__napi_complete</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#napi_complete\">napi_complete</a>);", 
"", 
"void <a class=\"id\" href=\"#netif_napi_add\">netif_napi_add</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    int (*<a class=\"id\" href=\"#poll\">poll</a>)(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *, int), int <a class=\"id\" href=\"#weight\">weight</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#poll_list\">poll_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#gro_count\">gro_count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#gro_list\">gro_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#poll\">poll</a> = <a class=\"id\" href=\"#poll\">poll</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#dev_list\">dev_list</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#napi_list\">napi_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NETPOLL\">CONFIG_NETPOLL</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#poll_lock\">poll_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#poll_owner\">poll_owner</a> = -1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#NAPI_STATE_SCHED\">NAPI_STATE_SCHED</a>, &amp;<a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netif_napi_add\">netif_napi_add</a>);", 
"", 
"void <a class=\"id\" href=\"#netif_napi_del\">netif_napi_del</a>(struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#napi\">napi</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#dev_list\">dev_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi_free_frags\">napi_free_frags</a>(<a class=\"id\" href=\"#napi\">napi</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#gro_list\">gro_list</a>; <a class=\"id\" href=\"#skb\">skb</a>; <a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#gro_list\">gro_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#napi\">napi</a>-><a class=\"id\" href=\"#gro_count\">gro_count</a> = 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#netif_napi_del\">netif_napi_del</a>);", 
"", 
"static void <a class=\"id\" href=\"#net_rx_action\">net_rx_action</a>(struct <a class=\"id\" href=\"#softirq_action\">softirq_action</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#time_limit\">time_limit</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + 2;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#budget\">budget</a> = <a class=\"id\" href=\"#netdev_budget\">netdev_budget</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#have\">have</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#poll_list\">poll_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#weight\">weight</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If softirq window is exhuasted then punt.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Allow this to run for 2 jiffies since which will allow</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * an average latency of 1.5/HZ.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#budget\">budget</a> <= 0 || <a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#time_limit\">time_limit</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#softnet_break\">softnet_break</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Even though interrupts have been re-enabled, this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * access is safe because interrupts can only add new</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * entries to the tail of this list, and only -&gt;poll()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * calls can remove this head entry from the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#poll_list\">poll_list</a>, struct <a class=\"id\" href=\"#napi_struct\">napi_struct</a>, <a class=\"id\" href=\"#poll_list\">poll_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#have\">have</a> = <a class=\"id\" href=\"#netpoll_poll_lock\">netpoll_poll_lock</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#weight\">weight</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This NAPI_STATE_SCHED test is for avoiding a race</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with netpoll's poll_napi().  Only the entity which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * obtains the lock and sees NAPI_STATE_SCHED set will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * actually make the -&gt;poll() call.  Therefore we avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * accidently calling -&gt;poll() when NAPI is not scheduled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#NAPI_STATE_SCHED\">NAPI_STATE_SCHED</a>, &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#state\">state</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#poll\">poll</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#weight\">weight</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_napi_poll\">trace_napi_poll</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#work\">work</a> &gt; <a class=\"id\" href=\"#weight\">weight</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#budget\">budget</a> -= <a class=\"id\" href=\"#work\">work</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Drivers must not modify the NAPI state if they</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * consume the entire weight.  In such cases this code</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * still \"owns\" the NAPI instance and therefore can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * move the instance around on the list at-will.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#work\">work</a> == <a class=\"id\" href=\"#weight\">weight</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#napi_disable_pending\">napi_disable_pending</a>(<a class=\"id\" href=\"#n\">n</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#napi_complete\">napi_complete</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#poll_list\">poll_list</a>, &amp;<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#poll_list\">poll_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netpoll_poll_unlock\">netpoll_poll_unlock</a>(<a class=\"id\" href=\"#have\">have</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#net_rps_action_and_irq_enable\">net_rps_action_and_irq_enable</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_DMA\">CONFIG_NET_DMA</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There may not be any more sk_buffs coming right now, so push</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any pending DMA copies to hardware</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_issue_pending_all\">dma_issue_pending_all</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#softnet_break\">softnet_break</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#time_squeeze\">time_squeeze</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__raise_softirq_irqoff\">__raise_softirq_irqoff</a>(<a class=\"id\" href=\"#NET_RX_SOFTIRQ\">NET_RX_SOFTIRQ</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#gifconf_func_t\">gifconf_func_t</a> *<a class=\"id\" href=\"#gifconf_list\">gifconf_list</a>[<a class=\"id\" href=\"#NPROTO\">NPROTO</a>];", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>register_gifconf<span class=\"ts\"/>-<span class=\"ts\"/>register a SIOCGIF handler</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@family: Address family</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gifconf: Function handler</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Register protocol dependent address dumping routines. The handler</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that is passed must not be freed or reused until it has been replaced</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>by another handler.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#register_gifconf\">register_gifconf</a>(unsigned int <a class=\"id\" href=\"#family\">family</a>, <a class=\"id\" href=\"#gifconf_func_t\">gifconf_func_t</a> *<a class=\"id\" href=\"#gifconf\">gifconf</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#family\">family</a> >= <a class=\"id\" href=\"#NPROTO\">NPROTO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gifconf_list\">gifconf_list</a>[<a class=\"id\" href=\"#family\">family</a>] = <a class=\"id\" href=\"#gifconf\">gifconf</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_gifconf\">register_gifconf</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Map an interface index to its name (SIOCGIFNAME)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We need this ioctl for efficient implementation of the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if_indextoname() function required by the IPv6 API.  Without</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it, we would have to search all the interfaces to find a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>match.  --pb</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#dev_ifname\">dev_ifname</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#ifreq\">ifreq</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ifreq\">ifreq</a> <a class=\"id\" href=\"#ifr\">ifr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Fetch the caller's info block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#ifr\">ifr</a>, <a class=\"id\" href=\"#arg\">arg</a>, sizeof(struct <a class=\"id\" href=\"#ifreq\">ifreq</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev_get_by_index_rcu\">dev_get_by_index_rcu</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ifr\">ifr</a>.<a class=\"id\" href=\"#ifr_ifindex\">ifr_ifindex</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#ifr\">ifr</a>.<a class=\"id\" href=\"#ifr_name\">ifr_name</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#arg\">arg</a>, &amp;<a class=\"id\" href=\"#ifr\">ifr</a>, sizeof(struct <a class=\"id\" href=\"#ifreq\">ifreq</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Perform a SIOCGIFCONF call. This structure will change</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>size eventually, and there is nothing I can do about it.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Thus we will need a 'compatibility mode'.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#dev_ifconf\">dev_ifconf</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ifconf\">ifconf</a> <a class=\"id\" href=\"#ifc\">ifc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#total\">total</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Fetch the caller's info block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#ifc\">ifc</a>, <a class=\"id\" href=\"#arg\">arg</a>, sizeof(struct <a class=\"id\" href=\"#ifconf\">ifconf</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#ifc\">ifc</a>.<a class=\"id\" href=\"#ifc_buf\">ifc_buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ifc\">ifc</a>.<a class=\"id\" href=\"#ifc_len\">ifc_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Loop over the interfaces, and write an info block for each.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_netdev\">for_each_netdev</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NPROTO\">NPROTO</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gifconf_list\">gifconf_list</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a> = <a class=\"id\" href=\"#gifconf_list\">gifconf_list</a>[<a class=\"id\" href=\"#i\">i</a>](<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a> = <a class=\"id\" href=\"#gifconf_list\">gifconf_list</a>[<a class=\"id\" href=\"#i\">i</a>](<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#total\">total</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#total\">total</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#done\">done</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> += <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>All done.  Write the updated control block back to the caller.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ifc\">ifc</a>.<a class=\"id\" href=\"#ifc_len\">ifc_len</a> = <a class=\"id\" href=\"#total\">total</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * <span class=\"ts\"/>Both BSD and Solaris return 0 here, so we do too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#arg\">arg</a>, &amp;<a class=\"id\" href=\"#ifc\">ifc</a>, sizeof(struct <a class=\"id\" href=\"#ifconf\">ifconf</a>)) ? -<a class=\"id\" href=\"#EFAULT\">EFAULT</a> : 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is invoked by the /proc filesystem handler to display a device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in detail.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#dev_seq_start\">dev_seq_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#RCU\">RCU</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#seq_file_net\">seq_file_net</a>(<a class=\"id\" href=\"#seq\">seq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_netdev_rcu\">for_each_netdev_rcu</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#off\">off</a>++ == *<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void *<a class=\"id\" href=\"#dev_seq_next\">dev_seq_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = (<a class=\"id\" href=\"#v\">v</a> == <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#first_net_device\">first_net_device</a>(<a class=\"id\" href=\"#seq_file_net\">seq_file_net</a>(<a class=\"id\" href=\"#seq\">seq</a>)) :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#next_net_device\">next_net_device</a>((struct <a class=\"id\" href=\"#net_device\">net_device</a> *)<a class=\"id\" href=\"#v\">v</a>);", 
"", 
"<span class=\"ts\"/>++*<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#dev_seq_stop\">dev_seq_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#RCU\">RCU</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dev_seq_printf_stats\">dev_seq_printf_stats</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rtnl_link_stats64\">rtnl_link_stats64</a> <a class=\"id\" href=\"#temp\">temp</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#rtnl_link_stats64\">rtnl_link_stats64</a> *<a class=\"id\" href=\"#stats\">stats</a> = <a class=\"id\" href=\"#dev_get_stats\">dev_get_stats</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#temp\">temp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"%6s: %7llu %7llu %4llu %4llu %4llu %5llu %10llu %9llu \"", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"%8llu %7llu %4llu %4llu %4llu %5llu %7llu %10llu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#rx_bytes\">rx_bytes</a>, <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#rx_packets\">rx_packets</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#rx_errors\">rx_errors</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#rx_dropped\">rx_dropped</a> + <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#rx_missed_errors\">rx_missed_errors</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#rx_fifo_errors\">rx_fifo_errors</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#rx_length_errors\">rx_length_errors</a> + <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#rx_over_errors\">rx_over_errors</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#rx_crc_errors\">rx_crc_errors</a> + <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#rx_frame_errors\">rx_frame_errors</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#rx_compressed\">rx_compressed</a>, <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#multicast\">multicast</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#tx_bytes\">tx_bytes</a>, <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#tx_packets\">tx_packets</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#tx_errors\">tx_errors</a>, <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#tx_dropped\">tx_dropped</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#tx_fifo_errors\">tx_fifo_errors</a>, <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#collisions\">collisions</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#tx_carrier_errors\">tx_carrier_errors</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#tx_aborted_errors\">tx_aborted_errors</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#tx_window_errors\">tx_window_errors</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#tx_heartbeat_errors\">tx_heartbeat_errors</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#stats\">stats</a>-><a class=\"id\" href=\"#tx_compressed\">tx_compressed</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called from the PROCfs module. This now uses the new arbitrary sized</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>/proc/net interface to create /proc/net/dev</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dev_seq_show\">dev_seq_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a> == <a class=\"id\" href=\"#SEQ_START_TOKEN\">SEQ_START_TOKEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"Inter-|   Receive                            \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"                    |  Transmit\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \" face |bytes    packets errs drop fifo frame \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"compressed multicast|bytes    packets errs \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"drop fifo colls carrier compressed\\n\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_seq_printf_stats\">dev_seq_printf_stats</a>(<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#softnet_get_online\">softnet_get_online</a>(<a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#pos\">pos</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(*<a class=\"id\" href=\"#pos\">pos</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#softnet_data\">softnet_data</a>, *<a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++*<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sd\">sd</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#softnet_seq_start\">softnet_seq_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#softnet_get_online\">softnet_get_online</a>(<a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#softnet_seq_next\">softnet_seq_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>++*<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#softnet_get_online\">softnet_get_online</a>(<a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#softnet_seq_stop\">softnet_seq_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"}", 
"", 
"static int <a class=\"id\" href=\"#softnet_seq_show\">softnet_seq_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#seq\">seq</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#softnet_data\">softnet_data</a> *<a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"%08x %08x %08x %08x %08x %08x %08x %08x %08x %08x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#processed\">processed</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#dropped\">dropped</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#time_squeeze\">time_squeeze</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>   0, 0, 0, 0, <span class=\"comment\">/* was fastroute */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#cpu_collision\">cpu_collision</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#received_rps\">received_rps</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#dev_seq_ops\">dev_seq_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#dev_seq_start\">dev_seq_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a>  = <a class=\"id\" href=\"#dev_seq_next\">dev_seq_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a>  = <a class=\"id\" href=\"#dev_seq_stop\">dev_seq_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a>  = <a class=\"id\" href=\"#dev_seq_show\">dev_seq_show</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#dev_seq_open\">dev_seq_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open_net\">seq_open_net</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#dev_seq_ops\">dev_seq_ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    sizeof(struct <a class=\"id\" href=\"#seq_net_private\">seq_net_private</a>));", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#dev_seq_fops\">dev_seq_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a><span class=\"ts\"/> = <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a>    = <a class=\"id\" href=\"#dev_seq_open\">dev_seq_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a>    = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a>  = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#seq_release_net\">seq_release_net</a>,", 
];
xr_frag_insert('l/ae/909f633b6f64d00ed66cb242e71272dc0c5eff.xr', __xr_tmp);
