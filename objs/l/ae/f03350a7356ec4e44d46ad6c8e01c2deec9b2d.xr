var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#new_nsp\">new_nsp</a>-><a class=\"id\" href=\"#net_ns\">net_ns</a> = <a class=\"id\" href=\"#copy_net_ns\">copy_net_ns</a>(<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>-><a class=\"id\" href=\"#net_ns\">net_ns</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#new_nsp\">new_nsp</a>-><a class=\"id\" href=\"#net_ns\">net_ns</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#new_nsp\">new_nsp</a>-><a class=\"id\" href=\"#net_ns\">net_ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_net\">out_net</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new_nsp\">new_nsp</a>;", 
"", 
"<a class=\"id\" href=\"#out_net\">out_net</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_nsp\">new_nsp</a>-><a class=\"id\" href=\"#pid_ns\">pid_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_pid_ns\">put_pid_ns</a>(<a class=\"id\" href=\"#new_nsp\">new_nsp</a>-><a class=\"id\" href=\"#pid_ns\">pid_ns</a>);", 
"<a class=\"id\" href=\"#out_pid\">out_pid</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_nsp\">new_nsp</a>-><a class=\"id\" href=\"#ipc_ns\">ipc_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_ipc_ns\">put_ipc_ns</a>(<a class=\"id\" href=\"#new_nsp\">new_nsp</a>-><a class=\"id\" href=\"#ipc_ns\">ipc_ns</a>);", 
"<a class=\"id\" href=\"#out_ipc\">out_ipc</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_nsp\">new_nsp</a>-><a class=\"id\" href=\"#uts_ns\">uts_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_uts_ns\">put_uts_ns</a>(<a class=\"id\" href=\"#new_nsp\">new_nsp</a>-><a class=\"id\" href=\"#uts_ns\">uts_ns</a>);", 
"<a class=\"id\" href=\"#out_uts\">out_uts</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_nsp\">new_nsp</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_mnt_ns\">put_mnt_ns</a>(<a class=\"id\" href=\"#new_nsp\">new_nsp</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>);", 
"<a class=\"id\" href=\"#out_ns\">out_ns</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#nsproxy_cachep\">nsproxy_cachep</a>, <a class=\"id\" href=\"#new_nsp\">new_nsp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * called from clone.  This now handles copy for nsproxy and all</span>", 
"<span class=\"comment\"> * namespaces therein.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#copy_namespaces\">copy_namespaces</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#old_ns\">old_ns</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#new_ns\">new_ns</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#old_ns\">old_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_nsproxy\">get_nsproxy</a>(<a class=\"id\" href=\"#old_ns\">old_ns</a>);", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#CLONE_NEWNS\">CLONE_NEWNS</a> | <a class=\"id\" href=\"#CLONE_NEWUTS\">CLONE_NEWUTS</a> | <a class=\"id\" href=\"#CLONE_NEWIPC\">CLONE_NEWIPC</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CLONE_NEWPID\">CLONE_NEWPID</a> | <a class=\"id\" href=\"#CLONE_NEWNET\">CLONE_NEWNET</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CLONE_NEWIPC must detach from the undolist: after switching</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to a new ipc namespace, the semaphore arrays from the old</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * namespace are unreachable.  In clone parlance, CLONE_SYSVSEM</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * means share undolist with parent, so we must forbid using</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it along with CLONE_NEWIPC.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLONE_NEWIPC\">CLONE_NEWIPC</a>) && (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLONE_SYSVSEM\">CLONE_SYSVSEM</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_ns\">new_ns</a> = <a class=\"id\" href=\"#create_new_namespaces\">create_new_namespaces</a>(<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#fs\">fs</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#new_ns\">new_ns</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#new_ns\">new_ns</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a> = <a class=\"id\" href=\"#new_ns\">new_ns</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_nsproxy\">put_nsproxy</a>(<a class=\"id\" href=\"#old_ns\">old_ns</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_nsproxy\">free_nsproxy</a>(struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_mnt_ns\">put_mnt_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#mnt_ns\">mnt_ns</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#uts_ns\">uts_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_uts_ns\">put_uts_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#uts_ns\">uts_ns</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ipc_ns\">ipc_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_ipc_ns\">put_ipc_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#ipc_ns\">ipc_ns</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#pid_ns\">pid_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_pid_ns\">put_pid_ns</a>(<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#pid_ns\">pid_ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_net\">put_net</a>(<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#net_ns\">net_ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#nsproxy_cachep\">nsproxy_cachep</a>, <a class=\"id\" href=\"#ns\">ns</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from unshare. Unshare all the namespaces part of nsproxy.</span>", 
"<span class=\"comment\"> * On success, returns the new nsproxy.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#unshare_nsproxy_namespaces\">unshare_nsproxy_namespaces</a>(unsigned long <a class=\"id\" href=\"#unshare_flags\">unshare_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> **<a class=\"id\" href=\"#new_nsp\">new_nsp</a>, struct <a class=\"id\" href=\"#fs_struct\">fs_struct</a> *<a class=\"id\" href=\"#new_fs\">new_fs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a> &amp; (<a class=\"id\" href=\"#CLONE_NEWNS\">CLONE_NEWNS</a> | <a class=\"id\" href=\"#CLONE_NEWUTS\">CLONE_NEWUTS</a> | <a class=\"id\" href=\"#CLONE_NEWIPC\">CLONE_NEWIPC</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#CLONE_NEWNET\">CLONE_NEWNET</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#new_nsp\">new_nsp</a> = <a class=\"id\" href=\"#create_new_namespaces\">create_new_namespaces</a>(<a class=\"id\" href=\"#unshare_flags\">unshare_flags</a>, <a class=\"id\" href=\"#current\">current</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fs\">new_fs</a> ? <a class=\"id\" href=\"#new_fs\">new_fs</a> : <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(*<a class=\"id\" href=\"#new_nsp\">new_nsp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(*<a class=\"id\" href=\"#new_nsp\">new_nsp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ns_cgroup_clone\">ns_cgroup_clone</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#task_pid\">task_pid</a>(<a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_nsproxy\">put_nsproxy</a>(*<a class=\"id\" href=\"#new_nsp\">new_nsp</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#switch_task_namespaces\">switch_task_namespaces</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a> *<a class=\"id\" href=\"#ns\">ns</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#nsproxy\">nsproxy</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ns\">ns</a> && <a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#count\">count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * wait for others to get what they want from this nsproxy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cannot release this nsproxy via the call_rcu() since</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * put_mnt_ns() will want to sleep</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_nsproxy\">free_nsproxy</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#exit_task_namespaces\">exit_task_namespaces</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#switch_task_namespaces\">switch_task_namespaces</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#nsproxy_cache_init\">nsproxy_cache_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nsproxy_cachep\">nsproxy_cachep</a> = <a class=\"id\" href=\"#KMEM_CACHE\">KMEM_CACHE</a>(<a class=\"id\" href=\"#nsproxy\">nsproxy</a>, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#nsproxy_cache_init\">nsproxy_cache_init</a>);", 
];
xr_frag_insert('l/ae/f03350a7356ec4e44d46ad6c8e01c2deec9b2d.xr', __xr_tmp);
