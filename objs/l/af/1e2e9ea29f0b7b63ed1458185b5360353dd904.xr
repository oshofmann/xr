var __xr_tmp = [
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#okay\">okay</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#key_ref_to_ptr\">key_ref_to_ptr</a>(<a class=\"id\" href=\"#key_ref\">key_ref</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* make the changes with the locks held to prevent races */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#expiry\">expiry</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#current_kernel_time\">current_kernel_time</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expiry\">expiry</a> = <a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> + <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#expiry\">expiry</a> = <a class=\"id\" href=\"#expiry\">expiry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_schedule_gc\">key_schedule_gc</a>(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#expiry\">expiry</a> + <a class=\"id\" href=\"#key_gc_delay\">key_gc_delay</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"} <span class=\"comment\">/* end keyctl_set_timeout() */</span>", 
"", 
"<span class=\"comment\">/*****************************************************************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * assume the authority to instantiate the specified key</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#keyctl_assume_authority\">keyctl_assume_authority</a>(<a class=\"id\" href=\"#key_serial_t\">key_serial_t</a> <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#authkey\">authkey</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* special key IDs aren't permitted */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we divest ourselves of authority if given an ID of 0 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#keyctl_change_reqkey_auth\">keyctl_change_reqkey_auth</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* attempt to assume the authority temporarily granted to us whilst we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * instantiate the specified key</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - the authorisation key must be in the current task's keyrings</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   somewhere</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#authkey\">authkey</a> = <a class=\"id\" href=\"#key_get_instantiation_authkey\">key_get_instantiation_authkey</a>(<a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#authkey\">authkey</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#authkey\">authkey</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#keyctl_change_reqkey_auth\">keyctl_change_reqkey_auth</a>(<a class=\"id\" href=\"#authkey\">authkey</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#authkey\">authkey</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#authkey\">authkey</a>-><a class=\"id\" href=\"#serial\">serial</a>;", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"} <span class=\"comment\">/* end keyctl_assume_authority() */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * get the security label of a key</span>", 
"<span class=\"comment\"> * - the key must grant us view permission</span>", 
"<span class=\"comment\"> * - if there's a buffer, we place up to buflen bytes of data into it</span>", 
"<span class=\"comment\"> * - unless there's an error, we return the amount of information available,</span>", 
"<span class=\"comment\"> *   irrespective of how much we may have copied (including the terminal NUL)</span>", 
"<span class=\"comment\"> * - implements keyctl(KEYCTL_GET_SECURITY)</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#keyctl_get_security\">keyctl_get_security</a>(<a class=\"id\" href=\"#key_serial_t\">key_serial_t</a> <a class=\"id\" href=\"#keyid\">keyid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, *<a class=\"id\" href=\"#instkey\">instkey</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#key_ref\">key_ref</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#context\">context</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_ref\">key_ref</a> = <a class=\"id\" href=\"#lookup_user_key\">lookup_user_key</a>(<a class=\"id\" href=\"#keyid\">keyid</a>, <a class=\"id\" href=\"#KEY_LOOKUP_PARTIAL\">KEY_LOOKUP_PARTIAL</a>, <a class=\"id\" href=\"#KEY_VIEW\">KEY_VIEW</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#key_ref\">key_ref</a>)) {", 
];
xr_frag_insert('l/af/1e2e9ea29f0b7b63ed1458185b5360353dd904.xr', __xr_tmp);
