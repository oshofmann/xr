var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_USER_64_H\">_ASM_X86_USER_64_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_USER_64_H\">_ASM_X86_USER_64_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"<span class=\"comment\">/* Core file format: The core file is written in such a way that gdb</span>", 
"<span class=\"comment\">   can understand it and provide useful information to the user.</span>", 
"<span class=\"comment\">   There are quite a number of obstacles to being able to view the</span>", 
"<span class=\"comment\">   contents of the floating point registers, and until these are</span>", 
"<span class=\"comment\">   solved you will not be able to view the contents of them.</span>", 
"<span class=\"comment\">   Actually, you can read in the core file and look at the contents of</span>", 
"<span class=\"comment\">   the user struct to find out what the floating point registers</span>", 
"<span class=\"comment\">   contain.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   The actual file contents are as follows:</span>", 
"<span class=\"comment\">   UPAGE: 1 page consisting of a user struct that tells gdb what is present</span>", 
"<span class=\"comment\">   in the file.  Directly after this is a copy of the task_struct, which</span>", 
"<span class=\"comment\">   is currently not used by gdb, but it may come in useful at some point.</span>", 
"<span class=\"comment\">   All of the registers are stored as part of the upage.  The upage should</span>", 
"<span class=\"comment\">   always be only one page.</span>", 
"<span class=\"comment\">   DATA: The data area is stored.  We use current-&gt;end_text to</span>", 
"<span class=\"comment\">   current-&gt;brk to pick up all of the user variables, plus any memory</span>", 
"<span class=\"comment\">   that may have been malloced.  No attempt is made to determine if a page</span>", 
"<span class=\"comment\">   is demand-zero or if a page is totally unused, we just cover the entire</span>", 
"<span class=\"comment\">   range.  All of the addresses are rounded in such a way that an integral</span>", 
"<span class=\"comment\">   number of pages is written.</span>", 
"<span class=\"comment\">   STACK: We need the stack information in order to get a meaningful</span>", 
"<span class=\"comment\">   backtrace.  We need to write the data from (esp) to</span>", 
"<span class=\"comment\">   current-&gt;start_stack, so we round each of these off in order to be able</span>", 
"<span class=\"comment\">   to write an integer number of pages.</span>", 
"<span class=\"comment\">   The minimum core file size is 3 pages, or 12288 bytes.  */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Pentium III FXSR, SSE support</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Gareth Hughes &lt;gareth@valinux.com&gt;, May 2000</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Provide support for the GDB 5.0+ PTRACE_{GET|SET}FPXREGS requests for</span>", 
"<span class=\"comment\"> * interacting with the FXSR-format floating point environment.  Floating</span>", 
"<span class=\"comment\"> * point data can be accessed in the regular format in the usual manner,</span>", 
"<span class=\"comment\"> * and both the standard and SIMD floating point data can be accessed via</span>", 
"<span class=\"comment\"> * the new ptrace requests.  In either case, changes to the FPU environment</span>", 
"<span class=\"comment\"> * will be reflected in the task's state as expected.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * x86-64 support by Andi Kleen.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* This matches the 64bit FXSAVE format as defined by AMD. It is the same</span>", 
"<span class=\"comment\">   as the 32bit format defined by Intel, except that the selector:offset pairs</span>", 
"<span class=\"comment\">   for data and eip are replaced with flat 64bit pointers. */</span>", 
"struct <a class=\"id\" href=\"#user_i387_struct\">user_i387_struct</a> {", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><a class=\"id\" href=\"#cwd\">cwd</a>;", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><a class=\"id\" href=\"#swd\">swd</a>;", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><a class=\"id\" href=\"#twd\">twd</a>;<span class=\"ts\"/><span class=\"comment\">/* Note this is not the same as</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   the 32bit/x87/FSAVE twd */</span>", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><a class=\"id\" href=\"#fop\">fop</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><a class=\"id\" href=\"#rip\">rip</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u64\">__u64</a><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#mxcsr\">mxcsr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#mxcsr_mask\">mxcsr_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#st_space\">st_space</a>[32];<span class=\"ts\"/><span class=\"comment\">/* 8*16 bytes for each FP-reg = 128 bytes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#xmm_space\">xmm_space</a>[64];<span class=\"ts\"/><span class=\"comment\">/* 16*16 bytes for each XMM-reg = 256 bytes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#padding\">padding</a>[24];", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Segment register layout in coredumps.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a> {", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#r15\">r15</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#r14\">r14</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#r13\">r13</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#r12\">r12</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#bx\">bx</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#r11\">r11</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#r10\">r10</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#r9\">r9</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#r8\">r8</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#ax\">ax</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#dx\">dx</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#si\">si</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#di\">di</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#orig_ax\">orig_ax</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#fs_base\">fs_base</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#gs_base\">gs_base</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#ds\">ds</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#es\">es</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#fs\">fs</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#gs\">gs</a>;", 
"};", 
"", 
"<span class=\"comment\">/* When the kernel dumps core, it starts by dumping the user struct -</span>", 
"<span class=\"comment\">   this will be used by gdb to figure out where the data and stack segments</span>", 
"<span class=\"comment\">   are within the file, and what virtual addresses to use. */</span>", 
"", 
"struct <a class=\"id\" href=\"#user\">user</a> {", 
"<span class=\"comment\">/* We start with the registers, to mimic the way that \"memory\" is returned</span>", 
"<span class=\"comment\">   from the ptrace(3,...) function.  */</span>", 
"  struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a> <a class=\"id\" href=\"#regs\">regs</a>;<span class=\"ts\"/><span class=\"comment\">/* Where the registers are actually stored */</span>", 
"<span class=\"comment\">/* ptrace does not yet supply these.  Someday.... */</span>", 
"  int <a class=\"id\" href=\"#u_fpvalid\">u_fpvalid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* True if math co-processor being used. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for this mess. Not yet used. */</span>", 
"  int <a class=\"id\" href=\"#pad0\">pad0</a>;", 
"  struct <a class=\"id\" href=\"#user_i387_struct\">user_i387_struct</a> <a class=\"id\" href=\"#i387\">i387</a>;<span class=\"ts\"/><span class=\"comment\">/* Math Co-processor registers. */</span>", 
"<span class=\"comment\">/* The rest of this junk is to help gdb figure out what goes where */</span>", 
"  unsigned long int <a class=\"id\" href=\"#u_tsize\">u_tsize</a>;<span class=\"ts\"/><span class=\"comment\">/* Text segment size (pages). */</span>", 
"  unsigned long int <a class=\"id\" href=\"#u_dsize\">u_dsize</a>;<span class=\"ts\"/><span class=\"comment\">/* Data segment size (pages). */</span>", 
"  unsigned long int <a class=\"id\" href=\"#u_ssize\">u_ssize</a>;<span class=\"ts\"/><span class=\"comment\">/* Stack segment size (pages). */</span>", 
"  unsigned long <a class=\"id\" href=\"#start_code\">start_code</a>;     <span class=\"comment\">/* Starting virtual address of text. */</span>", 
"  unsigned long <a class=\"id\" href=\"#start_stack\">start_stack</a>;<span class=\"ts\"/><span class=\"comment\">/* Starting virtual address of stack area.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   This is actually the bottom of the stack,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   the top of the stack is always found in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   esp register.  */</span>", 
"  long int <a class=\"id\" href=\"#signal\">signal</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Signal that caused the core dump. */</span>", 
"  int <a class=\"id\" href=\"#reserved\">reserved</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No longer used */</span>", 
"  int <a class=\"id\" href=\"#pad1\">pad1</a>;", 
"  unsigned long <a class=\"id\" href=\"#u_ar0\">u_ar0</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Used by gdb to help find the values for */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the registers. */</span>", 
"  struct <a class=\"id\" href=\"#user_i387_struct\">user_i387_struct</a> *<a class=\"id\" href=\"#u_fpstate\">u_fpstate</a>;<span class=\"ts\"/><span class=\"comment\">/* Math Co-processor pointer. */</span>", 
"  unsigned long <a class=\"id\" href=\"#magic\">magic</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* To uniquely identify a core file */</span>", 
"  char <a class=\"id\" href=\"#u_comm\">u_comm</a>[32];<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* User command that was responsible */</span>", 
"  unsigned long <a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[8];", 
"  unsigned long <a class=\"id\" href=\"#error_code\">error_code</a>; <span class=\"comment\">/* CPU error code or 0 */</span>", 
"  unsigned long <a class=\"id\" href=\"#fault_address\">fault_address</a>; <span class=\"comment\">/* CR3 or 0 */</span>", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NBPG\">NBPG</a> <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UPAGES\">UPAGES</a> 1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HOST_TEXT_START_ADDR\">HOST_TEXT_START_ADDR</a> (<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#start_code\">start_code</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HOST_STACK_END_ADDR\">HOST_STACK_END_ADDR</a> (<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#start_stack\">start_stack</a> + <a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#u_ssize\">u_ssize</a> * <a class=\"id\" href=\"#NBPG\">NBPG</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_USER_64_H */</span>", 
];
xr_frag_insert('l/af/8de49c6030632881a00477a7701073de5076f1.xr', __xr_tmp);
