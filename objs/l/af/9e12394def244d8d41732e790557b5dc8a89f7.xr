var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mqueue\">mqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#desc\">desc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> <a class=\"id\" href=\"#init_signals\">init_signals</a> = <a class=\"id\" href=\"#INIT_SIGNALS\">INIT_SIGNALS</a>(<a class=\"id\" href=\"#init_signals\">init_signals</a>);", 
"static struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> <a class=\"id\" href=\"#init_sighand\">init_sighand</a> = <a class=\"id\" href=\"#INIT_SIGHAND\">INIT_SIGHAND</a>(<a class=\"id\" href=\"#init_sighand\">init_sighand</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initial thread structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We need to make sure that this is THREAD_SIZE aligned due to the</span>", 
"<span class=\"comment\"> * way process stacks are handled. This is done by having a special</span>", 
"<span class=\"comment\"> * \"init_task\" linker map entry..</span>", 
"<span class=\"comment\"> */</span>", 
"union <a class=\"id\" href=\"#thread_union\">thread_union</a> <a class=\"id\" href=\"#init_thread_union\">init_thread_union</a> <a class=\"id\" href=\"#__init_task_data\">__init_task_data</a> =", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#INIT_THREAD_INFO\">INIT_THREAD_INFO</a>(<a class=\"id\" href=\"#init_task\">init_task</a>) };", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initial task structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All other task structs will be allocated on slabs in fork.c</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> <a class=\"id\" href=\"#init_task\">init_task</a> = <a class=\"id\" href=\"#INIT_TASK\">INIT_TASK</a>(<a class=\"id\" href=\"#init_task\">init_task</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#init_task\">init_task</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * per-CPU TSS segments. Threads are completely 'soft' on Linux,</span>", 
"<span class=\"comment\"> * no more per-task TSS's. The TSS size is kept cacheline-aligned</span>", 
"<span class=\"comment\"> * so they are allowed to end up in the .data..cacheline_aligned</span>", 
"<span class=\"comment\"> * section. Since TSS's are completely CPU-local, we want them</span>", 
"<span class=\"comment\"> * on exact cacheline boundaries, to eliminate cacheline ping-pong.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU_SHARED_ALIGNED\">DEFINE_PER_CPU_SHARED_ALIGNED</a>(struct <a class=\"id\" href=\"#tss_struct\">tss_struct</a>, <a class=\"id\" href=\"#init_tss\">init_tss</a>) = <a class=\"id\" href=\"#INIT_TSS\">INIT_TSS</a>;", 
"", 
];
xr_frag_insert('l/af/9e12394def244d8d41732e790557b5dc8a89f7.xr', __xr_tmp);
