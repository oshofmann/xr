var __xr_tmp = [
"<span class=\"comment\"> * iph: ipv4 header</span>", 
"<span class=\"comment\"> * ihl: length of header / 4</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__sum16\">__sum16</a> <a class=\"id\" href=\"#ip_fast_csum\">ip_fast_csum</a>(const void *<a class=\"id\" href=\"#iph\">iph</a>, unsigned int <a class=\"id\" href=\"#ihl\">ihl</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sum\">sum</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"  movl (%1), %0\\n\"", 
"<span class=\"ts\"/>    \"  subl $4, %2\\n\"", 
"<span class=\"ts\"/>    \"  jbe 2f\\n\"", 
"<span class=\"ts\"/>    \"  addl 4(%1), %0\\n\"", 
"<span class=\"ts\"/>    \"  adcl 8(%1), %0\\n\"", 
"<span class=\"ts\"/>    \"  adcl 12(%1), %0\\n\"", 
"<span class=\"ts\"/>    \"1: adcl 16(%1), %0\\n\"", 
"<span class=\"ts\"/>    \"  lea 4(%1), %1\\n\"", 
"<span class=\"ts\"/>    \"  decl %2\\n\"", 
"<span class=\"ts\"/>    \"  jne 1b\\n\"", 
"<span class=\"ts\"/>    \"  adcl $0, %0\\n\"", 
"<span class=\"ts\"/>    \"  movl %0, %2\\n\"", 
"<span class=\"ts\"/>    \"  shrl $16, %0\\n\"", 
"<span class=\"ts\"/>    \"  addw %w2, %w0\\n\"", 
"<span class=\"ts\"/>    \"  adcl $0, %0\\n\"", 
"<span class=\"ts\"/>    \"  notl %0\\n\"", 
"<span class=\"ts\"/>    \"2:\"", 
"<span class=\"ts\"/><span class=\"comment\">/* Since the input registers which are loaded with iph and ihl</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   are modified, we must also specify them as outputs, or gcc</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   will assume they contain their original values. */</span>", 
"<span class=\"ts\"/>    : \"=r\" (<a class=\"id\" href=\"#sum\">sum</a>), \"=r\" (<a class=\"id\" href=\"#iph\">iph</a>), \"=r\" (<a class=\"id\" href=\"#ihl\">ihl</a>)", 
"<span class=\"ts\"/>    : \"1\" (<a class=\"id\" href=\"#iph\">iph</a>), \"2\" (<a class=\"id\" href=\"#ihl\">ihl</a>)", 
"<span class=\"ts\"/>    : \"memory\");", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__sum16\">__sum16</a>)<a class=\"id\" href=\"#sum\">sum</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * csum_tcpup_nofold - Compute an IPv4 pseudo header checksum.</span>", 
"<span class=\"comment\"> * @saddr: source address</span>", 
"<span class=\"comment\"> * @daddr: destination address</span>", 
"<span class=\"comment\"> * @len: length of packet</span>", 
"<span class=\"comment\"> * @proto: ip protocol of packet</span>", 
"<span class=\"comment\"> * @sum: initial sum to be added in (32bit unfolded)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the pseudo header checksum the input data. Result is</span>", 
"<span class=\"comment\"> * 32bit unfolded.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__wsum\">__wsum</a>", 
"<a class=\"id\" href=\"#csum_tcpudp_nofold\">csum_tcpudp_nofold</a>(<a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>, unsigned short <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   unsigned short <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#sum\">sum</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"  addl %1, %0\\n\"", 
"<span class=\"ts\"/>    \"  adcl %2, %0\\n\"", 
"<span class=\"ts\"/>    \"  adcl %3, %0\\n\"", 
"<span class=\"ts\"/>    \"  adcl $0, %0\\n\"", 
"<span class=\"ts\"/>    : \"=r\" (<a class=\"id\" href=\"#sum\">sum</a>)", 
"<span class=\"ts\"/>    : \"g\" (<a class=\"id\" href=\"#daddr\">daddr</a>), \"g\" (<a class=\"id\" href=\"#saddr\">saddr</a>),", 
"<span class=\"ts\"/>      \"g\" ((<a class=\"id\" href=\"#len\">len</a> + <a class=\"id\" href=\"#proto\">proto</a>)<<8), \"0\" (<a class=\"id\" href=\"#sum\">sum</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sum\">sum</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * csum_tcpup_magic - Compute an IPv4 pseudo header checksum.</span>", 
"<span class=\"comment\"> * @saddr: source address</span>", 
"<span class=\"comment\"> * @daddr: destination address</span>", 
"<span class=\"comment\"> * @len: length of packet</span>", 
"<span class=\"comment\"> * @proto: ip protocol of packet</span>", 
"<span class=\"comment\"> * @sum: initial sum to be added in (32bit unfolded)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the 16bit pseudo header checksum the input data already</span>", 
"<span class=\"comment\"> * complemented and ready to be filled in.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__sum16\">__sum16</a> <a class=\"id\" href=\"#csum_tcpudp_magic\">csum_tcpudp_magic</a>(<a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#sum\">sum</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#csum_fold\">csum_fold</a>(<a class=\"id\" href=\"#csum_tcpudp_nofold\">csum_tcpudp_nofold</a>(<a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#sum\">sum</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * csum_partial - Compute an internet checksum.</span>", 
"<span class=\"comment\"> * @buff: buffer to be checksummed</span>", 
"<span class=\"comment\"> * @len: length of buffer.</span>", 
"<span class=\"comment\"> * @sum: initial sum to be added in (32bit unfolded)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the 32bit unfolded internet checksum of the buffer.</span>", 
"<span class=\"comment\"> * Before filling it in it needs to be csum_fold()'ed.</span>", 
"<span class=\"comment\"> * buff should be aligned to a 64bit boundary if possible.</span>", 
"<span class=\"comment\"> */</span>", 
"extern <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum_partial\">csum_partial</a>(const void *<a class=\"id\" href=\"#buff\">buff</a>, int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#sum\">sum</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a>  <a class=\"id\" href=\"#_HAVE_ARCH_COPY_AND_CSUM_FROM_USER\">_HAVE_ARCH_COPY_AND_CSUM_FROM_USER</a> 1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_CSUM_COPY_USER\">HAVE_CSUM_COPY_USER</a> 1", 
"", 
"", 
"<span class=\"comment\">/* Do not call this directly. Use the wrappers below */</span>", 
"extern <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum_partial_copy_generic\">csum_partial_copy_generic</a>(const void *<a class=\"id\" href=\"#src\">src</a>, const void *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#sum\">sum</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#src_err_ptr\">src_err_ptr</a>, int *<a class=\"id\" href=\"#dst_err_ptr\">dst_err_ptr</a>);", 
"", 
"", 
"extern <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum_partial_copy_from_user\">csum_partial_copy_from_user</a>(const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#src\">src</a>, void *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#isum\">isum</a>, int *<a class=\"id\" href=\"#errp\">errp</a>);", 
"extern <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum_partial_copy_to_user\">csum_partial_copy_to_user</a>(const void *<a class=\"id\" href=\"#src\">src</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#isum\">isum</a>, int *<a class=\"id\" href=\"#errp\">errp</a>);", 
"extern <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum_partial_copy_nocheck\">csum_partial_copy_nocheck</a>(const void *<a class=\"id\" href=\"#src\">src</a>, void *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#sum\">sum</a>);", 
"", 
"<span class=\"comment\">/* Old names. To be removed. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#csum_and_copy_to_user\">csum_and_copy_to_user</a> <a class=\"id\" href=\"#csum_partial_copy_to_user\">csum_partial_copy_to_user</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#csum_and_copy_from_user\">csum_and_copy_from_user</a> <a class=\"id\" href=\"#csum_partial_copy_from_user\">csum_partial_copy_from_user</a>", 
];
xr_frag_insert('l/af/bcd714ea3caeb9ea7df744e723fb89e8e91e6f.xr', __xr_tmp);
