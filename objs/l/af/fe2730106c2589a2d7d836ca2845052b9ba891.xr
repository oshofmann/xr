var __xr_tmp = [
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg_last\">sg_last</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, unsigned int <a class=\"id\" href=\"#nents\">nents</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_HAS_SG_CHAIN\">ARCH_HAS_SG_CHAIN</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#ret\">ret</a> = &amp;<a class=\"id\" href=\"#sgl\">sgl</a>[<a class=\"id\" href=\"#nents\">nents</a> - 1];", 
"#else", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>, *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#nents\">nents</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sg\">sg</a>;", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SG\">CONFIG_DEBUG_SG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#sgl\">sgl</a>[0].<a class=\"id\" href=\"#sg_magic\">sg_magic</a> != <a class=\"id\" href=\"#SG_MAGIC\">SG_MAGIC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#sg_is_last\">sg_is_last</a>(<a class=\"id\" href=\"#ret\">ret</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sg_last\">sg_last</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sg_init_table - Initialize SG table</span>", 
"<span class=\"comment\"> * @sgl:<span class=\"ts\"/>   The SG table</span>", 
"<span class=\"comment\"> * @nents:<span class=\"ts\"/>   Number of entries in table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *   If this is part of a chained sg table, sg_mark_end() should be</span>", 
"<span class=\"comment\"> *   used only on the last table part.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#sg_init_table\">sg_init_table</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, unsigned int <a class=\"id\" href=\"#nents\">nents</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#sgl\">sgl</a>, 0, sizeof(*<a class=\"id\" href=\"#sgl\">sgl</a>) * <a class=\"id\" href=\"#nents\">nents</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SG\">CONFIG_DEBUG_SG</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nents\">nents</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgl\">sgl</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#sg_magic\">sg_magic</a> = <a class=\"id\" href=\"#SG_MAGIC\">SG_MAGIC</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg_mark_end\">sg_mark_end</a>(&amp;<a class=\"id\" href=\"#sgl\">sgl</a>[<a class=\"id\" href=\"#nents\">nents</a> - 1]);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sg_init_table\">sg_init_table</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sg_init_one - Initialize a single entry sg list</span>", 
"<span class=\"comment\"> * @sg:<span class=\"ts\"/><span class=\"ts\"/> SG entry</span>", 
"<span class=\"comment\"> * @buf:<span class=\"ts\"/> Virtual address for IO</span>", 
"<span class=\"comment\"> * @buflen:<span class=\"ts\"/> IO length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#sg_init_one\">sg_init_one</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>, const void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg_init_table\">sg_init_table</a>(<a class=\"id\" href=\"#sg\">sg</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg_set_buf\">sg_set_buf</a>(<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#buflen\">buflen</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sg_init_one\">sg_init_one</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The default behaviour of sg_alloc_table() is to use these kmalloc/kfree</span>", 
"<span class=\"comment\"> * helpers.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg_kmalloc\">sg_kmalloc</a>(unsigned int <a class=\"id\" href=\"#nents\">nents</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nents\">nents</a> == <a class=\"id\" href=\"#SG_MAX_SINGLE_ALLOC\">SG_MAX_SINGLE_ALLOC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Kmemleak doesn't track page allocations as they are not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * commonly used (in a raw form) for kernel data structures.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * As we chain together a list of pages and then a normal</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * kmalloc (tracked by kmemleak), in order to for that last</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocation not to become decoupled (and thus a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * false-positive) we need to inform kmemleak of all the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * intermediate allocations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a> = (void *) <a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_alloc\">kmemleak_alloc</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, 1, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#nents\">nents</a> * sizeof(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a>), <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sg_kfree\">sg_kfree</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>, unsigned int <a class=\"id\" href=\"#nents\">nents</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nents\">nents</a> == <a class=\"id\" href=\"#SG_MAX_SINGLE_ALLOC\">SG_MAX_SINGLE_ALLOC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_free\">kmemleak_free</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long) <a class=\"id\" href=\"#sg\">sg</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __sg_free_table - Free a previously mapped sg table</span>", 
"<span class=\"comment\"> * @table:<span class=\"ts\"/>The sg table header to use</span>", 
"<span class=\"comment\"> * @max_ents:<span class=\"ts\"/>The maximum number of entries per single scatterlist</span>", 
"<span class=\"comment\"> * @free_fn:<span class=\"ts\"/>Free function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Description:</span>", 
"<span class=\"comment\"> *    Free an sg table previously allocated and setup with</span>", 
"<span class=\"comment\"> *    __sg_alloc_table().  The @max_ents value must be identical to</span>", 
"<span class=\"comment\"> *    that previously used with __sg_alloc_table().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#__sg_free_table\">__sg_free_table</a>(struct <a class=\"id\" href=\"#sg_table\">sg_table</a> *<a class=\"id\" href=\"#table\">table</a>, unsigned int <a class=\"id\" href=\"#max_ents\">max_ents</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#sg_free_fn\">sg_free_fn</a> *<a class=\"id\" href=\"#free_fn\">free_fn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#sgl\">sgl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sgl\">sgl</a> = <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#sgl\">sgl</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#orig_nents\">orig_nents</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#alloc_size\">alloc_size</a> = <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#orig_nents\">orig_nents</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sg_size\">sg_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we have more than max_ents segments left,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then assign 'next' to the sg table after the current one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sg_size is then one less than alloc size, since the last</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * element is the chain pointer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_size\">alloc_size</a> &gt; <a class=\"id\" href=\"#max_ents\">max_ents</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#sg_chain_ptr\">sg_chain_ptr</a>(&amp;<a class=\"id\" href=\"#sgl\">sgl</a>[<a class=\"id\" href=\"#max_ents\">max_ents</a> - 1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_size\">alloc_size</a> = <a class=\"id\" href=\"#max_ents\">max_ents</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_size\">sg_size</a> = <a class=\"id\" href=\"#alloc_size\">alloc_size</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_size\">sg_size</a> = <a class=\"id\" href=\"#alloc_size\">alloc_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#orig_nents\">orig_nents</a> -= <a class=\"id\" href=\"#sg_size\">sg_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_fn\">free_fn</a>(<a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#alloc_size\">alloc_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgl\">sgl</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#sgl\">sgl</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__sg_free_table\">__sg_free_table</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sg_free_table - Free a previously allocated sg table</span>", 
"<span class=\"comment\"> * @table:<span class=\"ts\"/>The mapped sg table header</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#sg_free_table\">sg_free_table</a>(struct <a class=\"id\" href=\"#sg_table\">sg_table</a> *<a class=\"id\" href=\"#table\">table</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sg_free_table\">__sg_free_table</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#SG_MAX_SINGLE_ALLOC\">SG_MAX_SINGLE_ALLOC</a>, <a class=\"id\" href=\"#sg_kfree\">sg_kfree</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sg_free_table\">sg_free_table</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __sg_alloc_table - Allocate and initialize an sg table with given allocator</span>", 
"<span class=\"comment\"> * @table:<span class=\"ts\"/>The sg table header to use</span>", 
"<span class=\"comment\"> * @nents:<span class=\"ts\"/>Number of entries in sg list</span>", 
"<span class=\"comment\"> * @max_ents:<span class=\"ts\"/>The maximum number of entries the allocator returns per call</span>", 
"<span class=\"comment\"> * @gfp_mask:<span class=\"ts\"/>GFP allocation mask</span>", 
"<span class=\"comment\"> * @alloc_fn:<span class=\"ts\"/>Allocator to use</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   This function returns a @table @nents long. The allocator is</span>", 
"<span class=\"comment\"> *   defined to return scatterlist chunks of maximum size @max_ents.</span>", 
"<span class=\"comment\"> *   Thus if @nents is bigger than @max_ents, the scatterlists will be</span>", 
"<span class=\"comment\"> *   chained in units of @max_ents.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Notes:</span>", 
"<span class=\"comment\"> *   If this function returns non-0 (eg failure), the caller must call</span>", 
"<span class=\"comment\"> *   __sg_free_table() to cleanup any leftover allocations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"int <a class=\"id\" href=\"#__sg_alloc_table\">__sg_alloc_table</a>(struct <a class=\"id\" href=\"#sg_table\">sg_table</a> *<a class=\"id\" href=\"#table\">table</a>, unsigned int <a class=\"id\" href=\"#nents\">nents</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#max_ents\">max_ents</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#sg_alloc_fn\">sg_alloc_fn</a> *<a class=\"id\" href=\"#alloc_fn\">alloc_fn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>, *<a class=\"id\" href=\"#prv\">prv</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#left\">left</a>;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_HAS_SG_CHAIN\">ARCH_HAS_SG_CHAIN</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#nents\">nents</a> &gt; <a class=\"id\" href=\"#max_ents\">max_ents</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#table\">table</a>, 0, sizeof(*<a class=\"id\" href=\"#table\">table</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#nents\">nents</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prv\">prv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sg_size\">sg_size</a>, <a class=\"id\" href=\"#alloc_size\">alloc_size</a> = <a class=\"id\" href=\"#left\">left</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc_size\">alloc_size</a> &gt; <a class=\"id\" href=\"#max_ents\">max_ents</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_size\">alloc_size</a> = <a class=\"id\" href=\"#max_ents\">max_ents</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_size\">sg_size</a> = <a class=\"id\" href=\"#alloc_size\">alloc_size</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_size\">sg_size</a> = <a class=\"id\" href=\"#alloc_size\">alloc_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> -= <a class=\"id\" href=\"#sg_size\">sg_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#alloc_fn\">alloc_fn</a>(<a class=\"id\" href=\"#alloc_size\">alloc_size</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#sg\">sg</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Adjust entry count to reflect that the last</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * entry of the previous table won't be used for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * linkage.  Without this, sg_kfree() may get</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * confused.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prv\">prv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#nents\">nents</a> = ++<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#orig_nents\">orig_nents</a>;", 
"", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_init_table\">sg_init_table</a>(<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#alloc_size\">alloc_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#nents\">nents</a> = <a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#orig_nents\">orig_nents</a> += <a class=\"id\" href=\"#sg_size\">sg_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this is the first mapping, assign the sg table header.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this is not the first mapping, chain previous part.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prv\">prv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_chain\">sg_chain</a>(<a class=\"id\" href=\"#prv\">prv</a>, <a class=\"id\" href=\"#max_ents\">max_ents</a>, <a class=\"id\" href=\"#sg\">sg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#sgl\">sgl</a> = <a class=\"id\" href=\"#sg\">sg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If no more entries after this one, mark the end</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#left\">left</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_mark_end\">sg_mark_end</a>(&amp;<a class=\"id\" href=\"#sg\">sg</a>[<a class=\"id\" href=\"#sg_size\">sg_size</a> - 1]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * only really needed for mempool backed sg allocations (like</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * SCSI), a possible improvement here would be to pass the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * table pointer into the allocator and let that clear these</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * flags</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &= ~<a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> |= <a class=\"id\" href=\"#__GFP_HIGH\">__GFP_HIGH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prv\">prv</a> = <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#left\">left</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__sg_alloc_table\">__sg_alloc_table</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sg_alloc_table - Allocate and initialize an sg table</span>", 
"<span class=\"comment\"> * @table:<span class=\"ts\"/>The sg table header to use</span>", 
"<span class=\"comment\"> * @nents:<span class=\"ts\"/>Number of entries in sg list</span>", 
"<span class=\"comment\"> * @gfp_mask:<span class=\"ts\"/>GFP allocation mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Description:</span>", 
"<span class=\"comment\"> *    Allocate and initialize an sg table. If @nents@ is larger than</span>", 
"<span class=\"comment\"> *    SG_MAX_SINGLE_ALLOC a chained sg table will be setup.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"int <a class=\"id\" href=\"#sg_alloc_table\">sg_alloc_table</a>(struct <a class=\"id\" href=\"#sg_table\">sg_table</a> *<a class=\"id\" href=\"#table\">table</a>, unsigned int <a class=\"id\" href=\"#nents\">nents</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__sg_alloc_table\">__sg_alloc_table</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#nents\">nents</a>, <a class=\"id\" href=\"#SG_MAX_SINGLE_ALLOC\">SG_MAX_SINGLE_ALLOC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#sg_kmalloc\">sg_kmalloc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sg_free_table\">__sg_free_table</a>(<a class=\"id\" href=\"#table\">table</a>, <a class=\"id\" href=\"#SG_MAX_SINGLE_ALLOC\">SG_MAX_SINGLE_ALLOC</a>, <a class=\"id\" href=\"#sg_kfree\">sg_kfree</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sg_alloc_table\">sg_alloc_table</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sg_miter_start - start mapping iteration over a sg list</span>", 
"<span class=\"comment\"> * @miter: sg mapping iter to be started</span>", 
"<span class=\"comment\"> * @sgl: sg list to iterate over</span>", 
"<span class=\"comment\"> * @nents: number of sg entries</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Starts mapping iterator @miter.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Context:</span>", 
"<span class=\"comment\"> *   Don't care.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sg_miter_start\">sg_miter_start</a>(struct <a class=\"id\" href=\"#sg_mapping_iter\">sg_mapping_iter</a> *<a class=\"id\" href=\"#miter\">miter</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#nents\">nents</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#miter\">miter</a>, 0, sizeof(struct <a class=\"id\" href=\"#sg_mapping_iter\">sg_mapping_iter</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__sg\">__sg</a> = <a class=\"id\" href=\"#sgl\">sgl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__nents\">__nents</a> = <a class=\"id\" href=\"#nents\">nents</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__offset\">__offset</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!(<a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#SG_MITER_TO_SG\">SG_MITER_TO_SG</a> | <a class=\"id\" href=\"#SG_MITER_FROM_SG\">SG_MITER_FROM_SG</a>)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__flags\">__flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sg_miter_start\">sg_miter_start</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sg_miter_next - proceed mapping iterator to the next mapping</span>", 
"<span class=\"comment\"> * @miter: sg mapping iter to proceed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Proceeds @miter@ to the next mapping.  @miter@ should have been</span>", 
"<span class=\"comment\"> *   started using sg_miter_start().  On successful return,</span>", 
"<span class=\"comment\"> *   @miter@-&gt;page, @miter@-&gt;addr and @miter@-&gt;length point to the</span>", 
"<span class=\"comment\"> *   current mapping.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Context:</span>", 
"<span class=\"comment\"> *   IRQ disabled if SG_MITER_ATOMIC.  IRQ must stay disabled till</span>", 
"<span class=\"comment\"> *   @miter@ is stopped.  May sleep if !SG_MITER_ATOMIC.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *   true if @miter contains the next mapping.  false if end of sg</span>", 
"<span class=\"comment\"> *   list is reached.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#sg_miter_next\">sg_miter_next</a>(struct <a class=\"id\" href=\"#sg_mapping_iter\">sg_mapping_iter</a> *<a class=\"id\" href=\"#miter\">miter</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check for end and drop resources from the last iteration */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__nents\">__nents</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg_miter_stop\">sg_miter_stop</a>(<a class=\"id\" href=\"#miter\">miter</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* get to the next sg if necessary.  __offset is adjusted by stop */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__offset\">__offset</a> == <a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__sg\">__sg</a>-><a class=\"id\" href=\"#length\">length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__nents\">__nents</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__sg\">__sg</a> = <a class=\"id\" href=\"#sg_next\">sg_next</a>(<a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__sg\">__sg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__offset\">__offset</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* map the next page */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__sg\">__sg</a>-><a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__offset\">__offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__sg\">__sg</a>-><a class=\"id\" href=\"#length\">length</a> - <a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__offset\">__offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#nth_page\">nth_page</a>(<a class=\"id\" href=\"#sg_page\">sg_page</a>(<a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__sg\">__sg</a>), <a class=\"id\" href=\"#off\">off</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> &= ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned int, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#off\">off</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#consumed\">consumed</a> = <a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#__flags\">__flags</a> &amp; <a class=\"id\" href=\"#SG_MITER_ATOMIC\">SG_MITER_ATOMIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#KM_BIO_SRC_IRQ\">KM_BIO_SRC_IRQ</a>) + <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#kmap\">kmap</a>(<a class=\"id\" href=\"#miter\">miter</a>-><a class=\"id\" href=\"#page\">page</a>) + <a class=\"id\" href=\"#off\">off</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
];
xr_frag_insert('l/af/fe2730106c2589a2d7d836ca2845052b9ba891.xr', __xr_tmp);
