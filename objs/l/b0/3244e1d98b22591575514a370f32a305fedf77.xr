var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mm/prio_tree.c - priority search tree for mapping-&gt;i_mmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2004, Rajesh Venkatasubramanian &lt;vrajesh@umich.edu&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPL v2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on the radix priority search tree proposed by Edward M. McCreight</span>", 
"<span class=\"comment\"> * SIAM Journal of Computing, vol. 14, no.2, pages 257-276, May 1985</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 02Feb2004<span class=\"ts\"/>Initial version</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#prio_tree\">prio_tree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * See lib/prio_tree.c for details on the general radix priority search tree</span>", 
"<span class=\"comment\"> * code.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following #defines are mirrored from lib/prio_tree.c. They're only used</span>", 
"<span class=\"comment\"> * for debugging, and should be removed (along with the debugging code using</span>", 
"<span class=\"comment\"> * them) when switching also VMAs to the regular prio_tree code.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RADIX_INDEX\">RADIX_INDEX</a>(<a class=\"id\" href=\"#vma\">vma</a>)  ((<a class=\"id\" href=\"#vma\">vma</a>)-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMA_SIZE\">VMA_SIZE</a>(<a class=\"id\" href=\"#vma\">vma</a>)<span class=\"ts\"/>  (((<a class=\"id\" href=\"#vma\">vma</a>)-><a class=\"id\" href=\"#vm_end\">vm_end</a> - (<a class=\"id\" href=\"#vma\">vma</a>)-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"<span class=\"comment\">/* avoid overflow */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HEAP_INDEX\">HEAP_INDEX</a>(<a class=\"id\" href=\"#vma\">vma</a>)   ((<a class=\"id\" href=\"#vma\">vma</a>)-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> + (<a class=\"id\" href=\"#VMA_SIZE\">VMA_SIZE</a>(<a class=\"id\" href=\"#vma\">vma</a>) - 1))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Radix priority search tree for address_space-&gt;i_mmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For each vma that map a unique set of file pages i.e., unique [radix_index,</span>", 
"<span class=\"comment\"> * heap_index] value, we have a corresponding priority search tree node. If</span>", 
"<span class=\"comment\"> * multiple vmas have identical [radix_index, heap_index] value, then one of</span>", 
"<span class=\"comment\"> * them is used as a tree node and others are stored in a vm_set list. The tree</span>", 
"<span class=\"comment\"> * node points to the first vma (head) of the list using vm_set.head.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * prio_tree_root</span>", 
"<span class=\"comment\"> *      |</span>", 
"<span class=\"comment\"> *      A       vm_set.head</span>", 
"<span class=\"comment\"> *     / \\      /</span>", 
"<span class=\"comment\"> *    L   R -&gt; H-I-J-K-M-N-O-P-Q-S</span>", 
"<span class=\"comment\"> *    ^   ^    &lt;-- vm_set.list --&gt;</span>", 
"<span class=\"comment\"> *  tree nodes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We need some way to identify whether a vma is a tree node, head of a vm_set</span>", 
"<span class=\"comment\"> * list, or just a member of a vm_set list. We cannot use vm_flags to store</span>", 
"<span class=\"comment\"> * such information. The reason is, in the above figure, it is possible that</span>", 
"<span class=\"comment\"> * vm_flags' of R and H are covered by the different mmap_sems. When R is</span>", 
"<span class=\"comment\"> * removed under R-&gt;mmap_sem, H replaces R as a tree node. Since we do not hold</span>", 
"<span class=\"comment\"> * H-&gt;mmap_sem, we cannot use H-&gt;vm_flags for marking that H is a tree node now.</span>", 
"<span class=\"comment\"> * That's why some trick involving shared.vm_set.parent is used for identifying</span>", 
"<span class=\"comment\"> * tree nodes and list head nodes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * vma radix priority search tree node rules:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * vma-&gt;shared.vm_set.parent != NULL    ==&gt; a tree node</span>", 
"<span class=\"comment\"> *      vma-&gt;shared.vm_set.head != NULL ==&gt; list of others mapping same range</span>", 
"<span class=\"comment\"> *      vma-&gt;shared.vm_set.head == NULL ==&gt; no others map the same range</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * vma-&gt;shared.vm_set.parent == NULL</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>vma-&gt;shared.vm_set.head != NULL ==&gt; list head of vmas mapping same range</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>vma-&gt;shared.vm_set.head == NULL ==&gt; a list node</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add a new vma known to map the same set of pages as the old vma:</span>", 
"<span class=\"comment\"> * useful for fork's dup_mmap as well as vma_prio_tree_insert below.</span>", 
"<span class=\"comment\"> * Note that it just happens to work correctly on i_mmap_nonlinear too.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#vma_prio_tree_add\">vma_prio_tree_add</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Leave these BUG_ONs till prio_tree patch stabilizes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#RADIX_INDEX\">RADIX_INDEX</a>(<a class=\"id\" href=\"#vma\">vma</a>) != <a class=\"id\" href=\"#RADIX_INDEX\">RADIX_INDEX</a>(<a class=\"id\" href=\"#old\">old</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#HEAP_INDEX\">HEAP_INDEX</a>(<a class=\"id\" href=\"#vma\">vma</a>) != <a class=\"id\" href=\"#HEAP_INDEX\">HEAP_INDEX</a>(<a class=\"id\" href=\"#old\">old</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#vma_prio_tree_insert\">vma_prio_tree_insert</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#old\">old</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#raw_prio_tree_insert\">raw_prio_tree_insert</a>(<a class=\"id\" href=\"#root\">root</a>, &amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a> != (struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *) &amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#prio_tree_entry\">prio_tree_entry</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_prio_tree_add\">vma_prio_tree_add</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#vma_prio_tree_remove\">vma_prio_tree_remove</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#node\">node</a>, *<a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#new_head\">new_head</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_prio_tree_remove\">raw_prio_tree_remove</a>(<a class=\"id\" href=\"#root\">root</a>, &amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Leave this BUG_ON till prio_tree patch stabilizes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a> != <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_head\">new_head</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_head\">new_head</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_prio_tree_replace\">raw_prio_tree_replace</a>(<a class=\"id\" href=\"#root\">root</a>, &amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#new_head\">new_head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_head\">new_head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_head\">new_head</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_head\">new_head</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#new_head\">new_head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_head\">new_head</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helper function to enumerate vmas that map a given file page or a set of</span>", 
"<span class=\"comment\"> * contiguous file pages. The function returns vmas that at least map a single</span>", 
"<span class=\"comment\"> * page in the given range of contiguous file pages.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma_prio_tree_next\">vma_prio_tree_next</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_iter\">prio_tree_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a> *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * First call is with NULL vma</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#prio_tree_next\">prio_tree_next</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#prio_tree_entry\">prio_tree_entry</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>, <a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#prio_tree_next\">prio_tree_next</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#prio_tree_entry\">prio_tree_entry</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
];
xr_frag_insert('l/b0/3244e1d98b22591575514a370f32a305fedf77.xr', __xr_tmp);
