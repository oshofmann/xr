var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#fill_ldt\">fill_ldt</a>(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#desc\">desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#user_desc\">user_desc</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#limit0\">limit0</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#limit\">limit</a> &amp; 0x0ffff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#base0\">base0</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#base_addr\">base_addr</a> &amp; 0x0000ffff;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#base1\">base1</a> = (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#base_addr\">base_addr</a> &amp; 0x00ff0000) >> 16;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#type\">type</a> = (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#read_exec_only\">read_exec_only</a> ^ 1) << 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#type\">type</a> |= <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#contents\">contents</a> << 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#s\">s</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#dpl\">dpl</a> = 0x3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#seg_not_present\">seg_not_present</a> ^ 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#limit\">limit</a> = (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#limit\">limit</a> &amp; 0xf0000) >> 16;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#avl\">avl</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#useable\">useable</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#seg_32bit\">seg_32bit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#g\">g</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#limit_in_pages\">limit_in_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#base2\">base2</a> = (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#base_addr\">base_addr</a> &amp; 0xff000000) >> 24;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't allow setting of the lm bit. It is useless anyway</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because 64bit system calls require __USER_CS:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#l\">l</a> = 0;", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a> <a class=\"id\" href=\"#idt_descr\">idt_descr</a>;", 
"extern <a class=\"id\" href=\"#gate_desc\">gate_desc</a> <a class=\"id\" href=\"#idt_table\">idt_table</a>[];", 
"", 
"struct <a class=\"id\" href=\"#gdt_page\">gdt_page</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> <a class=\"id\" href=\"#gdt\">gdt</a>[<a class=\"id\" href=\"#GDT_ENTRIES\">GDT_ENTRIES</a>];", 
"} <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#aligned\">aligned</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)));", 
"<a class=\"id\" href=\"#DECLARE_PER_CPU_PAGE_ALIGNED\">DECLARE_PER_CPU_PAGE_ALIGNED</a>(struct <a class=\"id\" href=\"#gdt_page\">gdt_page</a>, <a class=\"id\" href=\"#gdt_page\">gdt_page</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#get_cpu_gdt_table\">get_cpu_gdt_table</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#gdt_page\">gdt_page</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#gdt\">gdt</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pack_gate\">pack_gate</a>(<a class=\"id\" href=\"#gate_desc\">gate_desc</a> *<a class=\"id\" href=\"#gate\">gate</a>, unsigned <a class=\"id\" href=\"#type\">type</a>, unsigned long <a class=\"id\" href=\"#func\">func</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned <a class=\"id\" href=\"#dpl\">dpl</a>, unsigned <a class=\"id\" href=\"#ist\">ist</a>, unsigned <a class=\"id\" href=\"#seg\">seg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate\">gate</a>-><a class=\"id\" href=\"#offset_low\">offset_low</a> = <a class=\"id\" href=\"#PTR_LOW\">PTR_LOW</a>(<a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate\">gate</a>-><a class=\"id\" href=\"#segment\">segment</a> = <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate\">gate</a>-><a class=\"id\" href=\"#ist\">ist</a> = <a class=\"id\" href=\"#ist\">ist</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate\">gate</a>-><a class=\"id\" href=\"#p\">p</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate\">gate</a>-><a class=\"id\" href=\"#dpl\">dpl</a> = <a class=\"id\" href=\"#dpl\">dpl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate\">gate</a>-><a class=\"id\" href=\"#zero0\">zero0</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate\">gate</a>-><a class=\"id\" href=\"#zero1\">zero1</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate\">gate</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate\">gate</a>-><a class=\"id\" href=\"#offset_middle\">offset_middle</a> = <a class=\"id\" href=\"#PTR_MIDDLE\">PTR_MIDDLE</a>(<a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate\">gate</a>-><a class=\"id\" href=\"#offset_high\">offset_high</a> = <a class=\"id\" href=\"#PTR_HIGH\">PTR_HIGH</a>(<a class=\"id\" href=\"#func\">func</a>);", 
"}", 
"", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pack_gate\">pack_gate</a>(<a class=\"id\" href=\"#gate_desc\">gate_desc</a> *<a class=\"id\" href=\"#gate\">gate</a>, unsigned char <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#base\">base</a>, unsigned <a class=\"id\" href=\"#dpl\">dpl</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned short <a class=\"id\" href=\"#seg\">seg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate\">gate</a>-><a class=\"id\" href=\"#a\">a</a> = (<a class=\"id\" href=\"#seg\">seg</a> << 16) | (<a class=\"id\" href=\"#base\">base</a> &amp; 0xffff);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate\">gate</a>-><a class=\"id\" href=\"#b\">b</a> = (<a class=\"id\" href=\"#base\">base</a> &amp; 0xffff0000) |", 
"<span class=\"ts\"/><span class=\"ts\"/>  (((0x80 | <a class=\"id\" href=\"#type\">type</a> | (<a class=\"id\" href=\"#dpl\">dpl</a> << 5)) &amp; 0xff) << 8);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#desc_empty\">desc_empty</a>(const void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>return !(<a class=\"id\" href=\"#desc\">desc</a>[0] | <a class=\"id\" href=\"#desc\">desc</a>[1]);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PARAVIRT\">CONFIG_PARAVIRT</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#paravirt\">paravirt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#load_TR_desc\">load_TR_desc</a>() <a class=\"id\" href=\"#native_load_tr_desc\">native_load_tr_desc</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#load_gdt\">load_gdt</a>(<a class=\"id\" href=\"#dtr\">dtr</a>) <a class=\"id\" href=\"#native_load_gdt\">native_load_gdt</a>(<a class=\"id\" href=\"#dtr\">dtr</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#load_idt\">load_idt</a>(<a class=\"id\" href=\"#dtr\">dtr</a>) <a class=\"id\" href=\"#native_load_idt\">native_load_idt</a>(<a class=\"id\" href=\"#dtr\">dtr</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#load_tr\">load_tr</a>(<a class=\"id\" href=\"#tr\">tr</a>) <a class=\"id\" href=\"#asm\">asm</a> volatile(\"ltr %0\"::\"m\" (<a class=\"id\" href=\"#tr\">tr</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#load_ldt\">load_ldt</a>(<a class=\"id\" href=\"#ldt\">ldt</a>) <a class=\"id\" href=\"#asm\">asm</a> volatile(\"lldt %0\"::\"m\" (<a class=\"id\" href=\"#ldt\">ldt</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#store_gdt\">store_gdt</a>(<a class=\"id\" href=\"#dtr\">dtr</a>) <a class=\"id\" href=\"#native_store_gdt\">native_store_gdt</a>(<a class=\"id\" href=\"#dtr\">dtr</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#store_idt\">store_idt</a>(<a class=\"id\" href=\"#dtr\">dtr</a>) <a class=\"id\" href=\"#native_store_idt\">native_store_idt</a>(<a class=\"id\" href=\"#dtr\">dtr</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#store_tr\">store_tr</a>(<a class=\"id\" href=\"#tr\">tr</a>) (<a class=\"id\" href=\"#tr\">tr</a> = <a class=\"id\" href=\"#native_store_tr\">native_store_tr</a>())", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#load_TLS\">load_TLS</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) <a class=\"id\" href=\"#native_load_tls\">native_load_tls</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_ldt\">set_ldt</a> <a class=\"id\" href=\"#native_set_ldt\">native_set_ldt</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#write_ldt_entry\">write_ldt_entry</a>(<a class=\"id\" href=\"#dt\">dt</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#desc\">desc</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_write_ldt_entry\">native_write_ldt_entry</a>(<a class=\"id\" href=\"#dt\">dt</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#desc\">desc</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#write_gdt_entry\">write_gdt_entry</a>(<a class=\"id\" href=\"#dt\">dt</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_write_gdt_entry\">native_write_gdt_entry</a>(<a class=\"id\" href=\"#dt\">dt</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#type\">type</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#write_idt_entry\">write_idt_entry</a>(<a class=\"id\" href=\"#dt\">dt</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#g\">g</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_write_idt_entry\">native_write_idt_entry</a>(<a class=\"id\" href=\"#dt\">dt</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#g\">g</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#paravirt_alloc_ldt\">paravirt_alloc_ldt</a>(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#ldt\">ldt</a>, unsigned <a class=\"id\" href=\"#entries\">entries</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#paravirt_free_ldt\">paravirt_free_ldt</a>(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#ldt\">ldt</a>, unsigned <a class=\"id\" href=\"#entries\">entries</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_PARAVIRT */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#store_ldt\">store_ldt</a>(<a class=\"id\" href=\"#ldt\">ldt</a>) <a class=\"id\" href=\"#asm\">asm</a>(\"sldt %0\" : \"=m\"(<a class=\"id\" href=\"#ldt\">ldt</a>))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_write_idt_entry\">native_write_idt_entry</a>(<a class=\"id\" href=\"#gate_desc\">gate_desc</a> *<a class=\"id\" href=\"#idt\">idt</a>, int <a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const <a class=\"id\" href=\"#gate_desc\">gate_desc</a> *<a class=\"id\" href=\"#gate\">gate</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#idt\">idt</a>[<a class=\"id\" href=\"#entry\">entry</a>], <a class=\"id\" href=\"#gate\">gate</a>, sizeof(*<a class=\"id\" href=\"#gate\">gate</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_write_ldt_entry\">native_write_ldt_entry</a>(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#ldt\">ldt</a>, int <a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const void *<a class=\"id\" href=\"#desc\">desc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#ldt\">ldt</a>[<a class=\"id\" href=\"#entry\">entry</a>], <a class=\"id\" href=\"#desc\">desc</a>, 8);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_write_gdt_entry\">native_write_gdt_entry</a>(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#gdt\">gdt</a>, int <a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const void *<a class=\"id\" href=\"#desc\">desc</a>, int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DESC_TSS\">DESC_TSS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(<a class=\"id\" href=\"#tss_desc\">tss_desc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DESC_LDT\">DESC_LDT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(<a class=\"id\" href=\"#ldt_desc\">ldt_desc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#gdt\">gdt</a>[<a class=\"id\" href=\"#entry\">entry</a>], <a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#pack_descriptor\">pack_descriptor</a>(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#desc\">desc</a>, unsigned long <a class=\"id\" href=\"#base\">base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#limit\">limit</a>, unsigned char <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned char <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#a\">a</a> = ((<a class=\"id\" href=\"#base\">base</a> &amp; 0xffff) << 16) | (<a class=\"id\" href=\"#limit\">limit</a> &amp; 0xffff);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#b\">b</a> = (<a class=\"id\" href=\"#base\">base</a> &amp; 0xff000000) | ((<a class=\"id\" href=\"#base\">base</a> &amp; 0xff0000) >> 16) |", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#limit\">limit</a> &amp; 0x000f0000) | ((<a class=\"id\" href=\"#type\">type</a> &amp; 0xff) << 8) |", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#flags\">flags</a> &amp; 0xf) << 20);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#p\">p</a> = 1;", 
"}", 
"", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_tssldt_descriptor\">set_tssldt_descriptor</a>(void *<a class=\"id\" href=\"#d\">d</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned <a class=\"id\" href=\"#type\">type</a>, unsigned <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ldttss_desc64\">ldttss_desc64</a> *<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#desc\">desc</a>, 0, sizeof(*<a class=\"id\" href=\"#desc\">desc</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#limit0\">limit0</a> = <a class=\"id\" href=\"#size\">size</a> &amp; 0xFFFF;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#base0\">base0</a> = <a class=\"id\" href=\"#PTR_LOW\">PTR_LOW</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#base1\">base1</a> = <a class=\"id\" href=\"#PTR_MIDDLE\">PTR_MIDDLE</a>(<a class=\"id\" href=\"#addr\">addr</a>) &amp; 0xFF;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#p\">p</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#limit1\">limit1</a> = (<a class=\"id\" href=\"#size\">size</a> >> 16) &amp; 0xF;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#base2\">base2</a> = (<a class=\"id\" href=\"#PTR_MIDDLE\">PTR_MIDDLE</a>(<a class=\"id\" href=\"#addr\">addr</a>) >> 8) &amp; 0xFF;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#base3\">base3</a> = <a class=\"id\" href=\"#PTR_HIGH\">PTR_HIGH</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pack_descriptor\">pack_descriptor</a>((struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *)<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size\">size</a>, 0x80 | <a class=\"id\" href=\"#type\">type</a>, 0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__set_tss_desc\">__set_tss_desc</a>(unsigned <a class=\"id\" href=\"#cpu\">cpu</a>, unsigned int <a class=\"id\" href=\"#entry\">entry</a>, void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#get_cpu_gdt_table\">get_cpu_gdt_table</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tss_desc\">tss_desc</a> <a class=\"id\" href=\"#tss\">tss</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sizeof(unsigned long) coming from an extra \"long\" at the end</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the iobitmap. See tss_struct definition in processor.h</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -1? seg base+limit should be pointing to the address of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * last valid byte</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_tssldt_descriptor\">set_tssldt_descriptor</a>(&amp;<a class=\"id\" href=\"#tss\">tss</a>, (unsigned long)<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#DESC_TSS\">DESC_TSS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#IO_BITMAP_OFFSET\">IO_BITMAP_OFFSET</a> + <a class=\"id\" href=\"#IO_BITMAP_BYTES\">IO_BITMAP_BYTES</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      sizeof(unsigned long) - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_gdt_entry\">write_gdt_entry</a>(<a class=\"id\" href=\"#d\">d</a>, <a class=\"id\" href=\"#entry\">entry</a>, &amp;<a class=\"id\" href=\"#tss\">tss</a>, <a class=\"id\" href=\"#DESC_TSS\">DESC_TSS</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_tss_desc\">set_tss_desc</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#addr\">addr</a>) <a class=\"id\" href=\"#__set_tss_desc\">__set_tss_desc</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#GDT_ENTRY_TSS\">GDT_ENTRY_TSS</a>, <a class=\"id\" href=\"#addr\">addr</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_set_ldt\">native_set_ldt</a>(const void *<a class=\"id\" href=\"#addr\">addr</a>, unsigned int <a class=\"id\" href=\"#entries\">entries</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#entries\">entries</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"lldt %w0\"::\"q\" (0));", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ldt_desc\">ldt_desc</a> <a class=\"id\" href=\"#ldt\">ldt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_tssldt_descriptor\">set_tssldt_descriptor</a>(&amp;<a class=\"id\" href=\"#ldt\">ldt</a>, (unsigned long)<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#DESC_LDT\">DESC_LDT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#entries\">entries</a> * <a class=\"id\" href=\"#LDT_ENTRY_SIZE\">LDT_ENTRY_SIZE</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_gdt_entry\">write_gdt_entry</a>(<a class=\"id\" href=\"#get_cpu_gdt_table\">get_cpu_gdt_table</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#GDT_ENTRY_LDT\">GDT_ENTRY_LDT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#ldt\">ldt</a>, <a class=\"id\" href=\"#DESC_LDT\">DESC_LDT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"lldt %w0\"::\"q\" (<a class=\"id\" href=\"#GDT_ENTRY_LDT\">GDT_ENTRY_LDT</a>*8));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_load_tr_desc\">native_load_tr_desc</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"ltr %w0\"::\"q\" (<a class=\"id\" href=\"#GDT_ENTRY_TSS\">GDT_ENTRY_TSS</a>*8));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_load_gdt\">native_load_gdt</a>(const struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a> *<a class=\"id\" href=\"#dtr\">dtr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"lgdt %0\"::\"m\" (*<a class=\"id\" href=\"#dtr\">dtr</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_load_idt\">native_load_idt</a>(const struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a> *<a class=\"id\" href=\"#dtr\">dtr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"lidt %0\"::\"m\" (*<a class=\"id\" href=\"#dtr\">dtr</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_store_gdt\">native_store_gdt</a>(struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a> *<a class=\"id\" href=\"#dtr\">dtr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"sgdt %0\":\"=m\" (*<a class=\"id\" href=\"#dtr\">dtr</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_store_idt\">native_store_idt</a>(struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a> *<a class=\"id\" href=\"#dtr\">dtr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"sidt %0\":\"=m\" (*<a class=\"id\" href=\"#dtr\">dtr</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#native_store_tr\">native_store_tr</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tr\">tr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"str %0\":\"=r\" (<a class=\"id\" href=\"#tr\">tr</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tr\">tr</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_load_tls\">native_load_tls</a>(struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#t\">t</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#gdt\">gdt</a> = <a class=\"id\" href=\"#get_cpu_gdt_table\">get_cpu_gdt_table</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#GDT_ENTRY_TLS_ENTRIES\">GDT_ENTRY_TLS_ENTRIES</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gdt\">gdt</a>[<a class=\"id\" href=\"#GDT_ENTRY_TLS_MIN\">GDT_ENTRY_TLS_MIN</a> + <a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#tls_array\">tls_array</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LDT_empty\">_LDT_empty</a>(<a class=\"id\" href=\"#info\">info</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#info\">info</a>)-><a class=\"id\" href=\"#base_addr\">base_addr</a><span class=\"ts\"/><span class=\"ts\"/>== 0<span class=\"ts\"/>&&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (<a class=\"id\" href=\"#info\">info</a>)-><a class=\"id\" href=\"#limit\">limit</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>== 0<span class=\"ts\"/>&&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (<a class=\"id\" href=\"#info\">info</a>)-><a class=\"id\" href=\"#contents\">contents</a><span class=\"ts\"/><span class=\"ts\"/>== 0<span class=\"ts\"/>&&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (<a class=\"id\" href=\"#info\">info</a>)-><a class=\"id\" href=\"#read_exec_only\">read_exec_only</a><span class=\"ts\"/><span class=\"ts\"/>== 1<span class=\"ts\"/>&&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (<a class=\"id\" href=\"#info\">info</a>)-><a class=\"id\" href=\"#seg_32bit\">seg_32bit</a><span class=\"ts\"/><span class=\"ts\"/>== 0<span class=\"ts\"/>&&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (<a class=\"id\" href=\"#info\">info</a>)-><a class=\"id\" href=\"#limit_in_pages\">limit_in_pages</a><span class=\"ts\"/><span class=\"ts\"/>== 0<span class=\"ts\"/>&&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (<a class=\"id\" href=\"#info\">info</a>)-><a class=\"id\" href=\"#seg_not_present\">seg_not_present</a><span class=\"ts\"/>== 1<span class=\"ts\"/>&&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (<a class=\"id\" href=\"#info\">info</a>)-><a class=\"id\" href=\"#useable\">useable</a><span class=\"ts\"/><span class=\"ts\"/>== 0)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LDT_empty\">LDT_empty</a>(<a class=\"id\" href=\"#info\">info</a>) (<a class=\"id\" href=\"#_LDT_empty\">_LDT_empty</a>(<a class=\"id\" href=\"#info\">info</a>) && ((<a class=\"id\" href=\"#info\">info</a>)-><a class=\"id\" href=\"#lm\">lm</a> == 0))", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LDT_empty\">LDT_empty</a>(<a class=\"id\" href=\"#info\">info</a>) (<a class=\"id\" href=\"#_LDT_empty\">_LDT_empty</a>(<a class=\"id\" href=\"#info\">info</a>))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_LDT\">clear_LDT</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_ldt\">set_ldt</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * load one particular LDT into the current CPU</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#load_LDT_nolock\">load_LDT_nolock</a>(<a class=\"id\" href=\"#mm_context_t\">mm_context_t</a> *<a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_ldt\">set_ldt</a>(<a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#ldt\">ldt</a>, <a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#load_LDT\">load_LDT</a>(<a class=\"id\" href=\"#mm_context_t\">mm_context_t</a> *<a class=\"id\" href=\"#pc\">pc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_LDT_nolock\">load_LDT_nolock</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#get_desc_base\">get_desc_base</a>(const struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#desc\">desc</a>)", 
"{", 
"<span class=\"ts\"/>return (unsigned)(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#base0\">base0</a> | ((<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#base1\">base1</a>) << 16) | ((<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#base2\">base2</a>) << 24));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_desc_base\">set_desc_base</a>(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#desc\">desc</a>, unsigned long <a class=\"id\" href=\"#base\">base</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#base0\">base0</a> = <a class=\"id\" href=\"#base\">base</a> &amp; 0xffff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#base1\">base1</a> = (<a class=\"id\" href=\"#base\">base</a> >> 16) &amp; 0xff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#base2\">base2</a> = (<a class=\"id\" href=\"#base\">base</a> >> 24) &amp; 0xff;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#get_desc_limit\">get_desc_limit</a>(const struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#desc\">desc</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#limit0\">limit0</a> | (<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#limit\">limit</a> << 16);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_desc_limit\">set_desc_limit</a>(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#desc\">desc</a>, unsigned long <a class=\"id\" href=\"#limit\">limit</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#limit0\">limit0</a> = <a class=\"id\" href=\"#limit\">limit</a> &amp; 0xffff;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#limit\">limit</a> = (<a class=\"id\" href=\"#limit\">limit</a> >> 16) &amp; 0xf;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#_set_gate\">_set_gate</a>(int <a class=\"id\" href=\"#gate\">gate</a>, unsigned <a class=\"id\" href=\"#type\">type</a>, void *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned <a class=\"id\" href=\"#dpl\">dpl</a>, unsigned <a class=\"id\" href=\"#ist\">ist</a>, unsigned <a class=\"id\" href=\"#seg\">seg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate_desc\">gate_desc</a> <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pack_gate\">pack_gate</a>(&amp;<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#type\">type</a>, (unsigned long)<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#dpl\">dpl</a>, <a class=\"id\" href=\"#ist\">ist</a>, <a class=\"id\" href=\"#seg\">seg</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * does not need to be atomic because it is only done once at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * setup time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_idt_entry\">write_idt_entry</a>(<a class=\"id\" href=\"#idt_table\">idt_table</a>, <a class=\"id\" href=\"#gate\">gate</a>, &amp;<a class=\"id\" href=\"#s\">s</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This needs to use 'idt_table' rather than 'idt', and</span>", 
"<span class=\"comment\"> * thus use the _nonmapped_ version of the IDT, as the</span>", 
"<span class=\"comment\"> * Pentium F0 0F bugfix can have resulted in the mapped</span>", 
"<span class=\"comment\"> * IDT being write-protected.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(unsigned int <a class=\"id\" href=\"#n\">n</a>, void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((unsigned)<a class=\"id\" href=\"#n\">n</a> &gt; 0xFF);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_set_gate\">_set_gate</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#GATE_INTERRUPT\">GATE_INTERRUPT</a>, <a class=\"id\" href=\"#addr\">addr</a>, 0, 0, <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a>);", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#first_system_vector\">first_system_vector</a>;", 
"<span class=\"comment\">/* used_vectors is BITMAP for irq is not managed by percpu vector_irq */</span>", 
"extern unsigned long <a class=\"id\" href=\"#used_vectors\">used_vectors</a>[];", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#alloc_system_vector\">alloc_system_vector</a>(int <a class=\"id\" href=\"#vector\">vector</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#used_vectors\">used_vectors</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#used_vectors\">used_vectors</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_system_vector\">first_system_vector</a> &gt; <a class=\"id\" href=\"#vector\">vector</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_system_vector\">first_system_vector</a> = <a class=\"id\" href=\"#vector\">vector</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(unsigned int <a class=\"id\" href=\"#n\">n</a>, void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_system_vector\">alloc_system_vector</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This routine sets up an interrupt gate at directory privilege level 3.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_system_intr_gate\">set_system_intr_gate</a>(unsigned int <a class=\"id\" href=\"#n\">n</a>, void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((unsigned)<a class=\"id\" href=\"#n\">n</a> &gt; 0xFF);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_set_gate\">_set_gate</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#GATE_INTERRUPT\">GATE_INTERRUPT</a>, <a class=\"id\" href=\"#addr\">addr</a>, 0x3, 0, <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_system_trap_gate\">set_system_trap_gate</a>(unsigned int <a class=\"id\" href=\"#n\">n</a>, void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((unsigned)<a class=\"id\" href=\"#n\">n</a> &gt; 0xFF);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_set_gate\">_set_gate</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#GATE_TRAP\">GATE_TRAP</a>, <a class=\"id\" href=\"#addr\">addr</a>, 0x3, 0, <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_trap_gate\">set_trap_gate</a>(unsigned int <a class=\"id\" href=\"#n\">n</a>, void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((unsigned)<a class=\"id\" href=\"#n\">n</a> &gt; 0xFF);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_set_gate\">_set_gate</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#GATE_TRAP\">GATE_TRAP</a>, <a class=\"id\" href=\"#addr\">addr</a>, 0, 0, <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_task_gate\">set_task_gate</a>(unsigned int <a class=\"id\" href=\"#n\">n</a>, unsigned int <a class=\"id\" href=\"#gdt_entry\">gdt_entry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((unsigned)<a class=\"id\" href=\"#n\">n</a> &gt; 0xFF);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_set_gate\">_set_gate</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#GATE_TASK\">GATE_TASK</a>, (void *)0, 0, 0, (<a class=\"id\" href=\"#gdt_entry\">gdt_entry</a><<3));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_intr_gate_ist\">set_intr_gate_ist</a>(int <a class=\"id\" href=\"#n\">n</a>, void *<a class=\"id\" href=\"#addr\">addr</a>, unsigned <a class=\"id\" href=\"#ist\">ist</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((unsigned)<a class=\"id\" href=\"#n\">n</a> &gt; 0xFF);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_set_gate\">_set_gate</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#GATE_INTERRUPT\">GATE_INTERRUPT</a>, <a class=\"id\" href=\"#addr\">addr</a>, 0, <a class=\"id\" href=\"#ist\">ist</a>, <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_system_intr_gate_ist\">set_system_intr_gate_ist</a>(int <a class=\"id\" href=\"#n\">n</a>, void *<a class=\"id\" href=\"#addr\">addr</a>, unsigned <a class=\"id\" href=\"#ist\">ist</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((unsigned)<a class=\"id\" href=\"#n\">n</a> &gt; 0xFF);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_set_gate\">_set_gate</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#GATE_INTERRUPT\">GATE_INTERRUPT</a>, <a class=\"id\" href=\"#addr\">addr</a>, 0x3, <a class=\"id\" href=\"#ist\">ist</a>, <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_DESC_H */</span>", 
];
xr_frag_insert('l/b0/4976ff8231a5ac29c25380a3e66b74c84236f2.xr', __xr_tmp);
