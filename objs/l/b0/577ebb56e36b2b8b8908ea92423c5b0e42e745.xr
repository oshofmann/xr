var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_POSIX_TYPES_H\">_LINUX_POSIX_TYPES_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_POSIX_TYPES_H\">_LINUX_POSIX_TYPES_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This allows for 1024 file descriptors: if NR_OPEN is ever grown</span>", 
"<span class=\"comment\"> * beyond that you'll have to change this too. But 1024 fd's seem to be</span>", 
"<span class=\"comment\"> * enough even for such \"real\" unices like OSF/1, so hopefully this is</span>", 
"<span class=\"comment\"> * one limit that doesn't have to be changed [again].</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that POSIX wants the FD_CLEAR(fd,fdsetp) defines to be in</span>", 
"<span class=\"comment\"> * &lt;sys/time.h&gt; (and thus &lt;linux/time.h&gt;) - but this is a more logical</span>", 
"<span class=\"comment\"> * place for them. Solved by having dummy defines in &lt;sys/time.h&gt;.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Those macros may have been defined in &lt;gnu/types.h&gt;. But we always</span>", 
"<span class=\"comment\"> * use the ones here. </span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#__NFDBITS\">__NFDBITS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__NFDBITS\">__NFDBITS</a><span class=\"ts\"/>(8 * sizeof(unsigned long))", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#__FD_SETSIZE\">__FD_SETSIZE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__FD_SETSIZE\">__FD_SETSIZE</a><span class=\"ts\"/>1024", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#__FDSET_LONGS\">__FDSET_LONGS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__FDSET_LONGS\">__FDSET_LONGS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#__FD_SETSIZE\">__FD_SETSIZE</a>/<a class=\"id\" href=\"#__NFDBITS\">__NFDBITS</a>)", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#__FDELT\">__FDELT</a>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#__FDELT\">__FDELT</a>(<a class=\"id\" href=\"#d\">d</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#d\">d</a>) / <a class=\"id\" href=\"#__NFDBITS\">__NFDBITS</a>)", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#__FDMASK\">__FDMASK</a>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#__FDMASK\">__FDMASK</a>(<a class=\"id\" href=\"#d\">d</a>)<span class=\"ts\"/>(1UL << ((<a class=\"id\" href=\"#d\">d</a>) % <a class=\"id\" href=\"#__NFDBITS\">__NFDBITS</a>))", 
"", 
"typedef struct {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#fds_bits\">fds_bits</a> [<a class=\"id\" href=\"#__FDSET_LONGS\">__FDSET_LONGS</a>];", 
"} <a class=\"id\" href=\"#__kernel_fd_set\">__kernel_fd_set</a>;", 
"", 
"<span class=\"comment\">/* Type of a signal handler.  */</span>", 
"typedef void (*<a class=\"id\" href=\"#__kernel_sighandler_t\">__kernel_sighandler_t</a>)(int);", 
"", 
"<span class=\"comment\">/* Type of a SYSV IPC key.  */</span>", 
"typedef int <a class=\"id\" href=\"#__kernel_key_t\">__kernel_key_t</a>;", 
"typedef int <a class=\"id\" href=\"#__kernel_mqd_t\">__kernel_mqd_t</a>;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#posix_types\">posix_types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_POSIX_TYPES_H */</span>", 
];
xr_frag_insert('l/b0/577ebb56e36b2b8b8908ea92423c5b0e42e745.xr', __xr_tmp);
