var __xr_tmp = [
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmdrop\">mmdrop</a>(<a class=\"id\" href=\"#active_mm\">active_mm</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function makes sure the current process has its own signal table,</span>", 
"<span class=\"comment\"> * so that flush_signal_handlers can later reset the handlers without</span>", 
"<span class=\"comment\"> * disturbing other processes.  (Other processes might share the signal</span>", 
"<span class=\"comment\"> * table via the CLONE_SIGHAND option to clone().)</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#de_thread\">de_thread</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *<a class=\"id\" href=\"#oldsighand\">oldsighand</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a> = &amp;<a class=\"id\" href=\"#oldsighand\">oldsighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#thread_group_empty\">thread_group_empty</a>(<a class=\"id\" href=\"#tsk\">tsk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_thread_group\">no_thread_group</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Kill all other threads in the thread group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_group_exit\">signal_group_exit</a>(<a class=\"id\" href=\"#sig\">sig</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Another group action in progress, just</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * return so that the signal is processed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#group_exit_task\">group_exit_task</a> = <a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#notify_count\">notify_count</a> = <a class=\"id\" href=\"#zap_other_threads\">zap_other_threads</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#thread_group_leader\">thread_group_leader</a>(<a class=\"id\" href=\"#tsk\">tsk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#notify_count\">notify_count</a>--;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#notify_count\">notify_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At this point all other threads have exited, all we have to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do is to wait for the thread group leader to become inactive,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and to assume its PID:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#thread_group_leader\">thread_group_leader</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#leader\">leader</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#notify_count\">notify_count</a> = -1;<span class=\"ts\"/><span class=\"comment\">/* for exit_notify() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irq\">write_lock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irq\">write_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The only record we have of the real-time age of a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * process, regardless of execs it's done, is start_time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * All the past CPU time is accumulated in signal_struct</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * from sister threads now dead.  But in this non-leader</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * exec, nothing survives from the original leader thread,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * whose birth marks the true age of this process now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When we take on its identity by switching to its PID, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * also take its birthdate (always earlier than our own).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#start_time\">start_time</a> = <a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#start_time\">start_time</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#same_thread_group\">same_thread_group</a>(<a class=\"id\" href=\"#leader\">leader</a>, <a class=\"id\" href=\"#tsk\">tsk</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#has_group_leader_pid\">has_group_leader_pid</a>(<a class=\"id\" href=\"#tsk\">tsk</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * An exec() starts a new thread group with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * TGID of the previous thread group. Rehash the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * two threads with a switched PID, and release</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the former thread group leader:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Become a process group leader with the old leader's pid.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The old leader becomes a thread of the this thread group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note: The old leader also uses this pid until release_task</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *       is called.  Odd but simple and correct.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detach_pid\">detach_pid</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attach_pid\">attach_pid</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>,  <a class=\"id\" href=\"#task_pid\">task_pid</a>(<a class=\"id\" href=\"#leader\">leader</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transfer_pid\">transfer_pid</a>(<a class=\"id\" href=\"#leader\">leader</a>, <a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#PIDTYPE_PGID\">PIDTYPE_PGID</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transfer_pid\">transfer_pid</a>(<a class=\"id\" href=\"#leader\">leader</a>, <a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#PIDTYPE_SID\">PIDTYPE_SID</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_replace_rcu\">list_replace_rcu</a>(&amp;<a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#tasks\">tasks</a>, &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_replace_init\">list_replace_init</a>(&amp;<a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#sibling\">sibling</a>, &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sibling\">sibling</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a> = <a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a> = <a class=\"id\" href=\"#tsk\">tsk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#exit_signal\">exit_signal</a> = <a class=\"id\" href=\"#SIGCHLD\">SIGCHLD</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a> != <a class=\"id\" href=\"#EXIT_ZOMBIE\">EXIT_ZOMBIE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a> = <a class=\"id\" href=\"#EXIT_DEAD\">EXIT_DEAD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irq\">write_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_task\">release_task</a>(<a class=\"id\" href=\"#leader\">leader</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#group_exit_task\">group_exit_task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#notify_count\">notify_count</a> = 0;", 
"", 
"<a class=\"id\" href=\"#no_thread_group\">no_thread_group</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setmax_mm_hiwater_rss\">setmax_mm_hiwater_rss</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#maxrss\">maxrss</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_itimers\">exit_itimers</a>(<a class=\"id\" href=\"#sig\">sig</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_itimer_signals\">flush_itimer_signals</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#oldsighand\">oldsighand</a>-><a class=\"id\" href=\"#count\">count</a>) != 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *<a class=\"id\" href=\"#newsighand\">newsighand</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This -&gt;sighand is shared with the CLONE_SIGHAND</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but not CLONE_THREAD task, switch to the new one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newsighand\">newsighand</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#sighand_cachep\">sighand_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#newsighand\">newsighand</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#newsighand\">newsighand</a>-><a class=\"id\" href=\"#count\">count</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#newsighand\">newsighand</a>-><a class=\"id\" href=\"#action\">action</a>, <a class=\"id\" href=\"#oldsighand\">oldsighand</a>-><a class=\"id\" href=\"#action\">action</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       sizeof(<a class=\"id\" href=\"#newsighand\">newsighand</a>-><a class=\"id\" href=\"#action\">action</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_lock_irq\">write_lock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#oldsighand\">oldsighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>, <a class=\"id\" href=\"#newsighand\">newsighand</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#oldsighand\">oldsighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_irq\">write_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__cleanup_sighand\">__cleanup_sighand</a>(<a class=\"id\" href=\"#oldsighand\">oldsighand</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#thread_group_leader\">thread_group_leader</a>(<a class=\"id\" href=\"#tsk\">tsk</a>));", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These functions flushes out all traces of the currently running executable</span>", 
"<span class=\"comment\"> * so that a new one can be started</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#flush_old_files\">flush_old_files</a>(struct <a class=\"id\" href=\"#files_struct\">files_struct</a> * <a class=\"id\" href=\"#files\">files</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#j\">j</a> = -1;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#set\">set</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#j\">j</a> * <a class=\"id\" href=\"#__NFDBITS\">__NFDBITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a> = <a class=\"id\" href=\"#files_fdtable\">files_fdtable</a>(<a class=\"id\" href=\"#files\">files</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#close_on_exec\">close_on_exec</a>-><a class=\"id\" href=\"#fds_bits\">fds_bits</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#set\">set</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#close_on_exec\">close_on_exec</a>-><a class=\"id\" href=\"#fds_bits\">fds_bits</a>[<a class=\"id\" href=\"#j\">j</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for ( ; <a class=\"id\" href=\"#set\">set</a> ; <a class=\"id\" href=\"#i\">i</a>++,<a class=\"id\" href=\"#set\">set</a> >>= 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#set\">set</a> &amp; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sys_close\">sys_close</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"}", 
"", 
"char *<a class=\"id\" href=\"#get_task_comm\">get_task_comm</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* buf must be at least sizeof(tsk-&gt;comm) in size */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>, sizeof(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#set_task_comm\">set_task_comm</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Threads may access current-&gt;comm without holding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the task lock, so write the string carefully.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Readers without a lock may see incomplete new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * names but are safe from non-terminating string reads.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>, 0, <a class=\"id\" href=\"#TASK_COMM_LEN\">TASK_COMM_LEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wmb\">wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#buf\">buf</a>, sizeof(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_comm\">perf_event_comm</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#flush_old_exec\">flush_old_exec</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> * <a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure we have a private signal table and that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we are unassociated from the previous thread group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#de_thread\">de_thread</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_mm_exe_file\">set_mm_exe_file</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Release all of the old mmap stuff</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#exec_mmap\">exec_mmap</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We're using it now */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_RANDOMIZE\">PF_RANDOMIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_thread\">flush_thread</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#personality\">personality</a> &= ~<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#per_clear\">per_clear</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#flush_old_exec\">flush_old_exec</a>);", 
"", 
"void <a class=\"id\" href=\"#setup_new_exec\">setup_new_exec</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> * <a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ch\">ch</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#tcomm\">tcomm</a>[sizeof(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>)];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_pick_mmap_layout\">arch_pick_mmap_layout</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This is the point of no return */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sas_ss_sp\">sas_ss_sp</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sas_ss_size\">sas_ss_size</a> = 0;", 
"", 
];
xr_frag_insert('l/b0/5a5639e810acc1d030ab828406dffb6b21efe2.xr', __xr_tmp);
