var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_PARAVIRT_TYPES_H\">_ASM_X86_PARAVIRT_TYPES_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_PARAVIRT_TYPES_H\">_ASM_X86_PARAVIRT_TYPES_H</a>", 
"", 
"<span class=\"comment\">/* Bitmask of what can be clobbered: usually at least eax. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_NONE\">CLBR_NONE</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_EAX\">CLBR_EAX</a>  (1 << 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_ECX\">CLBR_ECX</a>  (1 << 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_EDX\">CLBR_EDX</a>  (1 << 2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_EDI\">CLBR_EDI</a>  (1 << 3)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"comment\">/* CLBR_ANY should match all regs platform has. For i386, that's just it */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_ANY\">CLBR_ANY</a>  ((1 << 4) - 1)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_ARG_REGS\">CLBR_ARG_REGS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#CLBR_EAX\">CLBR_EAX</a> | <a class=\"id\" href=\"#CLBR_EDX\">CLBR_EDX</a> | <a class=\"id\" href=\"#CLBR_ECX\">CLBR_ECX</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_RET_REG\">CLBR_RET_REG</a><span class=\"ts\"/>(<a class=\"id\" href=\"#CLBR_EAX\">CLBR_EAX</a> | <a class=\"id\" href=\"#CLBR_EDX\">CLBR_EDX</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_SCRATCH\">CLBR_SCRATCH</a><span class=\"ts\"/>(0)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_RAX\">CLBR_RAX</a>  <a class=\"id\" href=\"#CLBR_EAX\">CLBR_EAX</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_RCX\">CLBR_RCX</a>  <a class=\"id\" href=\"#CLBR_ECX\">CLBR_ECX</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_RDX\">CLBR_RDX</a>  <a class=\"id\" href=\"#CLBR_EDX\">CLBR_EDX</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_RDI\">CLBR_RDI</a>  <a class=\"id\" href=\"#CLBR_EDI\">CLBR_EDI</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_RSI\">CLBR_RSI</a>  (1 << 4)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_R8\">CLBR_R8</a>   (1 << 5)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_R9\">CLBR_R9</a>   (1 << 6)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_R10\">CLBR_R10</a>  (1 << 7)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_R11\">CLBR_R11</a>  (1 << 8)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_ANY\">CLBR_ANY</a>  ((1 << 9) - 1)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_ARG_REGS\">CLBR_ARG_REGS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#CLBR_RDI\">CLBR_RDI</a> | <a class=\"id\" href=\"#CLBR_RSI\">CLBR_RSI</a> | <a class=\"id\" href=\"#CLBR_RDX\">CLBR_RDX</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#CLBR_RCX\">CLBR_RCX</a> | <a class=\"id\" href=\"#CLBR_R8\">CLBR_R8</a> | <a class=\"id\" href=\"#CLBR_R9\">CLBR_R9</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_RET_REG\">CLBR_RET_REG</a><span class=\"ts\"/>(<a class=\"id\" href=\"#CLBR_RAX\">CLBR_RAX</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_SCRATCH\">CLBR_SCRATCH</a><span class=\"ts\"/>(<a class=\"id\" href=\"#CLBR_R10\">CLBR_R10</a> | <a class=\"id\" href=\"#CLBR_R11\">CLBR_R11</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* X86_64 */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLBR_CALLEE_SAVE\">CLBR_CALLEE_SAVE</a> ((<a class=\"id\" href=\"#CLBR_ARG_REGS\">CLBR_ARG_REGS</a> | <a class=\"id\" href=\"#CLBR_SCRATCH\">CLBR_SCRATCH</a>) &amp; ~<a class=\"id\" href=\"#CLBR_RET_REG\">CLBR_RET_REG</a>)", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#desc_defs\">desc_defs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#kmap_types\">kmap_types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#page\">page</a>;", 
"struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a>;", 
"struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a>;", 
"struct <a class=\"id\" href=\"#tss_struct\">tss_struct</a>;", 
"struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a>;", 
"struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a>;", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a>;", 
"struct <a class=\"id\" href=\"#cpumask\">cpumask</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wrapper type for pointers to code which uses the non-standard</span>", 
"<span class=\"comment\"> * calling convention.  See PV_CALL_SAVE_REGS_THUNK below.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#paravirt_callee_save\">paravirt_callee_save</a> {", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#func\">func</a>;", 
"};", 
"", 
"<span class=\"comment\">/* general info */</span>", 
"struct <a class=\"id\" href=\"#pv_info\">pv_info</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#kernel_rpl\">kernel_rpl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#shared_kernel_pmd\">shared_kernel_pmd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#paravirt_enabled\">paravirt_enabled</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#pv_init_ops\">pv_init_ops</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Patch may replace one of the defined code sequences with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * arbitrary code, subject to the same register constraints.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This generally means the code is not free to clobber any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * registers other than EAX.  The patch function should return</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the number of bytes of code generated, as we nop pad the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rest in generic code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned (*<a class=\"id\" href=\"#patch\">patch</a>)(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#clobber\">clobber</a>, void *<a class=\"id\" href=\"#insnbuf\">insnbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned <a class=\"id\" href=\"#len\">len</a>);", 
"};", 
"", 
"", 
"struct <a class=\"id\" href=\"#pv_lazy_ops\">pv_lazy_ops</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Set deferred update mode, used for batching operations. */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#enter\">enter</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#leave\">leave</a>)(void);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#pv_time_ops\">pv_time_ops</a> {", 
"<span class=\"ts\"/>unsigned long long (*<a class=\"id\" href=\"#sched_clock\">sched_clock</a>)(void);", 
"<span class=\"ts\"/>unsigned long (*<a class=\"id\" href=\"#get_tsc_khz\">get_tsc_khz</a>)(void);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#pv_cpu_ops\">pv_cpu_ops</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* hooks for various privileged instructions */</span>", 
"<span class=\"ts\"/>unsigned long (*<a class=\"id\" href=\"#get_debugreg\">get_debugreg</a>)(int <a class=\"id\" href=\"#regno\">regno</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>)(int <a class=\"id\" href=\"#regno\">regno</a>, unsigned long <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#clts\">clts</a>)(void);", 
"", 
"<span class=\"ts\"/>unsigned long (*<a class=\"id\" href=\"#read_cr0\">read_cr0</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#write_cr0\">write_cr0</a>)(unsigned long);", 
"", 
"<span class=\"ts\"/>unsigned long (*<a class=\"id\" href=\"#read_cr4_safe\">read_cr4_safe</a>)(void);", 
"<span class=\"ts\"/>unsigned long (*<a class=\"id\" href=\"#read_cr4\">read_cr4</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#write_cr4\">write_cr4</a>)(unsigned long);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>unsigned long (*<a class=\"id\" href=\"#read_cr8\">read_cr8</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#write_cr8\">write_cr8</a>)(unsigned long);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Segment descriptor handling */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#load_tr_desc\">load_tr_desc</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#load_gdt\">load_gdt</a>)(const struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#load_idt\">load_idt</a>)(const struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#store_gdt\">store_gdt</a>)(struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#store_idt\">store_idt</a>)(struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a> *);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_ldt\">set_ldt</a>)(const void *<a class=\"id\" href=\"#desc\">desc</a>, unsigned <a class=\"id\" href=\"#entries\">entries</a>);", 
"<span class=\"ts\"/>unsigned long (*<a class=\"id\" href=\"#store_tr\">store_tr</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#load_tls\">load_tls</a>)(struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#t\">t</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#load_gs_index\">load_gs_index</a>)(unsigned int <a class=\"id\" href=\"#idx\">idx</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#write_ldt_entry\">write_ldt_entry</a>)(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#ldt\">ldt</a>, int <a class=\"id\" href=\"#entrynum\">entrynum</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const void *<a class=\"id\" href=\"#desc\">desc</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#write_gdt_entry\">write_gdt_entry</a>)(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#entrynum\">entrynum</a>, const void *<a class=\"id\" href=\"#desc\">desc</a>, int <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#write_idt_entry\">write_idt_entry</a>)(<a class=\"id\" href=\"#gate_desc\">gate_desc</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#entrynum\">entrynum</a>, const <a class=\"id\" href=\"#gate_desc\">gate_desc</a> *<a class=\"id\" href=\"#gate\">gate</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#alloc_ldt\">alloc_ldt</a>)(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#ldt\">ldt</a>, unsigned <a class=\"id\" href=\"#entries\">entries</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#free_ldt\">free_ldt</a>)(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#ldt\">ldt</a>, unsigned <a class=\"id\" href=\"#entries\">entries</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#load_sp0\">load_sp0</a>)(struct <a class=\"id\" href=\"#tss_struct\">tss_struct</a> *<a class=\"id\" href=\"#tss\">tss</a>, struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_iopl_mask\">set_iopl_mask</a>)(unsigned <a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#wbinvd\">wbinvd</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#io_delay\">io_delay</a>)(void);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cpuid emulation, mostly so that caps bits can be disabled */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#cpuid\">cpuid</a>)(unsigned int *<a class=\"id\" href=\"#eax\">eax</a>, unsigned int *<a class=\"id\" href=\"#ebx\">ebx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned int *<a class=\"id\" href=\"#ecx\">ecx</a>, unsigned int *<a class=\"id\" href=\"#edx\">edx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* MSR, PMC and TSR operations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   err = 0/-EFAULT.  wrmsr returns 0/-EFAULT. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> (*<a class=\"id\" href=\"#read_msr\">read_msr</a>)(unsigned int <a class=\"id\" href=\"#msr\">msr</a>, int *<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#rdmsr_regs\">rdmsr_regs</a>)(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#write_msr\">write_msr</a>)(unsigned int <a class=\"id\" href=\"#msr\">msr</a>, unsigned <a class=\"id\" href=\"#low\">low</a>, unsigned <a class=\"id\" href=\"#high\">high</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#wrmsr_regs\">wrmsr_regs</a>)(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> (*<a class=\"id\" href=\"#read_tsc\">read_tsc</a>)(void);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> (*<a class=\"id\" href=\"#read_pmc\">read_pmc</a>)(int <a class=\"id\" href=\"#counter\">counter</a>);", 
"<span class=\"ts\"/>unsigned long long (*<a class=\"id\" href=\"#read_tscp\">read_tscp</a>)(unsigned int *<a class=\"id\" href=\"#aux\">aux</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Atomically enable interrupts and return to userspace.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is only ever used to return to 32-bit processes; in a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 64-bit kernel, it's used for 32-on-64 compat processes, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * never native 64-bit processes.  (Jump, not call.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#irq_enable_sysexit\">irq_enable_sysexit</a>)(void);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Switch to usermode gs and return to 64-bit usermode using</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sysret.  Only used in 64-bit kernels to return to 64-bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * processes.  Usermode register state, including %rsp, must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already be restored.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#usergs_sysret64\">usergs_sysret64</a>)(void);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Switch to usermode gs and return to 32-bit usermode using</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sysret.  Used to return to 32-on-64 compat processes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Other usermode register state, including %esp, must already</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be restored.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#usergs_sysret32\">usergs_sysret32</a>)(void);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Normal iret.  Jump to this with the standard iret stack</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   frame set up. */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#iret\">iret</a>)(void);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#swapgs\">swapgs</a>)(void);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#start_context_switch\">start_context_switch</a>)(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#end_context_switch\">end_context_switch</a>)(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#pv_irq_ops\">pv_irq_ops</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get/set interrupt state.  save_fl and restore_fl are only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * expected to use X86_EFLAGS_IF; all other bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * returned from save_fl are undefined, and may be ignored by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * restore_fl.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: These functions callers expect the callee to preserve</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * more registers than the standard C calling convention.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#paravirt_callee_save\">paravirt_callee_save</a> <a class=\"id\" href=\"#save_fl\">save_fl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#paravirt_callee_save\">paravirt_callee_save</a> <a class=\"id\" href=\"#restore_fl\">restore_fl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#paravirt_callee_save\">paravirt_callee_save</a> <a class=\"id\" href=\"#irq_disable\">irq_disable</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#paravirt_callee_save\">paravirt_callee_save</a> <a class=\"id\" href=\"#irq_enable\">irq_enable</a>;", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#safe_halt\">safe_halt</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#halt\">halt</a>)(void);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#adjust_exception_frame\">adjust_exception_frame</a>)(void);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#pv_apic_ops\">pv_apic_ops</a> {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#startup_ipi_hook\">startup_ipi_hook</a>)(int <a class=\"id\" href=\"#phys_apicid\">phys_apicid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#start_eip\">start_eip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#start_esp\">start_esp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a> {", 
"<span class=\"ts\"/>unsigned long (*<a class=\"id\" href=\"#read_cr2\">read_cr2</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#write_cr2\">write_cr2</a>)(unsigned long);", 
"", 
"<span class=\"ts\"/>unsigned long (*<a class=\"id\" href=\"#read_cr3\">read_cr3</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#write_cr3\">write_cr3</a>)(unsigned long);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hooks for intercepting the creation/use/destruction of an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mm_struct.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#activate_mm\">activate_mm</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#dup_mmap\">dup_mmap</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#oldmm\">oldmm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#exit_mmap\">exit_mmap</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* TLB operations */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#flush_tlb_user\">flush_tlb_user</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#flush_tlb_kernel\">flush_tlb_kernel</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#flush_tlb_single\">flush_tlb_single</a>)(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#flush_tlb_others\">flush_tlb_others</a>)(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpus\">cpus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#va\">va</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Hooks for allocating and freeing a pagetable top-level */</span>", 
"<span class=\"ts\"/>int  (*<a class=\"id\" href=\"#pgd_alloc\">pgd_alloc</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#pgd_free\">pgd_free</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hooks for allocating/releasing pagetable pages when they're</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * attached to a pagetable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#alloc_pte\">alloc_pte</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#alloc_pmd\">alloc_pmd</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#alloc_pmd_clone\">alloc_pmd_clone</a>)(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, unsigned long <a class=\"id\" href=\"#clonepfn\">clonepfn</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#alloc_pud\">alloc_pud</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#release_pte\">release_pte</a>)(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#release_pmd\">release_pmd</a>)(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#release_pud\">release_pud</a>)(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Pagetable manipulation functions */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_pte\">set_pte</a>)(<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pteval\">pteval</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pteval\">pteval</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_pmd\">set_pmd</a>)(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmdp\">pmdp</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> <a class=\"id\" href=\"#pmdval\">pmdval</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#pte_update\">pte_update</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#pte_update_defer\">pte_update_defer</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> (*<a class=\"id\" href=\"#ptep_modify_prot_start\">ptep_modify_prot_start</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#ptep_modify_prot_commit\">ptep_modify_prot_commit</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#paravirt_callee_save\">paravirt_callee_save</a> <a class=\"id\" href=\"#pte_val\">pte_val</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#paravirt_callee_save\">paravirt_callee_save</a> <a class=\"id\" href=\"#make_pte\">make_pte</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#paravirt_callee_save\">paravirt_callee_save</a> <a class=\"id\" href=\"#pgd_val\">pgd_val</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#paravirt_callee_save\">paravirt_callee_save</a> <a class=\"id\" href=\"#make_pgd\">make_pgd</a>;", 
"", 
"#if <a class=\"id\" href=\"#PAGETABLE_LEVELS\">PAGETABLE_LEVELS</a> >= 3", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_PAE\">CONFIG_X86_PAE</a>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_pte_atomic\">set_pte_atomic</a>)(<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pteval\">pteval</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#pte_clear\">pte_clear</a>)(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#pmd_clear\">pmd_clear</a>)(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmdp\">pmdp</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_X86_PAE */</span>", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_pud\">set_pud</a>)(<a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pudp\">pudp</a>, <a class=\"id\" href=\"#pud_t\">pud_t</a> <a class=\"id\" href=\"#pudval\">pudval</a>);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#paravirt_callee_save\">paravirt_callee_save</a> <a class=\"id\" href=\"#pmd_val\">pmd_val</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#paravirt_callee_save\">paravirt_callee_save</a> <a class=\"id\" href=\"#make_pmd\">make_pmd</a>;", 
"", 
"#if <a class=\"id\" href=\"#PAGETABLE_LEVELS\">PAGETABLE_LEVELS</a> == 4", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#paravirt_callee_save\">paravirt_callee_save</a> <a class=\"id\" href=\"#pud_val\">pud_val</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#paravirt_callee_save\">paravirt_callee_save</a> <a class=\"id\" href=\"#make_pud\">make_pud</a>;", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_pgd\">set_pgd</a>)(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pudp\">pudp</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> <a class=\"id\" href=\"#pgdval\">pgdval</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* PAGETABLE_LEVELS == 4 */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* PAGETABLE_LEVELS &gt;= 3 */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pv_lazy_ops\">pv_lazy_ops</a> <a class=\"id\" href=\"#lazy_mode\">lazy_mode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* dom0 ops */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Sometimes the physical address is a pfn, and sometimes its</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   an mfn.  We can tell which is which from the index. */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#set_fixmap\">set_fixmap</a>)(unsigned <span class=\"comment\">/* enum fixed_addresses */</span> <a class=\"id\" href=\"#idx\">idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#flags\">flags</a>);", 
"};", 
"", 
"struct <a class=\"id\" href=\"#arch_spinlock\">arch_spinlock</a>;", 
"struct <a class=\"id\" href=\"#pv_lock_ops\">pv_lock_ops</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#spin_is_locked\">spin_is_locked</a>)(struct <a class=\"id\" href=\"#arch_spinlock\">arch_spinlock</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#spin_is_contended\">spin_is_contended</a>)(struct <a class=\"id\" href=\"#arch_spinlock\">arch_spinlock</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#spin_lock\">spin_lock</a>)(struct <a class=\"id\" href=\"#arch_spinlock\">arch_spinlock</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#spin_lock_flags\">spin_lock_flags</a>)(struct <a class=\"id\" href=\"#arch_spinlock\">arch_spinlock</a> *<a class=\"id\" href=\"#lock\">lock</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#spin_trylock\">spin_trylock</a>)(struct <a class=\"id\" href=\"#arch_spinlock\">arch_spinlock</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>)(struct <a class=\"id\" href=\"#arch_spinlock\">arch_spinlock</a> *<a class=\"id\" href=\"#lock\">lock</a>);", 
"};", 
"", 
"<span class=\"comment\">/* This contains all the paravirt structures: we get a convenient</span>", 
"<span class=\"comment\"> * number for each function using the offset which we use to indicate</span>", 
"<span class=\"comment\"> * what to patch. */</span>", 
"struct <a class=\"id\" href=\"#paravirt_patch_template\">paravirt_patch_template</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pv_init_ops\">pv_init_ops</a> <a class=\"id\" href=\"#pv_init_ops\">pv_init_ops</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pv_time_ops\">pv_time_ops</a> <a class=\"id\" href=\"#pv_time_ops\">pv_time_ops</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pv_cpu_ops\">pv_cpu_ops</a> <a class=\"id\" href=\"#pv_cpu_ops\">pv_cpu_ops</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pv_irq_ops\">pv_irq_ops</a> <a class=\"id\" href=\"#pv_irq_ops\">pv_irq_ops</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pv_apic_ops\">pv_apic_ops</a> <a class=\"id\" href=\"#pv_apic_ops\">pv_apic_ops</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a> <a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pv_lock_ops\">pv_lock_ops</a> <a class=\"id\" href=\"#pv_lock_ops\">pv_lock_ops</a>;", 
"};", 
"", 
"extern struct <a class=\"id\" href=\"#pv_info\">pv_info</a> <a class=\"id\" href=\"#pv_info\">pv_info</a>;", 
"extern struct <a class=\"id\" href=\"#pv_init_ops\">pv_init_ops</a> <a class=\"id\" href=\"#pv_init_ops\">pv_init_ops</a>;", 
"extern struct <a class=\"id\" href=\"#pv_time_ops\">pv_time_ops</a> <a class=\"id\" href=\"#pv_time_ops\">pv_time_ops</a>;", 
"extern struct <a class=\"id\" href=\"#pv_cpu_ops\">pv_cpu_ops</a> <a class=\"id\" href=\"#pv_cpu_ops\">pv_cpu_ops</a>;", 
"extern struct <a class=\"id\" href=\"#pv_irq_ops\">pv_irq_ops</a> <a class=\"id\" href=\"#pv_irq_ops\">pv_irq_ops</a>;", 
"extern struct <a class=\"id\" href=\"#pv_apic_ops\">pv_apic_ops</a> <a class=\"id\" href=\"#pv_apic_ops\">pv_apic_ops</a>;", 
"extern struct <a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a> <a class=\"id\" href=\"#pv_mmu_ops\">pv_mmu_ops</a>;", 
"extern struct <a class=\"id\" href=\"#pv_lock_ops\">pv_lock_ops</a> <a class=\"id\" href=\"#pv_lock_ops\">pv_lock_ops</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PARAVIRT_PATCH\">PARAVIRT_PATCH</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#paravirt_patch_template\">paravirt_patch_template</a>, <a class=\"id\" href=\"#x\">x</a>) / sizeof(void *))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#paravirt_type\">paravirt_type</a>(<a class=\"id\" href=\"#op\">op</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#paravirt_typenum\">paravirt_typenum</a>] \"i\" (<a class=\"id\" href=\"#PARAVIRT_PATCH\">PARAVIRT_PATCH</a>(<a class=\"id\" href=\"#op\">op</a>)),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#paravirt_opptr\">paravirt_opptr</a>] \"i\" (&amp;(<a class=\"id\" href=\"#op\">op</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#paravirt_clobber\">paravirt_clobber</a>(<a class=\"id\" href=\"#clobber\">clobber</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#paravirt_clobber\">paravirt_clobber</a>] \"i\" (<a class=\"id\" href=\"#clobber\">clobber</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generate some code, and mark it as patchable by the</span>", 
"<span class=\"comment\"> * apply_paravirt() alternate instruction patcher.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_paravirt_alt\">_paravirt_alt</a>(<a class=\"id\" href=\"#insn_string\">insn_string</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#clobber\">clobber</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\"771:\\n\\t\" <a class=\"id\" href=\"#insn_string\">insn_string</a> \"\\n\" \"772:\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\".pushsection .parainstructions,\\\"a\\\"\\n\"<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_ASM_ALIGN\">_ASM_ALIGN</a> \"\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_ASM_PTR\">_ASM_PTR</a> \" 771b\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\"  .byte \" <a class=\"id\" href=\"#type\">type</a> \"\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\"  .byte 772b-771b\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\"  .short \" <a class=\"id\" href=\"#clobber\">clobber</a> \"\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\".popsection\\n\"", 
"", 
"<span class=\"comment\">/* Generate patchable code, with the default asm parameters. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#paravirt_alt\">paravirt_alt</a>(<a class=\"id\" href=\"#insn_string\">insn_string</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_paravirt_alt\">_paravirt_alt</a>(<a class=\"id\" href=\"#insn_string\">insn_string</a>, \"%c[paravirt_typenum]\", \"%c[paravirt_clobber]\")", 
"", 
"<span class=\"comment\">/* Simple instruction patching code. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEF_NATIVE\">DEF_NATIVE</a>(<a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#code\">code</a>) <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>extern const char <a class=\"id\" href=\"#start_\">start_</a>##<a class=\"id\" href=\"#ops\">ops</a>##<a class=\"id\" href=\"#_\">_</a>##<a class=\"id\" href=\"#name\">name</a>[], <a class=\"id\" href=\"#end_\">end_</a>##<a class=\"id\" href=\"#ops\">ops</a>##<a class=\"id\" href=\"#_\">_</a>##<a class=\"id\" href=\"#name\">name</a>[];<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"start_\" #<a class=\"id\" href=\"#ops\">ops</a> \"_\" #<a class=\"id\" href=\"#name\">name</a> \": \" <a class=\"id\" href=\"#code\">code</a> \"; end_\" #<a class=\"id\" href=\"#ops\">ops</a> \"_\" #<a class=\"id\" href=\"#name\">name</a> \":\")", 
"", 
"unsigned <a class=\"id\" href=\"#paravirt_patch_nop\">paravirt_patch_nop</a>(void);", 
"unsigned <a class=\"id\" href=\"#paravirt_patch_ident_32\">paravirt_patch_ident_32</a>(void *<a class=\"id\" href=\"#insnbuf\">insnbuf</a>, unsigned <a class=\"id\" href=\"#len\">len</a>);", 
"unsigned <a class=\"id\" href=\"#paravirt_patch_ident_64\">paravirt_patch_ident_64</a>(void *<a class=\"id\" href=\"#insnbuf\">insnbuf</a>, unsigned <a class=\"id\" href=\"#len\">len</a>);", 
"unsigned <a class=\"id\" href=\"#paravirt_patch_ignore\">paravirt_patch_ignore</a>(unsigned <a class=\"id\" href=\"#len\">len</a>);", 
"unsigned <a class=\"id\" href=\"#paravirt_patch_call\">paravirt_patch_call</a>(void *<a class=\"id\" href=\"#insnbuf\">insnbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const void *<a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tgt_clobbers\">tgt_clobbers</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#site_clobbers\">site_clobbers</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned <a class=\"id\" href=\"#len\">len</a>);", 
"unsigned <a class=\"id\" href=\"#paravirt_patch_jmp\">paravirt_patch_jmp</a>(void *<a class=\"id\" href=\"#insnbuf\">insnbuf</a>, const void *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned <a class=\"id\" href=\"#len\">len</a>);", 
"unsigned <a class=\"id\" href=\"#paravirt_patch_default\">paravirt_patch_default</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#clobbers\">clobbers</a>, void *<a class=\"id\" href=\"#insnbuf\">insnbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"unsigned <a class=\"id\" href=\"#paravirt_patch_insns\">paravirt_patch_insns</a>(void *<a class=\"id\" href=\"#insnbuf\">insnbuf</a>, unsigned <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#start\">start</a>, const char *<a class=\"id\" href=\"#end\">end</a>);", 
"", 
"unsigned <a class=\"id\" href=\"#native_patch\">native_patch</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#clobbers\">clobbers</a>, void *<a class=\"id\" href=\"#ibuf\">ibuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"int <a class=\"id\" href=\"#paravirt_disable_iospace\">paravirt_disable_iospace</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This generates an indirect call based on the operation type number.</span>", 
"<span class=\"comment\"> * The type number, computed in PARAVIRT_PATCH, is derived from the</span>", 
"<span class=\"comment\"> * offset into the paravirt_patch_template structure, and can therefore be</span>", 
"<span class=\"comment\"> * freely converted back into a structure offset.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PARAVIRT_CALL\">PARAVIRT_CALL</a><span class=\"ts\"/>\"call *%c[paravirt_opptr];\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These macros are intended to wrap calls through one of the paravirt</span>", 
"<span class=\"comment\"> * ops structs, so that they can be later identified and patched at</span>", 
"<span class=\"comment\"> * runtime.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Normally, a call to a pv_op function is a simple indirect call:</span>", 
"<span class=\"comment\"> * (pv_op_struct.operations)(args...).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unfortunately, this is a relatively slow operation for modern CPUs,</span>", 
"<span class=\"comment\"> * because it cannot necessarily determine what the destination</span>", 
"<span class=\"comment\"> * address is.  In this case, the address is a runtime constant, so at</span>", 
"<span class=\"comment\"> * the very least we can patch the call to e a simple direct call, or</span>", 
"<span class=\"comment\"> * ideally, patch an inline implementation into the callsite.  (Direct</span>", 
"<span class=\"comment\"> * calls are essentially free, because the call and return addresses</span>", 
"<span class=\"comment\"> * are completely predictable.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For i386, these macros rely on the standard gcc \"regparm(3)\" calling</span>", 
"<span class=\"comment\"> * convention, in which the first three arguments are placed in %eax,</span>", 
"<span class=\"comment\"> * %edx, %ecx (in that order), and the remaining arguments are placed</span>", 
"<span class=\"comment\"> * on the stack.  All caller-save registers (eax,edx,ecx) are expected</span>", 
"<span class=\"comment\"> * to be modified (either clobbered or used for return values).</span>", 
"<span class=\"comment\"> * X86_64, on the other hand, already specifies a register-based calling</span>", 
"<span class=\"comment\"> * conventions, returning at %rax, with parameteres going on %rdi, %rsi,</span>", 
"<span class=\"comment\"> * %rdx, and %rcx. Note that for this reason, x86_64 does not need any</span>", 
"<span class=\"comment\"> * special handling for dealing with 4 arguments, unlike i386.</span>", 
"<span class=\"comment\"> * However, x86_64 also have to clobber all caller saved registers, which</span>", 
"<span class=\"comment\"> * unfortunately, are quite a bit (r8 - r11)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The call instruction itself is marked by placing its start address</span>", 
"<span class=\"comment\"> * and size into the .parainstructions section, so that</span>", 
"<span class=\"comment\"> * apply_paravirt() in arch/i386/kernel/alternative.c can do the</span>", 
"<span class=\"comment\"> * appropriate patching under the control of the backend pv_init_ops</span>", 
"<span class=\"comment\"> * implementation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unfortunately there's no way to get gcc to generate the args setup</span>", 
"<span class=\"comment\"> * for the call, and then allow the call itself to be generated by an</span>", 
"<span class=\"comment\"> * inline asm.  Because of this, we must do the complete arg setup and</span>", 
"<span class=\"comment\"> * return value handling from within these macros.  This is fairly</span>", 
"<span class=\"comment\"> * cumbersome.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are 5 sets of PVOP_* macros for dealing with 0-4 arguments.</span>", 
"<span class=\"comment\"> * It could be extended to more arguments, but there would be little</span>", 
"<span class=\"comment\"> * to be gained from that.  For each number of arguments, there are</span>", 
"<span class=\"comment\"> * the two VCALL and CALL variants for void and non-void functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When there is a return value, the invoker of the macro must specify</span>", 
"<span class=\"comment\"> * the return type.  The macro then uses sizeof() on that type to</span>", 
"<span class=\"comment\"> * determine whether its a 32 or 64 bit value, and places the return</span>", 
"<span class=\"comment\"> * in the right register(s) (just %eax for 32-bit, and %edx:%eax for</span>", 
"<span class=\"comment\"> * 64-bit). For x86_64 machines, it just returns at %rax regardless of</span>", 
"<span class=\"comment\"> * the return value size.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 64-bit arguments are passed as a pair of adjacent 32-bit arguments</span>", 
"<span class=\"comment\"> * i386 also passes 64-bit arguments as a pair of adjacent 32-bit arguments</span>", 
"<span class=\"comment\"> * in low,high order</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Small structures are passed and returned in registers.  The macro</span>", 
"<span class=\"comment\"> * calling convention can't directly deal with this, so the wrapper</span>", 
"<span class=\"comment\"> * functions must do this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These PVOP_* macros are only defined within this header.  This</span>", 
"<span class=\"comment\"> * means that all uses must be wrapped in inline functions.  This also</span>", 
"<span class=\"comment\"> * makes sure the incoming and outgoing types are always correct.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_VCALL_ARGS\">PVOP_VCALL_ARGS</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__eax\">__eax</a> = <a class=\"id\" href=\"#__eax\">__eax</a>, <a class=\"id\" href=\"#__edx\">__edx</a> = <a class=\"id\" href=\"#__edx\">__edx</a>, <a class=\"id\" href=\"#__ecx\">__ecx</a> = <a class=\"id\" href=\"#__ecx\">__ecx</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL_ARGS\">PVOP_CALL_ARGS</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PVOP_VCALL_ARGS\">PVOP_VCALL_ARGS</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL_ARG1\">PVOP_CALL_ARG1</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/>\"a\" ((unsigned long)(<a class=\"id\" href=\"#x\">x</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL_ARG2\">PVOP_CALL_ARG2</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/>\"d\" ((unsigned long)(<a class=\"id\" href=\"#x\">x</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL_ARG3\">PVOP_CALL_ARG3</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/>\"c\" ((unsigned long)(<a class=\"id\" href=\"#x\">x</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_VCALL_CLOBBERS\">PVOP_VCALL_CLOBBERS</a><span class=\"ts\"/><span class=\"ts\"/>\"=a\" (<a class=\"id\" href=\"#__eax\">__eax</a>), \"=d\" (<a class=\"id\" href=\"#__edx\">__edx</a>),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"=c\" (<a class=\"id\" href=\"#__ecx\">__ecx</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL_CLOBBERS\">PVOP_CALL_CLOBBERS</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PVOP_VCALL_CLOBBERS\">PVOP_VCALL_CLOBBERS</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_VCALLEE_CLOBBERS\">PVOP_VCALLEE_CLOBBERS</a><span class=\"ts\"/><span class=\"ts\"/>\"=a\" (<a class=\"id\" href=\"#__eax\">__eax</a>), \"=d\" (<a class=\"id\" href=\"#__edx\">__edx</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALLEE_CLOBBERS\">PVOP_CALLEE_CLOBBERS</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PVOP_VCALLEE_CLOBBERS\">PVOP_VCALLEE_CLOBBERS</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXTRA_CLOBBERS\">EXTRA_CLOBBERS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VEXTRA_CLOBBERS\">VEXTRA_CLOBBERS</a>", 
"#else  <span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"<span class=\"comment\">/* [re]ax isn't an arg, but the return val */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_VCALL_ARGS\">PVOP_VCALL_ARGS</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__edi\">__edi</a> = <a class=\"id\" href=\"#__edi\">__edi</a>, <a class=\"id\" href=\"#__esi\">__esi</a> = <a class=\"id\" href=\"#__esi\">__esi</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__edx\">__edx</a> = <a class=\"id\" href=\"#__edx\">__edx</a>, <a class=\"id\" href=\"#__ecx\">__ecx</a> = <a class=\"id\" href=\"#__ecx\">__ecx</a>, <a class=\"id\" href=\"#__eax\">__eax</a> = <a class=\"id\" href=\"#__eax\">__eax</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL_ARGS\">PVOP_CALL_ARGS</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PVOP_VCALL_ARGS\">PVOP_VCALL_ARGS</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL_ARG1\">PVOP_CALL_ARG1</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/>\"D\" ((unsigned long)(<a class=\"id\" href=\"#x\">x</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL_ARG2\">PVOP_CALL_ARG2</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/>\"S\" ((unsigned long)(<a class=\"id\" href=\"#x\">x</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL_ARG3\">PVOP_CALL_ARG3</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/>\"d\" ((unsigned long)(<a class=\"id\" href=\"#x\">x</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL_ARG4\">PVOP_CALL_ARG4</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/>\"c\" ((unsigned long)(<a class=\"id\" href=\"#x\">x</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_VCALL_CLOBBERS\">PVOP_VCALL_CLOBBERS</a><span class=\"ts\"/>\"=D\" (<a class=\"id\" href=\"#__edi\">__edi</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"=S\" (<a class=\"id\" href=\"#__esi\">__esi</a>), \"=d\" (<a class=\"id\" href=\"#__edx\">__edx</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"=c\" (<a class=\"id\" href=\"#__ecx\">__ecx</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL_CLOBBERS\">PVOP_CALL_CLOBBERS</a><span class=\"ts\"/><a class=\"id\" href=\"#PVOP_VCALL_CLOBBERS\">PVOP_VCALL_CLOBBERS</a>, \"=a\" (<a class=\"id\" href=\"#__eax\">__eax</a>)", 
"", 
"<span class=\"comment\">/* void functions are still allowed [re]ax for scratch */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_VCALLEE_CLOBBERS\">PVOP_VCALLEE_CLOBBERS</a><span class=\"ts\"/>\"=a\" (<a class=\"id\" href=\"#__eax\">__eax</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALLEE_CLOBBERS\">PVOP_CALLEE_CLOBBERS</a><span class=\"ts\"/><a class=\"id\" href=\"#PVOP_VCALLEE_CLOBBERS\">PVOP_VCALLEE_CLOBBERS</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXTRA_CLOBBERS\">EXTRA_CLOBBERS</a><span class=\"ts\"/> , \"r8\", \"r9\", \"r10\", \"r11\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VEXTRA_CLOBBERS\">VEXTRA_CLOBBERS</a><span class=\"ts\"/> , \"rax\", \"r8\", \"r9\", \"r10\", \"r11\"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_X86_32 */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PARAVIRT_DEBUG\">CONFIG_PARAVIRT_DEBUG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_TEST_NULL\">PVOP_TEST_NULL</a>(<a class=\"id\" href=\"#op\">op</a>)<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#op\">op</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_TEST_NULL\">PVOP_TEST_NULL</a>(<a class=\"id\" href=\"#op\">op</a>)<span class=\"ts\"/>((void)<a class=\"id\" href=\"#op\">op</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#____PVOP_CALL\">____PVOP_CALL</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#clbr\">clbr</a>, <a class=\"id\" href=\"#call_clbr\">call_clbr</a>, <a class=\"id\" href=\"#extra_clbr\">extra_clbr</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#pre\">pre</a>, <a class=\"id\" href=\"#post\">post</a>, ...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rettype\">rettype</a> <a class=\"id\" href=\"#__ret\">__ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PVOP_CALL_ARGS\">PVOP_CALL_ARGS</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PVOP_TEST_NULL\">PVOP_TEST_NULL</a>(<a class=\"id\" href=\"#op\">op</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is 32-bit specific, but is okay in 64-bit */</span><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* since this condition will never hold */</span><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (sizeof(<a class=\"id\" href=\"#rettype\">rettype</a>) &gt; sizeof(unsigned long)) {<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#pre\">pre</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#paravirt_alt\">paravirt_alt</a>(<a class=\"id\" href=\"#PARAVIRT_CALL\">PARAVIRT_CALL</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#post\">post</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : <a class=\"id\" href=\"#call_clbr\">call_clbr</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : <a class=\"id\" href=\"#paravirt_type\">paravirt_type</a>(<a class=\"id\" href=\"#op\">op</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#paravirt_clobber\">paravirt_clobber</a>(<a class=\"id\" href=\"#clbr\">clbr</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : \"memory\", \"cc\" <a class=\"id\" href=\"#extra_clbr\">extra_clbr</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a> = (<a class=\"id\" href=\"#rettype\">rettype</a>)((((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#__edx\">__edx</a>) << 32) | <a class=\"id\" href=\"#__eax\">__eax</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#pre\">pre</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#paravirt_alt\">paravirt_alt</a>(<a class=\"id\" href=\"#PARAVIRT_CALL\">PARAVIRT_CALL</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#post\">post</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : <a class=\"id\" href=\"#call_clbr\">call_clbr</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : <a class=\"id\" href=\"#paravirt_type\">paravirt_type</a>(<a class=\"id\" href=\"#op\">op</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#paravirt_clobber\">paravirt_clobber</a>(<a class=\"id\" href=\"#clbr\">clbr</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : \"memory\", \"cc\" <a class=\"id\" href=\"#extra_clbr\">extra_clbr</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a> = (<a class=\"id\" href=\"#rettype\">rettype</a>)<a class=\"id\" href=\"#__eax\">__eax</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__PVOP_CALL\">__PVOP_CALL</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#pre\">pre</a>, <a class=\"id\" href=\"#post\">post</a>, ...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#____PVOP_CALL\">____PVOP_CALL</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#CLBR_ANY\">CLBR_ANY</a>, <a class=\"id\" href=\"#PVOP_CALL_CLOBBERS\">PVOP_CALL_CLOBBERS</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#EXTRA_CLOBBERS\">EXTRA_CLOBBERS</a>, <a class=\"id\" href=\"#pre\">pre</a>, <a class=\"id\" href=\"#post\">post</a>, ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__PVOP_CALLEESAVE\">__PVOP_CALLEESAVE</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#pre\">pre</a>, <a class=\"id\" href=\"#post\">post</a>, ...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#____PVOP_CALL\">____PVOP_CALL</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#CLBR_RET_REG\">CLBR_RET_REG</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#PVOP_CALLEE_CLOBBERS\">PVOP_CALLEE_CLOBBERS</a>, ,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#pre\">pre</a>, <a class=\"id\" href=\"#post\">post</a>, ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#____PVOP_VCALL\">____PVOP_VCALL</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#clbr\">clbr</a>, <a class=\"id\" href=\"#call_clbr\">call_clbr</a>, <a class=\"id\" href=\"#extra_clbr\">extra_clbr</a>, <a class=\"id\" href=\"#pre\">pre</a>, <a class=\"id\" href=\"#post\">post</a>, ...)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PVOP_VCALL_ARGS\">PVOP_VCALL_ARGS</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PVOP_TEST_NULL\">PVOP_TEST_NULL</a>(<a class=\"id\" href=\"#op\">op</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#pre\">pre</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#paravirt_alt\">paravirt_alt</a>(<a class=\"id\" href=\"#PARAVIRT_CALL\">PARAVIRT_CALL</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#post\">post</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : <a class=\"id\" href=\"#call_clbr\">call_clbr</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : <a class=\"id\" href=\"#paravirt_type\">paravirt_type</a>(<a class=\"id\" href=\"#op\">op</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#paravirt_clobber\">paravirt_clobber</a>(<a class=\"id\" href=\"#clbr\">clbr</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : \"memory\", \"cc\" <a class=\"id\" href=\"#extra_clbr\">extra_clbr</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__PVOP_VCALL\">__PVOP_VCALL</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#pre\">pre</a>, <a class=\"id\" href=\"#post\">post</a>, ...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#____PVOP_VCALL\">____PVOP_VCALL</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#CLBR_ANY\">CLBR_ANY</a>, <a class=\"id\" href=\"#PVOP_VCALL_CLOBBERS\">PVOP_VCALL_CLOBBERS</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#VEXTRA_CLOBBERS\">VEXTRA_CLOBBERS</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pre\">pre</a>, <a class=\"id\" href=\"#post\">post</a>, ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__PVOP_VCALLEESAVE\">__PVOP_VCALLEESAVE</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#pre\">pre</a>, <a class=\"id\" href=\"#post\">post</a>, ...)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#____PVOP_VCALL\">____PVOP_VCALL</a>(<a class=\"id\" href=\"#op\">op</a>.<a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#CLBR_RET_REG\">CLBR_RET_REG</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#PVOP_VCALLEE_CLOBBERS\">PVOP_VCALLEE_CLOBBERS</a>, ,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#pre\">pre</a>, <a class=\"id\" href=\"#post\">post</a>, ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>)", 
"", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL0\">PVOP_CALL0</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_CALL\">__PVOP_CALL</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, \"\", \"\")", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_VCALL0\">PVOP_VCALL0</a>(<a class=\"id\" href=\"#op\">op</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_VCALL\">__PVOP_VCALL</a>(<a class=\"id\" href=\"#op\">op</a>, \"\", \"\")", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALLEE0\">PVOP_CALLEE0</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_CALLEESAVE\">__PVOP_CALLEESAVE</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, \"\", \"\")", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_VCALLEE0\">PVOP_VCALLEE0</a>(<a class=\"id\" href=\"#op\">op</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_VCALLEESAVE\">__PVOP_VCALLEESAVE</a>(<a class=\"id\" href=\"#op\">op</a>, \"\", \"\")", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL1\">PVOP_CALL1</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#arg1\">arg1</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_CALL\">__PVOP_CALL</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, \"\", \"\", <a class=\"id\" href=\"#PVOP_CALL_ARG1\">PVOP_CALL_ARG1</a>(<a class=\"id\" href=\"#arg1\">arg1</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_VCALL1\">PVOP_VCALL1</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#arg1\">arg1</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_VCALL\">__PVOP_VCALL</a>(<a class=\"id\" href=\"#op\">op</a>, \"\", \"\", <a class=\"id\" href=\"#PVOP_CALL_ARG1\">PVOP_CALL_ARG1</a>(<a class=\"id\" href=\"#arg1\">arg1</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALLEE1\">PVOP_CALLEE1</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#arg1\">arg1</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_CALLEESAVE\">__PVOP_CALLEESAVE</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, \"\", \"\", <a class=\"id\" href=\"#PVOP_CALL_ARG1\">PVOP_CALL_ARG1</a>(<a class=\"id\" href=\"#arg1\">arg1</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_VCALLEE1\">PVOP_VCALLEE1</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#arg1\">arg1</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_VCALLEESAVE\">__PVOP_VCALLEESAVE</a>(<a class=\"id\" href=\"#op\">op</a>, \"\", \"\", <a class=\"id\" href=\"#PVOP_CALL_ARG1\">PVOP_CALL_ARG1</a>(<a class=\"id\" href=\"#arg1\">arg1</a>))", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL2\">PVOP_CALL2</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#arg1\">arg1</a>, <a class=\"id\" href=\"#arg2\">arg2</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_CALL\">__PVOP_CALL</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, \"\", \"\", <a class=\"id\" href=\"#PVOP_CALL_ARG1\">PVOP_CALL_ARG1</a>(<a class=\"id\" href=\"#arg1\">arg1</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PVOP_CALL_ARG2\">PVOP_CALL_ARG2</a>(<a class=\"id\" href=\"#arg2\">arg2</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_VCALL2\">PVOP_VCALL2</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#arg1\">arg1</a>, <a class=\"id\" href=\"#arg2\">arg2</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_VCALL\">__PVOP_VCALL</a>(<a class=\"id\" href=\"#op\">op</a>, \"\", \"\", <a class=\"id\" href=\"#PVOP_CALL_ARG1\">PVOP_CALL_ARG1</a>(<a class=\"id\" href=\"#arg1\">arg1</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#PVOP_CALL_ARG2\">PVOP_CALL_ARG2</a>(<a class=\"id\" href=\"#arg2\">arg2</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALLEE2\">PVOP_CALLEE2</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#arg1\">arg1</a>, <a class=\"id\" href=\"#arg2\">arg2</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_CALLEESAVE\">__PVOP_CALLEESAVE</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, \"\", \"\", <a class=\"id\" href=\"#PVOP_CALL_ARG1\">PVOP_CALL_ARG1</a>(<a class=\"id\" href=\"#arg1\">arg1</a>),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#PVOP_CALL_ARG2\">PVOP_CALL_ARG2</a>(<a class=\"id\" href=\"#arg2\">arg2</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_VCALLEE2\">PVOP_VCALLEE2</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#arg1\">arg1</a>, <a class=\"id\" href=\"#arg2\">arg2</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_VCALLEESAVE\">__PVOP_VCALLEESAVE</a>(<a class=\"id\" href=\"#op\">op</a>, \"\", \"\", <a class=\"id\" href=\"#PVOP_CALL_ARG1\">PVOP_CALL_ARG1</a>(<a class=\"id\" href=\"#arg1\">arg1</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#PVOP_CALL_ARG2\">PVOP_CALL_ARG2</a>(<a class=\"id\" href=\"#arg2\">arg2</a>))", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL3\">PVOP_CALL3</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#arg1\">arg1</a>, <a class=\"id\" href=\"#arg2\">arg2</a>, <a class=\"id\" href=\"#arg3\">arg3</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_CALL\">__PVOP_CALL</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, \"\", \"\", <a class=\"id\" href=\"#PVOP_CALL_ARG1\">PVOP_CALL_ARG1</a>(<a class=\"id\" href=\"#arg1\">arg1</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PVOP_CALL_ARG2\">PVOP_CALL_ARG2</a>(<a class=\"id\" href=\"#arg2\">arg2</a>), <a class=\"id\" href=\"#PVOP_CALL_ARG3\">PVOP_CALL_ARG3</a>(<a class=\"id\" href=\"#arg3\">arg3</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_VCALL3\">PVOP_VCALL3</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#arg1\">arg1</a>, <a class=\"id\" href=\"#arg2\">arg2</a>, <a class=\"id\" href=\"#arg3\">arg3</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_VCALL\">__PVOP_VCALL</a>(<a class=\"id\" href=\"#op\">op</a>, \"\", \"\", <a class=\"id\" href=\"#PVOP_CALL_ARG1\">PVOP_CALL_ARG1</a>(<a class=\"id\" href=\"#arg1\">arg1</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#PVOP_CALL_ARG2\">PVOP_CALL_ARG2</a>(<a class=\"id\" href=\"#arg2\">arg2</a>), <a class=\"id\" href=\"#PVOP_CALL_ARG3\">PVOP_CALL_ARG3</a>(<a class=\"id\" href=\"#arg3\">arg3</a>))", 
"", 
"<span class=\"comment\">/* This is the only difference in x86_64. We can make it much simpler */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL4\">PVOP_CALL4</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#arg1\">arg1</a>, <a class=\"id\" href=\"#arg2\">arg2</a>, <a class=\"id\" href=\"#arg3\">arg3</a>, <a class=\"id\" href=\"#arg4\">arg4</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_CALL\">__PVOP_CALL</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"push %[_arg4];\", \"lea 4(%%esp),%%esp;\",<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PVOP_CALL_ARG1\">PVOP_CALL_ARG1</a>(<a class=\"id\" href=\"#arg1\">arg1</a>), <a class=\"id\" href=\"#PVOP_CALL_ARG2\">PVOP_CALL_ARG2</a>(<a class=\"id\" href=\"#arg2\">arg2</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PVOP_CALL_ARG3\">PVOP_CALL_ARG3</a>(<a class=\"id\" href=\"#arg3\">arg3</a>), [<a class=\"id\" href=\"#_arg4\">_arg4</a>] \"mr\" ((<a class=\"id\" href=\"#u32\">u32</a>)(<a class=\"id\" href=\"#arg4\">arg4</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_VCALL4\">PVOP_VCALL4</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#arg1\">arg1</a>, <a class=\"id\" href=\"#arg2\">arg2</a>, <a class=\"id\" href=\"#arg3\">arg3</a>, <a class=\"id\" href=\"#arg4\">arg4</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_VCALL\">__PVOP_VCALL</a>(<a class=\"id\" href=\"#op\">op</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"push %[_arg4];\", \"lea 4(%%esp),%%esp;\",<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"0\" ((<a class=\"id\" href=\"#u32\">u32</a>)(<a class=\"id\" href=\"#arg1\">arg1</a>)), \"1\" ((<a class=\"id\" href=\"#u32\">u32</a>)(<a class=\"id\" href=\"#arg2\">arg2</a>)),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"2\" ((<a class=\"id\" href=\"#u32\">u32</a>)(<a class=\"id\" href=\"#arg3\">arg3</a>)), [<a class=\"id\" href=\"#_arg4\">_arg4</a>] \"mr\" ((<a class=\"id\" href=\"#u32\">u32</a>)(<a class=\"id\" href=\"#arg4\">arg4</a>)))", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_CALL4\">PVOP_CALL4</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#arg1\">arg1</a>, <a class=\"id\" href=\"#arg2\">arg2</a>, <a class=\"id\" href=\"#arg3\">arg3</a>, <a class=\"id\" href=\"#arg4\">arg4</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_CALL\">__PVOP_CALL</a>(<a class=\"id\" href=\"#rettype\">rettype</a>, <a class=\"id\" href=\"#op\">op</a>, \"\", \"\",<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PVOP_CALL_ARG1\">PVOP_CALL_ARG1</a>(<a class=\"id\" href=\"#arg1\">arg1</a>), <a class=\"id\" href=\"#PVOP_CALL_ARG2\">PVOP_CALL_ARG2</a>(<a class=\"id\" href=\"#arg2\">arg2</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PVOP_CALL_ARG3\">PVOP_CALL_ARG3</a>(<a class=\"id\" href=\"#arg3\">arg3</a>), <a class=\"id\" href=\"#PVOP_CALL_ARG4\">PVOP_CALL_ARG4</a>(<a class=\"id\" href=\"#arg4\">arg4</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PVOP_VCALL4\">PVOP_VCALL4</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#arg1\">arg1</a>, <a class=\"id\" href=\"#arg2\">arg2</a>, <a class=\"id\" href=\"#arg3\">arg3</a>, <a class=\"id\" href=\"#arg4\">arg4</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__PVOP_VCALL\">__PVOP_VCALL</a>(<a class=\"id\" href=\"#op\">op</a>, \"\", \"\",<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#PVOP_CALL_ARG1\">PVOP_CALL_ARG1</a>(<a class=\"id\" href=\"#arg1\">arg1</a>), <a class=\"id\" href=\"#PVOP_CALL_ARG2\">PVOP_CALL_ARG2</a>(<a class=\"id\" href=\"#arg2\">arg2</a>),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#PVOP_CALL_ARG3\">PVOP_CALL_ARG3</a>(<a class=\"id\" href=\"#arg3\">arg3</a>), <a class=\"id\" href=\"#PVOP_CALL_ARG4\">PVOP_CALL_ARG4</a>(<a class=\"id\" href=\"#arg4\">arg4</a>))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Lazy mode for batching updates / context switch */</span>", 
"enum <a class=\"id\" href=\"#paravirt_lazy_mode\">paravirt_lazy_mode</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PARAVIRT_LAZY_NONE\">PARAVIRT_LAZY_NONE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PARAVIRT_LAZY_MMU\">PARAVIRT_LAZY_MMU</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PARAVIRT_LAZY_CPU\">PARAVIRT_LAZY_CPU</a>,", 
"};", 
"", 
"enum <a class=\"id\" href=\"#paravirt_lazy_mode\">paravirt_lazy_mode</a> <a class=\"id\" href=\"#paravirt_get_lazy_mode\">paravirt_get_lazy_mode</a>(void);", 
"void <a class=\"id\" href=\"#paravirt_start_context_switch\">paravirt_start_context_switch</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>);", 
"void <a class=\"id\" href=\"#paravirt_end_context_switch\">paravirt_end_context_switch</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>);", 
"", 
"void <a class=\"id\" href=\"#paravirt_enter_lazy_mmu\">paravirt_enter_lazy_mmu</a>(void);", 
"void <a class=\"id\" href=\"#paravirt_leave_lazy_mmu\">paravirt_leave_lazy_mmu</a>(void);", 
"", 
"void <a class=\"id\" href=\"#_paravirt_nop\">_paravirt_nop</a>(void);", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#_paravirt_ident_32\">_paravirt_ident_32</a>(<a class=\"id\" href=\"#u32\">u32</a>);", 
"<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#_paravirt_ident_64\">_paravirt_ident_64</a>(<a class=\"id\" href=\"#u64\">u64</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#paravirt_nop\">paravirt_nop</a><span class=\"ts\"/>((void *)<a class=\"id\" href=\"#_paravirt_nop\">_paravirt_nop</a>)", 
"", 
"<span class=\"comment\">/* These all sit in the .parainstructions section to tell us what to patch. */</span>", 
"struct <a class=\"id\" href=\"#paravirt_patch_site\">paravirt_patch_site</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#instr\">instr</a>; <span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* original instructions */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#instrtype\">instrtype</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* type of this instruction */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#len\">len</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* length of original instruction */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#clobbers\">clobbers</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* what registers you may clobber */</span>", 
"};", 
"", 
"extern struct <a class=\"id\" href=\"#paravirt_patch_site\">paravirt_patch_site</a> <a class=\"id\" href=\"#__parainstructions\">__parainstructions</a>[],", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__parainstructions_end\">__parainstructions_end</a>[];", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* __ASSEMBLY__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _ASM_X86_PARAVIRT_TYPES_H */</span>", 
];
xr_frag_insert('l/b0/6ef110da4f3a18d22a5ed6d1b5e3055180a336.xr', __xr_tmp);
