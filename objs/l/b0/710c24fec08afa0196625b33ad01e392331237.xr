var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#linkage\">linkage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#signal\">signal</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioport\">ioport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timex\">timex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kprobes\">kprobes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#hw_irq\">hw_irq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#desc\">desc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#setup\">setup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#i8259\">i8259</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#traps\">traps</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ISA PIC or low IO-APIC triggered (INTA-cycle or APIC) interrupts:</span>", 
"<span class=\"comment\"> * (these are usually mapped to vectors 0x30-0x3f)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The IO-APIC gives us many more interrupt sources. Most of these</span>", 
"<span class=\"comment\"> * are unused but an SMP system is supposed to have enough memory ...</span>", 
"<span class=\"comment\"> * sometimes (mostly wrt. hw bugs) we get corrupted vectors all</span>", 
"<span class=\"comment\"> * across the spectrum, so we really want to be prepared to get all</span>", 
"<span class=\"comment\"> * of these. Plus, more powerful systems might have more than 64</span>", 
"<span class=\"comment\"> * IO-APIC registers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (these are usually mapped into the 0x30-0xff vector range)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note that on a 486, we don't want to do a SIGFPE on an irq13</span>", 
"<span class=\"comment\"> * as the irq is unreliable, and exception 16 works correctly</span>", 
"<span class=\"comment\"> * (ie as explained in the intel literature). On a 386, you</span>", 
"<span class=\"comment\"> * can't use exception 16 due to bad IBM design, so we have to</span>", 
"<span class=\"comment\"> * rely on the less exact irq13.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Careful.. Not only is IRQ13 unreliable, but it is also</span>", 
"<span class=\"comment\"> * leads to races. IBM designers who came up with it should</span>", 
"<span class=\"comment\"> * be shot.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#irqreturn_t\">irqreturn_t</a> <a class=\"id\" href=\"#math_error_irq\">math_error_irq</a>(int <a class=\"id\" href=\"#cpl\">cpl</a>, void *<a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(0, 0xF0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ignore_fpu_irq\">ignore_fpu_irq</a> || !<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#hard_math\">hard_math</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#IRQ_NONE\">IRQ_NONE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#math_error\">math_error</a>(<a class=\"id\" href=\"#get_irq_regs\">get_irq_regs</a>(), 0, 16);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#IRQ_HANDLED\">IRQ_HANDLED</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * New motherboards sometimes make IRQ 13 be a PCI interrupt,</span>", 
"<span class=\"comment\"> * so allow interrupt sharing.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#irqaction\">irqaction</a> <a class=\"id\" href=\"#fpu_irq\">fpu_irq</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#math_error_irq\">math_error_irq</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"fpu\",", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * IRQ2 is cascade interrupt to second interrupt controller</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#irqaction\">irqaction</a> <a class=\"id\" href=\"#irq2\">irq2</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#no_action\">no_action</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"cascade\",", 
"};", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(<a class=\"id\" href=\"#vector_irq_t\">vector_irq_t</a>, <a class=\"id\" href=\"#vector_irq\">vector_irq</a>) = {", 
"<span class=\"ts\"/>[0 ... <a class=\"id\" href=\"#NR_VECTORS\">NR_VECTORS</a> - 1] = -1,", 
"};", 
"", 
"int <a class=\"id\" href=\"#vector_used_by_percpu_irq\">vector_used_by_percpu_irq</a>(unsigned int <a class=\"id\" href=\"#vector\">vector</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#vector_irq\">vector_irq</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[<a class=\"id\" href=\"#vector\">vector</a>] != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_ISA_irqs\">init_ISA_irqs</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_bsp_APIC\">init_bsp_APIC</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#init\">init</a>(0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 16 old-style INTA-cycle interrupts:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#nr_legacy_irqs\">nr_legacy_irqs</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#irq_to_desc\">irq_to_desc</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#IRQ_DISABLED\">IRQ_DISABLED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#depth\">depth</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_irq_chip_and_handler_name\">set_irq_chip_and_handler_name</a>(<a class=\"id\" href=\"#i\">i</a>, &amp;<a class=\"id\" href=\"#i8259A_chip\">i8259A_chip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#handle_level_irq\">handle_level_irq</a>, \"XT\");", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_IRQ\">init_IRQ</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On cpu 0, Assign IRQ0_VECTOR..IRQ15_VECTOR's to IRQ 0..15.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If these IRQ's are handled by legacy interrupt-controllers like PIC,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then this configuration will likely be static after the boot. If</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * these IRQ's are handled by more mordern controllers like IO-APIC,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then this vector space can be freed and re-used dynamically as the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * irq's migrate etc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#nr_legacy_irqs\">nr_legacy_irqs</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#vector_irq\">vector_irq</a>, 0)[<a class=\"id\" href=\"#IRQ0_VECTOR\">IRQ0_VECTOR</a> + <a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#irqs\">irqs</a>.<a class=\"id\" href=\"#intr_init\">intr_init</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setup the vector to irq mappings.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#setup_vector_irq\">setup_vector_irq</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#irq\">irq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On most of the platforms, legacy PIC delivers the interrupts on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * boot cpu. But there are certain platforms where PIC interrupts are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * delivered to multiple cpu's. If the legacy IRQ is handled by the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * legacy PIC, for the new cpu that is coming online, setup the static</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * legacy vector to irq mapping:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#irq\">irq</a> = 0; <a class=\"id\" href=\"#irq\">irq</a> &lt; <a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#nr_legacy_irqs\">nr_legacy_irqs</a>; <a class=\"id\" href=\"#irq\">irq</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#vector_irq\">vector_irq</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[<a class=\"id\" href=\"#IRQ0_VECTOR\">IRQ0_VECTOR</a> + <a class=\"id\" href=\"#irq\">irq</a>] = <a class=\"id\" href=\"#irq\">irq</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__setup_vector_irq\">__setup_vector_irq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#smp_intr_init\">smp_intr_init</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>)", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The reschedule interrupt is a CPU-to-CPU reschedule-helper</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IPI, driven by wakeup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#RESCHEDULE_VECTOR\">RESCHEDULE_VECTOR</a>, <a class=\"id\" href=\"#reschedule_interrupt\">reschedule_interrupt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* IPIs for invalidation */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#INVALIDATE_TLB_VECTOR_START\">INVALIDATE_TLB_VECTOR_START</a>+0, <a class=\"id\" href=\"#invalidate_interrupt0\">invalidate_interrupt0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#INVALIDATE_TLB_VECTOR_START\">INVALIDATE_TLB_VECTOR_START</a>+1, <a class=\"id\" href=\"#invalidate_interrupt1\">invalidate_interrupt1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#INVALIDATE_TLB_VECTOR_START\">INVALIDATE_TLB_VECTOR_START</a>+2, <a class=\"id\" href=\"#invalidate_interrupt2\">invalidate_interrupt2</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#INVALIDATE_TLB_VECTOR_START\">INVALIDATE_TLB_VECTOR_START</a>+3, <a class=\"id\" href=\"#invalidate_interrupt3\">invalidate_interrupt3</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#INVALIDATE_TLB_VECTOR_START\">INVALIDATE_TLB_VECTOR_START</a>+4, <a class=\"id\" href=\"#invalidate_interrupt4\">invalidate_interrupt4</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#INVALIDATE_TLB_VECTOR_START\">INVALIDATE_TLB_VECTOR_START</a>+5, <a class=\"id\" href=\"#invalidate_interrupt5\">invalidate_interrupt5</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#INVALIDATE_TLB_VECTOR_START\">INVALIDATE_TLB_VECTOR_START</a>+6, <a class=\"id\" href=\"#invalidate_interrupt6\">invalidate_interrupt6</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#INVALIDATE_TLB_VECTOR_START\">INVALIDATE_TLB_VECTOR_START</a>+7, <a class=\"id\" href=\"#invalidate_interrupt7\">invalidate_interrupt7</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* IPI for generic function call */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#CALL_FUNCTION_VECTOR\">CALL_FUNCTION_VECTOR</a>, <a class=\"id\" href=\"#call_function_interrupt\">call_function_interrupt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* IPI for generic single function call */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#CALL_FUNCTION_SINGLE_VECTOR\">CALL_FUNCTION_SINGLE_VECTOR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_function_single_interrupt\">call_function_single_interrupt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Low priority IPI to cleanup after moving an irq */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(<a class=\"id\" href=\"#IRQ_MOVE_CLEANUP_VECTOR\">IRQ_MOVE_CLEANUP_VECTOR</a>, <a class=\"id\" href=\"#irq_move_cleanup_interrupt\">irq_move_cleanup_interrupt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#IRQ_MOVE_CLEANUP_VECTOR\">IRQ_MOVE_CLEANUP_VECTOR</a>, <a class=\"id\" href=\"#used_vectors\">used_vectors</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* IPI used for rebooting/stopping */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#REBOOT_VECTOR\">REBOOT_VECTOR</a>, <a class=\"id\" href=\"#reboot_interrupt\">reboot_interrupt</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#apic_intr_init\">apic_intr_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_intr_init\">smp_intr_init</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_THERMAL_VECTOR\">CONFIG_X86_THERMAL_VECTOR</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#THERMAL_APIC_VECTOR\">THERMAL_APIC_VECTOR</a>, <a class=\"id\" href=\"#thermal_interrupt\">thermal_interrupt</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_MCE_THRESHOLD\">CONFIG_X86_MCE_THRESHOLD</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#THRESHOLD_APIC_VECTOR\">THRESHOLD_APIC_VECTOR</a>, <a class=\"id\" href=\"#threshold_interrupt\">threshold_interrupt</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_MCE\">CONFIG_X86_MCE</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#MCE_SELF_VECTOR\">MCE_SELF_VECTOR</a>, <a class=\"id\" href=\"#mce_self_interrupt\">mce_self_interrupt</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>)", 
"<span class=\"ts\"/><span class=\"comment\">/* self generated IPI for local APIC timer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#LOCAL_TIMER_VECTOR\">LOCAL_TIMER_VECTOR</a>, <a class=\"id\" href=\"#apic_timer_interrupt\">apic_timer_interrupt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* IPI for X86 platform specific use */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#X86_PLATFORM_IPI_VECTOR\">X86_PLATFORM_IPI_VECTOR</a>, <a class=\"id\" href=\"#x86_platform_ipi\">x86_platform_ipi</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* IPI vectors for APIC spurious and error interrupts */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#SPURIOUS_APIC_VECTOR\">SPURIOUS_APIC_VECTOR</a>, <a class=\"id\" href=\"#spurious_interrupt\">spurious_interrupt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#ERROR_APIC_VECTOR\">ERROR_APIC_VECTOR</a>, <a class=\"id\" href=\"#error_interrupt\">error_interrupt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Performance monitoring interrupts: */</span>", 
"# <a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_EVENTS\">CONFIG_PERF_EVENTS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#LOCAL_PENDING_VECTOR\">LOCAL_PENDING_VECTOR</a>, <a class=\"id\" href=\"#perf_pending_interrupt\">perf_pending_interrupt</a>);", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#native_init_IRQ\">native_init_IRQ</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Execute any quirks before the call gates are initialised: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#irqs\">irqs</a>.<a class=\"id\" href=\"#pre_vector_init\">pre_vector_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_intr_init\">apic_intr_init</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Cover the whole vector space, no vector can escape</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * us. (some of these will be overridden and become</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 'special' SMP interrupts)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#FIRST_EXTERNAL_VECTOR\">FIRST_EXTERNAL_VECTOR</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_VECTORS\">NR_VECTORS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* IA32_SYSCALL_VECTOR could be used in trap_init already. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#used_vectors\">used_vectors</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_intr_gate\">set_intr_gate</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#interrupt\">interrupt</a>[<a class=\"id\" href=\"#i\">i</a>-<a class=\"id\" href=\"#FIRST_EXTERNAL_VECTOR\">FIRST_EXTERNAL_VECTOR</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_ioapic\">acpi_ioapic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_irq\">setup_irq</a>(2, &amp;<a class=\"id\" href=\"#irq2\">irq2</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * External FPU? Set up irq13 if so, for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * original braindamaged IBM FERR coupling.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#hard_math\">hard_math</a> && !<a class=\"id\" href=\"#cpu_has_fpu\">cpu_has_fpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_irq\">setup_irq</a>(<a class=\"id\" href=\"#FPU_IRQ\">FPU_IRQ</a>, &amp;<a class=\"id\" href=\"#fpu_irq\">fpu_irq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_ctx_init\">irq_ctx_init</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
];
xr_frag_insert('l/b0/710c24fec08afa0196625b33ad01e392331237.xr', __xr_tmp);
