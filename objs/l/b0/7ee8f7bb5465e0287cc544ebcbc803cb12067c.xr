var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * INET<span class=\"ts\"/><span class=\"ts\"/>An implementation of the TCP/IP protocol suite for the LINUX</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>operating system.  INET is implemented using the  BSD Socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>interface as the means of communication with the user level.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>The User Datagram Protocol (UDP).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:<span class=\"ts\"/>Ross Biro</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Fred N. van Kempen, &lt;waltje@uWalt.NL.Mugnet.ORG&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Arnt Gulbrandsen, &lt;agulbra@nvg.unit.no&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox, &lt;alan@lxorguk.ukuu.org.uk&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Hirokazu Takahashi, &lt;taka@valinux.co.jp&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fixes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>verify_area() calls</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>: <span class=\"ts\"/>stopped close while in use off icmp</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>messages. Not a fix but a botch that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for udp at least is 'valid'.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Fixed icmp handling properly</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>: <span class=\"ts\"/>Correct error for oversized datagrams</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Tidied select() semantics.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>udp_err() fixed properly, also now</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>select and read wake correctly on errors</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>udp_send verify_area moved to avoid mem leak</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>UDP can count its memory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>send to an unknown connection causes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>an ECONNREFUSED off the icmp, but</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>does NOT close.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Switched to new sk_buff handlers. No more backlog!</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Using generic datagram code. Even smaller and the PEEK</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>bug no longer crashes it.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Fred Van Kempen<span class=\"ts\"/>: <span class=\"ts\"/>Net2e support for sk-&gt;broadcast.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Uses skb_free_datagram</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Added get/set sockopt support.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Broadcasting without option set returns EACCES.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>No wakeup calls. Instead we now use the callbacks.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Use ip_tos and ip_ttl</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>SNMP Mibs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>MSG_DONTROUTE, and 0.0.0.0 support.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Matt Dillon<span class=\"ts\"/>:<span class=\"ts\"/>UDP length checks.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Smarter af_inet used properly.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Use new kernel side addressing.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Incorrect return on truncated datagram receive.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Arnt Gulbrandsen <span class=\"ts\"/>:<span class=\"ts\"/>New udp_send and stuff</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Cache last socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Route cache</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Jon Peatfield<span class=\"ts\"/>:<span class=\"ts\"/>Minor efficiency fix to sendto().</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Mike Shaver<span class=\"ts\"/>:<span class=\"ts\"/>RFC1122 checks.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>:<span class=\"ts\"/>Nonblocking error fix.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Willy Konynenberg<span class=\"ts\"/>:<span class=\"ts\"/>Transparent proxying support.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Mike McLagan<span class=\"ts\"/>:<span class=\"ts\"/>Routing by source</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>David S. Miller<span class=\"ts\"/>:<span class=\"ts\"/>New socket lookup architecture.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Last socket cache retained as it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>does have a high hit rate.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Olaf Kirch<span class=\"ts\"/>:<span class=\"ts\"/>Don't linearise iovec on sendmsg.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Andi Kleen<span class=\"ts\"/>:<span class=\"ts\"/>Some cleanups, cache destination entry</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for connect.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Vitaly E. Lavrov<span class=\"ts\"/>:<span class=\"ts\"/>Transparent proxy revived after year coma.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Melvin Smith<span class=\"ts\"/>:<span class=\"ts\"/>Check msg_name not msg_namelen in sendto(),</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return ENOTCONN for unconnected sockets (POSIX)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Janos Farkas<span class=\"ts\"/>:<span class=\"ts\"/>don't deliver multi/broadcasts to a different</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>bound-to-device socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Hirokazu Takahashi<span class=\"ts\"/>:<span class=\"ts\"/>HW checksumming for outgoing UDP</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>datagrams.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Hirokazu Takahashi<span class=\"ts\"/>:<span class=\"ts\"/>sendfile() on UDP works now.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Arnaldo C. Melo :<span class=\"ts\"/>convert /proc/net/udp to seq_file</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>YOSHIFUJI Hideaki @USAGI and:<span class=\"ts\"/>Support IPV6_V6ONLY socket option, which</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Alexey Kuznetsov:<span class=\"ts\"/><span class=\"ts\"/>allow both IPv4 and IPv6 sockets to bind</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>a single port at the same time.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Derek Atkins &lt;derek@ihtfp.com&gt;: Add Encapulation Support</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>James Chapman<span class=\"ts\"/><span class=\"ts\"/>:<span class=\"ts\"/>Add L2TP encapsulation type.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#ioctls\">ioctls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fcntl\">fcntl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sockios\">sockios</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#igmp\">igmp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#inet\">inet</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#tcp_states\">tcp_states</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#net_namespace\">net_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#icmp\">icmp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#route\">route</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#checksum\">checksum</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#xfrm\">xfrm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"udp_impl.h\"", 
"", 
"struct <a class=\"id\" href=\"#udp_table\">udp_table</a> <a class=\"id\" href=\"#udp_table\">udp_table</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#udp_table\">udp_table</a>);", 
"", 
"int <a class=\"id\" href=\"#sysctl_udp_mem\">sysctl_udp_mem</a>[3] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sysctl_udp_mem\">sysctl_udp_mem</a>);", 
"", 
"int <a class=\"id\" href=\"#sysctl_udp_rmem_min\">sysctl_udp_rmem_min</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sysctl_udp_rmem_min\">sysctl_udp_rmem_min</a>);", 
"", 
"int <a class=\"id\" href=\"#sysctl_udp_wmem_min\">sysctl_udp_wmem_min</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sysctl_udp_wmem_min\">sysctl_udp_wmem_min</a>);", 
"", 
"<a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#udp_memory_allocated\">udp_memory_allocated</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#udp_memory_allocated\">udp_memory_allocated</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_UDP_PORTS\">MAX_UDP_PORTS</a> 65536", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PORTS_PER_CHAIN\">PORTS_PER_CHAIN</a> (<a class=\"id\" href=\"#MAX_UDP_PORTS\">MAX_UDP_PORTS</a> / <a class=\"id\" href=\"#UDP_HTABLE_SIZE_MIN\">UDP_HTABLE_SIZE_MIN</a>)", 
"", 
"static int <a class=\"id\" href=\"#udp_lib_lport_inuse\">udp_lib_lport_inuse</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#num\">num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#udp_hslot\">udp_hslot</a> *<a class=\"id\" href=\"#hslot\">hslot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int (*<a class=\"id\" href=\"#saddr_comp\">saddr_comp</a>)(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk1\">sk1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk2\">sk2</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#log\">log</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk2\">sk2</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_nulls_for_each\">sk_nulls_for_each</a>(<a class=\"id\" href=\"#sk2\">sk2</a>, <a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk2\">sk2</a>), <a class=\"id\" href=\"#net\">net</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sk2\">sk2</a> != <a class=\"id\" href=\"#sk\">sk</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#bitmap\">bitmap</a> || <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk2\">sk2</a>)-><a class=\"id\" href=\"#udp_port_hash\">udp_port_hash</a> == <a class=\"id\" href=\"#num\">num</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#sk2\">sk2</a>-><a class=\"id\" href=\"#sk_reuse\">sk_reuse</a> || !<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_reuse\">sk_reuse</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#sk2\">sk2</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> || !<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#sk2\">sk2</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> == <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (*<a class=\"id\" href=\"#saddr_comp\">saddr_comp</a>)(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#sk2\">sk2</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bitmap\">bitmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk2\">sk2</a>)-><a class=\"id\" href=\"#udp_port_hash\">udp_port_hash</a> >> <a class=\"id\" href=\"#log\">log</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note: we still hold spinlock of primary hash chain, so no other writer</span>", 
"<span class=\"comment\"> * can insert/delete a socket with local_port == num</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#udp_lib_lport_inuse2\">udp_lib_lport_inuse2</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#num\">num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#udp_hslot\">udp_hslot</a> *<a class=\"id\" href=\"#hslot2\">hslot2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int (*<a class=\"id\" href=\"#saddr_comp\">saddr_comp</a>)(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk1\">sk1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk2\">sk2</a>))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk2\">sk2</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udp_portaddr_for_each_entry\">udp_portaddr_for_each_entry</a>(<a class=\"id\" href=\"#sk2\">sk2</a>, <a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk2\">sk2</a>), <a class=\"id\" href=\"#net\">net</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sk2\">sk2</a> != <a class=\"id\" href=\"#sk\">sk</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk2\">sk2</a>)-><a class=\"id\" href=\"#udp_port_hash\">udp_port_hash</a> == <a class=\"id\" href=\"#num\">num</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#sk2\">sk2</a>-><a class=\"id\" href=\"#sk_reuse\">sk_reuse</a> || !<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_reuse\">sk_reuse</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#sk2\">sk2</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> || !<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#sk2\">sk2</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> == <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (*<a class=\"id\" href=\"#saddr_comp\">saddr_comp</a>)(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#sk2\">sk2</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *  udp_lib_get_port  -  UDP/-Lite port lookup for IPv4 and IPv6</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  @sk:          socket struct in question</span>", 
"<span class=\"comment\"> *  @snum:        port number to look up</span>", 
"<span class=\"comment\"> *  @saddr_comp:  AF-dependent comparison of bound local IP addresses</span>", 
"<span class=\"comment\"> *  @hash2_nulladdr: AF-dependant hash value in secondary hash chains,</span>", 
"<span class=\"comment\"> *                   with NULL address</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#udp_lib_get_port\">udp_lib_get_port</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, unsigned short <a class=\"id\" href=\"#snum\">snum</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       int (*<a class=\"id\" href=\"#saddr_comp\">saddr_comp</a>)(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk1\">sk1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk2\">sk2</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#hash2_nulladdr\">hash2_nulladdr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_hslot\">udp_hslot</a> *<a class=\"id\" href=\"#hslot\">hslot</a>, *<a class=\"id\" href=\"#hslot2\">hslot2</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_table\">udp_table</a> *<a class=\"id\" href=\"#udptable\">udptable</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a>-><a class=\"id\" href=\"#h\">h</a>.<a class=\"id\" href=\"#udp_table\">udp_table</a>;", 
"<span class=\"ts\"/>int    <a class=\"id\" href=\"#error\">error</a> = 1;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#snum\">snum</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#low\">low</a>, <a class=\"id\" href=\"#high\">high</a>, <a class=\"id\" href=\"#remaining\">remaining</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#rand\">rand</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#PORTS_PER_CHAIN\">PORTS_PER_CHAIN</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_get_local_port_range\">inet_get_local_port_range</a>(&amp;<a class=\"id\" href=\"#low\">low</a>, &amp;<a class=\"id\" href=\"#high\">high</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remaining\">remaining</a> = (<a class=\"id\" href=\"#high\">high</a> - <a class=\"id\" href=\"#low\">low</a>) + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rand\">rand</a> = <a class=\"id\" href=\"#net_random\">net_random</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = (((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#rand\">rand</a> * <a class=\"id\" href=\"#remaining\">remaining</a>) >> 32) + <a class=\"id\" href=\"#low\">low</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * force rand to be an odd multiple of UDP_HTABLE_SIZE</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rand\">rand</a> = (<a class=\"id\" href=\"#rand\">rand</a> | 1) * (<a class=\"id\" href=\"#udptable\">udptable</a>-><a class=\"id\" href=\"#mask\">mask</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#first\">first</a> + <a class=\"id\" href=\"#udptable\">udptable</a>-><a class=\"id\" href=\"#mask\">mask</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot\">hslot</a> = <a class=\"id\" href=\"#udp_hashslot\">udp_hashslot</a>(<a class=\"id\" href=\"#udptable\">udptable</a>, <a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#first\">first</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#PORTS_PER_CHAIN\">PORTS_PER_CHAIN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udp_lib_lport_inuse\">udp_lib_lport_inuse</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#snum\">snum</a>, <a class=\"id\" href=\"#hslot\">hslot</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#saddr_comp\">saddr_comp</a>, <a class=\"id\" href=\"#udptable\">udptable</a>-><a class=\"id\" href=\"#log\">log</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snum\">snum</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Iterate on all possible values of snum for this hash.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Using steps of an odd multiple of UDP_HTABLE_SIZE</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * give us randomization and full range coverage.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#low\">low</a> <= <a class=\"id\" href=\"#snum\">snum</a> && <a class=\"id\" href=\"#snum\">snum</a> <= <a class=\"id\" href=\"#high\">high</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#snum\">snum</a> >> <a class=\"id\" href=\"#udptable\">udptable</a>-><a class=\"id\" href=\"#log\">log</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#inet_is_reserved_local_port\">inet_is_reserved_local_port</a>(<a class=\"id\" href=\"#snum\">snum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snum\">snum</a> += <a class=\"id\" href=\"#rand\">rand</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#snum\">snum</a> != <a class=\"id\" href=\"#first\">first</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (++<a class=\"id\" href=\"#first\">first</a> != <a class=\"id\" href=\"#last\">last</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot\">hslot</a> = <a class=\"id\" href=\"#udp_hashslot\">udp_hashslot</a>(<a class=\"id\" href=\"#udptable\">udptable</a>, <a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#snum\">snum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#count\">count</a> &gt; 10) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#exist\">exist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#slot2\">slot2</a> = <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#udp_portaddr_hash\">udp_portaddr_hash</a> ^ <a class=\"id\" href=\"#snum\">snum</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot2\">slot2</a>          &= <a class=\"id\" href=\"#udptable\">udptable</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash2_nulladdr\">hash2_nulladdr</a> &= <a class=\"id\" href=\"#udptable\">udptable</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot2\">hslot2</a> = <a class=\"id\" href=\"#udp_hashslot2\">udp_hashslot2</a>(<a class=\"id\" href=\"#udptable\">udptable</a>, <a class=\"id\" href=\"#slot2\">slot2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#scan_primary_hash\">scan_primary_hash</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exist\">exist</a> = <a class=\"id\" href=\"#udp_lib_lport_inuse2\">udp_lib_lport_inuse2</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#snum\">snum</a>, <a class=\"id\" href=\"#hslot2\">hslot2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#saddr_comp\">saddr_comp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#exist\">exist</a> && (<a class=\"id\" href=\"#hash2_nulladdr\">hash2_nulladdr</a> != <a class=\"id\" href=\"#slot2\">slot2</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot2\">hslot2</a> = <a class=\"id\" href=\"#udp_hashslot2\">udp_hashslot2</a>(<a class=\"id\" href=\"#udptable\">udptable</a>, <a class=\"id\" href=\"#hash2_nulladdr\">hash2_nulladdr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exist\">exist</a> = <a class=\"id\" href=\"#udp_lib_lport_inuse2\">udp_lib_lport_inuse2</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#snum\">snum</a>, <a class=\"id\" href=\"#hslot2\">hslot2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#saddr_comp\">saddr_comp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#exist\">exist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_unlock\">fail_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#scan_primary_hash\">scan_primary_hash</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#udp_lib_lport_inuse\">udp_lib_lport_inuse</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#snum\">snum</a>, <a class=\"id\" href=\"#hslot\">hslot</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saddr_comp\">saddr_comp</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_unlock\">fail_unlock</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#inet_num\">inet_num</a> = <a class=\"id\" href=\"#snum\">snum</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#udp_port_hash\">udp_port_hash</a> = <a class=\"id\" href=\"#snum\">snum</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#udp_portaddr_hash\">udp_portaddr_hash</a> ^= <a class=\"id\" href=\"#snum\">snum</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk_unhashed\">sk_unhashed</a>(<a class=\"id\" href=\"#sk\">sk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_nulls_add_node_rcu\">sk_nulls_add_node_rcu</a>(<a class=\"id\" href=\"#sk\">sk</a>, &amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_prot_inuse_add\">sock_prot_inuse_add</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot2\">hslot2</a> = <a class=\"id\" href=\"#udp_hashslot2\">udp_hashslot2</a>(<a class=\"id\" href=\"#udptable\">udptable</a>, <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#udp_portaddr_hash\">udp_portaddr_hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_nulls_add_head_rcu\">hlist_nulls_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#udp_portaddr_node\">udp_portaddr_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<a class=\"id\" href=\"#fail_unlock\">fail_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#udp_lib_get_port\">udp_lib_get_port</a>);", 
"", 
"static int <a class=\"id\" href=\"#ipv4_rcv_saddr_equal\">ipv4_rcv_saddr_equal</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk1\">sk1</a>, const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk2\">sk2</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_sock\">inet_sock</a> *<a class=\"id\" href=\"#inet1\">inet1</a> = <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk1\">sk1</a>), *<a class=\"id\" href=\"#inet2\">inet2</a> = <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk2\">sk2</a>);", 
"", 
"<span class=\"ts\"/>return <span class=\"ts\"/>(!<a class=\"id\" href=\"#ipv6_only_sock\">ipv6_only_sock</a>(<a class=\"id\" href=\"#sk2\">sk2</a>)  &&", 
"<span class=\"ts\"/><span class=\"ts\"/> (!<a class=\"id\" href=\"#inet1\">inet1</a>-><a class=\"id\" href=\"#inet_rcv_saddr\">inet_rcv_saddr</a> || !<a class=\"id\" href=\"#inet2\">inet2</a>-><a class=\"id\" href=\"#inet_rcv_saddr\">inet_rcv_saddr</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#inet1\">inet1</a>-><a class=\"id\" href=\"#inet_rcv_saddr\">inet_rcv_saddr</a> == <a class=\"id\" href=\"#inet2\">inet2</a>-><a class=\"id\" href=\"#inet_rcv_saddr\">inet_rcv_saddr</a>));", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#udp4_portaddr_hash\">udp4_portaddr_hash</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#port\">port</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#jhash_1word\">jhash_1word</a>((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#net_hash_mix\">net_hash_mix</a>(<a class=\"id\" href=\"#net\">net</a>)) ^ <a class=\"id\" href=\"#port\">port</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#udp_v4_get_port\">udp_v4_get_port</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, unsigned short <a class=\"id\" href=\"#snum\">snum</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hash2_nulladdr\">hash2_nulladdr</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udp4_portaddr_hash\">udp4_portaddr_hash</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#htonl\">htonl</a>(<a class=\"id\" href=\"#INADDR_ANY\">INADDR_ANY</a>), <a class=\"id\" href=\"#snum\">snum</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hash2_partial\">hash2_partial</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udp4_portaddr_hash\">udp4_portaddr_hash</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#inet_rcv_saddr\">inet_rcv_saddr</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* precompute partial secondary hash */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#udp_portaddr_hash\">udp_portaddr_hash</a> = <a class=\"id\" href=\"#hash2_partial\">hash2_partial</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#udp_lib_get_port\">udp_lib_get_port</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#snum\">snum</a>, <a class=\"id\" href=\"#ipv4_rcv_saddr_equal\">ipv4_rcv_saddr_equal</a>, <a class=\"id\" href=\"#hash2_nulladdr\">hash2_nulladdr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#compute_score\">compute_score</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned short <a class=\"id\" href=\"#hnum\">hnum</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#sport\">sport</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>, int <a class=\"id\" href=\"#dif\">dif</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#score\">score</a> = -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#net\">net</a>) && <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#udp_port_hash\">udp_port_hash</a> == <a class=\"id\" href=\"#hnum\">hnum</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#ipv6_only_sock\">ipv6_only_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_sock\">inet_sock</a> *<a class=\"id\" href=\"#inet\">inet</a> = <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#score\">score</a> = (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a> == <a class=\"id\" href=\"#PF_INET\">PF_INET</a> ? 1 : 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_rcv_saddr\">inet_rcv_saddr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_rcv_saddr\">inet_rcv_saddr</a> != <a class=\"id\" href=\"#daddr\">daddr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#score\">score</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_daddr\">inet_daddr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_daddr\">inet_daddr</a> != <a class=\"id\" href=\"#saddr\">saddr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#score\">score</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_dport\">inet_dport</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_dport\">inet_dport</a> != <a class=\"id\" href=\"#sport\">sport</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#score\">score</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> != <a class=\"id\" href=\"#dif\">dif</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#score\">score</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#score\">score</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In this second variant, we check (daddr, dport) matches (inet_rcv_sadd, inet_num)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SCORE2_MAX\">SCORE2_MAX</a> (1 + 2 + 2 + 2)", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#compute_score2\">compute_score2</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>, unsigned int <a class=\"id\" href=\"#hnum\">hnum</a>, int <a class=\"id\" href=\"#dif\">dif</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#score\">score</a> = -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#net\">net</a>) && !<a class=\"id\" href=\"#ipv6_only_sock\">ipv6_only_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_sock\">inet_sock</a> *<a class=\"id\" href=\"#inet\">inet</a> = <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_rcv_saddr\">inet_rcv_saddr</a> != <a class=\"id\" href=\"#daddr\">daddr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_num\">inet_num</a> != <a class=\"id\" href=\"#hnum\">hnum</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#score\">score</a> = (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_family\">sk_family</a> == <a class=\"id\" href=\"#PF_INET\">PF_INET</a> ? 1 : 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_daddr\">inet_daddr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_daddr\">inet_daddr</a> != <a class=\"id\" href=\"#saddr\">saddr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#score\">score</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_dport\">inet_dport</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_dport\">inet_dport</a> != <a class=\"id\" href=\"#sport\">sport</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#score\">score</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> != <a class=\"id\" href=\"#dif\">dif</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#score\">score</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#score\">score</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/* called with read_rcu_lock() */</span>", 
"static struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#udp4_lib_lookup2\">udp4_lib_lookup2</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>, unsigned int <a class=\"id\" href=\"#hnum\">hnum</a>, int <a class=\"id\" href=\"#dif\">dif</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_hslot\">udp_hslot</a> *<a class=\"id\" href=\"#hslot2\">hslot2</a>, unsigned int <a class=\"id\" href=\"#slot2\">slot2</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, *<a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#score\">score</a>, <a class=\"id\" href=\"#badness\">badness</a>;", 
"", 
"<a class=\"id\" href=\"#begin\">begin</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#badness\">badness</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udp_portaddr_for_each_entry_rcu\">udp_portaddr_for_each_entry_rcu</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#score\">score</a> = <a class=\"id\" href=\"#compute_score2\">compute_score2</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#hnum\">hnum</a>, <a class=\"id\" href=\"#dif\">dif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#score\">score</a> &gt; <a class=\"id\" href=\"#badness\">badness</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#badness\">badness</a> = <a class=\"id\" href=\"#score\">score</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#score\">score</a> == <a class=\"id\" href=\"#SCORE2_MAX\">SCORE2_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#exact_match\">exact_match</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the nulls value we got at the end of this lookup is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not the expected one, we must restart lookup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We probably met an item that was moved to another chain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_nulls_value\">get_nulls_value</a>(<a class=\"id\" href=\"#node\">node</a>) != <a class=\"id\" href=\"#slot2\">slot2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#begin\">begin</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>) {", 
"<a class=\"id\" href=\"#exact_match\">exact_match</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#atomic_inc_not_zero\">atomic_inc_not_zero</a>(&amp;<a class=\"id\" href=\"#result\">result</a>-><a class=\"id\" href=\"#sk_refcnt\">sk_refcnt</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#compute_score2\">compute_score2</a>(<a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#hnum\">hnum</a>, <a class=\"id\" href=\"#dif\">dif</a>) &lt; <a class=\"id\" href=\"#badness\">badness</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_put\">sock_put</a>(<a class=\"id\" href=\"#result\">result</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#begin\">begin</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/* UDP is nearly always wildcards out the wazoo, it makes no sense to try</span>", 
"<span class=\"comment\"> * harder than this. -DaveM</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#__udp4_lib_lookup\">__udp4_lib_lookup</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#sport\">sport</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#dif\">dif</a>, struct <a class=\"id\" href=\"#udp_table\">udp_table</a> *<a class=\"id\" href=\"#udptable\">udptable</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, *<a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#hnum\">hnum</a> = <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#dport\">dport</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hash2\">hash2</a>, <a class=\"id\" href=\"#slot2\">slot2</a>, <a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#udp_hashfn\">udp_hashfn</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#hnum\">hnum</a>, <a class=\"id\" href=\"#udptable\">udptable</a>-><a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_hslot\">udp_hslot</a> *<a class=\"id\" href=\"#hslot2\">hslot2</a>, *<a class=\"id\" href=\"#hslot\">hslot</a> = &amp;<a class=\"id\" href=\"#udptable\">udptable</a>-><a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#slot\">slot</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#score\">score</a>, <a class=\"id\" href=\"#badness\">badness</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#count\">count</a> &gt; 10) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash2\">hash2</a> = <a class=\"id\" href=\"#udp4_portaddr_hash\">udp4_portaddr_hash</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#hnum\">hnum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot2\">slot2</a> = <a class=\"id\" href=\"#hash2\">hash2</a> &amp; <a class=\"id\" href=\"#udptable\">udptable</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot2\">hslot2</a> = &amp;<a class=\"id\" href=\"#udptable\">udptable</a>-><a class=\"id\" href=\"#hash2\">hash2</a>[<a class=\"id\" href=\"#slot2\">slot2</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#begin\">begin</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#udp4_lib_lookup2\">udp4_lib_lookup2</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#hnum\">hnum</a>, <a class=\"id\" href=\"#dif\">dif</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#hslot2\">hslot2</a>, <a class=\"id\" href=\"#slot2\">slot2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash2\">hash2</a> = <a class=\"id\" href=\"#udp4_portaddr_hash\">udp4_portaddr_hash</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#htonl\">htonl</a>(<a class=\"id\" href=\"#INADDR_ANY\">INADDR_ANY</a>), <a class=\"id\" href=\"#hnum\">hnum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot2\">slot2</a> = <a class=\"id\" href=\"#hash2\">hash2</a> &amp; <a class=\"id\" href=\"#udptable\">udptable</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot2\">hslot2</a> = &amp;<a class=\"id\" href=\"#udptable\">udptable</a>-><a class=\"id\" href=\"#hash2\">hash2</a>[<a class=\"id\" href=\"#slot2\">slot2</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#begin\">begin</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#udp4_lib_lookup2\">udp4_lib_lookup2</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#htonl\">htonl</a>(<a class=\"id\" href=\"#INADDR_ANY\">INADDR_ANY</a>), <a class=\"id\" href=\"#hnum\">hnum</a>, <a class=\"id\" href=\"#dif\">dif</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#hslot2\">hslot2</a>, <a class=\"id\" href=\"#slot2\">slot2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#begin\">begin</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#badness\">badness</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_nulls_for_each_rcu\">sk_nulls_for_each_rcu</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#score\">score</a> = <a class=\"id\" href=\"#compute_score\">compute_score</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#hnum\">hnum</a>, <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#dport\">dport</a>, <a class=\"id\" href=\"#dif\">dif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#score\">score</a> &gt; <a class=\"id\" href=\"#badness\">badness</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#badness\">badness</a> = <a class=\"id\" href=\"#score\">score</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the nulls value we got at the end of this lookup is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not the expected one, we must restart lookup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We probably met an item that was moved to another chain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_nulls_value\">get_nulls_value</a>(<a class=\"id\" href=\"#node\">node</a>) != <a class=\"id\" href=\"#slot\">slot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#begin\">begin</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#atomic_inc_not_zero\">atomic_inc_not_zero</a>(&amp;<a class=\"id\" href=\"#result\">result</a>-><a class=\"id\" href=\"#sk_refcnt\">sk_refcnt</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#compute_score\">compute_score</a>(<a class=\"id\" href=\"#result\">result</a>, <a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#hnum\">hnum</a>, <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#dport\">dport</a>, <a class=\"id\" href=\"#dif\">dif</a>) &lt; <a class=\"id\" href=\"#badness\">badness</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_put\">sock_put</a>(<a class=\"id\" href=\"#result\">result</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#begin\">begin</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#__udp4_lib_lookup_skb\">__udp4_lib_lookup_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#sport\">sport</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#udp_table\">udp_table</a> *<a class=\"id\" href=\"#udptable\">udptable</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#skb_steal_sock\">skb_steal_sock</a>(<a class=\"id\" href=\"#skb\">skb</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__udp4_lib_lookup\">__udp4_lib_lookup</a>(<a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#dport\">dport</a>, <a class=\"id\" href=\"#inet_iif\">inet_iif</a>(<a class=\"id\" href=\"#skb\">skb</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#udptable\">udptable</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#udp4_lib_lookup\">udp4_lib_lookup</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#sport\">sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>, int <a class=\"id\" href=\"#dif\">dif</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__udp4_lib_lookup\">__udp4_lib_lookup</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#sport\">sport</a>, <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#dport\">dport</a>, <a class=\"id\" href=\"#dif\">dif</a>, &amp;<a class=\"id\" href=\"#udp_table\">udp_table</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#udp4_lib_lookup\">udp4_lib_lookup</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#udp_v4_mcast_next\">udp_v4_mcast_next</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#loc_port\">loc_port</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#loc_addr\">loc_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#rmt_port\">rmt_port</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#rmt_addr\">rmt_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#dif\">dif</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_nulls_node\">hlist_nulls_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#hnum\">hnum</a> = <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#loc_port\">loc_port</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_nulls_for_each_from\">sk_nulls_for_each_from</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_sock\">inet_sock</a> *<a class=\"id\" href=\"#inet\">inet</a> = <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#s\">s</a>), <a class=\"id\" href=\"#net\">net</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#s\">s</a>)-><a class=\"id\" href=\"#udp_port_hash\">udp_port_hash</a> != <a class=\"id\" href=\"#hnum\">hnum</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_daddr\">inet_daddr</a> && <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_daddr\">inet_daddr</a> != <a class=\"id\" href=\"#rmt_addr\">rmt_addr</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_dport\">inet_dport</a> != <a class=\"id\" href=\"#rmt_port\">rmt_port</a> && <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_dport\">inet_dport</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_rcv_saddr\">inet_rcv_saddr</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_rcv_saddr\">inet_rcv_saddr</a> != <a class=\"id\" href=\"#loc_addr\">loc_addr</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ipv6_only_sock\">ipv6_only_sock</a>(<a class=\"id\" href=\"#s\">s</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> && <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> != <a class=\"id\" href=\"#dif\">dif</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ip_mc_sf_allow\">ip_mc_sf_allow</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#loc_addr\">loc_addr</a>, <a class=\"id\" href=\"#rmt_addr\">rmt_addr</a>, <a class=\"id\" href=\"#dif\">dif</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#s\">s</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This routine is called by the ICMP module when it gets some</span>", 
"<span class=\"comment\"> * sort of error condition.  If err &lt; 0 then the socket should</span>", 
"<span class=\"comment\"> * be closed and the error returned to the user.  If err &gt; 0</span>", 
"<span class=\"comment\"> * it's just the icmp type &lt;&lt; 8 | icmp code.</span>", 
"<span class=\"comment\"> * Header points to the ip header of the error packet. We move</span>", 
"<span class=\"comment\"> * on past this. Then (as it used to claim before adjustment)</span>", 
"<span class=\"comment\"> * header points to the first 8 bytes of the udp header.  We need</span>", 
"<span class=\"comment\"> * to find the appropriate port.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#__udp4_lib_err\">__udp4_lib_err</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#udp_table\">udp_table</a> *<a class=\"id\" href=\"#udptable\">udptable</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_sock\">inet_sock</a> *<a class=\"id\" href=\"#inet\">inet</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a> = (struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *)<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udphdr\">udphdr</a> *<a class=\"id\" href=\"#uh\">uh</a> = (struct <a class=\"id\" href=\"#udphdr\">udphdr</a> *)(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>+(<a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#ihl\">ihl</a><<2));", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#icmp_hdr\">icmp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#code\">code</a> = <a class=\"id\" href=\"#icmp_hdr\">icmp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#code\">code</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#harderr\">harderr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#__udp4_lib_lookup\">__udp4_lib_lookup</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#dest\">dest</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iph\">iph</a>-><a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#source\">source</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>, <a class=\"id\" href=\"#udptable\">udptable</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ICMP_INC_STATS_BH\">ICMP_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#ICMP_MIB_INERRORS\">ICMP_MIB_INERRORS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"comment\">/* No socket for error */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#harderr\">harderr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet\">inet</a> = <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ICMP_TIME_EXCEEDED\">ICMP_TIME_EXCEEDED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#EHOSTUNREACH\">EHOSTUNREACH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ICMP_SOURCE_QUENCH\">ICMP_SOURCE_QUENCH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ICMP_PARAMETERPROB\">ICMP_PARAMETERPROB</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#EPROTO\">EPROTO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#harderr\">harderr</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ICMP_DEST_UNREACH\">ICMP_DEST_UNREACH</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#code\">code</a> == <a class=\"id\" href=\"#ICMP_FRAG_NEEDED\">ICMP_FRAG_NEEDED</a>) { <span class=\"comment\">/* Path MTU discovery */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#pmtudisc\">pmtudisc</a> != <a class=\"id\" href=\"#IP_PMTUDISC_DONT\">IP_PMTUDISC_DONT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#EMSGSIZE\">EMSGSIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#harderr\">harderr</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#EHOSTUNREACH\">EHOSTUNREACH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#code\">code</a> <= <a class=\"id\" href=\"#NR_ICMP_UNREACH\">NR_ICMP_UNREACH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#harderr\">harderr</a> = <a class=\"id\" href=\"#icmp_err_convert\">icmp_err_convert</a>[<a class=\"id\" href=\"#code\">code</a>].<a class=\"id\" href=\"#fatal\">fatal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#icmp_err_convert\">icmp_err_convert</a>[<a class=\"id\" href=\"#code\">code</a>].<a class=\"id\" href=\"#errno\">errno</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      RFC1122: OK.  Passes ICMP errors back to application, as per</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>4.1.3.3.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#recverr\">recverr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#harderr\">harderr</a> || <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a> != <a class=\"id\" href=\"#TCP_ESTABLISHED\">TCP_ESTABLISHED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip_icmp_error\">ip_icmp_error</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#info\">info</a>, (<a class=\"id\" href=\"#u8\">u8</a> *)(<a class=\"id\" href=\"#uh\">uh</a>+1));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_err\">sk_err</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_error_report\">sk_error_report</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_put\">sock_put</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#udp_err\">udp_err</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__udp4_lib_err\">__udp4_lib_err</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#info\">info</a>, &amp;<a class=\"id\" href=\"#udp_table\">udp_table</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Throw away all pending data and cancel the corking. Socket is locked.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#udp_flush_pending_frames\">udp_flush_pending_frames</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_sock\">udp_sock</a> *<a class=\"id\" href=\"#up\">up</a> = <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pending\">pending</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pending\">pending</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip_flush_pending_frames\">ip_flush_pending_frames</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#udp_flush_pending_frames\">udp_flush_pending_frames</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>udp4_hwcsum_outgoing  -  handle outgoing HW checksumming</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@sk: <span class=\"ts\"/>socket we are sending on</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@skb: <span class=\"ts\"/>sk_buff containing the filled-in UDP header</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>        (checksum field must be zeroed out)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#udp4_hwcsum_outgoing\">udp4_hwcsum_outgoing</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udphdr\">udphdr</a> *<a class=\"id\" href=\"#uh\">uh</a> = <a class=\"id\" href=\"#udp_hdr\">udp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum\">csum</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_queue_len\">skb_queue_len</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only one fragment on the socket.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum_start\">csum_start</a> = <a class=\"id\" href=\"#skb_transport_header\">skb_transport_header</a>(<a class=\"id\" href=\"#skb\">skb</a>) - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum_offset\">csum_offset</a> = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#udphdr\">udphdr</a>, <a class=\"id\" href=\"#check\">check</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#check\">check</a> = ~<a class=\"id\" href=\"#csum_tcpudp_magic\">csum_tcpudp_magic</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#IPPROTO_UDP\">IPPROTO_UDP</a>, 0);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * HW-checksum won't work as there are two or more</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fragments on the socket so that all csums of sk_buffs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * should be together</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#skb_transport_offset\">skb_transport_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#skb_checksum\">skb_checksum</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#offset\">offset</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_walk\">skb_queue_walk</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_add\">csum_add</a>(<a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#check\">check</a> = <a class=\"id\" href=\"#csum_tcpudp_magic\">csum_tcpudp_magic</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#IPPROTO_UDP\">IPPROTO_UDP</a>, <a class=\"id\" href=\"#csum\">csum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#check\">check</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#check\">check</a> = <a class=\"id\" href=\"#CSUM_MANGLED_0\">CSUM_MANGLED_0</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Push out all pending data as one UDP datagram. Socket is locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#udp_push_pending_frames\">udp_push_pending_frames</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_sock\">udp_sock</a>  *<a class=\"id\" href=\"#up\">up</a> = <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_sock\">inet_sock</a> *<a class=\"id\" href=\"#inet\">inet</a> = <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#flowi\">flowi</a> *<a class=\"id\" href=\"#fl\">fl</a> = &amp;<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#cork\">cork</a>.<a class=\"id\" href=\"#fl\">fl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udphdr\">udphdr</a> *<a class=\"id\" href=\"#uh\">uh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_udplite\">is_udplite</a> = <a class=\"id\" href=\"#IS_UDPLITE\">IS_UDPLITE</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum\">csum</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Grab the skbuff where UDP header space exists. */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb_peek\">skb_peek</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>)) == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Create a UDP header</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a> = <a class=\"id\" href=\"#udp_hdr\">udp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#source\">source</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_ip_sport\">fl_ip_sport</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#dest\">dest</a> = <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl_ip_dport\">fl_ip_dport</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#check\">check</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_udplite\">is_udplite</a>)  <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <span class=\"comment\">/*     UDP-Lite      */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a>  = <a class=\"id\" href=\"#udplite_csum_outgoing\">udplite_csum_outgoing</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_no_check\">sk_no_check</a> == <a class=\"id\" href=\"#UDP_CSUM_NOXMIT\">UDP_CSUM_NOXMIT</a>) {   <span class=\"comment\">/* UDP csum disabled */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#send\">send</a>;", 
"", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_PARTIAL\">CHECKSUM_PARTIAL</a>) { <span class=\"comment\">/* UDP hardware csum */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udp4_hwcsum_outgoing\">udp4_hwcsum_outgoing</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl4_src\">fl4_src</a>, <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl4_dst\">fl4_dst</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#send\">send</a>;", 
"", 
"<span class=\"ts\"/>} else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <span class=\"comment\">/*   `normal' UDP    */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#udp_csum_outgoing\">udp_csum_outgoing</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* add protocol-dependent pseudo-header */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#check\">check</a> = <a class=\"id\" href=\"#csum_tcpudp_magic\">csum_tcpudp_magic</a>(<a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl4_src\">fl4_src</a>, <a class=\"id\" href=\"#fl\">fl</a>-><a class=\"id\" href=\"#fl4_dst\">fl4_dst</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_protocol\">sk_protocol</a>, <a class=\"id\" href=\"#csum\">csum</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#check\">check</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#check\">check</a> = <a class=\"id\" href=\"#CSUM_MANGLED_0\">CSUM_MANGLED_0</a>;", 
"", 
"<a class=\"id\" href=\"#send\">send</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ip_push_pending_frames\">ip_push_pending_frames</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#ENOBUFS\">ENOBUFS</a> && !<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#recverr\">recverr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_INC_STATS_USER\">UDP_INC_STATS_USER</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#UDP_MIB_SNDBUFERRORS\">UDP_MIB_SNDBUFERRORS</a>, <a class=\"id\" href=\"#is_udplite\">is_udplite</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_INC_STATS_USER\">UDP_INC_STATS_USER</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#UDP_MIB_OUTDATAGRAMS\">UDP_MIB_OUTDATAGRAMS</a>, <a class=\"id\" href=\"#is_udplite\">is_udplite</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pending\">pending</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#udp_sendmsg\">udp_sendmsg</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_sock\">inet_sock</a> *<a class=\"id\" href=\"#inet\">inet</a> = <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_sock\">udp_sock</a> *<a class=\"id\" href=\"#up\">up</a> = <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ulen\">ulen</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ipcm_cookie\">ipcm_cookie</a> <a class=\"id\" href=\"#ipc\">ipc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#rt\">rt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#free\">free</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#connected\">connected</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#faddr\">faddr</a>, <a class=\"id\" href=\"#saddr\">saddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#tos\">tos</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#is_udplite\">is_udplite</a> = <a class=\"id\" href=\"#IS_UDPLITE\">IS_UDPLITE</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#corkreq\">corkreq</a> = <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#corkflag\">corkflag</a> || <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_flags\">msg_flags</a>&amp;<a class=\"id\" href=\"#MSG_MORE\">MSG_MORE</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#getfrag\">getfrag</a>)(void *, char *, int, int, int, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; 0xFFFF)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EMSGSIZE\">EMSGSIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Check the flags.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_flags\">msg_flags</a> &amp; <a class=\"id\" href=\"#MSG_OOB\">MSG_OOB</a>) <span class=\"comment\">/* Mirror BSD error message compatibility */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#opt\">opt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#shtx\">shtx</a>.<a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pending\">pending</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * There are pending frames.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The socket lock must be held while it's corked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_sock\">lock_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pending\">pending</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pending\">pending</a> != <a class=\"id\" href=\"#AF_INET\">AF_INET</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_sock\">release_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#do_append_data\">do_append_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_sock\">release_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ulen\">ulen</a> += sizeof(struct <a class=\"id\" href=\"#udphdr\">udphdr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Get and verify the address.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_name\">msg_name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> * <a class=\"id\" href=\"#usin\">usin</a> = (struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *)<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_name\">msg_name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_namelen\">msg_namelen</a> &lt; sizeof(*<a class=\"id\" href=\"#usin\">usin</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#usin\">usin</a>-><a class=\"id\" href=\"#sin_family\">sin_family</a> != <a class=\"id\" href=\"#AF_INET\">AF_INET</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#usin\">usin</a>-><a class=\"id\" href=\"#sin_family\">sin_family</a> != <a class=\"id\" href=\"#AF_UNSPEC\">AF_UNSPEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAFNOSUPPORT\">EAFNOSUPPORT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#daddr\">daddr</a> = <a class=\"id\" href=\"#usin\">usin</a>-><a class=\"id\" href=\"#sin_addr\">sin_addr</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dport\">dport</a> = <a class=\"id\" href=\"#usin\">usin</a>-><a class=\"id\" href=\"#sin_port\">sin_port</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dport\">dport</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a> != <a class=\"id\" href=\"#TCP_ESTABLISHED\">TCP_ESTABLISHED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EDESTADDRREQ\">EDESTADDRREQ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#daddr\">daddr</a> = <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_daddr\">inet_daddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dport\">dport</a> = <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_dport\">inet_dport</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Open fast path for connected socket.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   Route will not be used, if at least one option is set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#connected\">connected</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_saddr\">inet_saddr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#oif\">oif</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sock_tx_timestamp\">sock_tx_timestamp</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#sk\">sk</a>, &amp;<a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#shtx\">shtx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_controllen\">msg_controllen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ip_cmsg_send\">ip_cmsg_send</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#msg\">msg</a>, &amp;<a class=\"id\" href=\"#ipc\">ipc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#opt\">opt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#connected\">connected</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#opt\">opt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#opt\">opt</a> = <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#opt\">opt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saddr\">saddr</a> = <a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#faddr\">faddr</a> = <a class=\"id\" href=\"#daddr\">daddr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#opt\">opt</a> && <a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#srr\">srr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#daddr\">daddr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#faddr\">faddr</a> = <a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#faddr\">faddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#connected\">connected</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tos\">tos</a> = <a class=\"id\" href=\"#RT_TOS\">RT_TOS</a>(<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#tos\">tos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_LOCALROUTE\">SOCK_LOCALROUTE</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_flags\">msg_flags</a> &amp; <a class=\"id\" href=\"#MSG_DONTROUTE\">MSG_DONTROUTE</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#opt\">opt</a> && <a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#opt\">opt</a>-><a class=\"id\" href=\"#is_strictroute\">is_strictroute</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tos\">tos</a> |= <a class=\"id\" href=\"#RTO_ONLINK\">RTO_ONLINK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#connected\">connected</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ipv4_is_multicast\">ipv4_is_multicast</a>(<a class=\"id\" href=\"#daddr\">daddr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#oif\">oif</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#oif\">oif</a> = <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#mc_index\">mc_index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#saddr\">saddr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saddr\">saddr</a> = <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#mc_addr\">mc_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#connected\">connected</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#connected\">connected</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt\">rt</a> = (struct <a class=\"id\" href=\"#rtable\">rtable</a> *)<a class=\"id\" href=\"#sk_dst_check\">sk_dst_check</a>(<a class=\"id\" href=\"#sk\">sk</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt\">rt</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#flowi\">flowi</a> <a class=\"id\" href=\"#fl\">fl</a> = { .<a class=\"id\" href=\"#oif\">oif</a> = <a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#oif\">oif</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    .<a class=\"id\" href=\"#mark\">mark</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_mark\">sk_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    .<a class=\"id\" href=\"#nl_u\">nl_u</a> = { .<a class=\"id\" href=\"#ip4_u\">ip4_u</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      { .<a class=\"id\" href=\"#daddr\">daddr</a> = <a class=\"id\" href=\"#faddr\">faddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#saddr\">saddr</a> = <a class=\"id\" href=\"#saddr\">saddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tos\">tos</a> = <a class=\"id\" href=\"#tos\">tos</a> } },", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    .<a class=\"id\" href=\"#proto\">proto</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_protocol\">sk_protocol</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    .<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#inet_sk_flowi_flags\">inet_sk_flowi_flags</a>(<a class=\"id\" href=\"#sk\">sk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    .<a class=\"id\" href=\"#uli_u\">uli_u</a> = { .<a class=\"id\" href=\"#ports\">ports</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       { .<a class=\"id\" href=\"#sport\">sport</a> = <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_sport\">inet_sport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> .<a class=\"id\" href=\"#dport\">dport</a> = <a class=\"id\" href=\"#dport\">dport</a> } } };", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_sk_classify_flow\">security_sk_classify_flow</a>(<a class=\"id\" href=\"#sk\">sk</a>, &amp;<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ip_route_output_flow\">ip_route_output_flow</a>(<a class=\"id\" href=\"#net\">net</a>, &amp;<a class=\"id\" href=\"#rt\">rt</a>, &amp;<a class=\"id\" href=\"#fl\">fl</a>, <a class=\"id\" href=\"#sk\">sk</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#ENETUNREACH\">ENETUNREACH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IP_INC_STATS_BH\">IP_INC_STATS_BH</a>(<a class=\"id\" href=\"#net\">net</a>, <a class=\"id\" href=\"#IPSTATS_MIB_OUTNOROUTES\">IPSTATS_MIB_OUTNOROUTES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#rt_flags\">rt_flags</a> &amp; <a class=\"id\" href=\"#RTCF_BROADCAST\">RTCF_BROADCAST</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_BROADCAST\">SOCK_BROADCAST</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#connected\">connected</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_dst_set\">sk_dst_set</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#dst_clone\">dst_clone</a>(&amp;<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#dst\">dst</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_flags\">msg_flags</a>&amp;<a class=\"id\" href=\"#MSG_CONFIRM\">MSG_CONFIRM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#do_confirm\">do_confirm</a>;", 
"<a class=\"id\" href=\"#back_from_confirm\">back_from_confirm</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saddr\">saddr</a> = <a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#rt_src\">rt_src</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#daddr\">daddr</a> = <a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#rt_dst\">rt_dst</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_sock\">lock_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pending\">pending</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The socket is already corked while preparing it. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ... which is an evident application bug. --ANK */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_sock\">release_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LIMIT_NETDEBUG\">LIMIT_NETDEBUG</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"udp cork app bug 2\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Now cork the socket to pend data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#cork\">cork</a>.<a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl4_dst\">fl4_dst</a> = <a class=\"id\" href=\"#daddr\">daddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#cork\">cork</a>.<a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl_ip_dport\">fl_ip_dport</a> = <a class=\"id\" href=\"#dport\">dport</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#cork\">cork</a>.<a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl4_src\">fl4_src</a> = <a class=\"id\" href=\"#saddr\">saddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#cork\">cork</a>.<a class=\"id\" href=\"#fl\">fl</a>.<a class=\"id\" href=\"#fl_ip_sport\">fl_ip_sport</a> = <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_sport\">inet_sport</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pending\">pending</a> = <a class=\"id\" href=\"#AF_INET\">AF_INET</a>;", 
"", 
"<a class=\"id\" href=\"#do_append_data\">do_append_data</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#ulen\">ulen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#getfrag\">getfrag</a>  =  <a class=\"id\" href=\"#is_udplite\">is_udplite</a> ?  <a class=\"id\" href=\"#udplite_getfrag\">udplite_getfrag</a> : <a class=\"id\" href=\"#ip_generic_getfrag\">ip_generic_getfrag</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ip_append_data\">ip_append_data</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#getfrag\">getfrag</a>, <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_iov\">msg_iov</a>, <a class=\"id\" href=\"#ulen\">ulen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#udphdr\">udphdr</a>), &amp;<a class=\"id\" href=\"#ipc\">ipc</a>, &amp;<a class=\"id\" href=\"#rt\">rt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#corkreq\">corkreq</a> ? <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_flags\">msg_flags</a>|<a class=\"id\" href=\"#MSG_MORE\">MSG_MORE</a> : <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_flags\">msg_flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udp_flush_pending_frames\">udp_flush_pending_frames</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#corkreq\">corkreq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#udp_push_pending_frames\">udp_push_pending_frames</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb_queue_empty\">skb_queue_empty</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pending\">pending</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_sock\">release_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ip_rt_put\">ip_rt_put</a>(<a class=\"id\" href=\"#rt\">rt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free\">free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ipc\">ipc</a>.<a class=\"id\" href=\"#opt\">opt</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ENOBUFS = no kernel mem, SOCK_NOSPACE = no sndbuf space.  Reporting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ENOBUFS might not be good (it's not tunable per se), but otherwise</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we don't have a good statistic (IpOutDiscards but it can be too many</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * things).  We could add another new stat but at least for now that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * seems like overkill.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#ENOBUFS\">ENOBUFS</a> || <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#SOCK_NOSPACE\">SOCK_NOSPACE</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a>-><a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_INC_STATS_USER\">UDP_INC_STATS_USER</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_MIB_SNDBUFERRORS\">UDP_MIB_SNDBUFERRORS</a>, <a class=\"id\" href=\"#is_udplite\">is_udplite</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#do_confirm\">do_confirm</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst_confirm\">dst_confirm</a>(&amp;<a class=\"id\" href=\"#rt\">rt</a>-><a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_flags\">msg_flags</a>&amp;<a class=\"id\" href=\"#MSG_PROBE\">MSG_PROBE</a>) || <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#back_from_confirm\">back_from_confirm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#udp_sendmsg\">udp_sendmsg</a>);", 
"", 
"int <a class=\"id\" href=\"#udp_sendpage\">udp_sendpage</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_sock\">udp_sock</a> *<a class=\"id\" href=\"#up\">up</a> = <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pending\">pending</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#msghdr\">msghdr</a> <a class=\"id\" href=\"#msg\">msg</a> = {<span class=\"ts\"/>.<a class=\"id\" href=\"#msg_flags\">msg_flags</a> = <a class=\"id\" href=\"#flags\">flags</a>|<a class=\"id\" href=\"#MSG_MORE\">MSG_MORE</a> };", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Call udp_sendmsg to specify destination address which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sendpage interface can't pass.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This will succeed only when the socket is connected.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#udp_sendmsg\">udp_sendmsg</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#sk\">sk</a>, &amp;<a class=\"id\" href=\"#msg\">msg</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_sock\">lock_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pending\">pending</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_sock\">release_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LIMIT_NETDEBUG\">LIMIT_NETDEBUG</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"udp cork app bug 3\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ip_append_page\">ip_append_page</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_sock\">release_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sock_no_sendpage\">sock_no_sendpage</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udp_flush_pending_frames\">udp_flush_pending_frames</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#corkflag\">corkflag</a> || (<a class=\"id\" href=\"#flags\">flags</a>&amp;<a class=\"id\" href=\"#MSG_MORE\">MSG_MORE</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#udp_push_pending_frames\">udp_push_pending_frames</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_sock\">release_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>first_packet_length<span class=\"ts\"/>- return length of first packet in receive queue</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sk: socket</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Drops all bad checksum frames, until a valid one is found.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns the length of found skb, or 0 if none is found.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#first_packet_length\">first_packet_length</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> <a class=\"id\" href=\"#list_kill\">list_kill</a>, *<a class=\"id\" href=\"#rcvq\">rcvq</a> = &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_receive_queue\">sk_receive_queue</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_head_init\">__skb_queue_head_init</a>(&amp;<a class=\"id\" href=\"#list_kill\">list_kill</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#rcvq\">rcvq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb_peek\">skb_peek</a>(<a class=\"id\" href=\"#rcvq\">rcvq</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udp_lib_checksum_complete\">udp_lib_checksum_complete</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_INC_STATS_BH\">UDP_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#UDP_MIB_INERRORS\">UDP_MIB_INERRORS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#IS_UDPLITE\">IS_UDPLITE</a>(<a class=\"id\" href=\"#sk\">sk</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_drops\">sk_drops</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_unlink\">__skb_unlink</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#rcvq\">rcvq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_tail\">__skb_queue_tail</a>(&amp;<a class=\"id\" href=\"#list_kill\">list_kill</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#skb\">skb</a> ? <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> : 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#rcvq\">rcvq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_queue_empty\">skb_queue_empty</a>(&amp;<a class=\"id\" href=\"#list_kill\">list_kill</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#slow\">slow</a> = <a class=\"id\" href=\"#lock_sock_fast\">lock_sock_fast</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_purge\">__skb_queue_purge</a>(&amp;<a class=\"id\" href=\"#list_kill\">list_kill</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_mem_reclaim_partial\">sk_mem_reclaim_partial</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_sock_fast\">unlock_sock_fast</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#slow\">slow</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>IOCTL requests applicable to the UDP protocol</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#udp_ioctl\">udp_ioctl</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCOUTQ\">SIOCOUTQ</a>:", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#amount\">amount</a> = <a class=\"id\" href=\"#sk_wmem_alloc_get\">sk_wmem_alloc_get</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#amount\">amount</a>, (int <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SIOCINQ\">SIOCINQ</a>:", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#amount\">amount</a> = <a class=\"id\" href=\"#first_packet_length\">first_packet_length</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#amount\">amount</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We will only return the amount</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * of this packet since that is all</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * that will be read.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#amount\">amount</a> -= sizeof(struct <a class=\"id\" href=\"#udphdr\">udphdr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#amount\">amount</a>, (int <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOIOCTLCMD\">ENOIOCTLCMD</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#udp_ioctl\">udp_ioctl</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>This should be easy, if there is something there we</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>return it, otherwise we block.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#udp_recvmsg\">udp_recvmsg</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#noblock\">noblock</a>, int <a class=\"id\" href=\"#flags\">flags</a>, int *<a class=\"id\" href=\"#addr_len\">addr_len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_sock\">inet_sock</a> *<a class=\"id\" href=\"#inet\">inet</a> = <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *<a class=\"id\" href=\"#sin\">sin</a> = (struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *)<a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_name\">msg_name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ulen\">ulen</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#peeked\">peeked</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_udplite\">is_udplite</a> = <a class=\"id\" href=\"#IS_UDPLITE\">IS_UDPLITE</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#slow\">slow</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Check any passed addresses</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr_len\">addr_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#addr_len\">addr_len</a> = sizeof(*<a class=\"id\" href=\"#sin\">sin</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MSG_ERRQUEUE\">MSG_ERRQUEUE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ip_recv_error\">ip_recv_error</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<a class=\"id\" href=\"#try_again\">try_again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#__skb_recv_datagram\">__skb_recv_datagram</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#flags\">flags</a> | (<a class=\"id\" href=\"#noblock\">noblock</a> ? <a class=\"id\" href=\"#MSG_DONTWAIT\">MSG_DONTWAIT</a> : 0),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#peeked\">peeked</a>, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ulen\">ulen</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - sizeof(struct <a class=\"id\" href=\"#udphdr\">udphdr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#ulen\">ulen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ulen\">ulen</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#ulen\">ulen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_flags\">msg_flags</a> |= <a class=\"id\" href=\"#MSG_TRUNC\">MSG_TRUNC</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If checksum is needed at all, try to do it while copying the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * data.  If the data is truncated, or if we only want a partial</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * coverage checksum (UDP-Lite), do it before the copy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#ulen\">ulen</a> || <a class=\"id\" href=\"#UDP_SKB_CB\">UDP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#partial_cov\">partial_cov</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#udp_lib_checksum_complete\">udp_lib_checksum_complete</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#csum_copy_err\">csum_copy_err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_csum_unnecessary\">skb_csum_unnecessary</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#skb_copy_datagram_iovec\">skb_copy_datagram_iovec</a>(<a class=\"id\" href=\"#skb\">skb</a>, sizeof(struct <a class=\"id\" href=\"#udphdr\">udphdr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_iov\">msg_iov</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#skb_copy_and_csum_datagram_iovec\">skb_copy_and_csum_datagram_iovec</a>(<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       sizeof(struct <a class=\"id\" href=\"#udphdr\">udphdr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#msg\">msg</a>-><a class=\"id\" href=\"#msg_iov\">msg_iov</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#csum_copy_err\">csum_copy_err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#peeked\">peeked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_INC_STATS_USER\">UDP_INC_STATS_USER</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_MIB_INDATAGRAMS\">UDP_MIB_INDATAGRAMS</a>, <a class=\"id\" href=\"#is_udplite\">is_udplite</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_recv_ts_and_drops\">sock_recv_ts_and_drops</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy the address. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sin\">sin</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sin\">sin</a>-><a class=\"id\" href=\"#sin_family\">sin_family</a> = <a class=\"id\" href=\"#AF_INET\">AF_INET</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sin\">sin</a>-><a class=\"id\" href=\"#sin_port\">sin_port</a> = <a class=\"id\" href=\"#udp_hdr\">udp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#source\">source</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sin\">sin</a>-><a class=\"id\" href=\"#sin_addr\">sin_addr</a>.<a class=\"id\" href=\"#s_addr\">s_addr</a> = <a class=\"id\" href=\"#ip_hdr\">ip_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#saddr\">saddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#sin\">sin</a>-><a class=\"id\" href=\"#sin_zero\">sin_zero</a>, 0, sizeof(<a class=\"id\" href=\"#sin\">sin</a>-><a class=\"id\" href=\"#sin_zero\">sin_zero</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#cmsg_flags\">cmsg_flags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip_cmsg_recv\">ip_cmsg_recv</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MSG_TRUNC\">MSG_TRUNC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ulen\">ulen</a>;", 
"", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_free_datagram_locked\">skb_free_datagram_locked</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#csum_copy_err\">csum_copy_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slow\">slow</a> = <a class=\"id\" href=\"#lock_sock_fast\">lock_sock_fast</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_kill_datagram\">skb_kill_datagram</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_INC_STATS_USER\">UDP_INC_STATS_USER</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#UDP_MIB_INERRORS\">UDP_MIB_INERRORS</a>, <a class=\"id\" href=\"#is_udplite\">is_udplite</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_sock_fast\">unlock_sock_fast</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#slow\">slow</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#noblock\">noblock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#try_again\">try_again</a>;", 
"}", 
"", 
"", 
"int <a class=\"id\" href=\"#udp_disconnect\">udp_disconnect</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_sock\">inet_sock</a> *<a class=\"id\" href=\"#inet\">inet</a> = <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>1003.1g - break association.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a> = <a class=\"id\" href=\"#TCP_CLOSE\">TCP_CLOSE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_daddr\">inet_daddr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_dport\">inet_dport</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_rps_save_rxhash\">sock_rps_save_rxhash</a>(<a class=\"id\" href=\"#sk\">sk</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> = 0;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_userlocks\">sk_userlocks</a> &amp; <a class=\"id\" href=\"#SOCK_BINDADDR_LOCK\">SOCK_BINDADDR_LOCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_reset_saddr\">inet_reset_saddr</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_userlocks\">sk_userlocks</a> &amp; <a class=\"id\" href=\"#SOCK_BINDPORT_LOCK\">SOCK_BINDPORT_LOCK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a>-><a class=\"id\" href=\"#unhash\">unhash</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_sport\">inet_sport</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_dst_reset\">sk_dst_reset</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#udp_disconnect\">udp_disconnect</a>);", 
"", 
"void <a class=\"id\" href=\"#udp_lib_unhash\">udp_lib_unhash</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk_hashed\">sk_hashed</a>(<a class=\"id\" href=\"#sk\">sk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_table\">udp_table</a> *<a class=\"id\" href=\"#udptable\">udptable</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a>-><a class=\"id\" href=\"#h\">h</a>.<a class=\"id\" href=\"#udp_table\">udp_table</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_hslot\">udp_hslot</a> *<a class=\"id\" href=\"#hslot\">hslot</a>, *<a class=\"id\" href=\"#hslot2\">hslot2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot\">hslot</a>  = <a class=\"id\" href=\"#udp_hashslot\">udp_hashslot</a>(<a class=\"id\" href=\"#udptable\">udptable</a>, <a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#udp_port_hash\">udp_port_hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot2\">hslot2</a> = <a class=\"id\" href=\"#udp_hashslot2\">udp_hashslot2</a>(<a class=\"id\" href=\"#udptable\">udptable</a>, <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#udp_portaddr_hash\">udp_portaddr_hash</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk_nulls_del_node_init_rcu\">sk_nulls_del_node_init_rcu</a>(<a class=\"id\" href=\"#sk\">sk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#inet_num\">inet_num</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_prot_inuse_add\">sock_prot_inuse_add</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a>, -1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_nulls_del_init_rcu\">hlist_nulls_del_init_rcu</a>(&amp;<a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#udp_portaddr_node\">udp_portaddr_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#udp_lib_unhash\">udp_lib_unhash</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * inet_rcv_saddr was changed, we must rehash secondary hash</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#udp_lib_rehash\">udp_lib_rehash</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#newhash\">newhash</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk_hashed\">sk_hashed</a>(<a class=\"id\" href=\"#sk\">sk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_table\">udp_table</a> *<a class=\"id\" href=\"#udptable\">udptable</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a>-><a class=\"id\" href=\"#h\">h</a>.<a class=\"id\" href=\"#udp_table\">udp_table</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_hslot\">udp_hslot</a> *<a class=\"id\" href=\"#hslot\">hslot</a>, *<a class=\"id\" href=\"#hslot2\">hslot2</a>, *<a class=\"id\" href=\"#nhslot2\">nhslot2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot2\">hslot2</a> = <a class=\"id\" href=\"#udp_hashslot2\">udp_hashslot2</a>(<a class=\"id\" href=\"#udptable\">udptable</a>, <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#udp_portaddr_hash\">udp_portaddr_hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nhslot2\">nhslot2</a> = <a class=\"id\" href=\"#udp_hashslot2\">udp_hashslot2</a>(<a class=\"id\" href=\"#udptable\">udptable</a>, <a class=\"id\" href=\"#newhash\">newhash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#udp_portaddr_hash\">udp_portaddr_hash</a> = <a class=\"id\" href=\"#newhash\">newhash</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hslot2\">hslot2</a> != <a class=\"id\" href=\"#nhslot2\">nhslot2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot\">hslot</a> = <a class=\"id\" href=\"#udp_hashslot\">udp_hashslot</a>(<a class=\"id\" href=\"#udptable\">udptable</a>, <a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#udp_port_hash\">udp_port_hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we must lock primary chain too */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_nulls_del_init_rcu\">hlist_nulls_del_init_rcu</a>(&amp;<a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#udp_portaddr_node\">udp_portaddr_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hslot2\">hslot2</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#nhslot2\">nhslot2</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_nulls_add_head_rcu\">hlist_nulls_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#udp_portaddr_node\">udp_portaddr_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#nhslot2\">nhslot2</a>-><a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nhslot2\">nhslot2</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#nhslot2\">nhslot2</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#hslot\">hslot</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#udp_lib_rehash\">udp_lib_rehash</a>);", 
"", 
"static void <a class=\"id\" href=\"#udp_v4_rehash\">udp_v4_rehash</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#new_hash\">new_hash</a> = <a class=\"id\" href=\"#udp4_portaddr_hash\">udp4_portaddr_hash</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#inet_rcv_saddr\">inet_rcv_saddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#inet_num\">inet_num</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udp_lib_rehash\">udp_lib_rehash</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#new_hash\">new_hash</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__udp_queue_rcv_skb\">__udp_queue_rcv_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#inet_daddr\">inet_daddr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_rps_save_rxhash\">sock_rps_save_rxhash</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#rxhash\">rxhash</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ip_queue_rcv_skb\">ip_queue_rcv_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#is_udplite\">is_udplite</a> = <a class=\"id\" href=\"#IS_UDPLITE\">IS_UDPLITE</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Note that an ENOMEM error is charged twice */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_INC_STATS_BH\">UDP_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#UDP_MIB_RCVBUFERRORS\">UDP_MIB_RCVBUFERRORS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#is_udplite\">is_udplite</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_INC_STATS_BH\">UDP_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#UDP_MIB_INERRORS\">UDP_MIB_INERRORS</a>, <a class=\"id\" href=\"#is_udplite\">is_udplite</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"}", 
"", 
"<span class=\"comment\">/* returns:</span>", 
"<span class=\"comment\"> *  -1: error</span>", 
"<span class=\"comment\"> *   0: success</span>", 
"<span class=\"comment\"> *  &gt;0: \"udp encap\" protocol resubmission</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that in the success and error cases, the skb is assumed to</span>", 
"<span class=\"comment\"> * have either been requeued or freed.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#udp_queue_rcv_skb\">udp_queue_rcv_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#udp_sock\">udp_sock</a> *<a class=\"id\" href=\"#up\">up</a> = <a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_udplite\">is_udplite</a> = <a class=\"id\" href=\"#IS_UDPLITE\">IS_UDPLITE</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Charge it to the socket, dropping if the queue is full.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#xfrm4_policy_check\">xfrm4_policy_check</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#XFRM_POLICY_IN\">XFRM_POLICY_IN</a>, <a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_reset\">nf_reset</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#encap_type\">encap_type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is an encapsulation socket so pass the skb to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the socket's udp_encap_rcv() hook. Otherwise, just</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fall through and pass this up the UDP socket.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * up-&gt;encap_rcv() returns the following value:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * =0 if skb was successfully passed to the encap</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *    handler or was discarded by it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * &gt;0 if skb should be passed on to UDP.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * &lt;0 if skb should be resubmitted as proto -N</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if we're overly short, let UDP handle it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &gt; sizeof(struct <a class=\"id\" href=\"#udphdr\">udphdr</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#encap_rcv\">encap_rcv</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (*<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#encap_rcv\">encap_rcv</a>)(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_INC_STATS_BH\">UDP_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#UDP_MIB_INDATAGRAMS\">UDP_MIB_INDATAGRAMS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#is_udplite\">is_udplite</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FALLTHROUGH -- it's a UDP Packet */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * <span class=\"ts\"/>UDP-Lite specific tests, ignored on UDP sockets</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#is_udplite\">is_udplite</a> &amp; <a class=\"id\" href=\"#UDPLITE_RECV_CC\">UDPLITE_RECV_CC</a>)  &&  <a class=\"id\" href=\"#UDP_SKB_CB\">UDP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#partial_cov\">partial_cov</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * MIB statistics other than incrementing the error count are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * disabled for the following two types of errors: these depend</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * on the application settings, not on the functioning of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * protocol stack as such.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * RFC 3828 here recommends (sec 3.3): \"There should also be a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * way ... to ... at least let the receiving application block</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * delivery of packets with coverage values less than a value</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * provided by the application.\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pcrlen\">pcrlen</a> == 0) {          <span class=\"comment\">/* full coverage was set  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LIMIT_NETDEBUG\">LIMIT_NETDEBUG</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"UDPLITE: partial coverage \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%d while full coverage %d requested\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_SKB_CB\">UDP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#cscov\">cscov</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The next case involves violating the min. coverage requested</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * by the receiver. This is subtle: if receiver wants x and x is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * greater than the buffersize/MTU then receiver will complain</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that it wants x while sender emits packets of smaller size y.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Therefore the above ...()-&gt;partial_cov statement is essential.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#UDP_SKB_CB\">UDP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#cscov\">cscov</a>  &lt;  <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pcrlen\">pcrlen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LIMIT_NETDEBUG\">LIMIT_NETDEBUG</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"UDPLITE: coverage %d too small, need min %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_SKB_CB\">UDP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#cscov\">cscov</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pcrlen\">pcrlen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_filter\">sk_filter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#udp_lib_checksum_complete\">udp_lib_checksum_complete</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk_rcvqueues_full\">sk_rcvqueues_full</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh_lock_sock\">bh_lock_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sock_owned_by_user\">sock_owned_by_user</a>(<a class=\"id\" href=\"#sk\">sk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#__udp_queue_rcv_skb\">__udp_queue_rcv_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#sk_add_backlog\">sk_add_backlog</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh_unlock_sock\">bh_unlock_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh_unlock_sock\">bh_unlock_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<a class=\"id\" href=\"#drop\">drop</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#UDP_INC_STATS_BH\">UDP_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#UDP_MIB_INERRORS\">UDP_MIB_INERRORS</a>, <a class=\"id\" href=\"#is_udplite\">is_udplite</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_drops\">sk_drops</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#flush_stack\">flush_stack</a>(struct <a class=\"id\" href=\"#sock\">sock</a> **<a class=\"id\" href=\"#stack\">stack</a>, unsigned int <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#final\">final</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb1\">skb1</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#skb1\">skb1</a> == <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb1\">skb1</a> = (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#final\">final</a>) ? <a class=\"id\" href=\"#skb\">skb</a> : <a class=\"id\" href=\"#skb_clone\">skb_clone</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb1\">skb1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_drops\">sk_drops</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_INC_STATS_BH\">UDP_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#UDP_MIB_RCVBUFERRORS\">UDP_MIB_RCVBUFERRORS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#IS_UDPLITE\">IS_UDPLITE</a>(<a class=\"id\" href=\"#sk\">sk</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_INC_STATS_BH\">UDP_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#UDP_MIB_INERRORS\">UDP_MIB_INERRORS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#IS_UDPLITE\">IS_UDPLITE</a>(<a class=\"id\" href=\"#sk\">sk</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb1\">skb1</a> && <a class=\"id\" href=\"#udp_queue_rcv_skb\">udp_queue_rcv_skb</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb1\">skb1</a>) <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb1\">skb1</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb1\">skb1</a>))", 
];
xr_frag_insert('l/b0/7ee8f7bb5465e0287cc544ebcbc803cb12067c.xr', __xr_tmp);
