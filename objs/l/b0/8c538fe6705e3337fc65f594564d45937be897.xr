var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#thread_info\">thread_info</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#msr\">msr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#bugs\">bugs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#topology\">topology</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#numa_64\">numa_64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"cpu.h\"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mpspec\">mpspec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#early_init_intel\">early_init_intel</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Unmask CPUID levels if masked: */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> &gt; 6 || (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 6 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> >= 0xd)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#misc_enable\">misc_enable</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MISC_ENABLE\">MSR_IA32_MISC_ENABLE</a>, <a class=\"id\" href=\"#misc_enable\">misc_enable</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#misc_enable\">misc_enable</a> &amp; <a class=\"id\" href=\"#MSR_IA32_MISC_ENABLE_LIMIT_CPUID\">MSR_IA32_MISC_ENABLE_LIMIT_CPUID</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#misc_enable\">misc_enable</a> &= ~<a class=\"id\" href=\"#MSR_IA32_MISC_ENABLE_LIMIT_CPUID\">MSR_IA32_MISC_ENABLE_LIMIT_CPUID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MISC_ENABLE\">MSR_IA32_MISC_ENABLE</a>, <a class=\"id\" href=\"#misc_enable\">misc_enable</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a> = <a class=\"id\" href=\"#cpuid_eax\">cpuid_eax</a>(0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_cpu_cap\">get_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 0xf && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> >= 0x03) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 0x6 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> >= 0x0e))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_CONSTANT_TSC\">X86_FEATURE_CONSTANT_TSC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Atom erratum AAE44/AAF40/AAG38/AAH41:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A race condition between speculative fetches and invalidating</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a large page.  This is worked around in microcode, but we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need the microcode to have already been loaded... so if it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not, recommend a BIOS update and disable large pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 6 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 0x1c && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> <= 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ucode\">ucode</a>, <a class=\"id\" href=\"#junk\">junk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsr\">wrmsr</a>(<a class=\"id\" href=\"#MSR_IA32_UCODE_REV\">MSR_IA32_UCODE_REV</a>, 0, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_core\">sync_core</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_IA32_UCODE_REV\">MSR_IA32_UCODE_REV</a>, <a class=\"id\" href=\"#junk\">junk</a>, <a class=\"id\" href=\"#ucode\">ucode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ucode\">ucode</a> &lt; 0x20e) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Atom PSE erratum detected, BIOS microcode update recommended\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_PSE\">X86_FEATURE_PSE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_SYSENTER32\">X86_FEATURE_SYSENTER32</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/* Netburst reports 64 bytes clflush size, but does IO in 128 bytes */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 15 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_cache_alignment\">x86_cache_alignment</a> == 64)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_cache_alignment\">x86_cache_alignment</a> = 128;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* CPUID workaround for 0F33/0F34 CPU */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 0xF && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 0x3", 
"<span class=\"ts\"/>    && (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 0x3 || <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 0x4))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_phys_bits\">x86_phys_bits</a> = 36;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * c-&gt;x86_power is 8000_0007 edx. Bit 8 is TSC runs at constant rate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with P/T states and does not stop in deep C-states.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is also reliable across cores and sockets. (but not across</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cabinets - we turn it off in that case explicitly.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_power\">x86_power</a> &amp; (1 << 8)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_CONSTANT_TSC\">X86_FEATURE_CONSTANT_TSC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_NONSTOP_TSC\">X86_FEATURE_NONSTOP_TSC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_tsc_unstable\">check_tsc_unstable</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_clock_stable\">sched_clock_stable</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There is a known erratum on Pentium III and Core Solo</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and Core Duo CPUs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \" Page with PAT set to WC while associated MTRR is UC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   may consolidate to UC \"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Because of this erratum, it is better to stick with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * setting WC in MTRR rather than using PAT on these CPUs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enable PAT WC only on P4, Core 2 or later CPUs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 6 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> &lt; 15)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_PAT\">X86_FEATURE_PAT</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KMEMCHECK\">CONFIG_KMEMCHECK</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * P4s have a \"fast strings\" feature which causes single-</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stepping REP instructions to only generate a #DB on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cache-line boundaries.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ingo Molnar reported a Pentium D (model 6) and a Xeon</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (model 2) with the same problem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 15) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#misc_enable\">misc_enable</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MISC_ENABLE\">MSR_IA32_MISC_ENABLE</a>, <a class=\"id\" href=\"#misc_enable\">misc_enable</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#misc_enable\">misc_enable</a> &amp; <a class=\"id\" href=\"#MSR_IA32_MISC_ENABLE_FAST_STRING\">MSR_IA32_MISC_ENABLE_FAST_STRING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"kmemcheck: Disabling fast string operations\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#misc_enable\">misc_enable</a> &= ~<a class=\"id\" href=\"#MSR_IA32_MISC_ENABLE_FAST_STRING\">MSR_IA32_MISC_ENABLE_FAST_STRING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MISC_ENABLE\">MSR_IA32_MISC_ENABLE</a>, <a class=\"id\" href=\"#misc_enable\">misc_enable</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Early probe support logic for ppro memory erratum #50</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is called before we do cpu ident work</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#ppro_with_ram_bug\">ppro_with_ram_bug</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Uses data from early_cpu_detect now */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> == <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> == 6 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_model\">x86_model</a> == 1 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_mask\">x86_mask</a> &lt; 8) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Pentium Pro with Errata#50 detected. Taking evasive action.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_F00F_BUG\">CONFIG_X86_F00F_BUG</a>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#trap_init_f00f_bug\">trap_init_f00f_bug</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_fixmap\">__set_fixmap</a>(<a class=\"id\" href=\"#FIX_F00F_IDT\">FIX_F00F_IDT</a>, <a class=\"id\" href=\"#__pa\">__pa</a>(&amp;<a class=\"id\" href=\"#idt_table\">idt_table</a>), <a class=\"id\" href=\"#PAGE_KERNEL_RO\">PAGE_KERNEL_RO</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Update the IDT descriptor and reload the IDT so that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it uses the read-only mapped virtual address.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idt_descr\">idt_descr</a>.<a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#fix_to_virt\">fix_to_virt</a>(<a class=\"id\" href=\"#FIX_F00F_IDT\">FIX_F00F_IDT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_idt\">load_idt</a>(&amp;<a class=\"id\" href=\"#idt_descr\">idt_descr</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#intel_smp_check\">intel_smp_check</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* calling is from identify_secondary_cpu() ? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpu_index\">cpu_index</a> == <a class=\"id\" href=\"#boot_cpu_id\">boot_cpu_id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Mask B, Pentium, but not Pentium MMX</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 5 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> >= 1 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> <= 4 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> <= 3) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Remember we have B step Pentia with bugs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(1, \"WARNING: SMP operation may be unreliable\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"with B stepping processors.\\n\");", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#intel_workarounds\">intel_workarounds</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_F00F_BUG\">CONFIG_X86_F00F_BUG</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * All current models of Pentium and Pentium with MMX technology CPUs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have the F0 0F bug, which lets nonprivileged users lock up the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * system.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that the workaround only should be initialized once...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#f00f_bug\">f00f_bug</a> = 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#paravirt_enabled\">paravirt_enabled</a>() && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 5) {", 
"<span class=\"ts\"/><span class=\"ts\"/>static int <a class=\"id\" href=\"#f00f_workaround_enabled\">f00f_workaround_enabled</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#f00f_bug\">f00f_bug</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#f00f_workaround_enabled\">f00f_workaround_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trap_init_f00f_bug\">trap_init_f00f_bug</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"Intel Pentium with F0 0F bug - workaround enabled.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f00f_workaround_enabled\">f00f_workaround_enabled</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SEP CPUID bug: Pentium Pro reports SEP but doesn't have it until</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * model 3 mask 3</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a><<8 | <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a><<4 | <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a>) &lt; 0x633)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_SEP\">X86_FEATURE_SEP</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * P4 Xeon errata 037 workaround.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hardware prefetcher may cause stale data to be loaded into the cache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 15) && (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 1) && (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_IA32_MISC_ENABLE\">MSR_IA32_MISC_ENABLE</a>, <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#lo\">lo</a> &amp; <a class=\"id\" href=\"#MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE\">MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a> (<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"CPU: C0 stepping P4 Xeon detected.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a> (<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"CPU: Disabling hardware prefetching (Errata 037)\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lo\">lo</a> |= <a class=\"id\" href=\"#MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE\">MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsr\">wrmsr</a>(<a class=\"id\" href=\"#MSR_IA32_MISC_ENABLE\">MSR_IA32_MISC_ENABLE</a>, <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See if we have a good local APIC by checking for buggy Pentia,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * i.e. all B steppings and the C2 stepping of P54C when using their</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * integrated APIC (see 11AP erratum in \"Pentium Processor</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Specification Update\").</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a> && (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a><<8 | <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a><<4) == 0x520 &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> &lt; 0x6 || <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 0xb))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_11AP\">X86_FEATURE_11AP</a>);", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_INTEL_USERCOPY\">CONFIG_X86_INTEL_USERCOPY</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set up the preferred alignment for movsl bulk memory moves</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a>) {", 
"<span class=\"ts\"/>case 4:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 486: untested */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 5:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Old Pentia: untested */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 6:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* PII/PIII only like movsl with 8-byte alignment */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#movsl_mask\">movsl_mask</a>.<a class=\"id\" href=\"#mask\">mask</a> = 7;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 15:<span class=\"ts\"/><span class=\"comment\">/* P4 is OK down to 8-byte alignment */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#movsl_mask\">movsl_mask</a>.<a class=\"id\" href=\"#mask\">mask</a> = 7;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_NUMAQ\">CONFIG_X86_NUMAQ</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numaq_tsc_disable\">numaq_tsc_disable</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#intel_smp_check\">intel_smp_check</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"}", 
"#else", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#intel_workarounds\">intel_workarounds</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#srat_detect_node\">srat_detect_node</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>)", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#apicid\">apicid</a> = <a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a> ? <a class=\"id\" href=\"#hard_smp_processor_id\">hard_smp_processor_id</a>() : <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#apicid\">apicid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't do the funky fallback heuristics the AMD version employs</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   for now. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>[<a class=\"id\" href=\"#apicid\">apicid</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> == <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#node_online_map\">node_online_map</a>);", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#node\">node</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reuse the value from init_cpu_to_node() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numa_set_node\">numa_set_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find out the number of processor cores on the die</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#intel_num_cpu_cores\">intel_num_cpu_cores</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a> &lt; 4)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Intel has a non-standard dependency on %ecx for this CPUID level. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid_count\">cpuid_count</a>(4, 0, &amp;<a class=\"id\" href=\"#eax\">eax</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>, &amp;<a class=\"id\" href=\"#edx\">edx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#eax\">eax</a> &amp; 0x1f)", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#eax\">eax</a> >> 26) + 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#detect_vmx_virtcap\">detect_vmx_virtcap</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Intel VMX MSR indicated features */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VMX_FEATURE_PROC_CTLS_TPR_SHADOW\">X86_VMX_FEATURE_PROC_CTLS_TPR_SHADOW</a><span class=\"ts\"/>0x00200000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VMX_FEATURE_PROC_CTLS_VNMI\">X86_VMX_FEATURE_PROC_CTLS_VNMI</a><span class=\"ts\"/><span class=\"ts\"/>0x00400000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VMX_FEATURE_PROC_CTLS_2ND_CTLS\">X86_VMX_FEATURE_PROC_CTLS_2ND_CTLS</a><span class=\"ts\"/>0x80000000", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VMX_FEATURE_PROC_CTLS2_VIRT_APIC\">X86_VMX_FEATURE_PROC_CTLS2_VIRT_APIC</a><span class=\"ts\"/>0x00000001", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VMX_FEATURE_PROC_CTLS2_EPT\">X86_VMX_FEATURE_PROC_CTLS2_EPT</a><span class=\"ts\"/><span class=\"ts\"/>0x00000002", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X86_VMX_FEATURE_PROC_CTLS2_VPID\">X86_VMX_FEATURE_PROC_CTLS2_VPID</a><span class=\"ts\"/><span class=\"ts\"/>0x00000020", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#vmx_msr_low\">vmx_msr_low</a>, <a class=\"id\" href=\"#vmx_msr_high\">vmx_msr_high</a>, <a class=\"id\" href=\"#msr_ctl\">msr_ctl</a>, <a class=\"id\" href=\"#msr_ctl2\">msr_ctl2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_TPR_SHADOW\">X86_FEATURE_TPR_SHADOW</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_VNMI\">X86_FEATURE_VNMI</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_FLEXPRIORITY\">X86_FEATURE_FLEXPRIORITY</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_EPT\">X86_FEATURE_EPT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_VPID\">X86_FEATURE_VPID</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_IA32_VMX_PROCBASED_CTLS\">MSR_IA32_VMX_PROCBASED_CTLS</a>, <a class=\"id\" href=\"#vmx_msr_low\">vmx_msr_low</a>, <a class=\"id\" href=\"#vmx_msr_high\">vmx_msr_high</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msr_ctl\">msr_ctl</a> = <a class=\"id\" href=\"#vmx_msr_high\">vmx_msr_high</a> | <a class=\"id\" href=\"#vmx_msr_low\">vmx_msr_low</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msr_ctl\">msr_ctl</a> &amp; <a class=\"id\" href=\"#X86_VMX_FEATURE_PROC_CTLS_TPR_SHADOW\">X86_VMX_FEATURE_PROC_CTLS_TPR_SHADOW</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_TPR_SHADOW\">X86_FEATURE_TPR_SHADOW</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msr_ctl\">msr_ctl</a> &amp; <a class=\"id\" href=\"#X86_VMX_FEATURE_PROC_CTLS_VNMI\">X86_VMX_FEATURE_PROC_CTLS_VNMI</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_VNMI\">X86_FEATURE_VNMI</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msr_ctl\">msr_ctl</a> &amp; <a class=\"id\" href=\"#X86_VMX_FEATURE_PROC_CTLS_2ND_CTLS\">X86_VMX_FEATURE_PROC_CTLS_2ND_CTLS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_IA32_VMX_PROCBASED_CTLS2\">MSR_IA32_VMX_PROCBASED_CTLS2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#vmx_msr_low\">vmx_msr_low</a>, <a class=\"id\" href=\"#vmx_msr_high\">vmx_msr_high</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msr_ctl2\">msr_ctl2</a> = <a class=\"id\" href=\"#vmx_msr_high\">vmx_msr_high</a> | <a class=\"id\" href=\"#vmx_msr_low\">vmx_msr_low</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#msr_ctl2\">msr_ctl2</a> &amp; <a class=\"id\" href=\"#X86_VMX_FEATURE_PROC_CTLS2_VIRT_APIC\">X86_VMX_FEATURE_PROC_CTLS2_VIRT_APIC</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#msr_ctl\">msr_ctl</a> &amp; <a class=\"id\" href=\"#X86_VMX_FEATURE_PROC_CTLS_TPR_SHADOW\">X86_VMX_FEATURE_PROC_CTLS_TPR_SHADOW</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_FLEXPRIORITY\">X86_FEATURE_FLEXPRIORITY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msr_ctl2\">msr_ctl2</a> &amp; <a class=\"id\" href=\"#X86_VMX_FEATURE_PROC_CTLS2_EPT\">X86_VMX_FEATURE_PROC_CTLS2_EPT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_EPT\">X86_FEATURE_EPT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msr_ctl2\">msr_ctl2</a> &amp; <a class=\"id\" href=\"#X86_VMX_FEATURE_PROC_CTLS2_VPID\">X86_VMX_FEATURE_PROC_CTLS2_VPID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_VPID\">X86_FEATURE_VPID</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#init_intel\">init_intel</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#l2\">l2</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_init_intel\">early_init_intel</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#intel_workarounds\">intel_workarounds</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Detect the extended topology information if available. This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will reinitialise the initial_apicid which will be used</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in init_intel_cacheinfo()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#detect_extended_topology\">detect_extended_topology</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l2\">l2</a> = <a class=\"id\" href=\"#init_intel_cacheinfo\">init_intel_cacheinfo</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a> &gt; 9) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#eax\">eax</a> = <a class=\"id\" href=\"#cpuid_eax\">cpuid_eax</a>(10);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check for version and the number of counters */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#eax\">eax</a> &amp; 0xff) && (((<a class=\"id\" href=\"#eax\">eax</a>>>8) &amp; 0xff) &gt; 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_ARCH_PERFMON\">X86_FEATURE_ARCH_PERFMON</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_xmm2\">cpu_has_xmm2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_LFENCE_RDTSC\">X86_FEATURE_LFENCE_RDTSC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_ds\">cpu_has_ds</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#l1\">l1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_IA32_MISC_ENABLE\">MSR_IA32_MISC_ENABLE</a>, <a class=\"id\" href=\"#l1\">l1</a>, <a class=\"id\" href=\"#l2\">l2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#l1\">l1</a> &amp; (1<<11)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_BTS\">X86_FEATURE_BTS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#l1\">l1</a> &amp; (1<<12)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_PEBS\">X86_FEATURE_PEBS</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 6 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 29 && <a class=\"id\" href=\"#cpu_has_clflush\">cpu_has_clflush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_CLFLUSH_MONITOR\">X86_FEATURE_CLFLUSH_MONITOR</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 15)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_cache_alignment\">x86_cache_alignment</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_clflush_size\">x86_clflush_size</a> * 2;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 6)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_REP_GOOD\">X86_FEATURE_REP_GOOD</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Names for the Pentium II/Celeron processors</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * detectable only by also checking the cache size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Dixon is NOT a Celeron.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 6) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case 5:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l2\">l2</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = \"Celeron (Covington)\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#l2\">l2</a> == 256)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = \"Mobile Pentium II (Dixon)\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case 6:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l2\">l2</a> == 128)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = \"Celeron (Mendocino)\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 0 || <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == 5)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = \"Celeron-A\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case 8:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#l2\">l2</a> == 128)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = \"Celeron (Coppermine)\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 15)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_P4\">X86_FEATURE_P4</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 6)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_P3\">X86_FEATURE_P3</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_XTOPOLOGY\">X86_FEATURE_XTOPOLOGY</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * let's use the legacy cpuid vector 0x1 and 0x4 for topology</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * detection.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_max_cores\">x86_max_cores</a> = <a class=\"id\" href=\"#intel_num_cpu_cores\">intel_num_cpu_cores</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detect_ht\">detect_ht</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Work around errata */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#srat_detect_node\">srat_detect_node</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_VMX\">X86_FEATURE_VMX</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#detect_vmx_virtcap\">detect_vmx_virtcap</a>(<a class=\"id\" href=\"#c\">c</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"static unsigned int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#intel_size_cache\">intel_size_cache</a>(struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>, unsigned int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Intel PIII Tualatin. This comes in two flavours.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * One has 256kb of cache, the other 512. We have no way</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to determine which, so we use a boottime override</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for the 512kb model, and assume 256 otherwise.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 6) && (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == 11) && (<a class=\"id\" href=\"#size\">size</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 256;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static const struct <a class=\"id\" href=\"#cpu_dev\">cpu_dev</a> <a class=\"id\" href=\"#__cpuinitconst\">__cpuinitconst</a> <a class=\"id\" href=\"#intel_cpu_dev\">intel_cpu_dev</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_vendor\">c_vendor</a><span class=\"ts\"/>= \"Intel\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_ident\">c_ident</a><span class=\"ts\"/>= { \"GenuineIntel\" },", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_models\">c_models</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#vendor\">vendor</a> = <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>, .<a class=\"id\" href=\"#family\">family</a> = 4, .<a class=\"id\" href=\"#model_names\">model_names</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>  {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [0] = \"486 DX-25/33\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [1] = \"486 DX-50\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [2] = \"486 SX\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [3] = \"486 DX/2\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [4] = \"486 SL\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [5] = \"486 SX/2\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [7] = \"486 DX/2-WB\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [8] = \"486 DX/4\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [9] = \"486 DX/4-WB\"", 
"<span class=\"ts\"/><span class=\"ts\"/>  }", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#vendor\">vendor</a> = <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>, .<a class=\"id\" href=\"#family\">family</a> = 5, .<a class=\"id\" href=\"#model_names\">model_names</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>  {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [0] = \"Pentium 60/66 A-step\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [1] = \"Pentium 60/66\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [2] = \"Pentium 75 - 200\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [3] = \"OverDrive PODP5V83\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [4] = \"Pentium MMX\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [7] = \"Mobile Pentium 75 - 200\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [8] = \"Mobile Pentium MMX\"", 
"<span class=\"ts\"/><span class=\"ts\"/>  }", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#vendor\">vendor</a> = <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>, .<a class=\"id\" href=\"#family\">family</a> = 6, .<a class=\"id\" href=\"#model_names\">model_names</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>  {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [0] = \"Pentium Pro A-step\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [1] = \"Pentium Pro\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [3] = \"Pentium II (Klamath)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [4] = \"Pentium II (Deschutes)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [5] = \"Pentium II (Deschutes)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [6] = \"Mobile Pentium II\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [7] = \"Pentium III (Katmai)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [8] = \"Pentium III (Coppermine)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [10] = \"Pentium III (Cascades)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [11] = \"Pentium III (Tualatin)\",", 
"<span class=\"ts\"/><span class=\"ts\"/>  }", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#vendor\">vendor</a> = <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>, .<a class=\"id\" href=\"#family\">family</a> = 15, .<a class=\"id\" href=\"#model_names\">model_names</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>  {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [0] = \"Pentium 4 (Unknown)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [1] = \"Pentium 4 (Willamette)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [2] = \"Pentium 4 (Northwood)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [4] = \"Pentium 4 (Foster)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  [5] = \"Pentium 4 (Foster)\",", 
"<span class=\"ts\"/><span class=\"ts\"/>  }", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_size_cache\">c_size_cache</a><span class=\"ts\"/>= <a class=\"id\" href=\"#intel_size_cache\">intel_size_cache</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_early_init\">c_early_init</a>   = <a class=\"id\" href=\"#early_init_intel\">early_init_intel</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_init\">c_init</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#init_intel\">init_intel</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#c_x86_vendor\">c_x86_vendor</a><span class=\"ts\"/>= <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>,", 
"};", 
"", 
"<a class=\"id\" href=\"#cpu_dev_register\">cpu_dev_register</a>(<a class=\"id\" href=\"#intel_cpu_dev\">intel_cpu_dev</a>);", 
"", 
];
xr_frag_insert('l/b0/8c538fe6705e3337fc65f594564d45937be897.xr', __xr_tmp);
