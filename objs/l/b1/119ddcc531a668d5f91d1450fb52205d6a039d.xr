var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * security/tomoyo/group.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2005-2010  NTT DATA CORPORATION</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"common.h\"", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_same_path_group\">tomoyo_same_path_group</a>(const struct <a class=\"id\" href=\"#tomoyo_acl_head\">tomoyo_acl_head</a> *<a class=\"id\" href=\"#a\">a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#tomoyo_acl_head\">tomoyo_acl_head</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#tomoyo_path_group\">tomoyo_path_group</a>, <a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#member_name\">member_name</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#b\">b</a>, struct <a class=\"id\" href=\"#tomoyo_path_group\">tomoyo_path_group</a>, <a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#member_name\">member_name</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_same_number_group\">tomoyo_same_number_group</a>(const struct <a class=\"id\" href=\"#tomoyo_acl_head\">tomoyo_acl_head</a> *<a class=\"id\" href=\"#a\">a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#tomoyo_acl_head\">tomoyo_acl_head</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#memcmp\">memcmp</a>(&amp;<a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#tomoyo_number_group\">tomoyo_number_group</a>, <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>       -><a class=\"id\" href=\"#number\">number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#b\">b</a>, struct <a class=\"id\" href=\"#tomoyo_number_group\">tomoyo_number_group</a>, <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>       -><a class=\"id\" href=\"#number\">number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       sizeof(<a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#tomoyo_number_group\">tomoyo_number_group</a>, <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      -><a class=\"id\" href=\"#number\">number</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_write_group - Write \"struct tomoyo_path_group\"/\"struct tomoyo_number_group\" list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @data:      String to parse.</span>", 
"<span class=\"comment\"> * @is_delete: True if it is a delete request.</span>", 
"<span class=\"comment\"> * @type:      Type of this group.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, negative value otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tomoyo_write_group\">tomoyo_write_group</a>(char *<a class=\"id\" href=\"#data\">data</a>, const <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_delete\">is_delete</a>, const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_group\">tomoyo_group</a> *<a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#member\">member</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#w\">w</a>[2];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tomoyo_tokenize\">tomoyo_tokenize</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#w\">w</a>, sizeof(<a class=\"id\" href=\"#w\">w</a>)) || !<a class=\"id\" href=\"#w\">w</a>[1][0])", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#tomoyo_get_group\">tomoyo_get_group</a>(<a class=\"id\" href=\"#w\">w</a>[0], <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#group\">group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#member\">member</a> = &amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#member_list\">member_list</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#TOMOYO_PATH_GROUP\">TOMOYO_PATH_GROUP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_path_group\">tomoyo_path_group</a> <a class=\"id\" href=\"#e\">e</a> = { };", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>.<a class=\"id\" href=\"#member_name\">member_name</a> = <a class=\"id\" href=\"#tomoyo_get_name\">tomoyo_get_name</a>(<a class=\"id\" href=\"#w\">w</a>[1]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#e\">e</a>.<a class=\"id\" href=\"#member_name\">member_name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#tomoyo_update_policy\">tomoyo_update_policy</a>(&amp;<a class=\"id\" href=\"#e\">e</a>.<a class=\"id\" href=\"#head\">head</a>, sizeof(<a class=\"id\" href=\"#e\">e</a>), <a class=\"id\" href=\"#is_delete\">is_delete</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#member\">member</a>, <a class=\"id\" href=\"#tomoyo_same_path_group\">tomoyo_same_path_group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_put_name\">tomoyo_put_name</a>(<a class=\"id\" href=\"#e\">e</a>.<a class=\"id\" href=\"#member_name\">member_name</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#TOMOYO_NUMBER_GROUP\">TOMOYO_NUMBER_GROUP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_number_group\">tomoyo_number_group</a> <a class=\"id\" href=\"#e\">e</a> = { };", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#w\">w</a>[1][0] == '@'", 
"<span class=\"ts\"/><span class=\"ts\"/>    || !<a class=\"id\" href=\"#tomoyo_parse_number_union\">tomoyo_parse_number_union</a>(<a class=\"id\" href=\"#w\">w</a>[1], &amp;<a class=\"id\" href=\"#e\">e</a>.<a class=\"id\" href=\"#number\">number</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    || <a class=\"id\" href=\"#e\">e</a>.<a class=\"id\" href=\"#number\">number</a>.<a class=\"id\" href=\"#values\">values</a>[0] &gt; <a class=\"id\" href=\"#e\">e</a>.<a class=\"id\" href=\"#number\">number</a>.<a class=\"id\" href=\"#values\">values</a>[1])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#tomoyo_update_policy\">tomoyo_update_policy</a>(&amp;<a class=\"id\" href=\"#e\">e</a>.<a class=\"id\" href=\"#head\">head</a>, sizeof(<a class=\"id\" href=\"#e\">e</a>), <a class=\"id\" href=\"#is_delete\">is_delete</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#member\">member</a>, <a class=\"id\" href=\"#tomoyo_same_number_group\">tomoyo_same_number_group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tomoyo_put_number_union() is not needed because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * w[1][0] != '@'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_put_group\">tomoyo_put_group</a>(<a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_path_matches_group - Check whether the given pathname matches members of the given pathname group.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @pathname:        The name of pathname.</span>", 
"<span class=\"comment\"> * @group:           Pointer to \"struct tomoyo_path_group\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns matched member's pathname if @pathname matches pathnames in @group,</span>", 
"<span class=\"comment\"> * NULL otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller holds tomoyo_read_lock().</span>", 
"<span class=\"comment\"> */</span>", 
"const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *", 
"<a class=\"id\" href=\"#tomoyo_path_matches_group\">tomoyo_path_matches_group</a>(const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#pathname\">pathname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#tomoyo_group\">tomoyo_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_path_group\">tomoyo_path_group</a> *<a class=\"id\" href=\"#member\">member</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#member\">member</a>, &amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#member_list\">member_list</a>, <a class=\"id\" href=\"#head\">head</a>.<a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#member\">member</a>-><a class=\"id\" href=\"#head\">head</a>.<a class=\"id\" href=\"#is_deleted\">is_deleted</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tomoyo_path_matches_pattern\">tomoyo_path_matches_pattern</a>(<a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#member\">member</a>-><a class=\"id\" href=\"#member_name\">member_name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#member\">member</a>-><a class=\"id\" href=\"#member_name\">member_name</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_number_matches_group - Check whether the given number matches members of the given number group.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @min:   Min number.</span>", 
"<span class=\"comment\"> * @max:   Max number.</span>", 
"<span class=\"comment\"> * @group: Pointer to \"struct tomoyo_number_group\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if @min and @max partially overlaps @group, false otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller holds tomoyo_read_lock().</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_number_matches_group\">tomoyo_number_matches_group</a>(const unsigned long <a class=\"id\" href=\"#min\">min</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const unsigned long <a class=\"id\" href=\"#max\">max</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#tomoyo_group\">tomoyo_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_number_group\">tomoyo_number_group</a> *<a class=\"id\" href=\"#member\">member</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#matched\">matched</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#member\">member</a>, &amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#member_list\">member_list</a>, <a class=\"id\" href=\"#head\">head</a>.<a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#member\">member</a>-><a class=\"id\" href=\"#head\">head</a>.<a class=\"id\" href=\"#is_deleted\">is_deleted</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#min\">min</a> &gt; <a class=\"id\" href=\"#member\">member</a>-><a class=\"id\" href=\"#number\">number</a>.<a class=\"id\" href=\"#values\">values</a>[1] ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#max\">max</a> &lt; <a class=\"id\" href=\"#member\">member</a>-><a class=\"id\" href=\"#number\">number</a>.<a class=\"id\" href=\"#values\">values</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#matched\">matched</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#matched\">matched</a>;", 
"}", 
];
xr_frag_insert('l/b1/119ddcc531a668d5f91d1450fb52205d6a039d.xr', __xr_tmp);
