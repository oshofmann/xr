var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Flexible array managed in PAGE_SIZE parts</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright IBM Corporation, 2009</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: Dave Hansen &lt;dave@linux.vnet.ibm.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#flex_array\">flex_array</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#flex_array_part\">flex_array_part</a> {", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#FLEX_ARRAY_PART_SIZE\">FLEX_ARRAY_PART_SIZE</a>];", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If a user requests an allocation which is small</span>", 
"<span class=\"comment\"> * enough, we may simply use the space in the</span>", 
"<span class=\"comment\"> * flex_array-&gt;parts[] array to store the user</span>", 
"<span class=\"comment\"> * data.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#elements_fit_in_base\">elements_fit_in_base</a>(struct <a class=\"id\" href=\"#flex_array\">flex_array</a> *<a class=\"id\" href=\"#fa\">fa</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#data_size\">data_size</a> = <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#element_size\">element_size</a> * <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#total_nr_elements\">total_nr_elements</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data_size\">data_size</a> <= <a class=\"id\" href=\"#FLEX_ARRAY_BASE_BYTES_LEFT\">FLEX_ARRAY_BASE_BYTES_LEFT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flex_array_alloc - allocate a new flexible array</span>", 
"<span class=\"comment\"> * @element_size:<span class=\"ts\"/>the size of individual elements in the array</span>", 
"<span class=\"comment\"> * @total:<span class=\"ts\"/><span class=\"ts\"/>total number of elements that this should hold</span>", 
"<span class=\"comment\"> * @flags:<span class=\"ts\"/><span class=\"ts\"/>page allocation flags to use for base array</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: all locking must be provided by the caller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @total is used to size internal structures.  If the user ever</span>", 
"<span class=\"comment\"> * accesses any array indexes &gt;=@total, it will produce errors.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The maximum number of elements is defined as: the number of</span>", 
"<span class=\"comment\"> * elements that can be stored in a page times the number of</span>", 
"<span class=\"comment\"> * page pointers that we can fit in the base structure or (using</span>", 
"<span class=\"comment\"> * integer math):</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>(PAGE_SIZE/element_size) * (PAGE_SIZE-8)/sizeof(void *)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Here's a table showing example capacities.  Note that the maximum</span>", 
"<span class=\"comment\"> * index that the get/put() functions is just nr_objects-1.   This</span>", 
"<span class=\"comment\"> * basically means that you get 4MB of storage on 32-bit and 2MB on</span>", 
"<span class=\"comment\"> * 64-bit.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Element size | Objects | Objects |</span>", 
"<span class=\"comment\"> * PAGE_SIZE=4k |  32-bit |  64-bit |</span>", 
"<span class=\"comment\"> * ---------------------------------|</span>", 
"<span class=\"comment\"> *      1 bytes | 4186112 | 2093056 |</span>", 
"<span class=\"comment\"> *      2 bytes | 2093056 | 1046528 |</span>", 
"<span class=\"comment\"> *      3 bytes | 1395030 |  697515 |</span>", 
"<span class=\"comment\"> *      4 bytes | 1046528 |  523264 |</span>", 
"<span class=\"comment\"> *     32 bytes |  130816 |   65408 |</span>", 
"<span class=\"comment\"> *     33 bytes |  126728 |   63364 |</span>", 
"<span class=\"comment\"> *   2048 bytes |    2044 |    1022 |</span>", 
"<span class=\"comment\"> *   2049 bytes |    1022 |     511 |</span>", 
"<span class=\"comment\"> *       void * | 1046528 |  261632 |</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Since 64-bit pointers are twice the size, we lose half the</span>", 
"<span class=\"comment\"> * capacity in the base structure.  Also note that no effort is made</span>", 
"<span class=\"comment\"> * to efficiently pack objects across page boundaries.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#flex_array\">flex_array</a> *<a class=\"id\" href=\"#flex_array_alloc\">flex_array_alloc</a>(int <a class=\"id\" href=\"#element_size\">element_size</a>, unsigned int <a class=\"id\" href=\"#total\">total</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#flex_array\">flex_array</a> *<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_size\">max_size</a> = <a class=\"id\" href=\"#FLEX_ARRAY_NR_BASE_PTRS\">FLEX_ARRAY_NR_BASE_PTRS</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FLEX_ARRAY_ELEMENTS_PER_PART\">FLEX_ARRAY_ELEMENTS_PER_PART</a>(<a class=\"id\" href=\"#element_size\">element_size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* max_size will end up 0 if element_size &gt; PAGE_SIZE */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#total\">total</a> &gt; <a class=\"id\" href=\"#max_size\">max_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#flex_array\">flex_array</a>), <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>-><a class=\"id\" href=\"#element_size\">element_size</a> = <a class=\"id\" href=\"#element_size\">element_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>-><a class=\"id\" href=\"#total_nr_elements\">total_nr_elements</a> = <a class=\"id\" href=\"#total\">total</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#elements_fit_in_base\">elements_fit_in_base</a>(<a class=\"id\" href=\"#ret\">ret</a>) && !(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#ret\">ret</a>-><a class=\"id\" href=\"#parts\">parts</a>[0], <a class=\"id\" href=\"#FLEX_ARRAY_FREE\">FLEX_ARRAY_FREE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FLEX_ARRAY_BASE_BYTES_LEFT\">FLEX_ARRAY_BASE_BYTES_LEFT</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#fa_element_to_part_nr\">fa_element_to_part_nr</a>(struct <a class=\"id\" href=\"#flex_array\">flex_array</a> *<a class=\"id\" href=\"#fa\">fa</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#element_nr\">element_nr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#element_nr\">element_nr</a> / <a class=\"id\" href=\"#FLEX_ARRAY_ELEMENTS_PER_PART\">FLEX_ARRAY_ELEMENTS_PER_PART</a>(<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#element_size\">element_size</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flex_array_free_parts - just free the second-level pages</span>", 
"<span class=\"comment\"> * @fa:<span class=\"ts\"/><span class=\"ts\"/>the flex array from which to free parts</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is to be used in cases where the base 'struct flex_array'</span>", 
"<span class=\"comment\"> * has been statically allocated and should not be free.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#flex_array_free_parts\">flex_array_free_parts</a>(struct <a class=\"id\" href=\"#flex_array\">flex_array</a> *<a class=\"id\" href=\"#fa\">fa</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#part_nr\">part_nr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#elements_fit_in_base\">elements_fit_in_base</a>(<a class=\"id\" href=\"#fa\">fa</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#part_nr\">part_nr</a> = 0; <a class=\"id\" href=\"#part_nr\">part_nr</a> &lt; <a class=\"id\" href=\"#FLEX_ARRAY_NR_BASE_PTRS\">FLEX_ARRAY_NR_BASE_PTRS</a>; <a class=\"id\" href=\"#part_nr\">part_nr</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#parts\">parts</a>[<a class=\"id\" href=\"#part_nr\">part_nr</a>]);", 
"}", 
"", 
"void <a class=\"id\" href=\"#flex_array_free\">flex_array_free</a>(struct <a class=\"id\" href=\"#flex_array\">flex_array</a> *<a class=\"id\" href=\"#fa\">fa</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flex_array_free_parts\">flex_array_free_parts</a>(<a class=\"id\" href=\"#fa\">fa</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#fa\">fa</a>);", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#index_inside_part\">index_inside_part</a>(struct <a class=\"id\" href=\"#flex_array\">flex_array</a> *<a class=\"id\" href=\"#fa\">fa</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#element_nr\">element_nr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#part_offset\">part_offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part_offset\">part_offset</a> = <a class=\"id\" href=\"#element_nr\">element_nr</a> %", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FLEX_ARRAY_ELEMENTS_PER_PART\">FLEX_ARRAY_ELEMENTS_PER_PART</a>(<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#element_size\">element_size</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#part_offset\">part_offset</a> * <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#element_size\">element_size</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#flex_array_part\">flex_array_part</a> *", 
"<a class=\"id\" href=\"#__fa_get_part\">__fa_get_part</a>(struct <a class=\"id\" href=\"#flex_array\">flex_array</a> *<a class=\"id\" href=\"#fa\">fa</a>, int <a class=\"id\" href=\"#part_nr\">part_nr</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#flex_array_part\">flex_array_part</a> *<a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#parts\">parts</a>[<a class=\"id\" href=\"#part_nr\">part_nr</a>];", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#part\">part</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#flex_array_part\">flex_array_part</a>), <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#part\">part</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#part\">part</a>, <a class=\"id\" href=\"#FLEX_ARRAY_FREE\">FLEX_ARRAY_FREE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#flex_array_part\">flex_array_part</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#parts\">parts</a>[<a class=\"id\" href=\"#part_nr\">part_nr</a>] = <a class=\"id\" href=\"#part\">part</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#part\">part</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flex_array_put - copy data into the array at @element_nr</span>", 
"<span class=\"comment\"> * @fa:<span class=\"ts\"/><span class=\"ts\"/>the flex array to copy data into</span>", 
"<span class=\"comment\"> * @element_nr:<span class=\"ts\"/>index of the position in which to insert</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>the new element.</span>", 
"<span class=\"comment\"> * @src:<span class=\"ts\"/>address of data to copy into the array</span>", 
"<span class=\"comment\"> * @flags:<span class=\"ts\"/>page allocation flags to use for array expansion</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this *copies* the contents of @src into</span>", 
"<span class=\"comment\"> * the array.  If you are trying to store an array of</span>", 
"<span class=\"comment\"> * pointers, make sure to pass in &amp;ptr instead of ptr.</span>", 
"<span class=\"comment\"> * You may instead wish to use the flex_array_put_ptr()</span>", 
"<span class=\"comment\"> * helper function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking must be provided by the caller.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#flex_array_put\">flex_array_put</a>(struct <a class=\"id\" href=\"#flex_array\">flex_array</a> *<a class=\"id\" href=\"#fa\">fa</a>, unsigned int <a class=\"id\" href=\"#element_nr\">element_nr</a>, void *<a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#part_nr\">part_nr</a> = <a class=\"id\" href=\"#fa_element_to_part_nr\">fa_element_to_part_nr</a>(<a class=\"id\" href=\"#fa\">fa</a>, <a class=\"id\" href=\"#element_nr\">element_nr</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#flex_array_part\">flex_array_part</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#dst\">dst</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#element_nr\">element_nr</a> >= <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#total_nr_elements\">total_nr_elements</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#elements_fit_in_base\">elements_fit_in_base</a>(<a class=\"id\" href=\"#fa\">fa</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = (struct <a class=\"id\" href=\"#flex_array_part\">flex_array_part</a> *)&amp;<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#parts\">parts</a>[0];", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#__fa_get_part\">__fa_get_part</a>(<a class=\"id\" href=\"#fa\">fa</a>, <a class=\"id\" href=\"#part_nr\">part_nr</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#part\">part</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> = &amp;<a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#index_inside_part\">index_inside_part</a>(<a class=\"id\" href=\"#fa\">fa</a>, <a class=\"id\" href=\"#element_nr\">element_nr</a>)];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#element_size\">element_size</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flex_array_clear - clear element in array at @element_nr</span>", 
"<span class=\"comment\"> * @fa:<span class=\"ts\"/><span class=\"ts\"/>the flex array of the element.</span>", 
"<span class=\"comment\"> * @element_nr:<span class=\"ts\"/>index of the position to clear.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking must be provided by the caller.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#flex_array_clear\">flex_array_clear</a>(struct <a class=\"id\" href=\"#flex_array\">flex_array</a> *<a class=\"id\" href=\"#fa\">fa</a>, unsigned int <a class=\"id\" href=\"#element_nr\">element_nr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#part_nr\">part_nr</a> = <a class=\"id\" href=\"#fa_element_to_part_nr\">fa_element_to_part_nr</a>(<a class=\"id\" href=\"#fa\">fa</a>, <a class=\"id\" href=\"#element_nr\">element_nr</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#flex_array_part\">flex_array_part</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#dst\">dst</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#element_nr\">element_nr</a> >= <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#total_nr_elements\">total_nr_elements</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#elements_fit_in_base\">elements_fit_in_base</a>(<a class=\"id\" href=\"#fa\">fa</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = (struct <a class=\"id\" href=\"#flex_array_part\">flex_array_part</a> *)&amp;<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#parts\">parts</a>[0];", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#parts\">parts</a>[<a class=\"id\" href=\"#part_nr\">part_nr</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#part\">part</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> = &amp;<a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#index_inside_part\">index_inside_part</a>(<a class=\"id\" href=\"#fa\">fa</a>, <a class=\"id\" href=\"#element_nr\">element_nr</a>)];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#FLEX_ARRAY_FREE\">FLEX_ARRAY_FREE</a>, <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#element_size\">element_size</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flex_array_prealloc - guarantee that array space exists</span>", 
"<span class=\"comment\"> * @fa:<span class=\"ts\"/><span class=\"ts\"/>the flex array for which to preallocate parts</span>", 
"<span class=\"comment\"> * @start:<span class=\"ts\"/>index of first array element for which space is allocated</span>", 
"<span class=\"comment\"> * @end:<span class=\"ts\"/>index of last (inclusive) element for which space is allocated</span>", 
"<span class=\"comment\"> * @flags:<span class=\"ts\"/>page allocation flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This will guarantee that no future calls to flex_array_put()</span>", 
"<span class=\"comment\"> * will allocate memory.  It can be used if you are expecting to</span>", 
"<span class=\"comment\"> * be holding a lock or in some atomic context while writing</span>", 
"<span class=\"comment\"> * data into the array.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking must be provided by the caller.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#flex_array_prealloc\">flex_array_prealloc</a>(struct <a class=\"id\" href=\"#flex_array\">flex_array</a> *<a class=\"id\" href=\"#fa\">fa</a>, unsigned int <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#start_part\">start_part</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#end_part\">end_part</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#part_nr\">part_nr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#flex_array_part\">flex_array_part</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#total_nr_elements\">total_nr_elements</a> || <a class=\"id\" href=\"#end\">end</a> >= <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#total_nr_elements\">total_nr_elements</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#elements_fit_in_base\">elements_fit_in_base</a>(<a class=\"id\" href=\"#fa\">fa</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_part\">start_part</a> = <a class=\"id\" href=\"#fa_element_to_part_nr\">fa_element_to_part_nr</a>(<a class=\"id\" href=\"#fa\">fa</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_part\">end_part</a> = <a class=\"id\" href=\"#fa_element_to_part_nr\">fa_element_to_part_nr</a>(<a class=\"id\" href=\"#fa\">fa</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#part_nr\">part_nr</a> = <a class=\"id\" href=\"#start_part\">start_part</a>; <a class=\"id\" href=\"#part_nr\">part_nr</a> <= <a class=\"id\" href=\"#end_part\">end_part</a>; <a class=\"id\" href=\"#part_nr\">part_nr</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#__fa_get_part\">__fa_get_part</a>(<a class=\"id\" href=\"#fa\">fa</a>, <a class=\"id\" href=\"#part_nr\">part_nr</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#part\">part</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flex_array_get - pull data back out of the array</span>", 
"<span class=\"comment\"> * @fa:<span class=\"ts\"/><span class=\"ts\"/>the flex array from which to extract data</span>", 
"<span class=\"comment\"> * @element_nr:<span class=\"ts\"/>index of the element to fetch from the array</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer to the data at index @element_nr.  Note</span>", 
"<span class=\"comment\"> * that this is a copy of the data that was passed in.  If you</span>", 
"<span class=\"comment\"> * are using this to store pointers, you'll get back &amp;ptr.  You</span>", 
"<span class=\"comment\"> * may instead wish to use the flex_array_get_ptr helper.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking must be provided by the caller.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#flex_array_get\">flex_array_get</a>(struct <a class=\"id\" href=\"#flex_array\">flex_array</a> *<a class=\"id\" href=\"#fa\">fa</a>, unsigned int <a class=\"id\" href=\"#element_nr\">element_nr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#part_nr\">part_nr</a> = <a class=\"id\" href=\"#fa_element_to_part_nr\">fa_element_to_part_nr</a>(<a class=\"id\" href=\"#fa\">fa</a>, <a class=\"id\" href=\"#element_nr\">element_nr</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#flex_array_part\">flex_array_part</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#element_nr\">element_nr</a> >= <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#total_nr_elements\">total_nr_elements</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#elements_fit_in_base\">elements_fit_in_base</a>(<a class=\"id\" href=\"#fa\">fa</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = (struct <a class=\"id\" href=\"#flex_array_part\">flex_array_part</a> *)&amp;<a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#parts\">parts</a>[0];", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#parts\">parts</a>[<a class=\"id\" href=\"#part_nr\">part_nr</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#part\">part</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#index_inside_part\">index_inside_part</a>(<a class=\"id\" href=\"#fa\">fa</a>, <a class=\"id\" href=\"#element_nr\">element_nr</a>)];", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flex_array_get_ptr - pull a ptr back out of the array</span>", 
"<span class=\"comment\"> * @fa:<span class=\"ts\"/><span class=\"ts\"/>the flex array from which to extract data</span>", 
"<span class=\"comment\"> * @element_nr:<span class=\"ts\"/>index of the element to fetch from the array</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the pointer placed in the flex array at element_nr using</span>", 
"<span class=\"comment\"> * flex_array_put_ptr().  This function should not be called if the</span>", 
"<span class=\"comment\"> * element in question was not set using the _put_ptr() helper.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#flex_array_get_ptr\">flex_array_get_ptr</a>(struct <a class=\"id\" href=\"#flex_array\">flex_array</a> *<a class=\"id\" href=\"#fa\">fa</a>, unsigned int <a class=\"id\" href=\"#element_nr\">element_nr</a>)", 
"{", 
"<span class=\"ts\"/>void **<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#flex_array_get\">flex_array_get</a>(<a class=\"id\" href=\"#fa\">fa</a>, <a class=\"id\" href=\"#element_nr\">element_nr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#part_is_free\">part_is_free</a>(struct <a class=\"id\" href=\"#flex_array_part\">flex_array_part</a> *<a class=\"id\" href=\"#part\">part</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; sizeof(struct <a class=\"id\" href=\"#flex_array_part\">flex_array_part</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#i\">i</a>] != <a class=\"id\" href=\"#FLEX_ARRAY_FREE\">FLEX_ARRAY_FREE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flex_array_shrink - free unused second-level pages</span>", 
"<span class=\"comment\"> * @fa:<span class=\"ts\"/><span class=\"ts\"/>the flex array to shrink</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Frees all second-level pages that consist solely of unused</span>", 
"<span class=\"comment\"> * elements.  Returns the number of pages freed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking must be provided by the caller.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#flex_array_shrink\">flex_array_shrink</a>(struct <a class=\"id\" href=\"#flex_array\">flex_array</a> *<a class=\"id\" href=\"#fa\">fa</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#flex_array_part\">flex_array_part</a> *<a class=\"id\" href=\"#part\">part</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#part_nr\">part_nr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#elements_fit_in_base\">elements_fit_in_base</a>(<a class=\"id\" href=\"#fa\">fa</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#part_nr\">part_nr</a> = 0; <a class=\"id\" href=\"#part_nr\">part_nr</a> &lt; <a class=\"id\" href=\"#FLEX_ARRAY_NR_BASE_PTRS\">FLEX_ARRAY_NR_BASE_PTRS</a>; <a class=\"id\" href=\"#part_nr\">part_nr</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#parts\">parts</a>[<a class=\"id\" href=\"#part_nr\">part_nr</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#part\">part</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#part_is_free\">part_is_free</a>(<a class=\"id\" href=\"#part\">part</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fa\">fa</a>-><a class=\"id\" href=\"#parts\">parts</a>[<a class=\"id\" href=\"#part_nr\">part_nr</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#part\">part</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
];
xr_frag_insert('l/b1/3fd538c22f5c885d8bde25acc6ec10b6803390.xr', __xr_tmp);
