var __xr_tmp = [
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_rq_target_io\">dm_rq_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#end_io_data\">end_io_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_request_endio_fn\">dm_request_endio_fn</a> <a class=\"id\" href=\"#rq_end_io\">rq_end_io</a> = <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#rq_end_io\">rq_end_io</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapped\">mapped</a> && <a class=\"id\" href=\"#rq_end_io\">rq_end_io</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#rq_end_io\">rq_end_io</a>(<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#error\">error</a>, &amp;<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The target wants to complete the I/O */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dm_end_request\">dm_end_request</a>(<a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#r\">r</a> == <a class=\"id\" href=\"#DM_ENDIO_INCOMPLETE\">DM_ENDIO_INCOMPLETE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The target will handle the I/O */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#r\">r</a> == <a class=\"id\" href=\"#DM_ENDIO_REQUEUE\">DM_ENDIO_REQUEUE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The target wants to requeue the I/O */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dm_requeue_unmapped_request\">dm_requeue_unmapped_request</a>(<a class=\"id\" href=\"#clone\">clone</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"unimplemented target endio return value: %d\", <a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Request completion handler for request-based dm</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dm_softirq_done\">dm_softirq_done</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#mapped\">mapped</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone\">clone</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#completion_data\">completion_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_rq_target_io\">dm_rq_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#end_io_data\">end_io_data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_FAILED\">REQ_FAILED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapped\">mapped</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_done\">dm_done</a>(<a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#mapped\">mapped</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Complete the clone and the original request with the error status</span>", 
"<span class=\"comment\"> * through softirq context.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dm_complete_request\">dm_complete_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone\">clone</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_rq_target_io\">dm_rq_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#end_io_data\">end_io_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#orig\">orig</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Barrier clones share an original request.  So can't use</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * softirq_done with the original.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Pass the clone to dm_done() directly in this special case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It is safe (even if clone-&gt;q-&gt;queue_lock is held here)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * because there is no I/O dispatching during the completion</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of barrier clone.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dm_done\">dm_done</a>(<a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#completion_data\">completion_data</a> = <a class=\"id\" href=\"#clone\">clone</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_complete_request\">blk_complete_request</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Complete the not-mapped clone and the original request with the error status</span>", 
"<span class=\"comment\"> * through softirq context.</span>", 
"<span class=\"comment\"> * Target's rq_end_io() function isn't called.</span>", 
"<span class=\"comment\"> * This may be used when the target's map_rq() function fails.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dm_kill_unmapped_request\">dm_kill_unmapped_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone\">clone</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_rq_target_io\">dm_rq_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#end_io_data\">end_io_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#orig\">orig</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Barrier clones share an original request.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Leave it to dm_end_request(), which handles this special</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#error\">error</a> &gt; 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dm_end_request\">dm_end_request</a>(<a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_FAILED\">REQ_FAILED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_complete_request\">dm_complete_request</a>(<a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dm_kill_unmapped_request\">dm_kill_unmapped_request</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called with the queue lock held</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#end_clone_request\">end_clone_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone\">clone</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For just cleaning up the information of the queue in which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the clone was dispatched.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The clone is *NOT* freed actually here because it is alloced from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dm own mempool and REQ_ALLOCED isn't set in clone-&gt;cmd_flags.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__blk_put_request\">__blk_put_request</a>(<a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#clone\">clone</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Actual request completion is done in a softirq context which doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hold the queue lock.  Otherwise, deadlock could occur because:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     - another request may be submitted by the upper level driver</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       of the stacking during the completion</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     - the submission which requires queue lock may be done</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       against this queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_complete_request\">dm_complete_request</a>(<a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return maximum size of I/O possible at the supplied sector up to the current</span>", 
"<span class=\"comment\"> * target boundary.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#max_io_len_target_boundary\">max_io_len_target_boundary</a>(<a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>, struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#target_offset\">target_offset</a> = <a class=\"id\" href=\"#dm_target_offset\">dm_target_offset</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#sector\">sector</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#target_offset\">target_offset</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#max_io_len\">max_io_len</a>(<a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>, struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#max_io_len_target_boundary\">max_io_len_target_boundary</a>(<a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#ti\">ti</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Does the target need to split even further ?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#split_io\">split_io</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#boundary\">boundary</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#dm_target_offset\">dm_target_offset</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boundary\">boundary</a> = ((<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#split_io\">split_io</a>) &amp; ~(<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#split_io\">split_io</a> - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   - <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#boundary\">boundary</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#boundary\">boundary</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__map_bio\">__map_bio</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#clone\">clone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#dm_target_io\">dm_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_end_io\">bi_end_io</a> = <a class=\"id\" href=\"#clone_endio\">clone_endio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a> = <a class=\"id\" href=\"#tio\">tio</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Map the clone.  If r == 0 we don't need to do</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anything, the target has assumed ownership of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this io.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#io_count\">io_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector\">sector</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#map\">map</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#clone\">clone</a>, &amp;<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a> == <a class=\"id\" href=\"#DM_MAPIO_REMAPPED\">DM_MAPIO_REMAPPED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the bio has been remapped so dispatch it */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_block_remap\">trace_block_remap</a>(<a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>), <a class=\"id\" href=\"#clone\">clone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>-><a class=\"id\" href=\"#bd_dev\">bd_dev</a>, <a class=\"id\" href=\"#sector\">sector</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#generic_make_request\">generic_make_request</a>(<a class=\"id\" href=\"#clone\">clone</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#r\">r</a> &lt; 0 || <a class=\"id\" href=\"#r\">r</a> == <a class=\"id\" href=\"#DM_MAPIO_REQUEUE\">DM_MAPIO_REQUEUE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* error the io and bail out, or requeue it if needed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#md\">md</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dec_pending\">dec_pending</a>(<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#io\">io</a>, <a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Store bio_set for cleanup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a> = <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#bs\">bs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#clone\">clone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_tio\">free_tio</a>(<a class=\"id\" href=\"#md\">md</a>, <a class=\"id\" href=\"#tio\">tio</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#r\">r</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"unimplemented target map return value: %d\", <a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"struct <a class=\"id\" href=\"#clone_info\">clone_info</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_io\">dm_io</a> *<a class=\"id\" href=\"#io\">io</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector_count\">sector_count</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#idx\">idx</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#dm_bio_destructor\">dm_bio_destructor</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bs\">bs</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_free\">bio_free</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#bs\">bs</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Creates a little bio that is just does part of a bvec.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#split_bvec\">split_bvec</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned short <a class=\"id\" href=\"#idx\">idx</a>, unsigned int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#len\">len</a>, struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bs\">bs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#clone\">clone</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bv\">bv</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a> + <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a> = <a class=\"id\" href=\"#bio_alloc_bioset\">bio_alloc_bioset</a>(<a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>, 1, <a class=\"id\" href=\"#bs\">bs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_destructor\">bi_destructor</a> = <a class=\"id\" href=\"#dm_bio_destructor\">dm_bio_destructor</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a> = *<a class=\"id\" href=\"#bv\">bv</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> = <a class=\"id\" href=\"#sector\">sector</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; ~<a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a> = <a class=\"id\" href=\"#to_bytes\">to_bytes</a>(<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>-><a class=\"id\" href=\"#bv_offset\">bv_offset</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>-><a class=\"id\" href=\"#bv_len\">bv_len</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a> |= 1 << <a class=\"id\" href=\"#BIO_CLONED\">BIO_CLONED</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_integrity\">bio_integrity</a>(<a class=\"id\" href=\"#bio\">bio</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_integrity_clone\">bio_integrity_clone</a>(<a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>, <a class=\"id\" href=\"#bs\">bs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_integrity_trim\">bio_integrity_trim</a>(<a class=\"id\" href=\"#clone\">clone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#bio_sector_offset\">bio_sector_offset</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#offset\">offset</a>), <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#clone\">clone</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Creates a bio that consists of range of complete bvecs.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#clone_bio\">clone_bio</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned short <a class=\"id\" href=\"#idx\">idx</a>, unsigned short <a class=\"id\" href=\"#bv_count\">bv_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#len\">len</a>, struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bs\">bs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#clone\">clone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a> = <a class=\"id\" href=\"#bio_alloc_bioset\">bio_alloc_bioset</a>(<a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>, <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_max_vecs\">bi_max_vecs</a>, <a class=\"id\" href=\"#bs\">bs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bio_clone\">__bio_clone</a>(<a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &= ~<a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_destructor\">bi_destructor</a> = <a class=\"id\" href=\"#dm_bio_destructor\">dm_bio_destructor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> = <a class=\"id\" href=\"#sector\">sector</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_idx\">bi_idx</a> = <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a> = <a class=\"id\" href=\"#idx\">idx</a> + <a class=\"id\" href=\"#bv_count\">bv_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a> = <a class=\"id\" href=\"#to_bytes\">to_bytes</a>(<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a> &= ~(1 << <a class=\"id\" href=\"#BIO_SEG_VALID\">BIO_SEG_VALID</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_integrity\">bio_integrity</a>(<a class=\"id\" href=\"#bio\">bio</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_integrity_clone\">bio_integrity_clone</a>(<a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>, <a class=\"id\" href=\"#bs\">bs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> != <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_idx\">bi_idx</a> || <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a> &lt; <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_integrity_trim\">bio_integrity_trim</a>(<a class=\"id\" href=\"#clone\">clone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#bio_sector_offset\">bio_sector_offset</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#idx\">idx</a>, 0), <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#clone\">clone</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#dm_target_io\">dm_target_io</a> *<a class=\"id\" href=\"#alloc_tio\">alloc_tio</a>(struct <a class=\"id\" href=\"#clone_info\">clone_info</a> *<a class=\"id\" href=\"#ci\">ci</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target_io\">dm_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#mempool_alloc\">mempool_alloc</a>(<a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#tio_pool\">tio_pool</a>, <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#io\">io</a> = <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#io\">io</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#ti\">ti</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#info\">info</a>, 0, sizeof(<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#info\">info</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tio\">tio</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__issue_target_request\">__issue_target_request</a>(struct <a class=\"id\" href=\"#clone_info\">clone_info</a> *<a class=\"id\" href=\"#ci\">ci</a>, struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned <a class=\"id\" href=\"#request_nr\">request_nr</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target_io\">dm_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#alloc_tio\">alloc_tio</a>(<a class=\"id\" href=\"#ci\">ci</a>, <a class=\"id\" href=\"#ti\">ti</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#clone\">clone</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#target_request_nr\">target_request_nr</a> = <a class=\"id\" href=\"#request_nr\">request_nr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Discard requests require the bio's inline iovecs be initialized.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ci-&gt;bio-&gt;bi_max_vecs is BIO_INLINE_VECS anyway, for both flush</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and discard, so no need for concern about wasted bvec allocations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a> = <a class=\"id\" href=\"#bio_alloc_bioset\">bio_alloc_bioset</a>(<a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>, <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_max_vecs\">bi_max_vecs</a>, <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#bs\">bs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bio_clone\">__bio_clone</a>(<a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_destructor\">bi_destructor</a> = <a class=\"id\" href=\"#dm_bio_destructor\">dm_bio_destructor</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> = <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector\">sector</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a> = <a class=\"id\" href=\"#to_bytes\">to_bytes</a>(<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__map_bio\">__map_bio</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#tio\">tio</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__issue_target_requests\">__issue_target_requests</a>(struct <a class=\"id\" href=\"#clone_info\">clone_info</a> *<a class=\"id\" href=\"#ci\">ci</a>, struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned <a class=\"id\" href=\"#num_requests\">num_requests</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#request_nr\">request_nr</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#request_nr\">request_nr</a> = 0; <a class=\"id\" href=\"#request_nr\">request_nr</a> &lt; <a class=\"id\" href=\"#num_requests\">num_requests</a>; <a class=\"id\" href=\"#request_nr\">request_nr</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__issue_target_request\">__issue_target_request</a>(<a class=\"id\" href=\"#ci\">ci</a>, <a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#request_nr\">request_nr</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__clone_and_map_empty_barrier\">__clone_and_map_empty_barrier</a>(struct <a class=\"id\" href=\"#clone_info\">clone_info</a> *<a class=\"id\" href=\"#ci\">ci</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#target_nr\">target_nr</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#dm_table_get_target\">dm_table_get_target</a>(<a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#target_nr\">target_nr</a>++)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__issue_target_requests\">__issue_target_requests</a>(<a class=\"id\" href=\"#ci\">ci</a>, <a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#num_flush_requests\">num_flush_requests</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector_count\">sector_count</a> = 0;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Perform all io with a single clone.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__clone_and_map_simple\">__clone_and_map_simple</a>(struct <a class=\"id\" href=\"#clone_info\">clone_info</a> *<a class=\"id\" href=\"#ci\">ci</a>, struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#clone\">clone</a>, *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target_io\">dm_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#alloc_tio\">alloc_tio</a>(<a class=\"id\" href=\"#ci\">ci</a>, <a class=\"id\" href=\"#ti\">ti</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a> = <a class=\"id\" href=\"#clone_bio\">clone_bio</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#idx\">idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a> - <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector_count\">sector_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#bs\">bs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__map_bio\">__map_bio</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#tio\">tio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector_count\">sector_count</a> = 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__clone_and_map_discard\">__clone_and_map_discard</a>(struct <a class=\"id\" href=\"#clone_info\">clone_info</a> *<a class=\"id\" href=\"#ci\">ci</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#dm_table_find_target\">dm_table_find_target</a>(<a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dm_target_is_valid\">dm_target_is_valid</a>(<a class=\"id\" href=\"#ti\">ti</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Even though the device advertised discard support,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reconfiguration might have changed that since the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * check was performed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#num_discard_requests\">num_discard_requests</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector_count\">sector_count</a>, <a class=\"id\" href=\"#max_io_len_target_boundary\">max_io_len_target_boundary</a>(<a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#ti\">ti</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__issue_target_requests\">__issue_target_requests</a>(<a class=\"id\" href=\"#ci\">ci</a>, <a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#num_discard_requests\">num_discard_requests</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector\">sector</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector_count\">sector_count</a> -= <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__clone_and_map\">__clone_and_map</a>(struct <a class=\"id\" href=\"#clone_info\">clone_info</a> *<a class=\"id\" href=\"#ci\">ci</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#clone\">clone</a>, *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#len\">len</a> = 0, <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target_io\">dm_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#bio_empty_barrier\">bio_empty_barrier</a>(<a class=\"id\" href=\"#bio\">bio</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__clone_and_map_empty_barrier\">__clone_and_map_empty_barrier</a>(<a class=\"id\" href=\"#ci\">ci</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__clone_and_map_discard\">__clone_and_map_discard</a>(<a class=\"id\" href=\"#ci\">ci</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#dm_table_find_target\">dm_table_find_target</a>(<a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dm_target_is_valid\">dm_target_is_valid</a>(<a class=\"id\" href=\"#ti\">ti</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#max_io_len\">max_io_len</a>(<a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#ti\">ti</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector_count\">sector_count</a> <= <a class=\"id\" href=\"#max\">max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Optimise for the simple case where we can do all of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the remaining io with a single clone.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clone_and_map_simple\">__clone_and_map_simple</a>(<a class=\"id\" href=\"#ci\">ci</a>, <a class=\"id\" href=\"#ti\">ti</a>);", 
"", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#to_sector\">to_sector</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>[<a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#idx\">idx</a>].<a class=\"id\" href=\"#bv_len\">bv_len</a>) <= <a class=\"id\" href=\"#max\">max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * There are some bvecs that don't span targets.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do as many of these as possible.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#remaining\">remaining</a> = <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#bv_len\">bv_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#idx\">idx</a>; <a class=\"id\" href=\"#remaining\">remaining</a> && (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bv_len\">bv_len</a> = <a class=\"id\" href=\"#to_sector\">to_sector</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bv_len\">bv_len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bv_len\">bv_len</a> &gt; <a class=\"id\" href=\"#remaining\">remaining</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remaining\">remaining</a> -= <a class=\"id\" href=\"#bv_len\">bv_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#bv_len\">bv_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#alloc_tio\">alloc_tio</a>(<a class=\"id\" href=\"#ci\">ci</a>, <a class=\"id\" href=\"#ti\">ti</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a> = <a class=\"id\" href=\"#clone_bio\">clone_bio</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#i\">i</a> - <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#bs\">bs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__map_bio\">__map_bio</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#tio\">tio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector\">sector</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector_count\">sector_count</a> -= <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Handle a bvec that must be split between two or more targets.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bv\">bv</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a> + <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#remaining\">remaining</a> = <a class=\"id\" href=\"#to_sector\">to_sector</a>(<a class=\"id\" href=\"#bv\">bv</a>-><a class=\"id\" href=\"#bv_len\">bv_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#dm_table_find_target\">dm_table_find_target</a>(<a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector\">sector</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dm_target_is_valid\">dm_target_is_valid</a>(<a class=\"id\" href=\"#ti\">ti</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#max_io_len\">max_io_len</a>(<a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#ti\">ti</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#remaining\">remaining</a>, <a class=\"id\" href=\"#max\">max</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#alloc_tio\">alloc_tio</a>(<a class=\"id\" href=\"#ci\">ci</a>, <a class=\"id\" href=\"#ti\">ti</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a> = <a class=\"id\" href=\"#split_bvec\">split_bvec</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#idx\">idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#bv\">bv</a>-><a class=\"id\" href=\"#bv_offset\">bv_offset</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#bs\">bs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__map_bio\">__map_bio</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#tio\">tio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector\">sector</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#sector_count\">sector_count</a> -= <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#to_bytes\">to_bytes</a>(<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#remaining\">remaining</a> -= <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>-><a class=\"id\" href=\"#idx\">idx</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Split the bio into several clones and submit it to targets.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__split_and_process_bio\">__split_and_process_bio</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#clone_info\">clone_info</a> <a class=\"id\" href=\"#ci\">ci</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#dm_get_live_table\">dm_get_live_table</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#map\">map</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_io_error\">bio_io_error</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#barrier_error\">barrier_error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#barrier_error\">barrier_error</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#md\">md</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#io\">io</a> = <a class=\"id\" href=\"#alloc_io\">alloc_io</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#io_count\">io_count</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#md\">md</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#io\">io</a>-><a class=\"id\" href=\"#endio_lock\">endio_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#sector\">sector</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#sector_count\">sector_count</a> = <a class=\"id\" href=\"#bio_sectors\">bio_sectors</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#bio_empty_barrier\">bio_empty_barrier</a>(<a class=\"id\" href=\"#bio\">bio</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#sector_count\">sector_count</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_idx\">bi_idx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_io_acct\">start_io_acct</a>(<a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#io\">io</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#sector_count\">sector_count</a> && !<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#__clone_and_map\">__clone_and_map</a>(&amp;<a class=\"id\" href=\"#ci\">ci</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* drop the extra reference count */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dec_pending\">dec_pending</a>(<a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#io\">io</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_table_put\">dm_table_put</a>(<a class=\"id\" href=\"#ci\">ci</a>.<a class=\"id\" href=\"#map\">map</a>);", 
"}", 
"<span class=\"comment\">/*-----------------------------------------------------------------</span>", 
"<span class=\"comment\"> * CRUD END</span>", 
"<span class=\"comment\"> *---------------------------------------------------------------*/</span>", 
"", 
"static int <a class=\"id\" href=\"#dm_merge_bvec\">dm_merge_bvec</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#bvec_merge_data\">bvec_merge_data</a> *<a class=\"id\" href=\"#bvm\">bvm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#biovec\">biovec</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queuedata\">queuedata</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#dm_get_live_table\">dm_get_live_table</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#max_sectors\">max_sectors</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_size\">max_size</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#map\">map</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#dm_table_find_target\">dm_table_find_target</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#bvm\">bvm</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dm_target_is_valid\">dm_target_is_valid</a>(<a class=\"id\" href=\"#ti\">ti</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_table\">out_table</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find maximum amount of I/O that won't need splitting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_sectors\">max_sectors</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#max_io_len\">max_io_len</a>(<a class=\"id\" href=\"#bvm\">bvm</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>, <a class=\"id\" href=\"#ti\">ti</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#sector_t\">sector_t</a>) <a class=\"id\" href=\"#BIO_MAX_SECTORS\">BIO_MAX_SECTORS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_size\">max_size</a> = (<a class=\"id\" href=\"#max_sectors\">max_sectors</a> << <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>) - <a class=\"id\" href=\"#bvm\">bvm</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_size\">max_size</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_size\">max_size</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * merge_bvec_fn() returns number of bytes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it can accept at this offset</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * max is precomputed maximal io size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_size\">max_size</a> && <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#merge\">merge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_size\">max_size</a> = <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#merge\">merge</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#bvm\">bvm</a>, <a class=\"id\" href=\"#biovec\">biovec</a>, <a class=\"id\" href=\"#max_size\">max_size</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the target doesn't support merge method and some of the devices</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * provided their merge_bvec method (we know this by looking at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * queue_max_hw_sectors), then we can't allow bios with multiple vector</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * entries.  So always set max_size to 0, and the code below allows</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * just one page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#queue_max_hw_sectors\">queue_max_hw_sectors</a>(<a class=\"id\" href=\"#q\">q</a>) <= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> >> 9)", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_size\">max_size</a> = 0;", 
"", 
"<a class=\"id\" href=\"#out_table\">out_table</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_table_put\">dm_table_put</a>(<a class=\"id\" href=\"#map\">map</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Always allow an entire first page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_size\">max_size</a> <= <a class=\"id\" href=\"#biovec\">biovec</a>-><a class=\"id\" href=\"#bv_len\">bv_len</a> && !(<a class=\"id\" href=\"#bvm\">bvm</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a> >> <a class=\"id\" href=\"#SECTOR_SHIFT\">SECTOR_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_size\">max_size</a> = <a class=\"id\" href=\"#biovec\">biovec</a>-><a class=\"id\" href=\"#bv_len\">bv_len</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max_size\">max_size</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The request function that just remaps the bio built up by</span>", 
"<span class=\"comment\"> * dm_merge_bvec.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#_dm_request\">_dm_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rw\">rw</a> = <a class=\"id\" href=\"#bio_data_dir\">bio_data_dir</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queuedata\">queuedata</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#io_lock\">io_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#part_stat_lock\">part_stat_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part_stat_inc\">part_stat_inc</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#dm_disk\">dm_disk</a>(<a class=\"id\" href=\"#md\">md</a>)-><a class=\"id\" href=\"#part0\">part0</a>, <a class=\"id\" href=\"#ios\">ios</a>[<a class=\"id\" href=\"#rw\">rw</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part_stat_add\">part_stat_add</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#dm_disk\">dm_disk</a>(<a class=\"id\" href=\"#md\">md</a>)-><a class=\"id\" href=\"#part0\">part0</a>, <a class=\"id\" href=\"#sectors\">sectors</a>[<a class=\"id\" href=\"#rw\">rw</a>], <a class=\"id\" href=\"#bio_sectors\">bio_sectors</a>(<a class=\"id\" href=\"#bio\">bio</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part_stat_unlock\">part_stat_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we're suspended or the thread is processing barriers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we have to queue this io for later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DMF_QUEUE_IO_TO_THREAD\">DMF_QUEUE_IO_TO_THREAD</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>)) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#io_lock\">io_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#DMF_BLOCK_IO_FOR_SUSPEND\">DMF_BLOCK_IO_FOR_SUSPEND</a>, &amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flags\">flags</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#bio_rw\">bio_rw</a>(<a class=\"id\" href=\"#bio\">bio</a>) == <a class=\"id\" href=\"#READA\">READA</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_io_error\">bio_io_error</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_io\">queue_io</a>(<a class=\"id\" href=\"#md\">md</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__split_and_process_bio\">__split_and_process_bio</a>(<a class=\"id\" href=\"#md\">md</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#io_lock\">io_lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#dm_make_request\">dm_make_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queuedata\">queuedata</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#saved_make_request_fn\">saved_make_request_fn</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>); <span class=\"comment\">/* call __make_request() */</span>", 
"}", 
"", 
"static int <a class=\"id\" href=\"#dm_request_based\">dm_request_based</a>(struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blk_queue_stackable\">blk_queue_stackable</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#queue\">queue</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#dm_request\">dm_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queuedata\">queuedata</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dm_request_based\">dm_request_based</a>(<a class=\"id\" href=\"#md\">md</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dm_make_request\">dm_make_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#_dm_request\">_dm_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dm_rq_is_flush_request\">dm_rq_is_flush_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_FLUSH\">REQ_FLUSH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#dm_dispatch_request\">dm_dispatch_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_queue_io_stat\">blk_queue_io_stat</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_IO_STAT\">REQ_IO_STAT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#start_time\">start_time</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#blk_insert_cloned_request\">blk_insert_cloned_request</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dm_complete_request\">dm_complete_request</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#r\">r</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dm_dispatch_request\">dm_dispatch_request</a>);", 
"", 
"static void <a class=\"id\" href=\"#dm_rq_bio_destructor\">dm_rq_bio_destructor</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_rq_clone_bio_info\">dm_rq_clone_bio_info</a> *<a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#md\">md</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_bio_info\">free_bio_info</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_free\">bio_free</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#bs\">bs</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#dm_rq_bio_constructor\">dm_rq_bio_constructor</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_orig\">bio_orig</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_rq_target_io\">dm_rq_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#md\">md</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_rq_clone_bio_info\">dm_rq_clone_bio_info</a> *<a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#alloc_bio_info\">alloc_bio_info</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#orig\">orig</a> = <a class=\"id\" href=\"#bio_orig\">bio_orig</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#tio\">tio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_end_io\">bi_end_io</a> = <a class=\"id\" href=\"#end_clone_bio\">end_clone_bio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a> = <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_destructor\">bi_destructor</a> = <a class=\"id\" href=\"#dm_rq_bio_destructor\">dm_rq_bio_destructor</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#setup_clone\">setup_clone</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone\">clone</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#dm_rq_target_io\">dm_rq_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dm_rq_is_flush_request\">dm_rq_is_flush_request</a>(<a class=\"id\" href=\"#rq\">rq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_init\">blk_rq_init</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#clone\">clone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> = <a class=\"id\" href=\"#REQ_TYPE_FS\">REQ_TYPE_FS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= (<a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a> | <a class=\"id\" href=\"#WRITE\">WRITE</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#blk_rq_prep_clone\">blk_rq_prep_clone</a>(<a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#bs\">bs</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#dm_rq_bio_constructor\">dm_rq_bio_constructor</a>, <a class=\"id\" href=\"#tio\">tio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd\">cmd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#sense\">sense</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#sense\">sense</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#end_io\">end_io</a> = <a class=\"id\" href=\"#end_clone_request\">end_clone_request</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#end_io_data\">end_io_data</a> = <a class=\"id\" href=\"#tio\">tio</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone_rq\">clone_rq</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone\">clone</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_rq_target_io\">dm_rq_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#alloc_rq_tio\">alloc_rq_tio</a>(<a class=\"id\" href=\"#md\">md</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tio\">tio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#md\">md</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#orig\">orig</a> = <a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#info\">info</a>, 0, sizeof(<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#info\">info</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a> = &amp;<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#clone\">clone</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#setup_clone\">setup_clone</a>(<a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#tio\">tio</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* -ENOMEM */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_rq_tio\">free_rq_tio</a>(<a class=\"id\" href=\"#tio\">tio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#clone\">clone</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called with the queue lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dm_prep_fn\">dm_prep_fn</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queuedata\">queuedata</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone\">clone</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#dm_rq_is_flush_request\">dm_rq_is_flush_request</a>(<a class=\"id\" href=\"#rq\">rq</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#BLKPREP_OK\">BLKPREP_OK</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#special\">special</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"Already has something in rq->special.\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#BLKPREP_KILL\">BLKPREP_KILL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clone\">clone</a> = <a class=\"id\" href=\"#clone_rq\">clone_rq</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#md\">md</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#clone\">clone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#BLKPREP_DEFER\">BLKPREP_DEFER</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#special\">special</a> = <a class=\"id\" href=\"#clone\">clone</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_DONTPREP\">REQ_DONTPREP</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#BLKPREP_OK\">BLKPREP_OK</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> * 0  : the request has been processed (not requeued)</span>", 
"<span class=\"comment\"> * !0 : the request has been requeued</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#map_request\">map_request</a>(struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#clone\">clone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#requeued\">requeued</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_rq_target_io\">dm_rq_target_io</a> *<a class=\"id\" href=\"#tio\">tio</a> = <a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#end_io_data\">end_io_data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hold the md reference here for the in-flight I/O.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can't rely on the reference count by device opener,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because the device may be closed during the request completion</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when all bios are completed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See the comment in rq_completed() too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dm_get\">dm_get</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#ti\">ti</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#ti\">ti</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#map_rq\">map_rq</a>(<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#clone\">clone</a>, &amp;<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#r\">r</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DM_MAPIO_SUBMITTED\">DM_MAPIO_SUBMITTED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The target has taken the I/O to submit by itself later */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DM_MAPIO_REMAPPED\">DM_MAPIO_REMAPPED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The target has remapped the I/O so dispatch it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_block_rq_remap\">trace_block_rq_remap</a>(<a class=\"id\" href=\"#clone\">clone</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#disk_devt\">disk_devt</a>(<a class=\"id\" href=\"#dm_disk\">dm_disk</a>(<a class=\"id\" href=\"#md\">md</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#tio\">tio</a>-><a class=\"id\" href=\"#orig\">orig</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dm_dispatch_request\">dm_dispatch_request</a>(<a class=\"id\" href=\"#clone\">clone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DM_MAPIO_REQUEUE\">DM_MAPIO_REQUEUE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The target wants to requeue the I/O */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dm_requeue_unmapped_request\">dm_requeue_unmapped_request</a>(<a class=\"id\" href=\"#clone\">clone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#requeued\">requeued</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMWARN\">DMWARN</a>(\"unimplemented target map return value: %d\", <a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The target wants to complete the I/O */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dm_kill_unmapped_request\">dm_kill_unmapped_request</a>(<a class=\"id\" href=\"#clone\">clone</a>, <a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#requeued\">requeued</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * q-&gt;request_fn for request-based dm.</span>", 
"<span class=\"comment\"> * Called with the queue lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dm_request_fn\">dm_request_fn</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mapped_device\">mapped_device</a> *<a class=\"id\" href=\"#md\">md</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queuedata\">queuedata</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_table\">dm_table</a> *<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#dm_get_live_table\">dm_get_live_table</a>(<a class=\"id\" href=\"#md\">md</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dm_target\">dm_target</a> *<a class=\"id\" href=\"#ti\">ti</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, *<a class=\"id\" href=\"#clone\">clone</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For suspend, check blk_queue_stopped() and increment</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -&gt;pending within a single queue_lock not to increment the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * number of in-flight I/Os after the queue is stopped in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dm_suspend().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#blk_queue_plugged\">blk_queue_plugged</a>(<a class=\"id\" href=\"#q\">q</a>) && !<a class=\"id\" href=\"#blk_queue_stopped\">blk_queue_stopped</a>(<a class=\"id\" href=\"#q\">q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#blk_peek_request\">blk_peek_request</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rq\">rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#plug_and_out\">plug_and_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#dm_rq_is_flush_request\">dm_rq_is_flush_request</a>(<a class=\"id\" href=\"#rq\">rq</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flush_request\">flush_request</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#md\">md</a>-><a class=\"id\" href=\"#flush_request\">flush_request</a> = <a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_start_request\">blk_start_request</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
];
xr_frag_insert('l/b1/ff616417175cc918bd06916731dbe867ff8cac.xr', __xr_tmp);
