var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  libata-scsi.c - helper library for ATA</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Maintained by:  Jeff Garzik &lt;jgarzik@pobox.com&gt;</span>", 
"<span class=\"comment\"> *    <span class=\"ts\"/><span class=\"ts\"/>    Please ALWAYS copy linux-ide@vger.kernel.org</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>    on emails.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright 2003-2004 Red Hat, Inc.  All rights reserved.</span>", 
"<span class=\"comment\"> *  Copyright 2003-2004 Jeff Garzik</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2, or (at your option)</span>", 
"<span class=\"comment\"> *  any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> *  GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> *  along with this program; see the file COPYING.  If not, write to</span>", 
"<span class=\"comment\"> *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  libata documentation is available via 'make {ps|pdf}docs',</span>", 
"<span class=\"comment\"> *  as Documentation/DocBook/libata.*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Hardware documentation available from</span>", 
"<span class=\"comment\"> *  - http://www.t10.org/</span>", 
"<span class=\"comment\"> *  - http://www.t13.org/</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi\">scsi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_host\">scsi_host</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_eh\">scsi_eh</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_device\">scsi_device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_tcq\">scsi_tcq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_transport\">scsi_transport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#libata\">libata</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hdreg\">hdreg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#unaligned\">unaligned</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"libata.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SECTOR_SIZE\">SECTOR_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>512", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATA_SCSI_RBUF_SIZE\">ATA_SCSI_RBUF_SIZE</a><span class=\"ts\"/>4096", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#ata_scsi_rbuf_lock\">ata_scsi_rbuf_lock</a>);", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ata_scsi_rbuf\">ata_scsi_rbuf</a>[<a class=\"id\" href=\"#ATA_SCSI_RBUF_SIZE\">ATA_SCSI_RBUF_SIZE</a>];", 
"", 
"typedef unsigned int (*<a class=\"id\" href=\"#ata_xlat_func_t\">ata_xlat_func_t</a>)(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"static struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#__ata_scsi_find_dev\">__ata_scsi_find_dev</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#scsidev\">scsidev</a>);", 
"static struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#ata_scsi_find_dev\">ata_scsi_find_dev</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#scsidev\">scsidev</a>);", 
"static int <a class=\"id\" href=\"#ata_scsi_user_scan\">ata_scsi_user_scan</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a>, unsigned int <a class=\"id\" href=\"#channel\">channel</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#id\">id</a>, unsigned int <a class=\"id\" href=\"#lun\">lun</a>);", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RW_RECOVERY_MPAGE\">RW_RECOVERY_MPAGE</a> 0x1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RW_RECOVERY_MPAGE_LEN\">RW_RECOVERY_MPAGE_LEN</a> 12", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CACHE_MPAGE\">CACHE_MPAGE</a> 0x8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CACHE_MPAGE_LEN\">CACHE_MPAGE_LEN</a> 20", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CONTROL_MPAGE\">CONTROL_MPAGE</a> 0xa", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CONTROL_MPAGE_LEN\">CONTROL_MPAGE_LEN</a> 12", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ALL_MPAGES\">ALL_MPAGES</a> 0x3f", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ALL_SUB_MPAGES\">ALL_SUB_MPAGES</a> 0xff", 
"", 
"", 
"static const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#def_rw_recovery_mpage\">def_rw_recovery_mpage</a>[<a class=\"id\" href=\"#RW_RECOVERY_MPAGE_LEN\">RW_RECOVERY_MPAGE_LEN</a>] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RW_RECOVERY_MPAGE\">RW_RECOVERY_MPAGE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RW_RECOVERY_MPAGE_LEN\">RW_RECOVERY_MPAGE_LEN</a> - 2,", 
"<span class=\"ts\"/>(1 << 7),<span class=\"ts\"/><span class=\"comment\">/* AWRE */</span>", 
"<span class=\"ts\"/>0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* read retry count */</span>", 
"<span class=\"ts\"/>0, 0, 0, 0,", 
"<span class=\"ts\"/>0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* write retry count */</span>", 
"<span class=\"ts\"/>0, 0, 0", 
"};", 
"", 
"static const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#def_cache_mpage\">def_cache_mpage</a>[<a class=\"id\" href=\"#CACHE_MPAGE_LEN\">CACHE_MPAGE_LEN</a>] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CACHE_MPAGE\">CACHE_MPAGE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CACHE_MPAGE_LEN\">CACHE_MPAGE_LEN</a> - 2,", 
"<span class=\"ts\"/>0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* contains WCE, needs to be 0 for logic */</span>", 
"<span class=\"ts\"/>0, 0, 0, 0, 0, 0, 0, 0, 0,", 
"<span class=\"ts\"/>0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* contains DRA, needs to be 0 for logic */</span>", 
"<span class=\"ts\"/>0, 0, 0, 0, 0, 0, 0", 
"};", 
"", 
"static const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#def_control_mpage\">def_control_mpage</a>[<a class=\"id\" href=\"#CONTROL_MPAGE_LEN\">CONTROL_MPAGE_LEN</a>] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CONTROL_MPAGE\">CONTROL_MPAGE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CONTROL_MPAGE_LEN\">CONTROL_MPAGE_LEN</a> - 2,", 
"<span class=\"ts\"/>2,<span class=\"ts\"/><span class=\"comment\">/* DSENSE=0, GLTSD=1 */</span>", 
"<span class=\"ts\"/>0,<span class=\"ts\"/><span class=\"comment\">/* [QAM+QERR may be 1, see 05-359r1] */</span>", 
"<span class=\"ts\"/>0, 0, 0, 0, 0xff, 0xff,", 
"<span class=\"ts\"/>0, 30<span class=\"ts\"/><span class=\"comment\">/* extended self test time, see 05-359r1 */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * libata transport template.  libata doesn't do real transport stuff.</span>", 
"<span class=\"comment\"> * It just needs the eh_timed_out hook.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#scsi_transport_template\">scsi_transport_template</a> <a class=\"id\" href=\"#ata_scsi_transport_template\">ata_scsi_transport_template</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#eh_strategy_handler\">eh_strategy_handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_scsi_error\">ata_scsi_error</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#eh_timed_out\">eh_timed_out</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_scsi_timed_out\">ata_scsi_timed_out</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#user_scan\">user_scan</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_scsi_user_scan\">ata_scsi_user_scan</a>,", 
"};", 
"", 
"", 
"static const struct {", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#link_pm\">link_pm</a><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>const char<span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"} <a class=\"id\" href=\"#link_pm_policy\">link_pm_policy</a>[] = {", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#NOT_AVAILABLE\">NOT_AVAILABLE</a>, \"max_performance\" },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#MIN_POWER\">MIN_POWER</a>, \"min_power\" },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#MAX_PERFORMANCE\">MAX_PERFORMANCE</a>, \"max_performance\" },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#MEDIUM_POWER\">MEDIUM_POWER</a>, \"medium_power\" },", 
"};", 
"", 
"static const char *<a class=\"id\" href=\"#ata_scsi_lpm_get\">ata_scsi_lpm_get</a>(enum <a class=\"id\" href=\"#link_pm\">link_pm</a> <a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#link_pm_policy\">link_pm_policy</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#link_pm_policy\">link_pm_policy</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#value\">value</a> == <a class=\"id\" href=\"#policy\">policy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#link_pm_policy\">link_pm_policy</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ata_scsi_lpm_put\">ata_scsi_lpm_put</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#class_to_shost\">class_to_shost</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#link_pm\">link_pm</a> <a class=\"id\" href=\"#policy\">policy</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we are skipping array location 0 on purpose - this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is because a value of NOT_AVAILABLE is displayed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the user as max_performance, but when the user</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * writes \"max_performance\", they actually want the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * value to match MAX_PERFORMANCE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#link_pm_policy\">link_pm_policy</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#link_pm_policy\">link_pm_policy</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#link_pm_policy\">link_pm_policy</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#policy\">policy</a> = <a class=\"id\" href=\"#link_pm_policy\">link_pm_policy</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#policy\">policy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_lpm_schedule\">ata_lpm_schedule</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#policy\">policy</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#ata_scsi_lpm_show\">ata_scsi_lpm_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#class_to_shost\">class_to_shost</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#policy\">policy</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_lpm_get\">ata_scsi_lpm_get</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pm_policy\">pm_policy</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#policy\">policy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, 23, \"%s\\n\", <a class=\"id\" href=\"#policy\">policy</a>);", 
"}", 
"<a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#link_power_management_policy\">link_power_management_policy</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_lpm_show\">ata_scsi_lpm_show</a>, <a class=\"id\" href=\"#ata_scsi_lpm_put\">ata_scsi_lpm_put</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dev_attr_link_power_management_policy\">dev_attr_link_power_management_policy</a>);", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ata_scsi_park_show\">ata_scsi_park_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#device\">device</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#to_scsi_device\">to_scsi_device</a>(<a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#msecs\">msecs</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#ata_scsi_find_dev\">ata_scsi_find_dev</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_NO_UNLOAD\">ATA_DFLAG_NO_UNLOAD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_EH_IN_PROGRESS\">ATA_PFLAG_EH_IN_PROGRESS</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_context\">eh_context</a>.<a class=\"id\" href=\"#unloaded_mask\">unloaded_mask</a> &amp; (1 << <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#unpark_deadline\">unpark_deadline</a>, <a class=\"id\" href=\"#now\">now</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msecs\">msecs</a> = <a class=\"id\" href=\"#jiffies_to_msecs\">jiffies_to_msecs</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#unpark_deadline\">unpark_deadline</a> - <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msecs\">msecs</a> = 0;", 
"", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a> ? <a class=\"id\" href=\"#rc\">rc</a> : <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, 20, \"%u\\n\", <a class=\"id\" href=\"#msecs\">msecs</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ata_scsi_park_store\">ata_scsi_park_store</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#device\">device</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#to_scsi_device\">to_scsi_device</a>(<a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>long int <a class=\"id\" href=\"#input\">input</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#strict_strtol\">strict_strtol</a>(<a class=\"id\" href=\"#buf\">buf</a>, 10, &amp;<a class=\"id\" href=\"#input\">input</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> || <a class=\"id\" href=\"#input\">input</a> &lt; -2)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#input\">input</a> &gt; <a class=\"id\" href=\"#ATA_TMOUT_MAX_PARK\">ATA_TMOUT_MAX_PARK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EOVERFLOW\">EOVERFLOW</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input\">input</a> = <a class=\"id\" href=\"#ATA_TMOUT_MAX_PARK\">ATA_TMOUT_MAX_PARK</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#ata_scsi_find_dev\">ata_scsi_find_dev</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> != <a class=\"id\" href=\"#ATA_DEV_ATA\">ATA_DEV_ATA</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#input\">input</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_NO_UNLOAD\">ATA_DFLAG_NO_UNLOAD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#unpark_deadline\">unpark_deadline</a> = <a class=\"id\" href=\"#ata_deadline\">ata_deadline</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#input\">input</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_info\">eh_info</a>.<a class=\"id\" href=\"#dev_action\">dev_action</a>[<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a>] |= <a class=\"id\" href=\"#ATA_EH_PARK\">ATA_EH_PARK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_schedule_eh\">ata_port_schedule_eh</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#park_req_pending\">park_req_pending</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#input\">input</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case -1:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#ATA_DFLAG_NO_UNLOAD\">ATA_DFLAG_NO_UNLOAD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case -2:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_DFLAG_NO_UNLOAD\">ATA_DFLAG_NO_UNLOAD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a> ? <a class=\"id\" href=\"#rc\">rc</a> : <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"<a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#unload_heads\">unload_heads</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>,", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ata_scsi_park_show\">ata_scsi_park_show</a>, <a class=\"id\" href=\"#ata_scsi_park_store\">ata_scsi_park_store</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dev_attr_unload_heads\">dev_attr_unload_heads</a>);", 
"", 
"static void <a class=\"id\" href=\"#ata_scsi_set_sense\">ata_scsi_set_sense</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#asc\">asc</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ascq\">ascq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a> = (<a class=\"id\" href=\"#DRIVER_SENSE\">DRIVER_SENSE</a> << 24) | <a class=\"id\" href=\"#SAM_STAT_CHECK_CONDITION\">SAM_STAT_CHECK_CONDITION</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_build_sense_buffer\">scsi_build_sense_buffer</a>(0, <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>, <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#asc\">asc</a>, <a class=\"id\" href=\"#ascq\">ascq</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#ata_scsi_em_message_store\">ata_scsi_em_message_store</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#class_to_shost\">class_to_shost</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#em_store\">em_store</a> && (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_EM\">ATA_FLAG_EM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#em_store\">em_store</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#ata_scsi_em_message_show\">ata_scsi_em_message_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#class_to_shost\">class_to_shost</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#em_show\">em_show</a> && (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_EM\">ATA_FLAG_EM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#em_show\">em_show</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"<a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#em_message\">em_message</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_em_message_show\">ata_scsi_em_message_show</a>, <a class=\"id\" href=\"#ata_scsi_em_message_store\">ata_scsi_em_message_store</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dev_attr_em_message\">dev_attr_em_message</a>);", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#ata_scsi_em_message_type_show\">ata_scsi_em_message_type_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#class_to_shost\">class_to_shost</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#shost\">shost</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, 23, \"%d\\n\", <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#em_message_type\">em_message_type</a>);", 
"}", 
"<a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#em_message_type\">em_message_type</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ata_scsi_em_message_type_show\">ata_scsi_em_message_type_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dev_attr_em_message_type\">dev_attr_em_message_type</a>);", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#ata_scsi_activity_show\">ata_scsi_activity_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#to_scsi_device\">to_scsi_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#atadev\">atadev</a> = <a class=\"id\" href=\"#ata_scsi_find_dev\">ata_scsi_find_dev</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#sdev\">sdev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sw_activity_show\">sw_activity_show</a> && (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_SW_ACTIVITY\">ATA_FLAG_SW_ACTIVITY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sw_activity_show\">sw_activity_show</a>(<a class=\"id\" href=\"#atadev\">atadev</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#ata_scsi_activity_store\">ata_scsi_activity_store</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#to_scsi_device\">to_scsi_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#atadev\">atadev</a> = <a class=\"id\" href=\"#ata_scsi_find_dev\">ata_scsi_find_dev</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#sw_activity\">sw_activity</a> <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sw_activity_store\">sw_activity_store</a> && (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_SW_ACTIVITY\">ATA_FLAG_SW_ACTIVITY</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#val\">val</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#OFF\">OFF</a>: case <a class=\"id\" href=\"#BLINK_ON\">BLINK_ON</a>: case <a class=\"id\" href=\"#BLINK_OFF\">BLINK_OFF</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sw_activity_store\">sw_activity_store</a>(<a class=\"id\" href=\"#atadev\">atadev</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"<a class=\"id\" href=\"#DEVICE_ATTR\">DEVICE_ATTR</a>(<a class=\"id\" href=\"#sw_activity\">sw_activity</a>, <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a> | <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>, <a class=\"id\" href=\"#ata_scsi_activity_show\">ata_scsi_activity_show</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_activity_store\">ata_scsi_activity_store</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dev_attr_sw_activity\">dev_attr_sw_activity</a>);", 
"", 
"struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#ata_common_sdev_attrs\">ata_common_sdev_attrs</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dev_attr_unload_heads\">dev_attr_unload_heads</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_common_sdev_attrs\">ata_common_sdev_attrs</a>);", 
"", 
"static void <a class=\"id\" href=\"#ata_scsi_invalid_field\">ata_scsi_invalid_field</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   void (*<a class=\"id\" href=\"#done\">done</a>)(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_set_sense\">ata_scsi_set_sense</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a>, 0x24, 0x0);", 
"<span class=\"ts\"/><span class=\"comment\">/* \"Invalid field in cbd\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_std_bios_param - generic bios head/sector/cylinder calculator used by sd.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev: SCSI device for which BIOS geometry is to be determined</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bdev: block device associated with @sdev</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@capacity: capacity of SCSI device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@geom: location to which geometry will be output</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Generic bios head/sector/cylinder calculator</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>used by sd. Most BIOSes nowadays expect a XXX/255/16  (CHS)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mapping. Some situations may arise where the disk is not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bootable if this is not used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Defined by the SCSI layer.  We don't really care.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_std_bios_param\">ata_std_bios_param</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#capacity\">capacity</a>, int <a class=\"id\" href=\"#geom\">geom</a>[])", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#geom\">geom</a>[0] = 255;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#geom\">geom</a>[1] = 63;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_div\">sector_div</a>(<a class=\"id\" href=\"#capacity\">capacity</a>, 255*63);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#geom\">geom</a>[2] = <a class=\"id\" href=\"#capacity\">capacity</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_unlock_native_capacity - unlock native capacity</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev: SCSI device to adjust device capacity for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is called if a partition on @sdev extends beyond</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the end of the device.  It requests EH to unlock HPA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Defined by the SCSI layer.  Might sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_scsi_unlock_native_capacity\">ata_scsi_unlock_native_capacity</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#ata_scsi_find_dev\">ata_scsi_find_dev</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a> && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#n_sectors\">n_sectors</a> &lt; <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#n_native_sectors\">n_native_sectors</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_DFLAG_UNLOCK_HPA\">ATA_DFLAG_UNLOCK_HPA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_info\">eh_info</a>.<a class=\"id\" href=\"#action\">action</a> |= <a class=\"id\" href=\"#ATA_EH_RESET\">ATA_EH_RESET</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_schedule_eh\">ata_port_schedule_eh</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_port_wait_eh\">ata_port_wait_eh</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_get_identity - Handler for HDIO_GET_IDENTITY ioctl</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: target port</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev: SCSI device to get identify data for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@arg: User buffer area for identify data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Defined by the SCSI layer.  We don't really care.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, negative errno on error.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ata_get_identity\">ata_get_identity</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#ata_scsi_find_dev\">ata_scsi_find_dev</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[40];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMSG\">ENOMSG</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#ATA_ID_WORDS\">ATA_ID_WORDS</a> * sizeof(<a class=\"id\" href=\"#u16\">u16</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_id_string\">ata_id_string</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#ATA_ID_PROD\">ATA_ID_PROD</a>, <a class=\"id\" href=\"#ATA_ID_PROD_LEN\">ATA_ID_PROD_LEN</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#dst\">dst</a> + <a class=\"id\" href=\"#ATA_ID_PROD\">ATA_ID_PROD</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#ATA_ID_PROD_LEN\">ATA_ID_PROD_LEN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_id_string\">ata_id_string</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#ATA_ID_FW_REV\">ATA_ID_FW_REV</a>, <a class=\"id\" href=\"#ATA_ID_FW_REV_LEN\">ATA_ID_FW_REV_LEN</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#dst\">dst</a> + <a class=\"id\" href=\"#ATA_ID_FW_REV\">ATA_ID_FW_REV</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#ATA_ID_FW_REV_LEN\">ATA_ID_FW_REV_LEN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_id_string\">ata_id_string</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#ATA_ID_SERNO\">ATA_ID_SERNO</a>, <a class=\"id\" href=\"#ATA_ID_SERNO_LEN\">ATA_ID_SERNO_LEN</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#dst\">dst</a> + <a class=\"id\" href=\"#ATA_ID_SERNO\">ATA_ID_SERNO</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#ATA_ID_SERNO_LEN\">ATA_ID_SERNO_LEN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_cmd_ioctl - Handler for HDIO_DRIVE_CMD ioctl</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@scsidev: Device to which we are issuing command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@arg: User provided data for issuing command</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Defined by the SCSI layer.  We don't really care.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, negative errno on error.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_cmd_ioctl\">ata_cmd_ioctl</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#scsidev\">scsidev</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[<a class=\"id\" href=\"#MAX_COMMAND_SIZE\">MAX_COMMAND_SIZE</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#args\">args</a>[4], *<a class=\"id\" href=\"#argbuf\">argbuf</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#sensebuf\">sensebuf</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#argsize\">argsize</a> = 0;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#data_dir\">data_dir</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cmd_result\">cmd_result</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#arg\">arg</a>, sizeof(<a class=\"id\" href=\"#args\">args</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sensebuf\">sensebuf</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>, <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sensebuf\">sensebuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>, 0, sizeof(<a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#args\">args</a>[3]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#argsize\">argsize</a> = <a class=\"id\" href=\"#SECTOR_SIZE\">SECTOR_SIZE</a> * <a class=\"id\" href=\"#args\">args</a>[3];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#argbuf\">argbuf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#argsize\">argsize</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#argbuf\">argbuf</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[1]  = (4 << 1); <span class=\"comment\">/* PIO Data-in */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[2]  = 0x0e;     <span class=\"comment\">/* no off.line or cc, read from dev,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    block count in sector count field */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data_dir\">data_dir</a> = <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[1]  = (3 << 1); <span class=\"comment\">/* Non-data */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[2]  = 0x20;     <span class=\"comment\">/* cc but no off.line or data xfer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data_dir\">data_dir</a> = <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[0] = <a class=\"id\" href=\"#ATA_16\">ATA_16</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[4] = <a class=\"id\" href=\"#args\">args</a>[2];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#args\">args</a>[0] == <a class=\"id\" href=\"#ATA_CMD_SMART\">ATA_CMD_SMART</a>) { <span class=\"comment\">/* hack -- ide driver does this too */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[6]  = <a class=\"id\" href=\"#args\">args</a>[3];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[8]  = <a class=\"id\" href=\"#args\">args</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[10] = 0x4f;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[12] = 0xc2;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[6]  = <a class=\"id\" href=\"#args\">args</a>[1];", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[14] = <a class=\"id\" href=\"#args\">args</a>[0];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Good values for timeout and retries?  Values below</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   from scsi_ioctl_send_command() for default case... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd_result\">cmd_result</a> = <a class=\"id\" href=\"#scsi_execute\">scsi_execute</a>(<a class=\"id\" href=\"#scsidev\">scsidev</a>, <a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>, <a class=\"id\" href=\"#data_dir\">data_dir</a>, <a class=\"id\" href=\"#argbuf\">argbuf</a>, <a class=\"id\" href=\"#argsize\">argsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sensebuf\">sensebuf</a>, (10*<a class=\"id\" href=\"#HZ\">HZ</a>), 5, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#driver_byte\">driver_byte</a>(<a class=\"id\" href=\"#cmd_result\">cmd_result</a>) == <a class=\"id\" href=\"#DRIVER_SENSE\">DRIVER_SENSE</a>) {<span class=\"comment\">/* sense data available */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#sensebuf\">sensebuf</a> + 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd_result\">cmd_result</a> &= ~(0xFF<<24); <span class=\"comment\">/* DRIVER_SENSE is not an error */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we set cc then ATA pass-through will cause a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * check condition even if no error. Filter that. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd_result\">cmd_result</a> &amp; <a class=\"id\" href=\"#SAM_STAT_CHECK_CONDITION\">SAM_STAT_CHECK_CONDITION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#sshdr\">sshdr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_normalize_sense\">scsi_normalize_sense</a>(<a class=\"id\" href=\"#sensebuf\">sensebuf</a>, <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a> == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0 && <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd_result\">cmd_result</a> &= ~<a class=\"id\" href=\"#SAM_STAT_CHECK_CONDITION\">SAM_STAT_CHECK_CONDITION</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Send userspace a few ATA registers (same as drivers/ide) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sensebuf\">sensebuf</a>[0] == 0x72 &&<span class=\"ts\"/><span class=\"comment\">/* format is \"descriptor\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#desc\">desc</a>[0] == 0x09) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* code is \"ATA Descriptor\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[0] = <a class=\"id\" href=\"#desc\">desc</a>[13];<span class=\"ts\"/><span class=\"comment\">/* status */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[1] = <a class=\"id\" href=\"#desc\">desc</a>[3];<span class=\"ts\"/><span class=\"comment\">/* error */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[2] = <a class=\"id\" href=\"#desc\">desc</a>[5];<span class=\"ts\"/><span class=\"comment\">/* sector count (0:7) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#args\">args</a>, sizeof(<a class=\"id\" href=\"#args\">args</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd_result\">cmd_result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#argbuf\">argbuf</a>)", 
"<span class=\"ts\"/> && <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#arg\">arg</a> + sizeof(<a class=\"id\" href=\"#args\">args</a>), <a class=\"id\" href=\"#argbuf\">argbuf</a>, <a class=\"id\" href=\"#argsize\">argsize</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sensebuf\">sensebuf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#argbuf\">argbuf</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_task_ioctl - Handler for HDIO_DRIVE_TASK ioctl</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@scsidev: Device to which we are issuing command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@arg: User provided data for issuing command</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Defined by the SCSI layer.  We don't really care.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, negative errno on error.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_task_ioctl\">ata_task_ioctl</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#scsidev\">scsidev</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[<a class=\"id\" href=\"#MAX_COMMAND_SIZE\">MAX_COMMAND_SIZE</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#args\">args</a>[7], *<a class=\"id\" href=\"#sensebuf\">sensebuf</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cmd_result\">cmd_result</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#arg\">arg</a>, sizeof(<a class=\"id\" href=\"#args\">args</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sensebuf\">sensebuf</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>, <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sensebuf\">sensebuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>, 0, sizeof(<a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[0]  = <a class=\"id\" href=\"#ATA_16\">ATA_16</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[1]  = (3 << 1); <span class=\"comment\">/* Non-data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[2]  = 0x20;     <span class=\"comment\">/* cc but no off.line or data xfer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[4]  = <a class=\"id\" href=\"#args\">args</a>[1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[6]  = <a class=\"id\" href=\"#args\">args</a>[2];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[8]  = <a class=\"id\" href=\"#args\">args</a>[3];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[10] = <a class=\"id\" href=\"#args\">args</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[12] = <a class=\"id\" href=\"#args\">args</a>[5];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[13] = <a class=\"id\" href=\"#args\">args</a>[6] &amp; 0x4f;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>[14] = <a class=\"id\" href=\"#args\">args</a>[0];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Good values for timeout and retries?  Values below</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   from scsi_ioctl_send_command() for default case... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd_result\">cmd_result</a> = <a class=\"id\" href=\"#scsi_execute\">scsi_execute</a>(<a class=\"id\" href=\"#scsidev\">scsidev</a>, <a class=\"id\" href=\"#scsi_cmd\">scsi_cmd</a>, <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sensebuf\">sensebuf</a>, (10*<a class=\"id\" href=\"#HZ\">HZ</a>), 5, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#driver_byte\">driver_byte</a>(<a class=\"id\" href=\"#cmd_result\">cmd_result</a>) == <a class=\"id\" href=\"#DRIVER_SENSE\">DRIVER_SENSE</a>) {<span class=\"comment\">/* sense data available */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#sensebuf\">sensebuf</a> + 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd_result\">cmd_result</a> &= ~(0xFF<<24); <span class=\"comment\">/* DRIVER_SENSE is not an error */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we set cc then ATA pass-through will cause a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * check condition even if no error. Filter that. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd_result\">cmd_result</a> &amp; <a class=\"id\" href=\"#SAM_STAT_CHECK_CONDITION\">SAM_STAT_CHECK_CONDITION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#sshdr\">sshdr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_normalize_sense\">scsi_normalize_sense</a>(<a class=\"id\" href=\"#sensebuf\">sensebuf</a>, <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a> == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0 && <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd_result\">cmd_result</a> &= ~<a class=\"id\" href=\"#SAM_STAT_CHECK_CONDITION\">SAM_STAT_CHECK_CONDITION</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Send userspace ATA registers */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sensebuf\">sensebuf</a>[0] == 0x72 &&<span class=\"ts\"/><span class=\"comment\">/* format is \"descriptor\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[0] == 0x09) {<span class=\"comment\">/* code is \"ATA Descriptor\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[0] = <a class=\"id\" href=\"#desc\">desc</a>[13];<span class=\"ts\"/><span class=\"comment\">/* status */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[1] = <a class=\"id\" href=\"#desc\">desc</a>[3];<span class=\"ts\"/><span class=\"comment\">/* error */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[2] = <a class=\"id\" href=\"#desc\">desc</a>[5];<span class=\"ts\"/><span class=\"comment\">/* sector count (0:7) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[3] = <a class=\"id\" href=\"#desc\">desc</a>[7];<span class=\"ts\"/><span class=\"comment\">/* lbal */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[4] = <a class=\"id\" href=\"#desc\">desc</a>[9];<span class=\"ts\"/><span class=\"comment\">/* lbam */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[5] = <a class=\"id\" href=\"#desc\">desc</a>[11];<span class=\"ts\"/><span class=\"comment\">/* lbah */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[6] = <a class=\"id\" href=\"#desc\">desc</a>[12];<span class=\"ts\"/><span class=\"comment\">/* select */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#args\">args</a>, sizeof(<a class=\"id\" href=\"#args\">args</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd_result\">cmd_result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sensebuf\">sensebuf</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ata_ioc32\">ata_ioc32</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_PIO_DMA\">ATA_FLAG_PIO_DMA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_PIO32\">ATA_PFLAG_PIO32</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ata_sas_scsi_ioctl\">ata_sas_scsi_ioctl</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#scsidev\">scsidev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#cmd\">cmd</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>, <a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_IOC_GET_IO32\">ATA_IOC_GET_IO32</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#ata_ioc32\">ata_ioc32</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#arg\">arg</a>, &amp;<a class=\"id\" href=\"#val\">val</a>, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_IOC_SET_IO32\">ATA_IOC_SET_IO32</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = (unsigned long) <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_PIO32CHANGE\">ATA_PFLAG_PIO32CHANGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> |= <a class=\"id\" href=\"#ATA_PFLAG_PIO32\">ATA_PFLAG_PIO32</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &= ~<a class=\"id\" href=\"#ATA_PFLAG_PIO32\">ATA_PFLAG_PIO32</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> != <a class=\"id\" href=\"#ata_ioc32\">ata_ioc32</a>(<a class=\"id\" href=\"#ap\">ap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HDIO_GET_IDENTITY\">HDIO_GET_IDENTITY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ata_get_identity\">ata_get_identity</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#scsidev\">scsidev</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HDIO_DRIVE_CMD\">HDIO_DRIVE_CMD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>) || !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_RAWIO\">CAP_SYS_RAWIO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ata_cmd_ioctl\">ata_cmd_ioctl</a>(<a class=\"id\" href=\"#scsidev\">scsidev</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HDIO_DRIVE_TASK\">HDIO_DRIVE_TASK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_ADMIN\">CAP_SYS_ADMIN</a>) || !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_RAWIO\">CAP_SYS_RAWIO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ata_task_ioctl\">ata_task_ioctl</a>(<a class=\"id\" href=\"#scsidev\">scsidev</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOTTY\">ENOTTY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_sas_scsi_ioctl\">ata_sas_scsi_ioctl</a>);", 
"", 
"int <a class=\"id\" href=\"#ata_scsi_ioctl\">ata_scsi_ioctl</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#scsidev\">scsidev</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ata_sas_scsi_ioctl\">ata_sas_scsi_ioctl</a>(<a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#scsidev\">scsidev</a>-><a class=\"id\" href=\"#host\">host</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsidev\">scsidev</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_scsi_ioctl\">ata_scsi_ioctl</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_qc_new - acquire new ata_queued_cmd reference</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: ATA device to which the new command is attached</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd: SCSI command that originated this ATA command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@done: SCSI command completion function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Obtain a reference to an unused ata_queued_cmd structure,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>which is the basic libata structure representing a single</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ATA command sent to the hardware.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If a command was available, fill in the SCSI-specific</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>portions of the structure with information on the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>current command.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Command allocated, or %NULL if none available.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#ata_scsi_qc_new\">ata_scsi_qc_new</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void (*<a class=\"id\" href=\"#done\">done</a>)(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a> = <a class=\"id\" href=\"#ata_qc_new_init\">ata_qc_new_init</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a> = <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsidone\">scsidone</a> = <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#scsi_sglist\">scsi_sglist</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#n_elem\">n_elem</a> = <a class=\"id\" href=\"#scsi_sg_count\">scsi_sg_count</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a> = (<a class=\"id\" href=\"#DID_OK\">DID_OK</a> << 16) | (<a class=\"id\" href=\"#QUEUE_FULL\">QUEUE_FULL</a> << 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#qc\">qc</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ata_qc_set_pc_nbytes\">ata_qc_set_pc_nbytes</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#extrabytes\">extrabytes</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#extra_len\">extra_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#nbytes\">nbytes</a> = <a class=\"id\" href=\"#scsi_bufflen\">scsi_bufflen</a>(<a class=\"id\" href=\"#scmd\">scmd</a>) + <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#extrabytes\">extrabytes</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_dump_status - user friendly display of error info</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@id: id of the port in question</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tf: ptr to filled out taskfile</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Decode and dump the ATA error/status registers for the user so</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that they have some idea what really happened at the non</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>make-believe layer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>inherited from caller</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ata_dump_status\">ata_dump_status</a>(unsigned <a class=\"id\" href=\"#id\">id</a>, struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#stat\">stat</a> = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#feature\">feature</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"ata%u: status=0x%02x { \", <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#stat\">stat</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stat\">stat</a> &amp; <a class=\"id\" href=\"#ATA_BUSY\">ATA_BUSY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Busy }\\n\");<span class=\"ts\"/><span class=\"comment\">/* Data is not valid in this case */</span>", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stat\">stat</a> &amp; 0x40)<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"DriveReady \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stat\">stat</a> &amp; 0x20)<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"DeviceFault \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stat\">stat</a> &amp; 0x10)<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"SeekComplete \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stat\">stat</a> &amp; 0x08)<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"DataRequest \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stat\">stat</a> &amp; 0x04)<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"CorrectedError \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stat\">stat</a> &amp; 0x02)<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Index \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stat\">stat</a> &amp; 0x01)<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Error \");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"}\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"ata%u: error=0x%02x { \", <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &amp; 0x04)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"DriveStatusError \");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &amp; 0x80) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &amp; 0x04)<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"BadCRC \");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Sector \");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &amp; 0x40)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"UncorrectableError \");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &amp; 0x10)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"SectorIdNotFound \");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &amp; 0x02)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"TrackZeroNotFound \");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &amp; 0x01)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"AddrMarkNotFound \");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"}\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_to_sense_error - convert ATA error to SCSI error</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@id: ATA device number</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@drv_stat: value contained in ATA status register</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@drv_err: value contained in ATA error register</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sk: the sense key we'll fill out</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@asc: the additional sense code we'll fill out</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ascq: the additional sense code qualifier we'll fill out</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@verbose: be verbose</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Converts an ATA error into a SCSI error.  Fill out pointers to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SK, ASC, and ASCQ bytes for later use in fixed or descriptor</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>format sense blocks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ata_to_sense_error\">ata_to_sense_error</a>(unsigned <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#drv_stat\">drv_stat</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#drv_err\">drv_err</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#asc\">asc</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ascq\">ascq</a>, int <a class=\"id\" href=\"#verbose\">verbose</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Based on the 3ware driver translation table */</span>", 
"<span class=\"ts\"/>static const unsigned char <a class=\"id\" href=\"#sense_table\">sense_table</a>[][4] = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* BBD|ECC|ID|MAR */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0xd1, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ABORTED_COMMAND\">ABORTED_COMMAND</a>, 0x00, 0x00}, <span class=\"ts\"/><span class=\"comment\">// Device busy                  Aborted command</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* BBD|ECC|ID */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0xd0,  <span class=\"ts\"/><a class=\"id\" href=\"#ABORTED_COMMAND\">ABORTED_COMMAND</a>, 0x00, 0x00}, <span class=\"ts\"/><span class=\"comment\">// Device busy                  Aborted command</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ECC|MC|MARK */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x61, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#HARDWARE_ERROR\">HARDWARE_ERROR</a>, 0x00, 0x00}, <span class=\"ts\"/><span class=\"comment\">// Device fault                 Hardware error</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ICRC|ABRT */</span><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* NB: ICRC &amp; !ABRT is BBD */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x84, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ABORTED_COMMAND\">ABORTED_COMMAND</a>, 0x47, 0x00}, <span class=\"ts\"/><span class=\"comment\">// Data CRC error               SCSI parity error</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* MC|ID|ABRT|TRK0|MARK */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x37, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NOT_READY\">NOT_READY</a>, 0x04, 0x00}, <span class=\"ts\"/><span class=\"comment\">// Unit offline                 Not ready</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* MCR|MARK */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x09, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NOT_READY\">NOT_READY</a>, 0x04, 0x00}, <span class=\"ts\"/><span class=\"comment\">// Unrecovered disk error       Not ready</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  Bad address mark */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x01, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MEDIUM_ERROR\">MEDIUM_ERROR</a>, 0x13, 0x00}, <span class=\"ts\"/><span class=\"comment\">// Address mark not found       Address mark not found for data field</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TRK0 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x02, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#HARDWARE_ERROR\">HARDWARE_ERROR</a>, 0x00, 0x00}, <span class=\"ts\"/><span class=\"comment\">// Track 0 not found<span class=\"ts\"/><span class=\"ts\"/>  Hardware error</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Abort &amp; !ICRC */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x04, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ABORTED_COMMAND\">ABORTED_COMMAND</a>, 0x00, 0x00}, <span class=\"ts\"/><span class=\"comment\">// Aborted command              Aborted command</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Media change request */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x08, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NOT_READY\">NOT_READY</a>, 0x04, 0x00}, <span class=\"ts\"/><span class=\"comment\">// Media change request<span class=\"ts\"/>  FIXME: faking offline</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SRV */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x10, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ABORTED_COMMAND\">ABORTED_COMMAND</a>, 0x14, 0x00}, <span class=\"ts\"/><span class=\"comment\">// ID not found                 Recorded entity not found</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Media change */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x08,  <span class=\"ts\"/><a class=\"id\" href=\"#NOT_READY\">NOT_READY</a>, 0x04, 0x00}, <span class=\"ts\"/><span class=\"comment\">// Media change<span class=\"ts\"/><span class=\"ts\"/>  FIXME: faking offline</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ECC */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x40, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MEDIUM_ERROR\">MEDIUM_ERROR</a>, 0x11, 0x04}, <span class=\"ts\"/><span class=\"comment\">// Uncorrectable ECC error      Unrecovered read error</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* BBD - block marked bad */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x80, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MEDIUM_ERROR\">MEDIUM_ERROR</a>, 0x11, 0x04}, <span class=\"ts\"/><span class=\"comment\">// Block marked bad<span class=\"ts\"/><span class=\"ts\"/>  Medium error, unrecovered read error</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0xFF, 0xFF, 0xFF, 0xFF}, <span class=\"comment\">// END mark</span>", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>static const unsigned char <a class=\"id\" href=\"#stat_table\">stat_table</a>[][4] = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Must be first because BUSY means no other bits valid */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x80, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ABORTED_COMMAND\">ABORTED_COMMAND</a>, 0x47, 0x00},<span class=\"ts\"/><span class=\"comment\">// Busy, fake parity for now</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x20, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#HARDWARE_ERROR\">HARDWARE_ERROR</a>,  0x00, 0x00}, <span class=\"ts\"/><span class=\"comment\">// Device fault</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x08, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ABORTED_COMMAND\">ABORTED_COMMAND</a>, 0x47, 0x00},<span class=\"ts\"/><span class=\"comment\">// Timed out in xfer, fake parity for now</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0x04, <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RECOVERED_ERROR\">RECOVERED_ERROR</a>, 0x11, 0x00},<span class=\"ts\"/><span class=\"comment\">// Recovered ECC error<span class=\"ts\"/>  Medium error, recovered</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>{0xFF, 0xFF, 0xFF, 0xFF}, <span class=\"comment\">// END mark</span>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Is this an error we can process/parse</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drv_stat\">drv_stat</a> &amp; <a class=\"id\" href=\"#ATA_BUSY\">ATA_BUSY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drv_err\">drv_err</a> = 0;<span class=\"ts\"/><span class=\"comment\">/* Ignore the err bits, they're invalid */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drv_err\">drv_err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Look for drv_err */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#sense_table\">sense_table</a>[<a class=\"id\" href=\"#i\">i</a>][0] != 0xFF; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Look for best matches first */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#sense_table\">sense_table</a>[<a class=\"id\" href=\"#i\">i</a>][0] &amp; <a class=\"id\" href=\"#drv_err\">drv_err</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sense_table\">sense_table</a>[<a class=\"id\" href=\"#i\">i</a>][0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#sense_table\">sense_table</a>[<a class=\"id\" href=\"#i\">i</a>][1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#asc\">asc</a> = <a class=\"id\" href=\"#sense_table\">sense_table</a>[<a class=\"id\" href=\"#i\">i</a>][2];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ascq\">ascq</a> = <a class=\"id\" href=\"#sense_table\">sense_table</a>[<a class=\"id\" href=\"#i\">i</a>][3];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#translate_done\">translate_done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No immediate match */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#verbose\">verbose</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"ata%u: no sense translation for \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"error 0x%02x\\n\", <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#drv_err\">drv_err</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Fall back to interpreting status bits */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#stat_table\">stat_table</a>[<a class=\"id\" href=\"#i\">i</a>][0] != 0xFF; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#stat_table\">stat_table</a>[<a class=\"id\" href=\"#i\">i</a>][0] &amp; <a class=\"id\" href=\"#drv_stat\">drv_stat</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#stat_table\">stat_table</a>[<a class=\"id\" href=\"#i\">i</a>][1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#asc\">asc</a> = <a class=\"id\" href=\"#stat_table\">stat_table</a>[<a class=\"id\" href=\"#i\">i</a>][2];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ascq\">ascq</a> = <a class=\"id\" href=\"#stat_table\">stat_table</a>[<a class=\"id\" href=\"#i\">i</a>][3];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#translate_done\">translate_done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* No error?  Undecoded? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#verbose\">verbose</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"ata%u: no sense translation for \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"status: 0x%02x\\n\", <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#drv_stat\">drv_stat</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We need a sensible error return here, which is tricky, and one</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   that won't cause people to do things like return a disk wrongly */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#ABORTED_COMMAND\">ABORTED_COMMAND</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#asc\">asc</a> = 0x00;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ascq\">ascq</a> = 0x00;", 
"", 
" <a class=\"id\" href=\"#translate_done\">translate_done</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#verbose\">verbose</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ata%u: translated ATA stat/err 0x%02x/%02x \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"to SCSI SK/ASC/ASCQ 0x%x/%02x/%02x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#drv_stat\">drv_stat</a>, <a class=\"id\" href=\"#drv_err\">drv_err</a>, *<a class=\"id\" href=\"#sk\">sk</a>, *<a class=\"id\" href=\"#asc\">asc</a>, *<a class=\"id\" href=\"#ascq\">ascq</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_gen_passthru_sense - Generate check condition sense block.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Command that completed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is specific to the ATA descriptor format sense</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>block specified for the ATA pass through commands.  Regardless</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of whether the command errored or not, return a sense</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>block. Copy all controller registers into the sense</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>block. Clear sense key, ASC &amp; ASCQ if there is no error.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ata_gen_passthru_sense\">ata_gen_passthru_sense</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a> = &amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#result_tf\">result_tf</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#sb\">sb</a> + 8;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#verbose\">verbose</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#error_handler\">error_handler</a> == <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#sb\">sb</a>, 0, <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a> = (<a class=\"id\" href=\"#DRIVER_SENSE\">DRIVER_SENSE</a> << 24) | <a class=\"id\" href=\"#SAM_STAT_CHECK_CONDITION\">SAM_STAT_CHECK_CONDITION</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use ata_to_sense_error() to map status register bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * onto sense key, asc &amp; ascq.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> &amp; (<a class=\"id\" href=\"#ATA_BUSY\">ATA_BUSY</a> | <a class=\"id\" href=\"#ATA_DF\">ATA_DF</a> | <a class=\"id\" href=\"#ATA_ERR\">ATA_ERR</a> | <a class=\"id\" href=\"#ATA_DRQ\">ATA_DRQ</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_to_sense_error\">ata_to_sense_error</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#print_id\">print_id</a>, <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#feature\">feature</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#sb\">sb</a>[1], &amp;<a class=\"id\" href=\"#sb\">sb</a>[2], &amp;<a class=\"id\" href=\"#sb\">sb</a>[3], <a class=\"id\" href=\"#verbose\">verbose</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>[1] &= 0x0f;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sense data is current and format is descriptor.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>[0] = 0x72;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[0] = 0x09;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set length of additional sense data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>[7] = 14;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[1] = 12;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Copy registers into sense buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[2] = 0x00;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[3] = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#feature\">feature</a>;<span class=\"ts\"/><span class=\"comment\">/* == error reg */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[5] = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[7] = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbal\">lbal</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[9] = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[11] = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[12] = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[13] = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a>; <span class=\"comment\">/* == status reg */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fill in Extend bit, and the high order bytes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if applicable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_TFLAG_LBA48\">ATA_TFLAG_LBA48</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[2] |= 0x01;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[4] = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_nsect\">hob_nsect</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[6] = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbal\">hob_lbal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[8] = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbam\">hob_lbam</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[10] = <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbah\">hob_lbah</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_gen_ata_sense - generate a SCSI fixed sense block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Command that we are erroring out</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Generate sense block for a failed ATA command @qc.  Descriptor</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>format is used to accomodate LBA48 block address.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ata_gen_ata_sense\">ata_gen_ata_sense</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a> = &amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#result_tf\">result_tf</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#sb\">sb</a> + 8;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#verbose\">verbose</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#error_handler\">error_handler</a> == <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#block\">block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#sb\">sb</a>, 0, <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a> = (<a class=\"id\" href=\"#DRIVER_SENSE\">DRIVER_SENSE</a> << 24) | <a class=\"id\" href=\"#SAM_STAT_CHECK_CONDITION\">SAM_STAT_CHECK_CONDITION</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* sense data is current and format is descriptor */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>[0] = 0x72;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use ata_to_sense_error() to map status register bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * onto sense key, asc &amp; ascq.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> &amp; (<a class=\"id\" href=\"#ATA_BUSY\">ATA_BUSY</a> | <a class=\"id\" href=\"#ATA_DF\">ATA_DF</a> | <a class=\"id\" href=\"#ATA_ERR\">ATA_ERR</a> | <a class=\"id\" href=\"#ATA_DRQ\">ATA_DRQ</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_to_sense_error\">ata_to_sense_error</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#print_id\">print_id</a>, <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#feature\">feature</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#sb\">sb</a>[1], &amp;<a class=\"id\" href=\"#sb\">sb</a>[2], &amp;<a class=\"id\" href=\"#sb\">sb</a>[3], <a class=\"id\" href=\"#verbose\">verbose</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>[1] &= 0x0f;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#ata_tf_read_block\">ata_tf_read_block</a>(&amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#result_tf\">result_tf</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* information sense data descriptor */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>[7] = 12;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[0] = 0x00;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[1] = 10;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[2] |= 0x80;<span class=\"ts\"/><span class=\"comment\">/* valid */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[6] = <a class=\"id\" href=\"#block\">block</a> >> 40;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[7] = <a class=\"id\" href=\"#block\">block</a> >> 32;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[8] = <a class=\"id\" href=\"#block\">block</a> >> 24;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[9] = <a class=\"id\" href=\"#block\">block</a> >> 16;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[10] = <a class=\"id\" href=\"#block\">block</a> >> 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>[11] = <a class=\"id\" href=\"#block\">block</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ata_scsi_sdev_config\">ata_scsi_sdev_config</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#use_10_for_rw\">use_10_for_rw</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#use_10_for_ms\">use_10_for_ms</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Schedule policy is determined by -&gt;qc_defer() callback and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it needs to see every deferred qc.  Set dev_blocked to 1 to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prevent SCSI midlayer from automatically deferring</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * requests.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#max_device_blocked\">max_device_blocked</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>atapi_drain_needed - Check whether data transfer may overflow</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rq: request to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ATAPI commands which transfer variable length data to host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>might overflow due to application error or hardare bug.  This</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>function checks whether overflow should be drained and ignored</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for @request.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1 if ; otherwise, 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#atapi_drain_needed\">atapi_drain_needed</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> != <a class=\"id\" href=\"#REQ_TYPE_BLOCK_PC\">REQ_TYPE_BLOCK_PC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>) || (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_WRITE\">REQ_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atapi_cmd_type\">atapi_cmd_type</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd\">cmd</a>[0]) == <a class=\"id\" href=\"#ATAPI_MISC\">ATAPI_MISC</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ata_scsi_dev_config\">ata_scsi_dev_config</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_id_has_unload\">ata_id_has_unload</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_DFLAG_NO_UNLOAD\">ATA_DFLAG_NO_UNLOAD</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* configure max sectors */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_max_hw_sectors\">blk_queue_max_hw_sectors</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#max_sectors\">max_sectors</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#ATA_DEV_ATAPI\">ATA_DEV_ATAPI</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set the min alignment and padding */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_update_dma_alignment\">blk_queue_update_dma_alignment</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ATA_DMA_PAD_SZ\">ATA_DMA_PAD_SZ</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_update_dma_pad\">blk_queue_update_dma_pad</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ATA_DMA_PAD_SZ\">ATA_DMA_PAD_SZ</a> - 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* configure draining */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#ATAPI_MAX_DRAIN\">ATAPI_MAX_DRAIN</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#bounce_gfp\">bounce_gfp</a> | <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"drain buffer allocation failed\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_dma_drain\">blk_queue_dma_drain</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#atapi_drain_needed\">atapi_drain_needed</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#ATAPI_MAX_DRAIN\">ATAPI_MAX_DRAIN</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ATA devices must be sector aligned */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_update_dma_alignment\">blk_queue_update_dma_alignment</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ATA_SECT_SIZE\">ATA_SECT_SIZE</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#manage_start_stop\">manage_start_stop</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_AN\">ATA_DFLAG_AN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#SDEV_EVT_MEDIA_CHANGE\">SDEV_EVT_MEDIA_CHANGE</a>, <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#supported_events\">supported_events</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_NCQ\">ATA_DFLAG_NCQ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#depth\">depth</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#depth\">depth</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#can_queue\">can_queue</a>, <a class=\"id\" href=\"#ata_id_queue_depth\">ata_id_queue_depth</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#depth\">depth</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#ATA_MAX_QUEUE\">ATA_MAX_QUEUE</a> - 1, <a class=\"id\" href=\"#depth\">depth</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_adjust_queue_depth\">scsi_adjust_queue_depth</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#MSG_SIMPLE_TAG\">MSG_SIMPLE_TAG</a>, <a class=\"id\" href=\"#depth\">depth</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_slave_config - Set SCSI device attributes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev: SCSI device to examine</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is called before we actually start reading</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and writing to the device, to configure certain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SCSI mid-layer behaviors.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Defined by SCSI layer.  We don't really care.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#ata_scsi_slave_config\">ata_scsi_slave_config</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#__ata_scsi_find_dev\">__ata_scsi_find_dev</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_sdev_config\">ata_scsi_sdev_config</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_scsi_dev_config\">ata_scsi_dev_config</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_slave_destroy - SCSI device is about to be destroyed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev: SCSI device to be destroyed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev is about to be destroyed for hot/warm unplugging.  If</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this unplugging was initiated by libata as indicated by NULL</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev-&gt;sdev, this function doesn't have to do anything.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Otherwise, SCSI layer initiated warm-unplug is in progress.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Clear dev-&gt;sdev, schedule the device for ATA detach and invoke</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>EH.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Defined by SCSI layer.  We don't really care.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_scsi_slave_destroy\">ata_scsi_slave_destroy</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#error_handler\">error_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#__ata_scsi_find_dev\">__ata_scsi_find_dev</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a> && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sdev\">sdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SCSI device already in CANCEL state, no need to offline it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_DFLAG_DETACH\">ATA_DFLAG_DETACH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_schedule_eh\">ata_port_schedule_eh</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_buffer\">dma_drain_buffer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_buffer\">dma_drain_buffer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_size\">dma_drain_size</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_change_queue_depth - SCSI callback for queue depth config</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdev: SCSI device to configure queue depth for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@queue_depth: new queue depth</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@reason: calling context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is libata standard hostt-&gt;change_queue_depth callback.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SCSI will call into this callback when user tries to set queue</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>depth via sysfs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SCSI layer (we don't care)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Newly configured queue depth.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_scsi_change_queue_depth\">ata_scsi_change_queue_depth</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>, int <a class=\"id\" href=\"#queue_depth\">queue_depth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#reason\">reason</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reason\">reason</a> != <a class=\"id\" href=\"#SCSI_QDEPTH_DEFAULT\">SCSI_QDEPTH_DEFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#queue_depth\">queue_depth</a> &lt; 1 || <a class=\"id\" href=\"#queue_depth\">queue_depth</a> == <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#queue_depth\">queue_depth</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#queue_depth\">queue_depth</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#ata_scsi_find_dev\">ata_scsi_find_dev</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a> || !<a class=\"id\" href=\"#ata_dev_enabled\">ata_dev_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#queue_depth\">queue_depth</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NCQ enabled? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#ATA_DFLAG_NCQ_OFF\">ATA_DFLAG_NCQ_OFF</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#queue_depth\">queue_depth</a> == 1 || !<a class=\"id\" href=\"#ata_ncq_enabled\">ata_ncq_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_DFLAG_NCQ_OFF\">ATA_DFLAG_NCQ_OFF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_depth\">queue_depth</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* limit and apply queue depth */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_depth\">queue_depth</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#queue_depth\">queue_depth</a>, <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#can_queue\">can_queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_depth\">queue_depth</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#queue_depth\">queue_depth</a>, <a class=\"id\" href=\"#ata_id_queue_depth\">ata_id_queue_depth</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_depth\">queue_depth</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#queue_depth\">queue_depth</a>, <a class=\"id\" href=\"#ATA_MAX_QUEUE\">ATA_MAX_QUEUE</a> - 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#queue_depth\">queue_depth</a> == <a class=\"id\" href=\"#queue_depth\">queue_depth</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_adjust_queue_depth\">scsi_adjust_queue_depth</a>(<a class=\"id\" href=\"#sdev\">sdev</a>, <a class=\"id\" href=\"#MSG_SIMPLE_TAG\">MSG_SIMPLE_TAG</a>, <a class=\"id\" href=\"#queue_depth\">queue_depth</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#queue_depth\">queue_depth</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_start_stop_xlat - Translate SCSI START STOP UNIT command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Storage for translated ATA taskfile</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Sets up an ATA taskfile to issue STANDBY (to stop) or READ VERIFY</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(to start). Perhaps these commands should be preceded by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>CHECK POWER MODE to see what power mode the device is already in.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>[See SAT revision 5 at www.t10.org]</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, non-zero on error.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_scsi_start_stop_xlat\">ata_scsi_start_stop_xlat</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a> = &amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#cdb\">cdb</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> &lt; 5)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a> | <a class=\"id\" href=\"#ATA_TFLAG_ISADDR\">ATA_TFLAG_ISADDR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATA_PROT_NODATA\">ATA_PROT_NODATA</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cdb\">cdb</a>[1] &amp; 0x1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>;<span class=\"ts\"/><span class=\"comment\">/* ignore IMMED bit, violates sat-r05 */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cdb\">cdb</a>[4] &amp; 0x2)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;       <span class=\"comment\">/* LOEJ bit set not supported */</span>", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#cdb\">cdb</a>[4] >> 4) &amp; 0xf) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;       <span class=\"comment\">/* power conditions not supported */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cdb\">cdb</a>[4] &amp; 0x1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a> = 1;<span class=\"ts\"/><span class=\"comment\">/* 1 sector, lba=0 */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_LBA\">ATA_DFLAG_LBA</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_LBA\">ATA_TFLAG_LBA</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> = 0x0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> = 0x0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbal\">lbal</a> = 0x0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> |= <a class=\"id\" href=\"#ATA_LBA\">ATA_LBA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* CHS */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbal\">lbal</a> = 0x1; <span class=\"comment\">/* sect */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> = 0x0; <span class=\"comment\">/* cyl low */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> = 0x0; <span class=\"comment\">/* cyl high */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_VERIFY\">ATA_CMD_VERIFY</a>;<span class=\"ts\"/><span class=\"comment\">/* READ VERIFY */</span>", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Some odd clown BIOSen issue spindown on power off (ACPI S4</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or S5) causing some drives to spin up and down again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_NO_POWEROFF_SPINDOWN\">ATA_FLAG_NO_POWEROFF_SPINDOWN</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#system_state\">system_state</a> == <a class=\"id\" href=\"#SYSTEM_POWER_OFF\">SYSTEM_POWER_OFF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#skip\">skip</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_NO_HIBERNATE_SPINDOWN\">ATA_FLAG_NO_HIBERNATE_SPINDOWN</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#system_entering_hibernation\">system_entering_hibernation</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#skip\">skip</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Issue ATA STANDBY IMMEDIATE command */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_STANDBYNOW1\">ATA_CMD_STANDBYNOW1</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Standby and Idle condition timers could be implemented but that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * would require libata to implement the Power condition mode page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and allow the user to change it. Changing mode pages requires</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MODE SELECT to be implemented.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_set_sense\">ata_scsi_set_sense</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a>, 0x24, 0x0);", 
"<span class=\"ts\"/><span class=\"comment\">/* \"Invalid field in cbd\" */</span>", 
"<span class=\"ts\"/>return 1;", 
" <a class=\"id\" href=\"#skip\">skip</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#SAM_STAT_GOOD\">SAM_STAT_GOOD</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_flush_xlat - Translate SCSI SYNCHRONIZE CACHE command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Storage for translated ATA taskfile</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Sets up an ATA taskfile to issue FLUSH CACHE or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>FLUSH CACHE EXT.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, non-zero on error.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_scsi_flush_xlat\">ata_scsi_flush_xlat</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a> = &amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATA_PROT_NODATA\">ATA_PROT_NODATA</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_FLUSH_EXT\">ATA_DFLAG_FLUSH_EXT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_FLUSH_EXT\">ATA_CMD_FLUSH_EXT</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_FLUSH\">ATA_CMD_FLUSH</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* flush is critical for IO integrity, consider it an IO command */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_QCFLAG_IO\">ATA_QCFLAG_IO</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>scsi_6_lba_len - Get LBA and transfer length</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cdb: SCSI command to translate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Calculate LBA and transfer length for 6-byte commands.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@plba: the LBA</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@plen: the transfer length</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_6_lba_len\">scsi_6_lba_len</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#cdb\">cdb</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#plba\">plba</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#plen\">plen</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#lba\">lba</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"six-byte command\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)(<a class=\"id\" href=\"#cdb\">cdb</a>[1] &amp; 0x1f)) << 16;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[2]) << 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[3]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[4];", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#plba\">plba</a> = <a class=\"id\" href=\"#lba\">lba</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#plen\">plen</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>scsi_10_lba_len - Get LBA and transfer length</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cdb: SCSI command to translate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Calculate LBA and transfer length for 10-byte commands.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@plba: the LBA</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@plen: the transfer length</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_10_lba_len\">scsi_10_lba_len</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#cdb\">cdb</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#plba\">plba</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#plen\">plen</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#lba\">lba</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#len\">len</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"ten-byte command\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[2]) << 24;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[3]) << 16;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[4]) << 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[5]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> |= ((<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[7]) << 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> |= ((<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[8]);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#plba\">plba</a> = <a class=\"id\" href=\"#lba\">lba</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#plen\">plen</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>scsi_16_lba_len - Get LBA and transfer length</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cdb: SCSI command to translate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Calculate LBA and transfer length for 16-byte commands.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@plba: the LBA</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@plen: the transfer length</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scsi_16_lba_len\">scsi_16_lba_len</a>(const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#cdb\">cdb</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#plba\">plba</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#plen\">plen</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#lba\">lba</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#len\">len</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"sixteen-byte command\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[2]) << 56;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[3]) << 48;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[4]) << 40;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[5]) << 32;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[6]) << 24;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[7]) << 16;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[8]) << 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> |= ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[9]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> |= ((<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[10]) << 24;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> |= ((<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[11]) << 16;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> |= ((<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[12]) << 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> |= ((<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#cdb\">cdb</a>[13]);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#plba\">plba</a> = <a class=\"id\" href=\"#lba\">lba</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#plen\">plen</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_verify_xlat - Translate SCSI VERIFY command into an ATA one</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Storage for translated ATA taskfile</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Converts SCSI VERIFY command to an ATA READ VERIFY command.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, non-zero on error.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_scsi_verify_xlat\">ata_scsi_verify_xlat</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a> = &amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dev_sectors\">dev_sectors</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#n_sectors\">n_sectors</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#cdb\">cdb</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#n_block\">n_block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_ISADDR\">ATA_TFLAG_ISADDR</a> | <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATA_PROT_NODATA\">ATA_PROT_NODATA</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cdb\">cdb</a>[0] == <a class=\"id\" href=\"#VERIFY\">VERIFY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> &lt; 10)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_10_lba_len\">scsi_10_lba_len</a>(<a class=\"id\" href=\"#cdb\">cdb</a>, &amp;<a class=\"id\" href=\"#block\">block</a>, &amp;<a class=\"id\" href=\"#n_block\">n_block</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#cdb\">cdb</a>[0] == <a class=\"id\" href=\"#VERIFY_16\">VERIFY_16</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> &lt; 16)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_16_lba_len\">scsi_16_lba_len</a>(<a class=\"id\" href=\"#cdb\">cdb</a>, &amp;<a class=\"id\" href=\"#block\">block</a>, &amp;<a class=\"id\" href=\"#n_block\">n_block</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n_block\">n_block</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nothing_to_do\">nothing_to_do</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#block\">block</a> >= <a class=\"id\" href=\"#dev_sectors\">dev_sectors</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_of_range\">out_of_range</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#block\">block</a> + <a class=\"id\" href=\"#n_block\">n_block</a>) &gt; <a class=\"id\" href=\"#dev_sectors\">dev_sectors</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_of_range\">out_of_range</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_LBA\">ATA_DFLAG_LBA</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_LBA\">ATA_TFLAG_LBA</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lba_28_ok\">lba_28_ok</a>(<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#n_block\">n_block</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* use LBA28 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_VERIFY\">ATA_CMD_VERIFY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> |= (<a class=\"id\" href=\"#block\">block</a> >> 24) &amp; 0xf;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#lba_48_ok\">lba_48_ok</a>(<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#n_block\">n_block</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_LBA48\">ATA_DFLAG_LBA48</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_of_range\">out_of_range</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* use LBA48 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_LBA48\">ATA_TFLAG_LBA48</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_VERIFY_EXT\">ATA_CMD_VERIFY_EXT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_nsect\">hob_nsect</a> = (<a class=\"id\" href=\"#n_block\">n_block</a> >> 8) &amp; 0xff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbah\">hob_lbah</a> = (<a class=\"id\" href=\"#block\">block</a> >> 40) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbam\">hob_lbam</a> = (<a class=\"id\" href=\"#block\">block</a> >> 32) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbal\">hob_lbal</a> = (<a class=\"id\" href=\"#block\">block</a> >> 24) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* request too large even for LBA48 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_of_range\">out_of_range</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a> = <a class=\"id\" href=\"#n_block\">n_block</a> &amp; 0xff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> = (<a class=\"id\" href=\"#block\">block</a> >> 16) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> = (<a class=\"id\" href=\"#block\">block</a> >> 8) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbal\">lbal</a> = <a class=\"id\" href=\"#block\">block</a> &amp; 0xff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> |= <a class=\"id\" href=\"#ATA_LBA\">ATA_LBA</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* CHS */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sect\">sect</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#cyl\">cyl</a>, <a class=\"id\" href=\"#track\">track</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#lba_28_ok\">lba_28_ok</a>(<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#n_block\">n_block</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_of_range\">out_of_range</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Convert LBA to CHS */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#track\">track</a> = (<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#block\">block</a> / <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sectors\">sectors</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cyl\">cyl</a>   = <a class=\"id\" href=\"#track\">track</a> / <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#heads\">heads</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>  = <a class=\"id\" href=\"#track\">track</a> % <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#heads\">heads</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sect\">sect</a>  = (<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#block\">block</a> % <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sectors\">sectors</a> + 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"block %u track %u cyl %u head %u sect %u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#track\">track</a>, <a class=\"id\" href=\"#cyl\">cyl</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#sect\">sect</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check whether the converted CHS can fit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   Cylinder: 0-65535</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   Head: 0-15</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   Sector: 1-255*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cyl\">cyl</a> >> 16) || (<a class=\"id\" href=\"#head\">head</a> >> 4) || (<a class=\"id\" href=\"#sect\">sect</a> >> 8) || (!<a class=\"id\" href=\"#sect\">sect</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_of_range\">out_of_range</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_VERIFY\">ATA_CMD_VERIFY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a> = <a class=\"id\" href=\"#n_block\">n_block</a> &amp; 0xff; <span class=\"comment\">/* Sector count 0 means 256 sectors */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbal\">lbal</a> = <a class=\"id\" href=\"#sect\">sect</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> = <a class=\"id\" href=\"#cyl\">cyl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> = <a class=\"id\" href=\"#cyl\">cyl</a> >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> |= <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_set_sense\">ata_scsi_set_sense</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a>, 0x24, 0x0);", 
"<span class=\"ts\"/><span class=\"comment\">/* \"Invalid field in cbd\" */</span>", 
"<span class=\"ts\"/>return 1;", 
"", 
"<a class=\"id\" href=\"#out_of_range\">out_of_range</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_set_sense\">ata_scsi_set_sense</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a>, 0x21, 0x0);", 
"<span class=\"ts\"/><span class=\"comment\">/* \"Logical Block Address out of range\" */</span>", 
"<span class=\"ts\"/>return 1;", 
"", 
"<a class=\"id\" href=\"#nothing_to_do\">nothing_to_do</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#SAM_STAT_GOOD\">SAM_STAT_GOOD</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_rw_xlat - Translate SCSI r/w command into an ATA one</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Storage for translated ATA taskfile</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Converts any of six SCSI read/write commands into the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ATA counterpart, including starting sector (LBA),</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sector count, and taking into account the device's LBA48</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>support.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Commands %READ_6, %READ_10, %READ_16, %WRITE_6, %WRITE_10, and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%WRITE_16 are currently supported.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, non-zero on error.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_scsi_rw_xlat\">ata_scsi_rw_xlat</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#cdb\">cdb</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tf_flags\">tf_flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#n_block\">n_block</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cdb\">cdb</a>[0] == <a class=\"id\" href=\"#WRITE_10\">WRITE_10</a> || <a class=\"id\" href=\"#cdb\">cdb</a>[0] == <a class=\"id\" href=\"#WRITE_6\">WRITE_6</a> || <a class=\"id\" href=\"#cdb\">cdb</a>[0] == <a class=\"id\" href=\"#WRITE_16\">WRITE_16</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf_flags\">tf_flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_WRITE\">ATA_TFLAG_WRITE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Calculate the SCSI LBA, transfer length and FUA. */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cdb\">cdb</a>[0]) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#READ_10\">READ_10</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#WRITE_10\">WRITE_10</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> &lt; 10))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_10_lba_len\">scsi_10_lba_len</a>(<a class=\"id\" href=\"#cdb\">cdb</a>, &amp;<a class=\"id\" href=\"#block\">block</a>, &amp;<a class=\"id\" href=\"#n_block\">n_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cdb\">cdb</a>[1] &amp; (1 << 3)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf_flags\">tf_flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_FUA\">ATA_TFLAG_FUA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#READ_6\">READ_6</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#WRITE_6\">WRITE_6</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> &lt; 6))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_6_lba_len\">scsi_6_lba_len</a>(<a class=\"id\" href=\"#cdb\">cdb</a>, &amp;<a class=\"id\" href=\"#block\">block</a>, &amp;<a class=\"id\" href=\"#n_block\">n_block</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for 6-byte r/w commands, transfer length 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * means 256 blocks of data, not 0 block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#n_block\">n_block</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n_block\">n_block</a> = 256;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#READ_16\">READ_16</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#WRITE_16\">WRITE_16</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> &lt; 16))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_16_lba_len\">scsi_16_lba_len</a>(<a class=\"id\" href=\"#cdb\">cdb</a>, &amp;<a class=\"id\" href=\"#block\">block</a>, &amp;<a class=\"id\" href=\"#n_block\">n_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cdb\">cdb</a>[1] &amp; (1 << 3)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf_flags\">tf_flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_FUA\">ATA_TFLAG_FUA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"no-byte command\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check and compose ATA command */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n_block\">n_block</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* For 10-byte and 16-byte SCSI R/W commands, transfer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * length 0 means transfer 0 block of data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * However, for ATA R/W commands, sector count 0 means</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 256 or 65536 sectors, not 0 sectors as in SCSI.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * WARNING: one or two older ATA drives treat 0 as 0...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nothing_to_do\">nothing_to_do</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_QCFLAG_IO\">ATA_QCFLAG_IO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#nbytes\">nbytes</a> = <a class=\"id\" href=\"#n_block\">n_block</a> * <a class=\"id\" href=\"#ATA_SECT_SIZE\">ATA_SECT_SIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_build_rw_tf\">ata_build_rw_tf</a>(&amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#n_block\">n_block</a>, <a class=\"id\" href=\"#tf_flags\">tf_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tag\">tag</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#rc\">rc</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_of_range\">out_of_range</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* treat all other errors as -EINVAL, fall through */</span>", 
"<a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_set_sense\">ata_scsi_set_sense</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a>, 0x24, 0x0);", 
"<span class=\"ts\"/><span class=\"comment\">/* \"Invalid field in cbd\" */</span>", 
"<span class=\"ts\"/>return 1;", 
"", 
"<a class=\"id\" href=\"#out_of_range\">out_of_range</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_set_sense\">ata_scsi_set_sense</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a>, 0x21, 0x0);", 
"<span class=\"ts\"/><span class=\"comment\">/* \"Logical Block Address out of range\" */</span>", 
"<span class=\"ts\"/>return 1;", 
"", 
"<a class=\"id\" href=\"#nothing_to_do\">nothing_to_do</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#SAM_STAT_GOOD\">SAM_STAT_GOOD</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ata_scsi_qc_complete\">ata_scsi_qc_complete</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#cdb\">cdb</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#need_sense\">need_sense</a> = (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> != 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* For ATA pass thru (SAT) commands, generate a sense block if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * user mandated it or if there's an error.  Note that if we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * generate because the user forced us to, a check condition</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is generated and the ATA register values are returned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * whether the command completed successfully or not. If there</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * was no error, SK, ASC and ASCQ will all be zero.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#cdb\">cdb</a>[0] == <a class=\"id\" href=\"#ATA_16\">ATA_16</a>) || (<a class=\"id\" href=\"#cdb\">cdb</a>[0] == <a class=\"id\" href=\"#ATA_12\">ATA_12</a>)) &&", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#cdb\">cdb</a>[2] &amp; 0x20) || <a class=\"id\" href=\"#need_sense\">need_sense</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_gen_passthru_sense\">ata_gen_passthru_sense</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#need_sense\">need_sense</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#SAM_STAT_GOOD\">SAM_STAT_GOOD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TODO: decide which descriptor format to use</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for 48b LBA devices and call that here</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * instead of the fixed desc, which is only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * good for smaller LBA (and maybe CHS?)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_gen_ata_sense\">ata_gen_ata_sense</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_sense\">need_sense</a> && !<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#error_handler\">error_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dump_status\">ata_dump_status</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#print_id\">print_id</a>, &amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#result_tf\">result_tf</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsidone\">scsidone</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_free\">ata_qc_free</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_translate - Translate then issue SCSI command to ATA device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: ATA device to which the command is addressed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd: SCSI command to execute</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@done: SCSI command completion function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@xlat_func: Actor which translates @cmd to an ATA taskfile</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Our -&gt;queuecommand() function has decided that the SCSI</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>command issued can be directly translated into an ATA</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>command, rather than handled internally.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function sets up an ata_queued_cmd structure for the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SCSI command, and sends that ata_queued_cmd to the hardware.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The xlat_func argument (actor) returns 0 if ready to execute</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ATA command, else 1 to finish translation. If 1 is returned</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>then cmd-&gt;result (and possibly cmd-&gt;sense_buffer) are assumed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to be set reflecting an error condition or clean (early)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>termination.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, SCSI_ML_QUEUE_DEVICE_BUSY if the command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>needs to be deferred.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ata_scsi_translate\">ata_scsi_translate</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void (*<a class=\"id\" href=\"#done\">done</a>)(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ata_xlat_func_t\">ata_xlat_func_t</a> <a class=\"id\" href=\"#xlat_func\">xlat_func</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"ENTER\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a> = <a class=\"id\" href=\"#ata_scsi_qc_new\">ata_scsi_qc_new</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#done\">done</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#qc\">qc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_mem\">err_mem</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* data is present; dma-map it */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sc_data_direction\">sc_data_direction</a> == <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sc_data_direction\">sc_data_direction</a> == <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#scsi_bufflen\">scsi_bufflen</a>(<a class=\"id\" href=\"#cmd\">cmd</a>) &lt; 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"WARNING: zero len r/w req\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_did\">err_did</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_sg_init\">ata_sg_init</a>(<a class=\"id\" href=\"#qc\">qc</a>, <a class=\"id\" href=\"#scsi_sglist\">scsi_sglist</a>(<a class=\"id\" href=\"#cmd\">cmd</a>), <a class=\"id\" href=\"#scsi_sg_count\">scsi_sg_count</a>(<a class=\"id\" href=\"#cmd\">cmd</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dma_dir\">dma_dir</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sc_data_direction\">sc_data_direction</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#complete_fn\">complete_fn</a> = <a class=\"id\" href=\"#ata_scsi_qc_complete\">ata_scsi_qc_complete</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xlat_func\">xlat_func</a>(<a class=\"id\" href=\"#qc\">qc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#early_finish\">early_finish</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#qc_defer\">qc_defer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#qc_defer\">qc_defer</a>(<a class=\"id\" href=\"#qc\">qc</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#defer\">defer</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* select device, send command to hardware */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_issue\">ata_qc_issue</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"EXIT\\n\");", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#early_finish\">early_finish</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_free\">ata_qc_free</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsidone\">scsidone</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"EXIT - early finish (good or error)\\n\");", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err_did\">err_did</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_free\">ata_qc_free</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a> = (<a class=\"id\" href=\"#DID_ERROR\">DID_ERROR</a> << 16);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsidone\">scsidone</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<a class=\"id\" href=\"#err_mem\">err_mem</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"EXIT - internal\\n\");", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#defer\">defer</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_free\">ata_qc_free</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"EXIT - defer\\n\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == <a class=\"id\" href=\"#ATA_DEFER_LINK\">ATA_DEFER_LINK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SCSI_MLQUEUE_DEVICE_BUSY\">SCSI_MLQUEUE_DEVICE_BUSY</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#SCSI_MLQUEUE_HOST_BUSY\">SCSI_MLQUEUE_HOST_BUSY</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_rbuf_get - Map response buffer.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd: SCSI command containing buffer to be mapped.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags: unsigned long variable to store irq enable status</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@copy_in: copy in from user buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Prepare buffer for simulated SCSI commands.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(ata_scsi_rbuf_lock) on success</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Pointer to response buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"static void *<a class=\"id\" href=\"#ata_scsi_rbuf_get\">ata_scsi_rbuf_get</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#copy_in\">copy_in</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ata_scsi_rbuf_lock\">ata_scsi_rbuf_lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ata_scsi_rbuf\">ata_scsi_rbuf</a>, 0, <a class=\"id\" href=\"#ATA_SCSI_RBUF_SIZE\">ATA_SCSI_RBUF_SIZE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_in\">copy_in</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_copy_to_buffer\">sg_copy_to_buffer</a>(<a class=\"id\" href=\"#scsi_sglist\">scsi_sglist</a>(<a class=\"id\" href=\"#cmd\">cmd</a>), <a class=\"id\" href=\"#scsi_sg_count\">scsi_sg_count</a>(<a class=\"id\" href=\"#cmd\">cmd</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ata_scsi_rbuf\">ata_scsi_rbuf</a>, <a class=\"id\" href=\"#ATA_SCSI_RBUF_SIZE\">ATA_SCSI_RBUF_SIZE</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ata_scsi_rbuf\">ata_scsi_rbuf</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_rbuf_put - Unmap response buffer.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd: SCSI command containing buffer to be unmapped.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@copy_out: copy out result</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags: @flags passed to ata_scsi_rbuf_get()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns rbuf buffer.  The result is copied to @cmd's buffer if</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@copy_back is true.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Unlocks ata_scsi_rbuf_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ata_scsi_rbuf_put\">ata_scsi_rbuf_put</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#copy_out\">copy_out</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long *<a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_out\">copy_out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg_copy_from_buffer\">sg_copy_from_buffer</a>(<a class=\"id\" href=\"#scsi_sglist\">scsi_sglist</a>(<a class=\"id\" href=\"#cmd\">cmd</a>), <a class=\"id\" href=\"#scsi_sg_count\">scsi_sg_count</a>(<a class=\"id\" href=\"#cmd\">cmd</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ata_scsi_rbuf\">ata_scsi_rbuf</a>, <a class=\"id\" href=\"#ATA_SCSI_RBUF_SIZE\">ATA_SCSI_RBUF_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ata_scsi_rbuf_lock\">ata_scsi_rbuf_lock</a>, *<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_rbuf_fill - wrapper for SCSI command simulators</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@args: device IDENTIFY data / SCSI command of interest.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@actor: Callback hook for desired SCSI command simulator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Takes care of the hard work of simulating a SCSI command...</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Mapping the response buffer, calling the command's handler,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and handling the handler's return value.  This return value</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>indicates whether the handler wishes the SCSI command to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>completed successfully (0), or not (in which case cmd-&gt;result</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and sense buffer are assumed to be set).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ata_scsi_rbuf_fill\">ata_scsi_rbuf_fill</a>(struct <a class=\"id\" href=\"#ata_scsi_args\">ata_scsi_args</a> *<a class=\"id\" href=\"#args\">args</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int (*<a class=\"id\" href=\"#actor\">actor</a>)(struct <a class=\"id\" href=\"#ata_scsi_args\">ata_scsi_args</a> *<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#rbuf\">rbuf</a>))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#rbuf\">rbuf</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#cmd\">cmd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a> = <a class=\"id\" href=\"#ata_scsi_rbuf_get\">ata_scsi_rbuf_get</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#false\">false</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#actor\">actor</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#rbuf\">rbuf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_rbuf_put\">ata_scsi_rbuf_put</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#rc\">rc</a> == 0, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#SAM_STAT_GOOD\">SAM_STAT_GOOD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#done\">done</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsiop_inq_std - Simulate INQUIRY command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@args: device IDENTIFY data / SCSI command of interest.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rbuf: Response buffer, to which simulated SCSI cmd output is sent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns standard device identification data associated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with non-VPD INQUIRY command output.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_scsiop_inq_std\">ata_scsiop_inq_std</a>(struct <a class=\"id\" href=\"#ata_scsi_args\">ata_scsi_args</a> *<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#rbuf\">rbuf</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#versions\">versions</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>0x60,<span class=\"ts\"/><span class=\"comment\">/* SAM-3 (no version claimed) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>0x03,", 
"<span class=\"ts\"/><span class=\"ts\"/>0x20,<span class=\"ts\"/><span class=\"comment\">/* SBC-2 (no version claimed) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>0x02,", 
"<span class=\"ts\"/><span class=\"ts\"/>0x60<span class=\"ts\"/><span class=\"comment\">/* SPC-3 (no version claimed) */</span>", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#hdr\">hdr</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TYPE_DISK\">TYPE_DISK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>0,", 
"<span class=\"ts\"/><span class=\"ts\"/>0x5,<span class=\"ts\"/><span class=\"comment\">/* claim SPC-3 version compatibility */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>2,", 
"<span class=\"ts\"/><span class=\"ts\"/>95 - 4", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"ENTER\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set scsi removeable (RMB) bit per ata bit */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_removeable\">ata_id_removeable</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hdr\">hdr</a>[1] |= (1 << 7);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#rbuf\">rbuf</a>, <a class=\"id\" href=\"#hdr\">hdr</a>, sizeof(<a class=\"id\" href=\"#hdr\">hdr</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#rbuf\">rbuf</a>[8], \"ATA     \", 8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_id_string\">ata_id_string</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>, &amp;<a class=\"id\" href=\"#rbuf\">rbuf</a>[16], <a class=\"id\" href=\"#ATA_ID_PROD\">ATA_ID_PROD</a>, 16);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_id_string\">ata_id_string</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>, &amp;<a class=\"id\" href=\"#rbuf\">rbuf</a>[32], <a class=\"id\" href=\"#ATA_ID_FW_REV\">ATA_ID_FW_REV</a>, 4);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rbuf\">rbuf</a>[32] == 0 || <a class=\"id\" href=\"#rbuf\">rbuf</a>[32] == ' ')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#rbuf\">rbuf</a>[32], \"n/a \", 4);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#rbuf\">rbuf</a> + 59, <a class=\"id\" href=\"#versions\">versions</a>, sizeof(<a class=\"id\" href=\"#versions\">versions</a>));", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsiop_inq_00 - Simulate INQUIRY VPD page 0, list of pages</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@args: device IDENTIFY data / SCSI command of interest.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rbuf: Response buffer, to which simulated SCSI cmd output is sent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns list of inquiry VPD pages available.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_scsiop_inq_00\">ata_scsiop_inq_00</a>(struct <a class=\"id\" href=\"#ata_scsi_args\">ata_scsi_args</a> *<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#rbuf\">rbuf</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pages\">pages</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>0x00,<span class=\"ts\"/><span class=\"comment\">/* page 0x00, this page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>0x80,<span class=\"ts\"/><span class=\"comment\">/* page 0x80, unit serial no page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>0x83,<span class=\"ts\"/><span class=\"comment\">/* page 0x83, device ident page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>0x89,<span class=\"ts\"/><span class=\"comment\">/* page 0x89, ata info page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>0xb0,<span class=\"ts\"/><span class=\"comment\">/* page 0xb0, block limits page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>0xb1,<span class=\"ts\"/><span class=\"comment\">/* page 0xb1, block device characteristics page */</span>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[3] = sizeof(<a class=\"id\" href=\"#pages\">pages</a>);<span class=\"ts\"/><span class=\"comment\">/* number of supported VPD pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#rbuf\">rbuf</a> + 4, <a class=\"id\" href=\"#pages\">pages</a>, sizeof(<a class=\"id\" href=\"#pages\">pages</a>));", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsiop_inq_80 - Simulate INQUIRY VPD page 80, device serial number</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@args: device IDENTIFY data / SCSI command of interest.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rbuf: Response buffer, to which simulated SCSI cmd output is sent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns ATA device serial number.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_scsiop_inq_80\">ata_scsiop_inq_80</a>(struct <a class=\"id\" href=\"#ata_scsi_args\">ata_scsi_args</a> *<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#rbuf\">rbuf</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#hdr\">hdr</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>0,", 
"<span class=\"ts\"/><span class=\"ts\"/>0x80,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this page code */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>0,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ATA_ID_SERNO_LEN\">ATA_ID_SERNO_LEN</a>,<span class=\"ts\"/><span class=\"comment\">/* page len */</span>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#rbuf\">rbuf</a>, <a class=\"id\" href=\"#hdr\">hdr</a>, sizeof(<a class=\"id\" href=\"#hdr\">hdr</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_id_string\">ata_id_string</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>, (unsigned char *) &amp;<a class=\"id\" href=\"#rbuf\">rbuf</a>[4],", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ATA_ID_SERNO\">ATA_ID_SERNO</a>, <a class=\"id\" href=\"#ATA_ID_SERNO_LEN\">ATA_ID_SERNO_LEN</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsiop_inq_83 - Simulate INQUIRY VPD page 83, device identity</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@args: device IDENTIFY data / SCSI command of interest.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rbuf: Response buffer, to which simulated SCSI cmd output is sent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Yields two logical unit device identification designators:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/> - vendor specific ASCII containing the ATA serial number</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/> - SAT defined \"t10 vendor id based\" containing ASCII vendor</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>   name (\"ATA     \"), model and serial numbers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_scsiop_inq_83\">ata_scsiop_inq_83</a>(struct <a class=\"id\" href=\"#ata_scsi_args\">ata_scsi_args</a> *<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#rbuf\">rbuf</a>)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#sat_model_serial_desc_len\">sat_model_serial_desc_len</a> = 68;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num\">num</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[1] = 0x83;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this page code */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = 4;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* piv=0, assoc=lu, code_set=ACSII, designator=vendor */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[<a class=\"id\" href=\"#num\">num</a> + 0] = 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[<a class=\"id\" href=\"#num\">num</a> + 3] = <a class=\"id\" href=\"#ATA_ID_SERNO_LEN\">ATA_ID_SERNO_LEN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> += 4;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_id_string\">ata_id_string</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>, (unsigned char *) <a class=\"id\" href=\"#rbuf\">rbuf</a> + <a class=\"id\" href=\"#num\">num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ATA_ID_SERNO\">ATA_ID_SERNO</a>, <a class=\"id\" href=\"#ATA_ID_SERNO_LEN\">ATA_ID_SERNO_LEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> += <a class=\"id\" href=\"#ATA_ID_SERNO_LEN\">ATA_ID_SERNO_LEN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* SAT defined lu model and serial numbers descriptor */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* piv=0, assoc=lu, code_set=ACSII, designator=t10 vendor id */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[<a class=\"id\" href=\"#num\">num</a> + 0] = 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[<a class=\"id\" href=\"#num\">num</a> + 1] = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[<a class=\"id\" href=\"#num\">num</a> + 3] = <a class=\"id\" href=\"#sat_model_serial_desc_len\">sat_model_serial_desc_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> += 4;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#rbuf\">rbuf</a> + <a class=\"id\" href=\"#num\">num</a>, \"ATA     \", 8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> += 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_id_string\">ata_id_string</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>, (unsigned char *) <a class=\"id\" href=\"#rbuf\">rbuf</a> + <a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#ATA_ID_PROD\">ATA_ID_PROD</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ATA_ID_PROD_LEN\">ATA_ID_PROD_LEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> += <a class=\"id\" href=\"#ATA_ID_PROD_LEN\">ATA_ID_PROD_LEN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_id_string\">ata_id_string</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>, (unsigned char *) <a class=\"id\" href=\"#rbuf\">rbuf</a> + <a class=\"id\" href=\"#num\">num</a>, <a class=\"id\" href=\"#ATA_ID_SERNO\">ATA_ID_SERNO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ATA_ID_SERNO_LEN\">ATA_ID_SERNO_LEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> += <a class=\"id\" href=\"#ATA_ID_SERNO_LEN\">ATA_ID_SERNO_LEN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[3] = <a class=\"id\" href=\"#num\">num</a> - 4;    <span class=\"comment\">/* page len (assume less than 256 bytes) */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsiop_inq_89 - Simulate INQUIRY VPD page 89, ATA info</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@args: device IDENTIFY data / SCSI command of interest.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rbuf: Response buffer, to which simulated SCSI cmd output is sent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Yields SAT-specified ATA VPD page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_scsiop_inq_89\">ata_scsiop_inq_89</a>(struct <a class=\"id\" href=\"#ata_scsi_args\">ata_scsi_args</a> *<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#rbuf\">rbuf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> <a class=\"id\" href=\"#tf\">tf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#tf\">tf</a>, 0, sizeof(<a class=\"id\" href=\"#tf\">tf</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[1] = 0x89;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* our page code */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[2] = (0x238 >> 8);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* page size fixed at 238h */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[3] = (0x238 &amp; 0xff);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#rbuf\">rbuf</a>[8], \"linux   \", 8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#rbuf\">rbuf</a>[16], \"libata          \", 16);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#rbuf\">rbuf</a>[32], <a class=\"id\" href=\"#DRV_VERSION\">DRV_VERSION</a>, 4);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_id_string\">ata_id_string</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>, &amp;<a class=\"id\" href=\"#rbuf\">rbuf</a>[32], <a class=\"id\" href=\"#ATA_ID_FW_REV\">ATA_ID_FW_REV</a>, 4);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we don't store the ATA device signature, so we fake it */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_DRDY\">ATA_DRDY</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* really, this is Status reg */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#lbal\">lbal</a> = 0x1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#nsect\">nsect</a> = 0x1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_tf_to_fis\">ata_tf_to_fis</a>(&amp;<a class=\"id\" href=\"#tf\">tf</a>, 0, 1, &amp;<a class=\"id\" href=\"#rbuf\">rbuf</a>[36]);<span class=\"ts\"/><span class=\"comment\">/* TODO: PMP? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[36] = 0x34;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* force D2H Reg FIS (34h) */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[56] = <a class=\"id\" href=\"#ATA_CMD_ID_ATA\">ATA_CMD_ID_ATA</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#rbuf\">rbuf</a>[60], &amp;<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>[0], 512);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#ata_scsiop_inq_b0\">ata_scsiop_inq_b0</a>(struct <a class=\"id\" href=\"#ata_scsi_args\">ata_scsi_args</a> *<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#rbuf\">rbuf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#min_io_sectors\">min_io_sectors</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[1] = 0xb0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[3] = 0x3c;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* required VPD size with unmap support */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Optimal transfer length granularity.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is always one physical block, but for disks with a smaller</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * logical than physical sector size we need to figure out what the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * latter is.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_has_large_logical_sectors\">ata_id_has_large_logical_sectors</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_io_sectors\">min_io_sectors</a> = <a class=\"id\" href=\"#ata_id_logical_per_physical_sectors\">ata_id_logical_per_physical_sectors</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_io_sectors\">min_io_sectors</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_unaligned_be16\">put_unaligned_be16</a>(<a class=\"id\" href=\"#min_io_sectors\">min_io_sectors</a>, &amp;<a class=\"id\" href=\"#rbuf\">rbuf</a>[6]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Optimal unmap granularity.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The ATA spec doesn't even know about a granularity or alignment</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for the TRIM command.  We can leave away most of the unmap related</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * VPD page entries, but we have specifify a granularity to signal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that we support some form of unmap - in thise case via WRITE SAME</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with the unmap bit set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_has_trim\">ata_id_has_trim</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_unaligned_be32\">put_unaligned_be32</a>(65535 * 512 / 8, &amp;<a class=\"id\" href=\"#rbuf\">rbuf</a>[20]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_unaligned_be32\">put_unaligned_be32</a>(1, &amp;<a class=\"id\" href=\"#rbuf\">rbuf</a>[28]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#ata_scsiop_inq_b1\">ata_scsiop_inq_b1</a>(struct <a class=\"id\" href=\"#ata_scsi_args\">ata_scsi_args</a> *<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#rbuf\">rbuf</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#form_factor\">form_factor</a> = <a class=\"id\" href=\"#ata_id_form_factor\">ata_id_form_factor</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#media_rotation_rate\">media_rotation_rate</a> = <a class=\"id\" href=\"#ata_id_rotation_rate\">ata_id_rotation_rate</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[1] = 0xb1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[3] = 0x3c;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[4] = <a class=\"id\" href=\"#media_rotation_rate\">media_rotation_rate</a> >> 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[5] = <a class=\"id\" href=\"#media_rotation_rate\">media_rotation_rate</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[7] = <a class=\"id\" href=\"#form_factor\">form_factor</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsiop_noop - Command handler that simply returns success.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@args: device IDENTIFY data / SCSI command of interest.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rbuf: Response buffer, to which simulated SCSI cmd output is sent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>No operation.  Simply returns success to caller, to indicate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that the caller should successfully complete this SCSI command.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_scsiop_noop\">ata_scsiop_noop</a>(struct <a class=\"id\" href=\"#ata_scsi_args\">ata_scsi_args</a> *<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#rbuf\">rbuf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"ENTER\\n\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_msense_caching - Simulate MODE SENSE caching info page</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@id: device IDENTIFY data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf: output buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Generate a caching info page, which conditionally indicates</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>write caching to the SCSI layer, depending on device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>capabilities.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_msense_caching\">ata_msense_caching</a>(<a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#def_cache_mpage\">def_cache_mpage</a>, sizeof(<a class=\"id\" href=\"#def_cache_mpage\">def_cache_mpage</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_wcache_enabled\">ata_id_wcache_enabled</a>(<a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[2] |= (1 << 2);<span class=\"ts\"/><span class=\"comment\">/* write cache enable */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_id_rahead_enabled\">ata_id_rahead_enabled</a>(<a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[12] |= (1 << 5);<span class=\"ts\"/><span class=\"comment\">/* disable read ahead */</span>", 
"<span class=\"ts\"/>return sizeof(<a class=\"id\" href=\"#def_cache_mpage\">def_cache_mpage</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_msense_ctl_mode - Simulate MODE SENSE control mode page</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf: output buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Generate a generic MODE SENSE control mode page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_msense_ctl_mode\">ata_msense_ctl_mode</a>(<a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#def_control_mpage\">def_control_mpage</a>, sizeof(<a class=\"id\" href=\"#def_control_mpage\">def_control_mpage</a>));", 
"<span class=\"ts\"/>return sizeof(<a class=\"id\" href=\"#def_control_mpage\">def_control_mpage</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_msense_rw_recovery - Simulate MODE SENSE r/w error recovery page</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf: output buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Generate a generic MODE SENSE r/w error recovery page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_msense_rw_recovery\">ata_msense_rw_recovery</a>(<a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#def_rw_recovery_mpage\">def_rw_recovery_mpage</a>, sizeof(<a class=\"id\" href=\"#def_rw_recovery_mpage\">def_rw_recovery_mpage</a>));", 
"<span class=\"ts\"/>return sizeof(<a class=\"id\" href=\"#def_rw_recovery_mpage\">def_rw_recovery_mpage</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We can turn this into a real blacklist if it's needed, for now just</span>", 
"<span class=\"comment\"> * blacklist any Maxtor BANC1G10 revision firmware</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ata_dev_supports_fua\">ata_dev_supports_fua</a>(<a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#model\">model</a>[<a class=\"id\" href=\"#ATA_ID_PROD_LEN\">ATA_ID_PROD_LEN</a> + 1], <a class=\"id\" href=\"#fw\">fw</a>[<a class=\"id\" href=\"#ATA_ID_FW_REV_LEN\">ATA_ID_FW_REV_LEN</a> + 1];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#libata_fua\">libata_fua</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_id_has_fua\">ata_id_has_fua</a>(<a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_id_c_string\">ata_id_c_string</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#model\">model</a>, <a class=\"id\" href=\"#ATA_ID_PROD\">ATA_ID_PROD</a>, sizeof(<a class=\"id\" href=\"#model\">model</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_id_c_string\">ata_id_c_string</a>(<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#fw\">fw</a>, <a class=\"id\" href=\"#ATA_ID_FW_REV\">ATA_ID_FW_REV</a>, sizeof(<a class=\"id\" href=\"#fw\">fw</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#model\">model</a>, \"Maxtor\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#fw\">fw</a>, \"BANC1G10\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0; <span class=\"comment\">/* blacklisted */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsiop_mode_sense - Simulate MODE SENSE 6, 10 commands</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@args: device IDENTIFY data / SCSI command of interest.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rbuf: Response buffer, to which simulated SCSI cmd output is sent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Simulate MODE SENSE commands. Assume this is invoked for direct</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>access devices (e.g. disks) only. There should be no block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>descriptor for other device types.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_scsiop_mode_sense\">ata_scsiop_mode_sense</a>(struct <a class=\"id\" href=\"#ata_scsi_args\">ata_scsi_args</a> *<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#rbuf\">rbuf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#scsicmd\">scsicmd</a> = <a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>, *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#rbuf\">rbuf</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#sat_blk_desc\">sat_blk_desc</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>0, 0, 0, 0,<span class=\"ts\"/><span class=\"comment\">/* number of blocks: sat unspecified */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>0,", 
"<span class=\"ts\"/><span class=\"ts\"/>0, 0x2, 0x0<span class=\"ts\"/><span class=\"comment\">/* block length: 512 bytes */</span>", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pg\">pg</a>, <a class=\"id\" href=\"#spg\">spg</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ebd\">ebd</a>, <a class=\"id\" href=\"#page_control\">page_control</a>, <a class=\"id\" href=\"#six_byte\">six_byte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#dpofua\">dpofua</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"ENTER\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#six_byte\">six_byte</a> = (<a class=\"id\" href=\"#scsicmd\">scsicmd</a>[0] == <a class=\"id\" href=\"#MODE_SENSE\">MODE_SENSE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ebd\">ebd</a> = !(<a class=\"id\" href=\"#scsicmd\">scsicmd</a>[1] &amp; 0x8);      <span class=\"comment\">/* dbd bit inverted == edb */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * LLBA bit in msense(10) ignored (compliant)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_control\">page_control</a> = <a class=\"id\" href=\"#scsicmd\">scsicmd</a>[2] >> 6;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#page_control\">page_control</a>) {", 
"<span class=\"ts\"/>case 0: <span class=\"comment\">/* current */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;  <span class=\"comment\">/* supported */</span>", 
"<span class=\"ts\"/>case 3: <span class=\"comment\">/* saved */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#saving_not_supp\">saving_not_supp</a>;", 
"<span class=\"ts\"/>case 1: <span class=\"comment\">/* changeable */</span>", 
"<span class=\"ts\"/>case 2: <span class=\"comment\">/* defaults */</span>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#six_byte\">six_byte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += 4 + (<a class=\"id\" href=\"#ebd\">ebd</a> ? 8 : 0);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += 8 + (<a class=\"id\" href=\"#ebd\">ebd</a> ? 8 : 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#scsicmd\">scsicmd</a>[2] &amp; 0x3f;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spg\">spg</a> = <a class=\"id\" href=\"#scsicmd\">scsicmd</a>[3];", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No mode subpages supported (yet) but asking for _all_</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * subpages may be valid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spg\">spg</a> && (<a class=\"id\" href=\"#spg\">spg</a> != <a class=\"id\" href=\"#ALL_SUB_MPAGES\">ALL_SUB_MPAGES</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"", 
"<span class=\"ts\"/>switch(<a class=\"id\" href=\"#pg\">pg</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RW_RECOVERY_MPAGE\">RW_RECOVERY_MPAGE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#ata_msense_rw_recovery\">ata_msense_rw_recovery</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CACHE_MPAGE\">CACHE_MPAGE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#ata_msense_caching\">ata_msense_caching</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CONTROL_MPAGE\">CONTROL_MPAGE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#ata_msense_ctl_mode\">ata_msense_ctl_mode</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ALL_MPAGES\">ALL_MPAGES</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#ata_msense_rw_recovery\">ata_msense_rw_recovery</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#ata_msense_caching\">ata_msense_caching</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += <a class=\"id\" href=\"#ata_msense_ctl_mode\">ata_msense_ctl_mode</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* invalid page code */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dpofua\">dpofua</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_dev_supports_fua\">ata_dev_supports_fua</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>) && (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_LBA48\">ATA_DFLAG_LBA48</a>) &&", 
"<span class=\"ts\"/>    (!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_PIO\">ATA_DFLAG_PIO</a>) || <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#multi_count\">multi_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dpofua\">dpofua</a> = 1 << 4;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#six_byte\">six_byte</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[0] = <a class=\"id\" href=\"#p\">p</a> - <a class=\"id\" href=\"#rbuf\">rbuf</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[2] |= <a class=\"id\" href=\"#dpofua\">dpofua</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ebd\">ebd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[3] = sizeof(<a class=\"id\" href=\"#sat_blk_desc\">sat_blk_desc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#rbuf\">rbuf</a> + 4, <a class=\"id\" href=\"#sat_blk_desc\">sat_blk_desc</a>, sizeof(<a class=\"id\" href=\"#sat_blk_desc\">sat_blk_desc</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#output_len\">output_len</a> = <a class=\"id\" href=\"#p\">p</a> - <a class=\"id\" href=\"#rbuf\">rbuf</a> - 2;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[0] = <a class=\"id\" href=\"#output_len\">output_len</a> >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[1] = <a class=\"id\" href=\"#output_len\">output_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[3] |= <a class=\"id\" href=\"#dpofua\">dpofua</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ebd\">ebd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[7] = sizeof(<a class=\"id\" href=\"#sat_blk_desc\">sat_blk_desc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#rbuf\">rbuf</a> + 8, <a class=\"id\" href=\"#sat_blk_desc\">sat_blk_desc</a>, sizeof(<a class=\"id\" href=\"#sat_blk_desc\">sat_blk_desc</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_set_sense\">ata_scsi_set_sense</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a>, 0x24, 0x0);", 
"<span class=\"ts\"/><span class=\"comment\">/* \"Invalid field in cbd\" */</span>", 
"<span class=\"ts\"/>return 1;", 
"", 
"<a class=\"id\" href=\"#saving_not_supp\">saving_not_supp</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_set_sense\">ata_scsi_set_sense</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a>, 0x39, 0x0);", 
"<span class=\"ts\"/> <span class=\"comment\">/* \"Saving parameters not supported\" */</span>", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsiop_read_cap - Simulate READ CAPACITY[ 16] commands</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@args: device IDENTIFY data / SCSI command of interest.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rbuf: Response buffer, to which simulated SCSI cmd output is sent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Simulate READ CAPACITY commands.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_scsiop_read_cap\">ata_scsiop_read_cap</a>(struct <a class=\"id\" href=\"#ata_scsi_args\">ata_scsi_args</a> *<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#rbuf\">rbuf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#last_lba\">last_lba</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#n_sectors\">n_sectors</a> - 1; <span class=\"comment\">/* LBA of the last block */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#log_per_phys\">log_per_phys</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#lowest_aligned\">lowest_aligned</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#word_106\">word_106</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>[106];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#word_209\">word_209</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>[209];", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#word_106\">word_106</a> &amp; 0xc000) == 0x4000) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Number and offset of logical sectors per physical sector */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#word_106\">word_106</a> &amp; (1 << 13))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#log_per_phys\">log_per_phys</a> = <a class=\"id\" href=\"#word_106\">word_106</a> &amp; 0xf;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#word_209\">word_209</a> &amp; 0xc000) == 0x4000) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>[209] &amp; 0x3fff;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lowest_aligned\">lowest_aligned</a> = (1 << <a class=\"id\" href=\"#log_per_phys\">log_per_phys</a>) - <a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"ENTER\\n\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>[0] == <a class=\"id\" href=\"#READ_CAPACITY\">READ_CAPACITY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last_lba\">last_lba</a> >= 0xffffffffULL)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_lba\">last_lba</a> = 0xffffffff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* sector count, 32-bit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[0] = <a class=\"id\" href=\"#last_lba\">last_lba</a> >> (8 * 3);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[1] = <a class=\"id\" href=\"#last_lba\">last_lba</a> >> (8 * 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[2] = <a class=\"id\" href=\"#last_lba\">last_lba</a> >> (8 * 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[3] = <a class=\"id\" href=\"#last_lba\">last_lba</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* sector size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[6] = <a class=\"id\" href=\"#ATA_SECT_SIZE\">ATA_SECT_SIZE</a> >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[7] = <a class=\"id\" href=\"#ATA_SECT_SIZE\">ATA_SECT_SIZE</a> &amp; 0xff;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* sector count, 64-bit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[0] = <a class=\"id\" href=\"#last_lba\">last_lba</a> >> (8 * 7);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[1] = <a class=\"id\" href=\"#last_lba\">last_lba</a> >> (8 * 6);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[2] = <a class=\"id\" href=\"#last_lba\">last_lba</a> >> (8 * 5);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[3] = <a class=\"id\" href=\"#last_lba\">last_lba</a> >> (8 * 4);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[4] = <a class=\"id\" href=\"#last_lba\">last_lba</a> >> (8 * 3);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[5] = <a class=\"id\" href=\"#last_lba\">last_lba</a> >> (8 * 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[6] = <a class=\"id\" href=\"#last_lba\">last_lba</a> >> (8 * 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[7] = <a class=\"id\" href=\"#last_lba\">last_lba</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* sector size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[10] = <a class=\"id\" href=\"#ATA_SECT_SIZE\">ATA_SECT_SIZE</a> >> 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[11] = <a class=\"id\" href=\"#ATA_SECT_SIZE\">ATA_SECT_SIZE</a> &amp; 0xff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[12] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[13] = <a class=\"id\" href=\"#log_per_phys\">log_per_phys</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[14] = (<a class=\"id\" href=\"#lowest_aligned\">lowest_aligned</a> >> 8) &amp; 0x3f;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[15] = <a class=\"id\" href=\"#lowest_aligned\">lowest_aligned</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_has_trim\">ata_id_has_trim</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[14] |= 0x80; <span class=\"comment\">/* TPE */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_id_has_zero_after_trim\">ata_id_has_zero_after_trim</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[14] |= 0x40; <span class=\"comment\">/* TPRZ */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsiop_report_luns - Simulate REPORT LUNS command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@args: device IDENTIFY data / SCSI command of interest.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rbuf: Response buffer, to which simulated SCSI cmd output is sent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Simulate REPORT LUNS command.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_scsiop_report_luns\">ata_scsiop_report_luns</a>(struct <a class=\"id\" href=\"#ata_scsi_args\">ata_scsi_args</a> *<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#rbuf\">rbuf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"ENTER\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rbuf\">rbuf</a>[3] = 8;<span class=\"ts\"/><span class=\"comment\">/* just one lun, LUN 0, size 8 bytes */</span>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#atapi_sense_complete\">atapi_sense_complete</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> && ((<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> &amp; <a class=\"id\" href=\"#AC_ERR_DEV\">AC_ERR_DEV</a>) == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIXME: not quite right; we don't want the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * translation of taskfile registers into</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a sense descriptors, since that's only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * correct for ATA, not ATAPI</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_gen_passthru_sense\">ata_gen_passthru_sense</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsidone\">scsidone</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_free\">ata_qc_free</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"}", 
"", 
"<span class=\"comment\">/* is it pointless to prefer PIO for \"safety reasons\"? */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ata_pio_use_silly\">ata_pio_use_silly</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_PIO_DMA\">ATA_FLAG_PIO_DMA</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#atapi_request_sense\">atapi_request_sense</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"ATAPI request sense\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME: is this needed? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>, 0, <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ATA_SFF\">CONFIG_ATA_SFF</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_tf_read\">sff_tf_read</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#sff_tf_read\">sff_tf_read</a>(<a class=\"id\" href=\"#ap\">ap</a>, &amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* fill these in, for the case where they are -not- overwritten */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[0] = 0x70;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>[2] = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#feature\">feature</a> >> 4;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_reinit\">ata_qc_reinit</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* setup sg table and init transfer direction */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg_init_one\">sg_init_one</a>(&amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#sgent\">sgent</a>, <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>, <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_sg_init\">ata_sg_init</a>(<a class=\"id\" href=\"#qc\">qc</a>, &amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#sgent\">sgent</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dma_dir\">dma_dir</a> = <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#cdb\">cdb</a>, 0, <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cdb_len\">cdb_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#cdb\">cdb</a>[0] = <a class=\"id\" href=\"#REQUEST_SENSE\">REQUEST_SENSE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#cdb\">cdb</a>[4] = <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_ISADDR\">ATA_TFLAG_ISADDR</a> | <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_PACKET\">ATA_CMD_PACKET</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_pio_use_silly\">ata_pio_use_silly</a>(<a class=\"id\" href=\"#ap\">ap</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATAPI_PROT_DMA\">ATAPI_PROT_DMA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#feature\">feature</a> |= <a class=\"id\" href=\"#ATAPI_PKT_DMA\">ATAPI_PKT_DMA</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATAPI_PROT_PIO\">ATAPI_PROT_PIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#lbam\">lbam</a> = <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#lbah\">lbah</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#nbytes\">nbytes</a> = <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#complete_fn\">complete_fn</a> = <a class=\"id\" href=\"#atapi_sense_complete\">atapi_sense_complete</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_issue\">ata_qc_issue</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"EXIT\\n\");", 
"}", 
"", 
"static void <a class=\"id\" href=\"#atapi_qc_complete\">atapi_qc_complete</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"ENTER, err_mask 0x%X\\n\", <a class=\"id\" href=\"#err_mask\">err_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* handle completion from new EH */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#error_handler\">error_handler</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#err_mask\">err_mask</a> || <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_SENSE_VALID\">ATA_QCFLAG_SENSE_VALID</a>))) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_SENSE_VALID\">ATA_QCFLAG_SENSE_VALID</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIXME: not quite right; we don't want the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * translation of taskfile registers into a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * sense descriptors, since that's only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * correct for ATA, not ATAPI</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_gen_passthru_sense\">ata_gen_passthru_sense</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SCSI EH automatically locks door if sdev-&gt;locked is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * set.  Sometimes door lock request continues to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fail, for example, when no media is present.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * creates a loop - SCSI EH issues door lock which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fails and gets invoked again to acquire sense data</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for the failed command.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If door lock fails, always clear sdev-&gt;locked to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * avoid this infinite loop.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#cdb\">cdb</a>[0] == <a class=\"id\" href=\"#ALLOW_MEDIUM_REMOVAL\">ALLOW_MEDIUM_REMOVAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#locked\">locked</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#SAM_STAT_CHECK_CONDITION\">SAM_STAT_CHECK_CONDITION</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsidone\">scsidone</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_free\">ata_qc_free</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* successful completion or old EH failure path */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#err_mask\">err_mask</a> &amp; <a class=\"id\" href=\"#AC_ERR_DEV\">AC_ERR_DEV</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#SAM_STAT_CHECK_CONDITION\">SAM_STAT_CHECK_CONDITION</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atapi_request_sense\">atapi_request_sense</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#err_mask\">err_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIXME: not quite right; we don't want the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * translation of taskfile registers into</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a sense descriptors, since that's only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * correct for ATA, not ATAPI</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_gen_passthru_sense\">ata_gen_passthru_sense</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#scsicmd\">scsicmd</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#scsicmd\">scsicmd</a>[0] == <a class=\"id\" href=\"#INQUIRY\">INQUIRY</a>) && ((<a class=\"id\" href=\"#scsicmd\">scsicmd</a>[1] &amp; 0x03) == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#ata_scsi_rbuf_get\">ata_scsi_rbuf_get</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#true\">true</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ATAPI devices typically report zero for their SCSI version,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and sometimes deviate from the spec WRT response data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * format.  If SCSI version is reported as zero like normal,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then we make the following fixups:  1) Fake MMC-5 version,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to indicate to the Linux scsi midlayer this is a modern</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * device.  2) Ensure response data format / ATAPI information</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are always correct.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a>[2] == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[2] = 0x5;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[3] = 0x32;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_rbuf_put\">ata_scsi_rbuf_put</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#true\">true</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#SAM_STAT_GOOD\">SAM_STAT_GOOD</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsidone\">scsidone</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_free\">ata_qc_free</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"}", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>atapi_xlat - Initialize PACKET taskfile</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: command structure to be initialized</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, non-zero on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#atapi_xlat\">atapi_xlat</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nodata\">nodata</a> = (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sc_data_direction\">sc_data_direction</a> == <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#using_pio\">using_pio</a> = !<a class=\"id\" href=\"#nodata\">nodata</a> && (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_PIO\">ATA_DFLAG_PIO</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#cdb\">cdb</a>, 0, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#cdb_len\">cdb_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#cdb\">cdb</a>, <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>, <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#complete_fn\">complete_fn</a> = <a class=\"id\" href=\"#atapi_qc_complete\">atapi_qc_complete</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_ISADDR\">ATA_TFLAG_ISADDR</a> | <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sc_data_direction\">sc_data_direction</a> == <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_WRITE\">ATA_TFLAG_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"direction: write\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_PACKET\">ATA_CMD_PACKET</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_set_pc_nbytes\">ata_qc_set_pc_nbytes</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check whether ATAPI DMA is safe */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nodata\">nodata</a> && !<a class=\"id\" href=\"#using_pio\">using_pio</a> && <a class=\"id\" href=\"#atapi_check_dma\">atapi_check_dma</a>(<a class=\"id\" href=\"#qc\">qc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#using_pio\">using_pio</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Some controller variants snoop this value for Packet</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transfers to do state machine and FIFO management.  Thus we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * want to set it properly, and for DMA where it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * effectively meaningless.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#ata_qc_raw_nbytes\">ata_qc_raw_nbytes</a>(<a class=\"id\" href=\"#qc\">qc</a>), (unsigned int)63 * 1024);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Most ATAPI devices which honor transfer chunk size don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * behave according to the spec when odd chunk size which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * matches the transfer length is specified.  If the number of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bytes to transfer is 2n+1.  According to the spec, what</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should happen is to indicate that 2n+1 is going to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transferred and transfer 2n+2 bytes where the last byte is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * padding.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In practice, this doesn't happen.  ATAPI devices first</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * indicate and transfer 2n bytes and then indicate and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transfer 2 bytes where the last byte is padding.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This inconsistency confuses several controllers which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * perform PIO using DMA such as Intel AHCIs and sil3124/32.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * These controllers use actual number of transferred bytes to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * update DMA poitner and transfer of 4n+2 bytes make those</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * controller push DMA pointer by 4n+4 bytes because SATA data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * FISes are aligned to 4 bytes.  This causes data corruption</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and buffer overrun.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Always setting nbytes to even number solves this problem</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because then ATAPI devices don't have to split data at 2n</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * boundaries.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nbytes\">nbytes</a> &amp; 0x1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#lbam\">lbam</a> = (<a class=\"id\" href=\"#nbytes\">nbytes</a> &amp; 0xFF);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#lbah\">lbah</a> = (<a class=\"id\" href=\"#nbytes\">nbytes</a> >> 8);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nodata\">nodata</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATAPI_PROT_NODATA\">ATAPI_PROT_NODATA</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#using_pio\">using_pio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATAPI_PROT_PIO\">ATAPI_PROT_PIO</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* DMA data xfer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATAPI_PROT_DMA\">ATAPI_PROT_DMA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#feature\">feature</a> |= <a class=\"id\" href=\"#ATAPI_PKT_DMA\">ATAPI_PKT_DMA</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_DMADIR\">ATA_DFLAG_DMADIR</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sc_data_direction\">sc_data_direction</a> != <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* some SATA bridges need us to indicate data xfer direction */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#feature\">feature</a> |= <a class=\"id\" href=\"#ATAPI_DMADIR\">ATAPI_DMADIR</a>;", 
"<span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME: We need to translate 0x05 READ_BLOCK_LIMITS to a MODE_SENSE</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   as ATAPI tape drives don't get this right otherwise */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#ata_find_dev\">ata_find_dev</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, int <a class=\"id\" href=\"#devno\">devno</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sata_pmp_attached\">sata_pmp_attached</a>(<a class=\"id\" href=\"#ap\">ap</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#devno\">devno</a> &lt; <a class=\"id\" href=\"#ata_link_max_devices\">ata_link_max_devices</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#device\">device</a>[<a class=\"id\" href=\"#devno\">devno</a>];", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#devno\">devno</a> &lt; <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#nr_pmp_links\">nr_pmp_links</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pmp_link\">pmp_link</a>[<a class=\"id\" href=\"#devno\">devno</a>].<a class=\"id\" href=\"#device\">device</a>[0];", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#__ata_scsi_find_dev\">__ata_scsi_find_dev</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#scsidev\">scsidev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#devno\">devno</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* skip commands not addressed to targets we simulate */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sata_pmp_attached\">sata_pmp_attached</a>(<a class=\"id\" href=\"#ap\">ap</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#scsidev\">scsidev</a>-><a class=\"id\" href=\"#channel\">channel</a> || <a class=\"id\" href=\"#scsidev\">scsidev</a>-><a class=\"id\" href=\"#lun\">lun</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devno\">devno</a> = <a class=\"id\" href=\"#scsidev\">scsidev</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#scsidev\">scsidev</a>-><a class=\"id\" href=\"#id\">id</a> || <a class=\"id\" href=\"#scsidev\">scsidev</a>-><a class=\"id\" href=\"#lun\">lun</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devno\">devno</a> = <a class=\"id\" href=\"#scsidev\">scsidev</a>-><a class=\"id\" href=\"#channel\">channel</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ata_find_dev\">ata_find_dev</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#devno\">devno</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_find_dev - lookup ata_device from scsi_cmnd</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: ATA port to which the device is attached</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@scsidev: SCSI device from which we derive the ATA device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Given various information provided in struct scsi_cmnd,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>map that onto an ATA bus, and using that mapping</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>determine which ata_device is associated with the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SCSI command to be sent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Associated ATA device, or %NULL if not found.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *", 
"<a class=\"id\" href=\"#ata_scsi_find_dev\">ata_scsi_find_dev</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, const struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#scsidev\">scsidev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#__ata_scsi_find_dev\">__ata_scsi_find_dev</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#scsidev\">scsidev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#dev\">dev</a> || !<a class=\"id\" href=\"#ata_dev_enabled\">ata_dev_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_map_proto - Map pass-thru protocol value to taskfile value.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@byte1: Byte 1 from pass-thru CDB.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ATA_PROT_UNKNOWN if mapping failed/unimplemented, protocol otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u8\">u8</a>", 
"<a class=\"id\" href=\"#ata_scsi_map_proto\">ata_scsi_map_proto</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#byte1\">byte1</a>)", 
"{", 
"<span class=\"ts\"/>switch((<a class=\"id\" href=\"#byte1\">byte1</a> &amp; 0x1e) >> 1) {", 
"<span class=\"ts\"/>case 3:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Non-data */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ATA_PROT_NODATA\">ATA_PROT_NODATA</a>;", 
"", 
"<span class=\"ts\"/>case 6:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* DMA */</span>", 
"<span class=\"ts\"/>case 10:<span class=\"ts\"/><span class=\"comment\">/* UDMA Data-in */</span>", 
"<span class=\"ts\"/>case 11:<span class=\"ts\"/><span class=\"comment\">/* UDMA Data-Out */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ATA_PROT_DMA\">ATA_PROT_DMA</a>;", 
"", 
"<span class=\"ts\"/>case 4:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* PIO Data-in */</span>", 
"<span class=\"ts\"/>case 5:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* PIO Data-out */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ATA_PROT_PIO\">ATA_PROT_PIO</a>;", 
"", 
"<span class=\"ts\"/>case 0:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Hard Reset */</span>", 
"<span class=\"ts\"/>case 1:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SRST */</span>", 
"<span class=\"ts\"/>case 8:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Device Diagnostic */</span>", 
"<span class=\"ts\"/>case 9:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Device Reset */</span>", 
"<span class=\"ts\"/>case 7:<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* DMA Queued */</span>", 
"<span class=\"ts\"/>case 12:<span class=\"ts\"/><span class=\"comment\">/* FPDMA */</span>", 
"<span class=\"ts\"/>case 15:<span class=\"ts\"/><span class=\"comment\">/* Return Response Info */</span>", 
"<span class=\"ts\"/>default:<span class=\"ts\"/><span class=\"comment\">/* Reserved */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ATA_PROT_UNKNOWN\">ATA_PROT_UNKNOWN</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_pass_thru - convert ATA pass-thru CDB to taskfile</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: command structure to be initialized</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Handles either 12 or 16-byte versions of the CDB.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, non-zero on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_scsi_pass_thru\">ata_scsi_pass_thru</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a> = &amp;(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#cdb\">cdb</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ata_scsi_map_proto\">ata_scsi_map_proto</a>(<a class=\"id\" href=\"#cdb\">cdb</a>[1])) == <a class=\"id\" href=\"#ATA_PROT_UNKNOWN\">ATA_PROT_UNKNOWN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 12 and 16 byte CDBs use different offsets to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * provide the various register values.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cdb\">cdb</a>[0] == <a class=\"id\" href=\"#ATA_16\">ATA_16</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 16-byte CDB - may contain extended commands.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If that is the case, copy the upper byte register values.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cdb\">cdb</a>[1] &amp; 0x01) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_feature\">hob_feature</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[3];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_nsect\">hob_nsect</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[5];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbal\">hob_lbal</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[7];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbam\">hob_lbam</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[9];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_lbah\">hob_lbah</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[11];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_LBA48\">ATA_TFLAG_LBA48</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#ATA_TFLAG_LBA48\">ATA_TFLAG_LBA48</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Always copy low byte, device and command registers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#feature\">feature</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[4];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[6];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbal\">lbal</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[8];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[10];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[12];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[13];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[14];", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 12-byte CDB - incapable of extended commands.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#ATA_TFLAG_LBA48\">ATA_TFLAG_LBA48</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#feature\">feature</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[3];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[4];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbal\">lbal</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[5];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbam\">lbam</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[6];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#lbah\">lbah</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[7];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[8];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#cdb\">cdb</a>[9];", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* enforce correct master/slave bit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> | <a class=\"id\" href=\"#ATA_DEV1\">ATA_DEV1</a> : <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#device\">device</a> &amp; ~<a class=\"id\" href=\"#ATA_DEV1\">ATA_DEV1</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* READ/WRITE LONG use a non-standard sect_size */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#sect_size\">sect_size</a> = <a class=\"id\" href=\"#ATA_SECT_SIZE\">ATA_SECT_SIZE</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_CMD_READ_LONG\">ATA_CMD_READ_LONG</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_CMD_READ_LONG_ONCE\">ATA_CMD_READ_LONG_ONCE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_CMD_WRITE_LONG\">ATA_CMD_WRITE_LONG</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_CMD_WRITE_LONG_ONCE\">ATA_CMD_WRITE_LONG_ONCE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#protocol\">protocol</a> != <a class=\"id\" href=\"#ATA_PROT_PIO\">ATA_PROT_PIO</a> || <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a> != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#sect_size\">sect_size</a> = <a class=\"id\" href=\"#scsi_bufflen\">scsi_bufflen</a>(<a class=\"id\" href=\"#scmd\">scmd</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set flags so that all registers will be written, pass on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * write indication (used for PIO/DMA setup), result TF is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * copied back and we don't whine too much about its failure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_ISADDR\">ATA_TFLAG_ISADDR</a> | <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#sc_data_direction\">sc_data_direction</a> == <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_WRITE\">ATA_TFLAG_WRITE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_QCFLAG_RESULT_TF\">ATA_QCFLAG_RESULT_TF</a> | <a class=\"id\" href=\"#ATA_QCFLAG_QUIET\">ATA_QCFLAG_QUIET</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set transfer length.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TODO: find out if we need to do more here to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       cover scatter/gather case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_set_pc_nbytes\">ata_qc_set_pc_nbytes</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We may not issue DMA commands if no DMA mode is set */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#protocol\">protocol</a> == <a class=\"id\" href=\"#ATA_PROT_DMA\">ATA_PROT_DMA</a> && <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dma_mode\">dma_mode</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* sanity check for pio multi commands */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#cdb\">cdb</a>[1] &amp; 0xe0) && !<a class=\"id\" href=\"#is_multi_taskfile\">is_multi_taskfile</a>(<a class=\"id\" href=\"#tf\">tf</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_multi_taskfile\">is_multi_taskfile</a>(<a class=\"id\" href=\"#tf\">tf</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#multi_count\">multi_count</a> = 1 << (<a class=\"id\" href=\"#cdb\">cdb</a>[1] >> 5);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* compare the passed through multi_count</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with the cached multi_count of libata</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#multi_count\">multi_count</a> != <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#multi_count\">multi_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"invalid multi_count %u ignored\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#multi_count\">multi_count</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Filter SET_FEATURES - XFER MODE command -- otherwise,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * SET_FEATURES - XFER MODE must be preceded/succeeded</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by an update to hardware-specific registers for each</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * controller (i.e. the reason for -&gt;set_piomode(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -&gt;set_dmamode(), and -&gt;post_set_mode() hooks).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> == <a class=\"id\" href=\"#ATA_CMD_SET_FEATURES\">ATA_CMD_SET_FEATURES</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#feature\">feature</a> == <a class=\"id\" href=\"#SETFEATURES_XFER\">SETFEATURES_XFER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Filter TPM commands by default. These provide an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * essentially uncontrolled encrypted \"back door\" between</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * applications and the disk. Set libata.allow_tpm=1 if you</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have a real reason for wanting to use them. This ensures</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that installed software cannot easily mess stuff up without</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * user intent. DVR type users will probably ship with this enabled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for movie content management.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that for ATA8 we can issue a DCS change and DCS freeze lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for this and should do in future but that it is not sufficient as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * DCS is an optional feature set. Thus we also do the software filter</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so that we comply with the TC consortium stated goal that the user</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can turn off TC features of their system.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> >= 0x5C && <a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> <= 0x5F && !<a class=\"id\" href=\"#libata_allow_tpm\">libata_allow_tpm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_set_sense\">ata_scsi_set_sense</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a>, 0x24, 0x00);", 
"<span class=\"ts\"/><span class=\"comment\">/* \"Invalid field in cdb\" */</span>", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#ata_scsi_write_same_xlat\">ata_scsi_write_same_xlat</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> *<a class=\"id\" href=\"#tf\">tf</a> = &amp;<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#cdb\">cdb</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#n_block\">n_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we may not issue DMA commands if no DMA mode is set */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dma_mode\">dma_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> &lt; 16))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_16_lba_len\">scsi_16_lba_len</a>(<a class=\"id\" href=\"#cdb\">cdb</a>, &amp;<a class=\"id\" href=\"#block\">block</a>, &amp;<a class=\"id\" href=\"#n_block\">n_block</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* for now we only support WRITE SAME with the unmap bit set */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#cdb\">cdb</a>[1] &amp; 0x8)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * WRITE SAME always has a sector sized buffer as payload, this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should never be a multiple entry S/G list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_sg_count\">scsi_sg_count</a>(<a class=\"id\" href=\"#scmd\">scmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#sg_page\">sg_page</a>(<a class=\"id\" href=\"#scsi_sglist\">scsi_sglist</a>(<a class=\"id\" href=\"#scmd\">scmd</a>)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ata_set_lba_range_entries\">ata_set_lba_range_entries</a>(<a class=\"id\" href=\"#buf\">buf</a>, 512, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#n_block\">n_block</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATA_PROT_DMA\">ATA_PROT_DMA</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_feature\">hob_feature</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#feature\">feature</a> = <a class=\"id\" href=\"#ATA_DSM_TRIM\">ATA_DSM_TRIM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#hob_nsect\">hob_nsect</a> = (<a class=\"id\" href=\"#size\">size</a> / 512) >> 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#nsect\">nsect</a> = <a class=\"id\" href=\"#size\">size</a> / 512;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_DSM\">ATA_CMD_DSM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_ISADDR\">ATA_TFLAG_ISADDR</a> | <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a> | <a class=\"id\" href=\"#ATA_TFLAG_LBA48\">ATA_TFLAG_LBA48</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ATA_TFLAG_WRITE\">ATA_TFLAG_WRITE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_set_pc_nbytes\">ata_qc_set_pc_nbytes</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#invalid_fld\">invalid_fld</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_set_sense\">ata_scsi_set_sense</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a>, 0x24, 0x00);", 
"<span class=\"ts\"/><span class=\"comment\">/* \"Invalid field in cdb\" */</span>", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_get_xlat_func - check if SCSI to ATA translation is possible</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: ATA device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd: SCSI command opcode to consider</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Look up the SCSI command given, and determine whether the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SCSI command is to be translated or simulated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Pointer to translation function if possible, %NULL if not.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#ata_xlat_func_t\">ata_xlat_func_t</a> <a class=\"id\" href=\"#ata_get_xlat_func\">ata_get_xlat_func</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#READ_6\">READ_6</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#READ_10\">READ_10</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#READ_16\">READ_16</a>:", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#WRITE_6\">WRITE_6</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#WRITE_10\">WRITE_10</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#WRITE_16\">WRITE_16</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ata_scsi_rw_xlat\">ata_scsi_rw_xlat</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#WRITE_SAME_16\">WRITE_SAME_16</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ata_scsi_write_same_xlat\">ata_scsi_write_same_xlat</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYNCHRONIZE_CACHE\">SYNCHRONIZE_CACHE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_try_flush_cache\">ata_try_flush_cache</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ata_scsi_flush_xlat\">ata_scsi_flush_xlat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#VERIFY\">VERIFY</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#VERIFY_16\">VERIFY_16</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ata_scsi_verify_xlat\">ata_scsi_verify_xlat</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_12\">ATA_12</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_16\">ATA_16</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ata_scsi_pass_thru\">ata_scsi_pass_thru</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#START_STOP\">START_STOP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ata_scsi_start_stop_xlat\">ata_scsi_start_stop_xlat</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_dump_cdb - dump SCSI command contents to dmesg</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: ATA port to which the command was being sent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd: SCSI command to dump</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Prints the contents of a SCSI command via printk().</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ata_scsi_dump_cdb\">ata_scsi_dump_cdb</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ATA_DEBUG\">ATA_DEBUG</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#scsidev\">scsidev</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#scsicmd\">scsicmd</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"CDB (%u:%d,%d,%d) %02x %02x %02x %02x %02x %02x %02x %02x %02x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#print_id\">print_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsidev\">scsidev</a>-><a class=\"id\" href=\"#channel\">channel</a>, <a class=\"id\" href=\"#scsidev\">scsidev</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#scsidev\">scsidev</a>-><a class=\"id\" href=\"#lun\">lun</a>,", 
];
xr_frag_insert('l/b2/667a4c1af16fb4568c2fa900d07608e92c02b4.xr', __xr_tmp);
