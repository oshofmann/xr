var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#bind_vcpu\">bind_vcpu</a>.<a class=\"id\" href=\"#vcpu\">vcpu</a> = <a class=\"id\" href=\"#tcpu\">tcpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this fails, it usually just indicates that we're dealing with a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * virq or IPI channel, which don't actually need to be rebound. Ignore</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it, but don't do the xenlinux-level rebind in that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_event_channel_op\">HYPERVISOR_event_channel_op</a>(<a class=\"id\" href=\"#EVTCHNOP_bind_vcpu\">EVTCHNOP_bind_vcpu</a>, &amp;<a class=\"id\" href=\"#bind_vcpu\">bind_vcpu</a>) >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bind_evtchn_to_cpu\">bind_evtchn_to_cpu</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>, <a class=\"id\" href=\"#tcpu\">tcpu</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#set_affinity_irq\">set_affinity_irq</a>(unsigned <a class=\"id\" href=\"#irq\">irq</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#dest\">dest</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#tcpu\">tcpu</a> = <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#dest\">dest</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rebind_irq_to_cpu\">rebind_irq_to_cpu</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#tcpu\">tcpu</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#resend_irq_on_evtchn\">resend_irq_on_evtchn</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#masked\">masked</a>, <a class=\"id\" href=\"#evtchn\">evtchn</a> = <a class=\"id\" href=\"#evtchn_from_irq\">evtchn_from_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#shared_info\">shared_info</a> *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#HYPERVISOR_shared_info\">HYPERVISOR_shared_info</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#VALID_EVTCHN\">VALID_EVTCHN</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#masked\">masked</a> = <a class=\"id\" href=\"#sync_test_and_set_bit\">sync_test_and_set_bit</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#evtchn_mask\">evtchn_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_set_bit\">sync_set_bit</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#evtchn_pending\">evtchn_pending</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#masked\">masked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmask_evtchn\">unmask_evtchn</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#enable_dynirq\">enable_dynirq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#evtchn\">evtchn</a> = <a class=\"id\" href=\"#evtchn_from_irq\">evtchn_from_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#VALID_EVTCHN\">VALID_EVTCHN</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmask_evtchn\">unmask_evtchn</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#disable_dynirq\">disable_dynirq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#evtchn\">evtchn</a> = <a class=\"id\" href=\"#evtchn_from_irq\">evtchn_from_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#VALID_EVTCHN\">VALID_EVTCHN</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask_evtchn\">mask_evtchn</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ack_dynirq\">ack_dynirq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#evtchn\">evtchn</a> = <a class=\"id\" href=\"#evtchn_from_irq\">evtchn_from_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#move_native_irq\">move_native_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#VALID_EVTCHN\">VALID_EVTCHN</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_evtchn\">clear_evtchn</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#retrigger_dynirq\">retrigger_dynirq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#evtchn\">evtchn</a> = <a class=\"id\" href=\"#evtchn_from_irq\">evtchn_from_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#shared_info\">shared_info</a> *<a class=\"id\" href=\"#sh\">sh</a> = <a class=\"id\" href=\"#HYPERVISOR_shared_info\">HYPERVISOR_shared_info</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#VALID_EVTCHN\">VALID_EVTCHN</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#masked\">masked</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#masked\">masked</a> = <a class=\"id\" href=\"#sync_test_and_set_bit\">sync_test_and_set_bit</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>, <a class=\"id\" href=\"#sh\">sh</a>-><a class=\"id\" href=\"#evtchn_mask\">evtchn_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_set_bit\">sync_set_bit</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>, <a class=\"id\" href=\"#sh\">sh</a>-><a class=\"id\" href=\"#evtchn_pending\">evtchn_pending</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#masked\">masked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmask_evtchn\">unmask_evtchn</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#restore_cpu_virqs\">restore_cpu_virqs</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#evtchn_bind_virq\">evtchn_bind_virq</a> <a class=\"id\" href=\"#bind_virq\">bind_virq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#virq\">virq</a>, <a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#evtchn\">evtchn</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#virq\">virq</a> = 0; <a class=\"id\" href=\"#virq\">virq</a> &lt; <a class=\"id\" href=\"#NR_VIRQS\">NR_VIRQS</a>; <a class=\"id\" href=\"#virq\">virq</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#virq_to_irq\">virq_to_irq</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[<a class=\"id\" href=\"#virq\">virq</a>]) == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#virq_from_irq\">virq_from_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>) != <a class=\"id\" href=\"#virq\">virq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get a new binding from Xen. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bind_virq\">bind_virq</a>.<a class=\"id\" href=\"#virq\">virq</a> = <a class=\"id\" href=\"#virq\">virq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bind_virq\">bind_virq</a>.<a class=\"id\" href=\"#vcpu\">vcpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_event_channel_op\">HYPERVISOR_event_channel_op</a>(<a class=\"id\" href=\"#EVTCHNOP_bind_virq\">EVTCHNOP_bind_virq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#bind_virq\">bind_virq</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#evtchn\">evtchn</a> = <a class=\"id\" href=\"#bind_virq\">bind_virq</a>.<a class=\"id\" href=\"#port\">port</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Record the new mapping. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#evtchn_to_irq\">evtchn_to_irq</a>[<a class=\"id\" href=\"#evtchn\">evtchn</a>] = <a class=\"id\" href=\"#irq\">irq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_info\">irq_info</a>[<a class=\"id\" href=\"#irq\">irq</a>] = <a class=\"id\" href=\"#mk_virq_info\">mk_virq_info</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>, <a class=\"id\" href=\"#virq\">virq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bind_evtchn_to_cpu\">bind_evtchn_to_cpu</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ready for use. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmask_evtchn\">unmask_evtchn</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#restore_cpu_ipis\">restore_cpu_ipis</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#evtchn_bind_ipi\">evtchn_bind_ipi</a> <a class=\"id\" href=\"#bind_ipi\">bind_ipi</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ipi\">ipi</a>, <a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#evtchn\">evtchn</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#ipi\">ipi</a> = 0; <a class=\"id\" href=\"#ipi\">ipi</a> &lt; <a class=\"id\" href=\"#XEN_NR_IPIS\">XEN_NR_IPIS</a>; <a class=\"id\" href=\"#ipi\">ipi</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#ipi_to_irq\">ipi_to_irq</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)[<a class=\"id\" href=\"#ipi\">ipi</a>]) == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ipi_from_irq\">ipi_from_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>) != <a class=\"id\" href=\"#ipi\">ipi</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get a new binding from Xen. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bind_ipi\">bind_ipi</a>.<a class=\"id\" href=\"#vcpu\">vcpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_event_channel_op\">HYPERVISOR_event_channel_op</a>(<a class=\"id\" href=\"#EVTCHNOP_bind_ipi\">EVTCHNOP_bind_ipi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#bind_ipi\">bind_ipi</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#evtchn\">evtchn</a> = <a class=\"id\" href=\"#bind_ipi\">bind_ipi</a>.<a class=\"id\" href=\"#port\">port</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Record the new mapping. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#evtchn_to_irq\">evtchn_to_irq</a>[<a class=\"id\" href=\"#evtchn\">evtchn</a>] = <a class=\"id\" href=\"#irq\">irq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_info\">irq_info</a>[<a class=\"id\" href=\"#irq\">irq</a>] = <a class=\"id\" href=\"#mk_ipi_info\">mk_ipi_info</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>, <a class=\"id\" href=\"#ipi\">ipi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bind_evtchn_to_cpu\">bind_evtchn_to_cpu</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ready for use. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmask_evtchn\">unmask_evtchn</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>);", 
"", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Clear an irq's pending state, in preparation for polling on it */</span>", 
"void <a class=\"id\" href=\"#xen_clear_irq_pending\">xen_clear_irq_pending</a>(int <a class=\"id\" href=\"#irq\">irq</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#evtchn\">evtchn</a> = <a class=\"id\" href=\"#evtchn_from_irq\">evtchn_from_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#VALID_EVTCHN\">VALID_EVTCHN</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_evtchn\">clear_evtchn</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_set_irq_pending\">xen_set_irq_pending</a>(int <a class=\"id\" href=\"#irq\">irq</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#evtchn\">evtchn</a> = <a class=\"id\" href=\"#evtchn_from_irq\">evtchn_from_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#VALID_EVTCHN\">VALID_EVTCHN</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_evtchn\">set_evtchn</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#xen_test_irq_pending\">xen_test_irq_pending</a>(int <a class=\"id\" href=\"#irq\">irq</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#evtchn\">evtchn</a> = <a class=\"id\" href=\"#evtchn_from_irq\">evtchn_from_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#VALID_EVTCHN\">VALID_EVTCHN</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#test_evtchn\">test_evtchn</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Poll waiting for an irq to become pending.  In the usual case, the</span>", 
"<span class=\"comment\">   irq will be disabled so it won't deliver an interrupt. */</span>", 
"void <a class=\"id\" href=\"#xen_poll_irq\">xen_poll_irq</a>(int <a class=\"id\" href=\"#irq\">irq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#evtchn_port_t\">evtchn_port_t</a> <a class=\"id\" href=\"#evtchn\">evtchn</a> = <a class=\"id\" href=\"#evtchn_from_irq\">evtchn_from_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#VALID_EVTCHN\">VALID_EVTCHN</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_poll\">sched_poll</a> <a class=\"id\" href=\"#poll\">poll</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#nr_ports\">nr_ports</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#timeout\">timeout</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_xen_guest_handle\">set_xen_guest_handle</a>(<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#ports\">ports</a>, &amp;<a class=\"id\" href=\"#evtchn\">evtchn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_sched_op\">HYPERVISOR_sched_op</a>(<a class=\"id\" href=\"#SCHEDOP_poll\">SCHEDOP_poll</a>, &amp;<a class=\"id\" href=\"#poll\">poll</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_irq_resume\">xen_irq_resume</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#evtchn\">evtchn</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_evtchn_cpu_bindings\">init_evtchn_cpu_bindings</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* New event-channel space is not 'live' yet. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#evtchn\">evtchn</a> = 0; <a class=\"id\" href=\"#evtchn\">evtchn</a> &lt; <a class=\"id\" href=\"#NR_EVENT_CHANNELS\">NR_EVENT_CHANNELS</a>; <a class=\"id\" href=\"#evtchn\">evtchn</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask_evtchn\">mask_evtchn</a>(<a class=\"id\" href=\"#evtchn\">evtchn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No IRQ &lt;-&gt; event-channel mappings. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#irq\">irq</a> = 0; <a class=\"id\" href=\"#irq\">irq</a> &lt; <a class=\"id\" href=\"#nr_irqs\">nr_irqs</a>; <a class=\"id\" href=\"#irq\">irq</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_info\">irq_info</a>[<a class=\"id\" href=\"#irq\">irq</a>].<a class=\"id\" href=\"#evtchn\">evtchn</a> = 0; <span class=\"comment\">/* zap event-channel binding */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#evtchn\">evtchn</a> = 0; <a class=\"id\" href=\"#evtchn\">evtchn</a> &lt; <a class=\"id\" href=\"#NR_EVENT_CHANNELS\">NR_EVENT_CHANNELS</a>; <a class=\"id\" href=\"#evtchn\">evtchn</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#evtchn_to_irq\">evtchn_to_irq</a>[<a class=\"id\" href=\"#evtchn\">evtchn</a>] = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restore_cpu_virqs\">restore_cpu_virqs</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restore_cpu_ipis\">restore_cpu_ipis</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#irq_chip\">irq_chip</a> <a class=\"id\" href=\"#xen_dynamic_chip\">xen_dynamic_chip</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"xen-dyn\",", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#disable\">disable</a><span class=\"ts\"/>= <a class=\"id\" href=\"#disable_dynirq\">disable_dynirq</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mask\">mask</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#disable_dynirq\">disable_dynirq</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unmask\">unmask</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#enable_dynirq\">enable_dynirq</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ack\">ack</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ack_dynirq\">ack_dynirq</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_affinity\">set_affinity</a><span class=\"ts\"/>= <a class=\"id\" href=\"#set_affinity_irq\">set_affinity_irq</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#retrigger\">retrigger</a><span class=\"ts\"/>= <a class=\"id\" href=\"#retrigger_dynirq\">retrigger_dynirq</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#irq_chip\">irq_chip</a> <a class=\"id\" href=\"#xen_percpu_chip\">xen_percpu_chip</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"xen-percpu\",", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#disable\">disable</a><span class=\"ts\"/>= <a class=\"id\" href=\"#disable_dynirq\">disable_dynirq</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mask\">mask</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#disable_dynirq\">disable_dynirq</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unmask\">unmask</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#enable_dynirq\">enable_dynirq</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ack\">ack</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ack_dynirq\">ack_dynirq</a>,", 
"};", 
"", 
"int <a class=\"id\" href=\"#xen_set_callback_via\">xen_set_callback_via</a>(<a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#via\">via</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xen_hvm_param\">xen_hvm_param</a> <a class=\"id\" href=\"#a\">a</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#domid\">domid</a> = <a class=\"id\" href=\"#DOMID_SELF\">DOMID_SELF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#HVM_PARAM_CALLBACK_IRQ\">HVM_PARAM_CALLBACK_IRQ</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#via\">via</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#HYPERVISOR_hvm_op\">HYPERVISOR_hvm_op</a>(<a class=\"id\" href=\"#HVMOP_set_param\">HVMOP_set_param</a>, &amp;<a class=\"id\" href=\"#a\">a</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_set_callback_via\">xen_set_callback_via</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_XEN_PVHVM\">CONFIG_XEN_PVHVM</a>", 
"<span class=\"comment\">/* Vector callbacks are better than PCI interrupts to receive event</span>", 
"<span class=\"comment\"> * channel notifications because we can receive vector callbacks on any</span>", 
"<span class=\"comment\"> * vcpu and we don't need PCI support or APIC interactions. */</span>", 
"void <a class=\"id\" href=\"#xen_callback_vector\">xen_callback_vector</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#callback_via\">callback_via</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xen_have_vector_callback\">xen_have_vector_callback</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#callback_via\">callback_via</a> = <a class=\"id\" href=\"#HVM_CALLBACK_VECTOR\">HVM_CALLBACK_VECTOR</a>(<a class=\"id\" href=\"#XEN_HVM_EVTCHN_CALLBACK\">XEN_HVM_EVTCHN_CALLBACK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#xen_set_callback_via\">xen_set_callback_via</a>(<a class=\"id\" href=\"#callback_via\">callback_via</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Request for Xen HVM callback vector\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" failed.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_have_vector_callback\">xen_have_vector_callback</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Xen HVM callback vector for event delivery is \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"enabled\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* in the restore case the vector has already been allocated */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#XEN_HVM_EVTCHN_CALLBACK\">XEN_HVM_EVTCHN_CALLBACK</a>, <a class=\"id\" href=\"#used_vectors\">used_vectors</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_intr_gate\">alloc_intr_gate</a>(<a class=\"id\" href=\"#XEN_HVM_EVTCHN_CALLBACK\">XEN_HVM_EVTCHN_CALLBACK</a>, <a class=\"id\" href=\"#xen_hvm_callback_vector\">xen_hvm_callback_vector</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"#else", 
"void <a class=\"id\" href=\"#xen_callback_vector\">xen_callback_vector</a>(void) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#xen_init_IRQ\">xen_init_IRQ</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_evtchn_mask_p\">cpu_evtchn_mask_p</a> = <a class=\"id\" href=\"#kcalloc\">kcalloc</a>(<a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>, sizeof(struct <a class=\"id\" href=\"#cpu_evtchn_s\">cpu_evtchn_s</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cpu_evtchn_mask_p\">cpu_evtchn_mask_p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_evtchn_cpu_bindings\">init_evtchn_cpu_bindings</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No event channels are 'live' right now. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_EVENT_CHANNELS\">NR_EVENT_CHANNELS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask_evtchn\">mask_evtchn</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xen_hvm_domain\">xen_hvm_domain</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_callback_vector\">xen_callback_vector</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#native_init_IRQ\">native_init_IRQ</a>();", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_ctx_init\">irq_ctx_init</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/b2/a971abfac9a238f13912dd9f85e1f3764b0d7f.xr', __xr_tmp);
