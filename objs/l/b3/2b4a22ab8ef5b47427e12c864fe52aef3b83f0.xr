var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_and_return\">unlock_and_return</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#unlock_and_return\">unlock_and_return</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#update_lsm_rule\">update_lsm_rule</a>(struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *<a class=\"id\" href=\"#r\">r</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_entry\">audit_entry</a> *<a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#r\">r</a>, struct <a class=\"id\" href=\"#audit_entry\">audit_entry</a>, <a class=\"id\" href=\"#rule\">rule</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_entry\">audit_entry</a> *<a class=\"id\" href=\"#nentry\">nentry</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#security_audit_rule_known\">security_audit_rule_known</a>(<a class=\"id\" href=\"#r\">r</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nentry\">nentry</a> = <a class=\"id\" href=\"#audit_dupe_rule\">audit_dupe_rule</a>(<a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#nentry\">nentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* save the first error encountered for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * return value */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#nentry\">nentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_panic\">audit_panic</a>(\"error updating LSM filters\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#watch\">watch</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#rlist\">rlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#watch\">watch</a> || <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#tree\">tree</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_replace_init\">list_replace_init</a>(&amp;<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#rlist\">rlist</a>, &amp;<a class=\"id\" href=\"#nentry\">nentry</a>-><a class=\"id\" href=\"#rule\">rule</a>.<a class=\"id\" href=\"#rlist\">rlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_replace_rcu\">list_replace_rcu</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#nentry\">nentry</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_replace\">list_replace</a>(&amp;<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#nentry\">nentry</a>-><a class=\"id\" href=\"#rule\">rule</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#audit_free_rule_rcu\">audit_free_rule_rcu</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/* This function will re-initialize the lsm_rule field of all applicable rules.</span>", 
"<span class=\"comment\"> * It will traverse the filter lists serarching for rules that contain LSM</span>", 
"<span class=\"comment\"> * specific filter fields.  When such a rule is found, it is copied, the</span>", 
"<span class=\"comment\"> * LSM field is re-initialized, and the old rule is replaced with the</span>", 
"<span class=\"comment\"> * updated rule. */</span>", 
"int <a class=\"id\" href=\"#audit_update_lsm_rules\">audit_update_lsm_rules</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *<a class=\"id\" href=\"#r\">r</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* audit_filter_mutex synchronizes the writers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#AUDIT_NR_FILTERS\">AUDIT_NR_FILTERS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#audit_rules_list\">audit_rules_list</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#update_lsm_rule\">update_lsm_rule</a>(<a class=\"id\" href=\"#r\">r</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
];
xr_frag_insert('l/b3/2b4a22ab8ef5b47427e12c864fe52aef3b83f0.xr', __xr_tmp);
