var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ACPI 3.0 based NUMA setup</span>", 
"<span class=\"comment\"> * Copyright 2004 Andi Kleen, SuSE Labs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reads the ACPI SRAT table to figure out what memory belongs to which CPUs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called from acpi_numa_init while reading the SRAT and SLIT tables.</span>", 
"<span class=\"comment\"> * Assumes all memory regions belonging to a single proximity domain</span>", 
"<span class=\"comment\"> * are in one chunk. Holes between them will be included in the node.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmzone\">mmzone</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitmap\">bitmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#topology\">topology</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#proto\">proto</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#numa\">numa</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uv\">uv</a>/<a class=\"id\" href=\"#uv\">uv</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"int <a class=\"id\" href=\"#acpi_numa\">acpi_numa</a> <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"", 
"static struct <a class=\"id\" href=\"#acpi_table_slit\">acpi_table_slit</a> *<a class=\"id\" href=\"#acpi_slit\">acpi_slit</a>;", 
"", 
"static <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#nodes_parsed\">nodes_parsed</a> <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"static <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#cpu_nodes_parsed\">cpu_nodes_parsed</a> <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"static struct <a class=\"id\" href=\"#bootnode\">bootnode</a> <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"static struct <a class=\"id\" href=\"#bootnode\">bootnode</a> <a class=\"id\" href=\"#nodes_add\">nodes_add</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>];", 
"", 
"static int <a class=\"id\" href=\"#num_node_memblks\">num_node_memblks</a> <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"static struct <a class=\"id\" href=\"#bootnode\">bootnode</a> <a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#NR_NODE_MEMBLKS\">NR_NODE_MEMBLKS</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"static int <a class=\"id\" href=\"#memblk_nodeid\">memblk_nodeid</a>[<a class=\"id\" href=\"#NR_NODE_MEMBLKS\">NR_NODE_MEMBLKS</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#setup_node\">setup_node</a>(int <a class=\"id\" href=\"#pxm\">pxm</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#acpi_map_pxm_to_node\">acpi_map_pxm_to_node</a>(<a class=\"id\" href=\"#pxm\">pxm</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#conflicting_memblks\">conflicting_memblks</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_node_memblks\">num_node_memblks</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bootnode\">bootnode</a> *<a class=\"id\" href=\"#nd\">nd</a> = &amp;<a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#memblk_nodeid\">memblk_nodeid</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a> == <a class=\"id\" href=\"#end\">end</a> && <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#memblk_nodeid\">memblk_nodeid</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#cutoff_node\">cutoff_node</a>(int <a class=\"id\" href=\"#i\">i</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bootnode\">bootnode</a> *<a class=\"id\" href=\"#nd\">nd</a> = &amp;<a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#bad_srat\">bad_srat</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SRAT: SRAT not used.\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_numa\">acpi_numa</a> = -1;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_LOCAL_APIC\">MAX_LOCAL_APIC</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_add\">nodes_add</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#nodes_add\">nodes_add</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_all_active_ranges\">remove_all_active_ranges</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#srat_disabled\">srat_disabled</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#numa_off\">numa_off</a> || <a class=\"id\" href=\"#acpi_numa\">acpi_numa</a> &lt; 0;", 
"}", 
"", 
"<span class=\"comment\">/* Callback for SLIT parsing */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_numa_slit_init\">acpi_numa_slit_init</a>(struct <a class=\"id\" href=\"#acpi_table_slit\">acpi_table_slit</a> *<a class=\"id\" href=\"#slit\">slit</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#phys\">phys</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#slit\">slit</a>-><a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys\">phys</a> = <a class=\"id\" href=\"#find_e820_area\">find_e820_area</a>(0, <a class=\"id\" href=\"#max_pfn_mapped\">max_pfn_mapped</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, <a class=\"id\" href=\"#length\">length</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#phys\">phys</a> == -1L)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\" Can not save slit!\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_slit\">acpi_slit</a> = <a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#phys\">phys</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#acpi_slit\">acpi_slit</a>, <a class=\"id\" href=\"#slit\">slit</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reserve_early\">reserve_early</a>(<a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#phys\">phys</a> + <a class=\"id\" href=\"#length\">length</a>, \"ACPI SLIT\");", 
"}", 
"", 
"<span class=\"comment\">/* Callback for Proximity Domain -&gt; x2APIC mapping */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#acpi_numa_x2apic_affinity_init\">acpi_numa_x2apic_affinity_init</a>(struct <a class=\"id\" href=\"#acpi_srat_x2apic_cpu_affinity\">acpi_srat_x2apic_cpu_affinity</a> *<a class=\"id\" href=\"#pa\">pa</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pxm\">pxm</a>, <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#apic_id\">apic_id</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#srat_disabled\">srat_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#length\">length</a> &lt; sizeof(struct <a class=\"id\" href=\"#acpi_srat_x2apic_cpu_affinity\">acpi_srat_x2apic_cpu_affinity</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_srat\">bad_srat</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_SRAT_CPU_ENABLED\">ACPI_SRAT_CPU_ENABLED</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pxm\">pxm</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#proximity_domain\">proximity_domain</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#setup_node\">setup_node</a>(<a class=\"id\" href=\"#pxm\">pxm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SRAT: Too many proximity domains %x\\n\", <a class=\"id\" href=\"#pxm\">pxm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_srat\">bad_srat</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_id\">apic_id</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#apic_id\">apic_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>] = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#cpu_nodes_parsed\">cpu_nodes_parsed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_numa\">acpi_numa</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"SRAT: PXM %u -> APIC 0x%04x -> Node %u\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#pxm\">pxm</a>, <a class=\"id\" href=\"#apic_id\">apic_id</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Callback for Proximity Domain -&gt; LAPIC mapping */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#acpi_numa_processor_affinity_init\">acpi_numa_processor_affinity_init</a>(struct <a class=\"id\" href=\"#acpi_srat_cpu_affinity\">acpi_srat_cpu_affinity</a> *<a class=\"id\" href=\"#pa\">pa</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pxm\">pxm</a>, <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#apic_id\">apic_id</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#srat_disabled\">srat_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#length\">length</a> != sizeof(struct <a class=\"id\" href=\"#acpi_srat_cpu_affinity\">acpi_srat_cpu_affinity</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_srat\">bad_srat</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_SRAT_CPU_ENABLED\">ACPI_SRAT_CPU_ENABLED</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pxm\">pxm</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#proximity_domain_lo\">proximity_domain_lo</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#setup_node\">setup_node</a>(<a class=\"id\" href=\"#pxm\">pxm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SRAT: Too many proximity domains %x\\n\", <a class=\"id\" href=\"#pxm\">pxm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_srat\">bad_srat</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_uv_system_type\">get_uv_system_type</a>() >= <a class=\"id\" href=\"#UV_X2APIC\">UV_X2APIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_id\">apic_id</a> = (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#apic_id\">apic_id</a> << 8) | <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#local_sapic_eid\">local_sapic_eid</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_id\">apic_id</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#apic_id\">apic_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>] = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#cpu_nodes_parsed\">cpu_nodes_parsed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_numa\">acpi_numa</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"SRAT: PXM %u -> APIC 0x%02x -> Node %u\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#pxm\">pxm</a>, <a class=\"id\" href=\"#apic_id\">apic_id</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG_SPARSE\">CONFIG_MEMORY_HOTPLUG_SPARSE</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#save_add_info\">save_add_info</a>(void) {return 1;}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#save_add_info\">save_add_info</a>(void) {return 0;}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Update nodes_add[]</span>", 
"<span class=\"comment\"> * This code supports one contiguous hot add area per node</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#update_nodes_add\">update_nodes_add</a>(int <a class=\"id\" href=\"#node\">node</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#s_pfn\">s_pfn</a> = <a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#e_pfn\">e_pfn</a> = <a class=\"id\" href=\"#end\">end</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#changed\">changed</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bootnode\">bootnode</a> *<a class=\"id\" href=\"#nd\">nd</a> = &amp;<a class=\"id\" href=\"#nodes_add\">nodes_add</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* I had some trouble with strange memory hotadd regions breaking</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   the boot. Be very strict here and reject anything unexpected.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   If you want working memory hotadd write correct SRATs.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>   The node size check is a basic sanity check to guard against</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   mistakes */</span>", 
"<span class=\"ts\"/>if ((signed long)(<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>) &lt; <a class=\"id\" href=\"#NODE_MIN_SIZE\">NODE_MIN_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SRAT: Hotplug area too small\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This check might be a bit too strict, but I'm keeping it for now. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#absent_pages_in_range\">absent_pages_in_range</a>(<a class=\"id\" href=\"#s_pfn\">s_pfn</a>, <a class=\"id\" href=\"#e_pfn\">e_pfn</a>) != <a class=\"id\" href=\"#e_pfn\">e_pfn</a> - <a class=\"id\" href=\"#s_pfn\">s_pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"SRAT: Hotplug area %lu -> %lu has existing memory\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s_pfn\">s_pfn</a>, <a class=\"id\" href=\"#e_pfn\">e_pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Looks good */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changed\">changed</a> = 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changed\">changed</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a> == <a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#changed\">changed</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#changed\">changed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SRAT: Hotplug zone not continuous. Partly ignored\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#changed\">changed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#cpu_nodes_parsed\">cpu_nodes_parsed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"SRAT: hot plug zone found %Lx - %Lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Callback for parsing of the Proximity Domain &lt;-&gt; Memory Area mappings */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#acpi_numa_memory_affinity_init\">acpi_numa_memory_affinity_init</a>(struct <a class=\"id\" href=\"#acpi_srat_mem_affinity\">acpi_srat_mem_affinity</a> *<a class=\"id\" href=\"#ma\">ma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bootnode\">bootnode</a> *<a class=\"id\" href=\"#nd\">nd</a>, <a class=\"id\" href=\"#oldnode\">oldnode</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#pxm\">pxm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#srat_disabled\">srat_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ma\">ma</a>-><a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#length\">length</a> != sizeof(struct <a class=\"id\" href=\"#acpi_srat_mem_affinity\">acpi_srat_mem_affinity</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_srat\">bad_srat</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ma\">ma</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_SRAT_MEM_ENABLED\">ACPI_SRAT_MEM_ENABLED</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ma\">ma</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_SRAT_MEM_HOT_PLUGGABLE\">ACPI_SRAT_MEM_HOT_PLUGGABLE</a>) && !<a class=\"id\" href=\"#save_add_info\">save_add_info</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ma\">ma</a>-><a class=\"id\" href=\"#base_address\">base_address</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#ma\">ma</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pxm\">pxm</a> = <a class=\"id\" href=\"#ma\">ma</a>-><a class=\"id\" href=\"#proximity_domain\">proximity_domain</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#setup_node\">setup_node</a>(<a class=\"id\" href=\"#pxm\">pxm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"SRAT: Too many proximity domains.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_srat\">bad_srat</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#conflicting_memblks\">conflicting_memblks</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"SRAT: Warning: PXM %d (%lx-%lx) overlaps with itself (%Lx-%Lx)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pxm\">pxm</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#i\">i</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"SRAT: PXM %d (%lx-%lx) overlaps with PXM %d (%Lx-%Lx)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pxm\">pxm</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#node_to_pxm\">node_to_pxm</a>(<a class=\"id\" href=\"#i\">i</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_srat\">bad_srat</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a> = &amp;<a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#node\">node</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldnode\">oldnode</a> = *<a class=\"id\" href=\"#nd\">nd</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_test_and_set\">node_test_and_set</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#nodes_parsed\">nodes_parsed</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"SRAT: Node %u PXM %u %lx-%lx\\n\", <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#pxm\">pxm</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ma\">ma</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_SRAT_MEM_HOT_PLUGGABLE\">ACPI_SRAT_MEM_HOT_PLUGGABLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_nodes_add\">update_nodes_add</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* restore nodes[node] */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nd\">nd</a> = <a class=\"id\" href=\"#oldnode\">oldnode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a> | <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_clear\">node_clear</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#nodes_parsed\">nodes_parsed</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#num_node_memblks\">num_node_memblks</a>].<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#num_node_memblks\">num_node_memblks</a>].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memblk_nodeid\">memblk_nodeid</a>[<a class=\"id\" href=\"#num_node_memblks\">num_node_memblks</a>] = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_node_memblks\">num_node_memblks</a>++;", 
"}", 
"", 
"<span class=\"comment\">/* Sanity check to catch more bad SRATs (they are amazingly common).</span>", 
"<span class=\"comment\">   Make sure the PXMs cover all memory. */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#nodes_cover_memory\">nodes_cover_memory</a>(const struct <a class=\"id\" href=\"#bootnode\">bootnode</a> *<a class=\"id\" href=\"#nodes\">nodes</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pxmram\">pxmram</a>, <a class=\"id\" href=\"#e820ram\">e820ram</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pxmram\">pxmram</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nodes_parsed\">nodes_parsed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#e\">e</a> = <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pxmram\">pxmram</a> += <a class=\"id\" href=\"#e\">e</a> - <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pxmram\">pxmram</a> -= <a class=\"id\" href=\"#__absent_pages_in_range\">__absent_pages_in_range</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#e\">e</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((long)<a class=\"id\" href=\"#pxmram\">pxmram</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pxmram\">pxmram</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e820ram\">e820ram</a> = <a class=\"id\" href=\"#max_pfn\">max_pfn</a> - (<a class=\"id\" href=\"#e820_hole_size\">e820_hole_size</a>(0, <a class=\"id\" href=\"#max_pfn\">max_pfn</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)>><a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* We seem to lose 3 pages somewhere. Allow 1M of slack. */</span>", 
"<span class=\"ts\"/>if ((long)(<a class=\"id\" href=\"#e820ram\">e820ram</a> - <a class=\"id\" href=\"#pxmram\">pxmram</a>) >= (1<<(20 - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/>\"SRAT: PXMs only cover %luMB of your %luMB e820 RAM. Not used.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#pxmram\">pxmram</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) >> 20,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#e820ram\">e820ram</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) >> 20);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_numa_arch_fixup\">acpi_numa_arch_fixup</a>(void) {}", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_get_nodes\">acpi_get_nodes</a>(struct <a class=\"id\" href=\"#bootnode\">bootnode</a> *<a class=\"id\" href=\"#physnodes\">physnodes</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nodes_parsed\">nodes_parsed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#ret\">ret</a>].<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physnodes\">physnodes</a>[<a class=\"id\" href=\"#ret\">ret</a>].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Use the information discovered above to actually set up the nodes. */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_scan_nodes\">acpi_scan_nodes</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_numa\">acpi_numa</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First clean up the node list */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cutoff_node\">cutoff_node</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Join together blocks on the same node, holes between</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which don't overlap with memory on other nodes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_node_memblks\">num_node_memblks</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#k\">k</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#i\">i</a> + 1; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#num_node_memblks\">num_node_memblks</a>; ++<a class=\"id\" href=\"#j\">j</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memblk_nodeid\">memblk_nodeid</a>[<a class=\"id\" href=\"#i\">i</a>] != <a class=\"id\" href=\"#memblk_nodeid\">memblk_nodeid</a>[<a class=\"id\" href=\"#j\">j</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>            <a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>          <a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#num_node_memblks\">num_node_memblks</a>; ++<a class=\"id\" href=\"#k\">k</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memblk_nodeid\">memblk_nodeid</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#memblk_nodeid\">memblk_nodeid</a>[<a class=\"id\" href=\"#k\">k</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#k\">k</a>].<a class=\"id\" href=\"#end\">end</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#k\">k</a>].<a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#num_node_memblks\">num_node_memblks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>            <a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>          <a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"SRAT: Node %d \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"[%Lx,%Lx) + [%Lx,%Lx) -> [%lx,%lx)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#memblk_nodeid\">memblk_nodeid</a>[<a class=\"id\" href=\"#i\">i</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = --<a class=\"id\" href=\"#num_node_memblks\">num_node_memblks</a> - <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#memblk_nodeid\">memblk_nodeid</a> + <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#memblk_nodeid\">memblk_nodeid</a> + <a class=\"id\" href=\"#j\">j</a>+1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> * sizeof(*<a class=\"id\" href=\"#memblk_nodeid\">memblk_nodeid</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a> + <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a> + <a class=\"id\" href=\"#j\">j</a>+1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> * sizeof(*<a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memnode_shift\">memnode_shift</a> = <a class=\"id\" href=\"#compute_hash_shift\">compute_hash_shift</a>(<a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>, <a class=\"id\" href=\"#num_node_memblks\">num_node_memblks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#memblk_nodeid\">memblk_nodeid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memnode_shift\">memnode_shift</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"SRAT: No NUMA node hash function found. Contact maintainer\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_srat\">bad_srat</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_node_memblks\">num_node_memblks</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e820_register_active_regions\">e820_register_active_regions</a>(<a class=\"id\" href=\"#memblk_nodeid\">memblk_nodeid</a>[<a class=\"id\" href=\"#i\">i</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_memblk_range\">node_memblk_range</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* for out of order entries in SRAT */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sort_node_map\">sort_node_map</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nodes_cover_memory\">nodes_cover_memory</a>(<a class=\"id\" href=\"#nodes\">nodes</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_srat\">bad_srat</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Account for nodes with cpus and no memory */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_or\">nodes_or</a>(<a class=\"id\" href=\"#node_possible_map\">node_possible_map</a>, <a class=\"id\" href=\"#nodes_parsed\">nodes_parsed</a>, <a class=\"id\" href=\"#cpu_nodes_parsed\">cpu_nodes_parsed</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Finally register nodes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#node_possible_map\">node_possible_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_node_bootmem\">setup_node_bootmem</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Try again in case setup_node_bootmem missed one due</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   to missing bootmem */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#node_possible_map\">node_possible_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_node_bootmem\">setup_node_bootmem</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> == <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#node\">node</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#numa_clear_node\">numa_clear_node</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numa_init_array\">numa_init_array</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA_EMU\">CONFIG_NUMA_EMU</a>", 
"static int <a class=\"id\" href=\"#fake_node_to_pxm_map\">fake_node_to_pxm_map</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a> = {", 
"<span class=\"ts\"/>[0 ... <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>-1] = <a class=\"id\" href=\"#PXM_INVAL\">PXM_INVAL</a>", 
"};", 
"static <a class=\"id\" href=\"#s16\">s16</a> <a class=\"id\" href=\"#fake_apicid_to_node\">fake_apicid_to_node</a>[<a class=\"id\" href=\"#MAX_LOCAL_APIC\">MAX_LOCAL_APIC</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a> = {", 
"<span class=\"ts\"/>[0 ... <a class=\"id\" href=\"#MAX_LOCAL_APIC\">MAX_LOCAL_APIC</a>-1] = <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>", 
"};", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#find_node_by_addr\">find_node_by_addr</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nodes_parsed\">nodes_parsed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Find the real node that this emulated node appears on.  For</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the sake of simplicity, we only use a real node's starting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * address to determine which emulated node it appears on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#nodes\">nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In NUMA emulation, we need to setup proximity domain (_PXM) to node ID</span>", 
"<span class=\"comment\"> * mappings that respect the real ACPI topology but reflect our emulated</span>", 
"<span class=\"comment\"> * environment.  For each emulated node, we find which real node it appears on</span>", 
"<span class=\"comment\"> * and create PXM to NID mappings for those fake nodes which mirror that</span>", 
"<span class=\"comment\"> * locality.  SLIT will now represent the correct distances between emulated</span>", 
"<span class=\"comment\"> * nodes as a result of the real topology.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_fake_nodes\">acpi_fake_nodes</a>(const struct <a class=\"id\" href=\"#bootnode\">bootnode</a> *<a class=\"id\" href=\"#fake_nodes\">fake_nodes</a>, int <a class=\"id\" href=\"#num_nodes\">num_nodes</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Faking PXM affinity for fake nodes on real \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"topology.\\n\");", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_nodes\">num_nodes</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#pxm\">pxm</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#find_node_by_addr\">find_node_by_addr</a>(<a class=\"id\" href=\"#fake_nodes\">fake_nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nid\">nid</a> == <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pxm\">pxm</a> = <a class=\"id\" href=\"#node_to_pxm\">node_to_pxm</a>(<a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pxm\">pxm</a> == <a class=\"id\" href=\"#PXM_INVAL\">PXM_INVAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fake_node_to_pxm_map\">fake_node_to_pxm_map</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#pxm\">pxm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For each apicid_to_node mapping that exists for this real</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * node, it must now point to the fake node ID.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#MAX_LOCAL_APIC\">MAX_LOCAL_APIC</a>; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>[<a class=\"id\" href=\"#j\">j</a>] == <a class=\"id\" href=\"#nid\">nid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#fake_apicid_to_node\">fake_apicid_to_node</a>[<a class=\"id\" href=\"#j\">j</a>] == <a class=\"id\" href=\"#NUMA_NO_NODE\">NUMA_NO_NODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fake_apicid_to_node\">fake_apicid_to_node</a>[<a class=\"id\" href=\"#j\">j</a>] = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_nodes\">num_nodes</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__acpi_map_pxm_to_node\">__acpi_map_pxm_to_node</a>(<a class=\"id\" href=\"#fake_node_to_pxm_map\">fake_node_to_pxm_map</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>, <a class=\"id\" href=\"#fake_apicid_to_node\">fake_apicid_to_node</a>, sizeof(<a class=\"id\" href=\"#apicid_to_node\">apicid_to_node</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#nodes_parsed\">nodes_parsed</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_nodes\">num_nodes</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fake_nodes\">fake_nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> != <a class=\"id\" href=\"#fake_nodes\">fake_nodes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nodes_parsed\">nodes_parsed</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#null_slit_node_compare\">null_slit_node_compare</a>(int <a class=\"id\" href=\"#a\">a</a>, int <a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node_to_pxm\">node_to_pxm</a>(<a class=\"id\" href=\"#a\">a</a>) == <a class=\"id\" href=\"#node_to_pxm\">node_to_pxm</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"}", 
"#else", 
"static int <a class=\"id\" href=\"#null_slit_node_compare\">null_slit_node_compare</a>(int <a class=\"id\" href=\"#a\">a</a>, int <a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#a\">a</a> == <a class=\"id\" href=\"#b\">b</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NUMA_EMU */</span>", 
"", 
"int <a class=\"id\" href=\"#__node_distance\">__node_distance</a>(int <a class=\"id\" href=\"#a\">a</a>, int <a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_slit\">acpi_slit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#null_slit_node_compare\">null_slit_node_compare</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>) ? <a class=\"id\" href=\"#LOCAL_DISTANCE\">LOCAL_DISTANCE</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#REMOTE_DISTANCE\">REMOTE_DISTANCE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#acpi_slit\">acpi_slit</a>-><a class=\"id\" href=\"#locality_count\">locality_count</a> * <a class=\"id\" href=\"#node_to_pxm\">node_to_pxm</a>(<a class=\"id\" href=\"#a\">a</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#acpi_slit\">acpi_slit</a>-><a class=\"id\" href=\"#entry\">entry</a>[<a class=\"id\" href=\"#index\">index</a> + <a class=\"id\" href=\"#node_to_pxm\">node_to_pxm</a>(<a class=\"id\" href=\"#b\">b</a>)];", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__node_distance\">__node_distance</a>);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG_SPARSE\">CONFIG_MEMORY_HOTPLUG_SPARSE</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ACPI_HOTPLUG_MEMORY\">CONFIG_ACPI_HOTPLUG_MEMORY</a>)", 
"int <a class=\"id\" href=\"#memory_add_physaddr_to_nid\">memory_add_physaddr_to_nid</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node\">for_each_node</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nodes_add\">nodes_add</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#start\">start</a> <= <a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#nodes_add\">nodes_add</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#memory_add_physaddr_to_nid\">memory_add_physaddr_to_nid</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/b3/8a4f02c39a9892f9d4353eb5b9c7678d596314.xr', __xr_tmp);
