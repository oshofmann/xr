var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lib/bitmap.c</span>", 
"<span class=\"comment\"> * Helper functions for bitmap.h.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This source code is licensed under the GNU General Public License,</span>", 
"<span class=\"comment\"> * Version 2.  See the file COPYING for more details.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitmap\">bitmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bitmaps provide an array of bits, implemented using an an</span>", 
"<span class=\"comment\"> * array of unsigned longs.  The number of valid bits in a</span>", 
"<span class=\"comment\"> * given bitmap does _not_ need to be an exact multiple of</span>", 
"<span class=\"comment\"> * BITS_PER_LONG.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The possible unused bits in the last, partially used word</span>", 
"<span class=\"comment\"> * of a bitmap are 'don't care'.  The implementation makes</span>", 
"<span class=\"comment\"> * no particular effort to keep them zero.  It ensures that</span>", 
"<span class=\"comment\"> * their value will not affect the results of any operation.</span>", 
"<span class=\"comment\"> * The bitmap operations that return Boolean (bitmap_empty,</span>", 
"<span class=\"comment\"> * for example) or scalar (bitmap_weight, for example) results</span>", 
"<span class=\"comment\"> * carefully filter out these unused bits from impacting their</span>", 
"<span class=\"comment\"> * results.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These operations actually hold to a slightly stronger rule:</span>", 
"<span class=\"comment\"> * if you don't input any bitmaps to these ops that have some</span>", 
"<span class=\"comment\"> * unused bits set, then they won't output any set unused bits</span>", 
"<span class=\"comment\"> * in output bitmaps.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The byte ordering of bitmaps is more natural on little</span>", 
"<span class=\"comment\"> * endian architectures.  See the big-endian headers</span>", 
"<span class=\"comment\"> * include/asm-ppc64/bitops.h and include/asm-s390/bitops.h</span>", 
"<span class=\"comment\"> * for the best explanations of this ordering.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#__bitmap_empty\">__bitmap_empty</a>(const unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#lim\">lim</a> = <a class=\"id\" href=\"#bits\">bits</a>/<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#lim\">lim</a>; ++<a class=\"id\" href=\"#k\">k</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bitmap\">bitmap</a>[<a class=\"id\" href=\"#k\">k</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bits\">bits</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bitmap\">bitmap</a>[<a class=\"id\" href=\"#k\">k</a>] &amp; <a class=\"id\" href=\"#BITMAP_LAST_WORD_MASK\">BITMAP_LAST_WORD_MASK</a>(<a class=\"id\" href=\"#bits\">bits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bitmap_empty\">__bitmap_empty</a>);", 
"", 
"int <a class=\"id\" href=\"#__bitmap_full\">__bitmap_full</a>(const unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#lim\">lim</a> = <a class=\"id\" href=\"#bits\">bits</a>/<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#lim\">lim</a>; ++<a class=\"id\" href=\"#k\">k</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (~<a class=\"id\" href=\"#bitmap\">bitmap</a>[<a class=\"id\" href=\"#k\">k</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bits\">bits</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (~<a class=\"id\" href=\"#bitmap\">bitmap</a>[<a class=\"id\" href=\"#k\">k</a>] &amp; <a class=\"id\" href=\"#BITMAP_LAST_WORD_MASK\">BITMAP_LAST_WORD_MASK</a>(<a class=\"id\" href=\"#bits\">bits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bitmap_full\">__bitmap_full</a>);", 
"", 
"int <a class=\"id\" href=\"#__bitmap_equal\">__bitmap_equal</a>(const unsigned long *<a class=\"id\" href=\"#bitmap1\">bitmap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#bitmap2\">bitmap2</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#lim\">lim</a> = <a class=\"id\" href=\"#bits\">bits</a>/<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#lim\">lim</a>; ++<a class=\"id\" href=\"#k\">k</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bitmap1\">bitmap1</a>[<a class=\"id\" href=\"#k\">k</a>] != <a class=\"id\" href=\"#bitmap2\">bitmap2</a>[<a class=\"id\" href=\"#k\">k</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bits\">bits</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#bitmap1\">bitmap1</a>[<a class=\"id\" href=\"#k\">k</a>] ^ <a class=\"id\" href=\"#bitmap2\">bitmap2</a>[<a class=\"id\" href=\"#k\">k</a>]) &amp; <a class=\"id\" href=\"#BITMAP_LAST_WORD_MASK\">BITMAP_LAST_WORD_MASK</a>(<a class=\"id\" href=\"#bits\">bits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bitmap_equal\">__bitmap_equal</a>);", 
"", 
"void <a class=\"id\" href=\"#__bitmap_complement\">__bitmap_complement</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#src\">src</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#lim\">lim</a> = <a class=\"id\" href=\"#bits\">bits</a>/<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#lim\">lim</a>; ++<a class=\"id\" href=\"#k\">k</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#k\">k</a>] = ~<a class=\"id\" href=\"#src\">src</a>[<a class=\"id\" href=\"#k\">k</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bits\">bits</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#k\">k</a>] = ~<a class=\"id\" href=\"#src\">src</a>[<a class=\"id\" href=\"#k\">k</a>] &amp; <a class=\"id\" href=\"#BITMAP_LAST_WORD_MASK\">BITMAP_LAST_WORD_MASK</a>(<a class=\"id\" href=\"#bits\">bits</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bitmap_complement\">__bitmap_complement</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __bitmap_shift_right - logical right shift of the bits in a bitmap</span>", 
"<span class=\"comment\"> *   @dst : destination bitmap</span>", 
"<span class=\"comment\"> *   @src : source bitmap</span>", 
"<span class=\"comment\"> *   @shift : shift by this many bits</span>", 
"<span class=\"comment\"> *   @bits : bitmap size, in bits</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Shifting right (dividing) means moving bits in the MS -&gt; LS bit</span>", 
"<span class=\"comment\"> * direction.  Zeros are fed into the vacated MS positions and the</span>", 
"<span class=\"comment\"> * LS bits shifted off the bottom are lost.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__bitmap_shift_right\">__bitmap_shift_right</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#src\">src</a>, int <a class=\"id\" href=\"#shift\">shift</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#lim\">lim</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#bits\">bits</a>), <a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#bits\">bits</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#shift\">shift</a>/<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>, <a class=\"id\" href=\"#rem\">rem</a> = <a class=\"id\" href=\"#shift\">shift</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a> = (1UL << <a class=\"id\" href=\"#left\">left</a>) - 1;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#off\">off</a> + <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#lim\">lim</a>; ++<a class=\"id\" href=\"#k\">k</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#upper\">upper</a>, <a class=\"id\" href=\"#lower\">lower</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If shift is not word aligned, take lower rem bits of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * word above and make them the top rem bits of result.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rem\">rem</a> || <a class=\"id\" href=\"#off\">off</a> + <a class=\"id\" href=\"#k\">k</a> + 1 >= <a class=\"id\" href=\"#lim\">lim</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#upper\">upper</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#upper\">upper</a> = <a class=\"id\" href=\"#src\">src</a>[<a class=\"id\" href=\"#off\">off</a> + <a class=\"id\" href=\"#k\">k</a> + 1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#off\">off</a> + <a class=\"id\" href=\"#k\">k</a> + 1 == <a class=\"id\" href=\"#lim\">lim</a> - 1 && <a class=\"id\" href=\"#left\">left</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#upper\">upper</a> &= <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lower\">lower</a> = <a class=\"id\" href=\"#src\">src</a>[<a class=\"id\" href=\"#off\">off</a> + <a class=\"id\" href=\"#k\">k</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#left\">left</a> && <a class=\"id\" href=\"#off\">off</a> + <a class=\"id\" href=\"#k\">k</a> == <a class=\"id\" href=\"#lim\">lim</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lower\">lower</a> &= <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#k\">k</a>] = <a class=\"id\" href=\"#upper\">upper</a> << (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - <a class=\"id\" href=\"#rem\">rem</a>) | <a class=\"id\" href=\"#lower\">lower</a> >> <a class=\"id\" href=\"#rem\">rem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#left\">left</a> && <a class=\"id\" href=\"#k\">k</a> == <a class=\"id\" href=\"#lim\">lim</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#k\">k</a>] &= <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#off\">off</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#lim\">lim</a> - <a class=\"id\" href=\"#off\">off</a>], 0, <a class=\"id\" href=\"#off\">off</a>*sizeof(unsigned long));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bitmap_shift_right\">__bitmap_shift_right</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __bitmap_shift_left - logical left shift of the bits in a bitmap</span>", 
"<span class=\"comment\"> *   @dst : destination bitmap</span>", 
"<span class=\"comment\"> *   @src : source bitmap</span>", 
"<span class=\"comment\"> *   @shift : shift by this many bits</span>", 
"<span class=\"comment\"> *   @bits : bitmap size, in bits</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Shifting left (multiplying) means moving bits in the LS -&gt; MS</span>", 
"<span class=\"comment\"> * direction.  Zeros are fed into the vacated LS bit positions</span>", 
"<span class=\"comment\"> * and those MS bits shifted off the top are lost.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#__bitmap_shift_left\">__bitmap_shift_left</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#src\">src</a>, int <a class=\"id\" href=\"#shift\">shift</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#lim\">lim</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#bits\">bits</a>), <a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#bits\">bits</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#shift\">shift</a>/<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>, <a class=\"id\" href=\"#rem\">rem</a> = <a class=\"id\" href=\"#shift\">shift</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#lim\">lim</a> - <a class=\"id\" href=\"#off\">off</a> - 1; <a class=\"id\" href=\"#k\">k</a> >= 0; --<a class=\"id\" href=\"#k\">k</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#upper\">upper</a>, <a class=\"id\" href=\"#lower\">lower</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If shift is not word aligned, take upper rem bits of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * word below and make them the bottom rem bits of result.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rem\">rem</a> && <a class=\"id\" href=\"#k\">k</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lower\">lower</a> = <a class=\"id\" href=\"#src\">src</a>[<a class=\"id\" href=\"#k\">k</a> - 1];", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lower\">lower</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#upper\">upper</a> = <a class=\"id\" href=\"#src\">src</a>[<a class=\"id\" href=\"#k\">k</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#left\">left</a> && <a class=\"id\" href=\"#k\">k</a> == <a class=\"id\" href=\"#lim\">lim</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#upper\">upper</a> &= (1UL << <a class=\"id\" href=\"#left\">left</a>) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#k\">k</a> + <a class=\"id\" href=\"#off\">off</a>] = <a class=\"id\" href=\"#lower\">lower</a>  >> (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - <a class=\"id\" href=\"#rem\">rem</a>) | <a class=\"id\" href=\"#upper\">upper</a> << <a class=\"id\" href=\"#rem\">rem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#left\">left</a> && <a class=\"id\" href=\"#k\">k</a> + <a class=\"id\" href=\"#off\">off</a> == <a class=\"id\" href=\"#lim\">lim</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#k\">k</a> + <a class=\"id\" href=\"#off\">off</a>] &= (1UL << <a class=\"id\" href=\"#left\">left</a>) - 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#off\">off</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#dst\">dst</a>, 0, <a class=\"id\" href=\"#off\">off</a>*sizeof(unsigned long));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bitmap_shift_left\">__bitmap_shift_left</a>);", 
"", 
"int <a class=\"id\" href=\"#__bitmap_and\">__bitmap_and</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#bitmap1\">bitmap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#bitmap2\">bitmap2</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#bits\">bits</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#result\">result</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#nr\">nr</a>; <a class=\"id\" href=\"#k\">k</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> |= (<a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#k\">k</a>] = <a class=\"id\" href=\"#bitmap1\">bitmap1</a>[<a class=\"id\" href=\"#k\">k</a>] &amp; <a class=\"id\" href=\"#bitmap2\">bitmap2</a>[<a class=\"id\" href=\"#k\">k</a>]);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> != 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bitmap_and\">__bitmap_and</a>);", 
"", 
"void <a class=\"id\" href=\"#__bitmap_or\">__bitmap_or</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#bitmap1\">bitmap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#bitmap2\">bitmap2</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#bits\">bits</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#nr\">nr</a>; <a class=\"id\" href=\"#k\">k</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#k\">k</a>] = <a class=\"id\" href=\"#bitmap1\">bitmap1</a>[<a class=\"id\" href=\"#k\">k</a>] | <a class=\"id\" href=\"#bitmap2\">bitmap2</a>[<a class=\"id\" href=\"#k\">k</a>];", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bitmap_or\">__bitmap_or</a>);", 
"", 
"void <a class=\"id\" href=\"#__bitmap_xor\">__bitmap_xor</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#bitmap1\">bitmap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#bitmap2\">bitmap2</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#bits\">bits</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#nr\">nr</a>; <a class=\"id\" href=\"#k\">k</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#k\">k</a>] = <a class=\"id\" href=\"#bitmap1\">bitmap1</a>[<a class=\"id\" href=\"#k\">k</a>] ^ <a class=\"id\" href=\"#bitmap2\">bitmap2</a>[<a class=\"id\" href=\"#k\">k</a>];", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bitmap_xor\">__bitmap_xor</a>);", 
"", 
"int <a class=\"id\" href=\"#__bitmap_andnot\">__bitmap_andnot</a>(unsigned long *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#bitmap1\">bitmap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#bitmap2\">bitmap2</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#bits\">bits</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#result\">result</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#nr\">nr</a>; <a class=\"id\" href=\"#k\">k</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> |= (<a class=\"id\" href=\"#dst\">dst</a>[<a class=\"id\" href=\"#k\">k</a>] = <a class=\"id\" href=\"#bitmap1\">bitmap1</a>[<a class=\"id\" href=\"#k\">k</a>] &amp; ~<a class=\"id\" href=\"#bitmap2\">bitmap2</a>[<a class=\"id\" href=\"#k\">k</a>]);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a> != 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bitmap_andnot\">__bitmap_andnot</a>);", 
"", 
"int <a class=\"id\" href=\"#__bitmap_intersects\">__bitmap_intersects</a>(const unsigned long *<a class=\"id\" href=\"#bitmap1\">bitmap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#bitmap2\">bitmap2</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#lim\">lim</a> = <a class=\"id\" href=\"#bits\">bits</a>/<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#lim\">lim</a>; ++<a class=\"id\" href=\"#k\">k</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bitmap1\">bitmap1</a>[<a class=\"id\" href=\"#k\">k</a>] &amp; <a class=\"id\" href=\"#bitmap2\">bitmap2</a>[<a class=\"id\" href=\"#k\">k</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bits\">bits</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#bitmap1\">bitmap1</a>[<a class=\"id\" href=\"#k\">k</a>] &amp; <a class=\"id\" href=\"#bitmap2\">bitmap2</a>[<a class=\"id\" href=\"#k\">k</a>]) &amp; <a class=\"id\" href=\"#BITMAP_LAST_WORD_MASK\">BITMAP_LAST_WORD_MASK</a>(<a class=\"id\" href=\"#bits\">bits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bitmap_intersects\">__bitmap_intersects</a>);", 
"", 
"int <a class=\"id\" href=\"#__bitmap_subset\">__bitmap_subset</a>(const unsigned long *<a class=\"id\" href=\"#bitmap1\">bitmap1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#bitmap2\">bitmap2</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#lim\">lim</a> = <a class=\"id\" href=\"#bits\">bits</a>/<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#lim\">lim</a>; ++<a class=\"id\" href=\"#k\">k</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bitmap1\">bitmap1</a>[<a class=\"id\" href=\"#k\">k</a>] &amp; ~<a class=\"id\" href=\"#bitmap2\">bitmap2</a>[<a class=\"id\" href=\"#k\">k</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bits\">bits</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#bitmap1\">bitmap1</a>[<a class=\"id\" href=\"#k\">k</a>] &amp; ~<a class=\"id\" href=\"#bitmap2\">bitmap2</a>[<a class=\"id\" href=\"#k\">k</a>]) &amp; <a class=\"id\" href=\"#BITMAP_LAST_WORD_MASK\">BITMAP_LAST_WORD_MASK</a>(<a class=\"id\" href=\"#bits\">bits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bitmap_subset\">__bitmap_subset</a>);", 
"", 
"int <a class=\"id\" href=\"#__bitmap_weight\">__bitmap_weight</a>(const unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#w\">w</a> = 0, <a class=\"id\" href=\"#lim\">lim</a> = <a class=\"id\" href=\"#bits\">bits</a>/<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#lim\">lim</a>; <a class=\"id\" href=\"#k\">k</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#w\">w</a> += <a class=\"id\" href=\"#hweight_long\">hweight_long</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>[<a class=\"id\" href=\"#k\">k</a>]);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bits\">bits</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#w\">w</a> += <a class=\"id\" href=\"#hweight_long\">hweight_long</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>[<a class=\"id\" href=\"#k\">k</a>] &amp; <a class=\"id\" href=\"#BITMAP_LAST_WORD_MASK\">BITMAP_LAST_WORD_MASK</a>(<a class=\"id\" href=\"#bits\">bits</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#w\">w</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bitmap_weight\">__bitmap_weight</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BITMAP_FIRST_WORD_MASK\">BITMAP_FIRST_WORD_MASK</a>(<a class=\"id\" href=\"#start\">start</a>) (~0UL << ((<a class=\"id\" href=\"#start\">start</a>) % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>))", 
"", 
"void <a class=\"id\" href=\"#bitmap_set\">bitmap_set</a>(unsigned long *<a class=\"id\" href=\"#map\">map</a>, int <a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#map\">map</a> + <a class=\"id\" href=\"#BIT_WORD\">BIT_WORD</a>(<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bits_to_set\">bits_to_set</a> = <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - (<a class=\"id\" href=\"#start\">start</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask_to_set\">mask_to_set</a> = <a class=\"id\" href=\"#BITMAP_FIRST_WORD_MASK\">BITMAP_FIRST_WORD_MASK</a>(<a class=\"id\" href=\"#start\">start</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr\">nr</a> - <a class=\"id\" href=\"#bits_to_set\">bits_to_set</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> |= <a class=\"id\" href=\"#mask_to_set\">mask_to_set</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> -= <a class=\"id\" href=\"#bits_to_set\">bits_to_set</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bits_to_set\">bits_to_set</a> = <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask_to_set\">mask_to_set</a> = ~0UL;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask_to_set\">mask_to_set</a> &= <a class=\"id\" href=\"#BITMAP_LAST_WORD_MASK\">BITMAP_LAST_WORD_MASK</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> |= <a class=\"id\" href=\"#mask_to_set\">mask_to_set</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bitmap_set\">bitmap_set</a>);", 
"", 
"void <a class=\"id\" href=\"#bitmap_clear\">bitmap_clear</a>(unsigned long *<a class=\"id\" href=\"#map\">map</a>, int <a class=\"id\" href=\"#start\">start</a>, int <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#map\">map</a> + <a class=\"id\" href=\"#BIT_WORD\">BIT_WORD</a>(<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bits_to_clear\">bits_to_clear</a> = <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - (<a class=\"id\" href=\"#start\">start</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask_to_clear\">mask_to_clear</a> = <a class=\"id\" href=\"#BITMAP_FIRST_WORD_MASK\">BITMAP_FIRST_WORD_MASK</a>(<a class=\"id\" href=\"#start\">start</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr\">nr</a> - <a class=\"id\" href=\"#bits_to_clear\">bits_to_clear</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> &= ~<a class=\"id\" href=\"#mask_to_clear\">mask_to_clear</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> -= <a class=\"id\" href=\"#bits_to_clear\">bits_to_clear</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bits_to_clear\">bits_to_clear</a> = <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask_to_clear\">mask_to_clear</a> = ~0UL;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask_to_clear\">mask_to_clear</a> &= <a class=\"id\" href=\"#BITMAP_LAST_WORD_MASK\">BITMAP_LAST_WORD_MASK</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> &= ~<a class=\"id\" href=\"#mask_to_clear\">mask_to_clear</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bitmap_clear\">bitmap_clear</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bitmap_find_next_zero_area - find a contiguous aligned zero area</span>", 
"<span class=\"comment\"> * @map: The address to base the search on</span>", 
"<span class=\"comment\"> * @size: The bitmap size in bits</span>", 
"<span class=\"comment\"> * @start: The bitnumber to start searching at</span>", 
"<span class=\"comment\"> * @nr: The number of zeroed bits we're looking for</span>", 
"<span class=\"comment\"> * @align_mask: Alignment mask for zero area</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The @align_mask should be one less than a power of 2; the effect is that</span>", 
"<span class=\"comment\"> * the bit offset of all zero areas this function finds is multiples of that</span>", 
"<span class=\"comment\"> * power of 2. A @align_mask of 0 means no alignment is required.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#bitmap_find_next_zero_area\">bitmap_find_next_zero_area</a>(unsigned long *<a class=\"id\" href=\"#map\">map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#nr\">nr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#align_mask\">align_mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#find_next_zero_bit\">find_next_zero_bit</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Align allocation */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#__ALIGN_MASK\">__ALIGN_MASK</a>(<a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#align_mask\">align_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#index\">index</a> + <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#i\">i</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#index\">index</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bitmap_find_next_zero_area\">bitmap_find_next_zero_area</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bitmap printing &amp; parsing functions: first version by Bill Irwin,</span>", 
"<span class=\"comment\"> * second version by Paul Jackson, third by Joe Korty.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CHUNKSZ\">CHUNKSZ</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>32", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nbits_to_hold_value\">nbits_to_hold_value</a>(<a class=\"id\" href=\"#val\">val</a>)<span class=\"ts\"/><a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#val\">val</a>)", 
];
xr_frag_insert('l/b3/a3925f8b231acc00233e05de6da89c75069d76.xr', __xr_tmp);
