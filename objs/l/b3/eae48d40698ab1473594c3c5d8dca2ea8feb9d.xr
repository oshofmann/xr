var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * include/linux/memory.h - generic memory definition</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is mainly for topological representation. We define the</span>", 
"<span class=\"comment\"> * basic \"struct memory_block\" here, which can be embedded in per-arch</span>", 
"<span class=\"comment\"> * definitions or NUMA information.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Basic handling of the devices is done in drivers/base/memory.c</span>", 
"<span class=\"comment\"> * and system devices are handled in drivers/base/sys.c.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Memory block are exported via sysfs in the class/memory/devices/</span>", 
"<span class=\"comment\"> * directory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_MEMORY_H_\">_LINUX_MEMORY_H_</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_MEMORY_H_\">_LINUX_MEMORY_H_</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysdev\">sysdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#node\">node</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#memory_block\">memory_block</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#phys_index\">phys_index</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This serializes all state change requests.  It isn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * held during creation because the control files are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * created long after the critical areas during</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * initialization.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#state_mutex\">state_mutex</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#phys_device\">phys_device</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* to which fru does this belong? */</span>", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#hw\">hw</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* optional pointer to fw/hw data */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#phys_callback\">phys_callback</a>)(struct <a class=\"id\" href=\"#memory_block\">memory_block</a> *);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sys_device\">sys_device</a> <a class=\"id\" href=\"#sysdev\">sysdev</a>;", 
"};", 
"", 
"int <a class=\"id\" href=\"#arch_get_memory_phys_device\">arch_get_memory_phys_device</a>(unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>);", 
"", 
"<span class=\"comment\">/* These states are exposed to userspace as text strings in sysfs */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#MEM_ONLINE\">MEM_ONLINE</a><span class=\"ts\"/><span class=\"ts\"/>(1<<0) <span class=\"comment\">/* exposed to userspace */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#MEM_GOING_OFFLINE\">MEM_GOING_OFFLINE</a><span class=\"ts\"/>(1<<1) <span class=\"comment\">/* exposed to userspace */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#MEM_OFFLINE\">MEM_OFFLINE</a><span class=\"ts\"/><span class=\"ts\"/>(1<<2) <span class=\"comment\">/* exposed to userspace */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#MEM_GOING_ONLINE\">MEM_GOING_ONLINE</a><span class=\"ts\"/>(1<<3)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#MEM_CANCEL_ONLINE\">MEM_CANCEL_ONLINE</a><span class=\"ts\"/>(1<<4)", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#MEM_CANCEL_OFFLINE\">MEM_CANCEL_OFFLINE</a><span class=\"ts\"/>(1<<5)", 
"", 
"struct <a class=\"id\" href=\"#memory_notify\">memory_notify</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status_change_nid\">status_change_nid</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * During pageblock isolation, count the number of pages within the</span>", 
"<span class=\"comment\"> * range [start_pfn, start_pfn + nr_pages) which are owned by code</span>", 
"<span class=\"comment\"> * in the notifier chain.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MEM_ISOLATE_COUNT\">MEM_ISOLATE_COUNT</a><span class=\"ts\"/>(1<<0)", 
"", 
"struct <a class=\"id\" href=\"#memory_isolate_notify\">memory_isolate_notify</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_pfn\">start_pfn</a>;<span class=\"ts\"/><span class=\"comment\">/* Start of range to check */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* # pages in range to check */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#pages_found\">pages_found</a>;<span class=\"ts\"/><span class=\"comment\">/* # pages owned found by callbacks */</span>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a>;", 
"struct <a class=\"id\" href=\"#mem_section\">mem_section</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Priorities for the hotplug memory callback routines (stored in decreasing</span>", 
"<span class=\"comment\"> * order in the callback chain)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_CALLBACK_PRI\">SLAB_CALLBACK_PRI</a>       1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IPC_CALLBACK_PRI\">IPC_CALLBACK_PRI</a>        10", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG_SPARSE\">CONFIG_MEMORY_HOTPLUG_SPARSE</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#memory_dev_init\">memory_dev_init</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#register_memory_notifier\">register_memory_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unregister_memory_notifier\">unregister_memory_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#memory_notify\">memory_notify</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#register_memory_isolate_notifier\">register_memory_isolate_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unregister_memory_isolate_notifier\">unregister_memory_isolate_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#memory_isolate_notify\">memory_isolate_notify</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"extern int <a class=\"id\" href=\"#register_memory_notifier\">register_memory_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>);", 
"extern void <a class=\"id\" href=\"#unregister_memory_notifier\">unregister_memory_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>);", 
"extern int <a class=\"id\" href=\"#register_memory_isolate_notifier\">register_memory_isolate_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>);", 
"extern void <a class=\"id\" href=\"#unregister_memory_isolate_notifier\">unregister_memory_isolate_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>);", 
"extern int <a class=\"id\" href=\"#register_new_memory\">register_new_memory</a>(int, struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *);", 
"extern int <a class=\"id\" href=\"#unregister_memory_section\">unregister_memory_section</a>(struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *);", 
"extern int <a class=\"id\" href=\"#memory_dev_init\">memory_dev_init</a>(void);", 
"extern int <a class=\"id\" href=\"#remove_memory_block\">remove_memory_block</a>(unsigned long, struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *, int);", 
"extern int <a class=\"id\" href=\"#memory_notify\">memory_notify</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>);", 
"extern int <a class=\"id\" href=\"#memory_isolate_notify\">memory_isolate_notify</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>);", 
"extern struct <a class=\"id\" href=\"#memory_block\">memory_block</a> *<a class=\"id\" href=\"#find_memory_block\">find_memory_block</a>(struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CONFIG_MEM_BLOCK_SIZE\">CONFIG_MEM_BLOCK_SIZE</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a><<<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"enum <a class=\"id\" href=\"#mem_add_context\">mem_add_context</a> { <a class=\"id\" href=\"#BOOT\">BOOT</a>, <a class=\"id\" href=\"#HOTPLUG\">HOTPLUG</a> };", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MEMORY_HOTPLUG_SPARSE */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MEMORY_HOTPLUG\">CONFIG_MEMORY_HOTPLUG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hotplug_memory_notifier\">hotplug_memory_notifier</a>(<a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#pri\">pri</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#__meminitdata\">__meminitdata</a> struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#fn\">fn</a>##<a class=\"id\" href=\"#_mem_nb\">_mem_nb</a> =\\", 
"<span class=\"ts\"/><span class=\"ts\"/>{ .<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#fn\">fn</a>, .<a class=\"id\" href=\"#priority\">priority</a> = <a class=\"id\" href=\"#pri\">pri</a> };<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_memory_notifier\">register_memory_notifier</a>(&amp;<a class=\"id\" href=\"#fn\">fn</a>##<a class=\"id\" href=\"#_mem_nb\">_mem_nb</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hotplug_memory_notifier\">hotplug_memory_notifier</a>(<a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#pri\">pri</a>) do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * 'struct memory_accessor' is a generic interface to provide</span>", 
"<span class=\"comment\"> * in-kernel access to persistent memory such as i2c or SPI EEPROMs</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#memory_accessor\">memory_accessor</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#read\">read</a>)(struct <a class=\"id\" href=\"#memory_accessor\">memory_accessor</a> *, char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#off_t\">off_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#write\">write</a>)(struct <a class=\"id\" href=\"#memory_accessor\">memory_accessor</a> *, const char *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#off_t\">off_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>);", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kernel text modification mutex, used for code patching. Users of this lock</span>", 
"<span class=\"comment\"> * can sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#text_mutex\">text_mutex</a>;", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_MEMORY_H_ */</span>", 
];
xr_frag_insert('l/b3/eae48d40698ab1473594c3c5d8dca2ea8feb9d.xr', __xr_tmp);
