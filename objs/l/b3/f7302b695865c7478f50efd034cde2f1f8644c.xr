var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2007 Alan Stern</span>", 
"<span class=\"comment\"> * Copyright (C) 2009 IBM Corporation</span>", 
"<span class=\"comment\"> * Copyright (C) 2009 Frederic Weisbecker &lt;fweisbec@gmail.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors: Alan Stern &lt;stern@rowland.harvard.edu&gt;</span>", 
"<span class=\"comment\"> *          K.Prasad &lt;prasad@linux.vnet.ibm.com&gt;</span>", 
"<span class=\"comment\"> *          Frederic Weisbecker &lt;fweisbec@gmail.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * HW_breakpoint: a unified kernel/user-space hardware breakpoint facility,</span>", 
"<span class=\"comment\"> * using the CPU's debug registers.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#perf_event\">perf_event</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hw_breakpoint\">hw_breakpoint</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#irqflags\">irqflags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kprobes\">kprobes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdebug\">kdebug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#hw_breakpoint\">hw_breakpoint</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#debugreg\">debugreg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Per cpu debug control register value */</span>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#cpu_dr7\">cpu_dr7</a>);", 
"<a class=\"id\" href=\"#EXPORT_PER_CPU_SYMBOL\">EXPORT_PER_CPU_SYMBOL</a>(<a class=\"id\" href=\"#cpu_dr7\">cpu_dr7</a>);", 
"", 
"<span class=\"comment\">/* Per cpu debug address registers values */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#cpu_debugreg\">cpu_debugreg</a>[<a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>]);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Stores the breakpoints currently in use on each breakpoint address</span>", 
"<span class=\"comment\"> * register for each cpus</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *, <a class=\"id\" href=\"#bp_per_reg\">bp_per_reg</a>[<a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>]);", 
"", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long", 
"<a class=\"id\" href=\"#__encode_dr7\">__encode_dr7</a>(int <a class=\"id\" href=\"#drnum\">drnum</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bp_info\">bp_info</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp_info\">bp_info</a> = (<a class=\"id\" href=\"#len\">len</a> | <a class=\"id\" href=\"#type\">type</a>) &amp; 0xf;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp_info\">bp_info</a> <<= (<a class=\"id\" href=\"#DR_CONTROL_SHIFT\">DR_CONTROL_SHIFT</a> + <a class=\"id\" href=\"#drnum\">drnum</a> * <a class=\"id\" href=\"#DR_CONTROL_SIZE\">DR_CONTROL_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bp_info\">bp_info</a> |= (<a class=\"id\" href=\"#DR_GLOBAL_ENABLE\">DR_GLOBAL_ENABLE</a> << (<a class=\"id\" href=\"#drnum\">drnum</a> * <a class=\"id\" href=\"#DR_ENABLE_SIZE\">DR_ENABLE_SIZE</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bp_info\">bp_info</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Encode the length, type, Exact, and Enable bits for a particular breakpoint</span>", 
"<span class=\"comment\"> * as stored in debug register 7.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#encode_dr7\">encode_dr7</a>(int <a class=\"id\" href=\"#drnum\">drnum</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>, unsigned int <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__encode_dr7\">__encode_dr7</a>(<a class=\"id\" href=\"#drnum\">drnum</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#type\">type</a>) | <a class=\"id\" href=\"#DR_GLOBAL_SLOWDOWN\">DR_GLOBAL_SLOWDOWN</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Decode the length and type bits for a particular breakpoint as</span>", 
"<span class=\"comment\"> * stored in debug register 7.  Return the \"enabled\" status.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#decode_dr7\">decode_dr7</a>(unsigned long <a class=\"id\" href=\"#dr7\">dr7</a>, int <a class=\"id\" href=\"#bpnum\">bpnum</a>, unsigned *<a class=\"id\" href=\"#len\">len</a>, unsigned *<a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bp_info\">bp_info</a> = <a class=\"id\" href=\"#dr7\">dr7</a> >> (<a class=\"id\" href=\"#DR_CONTROL_SHIFT\">DR_CONTROL_SHIFT</a> + <a class=\"id\" href=\"#bpnum\">bpnum</a> * <a class=\"id\" href=\"#DR_CONTROL_SIZE\">DR_CONTROL_SIZE</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#len\">len</a> = (<a class=\"id\" href=\"#bp_info\">bp_info</a> &amp; 0xc) | 0x40;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#type\">type</a> = (<a class=\"id\" href=\"#bp_info\">bp_info</a> &amp; 0x3) | 0x80;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#dr7\">dr7</a> >> (<a class=\"id\" href=\"#bpnum\">bpnum</a> * <a class=\"id\" href=\"#DR_ENABLE_SIZE\">DR_ENABLE_SIZE</a>)) &amp; 0x3;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Install a perf counter breakpoint.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We seek a free debug address register and use it for this</span>", 
"<span class=\"comment\"> * breakpoint. Eventually we enable it in the debug control register.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomic: we hold the counter-&gt;ctx-&gt;lock and we only handle variables</span>", 
"<span class=\"comment\"> * and registers local to this cpu.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#arch_install_hw_breakpoint\">arch_install_hw_breakpoint</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#arch_hw_breakpoint\">arch_hw_breakpoint</a> *<a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#counter_arch_bp\">counter_arch_bp</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#dr7\">dr7</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> **<a class=\"id\" href=\"#slot\">slot</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#bp_per_reg\">bp_per_reg</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#slot\">slot</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>, \"Can't find any breakpoint slot\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_debugreg\">cpu_debugreg</a>[<a class=\"id\" href=\"#i\">i</a>]) = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#address\">address</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr7\">dr7</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_dr7\">cpu_dr7</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dr7\">dr7</a> |= <a class=\"id\" href=\"#encode_dr7\">encode_dr7</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(*<a class=\"id\" href=\"#dr7\">dr7</a>, 7);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Uninstall the breakpoint contained in the given counter.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * First we search the debug address register it uses and then we disable</span>", 
"<span class=\"comment\"> * it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomic: we hold the counter-&gt;ctx-&gt;lock and we only handle variables</span>", 
"<span class=\"comment\"> * and registers local to this cpu.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#arch_uninstall_hw_breakpoint\">arch_uninstall_hw_breakpoint</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#arch_hw_breakpoint\">arch_hw_breakpoint</a> *<a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#counter_arch_bp\">counter_arch_bp</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#dr7\">dr7</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> **<a class=\"id\" href=\"#slot\">slot</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#bp_per_reg\">bp_per_reg</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#slot\">slot</a> == <a class=\"id\" href=\"#bp\">bp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>, \"Can't find any breakpoint slot\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr7\">dr7</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_dr7\">cpu_dr7</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dr7\">dr7</a> &= ~<a class=\"id\" href=\"#__encode_dr7\">__encode_dr7</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(*<a class=\"id\" href=\"#dr7\">dr7</a>, 7);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#get_hbp_len\">get_hbp_len</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#hbp_len\">hbp_len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len_in_bytes\">len_in_bytes</a> = 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#hbp_len\">hbp_len</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_1\">X86_BREAKPOINT_LEN_1</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len_in_bytes\">len_in_bytes</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_2\">X86_BREAKPOINT_LEN_2</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len_in_bytes\">len_in_bytes</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_4\">X86_BREAKPOINT_LEN_4</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len_in_bytes\">len_in_bytes</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_8\">X86_BREAKPOINT_LEN_8</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len_in_bytes\">len_in_bytes</a> = 8;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len_in_bytes\">len_in_bytes</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check for virtual address in kernel space.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#arch_check_bp_in_kernelspace\">arch_check_bp_in_kernelspace</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#va\">va</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#arch_hw_breakpoint\">arch_hw_breakpoint</a> *<a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#counter_arch_bp\">counter_arch_bp</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#get_hbp_len\">get_hbp_len</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#va\">va</a> >= <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>) && ((<a class=\"id\" href=\"#va\">va</a> + <a class=\"id\" href=\"#len\">len</a> - 1) >= <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#arch_bp_generic_fields\">arch_bp_generic_fields</a>(int <a class=\"id\" href=\"#x86_len\">x86_len</a>, int <a class=\"id\" href=\"#x86_type\">x86_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int *<a class=\"id\" href=\"#gen_len\">gen_len</a>, int *<a class=\"id\" href=\"#gen_type\">gen_type</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Type */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#x86_type\">x86_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_BREAKPOINT_EXECUTE\">X86_BREAKPOINT_EXECUTE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_len\">x86_len</a> != <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_X\">X86_BREAKPOINT_LEN_X</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#gen_type\">gen_type</a> = <a class=\"id\" href=\"#HW_BREAKPOINT_X\">HW_BREAKPOINT_X</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#gen_len\">gen_len</a> = sizeof(long);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_BREAKPOINT_WRITE\">X86_BREAKPOINT_WRITE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#gen_type\">gen_type</a> = <a class=\"id\" href=\"#HW_BREAKPOINT_W\">HW_BREAKPOINT_W</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_BREAKPOINT_RW\">X86_BREAKPOINT_RW</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#gen_type\">gen_type</a> = <a class=\"id\" href=\"#HW_BREAKPOINT_W\">HW_BREAKPOINT_W</a> | <a class=\"id\" href=\"#HW_BREAKPOINT_R\">HW_BREAKPOINT_R</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Len */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#x86_len\">x86_len</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_1\">X86_BREAKPOINT_LEN_1</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#gen_len\">gen_len</a> = <a class=\"id\" href=\"#HW_BREAKPOINT_LEN_1\">HW_BREAKPOINT_LEN_1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_2\">X86_BREAKPOINT_LEN_2</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#gen_len\">gen_len</a> = <a class=\"id\" href=\"#HW_BREAKPOINT_LEN_2\">HW_BREAKPOINT_LEN_2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_4\">X86_BREAKPOINT_LEN_4</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#gen_len\">gen_len</a> = <a class=\"id\" href=\"#HW_BREAKPOINT_LEN_4\">HW_BREAKPOINT_LEN_4</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_8\">X86_BREAKPOINT_LEN_8</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#gen_len\">gen_len</a> = <a class=\"id\" href=\"#HW_BREAKPOINT_LEN_8\">HW_BREAKPOINT_LEN_8</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"static int <a class=\"id\" href=\"#arch_build_bp_info\">arch_build_bp_info</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#arch_hw_breakpoint\">arch_hw_breakpoint</a> *<a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#counter_arch_bp\">counter_arch_bp</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_addr\">bp_addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Type */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_type\">bp_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HW_BREAKPOINT_W\">HW_BREAKPOINT_W</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#X86_BREAKPOINT_WRITE\">X86_BREAKPOINT_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HW_BREAKPOINT_W\">HW_BREAKPOINT_W</a> | <a class=\"id\" href=\"#HW_BREAKPOINT_R\">HW_BREAKPOINT_R</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#X86_BREAKPOINT_RW\">X86_BREAKPOINT_RW</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HW_BREAKPOINT_X\">HW_BREAKPOINT_X</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#X86_BREAKPOINT_EXECUTE\">X86_BREAKPOINT_EXECUTE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * x86 inst breakpoints need to have a specific undefined len.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * But we still need to check userspace is not trying to setup</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * an unsupported length, to get a range breakpoint for example.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_len\">bp_len</a> == sizeof(long)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_X\">X86_BREAKPOINT_LEN_X</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
];
xr_frag_insert('l/b3/f7302b695865c7478f50efd034cde2f1f8644c.xr', __xr_tmp);
