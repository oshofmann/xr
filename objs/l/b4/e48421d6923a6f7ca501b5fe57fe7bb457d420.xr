var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Definitions for the UDP-Lite (RFC 3828) code.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_UDPLITE_H\">_UDPLITE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_UDPLITE_H\">_UDPLITE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ip6_checksum\">ip6_checksum</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* UDP-Lite socket options */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UDPLITE_SEND_CSCOV\">UDPLITE_SEND_CSCOV</a>   10 <span class=\"comment\">/* sender partial coverage (as sent)      */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UDPLITE_RECV_CSCOV\">UDPLITE_RECV_CSCOV</a>   11 <span class=\"comment\">/* receiver partial coverage (threshold ) */</span>", 
"", 
"extern struct <a class=\"id\" href=\"#proto\">proto</a> <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udplite_prot\">udplite_prot</a>;", 
"extern struct <a class=\"id\" href=\"#udp_table\">udp_table</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udplite_table\">udplite_table</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Checksum computation is all in software, hence simpler getfrag.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__inline__\">__inline__</a> int <a class=\"id\" href=\"#udplite_getfrag\">udplite_getfrag</a>(void *<a class=\"id\" href=\"#from\">from</a>, char *<a class=\"id\" href=\"#to\">to</a>, int  <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#odd\">odd</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#memcpy_fromiovecend\">memcpy_fromiovecend</a>(<a class=\"id\" href=\"#to\">to</a>, (struct <a class=\"id\" href=\"#iovec\">iovec</a> *) <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Designate sk as UDP-Lite socket */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#udplite_sk_init\">udplite_sk_init</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#pcflag\">pcflag</a> = <a class=\"id\" href=\"#UDPLITE_BIT\">UDPLITE_BIT</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Checksumming routines</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#udplite_checksum_init\">udplite_checksum_init</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#udphdr\">udphdr</a> *<a class=\"id\" href=\"#uh\">uh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#cscov\">cscov</a>;", 
"", 
"        <span class=\"comment\">/* In UDPv4 a zero checksum means that the transmitter generated no</span>", 
"<span class=\"comment\">         * checksum. UDP-Lite (like IPv6) mandates checksums, hence packets</span>", 
"<span class=\"comment\">         * with a zero checksum field are illegal.                            */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#check\">check</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LIMIT_NETDEBUG\">LIMIT_NETDEBUG</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"UDPLITE: zeroed checksum field\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cscov\">cscov</a> = <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cscov\">cscov</a> == 0)<span class=\"ts\"/><span class=\"ts\"/> <span class=\"comment\">/* Indicates that full coverage is required. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#cscov\">cscov</a> &lt; 8  || <a class=\"id\" href=\"#cscov\">cscov</a> &gt; <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Coverage length violates RFC 3828: log and discard silently.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LIMIT_NETDEBUG\">LIMIT_NETDEBUG</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"UDPLITE: bad csum coverage %d/%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cscov\">cscov</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#cscov\">cscov</a> &lt; <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>) {", 
"        <span class=\"ts\"/><a class=\"id\" href=\"#UDP_SKB_CB\">UDP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#partial_cov\">partial_cov</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#UDP_SKB_CB\">UDP_SKB_CB</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#cscov\">cscov</a> = <a class=\"id\" href=\"#cscov\">cscov</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_COMPLETE\">CHECKSUM_COMPLETE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;", 
"        }", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#udplite_sender_cscov\">udplite_sender_cscov</a>(struct <a class=\"id\" href=\"#udp_sock\">udp_sock</a> *<a class=\"id\" href=\"#up\">up</a>, struct <a class=\"id\" href=\"#udphdr\">udphdr</a> *<a class=\"id\" href=\"#uh\">uh</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cscov\">cscov</a> = <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sender has set `partial coverage' option on UDP-Lite socket</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pcflag\">pcflag</a> &amp; <a class=\"id\" href=\"#UDPLITE_SEND_CC\">UDPLITE_SEND_CC</a>)    {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pcslen\">pcslen</a> &lt; <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* up-&gt;pcslen == 0 means that full coverage is required,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * partial coverage only if  0 &lt; up-&gt;pcslen &lt; up-&gt;len */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (0 &lt; <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pcslen\">pcslen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cscov\">cscov</a> = <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pcslen\">pcslen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uh\">uh</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#pcslen\">pcslen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: Causes for the error case  `up-&gt;pcslen &gt; up-&gt;len':</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *        (i)  Application error (will not be penalized).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       (ii)  Payload too big for send buffer: data is split</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *             into several packets, each with its own header.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *             In this case (e.g. last segment), coverage may</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *             exceed packet length.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       Since packets with coverage length &gt; packet length are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       illegal, we fall back to the defaults here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cscov\">cscov</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#udplite_csum_outgoing\">udplite_csum_outgoing</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cscov\">cscov</a> = <a class=\"id\" href=\"#udplite_sender_cscov\">udplite_sender_cscov</a>(<a class=\"id\" href=\"#udp_sk\">udp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#udp_hdr\">udp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum\">csum</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> = <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>;     <span class=\"comment\">/* no HW support for checksumming */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_walk\">skb_queue_walk</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_write_queue\">sk_write_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const int <a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#skb_transport_offset\">skb_transport_offset</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>const int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#off\">off</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#skb_checksum\">skb_checksum</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#off\">off</a>, (<a class=\"id\" href=\"#cscov\">cscov</a> &gt; <a class=\"id\" href=\"#len\">len</a>)? <a class=\"id\" href=\"#len\">len</a> : <a class=\"id\" href=\"#cscov\">cscov</a>, <a class=\"id\" href=\"#csum\">csum</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cscov\">cscov</a> -= <a class=\"id\" href=\"#len\">len</a>) <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#csum\">csum</a>;", 
"}", 
"", 
"extern void<span class=\"ts\"/><a class=\"id\" href=\"#udplite4_register\">udplite4_register</a>(void);", 
"extern int <span class=\"ts\"/><a class=\"id\" href=\"#udplite_get_port\">udplite_get_port</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, unsigned short <a class=\"id\" href=\"#snum\">snum</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#scmp\">scmp</a>)(const struct <a class=\"id\" href=\"#sock\">sock</a> *, const struct <a class=\"id\" href=\"#sock\">sock</a> *));", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _UDPLITE_H */</span>", 
];
xr_frag_insert('l/b4/e48421d6923a6f7ca501b5fe57fe7bb457d420.xr', __xr_tmp);
