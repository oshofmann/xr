var __xr_tmp = [
"<span class=\"comment\">/*  KVM paravirtual clock driver. A clocksource implementation</span>", 
"<span class=\"comment\">    Copyright (C) 2008 Glauber de Oliveira Costa, Red Hat Inc.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\">    it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\">    the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\">    (at your option) any later version.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\">    GNU General Public License for more details.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">    You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\">    along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\">    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA</span>", 
"<span class=\"comment\">*/</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#clocksource\">clocksource</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kvm_para\">kvm_para</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pvclock\">pvclock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#msr\">msr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#reboot\">reboot</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KVM_SCALE\">KVM_SCALE</a> 22", 
"", 
"static int <a class=\"id\" href=\"#kvmclock\">kvmclock</a> = 1;", 
"static int <a class=\"id\" href=\"#msr_kvm_system_time\">msr_kvm_system_time</a> = <a class=\"id\" href=\"#MSR_KVM_SYSTEM_TIME\">MSR_KVM_SYSTEM_TIME</a>;", 
"static int <a class=\"id\" href=\"#msr_kvm_wall_clock\">msr_kvm_wall_clock</a> = <a class=\"id\" href=\"#MSR_KVM_WALL_CLOCK\">MSR_KVM_WALL_CLOCK</a>;", 
"", 
"static int <a class=\"id\" href=\"#parse_no_kvmclock\">parse_no_kvmclock</a>(char *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kvmclock\">kvmclock</a> = 0;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"no-kvmclock\", <a class=\"id\" href=\"#parse_no_kvmclock\">parse_no_kvmclock</a>);", 
"", 
"<span class=\"comment\">/* The hypervisor will put information about time periodically here */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU_SHARED_ALIGNED\">DEFINE_PER_CPU_SHARED_ALIGNED</a>(struct <a class=\"id\" href=\"#pvclock_vcpu_time_info\">pvclock_vcpu_time_info</a>, <a class=\"id\" href=\"#hv_clock\">hv_clock</a>);", 
"static struct <a class=\"id\" href=\"#pvclock_wall_clock\">pvclock_wall_clock</a> <a class=\"id\" href=\"#wall_clock\">wall_clock</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The wallclock is the time of day when we booted. Since then, some time may</span>", 
"<span class=\"comment\"> * have elapsed since the hypervisor wrote the data. So we try to account for</span>", 
"<span class=\"comment\"> * that with system time</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#kvm_get_wallclock\">kvm_get_wallclock</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pvclock_vcpu_time_info\">pvclock_vcpu_time_info</a> *<a class=\"id\" href=\"#vcpu_time\">vcpu_time</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts\">ts</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#low\">low</a>, <a class=\"id\" href=\"#high\">high</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#low\">low</a> = (int)<a class=\"id\" href=\"#__pa_symbol\">__pa_symbol</a>(&amp;<a class=\"id\" href=\"#wall_clock\">wall_clock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#high\">high</a> = ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#__pa_symbol\">__pa_symbol</a>(&amp;<a class=\"id\" href=\"#wall_clock\">wall_clock</a>) >> 32);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_write_msr\">native_write_msr</a>(<a class=\"id\" href=\"#msr_kvm_wall_clock\">msr_kvm_wall_clock</a>, <a class=\"id\" href=\"#low\">low</a>, <a class=\"id\" href=\"#high\">high</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vcpu_time\">vcpu_time</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#hv_clock\">hv_clock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pvclock_read_wallclock\">pvclock_read_wallclock</a>(&amp;<a class=\"id\" href=\"#wall_clock\">wall_clock</a>, <a class=\"id\" href=\"#vcpu_time\">vcpu_time</a>, &amp;<a class=\"id\" href=\"#ts\">ts</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#hv_clock\">hv_clock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ts\">ts</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kvm_set_wallclock\">kvm_set_wallclock</a>(unsigned long <a class=\"id\" href=\"#now\">now</a>)", 
"{", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#kvm_clock_read\">kvm_clock_read</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pvclock_vcpu_time_info\">pvclock_vcpu_time_info</a> *<a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#hv_clock\">hv_clock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pvclock_clocksource_read\">pvclock_clocksource_read</a>(<a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#hv_clock\">hv_clock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#kvm_clock_get_cycles\">kvm_clock_get_cycles</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kvm_clock_read\">kvm_clock_read</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If we don't do that, there is the possibility that the guest</span>", 
"<span class=\"comment\"> * will calibrate under heavy load - thus, getting a lower lpj -</span>", 
"<span class=\"comment\"> * and execute the delays themselves without load. This is wrong,</span>", 
"<span class=\"comment\"> * because no delay loop can finish beforehand.</span>", 
"<span class=\"comment\"> * Any heuristics is subject to fail, because ultimately, a large</span>", 
"<span class=\"comment\"> * poll of guests can be running and trouble each other. So we preset</span>", 
"<span class=\"comment\"> * lpj here</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#kvm_get_tsc_khz\">kvm_get_tsc_khz</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pvclock_vcpu_time_info\">pvclock_vcpu_time_info</a> *<a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#hv_clock\">hv_clock</a>, 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pvclock_tsc_khz\">pvclock_tsc_khz</a>(<a class=\"id\" href=\"#src\">src</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kvm_get_preset_lpj\">kvm_get_preset_lpj</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#khz\">khz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#lpj\">lpj</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#khz\">khz</a> = <a class=\"id\" href=\"#kvm_get_tsc_khz\">kvm_get_tsc_khz</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lpj\">lpj</a> = ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#khz\">khz</a> * 1000);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#lpj\">lpj</a>, <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preset_lpj\">preset_lpj</a> = <a class=\"id\" href=\"#lpj\">lpj</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#clocksource\">clocksource</a> <a class=\"id\" href=\"#kvm_clock\">kvm_clock</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"kvm-clock\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#kvm_clock_get_cycles\">kvm_clock_get_cycles</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rating\">rating</a> = 400,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#CLOCKSOURCE_MASK\">CLOCKSOURCE_MASK</a>(64),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mult\">mult</a> = 1 << <a class=\"id\" href=\"#KVM_SCALE\">KVM_SCALE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#KVM_SCALE\">KVM_SCALE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#CLOCK_SOURCE_IS_CONTINUOUS\">CLOCK_SOURCE_IS_CONTINUOUS</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#kvm_register_clock\">kvm_register_clock</a>(char *<a class=\"id\" href=\"#txt\">txt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#low\">low</a>, <a class=\"id\" href=\"#high\">high</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#low\">low</a> = (int)<a class=\"id\" href=\"#__pa\">__pa</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#hv_clock\">hv_clock</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)) | 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#high\">high</a> = ((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#__pa\">__pa</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#hv_clock\">hv_clock</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)) >> 32);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"kvm-clock: cpu %d, msr %x:%x, %s\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#high\">high</a>, <a class=\"id\" href=\"#low\">low</a>, <a class=\"id\" href=\"#txt\">txt</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#native_write_msr_safe\">native_write_msr_safe</a>(<a class=\"id\" href=\"#msr_kvm_system_time\">msr_kvm_system_time</a>, <a class=\"id\" href=\"#low\">low</a>, <a class=\"id\" href=\"#high\">high</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#kvm_setup_secondary_clock\">kvm_setup_secondary_clock</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now that the first cpu already had this clocksource initialized,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we shouldn't fail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#kvm_register_clock\">kvm_register_clock</a>(\"secondary cpu clock\"));", 
"<span class=\"ts\"/><span class=\"comment\">/* ok, done with our trickery, call native */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_secondary_APIC_clock\">setup_secondary_APIC_clock</a>();", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#kvm_smp_prepare_boot_cpu\">kvm_smp_prepare_boot_cpu</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#kvm_register_clock\">kvm_register_clock</a>(\"primary cpu clock\"));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_smp_prepare_boot_cpu\">native_smp_prepare_boot_cpu</a>();", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * After the clock is registered, the host will keep writing to the</span>", 
"<span class=\"comment\"> * registered memory location. If the guest happens to shutdown, this memory</span>", 
"<span class=\"comment\"> * won't be valid. In cases like kexec, in which you install a new kernel, this</span>", 
"<span class=\"comment\"> * means a random memory location will be kept being written. So before any</span>", 
"<span class=\"comment\"> * kind of shutdown from our side, we unregister the clock by writting anything</span>", 
"<span class=\"comment\"> * that does not have the 'enable' bit set in the msr</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEXEC\">CONFIG_KEXEC</a>", 
"static void <a class=\"id\" href=\"#kvm_crash_shutdown\">kvm_crash_shutdown</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_write_msr\">native_write_msr</a>(<a class=\"id\" href=\"#msr_kvm_system_time\">msr_kvm_system_time</a>, 0, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_machine_crash_shutdown\">native_machine_crash_shutdown</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#kvm_shutdown\">kvm_shutdown</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_write_msr\">native_write_msr</a>(<a class=\"id\" href=\"#msr_kvm_system_time\">msr_kvm_system_time</a>, 0, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_machine_shutdown\">native_machine_shutdown</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#kvmclock_init\">kvmclock_init</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kvm_para_available\">kvm_para_available</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kvmclock\">kvmclock</a> && <a class=\"id\" href=\"#kvm_para_has_feature\">kvm_para_has_feature</a>(<a class=\"id\" href=\"#KVM_FEATURE_CLOCKSOURCE2\">KVM_FEATURE_CLOCKSOURCE2</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msr_kvm_system_time\">msr_kvm_system_time</a> = <a class=\"id\" href=\"#MSR_KVM_SYSTEM_TIME_NEW\">MSR_KVM_SYSTEM_TIME_NEW</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msr_kvm_wall_clock\">msr_kvm_wall_clock</a> = <a class=\"id\" href=\"#MSR_KVM_WALL_CLOCK_NEW\">MSR_KVM_WALL_CLOCK_NEW</a>;", 
"<span class=\"ts\"/>} else if (!(<a class=\"id\" href=\"#kvmclock\">kvmclock</a> && <a class=\"id\" href=\"#kvm_para_has_feature\">kvm_para_has_feature</a>(<a class=\"id\" href=\"#KVM_FEATURE_CLOCKSOURCE\">KVM_FEATURE_CLOCKSOURCE</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"kvm-clock: Using msrs %x and %x\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msr_kvm_system_time\">msr_kvm_system_time</a>, <a class=\"id\" href=\"#msr_kvm_wall_clock\">msr_kvm_wall_clock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kvm_register_clock\">kvm_register_clock</a>(\"boot clock\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_time_ops\">pv_time_ops</a>.<a class=\"id\" href=\"#sched_clock\">sched_clock</a> = <a class=\"id\" href=\"#kvm_clock_read\">kvm_clock_read</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#calibrate_tsc\">calibrate_tsc</a> = <a class=\"id\" href=\"#kvm_get_tsc_khz\">kvm_get_tsc_khz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#get_wallclock\">get_wallclock</a> = <a class=\"id\" href=\"#kvm_get_wallclock\">kvm_get_wallclock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_platform\">x86_platform</a>.<a class=\"id\" href=\"#set_wallclock\">set_wallclock</a> = <a class=\"id\" href=\"#kvm_set_wallclock\">kvm_set_wallclock</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_cpuinit\">x86_cpuinit</a>.<a class=\"id\" href=\"#setup_percpu_clockev\">setup_percpu_clockev</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kvm_setup_secondary_clock\">kvm_setup_secondary_clock</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_ops\">smp_ops</a>.<a class=\"id\" href=\"#smp_prepare_boot_cpu\">smp_prepare_boot_cpu</a> = <a class=\"id\" href=\"#kvm_smp_prepare_boot_cpu\">kvm_smp_prepare_boot_cpu</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#machine_ops\">machine_ops</a>.<a class=\"id\" href=\"#shutdown\">shutdown</a>  = <a class=\"id\" href=\"#kvm_shutdown\">kvm_shutdown</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEXEC\">CONFIG_KEXEC</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#machine_ops\">machine_ops</a>.<a class=\"id\" href=\"#crash_shutdown\">crash_shutdown</a>  = <a class=\"id\" href=\"#kvm_crash_shutdown\">kvm_crash_shutdown</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kvm_get_preset_lpj\">kvm_get_preset_lpj</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clocksource_register\">clocksource_register</a>(&amp;<a class=\"id\" href=\"#kvm_clock\">kvm_clock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_info\">pv_info</a>.<a class=\"id\" href=\"#paravirt_enabled\">paravirt_enabled</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_info\">pv_info</a>.<a class=\"id\" href=\"#name\">name</a> = \"KVM\";", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kvm_para_has_feature\">kvm_para_has_feature</a>(<a class=\"id\" href=\"#KVM_FEATURE_CLOCKSOURCE_STABLE_BIT\">KVM_FEATURE_CLOCKSOURCE_STABLE_BIT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pvclock_set_flags\">pvclock_set_flags</a>(<a class=\"id\" href=\"#PVCLOCK_TSC_STABLE_BIT\">PVCLOCK_TSC_STABLE_BIT</a>);", 
"}", 
];
xr_frag_insert('l/b5/146c5405bef1d2b5019954c02e8e2c9dd3119e.xr', __xr_tmp);
