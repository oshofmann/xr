var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qstr\">qstr</a>-><a class=\"id\" href=\"#len\">len</a> != <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#qstr\">qstr</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_count\">d_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<a class=\"id\" href=\"#next\">next</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
" <span class=\"ts\"/>}", 
" <span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
" <span class=\"ts\"/>return <a class=\"id\" href=\"#found\">found</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_hash_and_lookup - hash the qstr then search for a dentry</span>", 
"<span class=\"comment\"> * @dir: Directory to search in</span>", 
"<span class=\"comment\"> * @name: qstr of name we wish to find</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On hash failure or on lookup failure NULL is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_hash_and_lookup\">d_hash_and_lookup</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#qstr\">qstr</a> *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for a fs-specific hash function. Note that we must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * calculate the standard hash first, as the d_op-&gt;d_hash()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * routine may choose to leave the hash value unchanged.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a>-><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#full_name_hash\">full_name_hash</a>(<a class=\"id\" href=\"#name\">name</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#d_op\">d_op</a> && <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#d_op\">d_op</a>-><a class=\"id\" href=\"#d_hash\">d_hash</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#d_op\">d_op</a>-><a class=\"id\" href=\"#d_hash\">d_hash</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#name\">name</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#d_lookup\">d_lookup</a>(<a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_validate - verify dentry provided from insecure source</span>", 
"<span class=\"comment\"> * @dentry: The dentry alleged to be valid child of @dparent</span>", 
"<span class=\"comment\"> * @dparent: The parent dentry (known to be valid)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * An insecure source has sent us a dentry, here we verify it and dget() it.</span>", 
"<span class=\"comment\"> * This is used by ncpfs in its readdir implementation.</span>", 
"<span class=\"comment\"> * Zero is returned in the dentry is invalid.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"int <a class=\"id\" href=\"#d_validate\">d_validate</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dparent\">dparent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#lhp\">lhp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check whether the ptr might be valid at all.. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kmem_ptr_validate\">kmem_ptr_validate</a>(<a class=\"id\" href=\"#dentry_cache\">dentry_cache</a>, <a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a> != <a class=\"id\" href=\"#dparent\">dparent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#d_hash\">d_hash</a>(<a class=\"id\" href=\"#dparent\">dparent</a>, <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each\">hlist_for_each</a>(<a class=\"id\" href=\"#lhp\">lhp</a>,<a class=\"id\" href=\"#base\">base</a>) { ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hlist_for_each_entry_rcu() not required for d_hash list</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as it is parsed under dcache_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a> == <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#lhp\">lhp</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#d_hash\">d_hash</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dget_locked\">__dget_locked</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#d_validate\">d_validate</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When a file is deleted, we have two options:</span>", 
"<span class=\"comment\"> * - turn this dentry into a negative dentry</span>", 
"<span class=\"comment\"> * - unhash this dentry and free it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Usually, we want to just turn this into</span>", 
"<span class=\"comment\"> * a negative dentry, but if anybody else is</span>", 
"<span class=\"comment\"> * currently using the dentry or the inode</span>", 
"<span class=\"comment\"> * we can't do that and we fall back on removing</span>", 
"<span class=\"comment\"> * it from the hash queues and waiting for</span>", 
"<span class=\"comment\"> * it to be deleted later when it has no users</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_delete - delete a dentry</span>", 
"<span class=\"comment\"> * @dentry: The dentry to delete</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Turn the dentry into a negative dentry if possible, otherwise</span>", 
"<span class=\"comment\"> * remove it from the hash queues so it can be deleted later</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"void <a class=\"id\" href=\"#d_delete\">d_delete</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#isdir\">isdir</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Are we the only user?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isdir\">isdir</a> = <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_count\">d_count</a>) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_flags\">d_flags</a> &= ~<a class=\"id\" href=\"#DCACHE_CANT_MOUNT\">DCACHE_CANT_MOUNT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry_iput\">dentry_iput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_nameremove\">fsnotify_nameremove</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#isdir\">isdir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#d_unhashed\">d_unhashed</a>(<a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__d_drop\">__d_drop</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_nameremove\">fsnotify_nameremove</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#isdir\">isdir</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#d_delete\">d_delete</a>);", 
"", 
"static void <a class=\"id\" href=\"#__d_rehash\">__d_rehash</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"", 
" <span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#d_flags\">d_flags</a> &= ~<a class=\"id\" href=\"#DCACHE_UNHASHED\">DCACHE_UNHASHED</a>;", 
" <span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#d_hash\">d_hash</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#_d_rehash\">_d_rehash</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__d_rehash\">__d_rehash</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#d_hash\">d_hash</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#hash\">hash</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_rehash<span class=\"ts\"/>- add an entry back to the hash</span>", 
"<span class=\"comment\"> * @entry: dentry to add to the hash</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Adds a dentry to the hash according to its name.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"void <a class=\"id\" href=\"#d_rehash\">d_rehash</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_d_rehash\">_d_rehash</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#d_rehash\">d_rehash</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When switching names, the actual string doesn't strictly have to</span>", 
"<span class=\"comment\"> * be preserved in the target - because we're dropping the target</span>", 
"<span class=\"comment\"> * anyway. As such, we can just do a simple memcpy() to copy over</span>", 
"<span class=\"comment\"> * the new name before we switch.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that we have to be a lot more careful about getting the hash</span>", 
"<span class=\"comment\"> * switched - we have to switch the hash value properly even if it</span>", 
"<span class=\"comment\"> * then no longer matches the actual (corrupted) string of the target.</span>", 
"<span class=\"comment\"> * The hash value has to match the hash queue that the dentry is on..</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#switch_names\">switch_names</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#target\">target</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dname_external\">dname_external</a>(<a class=\"id\" href=\"#target\">target</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dname_external\">dname_external</a>(<a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Both external: swap the pointers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap\">swap</a>(<a class=\"id\" href=\"#target\">target</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * dentry:internal, target:external.  Steal target's</span>", 
];
xr_frag_insert('l/b5/8c4af3d54f4869a327c0d5cc929a17cc584979.xr', __xr_tmp);
