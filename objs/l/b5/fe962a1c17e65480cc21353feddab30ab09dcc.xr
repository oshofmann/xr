var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ring buffer based function tracer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2007-2008 Steven Rostedt &lt;srostedt@redhat.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2008 Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on code from the latency_tracer, that is:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004-2006 Ingo Molnar</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004 William Lee Irwin III</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ring_buffer\">ring_buffer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"trace.h\"", 
"", 
"<span class=\"comment\">/* function tracing enabled */</span>", 
"static int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_function_enabled\">ftrace_function_enabled</a>;", 
"", 
"static struct <a class=\"id\" href=\"#trace_array\">trace_array</a><span class=\"ts\"/>*<a class=\"id\" href=\"#func_trace\">func_trace</a>;", 
"", 
"static void <a class=\"id\" href=\"#tracing_start_function_trace\">tracing_start_function_trace</a>(void);", 
"static void <a class=\"id\" href=\"#tracing_stop_function_trace\">tracing_stop_function_trace</a>(void);", 
"", 
"static int <a class=\"id\" href=\"#function_trace_init\">function_trace_init</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#func_trace\">func_trace</a> = <a class=\"id\" href=\"#tr\">tr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_start_cmdline_record\">tracing_start_cmdline_record</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_start_function_trace\">tracing_start_function_trace</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#function_trace_reset\">function_trace_reset</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_stop_function_trace\">tracing_stop_function_trace</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_stop_cmdline_record\">tracing_stop_cmdline_record</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#function_trace_start\">function_trace_start</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_reset_online_cpus\">tracing_reset_online_cpus</a>(<a class=\"id\" href=\"#tr\">tr</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#function_trace_call_preempt_only\">function_trace_call_preempt_only</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, unsigned long <a class=\"id\" href=\"#parent_ip\">parent_ip</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a> = <a class=\"id\" href=\"#func_trace\">func_trace</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array_cpu\">trace_array_cpu</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#disabled\">disabled</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pc\">pc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#ftrace_function_enabled\">ftrace_function_enabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#preempt_count\">preempt_count</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable_notrace\">preempt_disable_notrace</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_save_flags\">local_save_flags</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disabled\">disabled</a> = <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#disabled\">disabled</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#disabled\">disabled</a> == 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_function\">trace_function</a>(<a class=\"id\" href=\"#tr\">tr</a>, <a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#parent_ip\">parent_ip</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#disabled\">disabled</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_notrace\">preempt_enable_notrace</a>();", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#function_trace_call\">function_trace_call</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, unsigned long <a class=\"id\" href=\"#parent_ip\">parent_ip</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a> = <a class=\"id\" href=\"#func_trace\">func_trace</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array_cpu\">trace_array_cpu</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#disabled\">disabled</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pc\">pc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#ftrace_function_enabled\">ftrace_function_enabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Need to use raw, since this must be called before the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * recursive protection is performed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disabled\">disabled</a> = <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#disabled\">disabled</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#disabled\">disabled</a> == 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#preempt_count\">preempt_count</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_function\">trace_function</a>(<a class=\"id\" href=\"#tr\">tr</a>, <a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#parent_ip\">parent_ip</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#disabled\">disabled</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#function_stack_trace_call\">function_stack_trace_call</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, unsigned long <a class=\"id\" href=\"#parent_ip\">parent_ip</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a> = <a class=\"id\" href=\"#func_trace\">func_trace</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array_cpu\">trace_array_cpu</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#disabled\">disabled</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pc\">pc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#ftrace_function_enabled\">ftrace_function_enabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Need to use raw, since this must be called before the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * recursive protection is performed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disabled\">disabled</a> = <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#disabled\">disabled</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#disabled\">disabled</a> == 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#preempt_count\">preempt_count</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_function\">trace_function</a>(<a class=\"id\" href=\"#tr\">tr</a>, <a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#parent_ip\">parent_ip</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * skip over 5 funcs:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *    __ftrace_trace_stack,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *    __trace_stack,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *    function_stack_trace_call</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *    ftrace_list_func</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *    ftrace_call</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__trace_stack\">__trace_stack</a>(<a class=\"id\" href=\"#tr\">tr</a>, <a class=\"id\" href=\"#flags\">flags</a>, 5, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#disabled\">disabled</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"", 
"static struct <a class=\"id\" href=\"#ftrace_ops\">ftrace_ops</a> <a class=\"id\" href=\"#trace_ops\">trace_ops</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> =", 
"{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#function_trace_call\">function_trace_call</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#ftrace_ops\">ftrace_ops</a> <a class=\"id\" href=\"#trace_stack_ops\">trace_stack_ops</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> =", 
"{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#function_stack_trace_call\">function_stack_trace_call</a>,", 
"};", 
"", 
"<span class=\"comment\">/* Our two options */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_FUNC_OPT_STACK\">TRACE_FUNC_OPT_STACK</a> = 0x1,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#tracer_opt\">tracer_opt</a> <a class=\"id\" href=\"#func_opts\">func_opts</a>[] = {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_STACKTRACE\">CONFIG_STACKTRACE</a>", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TRACER_OPT\">TRACER_OPT</a>(<a class=\"id\" href=\"#func_stack_trace\">func_stack_trace</a>, <a class=\"id\" href=\"#TRACE_FUNC_OPT_STACK\">TRACE_FUNC_OPT_STACK</a>) },", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>{ } <span class=\"comment\">/* Always set a last empty entry */</span>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#tracer_flags\">tracer_flags</a> <a class=\"id\" href=\"#func_flags\">func_flags</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#val\">val</a> = 0, <span class=\"comment\">/* By default: all flags disabled */</span>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#opts\">opts</a> = <a class=\"id\" href=\"#func_opts\">func_opts</a>", 
"};", 
"", 
"static void <a class=\"id\" href=\"#tracing_start_function_trace\">tracing_start_function_trace</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_function_enabled\">ftrace_function_enabled</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_flags\">trace_flags</a> &amp; <a class=\"id\" href=\"#TRACE_ITER_PREEMPTONLY\">TRACE_ITER_PREEMPTONLY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_ops\">trace_ops</a>.<a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#function_trace_call_preempt_only\">function_trace_call_preempt_only</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_ops\">trace_ops</a>.<a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#function_trace_call\">function_trace_call</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#func_flags\">func_flags</a>.<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#TRACE_FUNC_OPT_STACK\">TRACE_FUNC_OPT_STACK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_ftrace_function\">register_ftrace_function</a>(&amp;<a class=\"id\" href=\"#trace_stack_ops\">trace_stack_ops</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_ftrace_function\">register_ftrace_function</a>(&amp;<a class=\"id\" href=\"#trace_ops\">trace_ops</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_function_enabled\">ftrace_function_enabled</a> = 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tracing_stop_function_trace\">tracing_stop_function_trace</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_function_enabled\">ftrace_function_enabled</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#func_flags\">func_flags</a>.<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#TRACE_FUNC_OPT_STACK\">TRACE_FUNC_OPT_STACK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_ftrace_function\">unregister_ftrace_function</a>(&amp;<a class=\"id\" href=\"#trace_stack_ops\">trace_stack_ops</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_ftrace_function\">unregister_ftrace_function</a>(&amp;<a class=\"id\" href=\"#trace_ops\">trace_ops</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#func_set_flag\">func_set_flag</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#old_flags\">old_flags</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bit\">bit</a>, int <a class=\"id\" href=\"#set\">set</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bit\">bit</a> == <a class=\"id\" href=\"#TRACE_FUNC_OPT_STACK\">TRACE_FUNC_OPT_STACK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* do nothing if already set */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!!<a class=\"id\" href=\"#set\">set</a> == !!(<a class=\"id\" href=\"#func_flags\">func_flags</a>.<a class=\"id\" href=\"#val\">val</a> &amp; <a class=\"id\" href=\"#TRACE_FUNC_OPT_STACK\">TRACE_FUNC_OPT_STACK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#set\">set</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_ftrace_function\">unregister_ftrace_function</a>(&amp;<a class=\"id\" href=\"#trace_ops\">trace_ops</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_ftrace_function\">register_ftrace_function</a>(&amp;<a class=\"id\" href=\"#trace_stack_ops\">trace_stack_ops</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_ftrace_function\">unregister_ftrace_function</a>(&amp;<a class=\"id\" href=\"#trace_stack_ops\">trace_stack_ops</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_ftrace_function\">register_ftrace_function</a>(&amp;<a class=\"id\" href=\"#trace_ops\">trace_ops</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#tracer\">tracer</a> <a class=\"id\" href=\"#function_trace\">function_trace</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> =", 
"{", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"function\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#init\">init</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#function_trace_init\">function_trace_init</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#reset\">reset</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#function_trace_reset\">function_trace_reset</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#function_trace_start\">function_trace_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#wait_pipe\">wait_pipe</a><span class=\"ts\"/>= <a class=\"id\" href=\"#poll_wait_pipe\">poll_wait_pipe</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#func_flags\">func_flags</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_flag\">set_flag</a><span class=\"ts\"/>= <a class=\"id\" href=\"#func_set_flag\">func_set_flag</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FTRACE_SELFTEST\">CONFIG_FTRACE_SELFTEST</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#selftest\">selftest</a><span class=\"ts\"/>= <a class=\"id\" href=\"#trace_selftest_startup_function\">trace_selftest_startup_function</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DYNAMIC_FTRACE\">CONFIG_DYNAMIC_FTRACE</a>", 
"static void", 
"<a class=\"id\" href=\"#ftrace_traceon\">ftrace_traceon</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, unsigned long <a class=\"id\" href=\"#parent_ip\">parent_ip</a>, void **<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>long *<a class=\"id\" href=\"#count\">count</a> = (long *)<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tracing_is_on\">tracing_is_on</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#count\">count</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#count\">count</a>)--;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_on\">tracing_on</a>();", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#ftrace_traceoff\">ftrace_traceoff</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>, unsigned long <a class=\"id\" href=\"#parent_ip\">parent_ip</a>, void **<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>long *<a class=\"id\" href=\"#count\">count</a> = (long *)<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tracing_is_on\">tracing_is_on</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#count\">count</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#count\">count</a>)--;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_off\">tracing_off</a>();", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_trace_onoff_print\">ftrace_trace_onoff_print</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, unsigned long <a class=\"id\" href=\"#ip\">ip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ftrace_probe_ops\">ftrace_probe_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"static struct <a class=\"id\" href=\"#ftrace_probe_ops\">ftrace_probe_ops</a> <a class=\"id\" href=\"#traceon_probe_ops\">traceon_probe_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_traceon\">ftrace_traceon</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#print\">print</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_trace_onoff_print\">ftrace_trace_onoff_print</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#ftrace_probe_ops\">ftrace_probe_ops</a> <a class=\"id\" href=\"#traceoff_probe_ops\">traceoff_probe_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_traceoff\">ftrace_traceoff</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#print\">print</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_trace_onoff_print\">ftrace_trace_onoff_print</a>,", 
"};", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_trace_onoff_print\">ftrace_trace_onoff_print</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, unsigned long <a class=\"id\" href=\"#ip\">ip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ftrace_probe_ops\">ftrace_probe_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#count\">count</a> = (long)<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%ps:\", (void *)<a class=\"id\" href=\"#ip\">ip</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a> == &amp;<a class=\"id\" href=\"#traceon_probe_ops\">traceon_probe_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"traceon\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"traceoff\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \":unlimited\\n\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \":count=%ld\\n\", <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_trace_onoff_unreg\">ftrace_trace_onoff_unreg</a>(char *<a class=\"id\" href=\"#glob\">glob</a>, char *<a class=\"id\" href=\"#cmd\">cmd</a>, char *<a class=\"id\" href=\"#param\">param</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_probe_ops\">ftrace_probe_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we register both traceon and traceoff to this callback */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, \"traceon\") == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a> = &amp;<a class=\"id\" href=\"#traceon_probe_ops\">traceon_probe_ops</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a> = &amp;<a class=\"id\" href=\"#traceoff_probe_ops\">traceoff_probe_ops</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_ftrace_function_probe_func\">unregister_ftrace_function_probe_func</a>(<a class=\"id\" href=\"#glob\">glob</a>, <a class=\"id\" href=\"#ops\">ops</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ftrace_trace_onoff_callback\">ftrace_trace_onoff_callback</a>(char *<a class=\"id\" href=\"#glob\">glob</a>, char *<a class=\"id\" href=\"#cmd\">cmd</a>, char *<a class=\"id\" href=\"#param\">param</a>, int <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_probe_ops\">ftrace_probe_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#count\">count</a> = (void *)-1;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#number\">number</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* hash funcs only work with set_ftrace_filter */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#enable\">enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#glob\">glob</a>[0] == '!')", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ftrace_trace_onoff_unreg\">ftrace_trace_onoff_unreg</a>(<a class=\"id\" href=\"#glob\">glob</a>+1, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#param\">param</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we register both traceon and traceoff to this callback */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, \"traceon\") == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a> = &amp;<a class=\"id\" href=\"#traceon_probe_ops\">traceon_probe_ops</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a> = &amp;<a class=\"id\" href=\"#traceoff_probe_ops\">traceoff_probe_ops</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#param\">param</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_reg\">out_reg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#number\">number</a> = <a class=\"id\" href=\"#strsep\">strsep</a>(&amp;<a class=\"id\" href=\"#param\">param</a>, \":\");", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#number\">number</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_reg\">out_reg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use the callback data field (which is a pointer)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as our counter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#number\">number</a>, 0, (unsigned long *)&amp;<a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
" <a class=\"id\" href=\"#out_reg\">out_reg</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_ftrace_function_probe\">register_ftrace_function_probe</a>(<a class=\"id\" href=\"#glob\">glob</a>, <a class=\"id\" href=\"#ops\">ops</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> &lt; 0 ? <a class=\"id\" href=\"#ret\">ret</a> : 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ftrace_func_command\">ftrace_func_command</a> <a class=\"id\" href=\"#ftrace_traceon_cmd\">ftrace_traceon_cmd</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= \"traceon\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_trace_onoff_callback\">ftrace_trace_onoff_callback</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#ftrace_func_command\">ftrace_func_command</a> <a class=\"id\" href=\"#ftrace_traceoff_cmd\">ftrace_traceoff_cmd</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= \"traceoff\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ftrace_trace_onoff_callback\">ftrace_trace_onoff_callback</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_func_cmd_traceon\">init_func_cmd_traceon</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_ftrace_command\">register_ftrace_command</a>(&amp;<a class=\"id\" href=\"#ftrace_traceoff_cmd\">ftrace_traceoff_cmd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_ftrace_command\">register_ftrace_command</a>(&amp;<a class=\"id\" href=\"#ftrace_traceon_cmd\">ftrace_traceon_cmd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_ftrace_command\">unregister_ftrace_command</a>(&amp;<a class=\"id\" href=\"#ftrace_traceoff_cmd\">ftrace_traceoff_cmd</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#init_func_cmd_traceon\">init_func_cmd_traceon</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_DYNAMIC_FTRACE */</span>", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#init_function_trace\">init_function_trace</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_func_cmd_traceon\">init_func_cmd_traceon</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#register_tracer\">register_tracer</a>(&amp;<a class=\"id\" href=\"#function_trace\">function_trace</a>);", 
"}", 
"<a class=\"id\" href=\"#device_initcall\">device_initcall</a>(<a class=\"id\" href=\"#init_function_trace\">init_function_trace</a>);", 
"", 
];
xr_frag_insert('l/b5/fe962a1c17e65480cc21353feddab30ab09dcc.xr', __xr_tmp);
