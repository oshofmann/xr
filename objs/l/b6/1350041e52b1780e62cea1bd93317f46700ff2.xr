var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * security/tomoyo/memory.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Memory management functions for TOMOYO.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2005-2010  NTT DATA CORPORATION</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"common.h\"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_warn_oom - Print out of memory warning message.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @function: Function's name.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tomoyo_warn_oom\">tomoyo_warn_oom</a>(const char *<a class=\"id\" href=\"#function\">function</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Reduce error messages. */</span>", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#tomoyo_last_pid\">tomoyo_last_pid</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tomoyo_last_pid\">tomoyo_last_pid</a> != <a class=\"id\" href=\"#pid\">pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"ERROR: Out of memory at %s.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#function\">function</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_last_pid\">tomoyo_last_pid</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tomoyo_policy_loaded\">tomoyo_policy_loaded</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"MAC Initialization failed.\\n\");", 
"}", 
"", 
"<span class=\"comment\">/* Memory allocated for policy. */</span>", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#tomoyo_policy_memory_size\">tomoyo_policy_memory_size</a>;", 
"<span class=\"comment\">/* Quota for holding policy. */</span>", 
"static unsigned int <a class=\"id\" href=\"#tomoyo_quota_for_policy\">tomoyo_quota_for_policy</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_memory_ok - Check memory quota.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ptr: Pointer to allocated memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true on success, false otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if @ptr is not NULL and quota not exceeded, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#tomoyo_memory_ok\">tomoyo_memory_ok</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#ptr\">ptr</a> ? <a class=\"id\" href=\"#ksize\">ksize</a>(<a class=\"id\" href=\"#ptr\">ptr</a>) : 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#s\">s</a>, &amp;<a class=\"id\" href=\"#tomoyo_policy_memory_size\">tomoyo_policy_memory_size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a> && (!<a class=\"id\" href=\"#tomoyo_quota_for_policy\">tomoyo_quota_for_policy</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#tomoyo_policy_memory_size\">tomoyo_policy_memory_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    <= <a class=\"id\" href=\"#tomoyo_quota_for_policy\">tomoyo_quota_for_policy</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, 0, <a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(<a class=\"id\" href=\"#s\">s</a>, &amp;<a class=\"id\" href=\"#tomoyo_policy_memory_size\">tomoyo_policy_memory_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_warn_oom\">tomoyo_warn_oom</a>(<a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_commit_ok - Check memory quota.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @data:   Data to copy from.</span>", 
"<span class=\"comment\"> * @size:   Size in byte.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns pointer to allocated memory on success, NULL otherwise.</span>", 
"<span class=\"comment\"> * @data is zero-cleared on success.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#tomoyo_commit_ok\">tomoyo_commit_ok</a>(void *<a class=\"id\" href=\"#data\">data</a>, const unsigned int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tomoyo_memory_ok\">tomoyo_memory_ok</a>(<a class=\"id\" href=\"#ptr\">ptr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#data\">data</a>, 0, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_memory_free - Free memory for elements.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ptr:  Pointer to allocated memory.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tomoyo_memory_free\">tomoyo_memory_free</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(<a class=\"id\" href=\"#ksize\">ksize</a>(<a class=\"id\" href=\"#ptr\">ptr</a>), &amp;<a class=\"id\" href=\"#tomoyo_policy_memory_size\">tomoyo_policy_memory_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_get_group - Allocate memory for \"struct tomoyo_path_group\"/\"struct tomoyo_number_group\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @group_name: The name of address group.</span>", 
"<span class=\"comment\"> * @idx:        Index number.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns pointer to \"struct tomoyo_group\" on success, NULL otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tomoyo_group\">tomoyo_group</a> *<a class=\"id\" href=\"#tomoyo_get_group\">tomoyo_get_group</a>(const char *<a class=\"id\" href=\"#group_name\">group_name</a>, const <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_group\">tomoyo_group</a> <a class=\"id\" href=\"#e\">e</a> = { };", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_group\">tomoyo_group</a> *<a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tomoyo_correct_word\">tomoyo_correct_word</a>(<a class=\"id\" href=\"#group_name\">group_name</a>) || <a class=\"id\" href=\"#idx\">idx</a> >= <a class=\"id\" href=\"#TOMOYO_MAX_GROUP\">TOMOYO_MAX_GROUP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a>.<a class=\"id\" href=\"#group_name\">group_name</a> = <a class=\"id\" href=\"#tomoyo_get_name\">tomoyo_get_name</a>(<a class=\"id\" href=\"#group_name\">group_name</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#e\">e</a>.<a class=\"id\" href=\"#group_name\">group_name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#tomoyo_policy_lock\">tomoyo_policy_lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#group\">group</a>, &amp;<a class=\"id\" href=\"#tomoyo_group_list\">tomoyo_group_list</a>[<a class=\"id\" href=\"#idx\">idx</a>], <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#e\">e</a>.<a class=\"id\" href=\"#group_name\">group_name</a> != <a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#group_name\">group_name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#users\">users</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#found\">found</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_group\">tomoyo_group</a> *<a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#tomoyo_commit_ok\">tomoyo_commit_ok</a>(&amp;<a class=\"id\" href=\"#e\">e</a>, sizeof(<a class=\"id\" href=\"#e\">e</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#member_list\">member_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#users\">users</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#tomoyo_group_list\">tomoyo_group_list</a>[<a class=\"id\" href=\"#idx\">idx</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#tomoyo_policy_lock\">tomoyo_policy_lock</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_put_name\">tomoyo_put_name</a>(<a class=\"id\" href=\"#e\">e</a>.<a class=\"id\" href=\"#group_name\">group_name</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#found\">found</a> ? <a class=\"id\" href=\"#group\">group</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * tomoyo_name_list is used for holding string data used by TOMOYO.</span>", 
"<span class=\"comment\"> * Since same string data is likely used for multiple times (e.g.</span>", 
"<span class=\"comment\"> * \"/lib/libc-2.5.so\"), TOMOYO shares string data in the form of</span>", 
"<span class=\"comment\"> * \"const struct tomoyo_path_info *\".</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tomoyo_name_list\">tomoyo_name_list</a>[<a class=\"id\" href=\"#TOMOYO_MAX_HASH\">TOMOYO_MAX_HASH</a>];", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_get_name - Allocate permanent memory for string data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @name: The string to store into the permernent memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns pointer to \"struct tomoyo_path_info\" on success, NULL otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"const struct <a class=\"id\" href=\"#tomoyo_path_info\">tomoyo_path_info</a> *<a class=\"id\" href=\"#tomoyo_get_name\">tomoyo_get_name</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tomoyo_name\">tomoyo_name</a> *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#allocated_len\">allocated_len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#full_name_hash\">full_name_hash</a>((const unsigned char *) <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#len\">len</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#tomoyo_name_list\">tomoyo_name_list</a>[<a class=\"id\" href=\"#hash_long\">hash_long</a>(<a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#TOMOYO_HASH_BITS\">TOMOYO_HASH_BITS</a>)];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#tomoyo_policy_lock\">tomoyo_policy_lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hash\">hash</a> != <a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#hash\">hash</a> || <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#users\">users</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#ptr\">ptr</a>) + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#allocated_len\">allocated_len</a> = <a class=\"id\" href=\"#ptr\">ptr</a> ? <a class=\"id\" href=\"#ksize\">ksize</a>(<a class=\"id\" href=\"#ptr\">ptr</a>) : 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptr\">ptr</a> || (<a class=\"id\" href=\"#tomoyo_quota_for_policy\">tomoyo_quota_for_policy</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#tomoyo_policy_memory_size\">tomoyo_policy_memory_size</a>) + <a class=\"id\" href=\"#allocated_len\">allocated_len</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>     &gt; <a class=\"id\" href=\"#tomoyo_quota_for_policy\">tomoyo_quota_for_policy</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_warn_oom\">tomoyo_warn_oom</a>(<a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#allocated_len\">allocated_len</a>, &amp;<a class=\"id\" href=\"#tomoyo_policy_memory_size\">tomoyo_policy_memory_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#name\">name</a> = ((char *) <a class=\"id\" href=\"#ptr\">ptr</a>) + sizeof(*<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>((char *) <a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#users\">users</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_fill_path_info\">tomoyo_fill_path_info</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#head\">head</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#tomoyo_policy_lock\">tomoyo_policy_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a> ? &amp;<a class=\"id\" href=\"#ptr\">ptr</a>-><a class=\"id\" href=\"#entry\">entry</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_mm_init - Initialize mm related code.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#tomoyo_mm_init\">tomoyo_mm_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = 0; <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#TOMOYO_MAX_POLICY\">TOMOYO_MAX_POLICY</a>; <a class=\"id\" href=\"#idx\">idx</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tomoyo_policy_list\">tomoyo_policy_list</a>[<a class=\"id\" href=\"#idx\">idx</a>]);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = 0; <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#TOMOYO_MAX_GROUP\">TOMOYO_MAX_GROUP</a>; <a class=\"id\" href=\"#idx\">idx</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tomoyo_group_list\">tomoyo_group_list</a>[<a class=\"id\" href=\"#idx\">idx</a>]);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = 0; <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#TOMOYO_MAX_HASH\">TOMOYO_MAX_HASH</a>; <a class=\"id\" href=\"#idx\">idx</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tomoyo_name_list\">tomoyo_name_list</a>[<a class=\"id\" href=\"#idx\">idx</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tomoyo_kernel_domain\">tomoyo_kernel_domain</a>.<a class=\"id\" href=\"#acl_info_list\">acl_info_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_kernel_domain\">tomoyo_kernel_domain</a>.<a class=\"id\" href=\"#domainname\">domainname</a> = <a class=\"id\" href=\"#tomoyo_get_name\">tomoyo_get_name</a>(<a class=\"id\" href=\"#TOMOYO_ROOT_NAME\">TOMOYO_ROOT_NAME</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#tomoyo_kernel_domain\">tomoyo_kernel_domain</a>.<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#tomoyo_domain_list\">tomoyo_domain_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#tomoyo_read_lock\">tomoyo_read_lock</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tomoyo_find_domain\">tomoyo_find_domain</a>(<a class=\"id\" href=\"#TOMOYO_ROOT_NAME\">TOMOYO_ROOT_NAME</a>) != &amp;<a class=\"id\" href=\"#tomoyo_kernel_domain\">tomoyo_kernel_domain</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Can't register tomoyo_kernel_domain\");", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Load built-in policy. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_write_transition_control\">tomoyo_write_transition_control</a>(\"/sbin/hotplug\", <a class=\"id\" href=\"#false\">false</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TOMOYO_TRANSITION_CONTROL_INITIALIZE\">TOMOYO_TRANSITION_CONTROL_INITIALIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_write_transition_control\">tomoyo_write_transition_control</a>(\"/sbin/modprobe\", <a class=\"id\" href=\"#false\">false</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TOMOYO_TRANSITION_CONTROL_INITIALIZE\">TOMOYO_TRANSITION_CONTROL_INITIALIZE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_read_unlock\">tomoyo_read_unlock</a>(<a class=\"id\" href=\"#idx\">idx</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Memory allocated for query lists. */</span>", 
"unsigned int <a class=\"id\" href=\"#tomoyo_query_memory_size\">tomoyo_query_memory_size</a>;", 
"<span class=\"comment\">/* Quota for holding query lists. */</span>", 
"unsigned int <a class=\"id\" href=\"#tomoyo_quota_for_query\">tomoyo_quota_for_query</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_read_memory_counter - Check for memory usage in bytes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @head: Pointer to \"struct tomoyo_io_buffer\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns memory usage.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tomoyo_read_memory_counter\">tomoyo_read_memory_counter</a>(struct <a class=\"id\" href=\"#tomoyo_io_buffer\">tomoyo_io_buffer</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#r\">r</a>.<a class=\"id\" href=\"#eof\">eof</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned int <a class=\"id\" href=\"#policy\">policy</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#tomoyo_policy_memory_size\">tomoyo_policy_memory_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned int <a class=\"id\" href=\"#query\">query</a> = <a class=\"id\" href=\"#tomoyo_query_memory_size\">tomoyo_query_memory_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#buffer\">buffer</a>[64];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, 0, sizeof(<a class=\"id\" href=\"#buffer\">buffer</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tomoyo_quota_for_policy\">tomoyo_quota_for_policy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, sizeof(<a class=\"id\" href=\"#buffer\">buffer</a>) - 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"   (Quota: %10u)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tomoyo_quota_for_policy\">tomoyo_quota_for_policy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[0] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_io_printf\">tomoyo_io_printf</a>(<a class=\"id\" href=\"#head\">head</a>, \"Policy:       %10u%s\\n\", <a class=\"id\" href=\"#policy\">policy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tomoyo_quota_for_query\">tomoyo_quota_for_query</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, sizeof(<a class=\"id\" href=\"#buffer\">buffer</a>) - 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"   (Quota: %10u)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tomoyo_quota_for_query\">tomoyo_quota_for_query</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>[0] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_io_printf\">tomoyo_io_printf</a>(<a class=\"id\" href=\"#head\">head</a>, \"Query lists:  %10u%s\\n\", <a class=\"id\" href=\"#query\">query</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_io_printf\">tomoyo_io_printf</a>(<a class=\"id\" href=\"#head\">head</a>, \"Total:        %10u\\n\", <a class=\"id\" href=\"#policy\">policy</a> + <a class=\"id\" href=\"#query\">query</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#r\">r</a>.<a class=\"id\" href=\"#eof\">eof</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tomoyo_write_memory_quota - Set memory quota.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @head: Pointer to \"struct tomoyo_io_buffer\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tomoyo_write_memory_quota\">tomoyo_write_memory_quota</a>(struct <a class=\"id\" href=\"#tomoyo_io_buffer\">tomoyo_io_buffer</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#write_buf\">write_buf</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#data\">data</a>, \"Policy: %u\", &amp;<a class=\"id\" href=\"#size\">size</a>) == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_quota_for_policy\">tomoyo_quota_for_policy</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#data\">data</a>, \"Query lists: %u\", &amp;<a class=\"id\" href=\"#size\">size</a>) == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tomoyo_quota_for_query\">tomoyo_quota_for_query</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/b6/1350041e52b1780e62cea1bd93317f46700ff2.xr', __xr_tmp);
