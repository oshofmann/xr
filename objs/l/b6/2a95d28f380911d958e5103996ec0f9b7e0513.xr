var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Backlight Lowlevel Control Abstraction</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2003,2004 Hewlett-Packard Company</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backlight\">backlight</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fb\">fb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PMAC_BACKLIGHT\">CONFIG_PMAC_BACKLIGHT</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#backlight\">backlight</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_FB\">CONFIG_FB</a>) || (<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_FB_MODULE\">CONFIG_FB_MODULE</a>) && \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_BACKLIGHT_CLASS_DEVICE_MODULE\">CONFIG_BACKLIGHT_CLASS_DEVICE_MODULE</a>))", 
"<span class=\"comment\">/* This callback gets called when something important happens inside a</span>", 
"<span class=\"comment\"> * framebuffer driver. We're looking if that important event is blanking,</span>", 
"<span class=\"comment\"> * and if it is, we're switching backlight power as well ...</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#fb_notifier_callback\">fb_notifier_callback</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#event\">event</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fb_event\">fb_event</a> *<a class=\"id\" href=\"#evdata\">evdata</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we aren't interested in this event, skip it immediately ... */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a> != <a class=\"id\" href=\"#FB_EVENT_BLANK\">FB_EVENT_BLANK</a> && <a class=\"id\" href=\"#event\">event</a> != <a class=\"id\" href=\"#FB_EVENT_CONBLANK\">FB_EVENT_CONBLANK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#self\">self</a>, struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a>, <a class=\"id\" href=\"#fb_notif\">fb_notif</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#check_fb\">check_fb</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#check_fb\">check_fb</a>(<a class=\"id\" href=\"#bd\">bd</a>, <a class=\"id\" href=\"#evdata\">evdata</a>-><a class=\"id\" href=\"#info\">info</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#props\">props</a>.<a class=\"id\" href=\"#fb_blank\">fb_blank</a> = *(int *)<a class=\"id\" href=\"#evdata\">evdata</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#props\">props</a>.<a class=\"id\" href=\"#fb_blank\">fb_blank</a> == <a class=\"id\" href=\"#FB_BLANK_UNBLANK\">FB_BLANK_UNBLANK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#props\">props</a>.<a class=\"id\" href=\"#state\">state</a> &= ~<a class=\"id\" href=\"#BL_CORE_FBBLANK\">BL_CORE_FBBLANK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#props\">props</a>.<a class=\"id\" href=\"#state\">state</a> |= <a class=\"id\" href=\"#BL_CORE_FBBLANK\">BL_CORE_FBBLANK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#backlight_update_status\">backlight_update_status</a>(<a class=\"id\" href=\"#bd\">bd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#backlight_register_fb\">backlight_register_fb</a>(struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#fb_notif\">fb_notif</a>, 0, sizeof(<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#fb_notif\">fb_notif</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#fb_notif\">fb_notif</a>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#fb_notifier_callback\">fb_notifier_callback</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fb_register_client\">fb_register_client</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#fb_notif\">fb_notif</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#backlight_unregister_fb\">backlight_unregister_fb</a>(struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fb_unregister_client\">fb_unregister_client</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#fb_notif\">fb_notif</a>);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#backlight_register_fb\">backlight_register_fb</a>(struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#backlight_unregister_fb\">backlight_unregister_fb</a>(struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FB */</span>", 
"", 
"static void <a class=\"id\" href=\"#backlight_generate_event\">backlight_generate_event</a>(struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     enum <a class=\"id\" href=\"#backlight_update_reason\">backlight_update_reason</a> <a class=\"id\" href=\"#reason\">reason</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#envp\">envp</a>[2];", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#reason\">reason</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BACKLIGHT_UPDATE_SYSFS\">BACKLIGHT_UPDATE_SYSFS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#envp\">envp</a>[0] = \"SOURCE=sysfs\";", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BACKLIGHT_UPDATE_HOTKEY\">BACKLIGHT_UPDATE_HOTKEY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#envp\">envp</a>[0] = \"SOURCE=hotkey\";", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#envp\">envp</a>[0] = \"SOURCE=unknown\";", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#envp\">envp</a>[1] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_uevent_env\">kobject_uevent_env</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#KOBJ_CHANGE\">KOBJ_CHANGE</a>, <a class=\"id\" href=\"#envp\">envp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysfs_notify\">sysfs_notify</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"actual_brightness\");", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#backlight_show_power\">backlight_show_power</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a> = <a class=\"id\" href=\"#to_backlight_device\">to_backlight_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#props\">props</a>.<a class=\"id\" href=\"#power\">power</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#backlight_store_power\">backlight_store_power</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a> = <a class=\"id\" href=\"#to_backlight_device\">to_backlight_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#power\">power</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, 0, &amp;<a class=\"id\" href=\"#power\">power</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"backlight: set power to %lu\\n\", <a class=\"id\" href=\"#power\">power</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#props\">props</a>.<a class=\"id\" href=\"#power\">power</a> != <a class=\"id\" href=\"#power\">power</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#props\">props</a>.<a class=\"id\" href=\"#power\">power</a> = <a class=\"id\" href=\"#power\">power</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#backlight_update_status\">backlight_update_status</a>(<a class=\"id\" href=\"#bd\">bd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#backlight_show_brightness\">backlight_show_brightness</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a> = <a class=\"id\" href=\"#to_backlight_device\">to_backlight_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#props\">props</a>.<a class=\"id\" href=\"#brightness\">brightness</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#backlight_store_brightness\">backlight_store_brightness</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a> = <a class=\"id\" href=\"#to_backlight_device\">to_backlight_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#brightness\">brightness</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, 0, &amp;<a class=\"id\" href=\"#brightness\">brightness</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#brightness\">brightness</a> &gt; <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#props\">props</a>.<a class=\"id\" href=\"#max_brightness\">max_brightness</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"backlight: set brightness to %lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#brightness\">brightness</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#props\">props</a>.<a class=\"id\" href=\"#brightness\">brightness</a> = <a class=\"id\" href=\"#brightness\">brightness</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#backlight_update_status\">backlight_update_status</a>(<a class=\"id\" href=\"#bd\">bd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#backlight_generate_event\">backlight_generate_event</a>(<a class=\"id\" href=\"#bd\">bd</a>, <a class=\"id\" href=\"#BACKLIGHT_UPDATE_SYSFS\">BACKLIGHT_UPDATE_SYSFS</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#backlight_show_max_brightness\">backlight_show_max_brightness</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a> = <a class=\"id\" href=\"#to_backlight_device\">to_backlight_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#props\">props</a>.<a class=\"id\" href=\"#max_brightness\">max_brightness</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#backlight_show_actual_brightness\">backlight_show_actual_brightness</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a> = <a class=\"id\" href=\"#to_backlight_device\">to_backlight_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a> && <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#get_brightness\">get_brightness</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#get_brightness\">get_brightness</a>(<a class=\"id\" href=\"#bd\">bd</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#class\">class</a> *<a class=\"id\" href=\"#backlight_class\">backlight_class</a>;", 
"", 
"static int <a class=\"id\" href=\"#backlight_suspend\">backlight_suspend</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a> = <a class=\"id\" href=\"#to_backlight_device\">to_backlight_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#options\">options</a> &amp; <a class=\"id\" href=\"#BL_CORE_SUSPENDRESUME\">BL_CORE_SUSPENDRESUME</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#props\">props</a>.<a class=\"id\" href=\"#state\">state</a> |= <a class=\"id\" href=\"#BL_CORE_SUSPENDED\">BL_CORE_SUSPENDED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#backlight_update_status\">backlight_update_status</a>(<a class=\"id\" href=\"#bd\">bd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#backlight_resume\">backlight_resume</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a> = <a class=\"id\" href=\"#to_backlight_device\">to_backlight_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#options\">options</a> &amp; <a class=\"id\" href=\"#BL_CORE_SUSPENDRESUME\">BL_CORE_SUSPENDRESUME</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#props\">props</a>.<a class=\"id\" href=\"#state\">state</a> &= ~<a class=\"id\" href=\"#BL_CORE_SUSPENDED\">BL_CORE_SUSPENDED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#backlight_update_status\">backlight_update_status</a>(<a class=\"id\" href=\"#bd\">bd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#bl_device_release\">bl_device_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a> = <a class=\"id\" href=\"#to_backlight_device\">to_backlight_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bd\">bd</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> <a class=\"id\" href=\"#bl_device_attributes\">bl_device_attributes</a>[] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR\">__ATTR</a>(<a class=\"id\" href=\"#bl_power\">bl_power</a>, 0644, <a class=\"id\" href=\"#backlight_show_power\">backlight_show_power</a>, <a class=\"id\" href=\"#backlight_store_power\">backlight_store_power</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR\">__ATTR</a>(<a class=\"id\" href=\"#brightness\">brightness</a>, 0644, <a class=\"id\" href=\"#backlight_show_brightness\">backlight_show_brightness</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#backlight_store_brightness\">backlight_store_brightness</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR\">__ATTR</a>(<a class=\"id\" href=\"#actual_brightness\">actual_brightness</a>, 0444, <a class=\"id\" href=\"#backlight_show_actual_brightness\">backlight_show_actual_brightness</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#NULL\">NULL</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR\">__ATTR</a>(<a class=\"id\" href=\"#max_brightness\">max_brightness</a>, 0444, <a class=\"id\" href=\"#backlight_show_max_brightness\">backlight_show_max_brightness</a>, <a class=\"id\" href=\"#NULL\">NULL</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR_NULL\">__ATTR_NULL</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * backlight_force_update - tell the backlight subsystem that hardware state</span>", 
"<span class=\"comment\"> *   has changed</span>", 
"<span class=\"comment\"> * @bd: the backlight device to update</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Updates the internal state of the backlight in response to a hardware event,</span>", 
"<span class=\"comment\"> * and generate a uevent to notify userspace</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#backlight_force_update\">backlight_force_update</a>(struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    enum <a class=\"id\" href=\"#backlight_update_reason\">backlight_update_reason</a> <a class=\"id\" href=\"#reason\">reason</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a> && <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#get_brightness\">get_brightness</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#props\">props</a>.<a class=\"id\" href=\"#brightness\">brightness</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#get_brightness\">get_brightness</a>(<a class=\"id\" href=\"#bd\">bd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#backlight_generate_event\">backlight_generate_event</a>(<a class=\"id\" href=\"#bd\">bd</a>, <a class=\"id\" href=\"#reason\">reason</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#backlight_force_update\">backlight_force_update</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * backlight_device_register - create and register a new object of</span>", 
"<span class=\"comment\"> *   backlight_device class.</span>", 
"<span class=\"comment\"> * @name: the name of the new object(must be the same as the name of the</span>", 
"<span class=\"comment\"> *   respective framebuffer device).</span>", 
"<span class=\"comment\"> * @parent: a pointer to the parent device</span>", 
"<span class=\"comment\"> * @devdata: an optional pointer to be stored for private driver use. The</span>", 
"<span class=\"comment\"> *   methods may retrieve it by using bl_get_data(bd).</span>", 
"<span class=\"comment\"> * @ops: the backlight operations structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Creates and registers new backlight device. Returns either an</span>", 
"<span class=\"comment\"> * ERR_PTR() or a pointer to the newly allocated device.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#backlight_device_register\">backlight_device_register</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#parent\">parent</a>, void *<a class=\"id\" href=\"#devdata\">devdata</a>, const struct <a class=\"id\" href=\"#backlight_ops\">backlight_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>,", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#backlight_properties\">backlight_properties</a> *<a class=\"id\" href=\"#props\">props</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#new_bd\">new_bd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"backlight_device_register: name=%s\\n\", <a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_bd\">new_bd</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_bd\">new_bd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#new_bd\">new_bd</a>-><a class=\"id\" href=\"#update_lock\">update_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#new_bd\">new_bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_bd\">new_bd</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#backlight_class\">backlight_class</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_bd\">new_bd</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_bd\">new_bd</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#bl_device_release\">bl_device_release</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_name\">dev_set_name</a>(&amp;<a class=\"id\" href=\"#new_bd\">new_bd</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_drvdata\">dev_set_drvdata</a>(&amp;<a class=\"id\" href=\"#new_bd\">new_bd</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#devdata\">devdata</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set default properties */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#props\">props</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#new_bd\">new_bd</a>-><a class=\"id\" href=\"#props\">props</a>, <a class=\"id\" href=\"#props\">props</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       sizeof(struct <a class=\"id\" href=\"#backlight_properties\">backlight_properties</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#device_register\">device_register</a>(&amp;<a class=\"id\" href=\"#new_bd\">new_bd</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new_bd\">new_bd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#backlight_register_fb\">backlight_register_fb</a>(<a class=\"id\" href=\"#new_bd\">new_bd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(&amp;<a class=\"id\" href=\"#new_bd\">new_bd</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_bd\">new_bd</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#ops\">ops</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PMAC_BACKLIGHT\">CONFIG_PMAC_BACKLIGHT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pmac_backlight_mutex\">pmac_backlight_mutex</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmac_backlight\">pmac_backlight</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmac_backlight\">pmac_backlight</a> = <a class=\"id\" href=\"#new_bd\">new_bd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pmac_backlight_mutex\">pmac_backlight_mutex</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new_bd\">new_bd</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#backlight_device_register\">backlight_device_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * backlight_device_unregister - unregisters a backlight device object.</span>", 
"<span class=\"comment\"> * @bd: the backlight device object to be unregistered and freed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unregisters a previously registered via backlight_device_register object.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#backlight_device_unregister\">backlight_device_unregister</a>(struct <a class=\"id\" href=\"#backlight_device\">backlight_device</a> *<a class=\"id\" href=\"#bd\">bd</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bd\">bd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PMAC_BACKLIGHT\">CONFIG_PMAC_BACKLIGHT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pmac_backlight_mutex\">pmac_backlight_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmac_backlight\">pmac_backlight</a> == <a class=\"id\" href=\"#bd\">bd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmac_backlight\">pmac_backlight</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pmac_backlight_mutex\">pmac_backlight_mutex</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#ops_lock\">ops_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#backlight_unregister_fb\">backlight_unregister_fb</a>(<a class=\"id\" href=\"#bd\">bd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(&amp;<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#backlight_device_unregister\">backlight_device_unregister</a>);", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#backlight_class_exit\">backlight_class_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_destroy\">class_destroy</a>(<a class=\"id\" href=\"#backlight_class\">backlight_class</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#backlight_class_init\">backlight_class_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#backlight_class\">backlight_class</a> = <a class=\"id\" href=\"#class_create\">class_create</a>(<a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>, \"backlight\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#backlight_class\">backlight_class</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Unable to create backlight class; errno = %ld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#backlight_class\">backlight_class</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#backlight_class\">backlight_class</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#backlight_class\">backlight_class</a>-><a class=\"id\" href=\"#dev_attrs\">dev_attrs</a> = <a class=\"id\" href=\"#bl_device_attributes\">bl_device_attributes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#backlight_class\">backlight_class</a>-><a class=\"id\" href=\"#suspend\">suspend</a> = <a class=\"id\" href=\"#backlight_suspend\">backlight_suspend</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#backlight_class\">backlight_class</a>-><a class=\"id\" href=\"#resume\">resume</a> = <a class=\"id\" href=\"#backlight_resume\">backlight_resume</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * if this is compiled into the kernel, we need to ensure that the</span>", 
"<span class=\"comment\"> * class is registered before users of the class try to register lcd's</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#postcore_initcall\">postcore_initcall</a>(<a class=\"id\" href=\"#backlight_class_init\">backlight_class_init</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#backlight_class_exit\">backlight_class_exit</a>);", 
"", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"<a class=\"id\" href=\"#MODULE_AUTHOR\">MODULE_AUTHOR</a>(\"Jamey Hicks <jamey.hicks@hp.com>, Andrew Zabolotny <zap@homelink.ru>\");", 
"<a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(\"Backlight Lowlevel Control Abstraction\");", 
];
xr_frag_insert('l/b6/2a95d28f380911d958e5103996ec0f9b7e0513.xr', __xr_tmp);
