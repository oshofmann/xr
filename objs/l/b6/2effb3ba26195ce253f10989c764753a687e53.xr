var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This module exposes the interface to kernel space for specifying</span>", 
"<span class=\"comment\"> * QoS dependencies.  It provides infrastructure for registration of:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Dependents on a QoS value : register requests</span>", 
"<span class=\"comment\"> * Watchers of QoS value : get notified when target QoS value changes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This QoS design is best effort based.  Dependents register their QoS needs.</span>", 
"<span class=\"comment\"> * Watchers register to keep track of the current QoS needs of the system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are 3 basic classes of QoS parameter: latency, timeout, throughput</span>", 
"<span class=\"comment\"> * each have defined units:</span>", 
"<span class=\"comment\"> * latency: usec</span>", 
"<span class=\"comment\"> * timeout: usec &lt;-- currently not used.</span>", 
"<span class=\"comment\"> * throughput: kbs (kilo byte / sec)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are lists of pm_qos_objects each one wrapping requests, notifiers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * User mode requests on a QOS parameter register themselves to the</span>", 
"<span class=\"comment\"> * subsystem by opening the device node /dev/... and writing there request to</span>", 
"<span class=\"comment\"> * the node.  As long as the process holds a file handle open to the node the</span>", 
"<span class=\"comment\"> * client continues to be accounted for.  Upon file release the usermode</span>", 
"<span class=\"comment\"> * request is removed and a new qos target is computed.  This way when the</span>", 
"<span class=\"comment\"> * request that the application has is cleaned up when closes the file</span>", 
"<span class=\"comment\"> * pointer or exits the pm_qos_object will get an opportunity to clean up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mark Gross &lt;mgross@linux.intel.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*#define DEBUG*/</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm_qos_params\">pm_qos_params</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#miscdevice\">miscdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#platform_device\">platform_device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * locking rule: all changes to requests or notifiers lists</span>", 
"<span class=\"comment\"> * or pm_qos_object list and pm_qos_objects need to happen with pm_qos_lock</span>", 
"<span class=\"comment\"> * held, taken with _irqsave.  One lock to rule them all</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#pm_qos_type\">pm_qos_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PM_QOS_MAX\">PM_QOS_MAX</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* return the largest value */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PM_QOS_MIN\">PM_QOS_MIN</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* return the smallest value */</span>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#pm_qos_object\">pm_qos_object</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#plist_head\">plist_head</a> <a class=\"id\" href=\"#requests\">requests</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#blocking_notifier_head\">blocking_notifier_head</a> *<a class=\"id\" href=\"#notifiers\">notifiers</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#miscdevice\">miscdevice</a> <a class=\"id\" href=\"#pm_qos_power_miscdev\">pm_qos_power_miscdev</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#default_value\">default_value</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#pm_qos_type\">pm_qos_type</a> <a class=\"id\" href=\"#type\">type</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#pm_qos_lock\">pm_qos_lock</a>);", 
"", 
"static struct <a class=\"id\" href=\"#pm_qos_object\">pm_qos_object</a> <a class=\"id\" href=\"#null_pm_qos\">null_pm_qos</a>;", 
"static <a class=\"id\" href=\"#BLOCKING_NOTIFIER_HEAD\">BLOCKING_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#cpu_dma_lat_notifier\">cpu_dma_lat_notifier</a>);", 
"static struct <a class=\"id\" href=\"#pm_qos_object\">pm_qos_object</a> <a class=\"id\" href=\"#cpu_dma_pm_qos\">cpu_dma_pm_qos</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#requests\">requests</a> = <a class=\"id\" href=\"#PLIST_HEAD_INIT\">PLIST_HEAD_INIT</a>(<a class=\"id\" href=\"#cpu_dma_pm_qos\">cpu_dma_pm_qos</a>.<a class=\"id\" href=\"#requests\">requests</a>, <a class=\"id\" href=\"#pm_qos_lock\">pm_qos_lock</a>),", 
];
xr_frag_insert('l/b6/2effb3ba26195ce253f10989c764753a687e53.xr', __xr_tmp);
