var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__LINUX_COMPILER_H\">__LINUX_COMPILER_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LINUX_COMPILER_H\">__LINUX_COMPILER_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__CHECKER__\">__CHECKER__</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__user\">__user</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#noderef\">noderef</a>, <a class=\"id\" href=\"#address_space\">address_space</a>(1)))", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__kernel\">__kernel</a><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#address_space\">address_space</a>(0)))", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__safe\">__safe</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#safe\">safe</a>))", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__force\">__force</a><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#force\">force</a>))", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__nocast\">__nocast</a><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#nocast\">nocast</a>))", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__iomem\">__iomem</a><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#noderef\">noderef</a>, <a class=\"id\" href=\"#address_space\">address_space</a>(2)))", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#context\">context</a>(<a class=\"id\" href=\"#x\">x</a>,0,1)))", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#context\">context</a>(<a class=\"id\" href=\"#x\">x</a>,1,0)))", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__acquire\">__acquire</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__context__\">__context__</a>(<a class=\"id\" href=\"#x\">x</a>,1)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__release\">__release</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__context__\">__context__</a>(<a class=\"id\" href=\"#x\">x</a>,-1)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__cond_lock\">__cond_lock</a>(<a class=\"id\" href=\"#x\">x</a>,<a class=\"id\" href=\"#c\">c</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#c\">c</a>) ? ({ <a class=\"id\" href=\"#__acquire\">__acquire</a>(<a class=\"id\" href=\"#x\">x</a>); 1; }) : 0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__percpu\">__percpu</a><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#noderef\">noderef</a>, <a class=\"id\" href=\"#address_space\">address_space</a>(3)))", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__rcu\">__rcu</a>", 
"extern void <a class=\"id\" href=\"#__chk_user_ptr\">__chk_user_ptr</a>(const volatile void <a class=\"id\" href=\"#__user\">__user</a> *);", 
"extern void <a class=\"id\" href=\"#__chk_io_ptr\">__chk_io_ptr</a>(const volatile void <a class=\"id\" href=\"#__iomem\">__iomem</a> *);", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__user\">__user</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__kernel\">__kernel</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__safe\">__safe</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__force\">__force</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__nocast\">__nocast</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__iomem\">__iomem</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__chk_user_ptr\">__chk_user_ptr</a>(<a class=\"id\" href=\"#x\">x</a>) (void)0", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__chk_io_ptr\">__chk_io_ptr</a>(<a class=\"id\" href=\"#x\">x</a>) (void)0", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__builtin_warning\">__builtin_warning</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#y\">y</a>...) (1)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__acquire\">__acquire</a>(<a class=\"id\" href=\"#x\">x</a>) (void)0", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__release\">__release</a>(<a class=\"id\" href=\"#x\">x</a>) (void)0", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__cond_lock\">__cond_lock</a>(<a class=\"id\" href=\"#x\">x</a>,<a class=\"id\" href=\"#c\">c</a>) (<a class=\"id\" href=\"#c\">c</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__percpu\">__percpu</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__rcu\">__rcu</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__GNUC__\">__GNUC__</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>-<a class=\"id\" href=\"#gcc\">gcc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#notrace\">notrace</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#no_instrument_function\">no_instrument_function</a>))", 
"", 
"<span class=\"comment\">/* Intel compiler defines __GNUC__. So we will overwrite implementations</span>", 
"<span class=\"comment\"> * coming from above header files here</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__INTEL_COMPILER\">__INTEL_COMPILER</a>", 
"# <a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>-<a class=\"id\" href=\"#intel\">intel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic compiler-dependent macros required for kernel</span>", 
"<span class=\"comment\"> * build go below this comment. Actual compiler/compiler version</span>", 
"<span class=\"comment\"> * specific implementations come from the above header files</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#ftrace_branch_data\">ftrace_branch_data</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#line\">line</a>;", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#correct\">correct</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#incorrect\">incorrect</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#miss\">miss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hit\">hit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#miss_hit\">miss_hit</a>[2];", 
"<span class=\"ts\"/>};", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note: DISABLE_BRANCH_PROFILING can be used by special lowlevel code</span>", 
"<span class=\"comment\"> * to disable branch tracing on a per file basis.</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TRACE_BRANCH_PROFILING\">CONFIG_TRACE_BRANCH_PROFILING</a>) \\", 
"    && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#DISABLE_BRANCH_PROFILING\">DISABLE_BRANCH_PROFILING</a>) && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__CHECKER__\">__CHECKER__</a>)", 
"void <a class=\"id\" href=\"#ftrace_likely_update\">ftrace_likely_update</a>(struct <a class=\"id\" href=\"#ftrace_branch_data\">ftrace_branch_data</a> *<a class=\"id\" href=\"#f\">f</a>, int <a class=\"id\" href=\"#val\">val</a>, int <a class=\"id\" href=\"#expect\">expect</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#likely_notrace\">likely_notrace</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__builtin_expect\">__builtin_expect</a>(!!(<a class=\"id\" href=\"#x\">x</a>), 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unlikely_notrace\">unlikely_notrace</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__builtin_expect\">__builtin_expect</a>(!!(<a class=\"id\" href=\"#x\">x</a>), 0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__branch_check__\">__branch_check__</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#expect\">expect</a>) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#______r\">______r</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>static struct <a class=\"id\" href=\"#ftrace_branch_data\">ftrace_branch_data</a><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#__aligned__\">__aligned__</a>(4)))<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#section\">section</a>(\"_ftrace_annotated_branch\"))) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#______f\">______f</a> = {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#__func__\">__func__</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#__FILE__\">__FILE__</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#line\">line</a> = <a class=\"id\" href=\"#__LINE__\">__LINE__</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>};<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#______r\">______r</a> = <a class=\"id\" href=\"#likely_notrace\">likely_notrace</a>(<a class=\"id\" href=\"#x\">x</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_likely_update\">ftrace_likely_update</a>(&amp;<a class=\"id\" href=\"#______f\">______f</a>, <a class=\"id\" href=\"#______r\">______r</a>, <a class=\"id\" href=\"#expect\">expect</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#______r\">______r</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>})", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Using __builtin_constant_p(x) to ignore cases where the return</span>", 
"<span class=\"comment\"> * value is always the same.  This idea is taken from a similar patch</span>", 
"<span class=\"comment\"> * written by Daniel Walker.</span>", 
"<span class=\"comment\"> */</span>", 
"# <a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#likely\">likely</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#x\">x</a>) ? !!(<a class=\"id\" href=\"#x\">x</a>) : <a class=\"id\" href=\"#__branch_check__\">__branch_check__</a>(<a class=\"id\" href=\"#x\">x</a>, 1))", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"# <a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#unlikely\">unlikely</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#x\">x</a>) ? !!(<a class=\"id\" href=\"#x\">x</a>) : <a class=\"id\" href=\"#__branch_check__\">__branch_check__</a>(<a class=\"id\" href=\"#x\">x</a>, 0))", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROFILE_ALL_BRANCHES\">CONFIG_PROFILE_ALL_BRANCHES</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * \"Define 'is'\", Bill Clinton</span>", 
"<span class=\"comment\"> * \"Define 'if'\", Steven Rostedt</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> if(<a class=\"id\" href=\"#cond\">cond</a>, ...) <a class=\"id\" href=\"#__trace_if\">__trace_if</a>( (<a class=\"id\" href=\"#cond\">cond</a> , ## <a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>) )", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__trace_if\">__trace_if</a>(<a class=\"id\" href=\"#cond\">cond</a>) \\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>((<a class=\"id\" href=\"#cond\">cond</a>)) ? !!(<a class=\"id\" href=\"#cond\">cond</a>) :<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#______r\">______r</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>static struct <a class=\"id\" href=\"#ftrace_branch_data\">ftrace_branch_data</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#__aligned__\">__aligned__</a>(4)))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#section\">section</a>(\"_ftrace_branch\")))<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#______f\">______f</a> = {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#__func__\">__func__</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#__FILE__\">__FILE__</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#line\">line</a> = <a class=\"id\" href=\"#__LINE__\">__LINE__</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>};<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#______r\">______r</a> = !!(<a class=\"id\" href=\"#cond\">cond</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#______f\">______f</a>.<a class=\"id\" href=\"#miss_hit\">miss_hit</a>[<a class=\"id\" href=\"#______r\">______r</a>]++;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#______r\">______r</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}))", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PROFILE_ALL_BRANCHES */</span>", 
"", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__builtin_expect\">__builtin_expect</a>(!!(<a class=\"id\" href=\"#x\">x</a>), 1)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__builtin_expect\">__builtin_expect</a>(!!(<a class=\"id\" href=\"#x\">x</a>), 0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Optimization barrier */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#barrier\">barrier</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#barrier\">barrier</a>() <a class=\"id\" href=\"#__memory_barrier\">__memory_barrier</a>()", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Unreachable code */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#unreachable\">unreachable</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#unreachable\">unreachable</a>() do { } while (1)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#RELOC_HIDE\">RELOC_HIDE</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RELOC_HIDE\">RELOC_HIDE</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#off\">off</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"  ({ unsigned long <a class=\"id\" href=\"#__ptr\">__ptr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"     <a class=\"id\" href=\"#__ptr\">__ptr</a> = (unsigned long) (<a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"    (<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#ptr\">ptr</a>)) (<a class=\"id\" href=\"#__ptr\">__ptr</a> + (<a class=\"id\" href=\"#off\">off</a>)); })", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __ASSEMBLY__ */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allow us to mark functions as 'deprecated' and have gcc emit a nice</span>", 
"<span class=\"comment\"> * warning for each use, in hopes of speeding the functions removal.</span>", 
"<span class=\"comment\"> * Usage is:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>int __deprecated foo(void)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__deprecated\">__deprecated</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__deprecated\">__deprecated</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unimplemented */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#MODULE\">MODULE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__deprecated_for_modules\">__deprecated_for_modules</a> <a class=\"id\" href=\"#__deprecated\">__deprecated</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__deprecated_for_modules\">__deprecated_for_modules</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__must_check\">__must_check</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__must_check\">__must_check</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_ENABLE_MUST_CHECK\">CONFIG_ENABLE_MUST_CHECK</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#__must_check\">__must_check</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__must_check\">__must_check</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_ENABLE_WARN_DEPRECATED\">CONFIG_ENABLE_WARN_DEPRECATED</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#__deprecated\">__deprecated</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#__deprecated_for_modules\">__deprecated_for_modules</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__deprecated\">__deprecated</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__deprecated_for_modules\">__deprecated_for_modules</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allow us to avoid 'defined but not used' warnings on functions and data,</span>", 
"<span class=\"comment\"> * as well as force them to be emitted to the assembly file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * As of gcc 3.4, static functions that are not marked with attribute((used))</span>", 
"<span class=\"comment\"> * may be elided from the assembly file.  As of gcc 3.4, static data not so</span>", 
"<span class=\"comment\"> * marked will not be elided, but this may change in a future gcc version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: Because distributions shipped with a backported unit-at-a-time</span>", 
"<span class=\"comment\"> * compiler in gcc 3.3, we must define __used to be __attribute__((used))</span>", 
"<span class=\"comment\"> * for gcc &gt;=3.3 instead of 3.4.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In prior versions of gcc, such functions and data would be emitted, but</span>", 
"<span class=\"comment\"> * would be warned about except with attribute((unused)).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mark functions that are referenced only in inline assembly as __used so</span>", 
"<span class=\"comment\"> * the code is emitted even though it appears to be unreferenced.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__used\">__used</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__used\">__used</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unimplemented */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__maybe_unused\">__maybe_unused</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__maybe_unused\">__maybe_unused</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unimplemented */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__always_unused\">__always_unused</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__always_unused\">__always_unused</a><span class=\"ts\"/><span class=\"comment\">/* unimplemented */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#noinline\">noinline</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#noinline\">noinline</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Rather then using noinline to prevent stack consumption, use</span>", 
"<span class=\"comment\"> * noinline_for_stack instead.  For documentaiton reasons.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> <a class=\"id\" href=\"#noinline\">noinline</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__always_inline\">__always_inline</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__always_inline\">__always_inline</a> <a class=\"id\" href=\"#inline\">inline</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * From the GCC manual:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Many functions do not examine any values except their arguments,</span>", 
"<span class=\"comment\"> * and have no effects except the return value.  Basically this is</span>", 
"<span class=\"comment\"> * just slightly more strict class than the `pure' attribute above,</span>", 
"<span class=\"comment\"> * since function is not allowed to read global memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that a function that has pointer arguments and examines the</span>", 
"<span class=\"comment\"> * data pointed to must _not_ be declared `const'.  Likewise, a</span>", 
"<span class=\"comment\"> * function that calls a non-`const' function usually must not be</span>", 
"<span class=\"comment\"> * `const'.  It does not make sense for a `const' function to return</span>", 
"<span class=\"comment\"> * `void'.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__attribute_const__\">__attribute_const__</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__attribute_const__\">__attribute_const__</a><span class=\"ts\"/><span class=\"comment\">/* unimplemented */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tell gcc if a function is cold. The compiler will assume any path</span>", 
"<span class=\"comment\"> * directly leading to the call is unlikely.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__cold\">__cold</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__cold\">__cold</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Simple shorthand for a section definition */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__section\">__section</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__section\">__section</a>(<a class=\"id\" href=\"#S\">S</a>) <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#__section__\">__section__</a>(#<a class=\"id\" href=\"#S\">S</a>)))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Are two types/vars the same type (ignoring qualifiers)? */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__same_type\">__same_type</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__same_type\">__same_type</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>) <a class=\"id\" href=\"#__builtin_types_compatible_p\">__builtin_types_compatible_p</a>(<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#a\">a</a>), <a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#b\">b</a>))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Compile time object size, -1 for unknown */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__compiletime_object_size\">__compiletime_object_size</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__compiletime_object_size\">__compiletime_object_size</a>(<a class=\"id\" href=\"#obj\">obj</a>) -1", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__compiletime_warning\">__compiletime_warning</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__compiletime_warning\">__compiletime_warning</a>(<a class=\"id\" href=\"#message\">message</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__compiletime_error\">__compiletime_error</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__compiletime_error\">__compiletime_error</a>(<a class=\"id\" href=\"#message\">message</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prevent the compiler from merging or refetching accesses.  The compiler</span>", 
"<span class=\"comment\"> * is also forbidden from reordering successive instances of ACCESS_ONCE(),</span>", 
"<span class=\"comment\"> * but only when the compiler is aware of some particular ordering.  One way</span>", 
"<span class=\"comment\"> * to make the compiler aware of ordering is to put the two invocations of</span>", 
"<span class=\"comment\"> * ACCESS_ONCE() in different C statements.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro does absolutely -nothing- to prevent the CPU from reordering,</span>", 
"<span class=\"comment\"> * merging, or refetching absolutely anything at any time.  Its main intended</span>", 
"<span class=\"comment\"> * use is to mediate communication between process-level code and irq/NMI</span>", 
"<span class=\"comment\"> * handlers, all running on the same CPU.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#x\">x</a>) (*(volatile <a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#x\">x</a>) *)&amp;(<a class=\"id\" href=\"#x\">x</a>))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __LINUX_COMPILER_H */</span>", 
];
xr_frag_insert('l/b6/7e89ce5512d4a4159ef214b3381ee28d897b93.xr', __xr_tmp);
