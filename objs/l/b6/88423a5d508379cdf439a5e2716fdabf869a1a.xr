var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/drivers/clocksource/acpi_pm.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file contains the ACPI PM based clocksource.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This code was largely moved from the i386 timer_pm.c file</span>", 
"<span class=\"comment\"> * which was (C) Dominik Brodowski &lt;linux@brodo.de&gt; 2003</span>", 
"<span class=\"comment\"> * and contained the following comments:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Driver to use the Power Management Timer (PMTMR) available in some</span>", 
"<span class=\"comment\"> * southbridges as primary timing source for the Linux kernel.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on parts of linux/drivers/acpi/hardware/hwtimer.c, timer_pit.c,</span>", 
"<span class=\"comment\"> * timer_hpet.c, and on Arjan van de Ven's implementation for 2.4.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is licensed under the GPL v2.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi_pmtmr\">acpi_pmtmr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#clocksource\">clocksource</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timex\">timex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The I/O port the PMTMR resides at.</span>", 
"<span class=\"comment\"> * The location is detected during setup_arch(),</span>", 
"<span class=\"comment\"> * in arch/i386/kernel/acpi/boot.c</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pmtmr_ioport\">pmtmr_ioport</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#read_pmtmr\">read_pmtmr</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* mask the output to 24 bits */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inl\">inl</a>(<a class=\"id\" href=\"#pmtmr_ioport\">pmtmr_ioport</a>) &amp; <a class=\"id\" href=\"#ACPI_PM_MASK\">ACPI_PM_MASK</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_pm_read_verified\">acpi_pm_read_verified</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#v1\">v1</a> = 0, <a class=\"id\" href=\"#v2\">v2</a> = 0, <a class=\"id\" href=\"#v3\">v3</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It has been reported that because of various broken</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * chipsets (ICH4, PIIX4 and PIIX4E) where the ACPI PM clock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * source is not latched, you must read it multiple</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * times to ensure a safe value is read:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v1\">v1</a> = <a class=\"id\" href=\"#read_pmtmr\">read_pmtmr</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v2\">v2</a> = <a class=\"id\" href=\"#read_pmtmr\">read_pmtmr</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#v3\">v3</a> = <a class=\"id\" href=\"#read_pmtmr\">read_pmtmr</a>();", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#v1\">v1</a> &gt; <a class=\"id\" href=\"#v2\">v2</a> && <a class=\"id\" href=\"#v1\">v1</a> &lt; <a class=\"id\" href=\"#v3\">v3</a>) || (<a class=\"id\" href=\"#v2\">v2</a> &gt; <a class=\"id\" href=\"#v3\">v3</a> && <a class=\"id\" href=\"#v2\">v2</a> &lt; <a class=\"id\" href=\"#v1\">v1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  || (<a class=\"id\" href=\"#v3\">v3</a> &gt; <a class=\"id\" href=\"#v1\">v1</a> && <a class=\"id\" href=\"#v3\">v3</a> &lt; <a class=\"id\" href=\"#v2\">v2</a>)));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#v2\">v2</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#acpi_pm_read\">acpi_pm_read</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#cycle_t\">cycle_t</a>)<a class=\"id\" href=\"#read_pmtmr\">read_pmtmr</a>();", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#clocksource\">clocksource</a> <a class=\"id\" href=\"#clocksource_acpi_pm\">clocksource_acpi_pm</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"acpi_pm\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rating\">rating</a><span class=\"ts\"/><span class=\"ts\"/>= 200,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#acpi_pm_read\">acpi_pm_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mask\">mask</a><span class=\"ts\"/><span class=\"ts\"/>= (<a class=\"id\" href=\"#cycle_t\">cycle_t</a>)<a class=\"id\" href=\"#ACPI_PM_MASK\">ACPI_PM_MASK</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#CLOCK_SOURCE_IS_CONTINUOUS\">CLOCK_SOURCE_IS_CONTINUOUS</a>,", 
"};", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>", 
"static int <a class=\"id\" href=\"#__devinitdata\">__devinitdata</a> <a class=\"id\" href=\"#acpi_pm_good\">acpi_pm_good</a>;", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_pm_good_setup\">acpi_pm_good_setup</a>(char *<a class=\"id\" href=\"#__str\">__str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_pm_good\">acpi_pm_good</a> = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"acpi_pm_good\", <a class=\"id\" href=\"#acpi_pm_good_setup\">acpi_pm_good_setup</a>);", 
"", 
"static <a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#acpi_pm_read_slow\">acpi_pm_read_slow</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#cycle_t\">cycle_t</a>)<a class=\"id\" href=\"#acpi_pm_read_verified\">acpi_pm_read_verified</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#acpi_pm_need_workaround\">acpi_pm_need_workaround</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clocksource_acpi_pm\">clocksource_acpi_pm</a>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#acpi_pm_read_slow\">acpi_pm_read_slow</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clocksource_acpi_pm\">clocksource_acpi_pm</a>.<a class=\"id\" href=\"#rating\">rating</a> = 120;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * PIIX4 Errata:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The power management timer may return improper results when read.</span>", 
"<span class=\"comment\"> * Although the timer value settles properly after incrementing,</span>", 
"<span class=\"comment\"> * while incrementing there is a 3 ns window every 69.8 ns where the</span>", 
"<span class=\"comment\"> * timer value is indeterminate (a 4.2% chance that the data will be</span>", 
"<span class=\"comment\"> * incorrect when read). As a result, the ACPI free running count up</span>", 
"<span class=\"comment\"> * timer specification is violated due to erroneous reads.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#acpi_pm_check_blacklist\">acpi_pm_check_blacklist</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_pm_good\">acpi_pm_good</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the bug has been fixed in PIIX4M */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#revision\">revision</a> &lt; 3) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"* Found PM-Timer Bug on the chipset.\"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \" Due to workarounds for a bug,\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"* this clock source is slow. Consider trying\"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \" other clock sources\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_pm_need_workaround\">acpi_pm_need_workaround</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82371AB_3\">PCI_DEVICE_ID_INTEL_82371AB_3</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_pm_check_blacklist\">acpi_pm_check_blacklist</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#acpi_pm_check_graylist\">acpi_pm_check_graylist</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_pm_good\">acpi_pm_good</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"* The chipset may have PM-Timer Bug. Due to\"", 
"<span class=\"ts\"/>       \" workarounds for a bug,\\n\"", 
"<span class=\"ts\"/>       \"* this clock source is slow. If you are sure your timer\"", 
"<span class=\"ts\"/>       \" does not have\\n\"", 
"<span class=\"ts\"/>       \"* this bug, please use \\\"acpi_pm_good\\\" to disable the\"", 
"<span class=\"ts\"/>       \" workaround\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_pm_need_workaround\">acpi_pm_need_workaround</a>();", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82801DB_0\">PCI_DEVICE_ID_INTEL_82801DB_0</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_pm_check_graylist\">acpi_pm_check_graylist</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_SERVERWORKS\">PCI_VENDOR_ID_SERVERWORKS</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_SERVERWORKS_LE\">PCI_DEVICE_ID_SERVERWORKS_LE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_pm_check_graylist\">acpi_pm_check_graylist</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mach_timer\">mach_timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PMTMR_EXPECTED_RATE\">PMTMR_EXPECTED_RATE</a> \\", 
"  ((<a class=\"id\" href=\"#CALIBRATE_LATCH\">CALIBRATE_LATCH</a> * (<a class=\"id\" href=\"#PMTMR_TICKS_PER_SEC\">PMTMR_TICKS_PER_SEC</a> >> 10)) / (<a class=\"id\" href=\"#CLOCK_TICK_RATE\">CLOCK_TICK_RATE</a>>>10))", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some boards have the PMTMR running way too fast. We check</span>", 
"<span class=\"comment\"> * the PMTMR rate against PIT channel 2 to catch these cases.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#verify_pmtmr_rate\">verify_pmtmr_rate</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#value1\">value1</a>, <a class=\"id\" href=\"#value2\">value2</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mach_prepare_counter\">mach_prepare_counter</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value1\">value1</a> = <a class=\"id\" href=\"#clocksource_acpi_pm\">clocksource_acpi_pm</a>.<a class=\"id\" href=\"#read\">read</a>(&amp;<a class=\"id\" href=\"#clocksource_acpi_pm\">clocksource_acpi_pm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mach_countup\">mach_countup</a>(&amp;<a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value2\">value2</a> = <a class=\"id\" href=\"#clocksource_acpi_pm\">clocksource_acpi_pm</a>.<a class=\"id\" href=\"#read\">read</a>(&amp;<a class=\"id\" href=\"#clocksource_acpi_pm\">clocksource_acpi_pm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = (<a class=\"id\" href=\"#value2\">value2</a> - <a class=\"id\" href=\"#value1\">value1</a>) &amp; <a class=\"id\" href=\"#ACPI_PM_MASK\">ACPI_PM_MASK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check that the PMTMR delta is within 5% of what we expect */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &lt; (<a class=\"id\" href=\"#PMTMR_EXPECTED_RATE\">PMTMR_EXPECTED_RATE</a> * 19) / 20 ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#delta\">delta</a> &gt; (<a class=\"id\" href=\"#PMTMR_EXPECTED_RATE\">PMTMR_EXPECTED_RATE</a> * 21) / 20) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"PM-Timer running at invalid rate: %lu%% \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"of normal - aborting.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>100UL * <a class=\"id\" href=\"#delta\">delta</a> / <a class=\"id\" href=\"#PMTMR_EXPECTED_RATE\">PMTMR_EXPECTED_RATE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#verify_pmtmr_rate\">verify_pmtmr_rate</a>() (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Number of monotonicity checks to perform during initialization */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_PM_MONOTONICITY_CHECKS\">ACPI_PM_MONOTONICITY_CHECKS</a> 10", 
"<span class=\"comment\">/* Number of reads we try to get two different values */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ACPI_PM_READ_CHECKS\">ACPI_PM_READ_CHECKS</a> 10000", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_acpi_pm_clocksource\">init_acpi_pm_clocksource</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#value1\">value1</a>, <a class=\"id\" href=\"#value2\">value2</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmtmr_ioport\">pmtmr_ioport</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* \"verify\" this timing source: */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#ACPI_PM_MONOTONICITY_CHECKS\">ACPI_PM_MONOTONICITY_CHECKS</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(100 * <a class=\"id\" href=\"#j\">j</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value1\">value1</a> = <a class=\"id\" href=\"#clocksource_acpi_pm\">clocksource_acpi_pm</a>.<a class=\"id\" href=\"#read\">read</a>(&amp;<a class=\"id\" href=\"#clocksource_acpi_pm\">clocksource_acpi_pm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_PM_READ_CHECKS\">ACPI_PM_READ_CHECKS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value2\">value2</a> = <a class=\"id\" href=\"#clocksource_acpi_pm\">clocksource_acpi_pm</a>.<a class=\"id\" href=\"#read\">read</a>(&amp;<a class=\"id\" href=\"#clocksource_acpi_pm\">clocksource_acpi_pm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#value2\">value2</a> == <a class=\"id\" href=\"#value1\">value1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#value2\">value2</a> &gt; <a class=\"id\" href=\"#value1\">value1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#value2\">value2</a> &lt; <a class=\"id\" href=\"#value1\">value1</a>) && ((<a class=\"id\" href=\"#value2\">value2</a>) &lt; 0xFFF))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"PM-Timer had inconsistent results:\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \" 0x%#llx, 0x%#llx - aborting.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#value1\">value1</a>, <a class=\"id\" href=\"#value2\">value2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#ACPI_PM_READ_CHECKS\">ACPI_PM_READ_CHECKS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"PM-Timer failed consistency check \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \" (0x%#llx) - aborting.\\n\", <a class=\"id\" href=\"#value1\">value1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#verify_pmtmr_rate\">verify_pmtmr_rate</a>() != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#clocksource_register_hz\">clocksource_register_hz</a>(&amp;<a class=\"id\" href=\"#clocksource_acpi_pm\">clocksource_acpi_pm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PMTMR_TICKS_PER_SEC\">PMTMR_TICKS_PER_SEC</a>);", 
"}", 
"", 
"<span class=\"comment\">/* We use fs_initcall because we want the PCI fixups to have run</span>", 
"<span class=\"comment\"> * but we still need to load before device_initcall</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#fs_initcall\">fs_initcall</a>(<a class=\"id\" href=\"#init_acpi_pm_clocksource\">init_acpi_pm_clocksource</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allow an override of the IOPort. Stupid BIOSes do not tell us about</span>", 
"<span class=\"comment\"> * the PMTimer, but we might know where it is.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_pmtmr\">parse_pmtmr</a>(char *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#arg\">arg</a>, 16, &amp;<a class=\"id\" href=\"#base\">base</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> &gt; <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"PMTMR IOPort override: 0x%04x -> 0x%04lx\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#pmtmr_ioport\">pmtmr_ioport</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmtmr_ioport\">pmtmr_ioport</a> = <a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"pmtmr=\", <a class=\"id\" href=\"#parse_pmtmr\">parse_pmtmr</a>);", 
];
xr_frag_insert('l/b6/88423a5d508379cdf439a5e2716fdabf869a1a.xr', __xr_tmp);
