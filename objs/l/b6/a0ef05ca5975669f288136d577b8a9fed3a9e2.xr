var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Derived from arch/ppc/mm/extable.c and arch/i386/mm/extable.c.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2004 Paul Mackerras, IBM Corp.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> * 2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sort\">sort</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_HAS_SORT_EXTABLE\">ARCH_HAS_SORT_EXTABLE</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The exception table needs to be sorted so that the binary</span>", 
"<span class=\"comment\"> * search that we use to find entries in it works properly.</span>", 
"<span class=\"comment\"> * This is used both for the kernel exception table and for</span>", 
"<span class=\"comment\"> * the exception tables of modules that get loaded.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cmp_ex\">cmp_ex</a>(const void *<a class=\"id\" href=\"#a\">a</a>, const void *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#x\">x</a> = <a class=\"id\" href=\"#a\">a</a>, *<a class=\"id\" href=\"#y\">y</a> = <a class=\"id\" href=\"#b\">b</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* avoid overflow */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#insn\">insn</a> &gt; <a class=\"id\" href=\"#y\">y</a>-><a class=\"id\" href=\"#insn\">insn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#insn\">insn</a> &lt; <a class=\"id\" href=\"#y\">y</a>-><a class=\"id\" href=\"#insn\">insn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#sort_extable\">sort_extable</a>(struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#finish\">finish</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sort\">sort</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#finish\">finish</a> - <a class=\"id\" href=\"#start\">start</a>, sizeof(struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a>),", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#cmp_ex\">cmp_ex</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULES\">CONFIG_MODULES</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If the exception table is sorted, any referring to the module init</span>", 
"<span class=\"comment\"> * will be at the beginning or the end.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#trim_init_extable\">trim_init_extable</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#m\">m</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*trim the beginning*/</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#num_exentries\">num_exentries</a> && <a class=\"id\" href=\"#within_module_init\">within_module_init</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#extable\">extable</a>[0].<a class=\"id\" href=\"#insn\">insn</a>, <a class=\"id\" href=\"#m\">m</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#extable\">extable</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#num_exentries\">num_exentries</a>--;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*trim the end*/</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#num_exentries\">num_exentries</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#within_module_init\">within_module_init</a>(<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#extable\">extable</a>[<a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#num_exentries\">num_exentries</a>-1].<a class=\"id\" href=\"#insn\">insn</a>, <a class=\"id\" href=\"#m\">m</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#num_exentries\">num_exentries</a>--;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MODULES */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !ARCH_HAS_SORT_EXTABLE */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_HAS_SEARCH_EXTABLE\">ARCH_HAS_SEARCH_EXTABLE</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Search one exception table for an entry corresponding to the</span>", 
"<span class=\"comment\"> * given instruction address, and return the address of the entry,</span>", 
"<span class=\"comment\"> * or NULL if none is found.</span>", 
"<span class=\"comment\"> * We use a binary search, and thus we assume that the table is</span>", 
"<span class=\"comment\"> * already sorted.</span>", 
"<span class=\"comment\"> */</span>", 
"const struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *", 
"<a class=\"id\" href=\"#search_extable\">search_extable</a>(const struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#first\">first</a>,", 
"<span class=\"ts\"/>       const struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#last\">last</a>,", 
"<span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#first\">first</a> <= <a class=\"id\" href=\"#last\">last</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> *<a class=\"id\" href=\"#mid\">mid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mid\">mid</a> = ((<a class=\"id\" href=\"#last\">last</a> - <a class=\"id\" href=\"#first\">first</a>) >> 1) + <a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * careful, the distance between value and insn</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * can be larger than MAX_LONG:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mid\">mid</a>-><a class=\"id\" href=\"#insn\">insn</a> &lt; <a class=\"id\" href=\"#value\">value</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#mid\">mid</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#mid\">mid</a>-><a class=\"id\" href=\"#insn\">insn</a> &gt; <a class=\"id\" href=\"#value\">value</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#mid\">mid</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mid\">mid</a>;", 
"        }", 
"        return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/b6/a0ef05ca5975669f288136d577b8a9fed3a9e2.xr', __xr_tmp);
