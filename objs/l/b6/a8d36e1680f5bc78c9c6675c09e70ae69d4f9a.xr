var __xr_tmp = [
"<span class=\"comment\"><span class=\"ts\"/> * returning from ISR. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#save_offset\">save_offset</a> == <a class=\"id\" href=\"#UART_TX\">UART_TX</a> || <a class=\"id\" href=\"#save_offset\">save_offset</a> == <a class=\"id\" href=\"#UART_IER\">UART_IER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>);", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#io_serial_in\">io_serial_in</a>(struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#map_8250_in_reg\">map_8250_in_reg</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#offset\">offset</a>) << <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#regshift\">regshift</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inb\">inb</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#iobase\">iobase</a> + <a class=\"id\" href=\"#offset\">offset</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#io_serial_out\">io_serial_out</a>(struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#map_8250_out_reg\">map_8250_out_reg</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#offset\">offset</a>) << <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#regshift\">regshift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#iobase\">iobase</a> + <a class=\"id\" href=\"#offset\">offset</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_io_from_upio\">set_io_from_upio</a>(struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a> = (struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *)<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#iotype\">iotype</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UPIO_HUB6\">UPIO_HUB6</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_in\">serial_in</a> = <a class=\"id\" href=\"#hub6_serial_in\">hub6_serial_in</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_out\">serial_out</a> = <a class=\"id\" href=\"#hub6_serial_out\">hub6_serial_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UPIO_MEM\">UPIO_MEM</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_in\">serial_in</a> = <a class=\"id\" href=\"#mem_serial_in\">mem_serial_in</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_out\">serial_out</a> = <a class=\"id\" href=\"#mem_serial_out\">mem_serial_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UPIO_RM9000\">UPIO_RM9000</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UPIO_MEM32\">UPIO_MEM32</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_in\">serial_in</a> = <a class=\"id\" href=\"#mem32_serial_in\">mem32_serial_in</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_out\">serial_out</a> = <a class=\"id\" href=\"#mem32_serial_out\">mem32_serial_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UPIO_AU\">UPIO_AU</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_in\">serial_in</a> = <a class=\"id\" href=\"#au_serial_in\">au_serial_in</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_out\">serial_out</a> = <a class=\"id\" href=\"#au_serial_out\">au_serial_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UPIO_TSI\">UPIO_TSI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_in\">serial_in</a> = <a class=\"id\" href=\"#tsi_serial_in\">tsi_serial_in</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_out\">serial_out</a> = <a class=\"id\" href=\"#tsi_serial_out\">tsi_serial_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UPIO_DWAPB\">UPIO_DWAPB</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_in\">serial_in</a> = <a class=\"id\" href=\"#mem_serial_in\">mem_serial_in</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_out\">serial_out</a> = <a class=\"id\" href=\"#dwapb_serial_out\">dwapb_serial_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_in\">serial_in</a> = <a class=\"id\" href=\"#io_serial_in\">io_serial_in</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_out\">serial_out</a> = <a class=\"id\" href=\"#io_serial_out\">io_serial_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Remember loaded iotype */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#cur_iotype\">cur_iotype</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#iotype\">iotype</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#serial_out_sync\">serial_out_sync</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>, int <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uart_port\">uart_port</a> *<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#iotype\">iotype</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UPIO_MEM\">UPIO_MEM</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UPIO_MEM32\">UPIO_MEM32</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UPIO_AU\">UPIO_AU</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#UPIO_DWAPB\">UPIO_DWAPB</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>);<span class=\"ts\"/><span class=\"comment\">/* safe, no side-effects */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#offset\">offset</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#serial_in\">serial_in</a>(&amp;(<a class=\"id\" href=\"#up\">up</a>)-><a class=\"id\" href=\"#port\">port</a>, (<a class=\"id\" href=\"#offset\">offset</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#value\">value</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#serial_out\">serial_out</a>(&amp;(<a class=\"id\" href=\"#up\">up</a>)-><a class=\"id\" href=\"#port\">port</a>, (<a class=\"id\" href=\"#offset\">offset</a>), (<a class=\"id\" href=\"#value\">value</a>)))", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We used to support using pause I/O for certain machines.  We</span>", 
"<span class=\"comment\"> * haven't supported this for a while, but just in case it's badly</span>", 
"<span class=\"comment\"> * needed for certain old 386 machines, I've left these #define's</span>", 
"<span class=\"comment\"> * in....</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#offset\">offset</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#offset\">offset</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#value\">value</a>)<span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#value\">value</a>)", 
"", 
"<span class=\"comment\">/* Uart divisor latch read */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#_serial_dl_read\">_serial_dl_read</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_DLL\">UART_DLL</a>) | <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_DLM\">UART_DLM</a>) << 8;", 
"}", 
"", 
"<span class=\"comment\">/* Uart divisor latch write */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#_serial_dl_write\">_serial_dl_write</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_DLL\">UART_DLL</a>, <a class=\"id\" href=\"#value\">value</a> &amp; 0xff);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_DLM\">UART_DLM</a>, <a class=\"id\" href=\"#value\">value</a> >> 8 &amp; 0xff);", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_MIPS_ALCHEMY\">CONFIG_MIPS_ALCHEMY</a>)", 
"<span class=\"comment\">/* Au1x00 haven't got a standard divisor latch */</span>", 
"static int <a class=\"id\" href=\"#serial_dl_read\">serial_dl_read</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#iotype\">iotype</a> == <a class=\"id\" href=\"#UPIO_AU\">UPIO_AU</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__raw_readl\">__raw_readl</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#membase\">membase</a> + 0x28);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#_serial_dl_read\">_serial_dl_read</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#serial_dl_write\">serial_dl_write</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#iotype\">iotype</a> == <a class=\"id\" href=\"#UPIO_AU\">UPIO_AU</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__raw_writel\">__raw_writel</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#membase\">membase</a> + 0x28);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_serial_dl_write\">_serial_dl_write</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SERIAL_8250_RM9K\">CONFIG_SERIAL_8250_RM9K</a>)", 
"static int <a class=\"id\" href=\"#serial_dl_read\">serial_dl_read</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>return<span class=\"ts\"/>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#iotype\">iotype</a> == <a class=\"id\" href=\"#UPIO_RM9000\">UPIO_RM9000</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/>(((<a class=\"id\" href=\"#__raw_readl\">__raw_readl</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#membase\">membase</a> + 0x10) << 8) |", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__raw_readl\">__raw_readl</a>(<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#membase\">membase</a> + 0x08) &amp; 0xff)) &amp; 0xffff) :", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_serial_dl_read\">_serial_dl_read</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#serial_dl_write\">serial_dl_write</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#iotype\">iotype</a> == <a class=\"id\" href=\"#UPIO_RM9000\">UPIO_RM9000</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__raw_writel\">__raw_writel</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#membase\">membase</a> + 0x08);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__raw_writel\">__raw_writel</a>(<a class=\"id\" href=\"#value\">value</a> >> 8, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#membase\">membase</a> + 0x10);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_serial_dl_write\">_serial_dl_write</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#serial_dl_read\">serial_dl_read</a>(<a class=\"id\" href=\"#up\">up</a>) <a class=\"id\" href=\"#_serial_dl_read\">_serial_dl_read</a>(<a class=\"id\" href=\"#up\">up</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#serial_dl_write\">serial_dl_write</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#value\">value</a>) <a class=\"id\" href=\"#_serial_dl_write\">_serial_dl_write</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#value\">value</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For the 16C950</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#serial_icr_write\">serial_icr_write</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>, int <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_SCR\">UART_SCR</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_ICR\">UART_ICR</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#serial_icr_read\">serial_icr_read</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>, int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_icr_write\">serial_icr_write</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_ACR\">UART_ACR</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#acr\">acr</a> | <a class=\"id\" href=\"#UART_ACR_ICRRD\">UART_ACR_ICRRD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_SCR\">UART_SCR</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_ICR\">UART_ICR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_icr_write\">serial_icr_write</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_ACR\">UART_ACR</a>, <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#acr\">acr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#value\">value</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * FIFO support.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#serial8250_clear_fifos\">serial8250_clear_fifos</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> &amp; <a class=\"id\" href=\"#UART_CAP_FIFO\">UART_CAP_FIFO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_FCR\">UART_FCR</a>, <a class=\"id\" href=\"#UART_FCR_ENABLE_FIFO\">UART_FCR_ENABLE_FIFO</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_FCR\">UART_FCR</a>, <a class=\"id\" href=\"#UART_FCR_ENABLE_FIFO\">UART_FCR_ENABLE_FIFO</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#UART_FCR_CLEAR_RCVR\">UART_FCR_CLEAR_RCVR</a> | <a class=\"id\" href=\"#UART_FCR_CLEAR_XMIT\">UART_FCR_CLEAR_XMIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_FCR\">UART_FCR</a>, 0);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * IER sleep support.  UARTs which have EFRs need the \"extended</span>", 
"<span class=\"comment\"> * capability\" bit enabled.  Note that on XR16C850s, we need to</span>", 
"<span class=\"comment\"> * reset LCR to write to IER.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#serial8250_set_sleep\">serial8250_set_sleep</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#sleep\">sleep</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> &amp; <a class=\"id\" href=\"#UART_CAP_SLEEP\">UART_CAP_SLEEP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> &amp; <a class=\"id\" href=\"#UART_CAP_EFR\">UART_CAP_EFR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0xBF);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_EFR\">UART_EFR</a>, <a class=\"id\" href=\"#UART_EFR_ECB\">UART_EFR_ECB</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_IER\">UART_IER</a>, <a class=\"id\" href=\"#sleep\">sleep</a> ? <a class=\"id\" href=\"#UART_IERX_SLEEP\">UART_IERX_SLEEP</a> : 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> &amp; <a class=\"id\" href=\"#UART_CAP_EFR\">UART_CAP_EFR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0xBF);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_EFR\">UART_EFR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SERIAL_8250_RSA\">CONFIG_SERIAL_8250_RSA</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attempts to turn on the RSA FIFO.  Returns zero on failure.</span>", 
"<span class=\"comment\"> * We set the port uart clock rate if we succeed.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__enable_rsa\">__enable_rsa</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_RSA_MSR\">UART_RSA_MSR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#UART_RSA_MSR_FIFO\">UART_RSA_MSR_FIFO</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_RSA_MSR\">UART_RSA_MSR</a>, <a class=\"id\" href=\"#mode\">mode</a> | <a class=\"id\" href=\"#UART_RSA_MSR_FIFO\">UART_RSA_MSR_FIFO</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_RSA_MSR\">UART_RSA_MSR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#UART_RSA_MSR_FIFO\">UART_RSA_MSR_FIFO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#uartclk\">uartclk</a> = <a class=\"id\" href=\"#SERIAL_RSA_BAUD_BASE\">SERIAL_RSA_BAUD_BASE</a> * 16;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#enable_rsa\">enable_rsa</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PORT_RSA\">PORT_RSA</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#uartclk\">uartclk</a> != <a class=\"id\" href=\"#SERIAL_RSA_BAUD_BASE\">SERIAL_RSA_BAUD_BASE</a> * 16) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__enable_rsa\">__enable_rsa</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#uartclk\">uartclk</a> == <a class=\"id\" href=\"#SERIAL_RSA_BAUD_BASE\">SERIAL_RSA_BAUD_BASE</a> * 16)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_RSA_FRR\">UART_RSA_FRR</a>, 0);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attempts to turn off the RSA FIFO.  Returns zero on failure.</span>", 
"<span class=\"comment\"> * It is unknown why interrupts were disabled in here.  However,</span>", 
"<span class=\"comment\"> * the caller is expected to preserve this behaviour by grabbing</span>", 
"<span class=\"comment\"> * the spinlock before calling this function.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#disable_rsa\">disable_rsa</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PORT_RSA\">PORT_RSA</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#uartclk\">uartclk</a> == <a class=\"id\" href=\"#SERIAL_RSA_BAUD_BASE\">SERIAL_RSA_BAUD_BASE</a> * 16) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_RSA_MSR\">UART_RSA_MSR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = !(<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#UART_RSA_MSR_FIFO\">UART_RSA_MSR_FIFO</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_RSA_MSR\">UART_RSA_MSR</a>, <a class=\"id\" href=\"#mode\">mode</a> &amp; ~<a class=\"id\" href=\"#UART_RSA_MSR_FIFO\">UART_RSA_MSR_FIFO</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_RSA_MSR\">UART_RSA_MSR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = !(<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#UART_RSA_MSR_FIFO\">UART_RSA_MSR_FIFO</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#uartclk\">uartclk</a> = <a class=\"id\" href=\"#SERIAL_RSA_BAUD_BASE_LO\">SERIAL_RSA_BAUD_BASE_LO</a> * 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SERIAL_8250_RSA */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is a quickie test to see how big the FIFO is.</span>", 
"<span class=\"comment\"> * It doesn't work at all the time, more's the pity.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#size_fifo\">size_fifo</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#old_fcr\">old_fcr</a>, <a class=\"id\" href=\"#old_mcr\">old_mcr</a>, <a class=\"id\" href=\"#old_lcr\">old_lcr</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#old_dl\">old_dl</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_lcr\">old_lcr</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_fcr\">old_fcr</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_FCR\">UART_FCR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_mcr\">old_mcr</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_FCR\">UART_FCR</a>, <a class=\"id\" href=\"#UART_FCR_ENABLE_FIFO\">UART_FCR_ENABLE_FIFO</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#UART_FCR_CLEAR_RCVR\">UART_FCR_CLEAR_RCVR</a> | <a class=\"id\" href=\"#UART_FCR_CLEAR_XMIT\">UART_FCR_CLEAR_XMIT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>, <a class=\"id\" href=\"#UART_MCR_LOOP\">UART_MCR_LOOP</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, <a class=\"id\" href=\"#UART_LCR_DLAB\">UART_LCR_DLAB</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_dl\">old_dl</a> = <a class=\"id\" href=\"#serial_dl_read\">serial_dl_read</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_dl_write\">serial_dl_write</a>(<a class=\"id\" href=\"#up\">up</a>, 0x0001);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0x03);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#count\">count</a> = 0; <a class=\"id\" href=\"#count\">count</a> &lt; 256; <a class=\"id\" href=\"#count\">count</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_TX\">UART_TX</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdelay\">mdelay</a>(20);<span class=\"comment\">/* FIXME - schedule_timeout */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#count\">count</a> = 0; (<a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LSR\">UART_LSR</a>) &amp; <a class=\"id\" href=\"#UART_LSR_DR\">UART_LSR_DR</a>) &&", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#count\">count</a> &lt; 256); <a class=\"id\" href=\"#count\">count</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_RX\">UART_RX</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_FCR\">UART_FCR</a>, <a class=\"id\" href=\"#old_fcr\">old_fcr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>, <a class=\"id\" href=\"#old_mcr\">old_mcr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, <a class=\"id\" href=\"#UART_LCR_DLAB\">UART_LCR_DLAB</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_dl_write\">serial_dl_write</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#old_dl\">old_dl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, <a class=\"id\" href=\"#old_lcr\">old_lcr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Read UART ID using the divisor method - set DLL and DLM to zero</span>", 
"<span class=\"comment\"> * and the revision will be in DLL and device type in DLM.  We</span>", 
"<span class=\"comment\"> * preserve the device state across this.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#autoconfig_read_divisor_id\">autoconfig_read_divisor_id</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#old_dll\">old_dll</a>, <a class=\"id\" href=\"#old_dlm\">old_dlm</a>, <a class=\"id\" href=\"#old_lcr\">old_lcr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_lcr\">old_lcr</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, <a class=\"id\" href=\"#UART_LCR_DLAB\">UART_LCR_DLAB</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_dll\">old_dll</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_DLL\">UART_DLL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_dlm\">old_dlm</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_DLM\">UART_DLM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_DLL\">UART_DLL</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_DLM\">UART_DLM</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_DLL\">UART_DLL</a>) | <a class=\"id\" href=\"#serial_inp\">serial_inp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_DLM\">UART_DLM</a>) << 8;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_DLL\">UART_DLL</a>, <a class=\"id\" href=\"#old_dll\">old_dll</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_DLM\">UART_DLM</a>, <a class=\"id\" href=\"#old_dlm\">old_dlm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, <a class=\"id\" href=\"#old_lcr\">old_lcr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is a helper routine to autodetect StarTech/Exar/Oxsemi UART's.</span>", 
"<span class=\"comment\"> * When this function is called we know it is at least a StarTech</span>", 
"<span class=\"comment\"> * 16650 V2, but it might be one of several StarTech UARTs, or one of</span>", 
"<span class=\"comment\"> * its clones.  (We treat the broken original StarTech 16650 V1 as a</span>", 
"<span class=\"comment\"> * 16550, and why not?  Startech doesn't seem to even acknowledge its</span>", 
"<span class=\"comment\"> * existence.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * What evil have men's minds wrought...</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#autoconfig_has_efr\">autoconfig_has_efr</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#id1\">id1</a>, <a class=\"id\" href=\"#id2\">id2</a>, <a class=\"id\" href=\"#id3\">id3</a>, <a class=\"id\" href=\"#rev\">rev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Everything with an EFR has SLEEP</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> |= <a class=\"id\" href=\"#UART_CAP_EFR\">UART_CAP_EFR</a> | <a class=\"id\" href=\"#UART_CAP_SLEEP\">UART_CAP_SLEEP</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First we check to see if it's an Oxford Semiconductor UART.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we have to do this here because some non-National</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Semiconductor clone chips lock up if you try writing to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * LSR register (which serial_icr_read does)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for Oxford Semiconductor 16C950.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * EFR [4] must be set else this test fails.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This shouldn't be necessary, but Mike Hudson (Exoray@isys.ca)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * claims that it's needed for 952 dual UART's (which are not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * recommended for new designs).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#acr\">acr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0xBF);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_EFR\">UART_EFR</a>, <a class=\"id\" href=\"#UART_EFR_ECB\">UART_EFR_ECB</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_out\">serial_out</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0x00);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id1\">id1</a> = <a class=\"id\" href=\"#serial_icr_read\">serial_icr_read</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_ID1\">UART_ID1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id2\">id2</a> = <a class=\"id\" href=\"#serial_icr_read\">serial_icr_read</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_ID2\">UART_ID2</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id3\">id3</a> = <a class=\"id\" href=\"#serial_icr_read\">serial_icr_read</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_ID3\">UART_ID3</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rev\">rev</a> = <a class=\"id\" href=\"#serial_icr_read\">serial_icr_read</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_REV\">UART_REV</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_AUTOCONF\">DEBUG_AUTOCONF</a>(\"950id=%02x:%02x:%02x:%02x \", <a class=\"id\" href=\"#id1\">id1</a>, <a class=\"id\" href=\"#id2\">id2</a>, <a class=\"id\" href=\"#id3\">id3</a>, <a class=\"id\" href=\"#rev\">rev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id1\">id1</a> == 0x16 && <a class=\"id\" href=\"#id2\">id2</a> == 0xC9 &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#id3\">id3</a> == 0x50 || <a class=\"id\" href=\"#id3\">id3</a> == 0x52 || <a class=\"id\" href=\"#id3\">id3</a> == 0x54)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PORT_16C950\">PORT_16C950</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Enable work around for the Oxford Semiconductor 952 rev B</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * chip which causes it to seriously miscalculate baud rates</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when DLL is 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id3\">id3</a> == 0x52 && <a class=\"id\" href=\"#rev\">rev</a> == 0x01)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#bugs\">bugs</a> |= <a class=\"id\" href=\"#UART_BUG_QUOT\">UART_BUG_QUOT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We check for a XR16C850 by setting DLL and DLM to 0, and then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reading back DLL and DLM.  The chip type depends on the DLM</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * value read back:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  0x10 - XR16C850 and the DLL contains the chip revision.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  0x12 - XR16C2850.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  0x14 - XR16C854.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id1\">id1</a> = <a class=\"id\" href=\"#autoconfig_read_divisor_id\">autoconfig_read_divisor_id</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_AUTOCONF\">DEBUG_AUTOCONF</a>(\"850id=%04x \", <a class=\"id\" href=\"#id1\">id1</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id2\">id2</a> = <a class=\"id\" href=\"#id1\">id1</a> >> 8;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id2\">id2</a> == 0x10 || <a class=\"id\" href=\"#id2\">id2</a> == 0x12 || <a class=\"id\" href=\"#id2\">id2</a> == 0x14) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PORT_16850\">PORT_16850</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It wasn't an XR16C850.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We distinguish between the '654 and the '650 by counting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * how many bytes are in the FIFO.  I'm using this for now,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * since that's the technique that was sent to me in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * serial driver update, but I'm not convinced this works.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * I've had problems doing this in the past.  -TYT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size_fifo\">size_fifo</a>(<a class=\"id\" href=\"#up\">up</a>) == 64)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PORT_16654\">PORT_16654</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PORT_16650V2\">PORT_16650V2</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We detected a chip without a FIFO.  Only two fall into</span>", 
"<span class=\"comment\"> * this category - the original 8250 and the 16450.  The</span>", 
"<span class=\"comment\"> * 16450 has a scratch register (accessible with LCR=0)</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#autoconfig_8250\">autoconfig_8250</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#scratch\">scratch</a>, <a class=\"id\" href=\"#status1\">status1</a>, <a class=\"id\" href=\"#status2\">status2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PORT_8250\">PORT_8250</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scratch\">scratch</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_SCR\">UART_SCR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_SCR\">UART_SCR</a>, 0xa5);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status1\">status1</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_SCR\">UART_SCR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_SCR\">UART_SCR</a>, 0x5a);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status2\">status2</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_SCR\">UART_SCR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_SCR\">UART_SCR</a>, <a class=\"id\" href=\"#scratch\">scratch</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status1\">status1</a> == 0xa5 && <a class=\"id\" href=\"#status2\">status2</a> == 0x5a)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PORT_16450\">PORT_16450</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#broken_efr\">broken_efr</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Exar ST16C2550 \"A2\" devices incorrectly detect as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * having an EFR, and report an ID of 0x0201.  See</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * http://www.exar.com/info.php?pdf=dan180_oct2004.pdf</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#autoconfig_read_divisor_id\">autoconfig_read_divisor_id</a>(<a class=\"id\" href=\"#up\">up</a>) == 0x0201 && <a class=\"id\" href=\"#size_fifo\">size_fifo</a>(<a class=\"id\" href=\"#up\">up</a>) == 16)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We know that the chip has FIFOs.  Does it have an EFR?  The</span>", 
"<span class=\"comment\"> * EFR is located in the same register position as the IIR and</span>", 
"<span class=\"comment\"> * we know the top two bits of the IIR are currently set.  The</span>", 
"<span class=\"comment\"> * EFR should contain zero.  Try to read the EFR.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#autoconfig_16550a\">autoconfig_16550a</a>(struct <a class=\"id\" href=\"#uart_8250_port\">uart_8250_port</a> *<a class=\"id\" href=\"#up\">up</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#status1\">status1</a>, <a class=\"id\" href=\"#status2\">status2</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#iersave\">iersave</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PORT_16550A\">PORT_16550A</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> |= <a class=\"id\" href=\"#UART_CAP_FIFO\">UART_CAP_FIFO</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for presence of the EFR when DLAB is set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only ST16C650V1 UARTs pass this test.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, <a class=\"id\" href=\"#UART_LCR_DLAB\">UART_LCR_DLAB</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_EFR\">UART_EFR</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_EFR\">UART_EFR</a>, 0xA8);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_EFR\">UART_EFR</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_AUTOCONF\">DEBUG_AUTOCONF</a>(\"EFRv1 \");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PORT_16650\">PORT_16650</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#capabilities\">capabilities</a> |= <a class=\"id\" href=\"#UART_CAP_EFR\">UART_CAP_EFR</a> | <a class=\"id\" href=\"#UART_CAP_SLEEP\">UART_CAP_SLEEP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_AUTOCONF\">DEBUG_AUTOCONF</a>(\"Motorola 8xxx DUART \");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_EFR\">UART_EFR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Maybe it requires 0xbf to be written to the LCR.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (other ST16C650V2 UARTs, TI16C752A, etc)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0xBF);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_EFR\">UART_EFR</a>) == 0 && !<a class=\"id\" href=\"#broken_efr\">broken_efr</a>(<a class=\"id\" href=\"#up\">up</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_AUTOCONF\">DEBUG_AUTOCONF</a>(\"EFRv2 \");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#autoconfig_has_efr\">autoconfig_has_efr</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for a National Semiconductor SuperIO chip.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Attempt to switch to bank 2, read the value of the LOOP bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from EXCR1. Switch back to bank 0, change it in MCR. Then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * switch back to bank 2, read it from EXCR1 again and check</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it's changed. If so, set baud_base in EXCR2 to 921600. -- dwmw2</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status1\">status1</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0xE0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status2\">status2</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, 0x02); <span class=\"comment\">/* EXCR1 */</span>", 
"", 
"<span class=\"ts\"/>if (!((<a class=\"id\" href=\"#status2\">status2</a> ^ <a class=\"id\" href=\"#status1\">status1</a>) &amp; <a class=\"id\" href=\"#UART_MCR_LOOP\">UART_MCR_LOOP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>, <a class=\"id\" href=\"#status1\">status1</a> ^ <a class=\"id\" href=\"#UART_MCR_LOOP\">UART_MCR_LOOP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0xE0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status2\">status2</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, 0x02); <span class=\"comment\">/* EXCR1 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_MCR\">UART_MCR</a>, <a class=\"id\" href=\"#status1\">status1</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#status2\">status2</a> ^ <a class=\"id\" href=\"#status1\">status1</a>) &amp; <a class=\"id\" href=\"#UART_MCR_LOOP\">UART_MCR_LOOP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#quot\">quot</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0xE0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quot\">quot</a> = <a class=\"id\" href=\"#serial_dl_read\">serial_dl_read</a>(<a class=\"id\" href=\"#up\">up</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quot\">quot</a> <<= 3;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status1\">status1</a> = <a class=\"id\" href=\"#serial_in\">serial_in</a>(<a class=\"id\" href=\"#up\">up</a>, 0x04); <span class=\"comment\">/* EXCR2 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status1\">status1</a> &= ~0xB0; <span class=\"comment\">/* Disable LOCK, mask out PRESL[01] */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status1\">status1</a> |= 0x10;  <span class=\"comment\">/* 1.625 divisor for baud_base --&gt; 921600 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, 0x04, <a class=\"id\" href=\"#status1\">status1</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_dl_write\">serial_dl_write</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#quot\">quot</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serial_outp\">serial_outp</a>(<a class=\"id\" href=\"#up\">up</a>, <a class=\"id\" href=\"#UART_LCR\">UART_LCR</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#uartclk\">uartclk</a> = 921600*16;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#PORT_NS16550A\">PORT_NS16550A</a>;", 
];
xr_frag_insert('l/b6/a8d36e1680f5bc78c9c6675c09e70ae69d4f9a.xr', __xr_tmp);
