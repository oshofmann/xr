var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dbg_reg_def\">dbg_reg_def</a>[<a class=\"id\" href=\"#regno\">regno</a>].<a class=\"id\" href=\"#name\">name</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sleeping_thread_to_gdb_regs - Convert ptrace regs to GDB regs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gdb_regs: A pointer to hold the registers in the order GDB wants.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p: The &amp;struct task_struct of the desired process.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Convert the register values of the sleeping process in @p to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the format that GDB expects.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is called when kgdb does not have access to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>&amp;struct pt_regs and therefore it should fill the gdb registers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gdb_regs with what has<span class=\"ts\"/>been saved in &amp;struct thread_struct</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>thread field during switch_to.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sleeping_thread_to_gdb_regs\">sleeping_thread_to_gdb_regs</a>(unsigned long *<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#gdb_regs32\">gdb_regs32</a> = (<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_AX\">GDB_AX</a>]<span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_BX\">GDB_BX</a>]<span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_CX\">GDB_CX</a>]<span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_DX\">GDB_DX</a>]<span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_SI\">GDB_SI</a>]<span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_DI\">GDB_DI</a>]<span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_BP\">GDB_BP</a>]<span class=\"ts\"/>= *(unsigned long *)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_DS\">GDB_DS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#__KERNEL_DS\">__KERNEL_DS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_ES\">GDB_ES</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#__KERNEL_DS\">__KERNEL_DS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_PS\">GDB_PS</a>]<span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_CS\">GDB_CS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_PC\">GDB_PC</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_SS\">GDB_SS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#__KERNEL_DS\">__KERNEL_DS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_FS\">GDB_FS</a>]<span class=\"ts\"/>= 0xFFFF;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_GS\">GDB_GS</a>]<span class=\"ts\"/>= 0xFFFF;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs32\">gdb_regs32</a>[<a class=\"id\" href=\"#GDB_PS\">GDB_PS</a>]<span class=\"ts\"/>= *(unsigned long *)(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a> + 8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs32\">gdb_regs32</a>[<a class=\"id\" href=\"#GDB_CS\">GDB_CS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs32\">gdb_regs32</a>[<a class=\"id\" href=\"#GDB_SS\">GDB_SS</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#__KERNEL_DS\">__KERNEL_DS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_PC\">GDB_PC</a>]<span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_R8\">GDB_R8</a>]<span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_R9\">GDB_R9</a>]<span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_R10\">GDB_R10</a>]<span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_R11\">GDB_R11</a>]<span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_R12\">GDB_R12</a>]<span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_R13\">GDB_R13</a>]<span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_R14\">GDB_R14</a>]<span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_R15\">GDB_R15</a>]<span class=\"ts\"/>= 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdb_regs\">gdb_regs</a>[<a class=\"id\" href=\"#GDB_SP\">GDB_SP</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#hw_breakpoint\">hw_breakpoint</a> {", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enabled\">enabled</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a><span class=\"ts\"/>* <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#pev\">pev</a>;", 
"} <a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>];", 
"", 
"static unsigned long <a class=\"id\" href=\"#early_dr7\">early_dr7</a>;", 
"", 
"static void <a class=\"id\" href=\"#kgdb_correct_hw_break\">kgdb_correct_hw_break</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#breakno\">breakno</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#breakno\">breakno</a> = 0; <a class=\"id\" href=\"#breakno\">breakno</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>; <a class=\"id\" href=\"#breakno\">breakno</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#arch_hw_breakpoint\">arch_hw_breakpoint</a> *<a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#enabled\">enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_is_early\">dbg_is_early</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#breakno\">breakno</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_dr7\">early_dr7</a> |= <a class=\"id\" href=\"#encode_dr7\">encode_dr7</a>(<a class=\"id\" href=\"#breakno\">breakno</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(<a class=\"id\" href=\"#early_dr7\">early_dr7</a>, 7);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = *<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#pev\">pev</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#counter_arch_bp\">counter_arch_bp</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#disabled\">disabled</a> != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_addr\">bp_addr</a> = <a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_len\">bp_len</a> = <a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_type\">bp_type</a> = <a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#arch_install_hw_breakpoint\">arch_install_hw_breakpoint</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#disabled\">disabled</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dbg_is_early\">dbg_is_early</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hw_breakpoint_restore\">hw_breakpoint_restore</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#hw_break_reserve_slot\">hw_break_reserve_slot</a>(int <a class=\"id\" href=\"#breakno\">breakno</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cnt\">cnt</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> **<a class=\"id\" href=\"#pevent\">pevent</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_is_early\">dbg_is_early</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pevent\">pevent</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#pev\">pev</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_reserve_bp_slot\">dbg_reserve_bp_slot</a>(*<a class=\"id\" href=\"#pevent\">pevent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pevent\">pevent</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#pev\">pev</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_release_bp_slot\">dbg_release_bp_slot</a>(*<a class=\"id\" href=\"#pevent\">pevent</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#hw_break_release_slot\">hw_break_release_slot</a>(int <a class=\"id\" href=\"#breakno\">breakno</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> **<a class=\"id\" href=\"#pevent\">pevent</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_is_early\">dbg_is_early</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pevent\">pevent</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#pev\">pev</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_release_bp_slot\">dbg_release_bp_slot</a>(*<a class=\"id\" href=\"#pevent\">pevent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The debugger is responisble for handing the retry on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * remove failure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#kgdb_remove_hw_break\">kgdb_remove_hw_break</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#len\">len</a>, enum <a class=\"id\" href=\"#kgdb_bptype\">kgdb_bptype</a> <a class=\"id\" href=\"#bptype\">bptype</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#addr\">addr</a> && <a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#enabled\">enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hw_break_release_slot\">hw_break_release_slot</a>(<a class=\"id\" href=\"#i\">i</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Cannot remove hw breakpoint at %lx\\n\", <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#enabled\">enabled</a> = 0;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kgdb_remove_all_hw_break\">kgdb_remove_all_hw_break</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#enabled\">enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = *<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pev\">pev</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#disabled\">disabled</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_is_early\">dbg_is_early</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_dr7\">early_dr7</a> &= ~<a class=\"id\" href=\"#encode_dr7\">encode_dr7</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_uninstall_hw_breakpoint\">arch_uninstall_hw_breakpoint</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#disabled\">disabled</a> = 1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#kgdb_set_hw_break\">kgdb_set_hw_break</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#len\">len</a>, enum <a class=\"id\" href=\"#kgdb_bptype\">kgdb_bptype</a> <a class=\"id\" href=\"#bptype\">bptype</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#enabled\">enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#bptype\">bptype</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BP_HARDWARE_BREAKPOINT\">BP_HARDWARE_BREAKPOINT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#X86_BREAKPOINT_EXECUTE\">X86_BREAKPOINT_EXECUTE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BP_WRITE_WATCHPOINT\">BP_WRITE_WATCHPOINT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#X86_BREAKPOINT_WRITE\">X86_BREAKPOINT_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BP_ACCESS_WATCHPOINT\">BP_ACCESS_WATCHPOINT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#X86_BREAKPOINT_RW\">X86_BREAKPOINT_RW</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_1\">X86_BREAKPOINT_LEN_1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_2\">X86_BREAKPOINT_LEN_2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 4:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_4\">X86_BREAKPOINT_LEN_4</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>case 8:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#X86_BREAKPOINT_LEN_8\">X86_BREAKPOINT_LEN_8</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hw_break_reserve_slot\">hw_break_reserve_slot</a>(<a class=\"id\" href=\"#i\">i</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#enabled\">enabled</a> = 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_disable_hw_debug - Disable hardware debugging while we in kgdb.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@regs: Current &amp;struct pt_regs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function will be called if the particular architecture must</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>disable hardware debugging while it is processing gdb packets or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>handling exception.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kgdb_disable_hw_debug\">kgdb_disable_hw_debug</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Disable hardware debugging while we are in kgdb: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(0UL, 7);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#enabled\">enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_is_early\">dbg_is_early</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_dr7\">early_dr7</a> &= ~<a class=\"id\" href=\"#encode_dr7\">encode_dr7</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = *<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pev\">pev</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#disabled\">disabled</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_uninstall_hw_breakpoint\">arch_uninstall_hw_breakpoint</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#disabled\">disabled</a> = 1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_roundup_cpus - Get other CPUs into a holding pattern</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags: Current IRQ state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On SMP systems, we need to get the attention of the other CPUs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and get them be in a known state.  This should do what is needed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to get the other CPUs to call kgdb_wait(). Note that on some arches,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the NMI approach is not used for rounding up all the CPUs. For example,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in case of MIPS, smp_call_function() is used to roundup CPUs. In</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this case, we have to make sure that interrupts are enabled before</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>calling smp_call_function(). The argument to this function is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the flags that will be used when restoring the interrupts. There is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>local_irq_save() call before kgdb_roundup_cpus().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On non-SMP systems, this is not called.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kgdb_roundup_cpus\">kgdb_roundup_cpus</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_allbutself\">send_IPI_allbutself</a>(<a class=\"id\" href=\"#APIC_DM_NMI\">APIC_DM_NMI</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_arch_handle_exception - Handle architecture specific GDB packets.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@vector: The error vector of the exception that happened.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@signo: The signal number of the exception that happened.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@err_code: The error code of the exception that happened.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@remcom_in_buffer: The buffer of the packet we have read.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@remcom_out_buffer: The buffer of %BUFMAX bytes to write a packet into.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@regs: The &amp;struct pt_regs of the current process.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function MUST handle the 'c' and 's' command packets,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as well packets to set / remove a hardware breakpoint, if used.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If there are additional packets which the hardware needs to handle,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>they are handled here.  The code should return -1 if it wants to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>process more packets, and a %0 or %1 if it wants to exit from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb callback.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kgdb_arch_handle_exception\">kgdb_arch_handle_exception</a>(int <a class=\"id\" href=\"#e_vector\">e_vector</a>, int <a class=\"id\" href=\"#signo\">signo</a>, int <a class=\"id\" href=\"#err_code\">err_code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       char *<a class=\"id\" href=\"#remcomInBuffer\">remcomInBuffer</a>, char *<a class=\"id\" href=\"#remcomOutBuffer\">remcomOutBuffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#linux_regs\">linux_regs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#remcomInBuffer\">remcomInBuffer</a>[0]) {", 
"<span class=\"ts\"/>case 'c':", 
"<span class=\"ts\"/>case 's':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* try to read optional parameter, pc unchanged if no parm */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = &amp;<a class=\"id\" href=\"#remcomInBuffer\">remcomInBuffer</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_hex2long\">kgdb_hex2long</a>(&amp;<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linux_regs\">linux_regs</a>-><a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>case 'D':", 
"<span class=\"ts\"/>case 'k':", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* clear the trace bit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linux_regs\">linux_regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#kgdb_cpu_doing_single_step\">kgdb_cpu_doing_single_step</a>, -1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set the trace bit if we're stepping */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#remcomInBuffer\">remcomInBuffer</a>[0] == 's') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linux_regs\">linux_regs</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#kgdb_cpu_doing_single_step\">kgdb_cpu_doing_single_step</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_correct_hw_break\">kgdb_correct_hw_break</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* this means that we do not want to exit from the handler: */</span>", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#single_step_cont\">single_step_cont</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, struct <a class=\"id\" href=\"#die_args\">die_args</a> *<a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Single step exception from kernel space to user space so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * eat the exception and continue the process:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"KGDB: trap/step from kernel to user space, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"resuming...\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_arch_handle_exception\">kgdb_arch_handle_exception</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#trapnr\">trapnr</a>, <a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#signr\">signr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#err\">err</a>, \"c\", \"\", <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reset the BS bit in dr6 (pointed by args-&gt;err) to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * denote completion of processing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>(*(unsigned long *)<a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#err\">err</a>)) &= ~<a class=\"id\" href=\"#DR_STEP\">DR_STEP</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#was_in_debug_nmi\">was_in_debug_nmi</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>];", 
"", 
"static int <a class=\"id\" href=\"#__kgdb_notify\">__kgdb_notify</a>(struct <a class=\"id\" href=\"#die_args\">die_args</a> *<a class=\"id\" href=\"#args\">args</a>, unsigned long <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#regs\">regs</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DIE_NMI\">DIE_NMI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>) != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* KGDB CPU roundup */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_nmicallback\">kgdb_nmicallback</a>(<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>(), <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#was_in_debug_nmi\">was_in_debug_nmi</a>[<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>()] = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DIE_NMI_IPI\">DIE_NMI_IPI</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Just ignore, we will handle the roundup on DIE_NMI. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DIE_NMIUNKNOWN\">DIE_NMIUNKNOWN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#was_in_debug_nmi\">was_in_debug_nmi</a>[<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>()]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#was_in_debug_nmi\">was_in_debug_nmi</a>[<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>()] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DIE_NMIWATCHDOG\">DIE_NMIWATCHDOG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>) != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* KGDB CPU roundup: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_nmicallback\">kgdb_nmicallback</a>(<a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>(), <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Enter debugger: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DIE_DEBUG\">DIE_DEBUG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_cpu_doing_single_step\">kgdb_cpu_doing_single_step</a>) != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#single_step_cont\">single_step_cont</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_SINGLESTEP\">TIF_SINGLESTEP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This means a user thread is single stepping</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * a system call which should be ignored</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#user_mode\">user_mode</a>(<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_handle_exception\">kgdb_handle_exception</a>(<a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#trapnr\">trapnr</a>, <a class=\"id\" href=\"#args\">args</a>-><a class=\"id\" href=\"#signr\">signr</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must touch watchdog before return to normal operation */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#kgdb_ll_trap\">kgdb_ll_trap</a>(int <a class=\"id\" href=\"#cmd\">cmd</a>, const char *<a class=\"id\" href=\"#str\">str</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, long <a class=\"id\" href=\"#err\">err</a>, int <a class=\"id\" href=\"#trap\">trap</a>, int <a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#die_args\">die_args</a> <a class=\"id\" href=\"#args\">args</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#regs\">regs</a><span class=\"ts\"/>= <a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#str\">str</a><span class=\"ts\"/>= <a class=\"id\" href=\"#str\">str</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#err\">err</a><span class=\"ts\"/>= <a class=\"id\" href=\"#err\">err</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#trapnr\">trapnr</a><span class=\"ts\"/>= <a class=\"id\" href=\"#trap\">trap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#signr\">signr</a><span class=\"ts\"/>= <a class=\"id\" href=\"#sig\">sig</a>,", 
"", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kgdb_io_module_registered\">kgdb_io_module_registered</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__kgdb_notify\">__kgdb_notify</a>(&amp;<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#kgdb_notify\">kgdb_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>, unsigned long <a class=\"id\" href=\"#cmd\">cmd</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__kgdb_notify\">__kgdb_notify</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#kgdb_notifier\">kgdb_notifier</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kgdb_notify\">kgdb_notify</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Lowest-prio notifier priority, we want to be notified last:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#priority\">priority</a><span class=\"ts\"/>= -<a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_arch_init - Perform any architecture specific initalization.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function will handle the initalization of any architecture</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>specific callbacks.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kgdb_arch_init\">kgdb_arch_init</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#register_die_notifier\">register_die_notifier</a>(&amp;<a class=\"id\" href=\"#kgdb_notifier\">kgdb_notifier</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kgdb_hw_overflow_handler\">kgdb_hw_overflow_handler</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, int <a class=\"id\" href=\"#nmi\">nmi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_ll_trap\">kgdb_ll_trap</a>(<a class=\"id\" href=\"#DIE_DEBUG\">DIE_DEBUG</a>, \"debug\", <a class=\"id\" href=\"#regs\">regs</a>, 0, 0, <a class=\"id\" href=\"#SIGTRAP\">SIGTRAP</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#kgdb_arch_late\">kgdb_arch_late</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> <a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> **<a class=\"id\" href=\"#pevent\">pevent</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Pre-allocate the hw breakpoint structions in the non-atomic</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * portion of kgdb because this operation requires mutexs to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * complete.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hw_breakpoint_init\">hw_breakpoint_init</a>(&amp;<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_addr\">bp_addr</a> = (unsigned long)<a class=\"id\" href=\"#kgdb_arch_init\">kgdb_arch_init</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_len\">bp_len</a> = <a class=\"id\" href=\"#HW_BREAKPOINT_LEN_1\">HW_BREAKPOINT_LEN_1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_type\">bp_type</a> = <a class=\"id\" href=\"#HW_BREAKPOINT_W\">HW_BREAKPOINT_W</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#disabled\">disabled</a> = 1;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pev\">pev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pev\">pev</a> = <a class=\"id\" href=\"#register_wide_hw_breakpoint\">register_wide_hw_breakpoint</a>(&amp;<a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pev\">pev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"kgdb: Could not allocate hw\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"breakpoints\\nDisabling the kernel debugger\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pev\">pev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_arch_exit\">kgdb_arch_exit</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pevent\">pevent</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pev\">pev</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pevent\">pevent</a>[0]-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#sample_period\">sample_period</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pevent\">pevent</a>[0]-><a class=\"id\" href=\"#overflow_handler\">overflow_handler</a> = <a class=\"id\" href=\"#kgdb_hw_overflow_handler\">kgdb_hw_overflow_handler</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pevent\">pevent</a>[0]-><a class=\"id\" href=\"#destroy\">destroy</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pevent\">pevent</a>[0]-><a class=\"id\" href=\"#destroy\">destroy</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_bp_slot\">release_bp_slot</a>(*<a class=\"id\" href=\"#pevent\">pevent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_arch_exit - Perform any architecture specific uninitalization.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function will handle the uninitalization of any architecture</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>specific callbacks, for dynamic registration and unregistration.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kgdb_arch_exit\">kgdb_arch_exit</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pev\">pev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_wide_hw_breakpoint\">unregister_wide_hw_breakpoint</a>(<a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pev\">pev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#breakinfo\">breakinfo</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#pev\">pev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_die_notifier\">unregister_die_notifier</a>(&amp;<a class=\"id\" href=\"#kgdb_notifier\">kgdb_notifier</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_skipexception - Bail out of KGDB when we've been triggered.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@exception: Exception vector number</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@regs: Current &amp;struct pt_regs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On some architectures we need to skip a breakpoint exception when</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it occurs after a breakpoint has been removed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Skip an int3 exception when it occurs after a breakpoint has been</span>", 
"<span class=\"comment\"> * removed. Backtrack eip by 1 since the int3 would have caused it to</span>", 
"<span class=\"comment\"> * increment by 1.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kgdb_skipexception\">kgdb_skipexception</a>(int <a class=\"id\" href=\"#exception\">exception</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#exception\">exception</a> == 3 && <a class=\"id\" href=\"#kgdb_isremovedbreak\">kgdb_isremovedbreak</a>(<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> -= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#kgdb_arch_pc\">kgdb_arch_pc</a>(int <a class=\"id\" href=\"#exception\">exception</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#exception\">exception</a> == 3)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#instruction_pointer\">instruction_pointer</a>(<a class=\"id\" href=\"#regs\">regs</a>) - 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#instruction_pointer\">instruction_pointer</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#kgdb_arch_set_pc\">kgdb_arch_set_pc</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#ip\">ip</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#ip\">ip</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#kgdb_arch\">kgdb_arch</a> <a class=\"id\" href=\"#arch_kgdb_ops\">arch_kgdb_ops</a> = {", 
"<span class=\"ts\"/><span class=\"comment\">/* Breakpoint instruction: */</span>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#gdb_bpt_instr\">gdb_bpt_instr</a><span class=\"ts\"/><span class=\"ts\"/>= { 0xcc },", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#KGDB_HW_BREAKPOINT\">KGDB_HW_BREAKPOINT</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_hw_breakpoint\">set_hw_breakpoint</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kgdb_set_hw_break\">kgdb_set_hw_break</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#remove_hw_breakpoint\">remove_hw_breakpoint</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kgdb_remove_hw_break\">kgdb_remove_hw_break</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#remove_all_hw_break\">remove_all_hw_break</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kgdb_remove_all_hw_break\">kgdb_remove_all_hw_break</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#correct_hw_break\">correct_hw_break</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kgdb_correct_hw_break\">kgdb_correct_hw_break</a>,", 
"};", 
];
xr_frag_insert('l/b6/b4d1f6105dbd385daa78d9f9e9bae835e68770.xr', __xr_tmp);
