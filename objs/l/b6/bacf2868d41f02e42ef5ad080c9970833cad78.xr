var __xr_tmp = [
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver_unregister\">driver_unregister</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#platform_driver_unregister\">platform_driver_unregister</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * platform_driver_probe - register driver for non-hotpluggable device</span>", 
"<span class=\"comment\"> * @drv: platform driver structure</span>", 
"<span class=\"comment\"> * @probe: the driver probe routine, probably from an __init section</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Use this instead of platform_driver_register() when you know the device</span>", 
"<span class=\"comment\"> * is not hotpluggable and has already been registered, and you want to</span>", 
"<span class=\"comment\"> * remove its run-once probe() infrastructure from memory after the driver</span>", 
"<span class=\"comment\"> * has bound to the device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * One typical use for this would be with drivers for controllers integrated</span>", 
"<span class=\"comment\"> * into system-on-chip processors, where the controller devices have been</span>", 
"<span class=\"comment\"> * configured as part of board setup.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns zero if the driver registered and bound to a device, else returns</span>", 
"<span class=\"comment\"> * a negative error code and with the driver not registered.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init_or_module\">__init_or_module</a> <a class=\"id\" href=\"#platform_driver_probe\">platform_driver_probe</a>(struct <a class=\"id\" href=\"#platform_driver\">platform_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#probe\">probe</a>)(struct <a class=\"id\" href=\"#platform_device\">platform_device</a> *))", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#code\">code</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* make sure driver won't have bind/unbind attributes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#suppress_bind_attrs\">suppress_bind_attrs</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* temporary section violation during probe() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#probe\">probe</a> = <a class=\"id\" href=\"#probe\">probe</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#code\">code</a> = <a class=\"id\" href=\"#platform_driver_register\">platform_driver_register</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fixup that section violation, being paranoid about code scanning</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the list of drivers in order to probe new devices.  Check to see</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the probe was successful, and make sure any forced probes of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * new devices fail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#platform_bus_type\">platform_bus_type</a>.<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#klist_drivers\">klist_drivers</a>.<a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#probe\">probe</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#code\">code</a> == 0 && <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#klist_devices\">klist_devices</a>.<a class=\"id\" href=\"#k_list\">k_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#probe\">probe</a> = <a class=\"id\" href=\"#platform_drv_probe_fail\">platform_drv_probe_fail</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#platform_bus_type\">platform_bus_type</a>.<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#klist_drivers\">klist_drivers</a>.<a class=\"id\" href=\"#k_lock\">k_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#code\">code</a> != <a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#platform_driver_unregister\">platform_driver_unregister</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#platform_driver_probe\">platform_driver_probe</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * platform_create_bundle - register driver and create corresponding device</span>", 
"<span class=\"comment\"> * @driver: platform driver structure</span>", 
"<span class=\"comment\"> * @probe: the driver probe routine, probably from an __init section</span>", 
"<span class=\"comment\"> * @res: set of resources that needs to be allocated for the device</span>", 
"<span class=\"comment\"> * @n_res: number of resources</span>", 
"<span class=\"comment\"> * @data: platform specific data for this platform device</span>", 
"<span class=\"comment\"> * @size: size of platform specific data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Use this in legacy-style modules that probe hardware directly and</span>", 
"<span class=\"comment\"> * register a single platform device and corresponding platform driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns &amp;struct platform_device pointer on success, or ERR_PTR() on error.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#platform_device\">platform_device</a> * <a class=\"id\" href=\"#__init_or_module\">__init_or_module</a> <a class=\"id\" href=\"#platform_create_bundle\">platform_create_bundle</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#platform_driver\">platform_driver</a> *<a class=\"id\" href=\"#driver\">driver</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#probe\">probe</a>)(struct <a class=\"id\" href=\"#platform_device\">platform_device</a> *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a>, unsigned int <a class=\"id\" href=\"#n_res\">n_res</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#platform_device\">platform_device</a> *<a class=\"id\" href=\"#pdev\">pdev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#platform_device_alloc\">platform_device_alloc</a>(<a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#driver\">driver</a>.<a class=\"id\" href=\"#name\">name</a>, -1);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pdev\">pdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#platform_device_add_resources\">platform_device_add_resources</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#n_res\">n_res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_pdev_put\">err_pdev_put</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#platform_device_add_data\">platform_device_add_data</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_pdev_put\">err_pdev_put</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#platform_device_add\">platform_device_add</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_pdev_put\">err_pdev_put</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#platform_driver_probe\">platform_driver_probe</a>(<a class=\"id\" href=\"#driver\">driver</a>, <a class=\"id\" href=\"#probe\">probe</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_pdev_del\">err_pdev_del</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pdev\">pdev</a>;", 
"", 
"<a class=\"id\" href=\"#err_pdev_del\">err_pdev_del</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#platform_device_del\">platform_device_del</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<a class=\"id\" href=\"#err_pdev_put\">err_pdev_put</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#platform_device_put\">platform_device_put</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#platform_create_bundle\">platform_create_bundle</a>);", 
"", 
"<span class=\"comment\">/* modalias support enables more hands-off userspace setup:</span>", 
"<span class=\"comment\"> * (a) environment variable lets new-style hotplug events work once system is</span>", 
"<span class=\"comment\"> *     fully running:  \"modprobe $MODALIAS\"</span>", 
"<span class=\"comment\"> * (b) sysfs attribute lets new-style coldplug recover from hotplug events</span>", 
"<span class=\"comment\"> *     mishandled before system is fully running:  \"modprobe $(cat modalias)\"</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#modalias_show\">modalias_show</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> *<a class=\"id\" href=\"#a\">a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#platform_device\">platform_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#to_platform_device\">to_platform_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, \"platform:%s\\n\", <a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) ? (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1) : <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#device_attribute\">device_attribute</a> <a class=\"id\" href=\"#platform_dev_attrs\">platform_dev_attrs</a>[] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR_RO\">__ATTR_RO</a>(<a class=\"id\" href=\"#modalias\">modalias</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ATTR_NULL\">__ATTR_NULL</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#platform_uevent\">platform_uevent</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#kobj_uevent_env\">kobj_uevent_env</a> *<a class=\"id\" href=\"#env\">env</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#platform_device\">platform_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#to_platform_device\">to_platform_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Some devices have extra OF data and an OF-style MODALIAS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#of_device_uevent\">of_device_uevent</a>(<a class=\"id\" href=\"#dev\">dev</a>,<a class=\"id\" href=\"#env\">env</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_uevent_var\">add_uevent_var</a>(<a class=\"id\" href=\"#env\">env</a>, \"MODALIAS=%s%s\", <a class=\"id\" href=\"#PLATFORM_MODULE_PREFIX\">PLATFORM_MODULE_PREFIX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#id_entry\">id_entry</a>) ? <a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#id_entry\">id_entry</a>-><a class=\"id\" href=\"#name\">name</a> : <a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#platform_device_id\">platform_device_id</a> *<a class=\"id\" href=\"#platform_match_id\">platform_match_id</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#platform_device_id\">platform_device_id</a> *<a class=\"id\" href=\"#id\">id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#platform_device\">platform_device</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#name\">name</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#id\">id</a>-><a class=\"id\" href=\"#name\">name</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#id_entry\">id_entry</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * platform_match - bind platform device to platform driver.</span>", 
"<span class=\"comment\"> * @dev: device.</span>", 
"<span class=\"comment\"> * @drv: driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Platform device IDs are assumed to be encoded like this:</span>", 
"<span class=\"comment\"> * \"&lt;name&gt;&lt;instance&gt;\", where &lt;name&gt; is a short description of the type of</span>", 
"<span class=\"comment\"> * device, like \"pci\" or \"floppy\", and &lt;instance&gt; is the enumerated</span>", 
"<span class=\"comment\"> * instance of the device, like '0' or '42'.  Driver IDs are simply</span>", 
"<span class=\"comment\"> * \"&lt;name&gt;\".  So, extract the &lt;name&gt; from the platform_device structure,</span>", 
"<span class=\"comment\"> * and compare it against the name of the driver. Return whether they match</span>", 
"<span class=\"comment\"> * or not.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#platform_match\">platform_match</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#platform_device\">platform_device</a> *<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#to_platform_device\">to_platform_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#platform_driver\">platform_driver</a> *<a class=\"id\" href=\"#pdrv\">pdrv</a> = <a class=\"id\" href=\"#to_platform_driver\">to_platform_driver</a>(<a class=\"id\" href=\"#drv\">drv</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Attempt an OF style match first */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#of_driver_match_device\">of_driver_match_device</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#drv\">drv</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Then try to match against the id table */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pdrv\">pdrv</a>-><a class=\"id\" href=\"#id_table\">id_table</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#platform_match_id\">platform_match_id</a>(<a class=\"id\" href=\"#pdrv\">pdrv</a>-><a class=\"id\" href=\"#id_table\">id_table</a>, <a class=\"id\" href=\"#pdev\">pdev</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* fall-back to driver name match */</span>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#name\">name</a>) == 0);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_SLEEP\">CONFIG_PM_SLEEP</a>", 
"", 
"static int <a class=\"id\" href=\"#platform_legacy_suspend\">platform_legacy_suspend</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#mesg\">mesg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#platform_driver\">platform_driver</a> *<a class=\"id\" href=\"#pdrv\">pdrv</a> = <a class=\"id\" href=\"#to_platform_driver\">to_platform_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#platform_device\">platform_device</a> *<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#to_platform_device\">to_platform_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> && <a class=\"id\" href=\"#pdrv\">pdrv</a>-><a class=\"id\" href=\"#suspend\">suspend</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pdrv\">pdrv</a>-><a class=\"id\" href=\"#suspend\">suspend</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#mesg\">mesg</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#platform_legacy_resume\">platform_legacy_resume</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#platform_driver\">platform_driver</a> *<a class=\"id\" href=\"#pdrv\">pdrv</a> = <a class=\"id\" href=\"#to_platform_driver\">to_platform_driver</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#platform_device\">platform_device</a> *<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#to_platform_device\">to_platform_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> && <a class=\"id\" href=\"#pdrv\">pdrv</a>-><a class=\"id\" href=\"#resume\">resume</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pdrv\">pdrv</a>-><a class=\"id\" href=\"#resume\">resume</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#platform_pm_prepare\">platform_pm_prepare</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a> && <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#pm\">pm</a> && <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#prepare\">prepare</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#prepare\">prepare</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#platform_pm_complete\">platform_pm_complete</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a> && <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#pm\">pm</a> && <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#complete\">complete</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#complete\">complete</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"#else <span class=\"comment\">/* !CONFIG_PM_SLEEP */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#platform_pm_prepare\">platform_pm_prepare</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#platform_pm_complete\">platform_pm_complete</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_PM_SLEEP */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SUSPEND\">CONFIG_SUSPEND</a>", 
"", 
"int <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#platform_pm_suspend\">platform_pm_suspend</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#drv\">drv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#pm\">pm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#suspend\">suspend</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#suspend\">suspend</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#platform_legacy_suspend\">platform_legacy_suspend</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PMSG_SUSPEND\">PMSG_SUSPEND</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#platform_pm_suspend_noirq\">platform_pm_suspend_noirq</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#drv\">drv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#pm\">pm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#suspend_noirq\">suspend_noirq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#suspend_noirq\">suspend_noirq</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#platform_pm_resume\">platform_pm_resume</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_driver\">device_driver</a> *<a class=\"id\" href=\"#drv\">drv</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#drv\">drv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#pm\">pm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#resume\">resume</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#drv\">drv</a>-><a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#resume\">resume</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#platform_legacy_resume\">platform_legacy_resume</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
];
xr_frag_insert('l/b6/bacf2868d41f02e42ef5ad080c9970833cad78.xr', __xr_tmp);
