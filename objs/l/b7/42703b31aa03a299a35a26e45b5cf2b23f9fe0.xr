var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fs/direct-io.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2002, Linus Torvalds.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * O_DIRECT</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 04Jul2002<span class=\"ts\"/>Andrew Morton</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Initial version</span>", 
"<span class=\"comment\"> * 11Sep2002<span class=\"ts\"/>janetinc@us.ibm.com</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>added readv/writev support.</span>", 
"<span class=\"comment\"> * 29Oct2002<span class=\"ts\"/>Andrew Morton</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>rewrote bio_add_page() support.</span>", 
"<span class=\"comment\"> * 30Oct2002<span class=\"ts\"/>pbadari@us.ibm.com</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>added support for non-aligned IO.</span>", 
"<span class=\"comment\"> * 06Nov2002<span class=\"ts\"/>pbadari@us.ibm.com</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>added asynchronous IO support.</span>", 
"<span class=\"comment\"> * 21Jul2003<span class=\"ts\"/>nathans@sgi.com</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>added IO completion notifier.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#task_io_accounting_ops\">task_io_accounting_ops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rwsem\">rwsem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uio\">uio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * How many user pages to map in one call to get_user_pages().  This determines</span>", 
"<span class=\"comment\"> * the size of a structure on the stack.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DIO_PAGES\">DIO_PAGES</a><span class=\"ts\"/>64", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This code generally works in units of \"dio_blocks\".  A dio_block is</span>", 
"<span class=\"comment\"> * somewhere between the hard sector size and the filesystem block size.  it</span>", 
"<span class=\"comment\"> * is determined on a per-invocation basis.   When talking to the filesystem</span>", 
"<span class=\"comment\"> * we need to convert dio_blocks to fs_blocks by scaling the dio_block quantity</span>", 
"<span class=\"comment\"> * down by dio-&gt;blkfactor.  Similarly, fs-blocksize quantities are converted</span>", 
"<span class=\"comment\"> * to bio_block quantities by shifting left by blkfactor.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If blkfactor is zero then the user's request was aligned to the filesystem's</span>", 
"<span class=\"comment\"> * blocksize.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#dio\">dio</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* BIO submission state */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* bio under assembly */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rw\">rw</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#i_size\">i_size</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* i_size when submitted */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* doesn't change */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blkbits\">blkbits</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* doesn't change */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blkfactor\">blkfactor</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* When we're using an alignment which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   is finer than the filesystem's soft</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   blocksize, this specifies how much</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   finer.  blkfactor=2 means 1/4-block</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   alignment.  Does not change */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#start_zero_done\">start_zero_done</a>;<span class=\"ts\"/><span class=\"comment\">/* flag: sub-blocksize zeroing has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   been performed at the start of a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   write */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pages_in_io\">pages_in_io</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* approximate total IO pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* total request size (doesn't change)*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block_in_file\">block_in_file</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Current offset into the underlying</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   file in dio_block units. */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocks_available\">blocks_available</a>;<span class=\"ts\"/><span class=\"comment\">/* At block_in_file.  changes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#final_block_in_request\">final_block_in_request</a>;<span class=\"comment\">/* doesn't change */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#first_block_in_page\">first_block_in_page</a>;<span class=\"ts\"/><span class=\"comment\">/* doesn't change, Used only once */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#boundary\">boundary</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* prev block is at a boundary */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#reap_counter\">reap_counter</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* rate limit reaping */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* block mapping function */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio_iodone_t\">dio_iodone_t</a> *<a class=\"id\" href=\"#end_io\">end_io</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* IO completion function */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio_submit_t\">dio_submit_t</a> *<a class=\"id\" href=\"#submit_io\">submit_io</a>;<span class=\"ts\"/><span class=\"comment\">/* IO submition function */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#logical_offset_in_bio\">logical_offset_in_bio</a>;<span class=\"ts\"/><span class=\"comment\">/* current first logical block in bio */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#final_block_in_bio\">final_block_in_bio</a>;<span class=\"ts\"/><span class=\"comment\">/* current final block in bio + 1 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#next_block_for_io\">next_block_for_io</a>;<span class=\"ts\"/><span class=\"comment\">/* next block to be put under IO,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   in dio_blocks units */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> <a class=\"id\" href=\"#map_bh\">map_bh</a>;<span class=\"ts\"/><span class=\"comment\">/* last get_block() result */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Deferred addition of a page to the dio.  These variables are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * private to dio_send_cur_page(), submit_page_section() and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dio_bio_add_page().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#cur_page\">cur_page</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The page */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#cur_page_offset\">cur_page_offset</a>;<span class=\"ts\"/><span class=\"comment\">/* Offset into it, in bytes */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#cur_page_len\">cur_page_len</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Nr of bytes at cur_page_offset */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#cur_page_block\">cur_page_block</a>;<span class=\"ts\"/><span class=\"comment\">/* Where it starts */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#cur_page_fs_offset\">cur_page_fs_offset</a>;<span class=\"ts\"/><span class=\"comment\">/* Offset in file */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* BIO completion state */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#bio_lock\">bio_lock</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* protects BIO fields below */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#refcount\">refcount</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* direct_io_worker() and bios */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio_list\">bio_list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* singly linked via bi_private */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#waiter\">waiter</a>;<span class=\"ts\"/><span class=\"comment\">/* waiting task (NULL if none) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* AIO related stuff */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kiocb */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_async\">is_async</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* is IO async ? */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#io_error\">io_error</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* IO error in completion path */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#result\">result</a>;                 <span class=\"comment\">/* IO result */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Page fetching state. These variables belong to dio_refill_pages().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#curr_page\">curr_page</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* changes */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#total_pages\">total_pages</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* doesn't change */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#curr_user_address\">curr_user_address</a>;<span class=\"comment\">/* changes */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Page queue.  These variables belong to dio_refill_pages() and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dio_get_page().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#head\">head</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* next page to process */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#tail\">tail</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* last valid page + 1 */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#page_errors\">page_errors</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* errno from get_user_pages() */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pages[] (and any fields placed after it) are not zeroed out at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocation time.  Don't add new fields after pages[] unless you</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wish that they not be zeroed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#DIO_PAGES\">DIO_PAGES</a>];<span class=\"ts\"/><span class=\"comment\">/* page buffer */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * How many pages are in the queue?</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#dio_pages_present\">dio_pages_present</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#tail\">tail</a> - <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Go grab and pin some userspace pages.   Typically we'll get 64 at a time.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dio_refill_pages\">dio_refill_pages</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#total_pages\">total_pages</a> - <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#curr_page\">curr_page</a>, <a class=\"id\" href=\"#DIO_PAGES\">DIO_PAGES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user_pages_fast\">get_user_pages_fast</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#curr_user_address\">curr_user_address</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Where from? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* How many pages? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#rw\">rw</a> == <a class=\"id\" href=\"#READ\">READ</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Write to memory? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#pages\">pages</a>[0]);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Put results here */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0 && <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blocks_available\">blocks_available</a> && (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#rw\">rw</a> &amp; <a class=\"id\" href=\"#WRITE\">WRITE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#ZERO_PAGE\">ZERO_PAGE</a>(0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * A memory fault, but the filesystem has some outstanding</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mapped blocks.  We need to use those blocks up to avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * leaking stale data in the file.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#page_errors\">page_errors</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#page_errors\">page_errors</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_get\">page_cache_get</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#pages\">pages</a>[0] = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#head\">head</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#tail\">tail</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#curr_user_address\">curr_user_address</a> += <a class=\"id\" href=\"#ret\">ret</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#curr_page\">curr_page</a> += <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#head\">head</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;<span class=\"ts\"/>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get another userspace page.  Returns an ERR_PTR on error.  Pages are</span>", 
"<span class=\"comment\"> * buffered inside the dio so that we can call get_user_pages() against a</span>", 
"<span class=\"comment\"> * decent number of pages, less frequently.  To provide nicer use of the</span>", 
"<span class=\"comment\"> * L1 cache.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#dio_get_page\">dio_get_page</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio_pages_present\">dio_pages_present</a>(<a class=\"id\" href=\"#dio\">dio</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dio_refill_pages\">dio_refill_pages</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dio_pages_present\">dio_pages_present</a>(<a class=\"id\" href=\"#dio\">dio</a>) == 0);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#head\">head</a>++];", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dio_complete() - called when all DIO BIO I/O has been completed</span>", 
"<span class=\"comment\"> * @offset: the byte offset in the file of the completed operation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This releases locks as dictated by the locking type, lets interested parties</span>", 
"<span class=\"comment\"> * know that a DIO operation has completed, and calculates the resulting return</span>", 
"<span class=\"comment\"> * code for the operation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It lets the filesystem know if it registered an interest earlier via</span>", 
"<span class=\"comment\"> * get_block.  Pass the private field of the map buffer_head so that</span>", 
"<span class=\"comment\"> * filesystems can use it to hold additional state between get_block calls and</span>", 
"<span class=\"comment\"> * dio_complete.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dio_complete\">dio_complete</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_async\">is_async</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#transferred\">transferred</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * AIO submission can race with bio completion to get here while</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * expecting to have the last io completed by bio completion.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In that case -EIOCBQUEUED is in fact not an error we want</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to preserve through this call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EIOCBQUEUED\">EIOCBQUEUED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transferred\">transferred</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check for short read case */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#rw\">rw</a> == <a class=\"id\" href=\"#READ\">READ</a>) && ((<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#transferred\">transferred</a>) &gt; <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#i_size\">i_size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transferred\">transferred</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#i_size\">i_size</a> - <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#page_errors\">page_errors</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#io_error\">io_error</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#transferred\">transferred</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#end_io\">end_io</a> && <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#end_io\">end_io</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#transferred\">transferred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#map_bh\">map_bh</a>.<a class=\"id\" href=\"#b_private\">b_private</a>, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#is_async\">is_async</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#is_async\">is_async</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_complete\">aio_complete</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#ret\">ret</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DIO_LOCKING\">DIO_LOCKING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* lockdep: non-owner release */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read_non_owner\">up_read_non_owner</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_alloc_sem\">i_alloc_sem</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#dio_bio_complete\">dio_bio_complete</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Asynchronous IO callback. </span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dio_bio_end_aio\">dio_bio_end_aio</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#remaining\">remaining</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cleanup the bio */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio_bio_complete\">dio_bio_complete</a>(<a class=\"id\" href=\"#dio\">dio</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_lock\">bio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remaining\">remaining</a> = --<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#refcount\">refcount</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#remaining\">remaining</a> == 1 && <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#waiter\">waiter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#waiter\">waiter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_lock\">bio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#remaining\">remaining</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio_complete\">dio_complete</a>(<a class=\"id\" href=\"#dio\">dio</a>, <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_pos\">ki_pos</a>, 0, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The BIO completion handler simply queues the BIO up for the process-context</span>", 
"<span class=\"comment\"> * handler.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * During I/O bi_private points at the dio.  After I/O, bi_private is used to</span>", 
"<span class=\"comment\"> * implement a singly-linked list of completed BIOs, at dio-&gt;bio_list.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dio_bio_end_io\">dio_bio_end_io</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_lock\">bio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_list\">bio_list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_list\">bio_list</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#refcount\">refcount</a> == 1 && <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#waiter\">waiter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#waiter\">waiter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_lock\">bio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dio_end_io - handle the end io action for the given bio</span>", 
"<span class=\"comment\"> * @bio: The direct io bio thats being completed</span>", 
"<span class=\"comment\"> * @error: Error if there was one</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is meant to be called by any filesystem that uses their own dio_submit_t</span>", 
"<span class=\"comment\"> * so that the DIO specific endio actions are dealt with after the filesystem</span>", 
"<span class=\"comment\"> * has done it's completion work.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dio_end_io\">dio_end_io</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#is_async\">is_async</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio_bio_end_aio\">dio_bio_end_aio</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio_bio_end_io\">dio_bio_end_io</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dio_end_io\">dio_end_io</a>);", 
"", 
"static int", 
"<a class=\"id\" href=\"#dio_bio_alloc\">dio_bio_alloc</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>, struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#first_sector\">first_sector</a>, int <a class=\"id\" href=\"#nr_vecs\">nr_vecs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio_alloc\">bio_alloc</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#nr_vecs\">nr_vecs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a> = <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> = <a class=\"id\" href=\"#first_sector\">first_sector</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#is_async\">is_async</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_end_io\">bi_end_io</a> = <a class=\"id\" href=\"#dio_bio_end_aio\">dio_bio_end_aio</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_end_io\">bi_end_io</a> = <a class=\"id\" href=\"#dio_bio_end_io\">dio_bio_end_io</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#logical_offset_in_bio\">logical_offset_in_bio</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_fs_offset\">cur_page_fs_offset</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In the AIO read case we speculatively dirty the pages before starting IO.</span>", 
"<span class=\"comment\"> * During IO completion, any of these pages which happen to have been written</span>", 
"<span class=\"comment\"> * back will be redirtied by bio_check_pages_dirty().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * bios hold a dio reference between submit_bio and -&gt;end_io.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dio_bio_submit\">dio_bio_submit</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a> = <a class=\"id\" href=\"#dio\">dio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_lock\">bio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#refcount\">refcount</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_lock\">bio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#is_async\">is_async</a> && <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#rw\">rw</a> == <a class=\"id\" href=\"#READ\">READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_set_pages_dirty\">bio_set_pages_dirty</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#submit_io\">submit_io</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#submit_io\">submit_io</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#logical_offset_in_bio\">logical_offset_in_bio</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#submit_bio\">submit_bio</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#boundary\">boundary</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#logical_offset_in_bio\">logical_offset_in_bio</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Release any resources in case of a failure</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dio_cleanup\">dio_cleanup</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#dio_pages_present\">dio_pages_present</a>(<a class=\"id\" href=\"#dio\">dio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#dio_get_page\">dio_get_page</a>(<a class=\"id\" href=\"#dio\">dio</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wait for the next BIO to complete.  Remove it and return it.  NULL is</span>", 
"<span class=\"comment\"> * returned once all BIOs have been completed.  This must only be called once</span>", 
"<span class=\"comment\"> * all bios have been issued so that dio-&gt;refcount can only decrease.  This</span>", 
"<span class=\"comment\"> * requires that that the caller hold a reference on the dio.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#dio_await_one\">dio_await_one</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_lock\">bio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait as long as the list is empty and there are bios in flight.  bio</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * completion drops the count, maybe adds to the list, and wakes while</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * holding the bio_lock so we don't need set_current_state()'s barrier</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and can call it after testing our condition.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#refcount\">refcount</a> &gt; 1 && <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_list\">bio_list</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#waiter\">waiter</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_lock\">bio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_schedule\">io_schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* wake up sets us TASK_RUNNING */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_lock\">bio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#waiter\">waiter</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_list\">bio_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_list\">bio_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_list\">bio_list</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_lock\">bio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Process one completed BIO.  No locks are held.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dio_bio_complete\">dio_bio_complete</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#uptodate\">uptodate</a> = <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#BIO_UPTODATE\">BIO_UPTODATE</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvec\">bvec</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#page_no\">page_no</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#uptodate\">uptodate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#io_error\">io_error</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#is_async\">is_async</a> && <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#rw\">rw</a> == <a class=\"id\" href=\"#READ\">READ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_check_pages_dirty\">bio_check_pages_dirty</a>(<a class=\"id\" href=\"#bio\">bio</a>);<span class=\"ts\"/><span class=\"comment\">/* transfers ownership */</span>", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#page_no\">page_no</a> = 0; <a class=\"id\" href=\"#page_no\">page_no</a> &lt; <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a>; <a class=\"id\" href=\"#page_no\">page_no</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#bvec\">bvec</a>[<a class=\"id\" href=\"#page_no\">page_no</a>].<a class=\"id\" href=\"#bv_page\">bv_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#rw\">rw</a> == <a class=\"id\" href=\"#READ\">READ</a> && !<a class=\"id\" href=\"#PageCompound\">PageCompound</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_dirty_lock\">set_page_dirty_lock</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#uptodate\">uptodate</a> ? 0 : -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wait on and process all in-flight BIOs.  This must only be called once</span>", 
"<span class=\"comment\"> * all bios have been issued so that the refcount can only decrease.</span>", 
"<span class=\"comment\"> * This just waits for all bios to make it through dio_bio_complete.  IO</span>", 
"<span class=\"comment\"> * errors are propagated through dio-&gt;io_error and should be propagated via</span>", 
"<span class=\"comment\"> * dio_complete().</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dio_await_completion\">dio_await_completion</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#dio_await_one\">dio_await_one</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio_bio_complete\">dio_bio_complete</a>(<a class=\"id\" href=\"#dio\">dio</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A really large O_DIRECT read or write can generate a lot of BIOs.  So</span>", 
"<span class=\"comment\"> * to keep the memory consumption sane we periodically reap any completed BIOs</span>", 
"<span class=\"comment\"> * during the BIO generation phase.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This also helps to limit the peak amount of pinned userspace memory.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dio_bio_reap\">dio_bio_reap</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#reap_counter\">reap_counter</a>++ >= 64) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_list\">bio_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_lock\">bio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_list\">bio_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_list\">bio_list</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_private\">bi_private</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_lock\">bio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = <a class=\"id\" href=\"#dio_bio_complete\">dio_bio_complete</a>(<a class=\"id\" href=\"#dio\">dio</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#reap_counter\">reap_counter</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call into the fs to map some more disk blocks.  We record the current number</span>", 
"<span class=\"comment\"> * of available blocks at dio-&gt;blocks_available.  These are in units of the</span>", 
"<span class=\"comment\"> * fs blocksize, (1 &lt;&lt; inode-&gt;i_blkbits).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The fs is allowed to map lots of blocks at once.  If it wants to do that,</span>", 
"<span class=\"comment\"> * it uses the passed inode-relative block number as the file offset, as usual.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * get_block() is passed the number of i_blkbits-sized blocks which direct_io</span>", 
"<span class=\"comment\"> * has remaining to do.  The fs should not map more than this number of blocks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the fs has mapped a lot of blocks, it should populate bh-&gt;b_size to</span>", 
"<span class=\"comment\"> * indicate how much contiguous disk space has been made available at</span>", 
"<span class=\"comment\"> * bh-&gt;b_blocknr.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If *any* of the mapped blocks are new, then the fs must set buffer_new().</span>", 
"<span class=\"comment\"> * This isn't very efficient...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In the case of filesystem holes: the fs may return an arbitrarily-large</span>", 
"<span class=\"comment\"> * hole by returning an appropriate value in b_size and by clearing</span>", 
"<span class=\"comment\"> * buffer_mapped().  However the direct-io code will only process holes one</span>", 
"<span class=\"comment\"> * block at a time - it will repeatedly call get_block() as it walks the hole.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#get_more_blocks\">get_more_blocks</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#map_bh\">map_bh</a> = &amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#map_bh\">map_bh</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#fs_startblk\">fs_startblk</a>;<span class=\"ts\"/><span class=\"comment\">/* Into file, in filesystem-sized blocks */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#fs_count\">fs_count</a>;<span class=\"ts\"/><span class=\"comment\">/* Number of filesystem-sized blocks */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dio_count\">dio_count</a>;<span class=\"comment\">/* Number of dio_block-sized blocks */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#blkmask\">blkmask</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#create\">create</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there was a memory error and we've overwritten all the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mapped blocks then we can now return that memory error</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#page_errors\">page_errors</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a> >= <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#final_block_in_request\">final_block_in_request</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fs_startblk\">fs_startblk</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a> >> <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkfactor\">blkfactor</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio_count\">dio_count</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#final_block_in_request\">final_block_in_request</a> - <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fs_count\">fs_count</a> = <a class=\"id\" href=\"#dio_count\">dio_count</a> >> <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkfactor\">blkfactor</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blkmask\">blkmask</a> = (1 << <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkfactor\">blkfactor</a>) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dio_count\">dio_count</a> &amp; <a class=\"id\" href=\"#blkmask\">blkmask</a>)<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fs_count\">fs_count</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> = <a class=\"id\" href=\"#fs_count\">fs_count</a> << <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For writes inside i_size on a DIO_SKIP_HOLES filesystem we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * forbid block creations: only overwrites are permitted.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We will return early to the caller once we see an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unmapped buffer head returned, and the caller will fall</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * back to buffered I/O.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Otherwise the decision is left to the get_blocks method,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * which may decide to handle it or also return an unmapped</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * buffer head.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#create\">create</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#rw\">rw</a> &amp; <a class=\"id\" href=\"#WRITE\">WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DIO_SKIP_HOLES\">DIO_SKIP_HOLES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a> &lt; (<a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#inode\">inode</a>) >>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkbits\">blkbits</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#create\">create</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (*<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#get_block\">get_block</a>)(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#fs_startblk\">fs_startblk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>, <a class=\"id\" href=\"#create\">create</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * There is no bio.  Make one now.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dio_new_bio\">dio_new_bio</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#start_sector\">start_sector</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dio_bio_reap\">dio_bio_reap</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector\">sector</a> = <a class=\"id\" href=\"#start_sector\">start_sector</a> << (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkbits\">blkbits</a> - 9);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#pages_in_io\">pages_in_io</a>, <a class=\"id\" href=\"#bio_get_nr_vecs\">bio_get_nr_vecs</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#map_bh\">map_bh</a>.<a class=\"id\" href=\"#b_bdev\">b_bdev</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a> <= 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dio_bio_alloc\">dio_bio_alloc</a>(<a class=\"id\" href=\"#dio\">dio</a>, <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#map_bh\">map_bh</a>.<a class=\"id\" href=\"#b_bdev\">b_bdev</a>, <a class=\"id\" href=\"#sector\">sector</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#boundary\">boundary</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attempt to put the current chunk of 'cur_page' into the current BIO.  If</span>", 
"<span class=\"comment\"> * that was successful then update final_block_in_bio and take a ref against</span>", 
"<span class=\"comment\"> * the just-added page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return zero on success.  Non-zero means the caller needs to start a new BIO.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dio_bio_add_page\">dio_bio_add_page</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#bio_add_page\">bio_add_page</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page\">cur_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_len\">cur_page_len</a>, <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_offset\">cur_page_offset</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_len\">cur_page_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Decrement count only, if we are done with this page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_len\">cur_page_len</a> + <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_offset\">cur_page_offset</a>) == <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#pages_in_io\">pages_in_io</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_get\">page_cache_get</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page\">cur_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#final_block_in_bio\">final_block_in_bio</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_block\">cur_page_block</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_len\">cur_page_len</a> >> <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkbits\">blkbits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Put cur_page under IO.  The section of cur_page which is described by</span>", 
"<span class=\"comment\"> * cur_page_offset,cur_page_len is put into a BIO.  The section of cur_page</span>", 
"<span class=\"comment\"> * starts on-disk at cur_page_block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We take a ref against the page here (on behalf of its presence in the bio).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller of this function is responsible for removing cur_page from the</span>", 
"<span class=\"comment\"> * dio, and for dropping the refcount which came from that presence.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dio_send_cur_page\">dio_send_cur_page</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio\">bio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#cur_offset\">cur_offset</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_fs_offset\">cur_page_fs_offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#bio_next_offset\">bio_next_offset</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#logical_offset_in_bio\">logical_offset_in_bio</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * See whether this new request is contiguous with the old.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Btrfs cannot handl having logically non-contiguous requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * submitted.  For exmple if you have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Logical:  [0-4095][HOLE][8192-12287]</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Phyiscal: [0-4095]      [4096-8181]</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We cannot submit those pages together as one BIO.  So if our</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * current logical offset in the file does not equal what would</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be the next logical offset in the bio, submit the bio we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * have.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#final_block_in_bio\">final_block_in_bio</a> != <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_block\">cur_page_block</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cur_offset\">cur_offset</a> != <a class=\"id\" href=\"#bio_next_offset\">bio_next_offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio_bio_submit\">dio_bio_submit</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Submit now if the underlying fs is about to perform a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * metadata read</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#boundary\">boundary</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio_bio_submit\">dio_bio_submit</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio\">bio</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dio_new_bio\">dio_new_bio</a>(<a class=\"id\" href=\"#dio\">dio</a>, <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_block\">cur_page_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio_bio_add_page\">dio_bio_add_page</a>(<a class=\"id\" href=\"#dio\">dio</a>) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio_bio_submit\">dio_bio_submit</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dio_new_bio\">dio_new_bio</a>(<a class=\"id\" href=\"#dio\">dio</a>, <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_block\">cur_page_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dio_bio_add_page\">dio_bio_add_page</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ret\">ret</a> != 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * An autonomous function to put a chunk of a page under deferred IO.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller doesn't actually know (or care) whether this piece of page is in</span>", 
"<span class=\"comment\"> * a BIO, or is under IO or whatever.  We just take care of all possible </span>", 
"<span class=\"comment\"> * situations here.  The separation between the logic of do_direct_IO() and</span>", 
"<span class=\"comment\"> * that of submit_page_section() is important for clarity.  Please don't break.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The chunk of page starts on-disk at blocknr.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We perform deferred IO, by recording the last-submitted page inside our</span>", 
"<span class=\"comment\"> * private part of the dio structure.  If possible, we just expand the IO</span>", 
"<span class=\"comment\"> * across that page here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If that doesn't work out then we put the old page into the bio and add this</span>", 
"<span class=\"comment\"> * page to the dio instead.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#submit_page_section\">submit_page_section</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset\">offset</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#blocknr\">blocknr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#rw\">rw</a> &amp; <a class=\"id\" href=\"#WRITE\">WRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Read accounting is performed in submit_bio()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_io_account_write\">task_io_account_write</a>(<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Can we just grow the current page's presence in the dio?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<span class=\"ts\"/>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page\">cur_page</a> == <a class=\"id\" href=\"#page\">page</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_offset\">cur_page_offset</a> + <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_len\">cur_page_len</a> == <a class=\"id\" href=\"#offset\">offset</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_block\">cur_page_block</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_len\">cur_page_len</a> >> <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkbits\">blkbits</a>) == <a class=\"id\" href=\"#blocknr\">blocknr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_len\">cur_page_len</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If dio-&gt;boundary then we want to schedule the IO now to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * avoid metadata seeks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#boundary\">boundary</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dio_send_cur_page\">dio_send_cur_page</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page\">cur_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page\">cur_page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there's a deferred page already there then send it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page\">cur_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dio_send_cur_page\">dio_send_cur_page</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page\">cur_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page\">cur_page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_get\">page_cache_get</a>(<a class=\"id\" href=\"#page\">page</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* It is in dio */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page\">cur_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_offset\">cur_page_offset</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_len\">cur_page_len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_block\">cur_page_block</a> = <a class=\"id\" href=\"#blocknr\">blocknr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page_fs_offset\">cur_page_fs_offset</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a> << <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clean any dirty buffers in the blockdev mapping which alias newly-created</span>", 
"<span class=\"comment\"> * file blocks.  Only called for S_ISREG files - blockdevs do not set</span>", 
"<span class=\"comment\"> * buffer_new</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#clean_blockdev_aliases\">clean_blockdev_aliases</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#nblocks\">nblocks</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nblocks\">nblocks</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#map_bh\">map_bh</a>.<a class=\"id\" href=\"#b_size\">b_size</a> >> <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nblocks\">nblocks</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_underlying_metadata\">unmap_underlying_metadata</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#map_bh\">map_bh</a>.<a class=\"id\" href=\"#b_bdev\">b_bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#map_bh\">map_bh</a>.<a class=\"id\" href=\"#b_blocknr\">b_blocknr</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If we are not writing the entire block and get_block() allocated</span>", 
"<span class=\"comment\"> * the block for us, we need to fill-in the unused portion of the</span>", 
"<span class=\"comment\"> * block with zeros. This happens only if user-buffer, fileoffset or</span>", 
"<span class=\"comment\"> * io length is not filesystem block-size multiple.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * `end' is zero if we're doing the start of the IO, 1 at the end of the</span>", 
"<span class=\"comment\"> * IO.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dio_zero_block\">dio_zero_block</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>, int <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#dio_blocks_per_fs_block\">dio_blocks_per_fs_block</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a>;<span class=\"ts\"/><span class=\"comment\">/* In dio_blocks */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#this_chunk_bytes\">this_chunk_bytes</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#start_zero_done\">start_zero_done</a> = 1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkfactor\">blkfactor</a> || !<a class=\"id\" href=\"#buffer_new\">buffer_new</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#map_bh\">map_bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio_blocks_per_fs_block\">dio_blocks_per_fs_block</a> = 1 << <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkfactor\">blkfactor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a> &amp; (<a class=\"id\" href=\"#dio_blocks_per_fs_block\">dio_blocks_per_fs_block</a> - 1);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to zero out part of an fs block.  It is either at the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * beginning or the end of the fs block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a>) ", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a> = <a class=\"id\" href=\"#dio_blocks_per_fs_block\">dio_blocks_per_fs_block</a> - <a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_chunk_bytes\">this_chunk_bytes</a> = <a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a> << <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#ZERO_PAGE\">ZERO_PAGE</a>(0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#submit_page_section\">submit_page_section</a>(<a class=\"id\" href=\"#dio\">dio</a>, <a class=\"id\" href=\"#page\">page</a>, 0, <a class=\"id\" href=\"#this_chunk_bytes\">this_chunk_bytes</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#next_block_for_io\">next_block_for_io</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#next_block_for_io\">next_block_for_io</a> += <a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Walk the user pages, and the file, mapping blocks to disk and generating</span>", 
"<span class=\"comment\"> * a sequence of (page,offset,len,block) mappings.  These mappings are injected</span>", 
"<span class=\"comment\"> * into submit_page_section(), which takes care of the next stage of submission</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Direct IO against a blockdev is different from a file.  Because we can</span>", 
"<span class=\"comment\"> * happily perform page-sized but 512-byte aligned IOs.  It is important that</span>", 
"<span class=\"comment\"> * blockdev IO be able to have fine alignment and large sizes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So what we do is to permit the -&gt;get_block function to populate bh.b_size</span>", 
"<span class=\"comment\"> * with the size of IO which is permitted at this offset and this i_blkbits.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For best results, the blockdev should be set up with 512-byte i_blkbits and</span>", 
"<span class=\"comment\"> * it should set b_size to PAGE_SIZE or more inside get_block().  This gives</span>", 
"<span class=\"comment\"> * fine alignment but still allows this function to work in PAGE_SIZE units.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_direct_IO\">do_direct_IO</a>(struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned <a class=\"id\" href=\"#blkbits\">blkbits</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/>const unsigned <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> >> <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#block_in_page\">block_in_page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#map_bh\">map_bh</a> = &amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#map_bh\">map_bh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The I/O can start at any block offset within the first page */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_in_page\">block_in_page</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#first_block_in_page\">first_block_in_page</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a> &lt; <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#final_block_in_request\">final_block_in_request</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#dio_get_page\">dio_get_page</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#block_in_page\">block_in_page</a> &lt; <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#offset_in_page\">offset_in_page</a> = <a class=\"id\" href=\"#block_in_page\">block_in_page</a> << <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#this_chunk_bytes\">this_chunk_bytes</a>;<span class=\"ts\"/><span class=\"comment\">/* # of bytes mapped */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a>;<span class=\"ts\"/><span class=\"comment\">/* # of blocks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#u\">u</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blocks_available\">blocks_available</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Need to go and map some more disk</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#blkmask\">blkmask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dio_remainder\">dio_remainder</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_more_blocks\">get_more_blocks</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#map_bh\">map_bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#do_holes\">do_holes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blocks_available\">blocks_available</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> >> <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#next_block_for_io\">next_block_for_io</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a> << <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkfactor\">blkfactor</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_new\">buffer_new</a>(<a class=\"id\" href=\"#map_bh\">map_bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clean_blockdev_aliases\">clean_blockdev_aliases</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkfactor\">blkfactor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#do_holes\">do_holes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blkmask\">blkmask</a> = (1 << <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkfactor\">blkfactor</a>) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio_remainder\">dio_remainder</a> = (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a> &amp; <a class=\"id\" href=\"#blkmask\">blkmask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we are at the start of IO and that IO</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * starts partway into a fs-block,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * dio_remainder will be non-zero.  If the IO</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is a read then we can simply advance the IO</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * cursor to the first block which is to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * read.  But if the IO is a write and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * block was newly allocated we cannot do that;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the start of the fs block must be zeroed out</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * on-disk</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_new\">buffer_new</a>(<a class=\"id\" href=\"#map_bh\">map_bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#next_block_for_io\">next_block_for_io</a> += <a class=\"id\" href=\"#dio_remainder\">dio_remainder</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blocks_available\">blocks_available</a> -= <a class=\"id\" href=\"#dio_remainder\">dio_remainder</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#do_holes\">do_holes</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Handle holes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#map_bh\">map_bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#i_size_aligned\">i_size_aligned</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* AKPM: eargh, -ENOTBLK is a hack */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#rw\">rw</a> &amp; <a class=\"id\" href=\"#WRITE\">WRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOTBLK\">ENOTBLK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Be sure to account for a partial block as the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * last block in the file</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_aligned\">i_size_aligned</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#inode\">inode</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1 << <a class=\"id\" href=\"#blkbits\">blkbits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a> >=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_aligned\">i_size_aligned</a> >> <a class=\"id\" href=\"#blkbits\">blkbits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We hit eof */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zero_user\">zero_user</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#block_in_page\">block_in_page</a> << <a class=\"id\" href=\"#blkbits\">blkbits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1 << <a class=\"id\" href=\"#blkbits\">blkbits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_in_page\">block_in_page</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next_block\">next_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we're performing IO which has an alignment which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is finer than the underlying fs, go check to see if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we must zero out the start of this block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkfactor\">blkfactor</a> && !<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#start_zero_done\">start_zero_done</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio_zero_block\">dio_zero_block</a>(<a class=\"id\" href=\"#dio\">dio</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Work out, in this_chunk_blocks, how much disk we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * can add to this page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blocks_available\">blocks_available</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a> = (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#offset_in_page\">offset_in_page</a>) >> <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a> &gt; <a class=\"id\" href=\"#u\">u</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a> = <a class=\"id\" href=\"#u\">u</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#final_block_in_request\">final_block_in_request</a> - <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a> &gt; <a class=\"id\" href=\"#u\">u</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a> = <a class=\"id\" href=\"#u\">u</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_chunk_bytes\">this_chunk_bytes</a> = <a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a> << <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#this_chunk_bytes\">this_chunk_bytes</a> == 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#boundary\">boundary</a> = <a class=\"id\" href=\"#buffer_boundary\">buffer_boundary</a>(<a class=\"id\" href=\"#map_bh\">map_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#submit_page_section\">submit_page_section</a>(<a class=\"id\" href=\"#dio\">dio</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#offset_in_page\">offset_in_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_chunk_bytes\">this_chunk_bytes</a>, <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#next_block_for_io\">next_block_for_io</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#next_block_for_io\">next_block_for_io</a> += <a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a> += <a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_in_page\">block_in_page</a> += <a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blocks_available\">blocks_available</a> -= <a class=\"id\" href=\"#this_chunk_blocks\">this_chunk_blocks</a>;", 
"<a class=\"id\" href=\"#next_block\">next_block</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a> &gt; <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#final_block_in_request\">final_block_in_request</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a> == <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#final_block_in_request\">final_block_in_request</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Drop the ref which was taken in get_user_pages() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_in_page\">block_in_page</a> = 0;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Releases both i_mutex and i_alloc_sem</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#direct_io_worker\">direct_io_worker</a>(int <a class=\"id\" href=\"#rw\">rw</a>, struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, ", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, ", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blkbits\">blkbits</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> <a class=\"id\" href=\"#get_block\">get_block</a>, <a class=\"id\" href=\"#dio_iodone_t\">dio_iodone_t</a> <a class=\"id\" href=\"#end_io\">end_io</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio_submit_t\">dio_submit_t</a> <a class=\"id\" href=\"#submit_io\">submit_io</a>, struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#user_addr\">user_addr</a>; ", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#seg\">seg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#rw\">rw</a> = <a class=\"id\" href=\"#rw\">rw</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkbits\">blkbits</a> = <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkfactor\">blkfactor</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a> - <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a> = <a class=\"id\" href=\"#offset\">offset</a> >> <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#get_block\">get_block</a> = <a class=\"id\" href=\"#get_block\">get_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#end_io\">end_io</a> = <a class=\"id\" href=\"#end_io\">end_io</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#submit_io\">submit_io</a> = <a class=\"id\" href=\"#submit_io\">submit_io</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#final_block_in_bio\">final_block_in_bio</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#next_block_for_io\">next_block_for_io</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#iocb\">iocb</a> = <a class=\"id\" href=\"#iocb\">iocb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#i_size\">i_size</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_lock\">bio_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#refcount\">refcount</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In case of non-aligned buffers, we may need 2 more</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pages since we need to zero out first and last block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#blkfactor\">blkfactor</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#pages_in_io\">pages_in_io</a> = 2;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#seg\">seg</a> = 0; <a class=\"id\" href=\"#seg\">seg</a> &lt; <a class=\"id\" href=\"#nr_segs\">nr_segs</a>; <a class=\"id\" href=\"#seg\">seg</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user_addr\">user_addr</a> = (unsigned long)<a class=\"id\" href=\"#iov\">iov</a>[<a class=\"id\" href=\"#seg\">seg</a>].<a class=\"id\" href=\"#iov_base\">iov_base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#pages_in_io\">pages_in_io</a> +=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#user_addr\">user_addr</a>+<a class=\"id\" href=\"#iov\">iov</a>[<a class=\"id\" href=\"#seg\">seg</a>].<a class=\"id\" href=\"#iov_len\">iov_len</a> +<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>-1)/<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>- <a class=\"id\" href=\"#user_addr\">user_addr</a>/<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#seg\">seg</a> = 0; <a class=\"id\" href=\"#seg\">seg</a> &lt; <a class=\"id\" href=\"#nr_segs\">nr_segs</a>; <a class=\"id\" href=\"#seg\">seg</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#user_addr\">user_addr</a> = (unsigned long)<a class=\"id\" href=\"#iov\">iov</a>[<a class=\"id\" href=\"#seg\">seg</a>].<a class=\"id\" href=\"#iov_base\">iov_base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#iov\">iov</a>[<a class=\"id\" href=\"#seg\">seg</a>].<a class=\"id\" href=\"#iov_len\">iov_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Index into the first page of the first block */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#first_block_in_page\">first_block_in_page</a> = (<a class=\"id\" href=\"#user_addr\">user_addr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>) >> <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#final_block_in_request\">final_block_in_request</a> = <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#bytes\">bytes</a> >> <a class=\"id\" href=\"#blkbits\">blkbits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Page fetching state */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#head\">head</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#tail\">tail</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#curr_page\">curr_page</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#total_pages\">total_pages</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#user_addr\">user_addr</a> &amp; (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>-1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#total_pages\">total_pages</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> -= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - (<a class=\"id\" href=\"#user_addr\">user_addr</a> &amp; (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#total_pages\">total_pages</a> += (<a class=\"id\" href=\"#bytes\">bytes</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1) / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#curr_user_address\">curr_user_address</a> = <a class=\"id\" href=\"#user_addr\">user_addr</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_direct_IO\">do_direct_IO</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#result\">result</a> += <a class=\"id\" href=\"#iov\">iov</a>[<a class=\"id\" href=\"#seg\">seg</a>].<a class=\"id\" href=\"#iov_len\">iov_len</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#final_block_in_request\">final_block_in_request</a> - <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#block_in_file\">block_in_file</a>) <<", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blkbits\">blkbits</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio_cleanup\">dio_cleanup</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} <span class=\"comment\">/* end iovec loop */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ENOTBLK\">ENOTBLK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The remaining part of the request will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be handled by buffered I/O when we return</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There may be some unwritten disk at the end of a part-written</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fs-block-sized block.  Go zero that now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio_zero_block\">dio_zero_block</a>(<a class=\"id\" href=\"#dio\">dio</a>, 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page\">cur_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = <a class=\"id\" href=\"#dio_send_cur_page\">dio_send_cur_page</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page\">cur_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#cur_page\">cur_page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio_bio_submit\">dio_bio_submit</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is possible that, we return short IO due to end of file.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In that case, we need to release all the pages we got hold on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio_cleanup\">dio_cleanup</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * All block lookups have been performed. For READ requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we can let i_mutex go now that its achieved its purpose</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of protecting us from looking up uninitialized blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rw\">rw</a> == <a class=\"id\" href=\"#READ\">READ</a> && (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DIO_LOCKING\">DIO_LOCKING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The only time we want to leave bios in flight is when a successful</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * partial aio read or full aio write have been setup.  In that case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bio completion will call aio_complete.  The only time it's safe to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * call aio_complete is when we return -EIOCBQUEUED, so we key on that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This had *better* be the only place that raises -EIOCBQUEUED.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EIOCBQUEUED\">EIOCBQUEUED</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#is_async\">is_async</a> && <a class=\"id\" href=\"#ret\">ret</a> == 0 && <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#result\">result</a> &&", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#rw\">rw</a> &amp; <a class=\"id\" href=\"#READ\">READ</a>) || (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#result\">result</a> == <a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#size\">size</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIOCBQUEUED\">EIOCBQUEUED</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#EIOCBQUEUED\">EIOCBQUEUED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* All IO is now issued, send it on its way */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_run_address_space\">blk_run_address_space</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio_await_completion\">dio_await_completion</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sync will always be dropping the final ref and completing the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * operation.  AIO can if it was a broken operation described above or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in fact if all the bios race to complete before we get here.  In</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that case dio_complete() translates the EIOCBQUEUED into the proper</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return code that the caller will hand to aio_complete().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is managed by the bio_lock instead of being an atomic_t so that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * completion paths can drop their ref and use the remaining count to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * decide to wake the submission path atomically.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_lock\">bio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = --<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#refcount\">refcount</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#bio_lock\">bio_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret2\">ret2</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dio_complete\">dio_complete</a>(<a class=\"id\" href=\"#dio\">dio</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#EIOCBQUEUED\">EIOCBQUEUED</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is a library function for use by filesystem drivers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The locking rules are governed by the flags parameter:</span>", 
"<span class=\"comment\"> *  - if the flags value contains DIO_LOCKING we use a fancy locking</span>", 
"<span class=\"comment\"> *    scheme for dumb filesystems.</span>", 
"<span class=\"comment\"> *    For writes this function is called under i_mutex and returns with</span>", 
"<span class=\"comment\"> *    i_mutex held, for reads, i_mutex is not held on entry, but it is</span>", 
"<span class=\"comment\"> *    taken and dropped again before returning.</span>", 
"<span class=\"comment\"> *    For reads and writes i_alloc_sem is taken in shared mode and released</span>", 
"<span class=\"comment\"> *    on I/O completion (which may happen asynchronously after returning to</span>", 
"<span class=\"comment\"> *    the caller).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  - if the flags value does NOT contain DIO_LOCKING we don't use any</span>", 
"<span class=\"comment\"> *    internal locking but rather rely on the filesystem to synchronize</span>", 
"<span class=\"comment\"> *    direct I/O reads/writes versus each other and truncate.</span>", 
"<span class=\"comment\"> *    For reads and writes both i_mutex and i_alloc_sem are not held on</span>", 
"<span class=\"comment\"> *    entry and are never taken.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#__blockdev_direct_IO\">__blockdev_direct_IO</a>(int <a class=\"id\" href=\"#rw\">rw</a>, struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, ", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> <a class=\"id\" href=\"#get_block\">get_block</a>, <a class=\"id\" href=\"#dio_iodone_t\">dio_iodone_t</a> <a class=\"id\" href=\"#end_io\">end_io</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio_submit_t\">dio_submit_t</a> <a class=\"id\" href=\"#submit_io\">submit_io</a>,<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#seg\">seg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blkbits\">blkbits</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#bdev_blkbits\">bdev_blkbits</a> = 0;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocksize_mask\">blocksize_mask</a> = (1 << <a class=\"id\" href=\"#blkbits\">blkbits</a>) - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dio\">dio</a> *<a class=\"id\" href=\"#dio\">dio</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rw\">rw</a> &amp; <a class=\"id\" href=\"#WRITE\">WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rw\">rw</a> = <a class=\"id\" href=\"#WRITE_ODIRECT_PLUG\">WRITE_ODIRECT_PLUG</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev_blkbits\">bdev_blkbits</a> = <a class=\"id\" href=\"#blksize_bits\">blksize_bits</a>(<a class=\"id\" href=\"#bdev_logical_block_size\">bdev_logical_block_size</a>(<a class=\"id\" href=\"#bdev\">bdev</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &amp; <a class=\"id\" href=\"#blocksize_mask\">blocksize_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#blkbits\">blkbits</a> = <a class=\"id\" href=\"#bdev_blkbits\">bdev_blkbits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocksize_mask\">blocksize_mask</a> = (1 << <a class=\"id\" href=\"#blkbits\">blkbits</a>) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &amp; <a class=\"id\" href=\"#blocksize_mask\">blocksize_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check the memory alignment.  Blocks cannot straddle pages */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#seg\">seg</a> = 0; <a class=\"id\" href=\"#seg\">seg</a> &lt; <a class=\"id\" href=\"#nr_segs\">nr_segs</a>; <a class=\"id\" href=\"#seg\">seg</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#iov\">iov</a>[<a class=\"id\" href=\"#seg\">seg</a>].<a class=\"id\" href=\"#iov_base\">iov_base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#iov\">iov</a>[<a class=\"id\" href=\"#seg\">seg</a>].<a class=\"id\" href=\"#iov_len\">iov_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#addr\">addr</a> &amp; <a class=\"id\" href=\"#blocksize_mask\">blocksize_mask</a>) || (<a class=\"id\" href=\"#size\">size</a> &amp; <a class=\"id\" href=\"#blocksize_mask\">blocksize_mask</a>))  {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#blkbits\">blkbits</a> = <a class=\"id\" href=\"#bdev_blkbits\">bdev_blkbits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocksize_mask\">blocksize_mask</a> = (1 << <a class=\"id\" href=\"#blkbits\">blkbits</a>) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#addr\">addr</a> &amp; <a class=\"id\" href=\"#blocksize_mask\">blocksize_mask</a>) || (<a class=\"id\" href=\"#size\">size</a> &amp; <a class=\"id\" href=\"#blocksize_mask\">blocksize_mask</a>))  ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#dio\">dio</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dio\">dio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Believe it or not, zeroing out the page array caused a .5%</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * performance regression in a database benchmark.  So, we take</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * care to only zero out what's needed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#dio\">dio</a>, 0, <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#dio\">dio</a>, <a class=\"id\" href=\"#pages\">pages</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DIO_LOCKING\">DIO_LOCKING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* watch out for a 0 len io from a tricksy fs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rw\">rw</a> == <a class=\"id\" href=\"#READ\">READ</a> && <a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* will be released by direct_io_worker */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#filemap_write_and_wait_range\">filemap_write_and_wait_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#end\">end</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dio\">dio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Will be released at I/O completion, possibly in a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * different thread.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read_non_owner\">down_read_non_owner</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_alloc_sem\">i_alloc_sem</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For file extending writes updating i_size before data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * writeouts complete can expose uninitialized blocks. So</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * even for AIO, we need to wait for i/o to complete before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * returning in this case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dio\">dio</a>-><a class=\"id\" href=\"#is_async\">is_async</a> = !<a class=\"id\" href=\"#is_sync_kiocb\">is_sync_kiocb</a>(<a class=\"id\" href=\"#iocb\">iocb</a>) && !((<a class=\"id\" href=\"#rw\">rw</a> &amp; <a class=\"id\" href=\"#WRITE\">WRITE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>)));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#direct_io_worker\">direct_io_worker</a>(<a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#blkbits\">blkbits</a>, <a class=\"id\" href=\"#get_block\">get_block</a>, <a class=\"id\" href=\"#end_io\">end_io</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#submit_io\">submit_io</a>, <a class=\"id\" href=\"#dio\">dio</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__blockdev_direct_IO\">__blockdev_direct_IO</a>);", 
];
xr_frag_insert('l/b7/42703b31aa03a299a35a26e45b5cf2b23f9fe0.xr', __xr_tmp);
