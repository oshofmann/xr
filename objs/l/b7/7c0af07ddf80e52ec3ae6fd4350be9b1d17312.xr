var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs_stack\">fs_stack</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* does _NOT_ require i_mutex to be held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function cannot be inlined since i_size_{read,write} is rather</span>", 
"<span class=\"comment\"> * heavy-weight on 32-bit systems</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#fsstack_copy_inode_size\">fsstack_copy_inode_size</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#i_size\">i_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blkcnt_t\">blkcnt_t</a> <a class=\"id\" href=\"#i_blocks\">i_blocks</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * i_size_read() includes its own seqlocking and protection from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * preemption (see include/linux/fs.h): we need nothing extra for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that here, and prefer to avoid nesting locks than attempt to keep</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * i_size and i_blocks in sync together.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i_size\">i_size</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#src\">src</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But if CONFIG_LBDAF (on 32-bit), we ought to make an effort to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * keep the two halves of i_blocks in sync despite SMP or PREEMPT -</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * though stat's generic_fillattr() doesn't bother, and we won't be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * applying quotas (where i_blocks does become important) at the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * upper level.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't actually know what locking is used at the lower level;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but if it's a filesystem that supports quotas, it will be using</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * i_lock as in inode_add_bytes().  tmpfs uses other locking, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * its 32-bit is (just) able to exceed 2TB i_size with the aid of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * holes; but its i_blocks cannot carry into the upper long without</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * almost 2TB swap - let's ignore that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (sizeof(<a class=\"id\" href=\"#i_blocks\">i_blocks</a>) &gt; sizeof(long))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i_blocks\">i_blocks</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a>;", 
"<span class=\"ts\"/>if (sizeof(<a class=\"id\" href=\"#i_blocks\">i_blocks</a>) &gt; sizeof(long))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If CONFIG_SMP or CONFIG_PREEMPT on 32-bit, it's vital for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fsstack_copy_inode_size() to hold some lock around</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * i_size_write(), otherwise i_size_read() may spin forever (see</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * include/linux/fs.h).  We don't necessarily hold i_mutex when this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is called, so take i_lock for that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * And if CONFIG_LBADF (on 32-bit), continue our effort to keep the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * two halves of i_blocks in sync despite SMP or PREEMPT: use i_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for that case too, and do both at once by combining the tests.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There is none of this locking overhead in the 64-bit case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (sizeof(<a class=\"id\" href=\"#i_size\">i_size</a>) &gt; sizeof(long) || sizeof(<a class=\"id\" href=\"#i_blocks\">i_blocks</a>) &gt; sizeof(long))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i_size_write\">i_size_write</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#i_size\">i_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a> = <a class=\"id\" href=\"#i_blocks\">i_blocks</a>;", 
"<span class=\"ts\"/>if (sizeof(<a class=\"id\" href=\"#i_size\">i_size</a>) &gt; sizeof(long) || sizeof(<a class=\"id\" href=\"#i_blocks\">i_blocks</a>) &gt; sizeof(long))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#fsstack_copy_inode_size\">fsstack_copy_inode_size</a>);", 
"", 
"<span class=\"comment\">/* copy all attributes */</span>", 
"void <a class=\"id\" href=\"#fsstack_copy_attr_all\">fsstack_copy_attr_all</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dest\">dest</a>, const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#fsstack_copy_attr_all\">fsstack_copy_attr_all</a>);", 
];
xr_frag_insert('l/b7/7c0af07ddf80e52ec3ae6fd4350be9b1d17312.xr', __xr_tmp);
