var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#confused\">confused</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#first_hole\">first_hole</a> << <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_add_page\">bio_add_page</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#length\">length</a>, 0) &lt; <a class=\"id\" href=\"#length\">length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#mpage_bio_submit\">mpage_bio_submit</a>(<a class=\"id\" href=\"#READ\">READ</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#alloc_new\">alloc_new</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#relative_block\">relative_block</a> = <a class=\"id\" href=\"#block_in_file\">block_in_file</a> - *<a class=\"id\" href=\"#first_logical_block\">first_logical_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nblocks\">nblocks</a> = <a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> >> <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#buffer_boundary\">buffer_boundary</a>(<a class=\"id\" href=\"#map_bh\">map_bh</a>) && <a class=\"id\" href=\"#relative_block\">relative_block</a> == <a class=\"id\" href=\"#nblocks\">nblocks</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#first_hole\">first_hole</a> != <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#mpage_bio_submit\">mpage_bio_submit</a>(<a class=\"id\" href=\"#READ\">READ</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#last_block_in_bio\">last_block_in_bio</a> = <a class=\"id\" href=\"#blocks\">blocks</a>[<a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> - 1];", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<a class=\"id\" href=\"#confused\">confused</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#mpage_bio_submit\">mpage_bio_submit</a>(<a class=\"id\" href=\"#READ\">READ</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/>        <a class=\"id\" href=\"#block_read_full_page\">block_read_full_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#get_block\">get_block</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mpage_readpages - populate an address space with some pages &amp; start reads against them</span>", 
"<span class=\"comment\"> * @mapping: the address_space</span>", 
"<span class=\"comment\"> * @pages: The address of a list_head which contains the target pages.  These</span>", 
"<span class=\"comment\"> *   pages have their -&gt;index populated and are otherwise uninitialised.</span>", 
"<span class=\"comment\"> *   The page at @pages-&gt;prev has the lowest file offset, and reads should be</span>", 
"<span class=\"comment\"> *   issued in @pages-&gt;prev to @pages-&gt;next order.</span>", 
"<span class=\"comment\"> * @nr_pages: The number of pages at *@pages</span>", 
"<span class=\"comment\"> * @get_block: The filesystem's block mapper function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function walks the pages and the blocks within each page, building and</span>", 
"<span class=\"comment\"> * emitting large BIOs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If anything unusual happens, such as:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * - encountering a page which has buffers</span>", 
"<span class=\"comment\"> * - encountering a page which has a non-hole after a hole</span>", 
"<span class=\"comment\"> * - encountering a page with non-contiguous blocks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * then this code just gives up and calls the buffer_head-based read function.</span>", 
"<span class=\"comment\"> * It does handle a page which has holes at the end - that is a common case:</span>", 
"<span class=\"comment\"> * the end-of-file on blocksize &lt; PAGE_CACHE_SIZE setups.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * BH_Boundary explanation:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There is a problem.  The mpage read code assembles several pages, gets all</span>", 
"<span class=\"comment\"> * their disk mappings, and then submits them all.  That's fine, but obtaining</span>", 
"<span class=\"comment\"> * the disk mappings may require I/O.  Reads of indirect blocks, for example.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So an mpage read of the first 16 blocks of an ext2 file will cause I/O to be</span>", 
"<span class=\"comment\"> * submitted in the following order:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>12 0 1 2 3 4 5 6 7 8 9 10 11 13 14 15 16</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * because the indirect block has to be read to get the mappings of blocks</span>", 
"<span class=\"comment\"> * 13,14,15,16.  Obviously, this impacts performance.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So what we do it to allow the filesystem's get_block() function to set</span>", 
"<span class=\"comment\"> * BH_Boundary when it maps block 11.  BH_Boundary says: mapping of the block</span>", 
"<span class=\"comment\"> * after this one will require I/O against a block which is probably close to</span>", 
"<span class=\"comment\"> * this one.  So you should push what I/O you have currently accumulated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This all causes the disk requests to be issued in the correct order.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#mpage_readpages\">mpage_readpages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pages\">pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> <a class=\"id\" href=\"#get_block\">get_block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#page_idx\">page_idx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#last_block_in_bio\">last_block_in_bio</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> <a class=\"id\" href=\"#map_bh\">map_bh</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#first_logical_block\">first_logical_block</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>.<a class=\"id\" href=\"#b_state\">b_state</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>.<a class=\"id\" href=\"#b_size\">b_size</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#page_idx\">page_idx</a> = 0; <a class=\"id\" href=\"#page_idx\">page_idx</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#page_idx\">page_idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pages\">pages</a>-><a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetchw\">prefetchw</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#add_to_page_cache_lru\">add_to_page_cache_lru</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#do_mpage_readpage\">do_mpage_readpage</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> - <a class=\"id\" href=\"#page_idx\">page_idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#last_block_in_bio\">last_block_in_bio</a>, &amp;<a class=\"id\" href=\"#map_bh\">map_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#first_logical_block\">first_logical_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_block\">get_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#pages\">pages</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpage_bio_submit\">mpage_bio_submit</a>(<a class=\"id\" href=\"#READ\">READ</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mpage_readpages\">mpage_readpages</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This isn't called much at all</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mpage_readpage\">mpage_readpage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> <a class=\"id\" href=\"#get_block\">get_block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#last_block_in_bio\">last_block_in_bio</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> <a class=\"id\" href=\"#map_bh\">map_bh</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#first_logical_block\">first_logical_block</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>.<a class=\"id\" href=\"#b_state\">b_state</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>.<a class=\"id\" href=\"#b_size\">b_size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#do_mpage_readpage\">do_mpage_readpage</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#page\">page</a>, 1, &amp;<a class=\"id\" href=\"#last_block_in_bio\">last_block_in_bio</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#map_bh\">map_bh</a>, &amp;<a class=\"id\" href=\"#first_logical_block\">first_logical_block</a>, <a class=\"id\" href=\"#get_block\">get_block</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpage_bio_submit\">mpage_bio_submit</a>(<a class=\"id\" href=\"#READ\">READ</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mpage_readpage\">mpage_readpage</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Writing is not so simple.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the page has buffers then they will be used for obtaining the disk</span>", 
"<span class=\"comment\"> * mapping.  We only support pages which are fully mapped-and-dirty, with a</span>", 
"<span class=\"comment\"> * special case for pages which are unmapped at the end: end-of-file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the page has no buffers (preferred) then the page is mapped here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If all blocks are found to be contiguous then the page can go into the</span>", 
"<span class=\"comment\"> * BIO.  Otherwise fall back to the mapping's writepage().</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * FIXME: This code wants an estimate of how many pages are still to be</span>", 
"<span class=\"comment\"> * written, so it can intelligently allocate a suitably-sized BIO.  For now,</span>", 
"<span class=\"comment\"> * just allocate full-size (16-page) BIOs.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#mpage_data\">mpage_data</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#last_block_in_bio\">last_block_in_bio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#use_writepage\">use_writepage</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__mpage_writepage\">__mpage_writepage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mpage_data\">mpage_data</a> *<a class=\"id\" href=\"#mpd\">mpd</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#mpd\">mpd</a>-><a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>const unsigned <a class=\"id\" href=\"#blkbits\">blkbits</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end_index\">end_index</a>;", 
"<span class=\"ts\"/>const unsigned <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> = <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> >> <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#last_block\">last_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block_in_file\">block_in_file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#blocks\">blocks</a>[<a class=\"id\" href=\"#MAX_BUF_PER_PAGE\">MAX_BUF_PER_PAGE</a>];", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#page_block\">page_block</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#first_unmapped\">first_unmapped</a> = <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#boundary\">boundary</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#boundary_block\">boundary_block</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#boundary_bdev\">boundary_bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> <a class=\"id\" href=\"#map_bh\">map_bh</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#i_size\">i_size</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If they're all mapped and dirty, do it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_block\">page_block</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#buffer_locked\">buffer_locked</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * unmapped dirty buffers are created by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * __set_page_dirty_buffers -&gt; mmapped data</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#confused\">confused</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_unmapped\">first_unmapped</a> == <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_unmapped\">first_unmapped</a> = <a class=\"id\" href=\"#page_block\">page_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_unmapped\">first_unmapped</a> != <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#confused\">confused</a>;<span class=\"ts\"/><span class=\"comment\">/* hole -&gt; non-hole */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>) || !<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#confused\">confused</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_block\">page_block</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a> != <a class=\"id\" href=\"#blocks\">blocks</a>[<a class=\"id\" href=\"#page_block\">page_block</a>-1] + 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#confused\">confused</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocks\">blocks</a>[<a class=\"id\" href=\"#page_block\">page_block</a>++] = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boundary\">boundary</a> = <a class=\"id\" href=\"#buffer_boundary\">buffer_boundary</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#boundary\">boundary</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boundary_block\">boundary_block</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boundary_bdev\">boundary_bdev</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while ((<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>) != <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_unmapped\">first_unmapped</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#page_is_mapped\">page_is_mapped</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Page has buffers, but they are all unmapped. The page was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * created by pagein or read over a hole which was handled by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * block_read_full_page().  If this address_space is also</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * using mpage_readpages then this can rarely happen.</span>", 
];
xr_frag_insert('l/b8/30e7a2d782ddea085b3dc60941b6ce9aa7c07a.xr', __xr_tmp);
