var __xr_tmp = [
"<span class=\"comment\">/* Upcall routine, designed to work as a key type and working through</span>", 
"<span class=\"comment\"> * /sbin/request-key to contact userspace when handling DNS queries.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See Documentation/networking/dns_resolver.txt</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   Copyright (c) 2007 Igor Mammedov</span>", 
"<span class=\"comment\"> *   Author(s): Igor Mammedov (niallain@gmail.com)</span>", 
"<span class=\"comment\"> *              Steve French (sfrench@us.ibm.com)</span>", 
"<span class=\"comment\"> *              Wang Lei (wang840925@gmail.com)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>David Howells (dhowells@redhat.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   The upcall wrapper used to make an arbitrary DNS query.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   This function requires the appropriate userspace tool dns.upcall to be</span>", 
"<span class=\"comment\"> *   installed and something like the following lines should be added to the</span>", 
"<span class=\"comment\"> *   /etc/request-key.conf file:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>create dns_resolver * * /sbin/dns.upcall %k</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   For example to use this module to query AFSDB RR:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>create dns_resolver afsdb:* * /sbin/dns.afsdb %k</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   This library is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *   it under the terms of the GNU Lesser General Public License as published</span>", 
"<span class=\"comment\"> *   by the Free Software Foundation; either version 2.1 of the License, or</span>", 
"<span class=\"comment\"> *   (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   This library is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *   but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See</span>", 
"<span class=\"comment\"> *   the GNU Lesser General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   You should have received a copy of the GNU Lesser General Public License</span>", 
"<span class=\"comment\"> *   along with this library; if not, write to the Free Software</span>", 
"<span class=\"comment\"> *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dns_resolver\">dns_resolver</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#keys\">keys</a>/<a class=\"id\" href=\"#dns_resolver\">dns_resolver</a>-<a class=\"id\" href=\"#type\">type</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#keys\">keys</a>/<a class=\"id\" href=\"#user\">user</a>-<a class=\"id\" href=\"#type\">type</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dns_query - Query the DNS</span>", 
"<span class=\"comment\"> * @type: Query type (or NULL for straight host-&gt;IP lookup)</span>", 
"<span class=\"comment\"> * @name: Name to look up</span>", 
"<span class=\"comment\"> * @namelen: Length of name</span>", 
"<span class=\"comment\"> * @options: Request options (or NULL if no options)</span>", 
"<span class=\"comment\"> * @_result: Where to place the returned data.</span>", 
"<span class=\"comment\"> * @_expiry: Where to store the result expiry time (or NULL)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The data will be returned in the pointer at *result, and the caller is</span>", 
"<span class=\"comment\"> * responsible for freeing it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The description should be of the form \"[&lt;query_type&gt;:]&lt;domain_name&gt;\", and</span>", 
"<span class=\"comment\"> * the options need to be appropriate for the query type requested.  If no</span>", 
"<span class=\"comment\"> * query_type is given, then the query is a straight hostname to IP address</span>", 
"<span class=\"comment\"> * lookup.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The DNS resolution lookup is performed by upcalling to userspace by way of</span>", 
"<span class=\"comment\"> * requesting a key of type dns_resolver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the size of the result on success, -ve error code otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dns_query\">dns_query</a>(const char *<a class=\"id\" href=\"#type\">type</a>, const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#namelen\">namelen</a>,", 
"<span class=\"ts\"/>      const char *<a class=\"id\" href=\"#options\">options</a>, char **<a class=\"id\" href=\"#_result\">_result</a>, <a class=\"id\" href=\"#time_t\">time_t</a> *<a class=\"id\" href=\"#_expiry\">_expiry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#rkey\">rkey</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#user_key_payload\">user_key_payload</a> *<a class=\"id\" href=\"#upayload\">upayload</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#saved_cred\">saved_cred</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#typelen\">typelen</a>, <a class=\"id\" href=\"#desclen\">desclen</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#desc\">desc</a>, *<a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kenter\">kenter</a>(\"%s,%*.*s,%zu,%s\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#type\">type</a>, (int)<a class=\"id\" href=\"#namelen\">namelen</a>, (int)<a class=\"id\" href=\"#namelen\">namelen</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#namelen\">namelen</a>, <a class=\"id\" href=\"#options\">options</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#name\">name</a> || <a class=\"id\" href=\"#namelen\">namelen</a> == 0 || !<a class=\"id\" href=\"#_result\">_result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* construct the query key description as \"[&lt;type&gt;:]&lt;name&gt;\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#typelen\">typelen</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desclen\">desclen</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#typelen\">typelen</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#typelen\">typelen</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desclen\">desclen</a> += <a class=\"id\" href=\"#typelen\">typelen</a> + 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#namelen\">namelen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#namelen\">namelen</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#namelen\">namelen</a> &lt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desclen\">desclen</a> += <a class=\"id\" href=\"#namelen\">namelen</a> + 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#desclen\">desclen</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#typelen\">typelen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> += <a class=\"id\" href=\"#typelen\">typelen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a>++ = ':';", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#namelen\">namelen</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> += <a class=\"id\" href=\"#namelen\">namelen</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#cp\">cp</a> = '\\0';", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#options\">options</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#options\">options</a> = \"\";", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"call request_key(,%s,%s)\", <a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#options\">options</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* make the upcall, using special credentials to prevent the use of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * add_key() to preinstall malicious redirections</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saved_cred\">saved_cred</a> = <a class=\"id\" href=\"#override_creds\">override_creds</a>(<a class=\"id\" href=\"#dns_resolver_cache\">dns_resolver_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rkey\">rkey</a> = <a class=\"id\" href=\"#request_key\">request_key</a>(&amp;<a class=\"id\" href=\"#key_type_dns_resolver\">key_type_dns_resolver</a>, <a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#options\">options</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#revert_creds\">revert_creds</a>(<a class=\"id\" href=\"#saved_cred\">saved_cred</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#desc\">desc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#rkey\">rkey</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#rkey\">rkey</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#rkey\">rkey</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rkey\">rkey</a>-><a class=\"id\" href=\"#perm\">perm</a> |= <a class=\"id\" href=\"#KEY_USR_VIEW\">KEY_USR_VIEW</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#key_validate\">key_validate</a>(<a class=\"id\" href=\"#rkey\">rkey</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#put\">put</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the DNS server gave an error, return that to the caller */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rkey\">rkey</a>-><a class=\"id\" href=\"#type_data\">type_data</a>.<a class=\"id\" href=\"#x\">x</a>[0];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#put\">put</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#upayload\">upayload</a> = <a class=\"id\" href=\"#rcu_dereference_protected\">rcu_dereference_protected</a>(<a class=\"id\" href=\"#rkey\">rkey</a>-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#lockdep_is_held\">lockdep_is_held</a>(&amp;<a class=\"id\" href=\"#rkey\">rkey</a>-><a class=\"id\" href=\"#sem\">sem</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#upayload\">upayload</a>-><a class=\"id\" href=\"#datalen\">datalen</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#_result\">_result</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#len\">len</a> + 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#_result\">_result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#put\">put</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(*<a class=\"id\" href=\"#_result\">_result</a>, <a class=\"id\" href=\"#upayload\">upayload</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#len\">len</a> + 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#_expiry\">_expiry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#_expiry\">_expiry</a> = <a class=\"id\" href=\"#rkey\">rkey</a>-><a class=\"id\" href=\"#expiry\">expiry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<a class=\"id\" href=\"#put\">put</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#rkey\">rkey</a>-><a class=\"id\" href=\"#sem\">sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#rkey\">rkey</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kleave\">kleave</a>(\" = %d\", <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dns_query\">dns_query</a>);", 
];
xr_frag_insert('l/b8/81f451ddc965cdde4b9db6a4d90411f0552db4.xr', __xr_tmp);
