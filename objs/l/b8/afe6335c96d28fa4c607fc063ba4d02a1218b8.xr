var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/init/main.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  GK 2/5/95  -  Changed to support mounting root fs via NFS</span>", 
"<span class=\"comment\"> *  Added initrd &amp; change_root: Werner Almesberger &amp; Hans Lermen, Feb '96</span>", 
"<span class=\"comment\"> *  Moan early if gcc is old, avoiding bogus kernels - Paul Gortmaker, May '96</span>", 
"<span class=\"comment\"> *  Simplified starting of init:  Michael A. Griffith &lt;grif@acm.org&gt; </span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stackprotector\">stackprotector</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioport\">ioport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp_lock\">smp_lock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#initrd\">initrd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty\">tty</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmod\">kmod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#start_kernel\">start_kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#profile\">profile</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#moduleparam\">moduleparam</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpuset\">cpuset</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cgroup\">cgroup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#efi\">efi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tick\">tick</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#taskstats_kern\">taskstats_kern</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delayacct\">delayacct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rmap\">rmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempolicy\">mempolicy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#page_cgroup\">page_cgroup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debug_locks\">debug_locks</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugobjects\">debugobjects</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#lockdep\">lockdep</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmemleak\">kmemleak</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#signal\">signal</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kgdb\">kgdb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#async\">async</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmemcheck\">kmemcheck</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sfi\">sfi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#shmem_fs\">shmem_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#bugs\">bugs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#setup\">setup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#sections\">sections</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#kernel_init\">kernel_init</a>(void *);", 
"", 
"extern void <a class=\"id\" href=\"#init_IRQ\">init_IRQ</a>(void);", 
"extern void <a class=\"id\" href=\"#fork_init\">fork_init</a>(unsigned long);", 
"extern void <a class=\"id\" href=\"#mca_init\">mca_init</a>(void);", 
"extern void <a class=\"id\" href=\"#sbus_init\">sbus_init</a>(void);", 
"extern void <a class=\"id\" href=\"#prio_tree_init\">prio_tree_init</a>(void);", 
"extern void <a class=\"id\" href=\"#radix_tree_init\">radix_tree_init</a>(void);", 
"extern void <a class=\"id\" href=\"#free_initmem\">free_initmem</a>(void);", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_RODATA\">CONFIG_DEBUG_RODATA</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mark_rodata_ro\">mark_rodata_ro</a>(void) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TC\">CONFIG_TC</a>", 
"extern void <a class=\"id\" href=\"#tc_init\">tc_init</a>(void);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"enum <a class=\"id\" href=\"#system_states\">system_states</a> <a class=\"id\" href=\"#system_state\">system_state</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#system_state\">system_state</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Boot command-line arguments</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_INIT_ARGS\">MAX_INIT_ARGS</a> <a class=\"id\" href=\"#CONFIG_INIT_ENV_ARG_LIMIT\">CONFIG_INIT_ENV_ARG_LIMIT</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_INIT_ENVS\">MAX_INIT_ENVS</a> <a class=\"id\" href=\"#CONFIG_INIT_ENV_ARG_LIMIT\">CONFIG_INIT_ENV_ARG_LIMIT</a>", 
"", 
"extern void <a class=\"id\" href=\"#time_init\">time_init</a>(void);", 
"<span class=\"comment\">/* Default late time init is NULL. archs can override this later. */</span>", 
"void (*<a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#late_time_init\">late_time_init</a>)(void);", 
"extern void <a class=\"id\" href=\"#softirq_init\">softirq_init</a>(void);", 
"", 
"<span class=\"comment\">/* Untouched command line saved by arch-specific code. */</span>", 
"char <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#boot_command_line\">boot_command_line</a>[<a class=\"id\" href=\"#COMMAND_LINE_SIZE\">COMMAND_LINE_SIZE</a>];", 
"<span class=\"comment\">/* Untouched saved command line (eg. for /proc) */</span>", 
"char *<a class=\"id\" href=\"#saved_command_line\">saved_command_line</a>;", 
"<span class=\"comment\">/* Command line for parameter parsing */</span>", 
"static char *<a class=\"id\" href=\"#static_command_line\">static_command_line</a>;", 
"", 
"static char *<a class=\"id\" href=\"#execute_command\">execute_command</a>;", 
"static char *<a class=\"id\" href=\"#ramdisk_execute_command\">ramdisk_execute_command</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/* Setup configured maximum number of CPUs to activate */</span>", 
"unsigned int <a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a> = <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Setup routine for controlling SMP activation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Command-line option of \"nosmp\" or \"maxcpus=0\" will disable SMP</span>", 
"<span class=\"comment\"> * activation entirely (the MPS table probe still happens, though).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Command-line option of \"maxcpus=&lt;NUM&gt;\", where &lt;NUM&gt; is an integer</span>", 
"<span class=\"comment\"> * greater than 0, limits the maximum number of CPUs activated in</span>", 
"<span class=\"comment\"> * SMP mode to &lt;NUM&gt;.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#arch_disable_smp_support\">arch_disable_smp_support</a>(void) { }", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#nosmp\">nosmp</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_disable_smp_support\">arch_disable_smp_support</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"nosmp\", <a class=\"id\" href=\"#nosmp\">nosmp</a>);", 
"", 
"<span class=\"comment\">/* this is hard limit */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#nrcpus\">nrcpus</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_cpus\">nr_cpus</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_option\">get_option</a>(&amp;<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#nr_cpus\">nr_cpus</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_cpus\">nr_cpus</a> &gt; 0 && <a class=\"id\" href=\"#nr_cpus\">nr_cpus</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> = <a class=\"id\" href=\"#nr_cpus\">nr_cpus</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"nr_cpus\", <a class=\"id\" href=\"#nrcpus\">nrcpus</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#maxcpus\">maxcpus</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_option\">get_option</a>(&amp;<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_disable_smp_support\">arch_disable_smp_support</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"maxcpus\", <a class=\"id\" href=\"#maxcpus\">maxcpus</a>);", 
"#else", 
"static const unsigned int <a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a> = <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If set, this is an indication to the drivers that reset the underlying</span>", 
"<span class=\"comment\"> * device before going ahead with the initialization otherwise driver might</span>", 
"<span class=\"comment\"> * rely on the BIOS and skip the reset operation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is useful if kernel is booting in an unreliable environment.</span>", 
"<span class=\"comment\"> * For ex. kdump situaiton where previous kernel has crashed, BIOS has been</span>", 
"<span class=\"comment\"> * skipped and devices will be in unknown state.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int <a class=\"id\" href=\"#reset_devices\">reset_devices</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#reset_devices\">reset_devices</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_reset_devices\">set_reset_devices</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reset_devices\">reset_devices</a> = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"reset_devices\", <a class=\"id\" href=\"#set_reset_devices\">set_reset_devices</a>);", 
"", 
"static const char * <a class=\"id\" href=\"#argv_init\">argv_init</a>[<a class=\"id\" href=\"#MAX_INIT_ARGS\">MAX_INIT_ARGS</a>+2] = { \"init\", <a class=\"id\" href=\"#NULL\">NULL</a>, };", 
"const char * <a class=\"id\" href=\"#envp_init\">envp_init</a>[<a class=\"id\" href=\"#MAX_INIT_ENVS\">MAX_INIT_ENVS</a>+2] = { \"HOME=/\", \"TERM=linux\", <a class=\"id\" href=\"#NULL\">NULL</a>, };", 
"static const char *<a class=\"id\" href=\"#panic_later\">panic_later</a>, *<a class=\"id\" href=\"#panic_param\">panic_param</a>;", 
"", 
"extern const struct <a class=\"id\" href=\"#obs_kernel_param\">obs_kernel_param</a> <a class=\"id\" href=\"#__setup_start\">__setup_start</a>[], <a class=\"id\" href=\"#__setup_end\">__setup_end</a>[];", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#obsolete_checksetup\">obsolete_checksetup</a>(char *<a class=\"id\" href=\"#line\">line</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#obs_kernel_param\">obs_kernel_param</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#had_early_param\">had_early_param</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#__setup_start\">__setup_start</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#line\">line</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#n\">n</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#early\">early</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Already done in parse_early_param?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * (Needs exact match on param part).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Keep iterating, as we can have early</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * params and __setups of same names 8( */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#line\">line</a>[<a class=\"id\" href=\"#n\">n</a>] == '\\0' || <a class=\"id\" href=\"#line\">line</a>[<a class=\"id\" href=\"#n\">n</a>] == '=')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#had_early_param\">had_early_param</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#setup_func\">setup_func</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Parameter %s is obsolete,\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \" ignored\\n\", <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#setup_func\">setup_func</a>(<a class=\"id\" href=\"#line\">line</a> + <a class=\"id\" href=\"#n\">n</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>++;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#__setup_end\">__setup_end</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#had_early_param\">had_early_param</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This should be approx 2 Bo*oMips to start (note initial shift), and will</span>", 
"<span class=\"comment\"> * still work even if initially too large, it will just take slightly longer</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a> = (1<<12);", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#debug_kernel\">debug_kernel</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_loglevel\">console_loglevel</a> = 10;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#quiet_kernel\">quiet_kernel</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_loglevel\">console_loglevel</a> = 4;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"debug\", <a class=\"id\" href=\"#debug_kernel\">debug_kernel</a>);", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"quiet\", <a class=\"id\" href=\"#quiet_kernel\">quiet_kernel</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#loglevel\">loglevel</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_option\">get_option</a>(&amp;<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#console_loglevel\">console_loglevel</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"loglevel\", <a class=\"id\" href=\"#loglevel\">loglevel</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unknown boot options get handed to init, unless they look like</span>", 
"<span class=\"comment\"> * unused parameters (modprobe will find them in /proc/cmdline).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#unknown_bootoption\">unknown_bootoption</a>(char *<a class=\"id\" href=\"#param\">param</a>, char *<a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Change NUL term back to \"=\", to make \"param\" the whole string. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* param=val or param=\"val\"? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> == <a class=\"id\" href=\"#param\">param</a>+<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#param\">param</a>)+1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>[-1] = '=';", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#val\">val</a> == <a class=\"id\" href=\"#param\">param</a>+<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#param\">param</a>)+2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>[-2] = '=';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#val\">val</a>-1, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#val\">val</a>)+1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Handle obsolete-style parameters */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obsolete_checksetup\">obsolete_checksetup</a>(<a class=\"id\" href=\"#param\">param</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Unused module parameter. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#param\">param</a>, '.') && (!<a class=\"id\" href=\"#val\">val</a> || <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#param\">param</a>, '.') &lt; <a class=\"id\" href=\"#val\">val</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#panic_later\">panic_later</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Environment option */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#envp_init\">envp_init</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#MAX_INIT_ENVS\">MAX_INIT_ENVS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic_later\">panic_later</a> = \"Too many boot env vars at `%s'\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic_param\">panic_param</a> = <a class=\"id\" href=\"#param\">param</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#envp_init\">envp_init</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#val\">val</a> - <a class=\"id\" href=\"#param\">param</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#envp_init\">envp_init</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#param\">param</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Command line option */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#argv_init\">argv_init</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#MAX_INIT_ARGS\">MAX_INIT_ARGS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic_later\">panic_later</a> = \"Too many boot init vars at `%s'\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic_param\">panic_param</a> = <a class=\"id\" href=\"#param\">param</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#argv_init\">argv_init</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#param\">param</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PAGEALLOC\">CONFIG_DEBUG_PAGEALLOC</a>", 
"int <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#debug_pagealloc_enabled\">debug_pagealloc_enabled</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_setup\">init_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#execute_command\">execute_command</a> = <a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In case LILO is going to boot us with default command line,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it prepends \"auto\" before the whole cmdline which makes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the shell think it should execute a script with such name.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So we ignore all arguments entered _before_ init=... [MJ]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_INIT_ARGS\">MAX_INIT_ARGS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#argv_init\">argv_init</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"init=\", <a class=\"id\" href=\"#init_setup\">init_setup</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#rdinit_setup\">rdinit_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ramdisk_execute_command\">ramdisk_execute_command</a> = <a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* See \"auto\" comment in init_setup */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_INIT_ARGS\">MAX_INIT_ARGS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#argv_init\">argv_init</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"rdinit=\", <a class=\"id\" href=\"#rdinit_setup\">rdinit_setup</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#smp_init\">smp_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#APIC_init_uniprocessor\">APIC_init_uniprocessor</a>();", 
"}", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_init\">smp_init</a>()<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#setup_nr_cpu_ids\">setup_nr_cpu_ids</a>(void) { }", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#smp_prepare_cpus\">smp_prepare_cpus</a>(unsigned int <a class=\"id\" href=\"#maxcpus\">maxcpus</a>) { }", 
"", 
"#else", 
"", 
"<span class=\"comment\">/* Setup number of possible processor ids */</span>", 
"int <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>);", 
"", 
"<span class=\"comment\">/* An arch may set nr_cpu_ids earlier if needed, so this would be redundant */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_nr_cpu_ids\">setup_nr_cpu_ids</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> = <a class=\"id\" href=\"#find_last_bit\">find_last_bit</a>(<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(<a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>),<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>) + 1;", 
"}", 
"", 
"<span class=\"comment\">/* Called by boot processor to activate the rest. */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#smp_init\">smp_init</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME: This should be done in userspace --RR */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_present_cpu\">for_each_present_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() >= <a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_up\">cpu_up</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Any cleanup work */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Brought up %ld CPUs\\n\", (long)<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_cpus_done\">smp_cpus_done</a>(<a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We need to store the untouched command line for future reference.</span>", 
"<span class=\"comment\"> * We also need to store the touched command line since the parameter</span>", 
"<span class=\"comment\"> * parsing is performed in place, and we should allow a component to</span>", 
"<span class=\"comment\"> * store reference of name/value for future reference.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_command_line\">setup_command_line</a>(char *<a class=\"id\" href=\"#command_line\">command_line</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saved_command_line\">saved_command_line</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#strlen\">strlen</a> (<a class=\"id\" href=\"#boot_command_line\">boot_command_line</a>)+1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#static_command_line\">static_command_line</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#strlen\">strlen</a> (<a class=\"id\" href=\"#command_line\">command_line</a>)+1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a> (<a class=\"id\" href=\"#saved_command_line\">saved_command_line</a>, <a class=\"id\" href=\"#boot_command_line\">boot_command_line</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a> (<a class=\"id\" href=\"#static_command_line\">static_command_line</a>, <a class=\"id\" href=\"#command_line\">command_line</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We need to finalize in a non-__init function or else race conditions</span>", 
"<span class=\"comment\"> * between the root thread and the init thread may cause start_kernel to</span>", 
"<span class=\"comment\"> * be reaped by free_initmem before the root thread has proceeded to</span>", 
"<span class=\"comment\"> * cpu_idle.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * gcc-3.4 accidentally inlines this function, so use noinline.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#DECLARE_COMPLETION\">DECLARE_COMPLETION</a>(<a class=\"id\" href=\"#kthreadd_done\">kthreadd_done</a>);", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> void <a class=\"id\" href=\"#__init_refok\">__init_refok</a> <a class=\"id\" href=\"#rest_init\">rest_init</a>(void)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#kernel_lock\">kernel_lock</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_scheduler_starting\">rcu_scheduler_starting</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to spawn init first so that it obtains pid 1, however</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the init task will end up wanting to create kthreads, which, if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we schedule it before we create kthreadd, will OOPS.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kernel_thread\">kernel_thread</a>(<a class=\"id\" href=\"#kernel_init\">kernel_init</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#CLONE_FS\">CLONE_FS</a> | <a class=\"id\" href=\"#CLONE_SIGHAND\">CLONE_SIGHAND</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numa_default_policy\">numa_default_policy</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#kernel_thread\">kernel_thread</a>(<a class=\"id\" href=\"#kthreadd\">kthreadd</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#CLONE_FS\">CLONE_FS</a> | <a class=\"id\" href=\"#CLONE_FILES\">CLONE_FILES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kthreadd_task\">kthreadd_task</a> = <a class=\"id\" href=\"#find_task_by_pid_ns\">find_task_by_pid_ns</a>(<a class=\"id\" href=\"#pid\">pid</a>, &amp;<a class=\"id\" href=\"#init_pid_ns\">init_pid_ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#kthreadd_done\">kthreadd_done</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The boot idle thread must execute schedule()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at least once to get things moving:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_idle_bootup_task\">init_idle_bootup_task</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Call into cpu_idle with preempt disabled */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_idle\">cpu_idle</a>();", 
"}", 
"", 
"<span class=\"comment\">/* Check for early params. */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#do_early_param\">do_early_param</a>(char *<a class=\"id\" href=\"#param\">param</a>, char *<a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#obs_kernel_param\">obs_kernel_param</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#__setup_start\">__setup_start</a>; <a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#__setup_end\">__setup_end</a>; <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#early\">early</a> && <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#str\">str</a>) == 0) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#param\">param</a>, \"console\") == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#str\">str</a>, \"earlycon\") == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#setup_func\">setup_func</a>(<a class=\"id\" href=\"#val\">val</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"Malformed early option '%s'\\n\", <a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* We accept everything at this stage. */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_early_options\">parse_early_options</a>(char *<a class=\"id\" href=\"#cmdline\">cmdline</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parse_args\">parse_args</a>(\"early options\", <a class=\"id\" href=\"#cmdline\">cmdline</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, <a class=\"id\" href=\"#do_early_param\">do_early_param</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Arch code calls this early on, or if not, just before other parsing. */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_early_param\">parse_early_param</a>(void)", 
"{", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#__initdata\">__initdata</a> int <a class=\"id\" href=\"#done\">done</a> = 0;", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#__initdata\">__initdata</a> char <a class=\"id\" href=\"#tmp_cmdline\">tmp_cmdline</a>[<a class=\"id\" href=\"#COMMAND_LINE_SIZE\">COMMAND_LINE_SIZE</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#done\">done</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All fall through to do_early_param. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#tmp_cmdline\">tmp_cmdline</a>, <a class=\"id\" href=\"#boot_command_line\">boot_command_line</a>, <a class=\"id\" href=\"#COMMAND_LINE_SIZE\">COMMAND_LINE_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parse_early_options\">parse_early_options</a>(<a class=\"id\" href=\"#tmp_cmdline\">tmp_cmdline</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Activate the first processor.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#boot_cpu_init\">boot_cpu_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Mark the boot cpu \"present\", \"online\" etc for SMP and UP case */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_online\">set_cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_active\">set_cpu_active</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_present\">set_cpu_present</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_possible\">set_cpu_possible</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#smp_setup_processor_id\">smp_setup_processor_id</a>(void)", 
"{", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#thread_info_cache_init\">thread_info_cache_init</a>(void)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set up kernel memory allocators</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#mm_init\">mm_init</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page_cgroup requires countinous pages as memmap</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and it's bigger than MAX_ORDER unless SPARSEMEM.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cgroup_init_flatmem\">page_cgroup_init_flatmem</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_init\">mem_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_init\">kmem_cache_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_init_late\">percpu_init_late</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgtable_cache_init\">pgtable_cache_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmalloc_init\">vmalloc_init</a>();", 
"}", 
"", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#start_kernel\">start_kernel</a>(void)", 
"{", 
"<span class=\"ts\"/>char * <a class=\"id\" href=\"#command_line\">command_line</a>;", 
"<span class=\"ts\"/>extern const struct <a class=\"id\" href=\"#kernel_param\">kernel_param</a> <a class=\"id\" href=\"#__start___param\">__start___param</a>[], <a class=\"id\" href=\"#__stop___param\">__stop___param</a>[];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_setup_processor_id\">smp_setup_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Need to run as early as possible, to initialize the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lockdep hash:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_init\">lockdep_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_objects_early_init\">debug_objects_early_init</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set up the the initial canary ASAP:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#boot_init_stack_canary\">boot_init_stack_canary</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_init_early\">cgroup_init_early</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_boot_irqs_off\">early_boot_irqs_off</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_init_irq_lock_class\">early_init_irq_lock_class</a>();", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Interrupts are still disabled. Do necessary setups, then</span>", 
"<span class=\"comment\"> * enable them</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tick_init\">tick_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#boot_cpu_init\">boot_cpu_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_address_init\">page_address_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"%s\", <a class=\"id\" href=\"#linux_banner\">linux_banner</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_arch\">setup_arch</a>(&amp;<a class=\"id\" href=\"#command_line\">command_line</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_init_owner\">mm_init_owner</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, &amp;<a class=\"id\" href=\"#init_task\">init_task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_command_line\">setup_command_line</a>(<a class=\"id\" href=\"#command_line\">command_line</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_nr_cpu_ids\">setup_nr_cpu_ids</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_per_cpu_areas\">setup_per_cpu_areas</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_prepare_boot_cpu\">smp_prepare_boot_cpu</a>();<span class=\"ts\"/><span class=\"comment\">/* arch-specific boot-cpu hooks */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#build_all_zonelists\">build_all_zonelists</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_alloc_init\">page_alloc_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"Kernel command line: %s\\n\", <a class=\"id\" href=\"#boot_command_line\">boot_command_line</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parse_early_param\">parse_early_param</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parse_args\">parse_args</a>(\"Booting kernel\", <a class=\"id\" href=\"#static_command_line\">static_command_line</a>, <a class=\"id\" href=\"#__start___param\">__start___param</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#__stop___param\">__stop___param</a> - <a class=\"id\" href=\"#__start___param\">__start___param</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#unknown_bootoption\">unknown_bootoption</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * These use large bootmem allocations and must precede</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kmem_cache_init()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pidhash_init\">pidhash_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vfs_caches_init_early\">vfs_caches_init_early</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sort_main_extable\">sort_main_extable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trap_init\">trap_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_init\">mm_init</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set up the scheduler prior starting any interrupts (such as the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * timer interrupt). Full topology setup happens at smp_init()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time - but meanwhile we still have a functioning scheduler.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_init\">sched_init</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable preemption - early bootup scheduling is extremely</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fragile until we cpu_idle() for the first time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"start_kernel(): bug: interrupts were \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"enabled *very* early, fixing it\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_init\">rcu_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_init\">radix_tree_init</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* init some links before init_ISA_irqs() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_irq_init\">early_irq_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_IRQ\">init_IRQ</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prio_tree_init\">prio_tree_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_timers\">init_timers</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtimers_init\">hrtimers_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#softirq_init\">softirq_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timekeeping_init\">timekeeping_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time_init\">time_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#profile_init\">profile_init</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"start_kernel(): bug: interrupts were \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"enabled early\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_boot_irqs_on\">early_boot_irqs_on</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Interrupts are enabled now so all GFP allocations are safe. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_allowed_mask\">gfp_allowed_mask</a> = <a class=\"id\" href=\"#__GFP_BITS_MASK\">__GFP_BITS_MASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_init_late\">kmem_cache_init_late</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * HACK ALERT! This is early. We're enabling the console before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we've done PCI setups etc, and console_init() must be aware of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this. But we do want output early, in case something goes wrong.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_init\">console_init</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#panic_later\">panic_later</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(<a class=\"id\" href=\"#panic_later\">panic_later</a>, <a class=\"id\" href=\"#panic_param\">panic_param</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_info\">lockdep_info</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Need to run this when irqs are enabled, because it wants</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to self-test [hard/soft]-irqs on/off lock inversion bugs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * too:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locking_selftest\">locking_selftest</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_INITRD\">CONFIG_BLK_DEV_INITRD</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#initrd_start\">initrd_start</a> && !<a class=\"id\" href=\"#initrd_below_start_ok\">initrd_below_start_ok</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>((void *)<a class=\"id\" href=\"#initrd_start\">initrd_start</a>)) &lt; <a class=\"id\" href=\"#min_low_pfn\">min_low_pfn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"initrd overwritten (0x%08lx < 0x%08lx) - \"", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"disabling it.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>((void *)<a class=\"id\" href=\"#initrd_start\">initrd_start</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#min_low_pfn\">min_low_pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#initrd_start\">initrd_start</a> = 0;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cgroup_init\">page_cgroup_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_debug_pagealloc\">enable_debug_pagealloc</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_init\">kmemleak_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_objects_mem_init\">debug_objects_mem_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_init_cache\">idr_init_cache</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_per_cpu_pageset\">setup_per_cpu_pageset</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numa_policy_init\">numa_policy_init</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#late_time_init\">late_time_init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#late_time_init\">late_time_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_clock_init\">sched_clock_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calibrate_delay\">calibrate_delay</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pidmap_init\">pidmap_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#anon_vma_init\">anon_vma_init</a>();", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86\">CONFIG_X86</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#efi_enabled\">efi_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#efi_enter_virtual_mode\">efi_enter_virtual_mode</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thread_info_cache_init\">thread_info_cache_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred_init\">cred_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fork_init\">fork_init</a>(<a class=\"id\" href=\"#totalram_pages\">totalram_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_caches_init\">proc_caches_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer_init\">buffer_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_init\">key_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_init\">security_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbg_late_init\">dbg_late_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vfs_caches_init\">vfs_caches_init</a>(<a class=\"id\" href=\"#totalram_pages\">totalram_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#signals_init\">signals_init</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* rootfs populating might need page-writeback */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_writeback_init\">page_writeback_init</a>();", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_root_init\">proc_root_init</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_init\">cgroup_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuset_init\">cpuset_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#taskstats_init_early\">taskstats_init_early</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delayacct_init\">delayacct_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_bugs\">check_bugs</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_early_init\">acpi_early_init</a>(); <span class=\"comment\">/* before LAPIC and SMP init */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sfi_init_late\">sfi_init_late</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_init\">ftrace_init</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do the rest non-__init'ed, we're now alive */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rest_init\">rest_init</a>();", 
"}", 
"", 
"<span class=\"comment\">/* Call all constructor functions linked into the kernel. */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#do_ctors\">do_ctors</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CONSTRUCTORS\">CONFIG_CONSTRUCTORS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctor_fn_t\">ctor_fn_t</a> *<a class=\"id\" href=\"#fn\">fn</a> = (<a class=\"id\" href=\"#ctor_fn_t\">ctor_fn_t</a> *) <a class=\"id\" href=\"#__ctors_start\">__ctors_start</a>;", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#fn\">fn</a> &lt; (<a class=\"id\" href=\"#ctor_fn_t\">ctor_fn_t</a> *) <a class=\"id\" href=\"#__ctors_end\">__ctors_end</a>; <a class=\"id\" href=\"#fn\">fn</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#fn\">fn</a>)();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"int <a class=\"id\" href=\"#initcall_debug\">initcall_debug</a>;", 
"<a class=\"id\" href=\"#core_param\">core_param</a>(<a class=\"id\" href=\"#initcall_debug\">initcall_debug</a>, <a class=\"id\" href=\"#initcall_debug\">initcall_debug</a>, <a class=\"id\" href=\"#bool\">bool</a>, 0644);", 
"", 
"static char <a class=\"id\" href=\"#msgbuf\">msgbuf</a>[64];", 
"", 
"static int <a class=\"id\" href=\"#__init_or_module\">__init_or_module</a> <a class=\"id\" href=\"#do_one_initcall_debug\">do_one_initcall_debug</a>(<a class=\"id\" href=\"#initcall_t\">initcall_t</a> <a class=\"id\" href=\"#fn\">fn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#calltime\">calltime</a>, <a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#rettime\">rettime</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#duration\">duration</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"calling  %pF @ %i\\n\", <a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calltime\">calltime</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fn\">fn</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rettime\">rettime</a> = <a class=\"id\" href=\"#ktime_get\">ktime_get</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#rettime\">rettime</a>, <a class=\"id\" href=\"#calltime\">calltime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#duration\">duration</a> = (unsigned long long) <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#delta\">delta</a>) >> 10;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"initcall %pF returned %d after %lld usecs\\n\", <a class=\"id\" href=\"#fn\">fn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#duration\">duration</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__init_or_module\">__init_or_module</a> <a class=\"id\" href=\"#do_one_initcall\">do_one_initcall</a>(<a class=\"id\" href=\"#initcall_t\">initcall_t</a> <a class=\"id\" href=\"#fn\">fn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#preempt_count\">preempt_count</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#initcall_debug\">initcall_debug</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_one_initcall_debug\">do_one_initcall_debug</a>(<a class=\"id\" href=\"#fn\">fn</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fn\">fn</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msgbuf\">msgbuf</a>[0] = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#ENODEV\">ENODEV</a> && <a class=\"id\" href=\"#initcall_debug\">initcall_debug</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#msgbuf\">msgbuf</a>, \"error code %d \", <a class=\"id\" href=\"#ret\">ret</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#preempt_count\">preempt_count</a>() != <a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#msgbuf\">msgbuf</a>, \"preemption imbalance \", sizeof(<a class=\"id\" href=\"#msgbuf\">msgbuf</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_count\">preempt_count</a>() = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcat\">strlcat</a>(<a class=\"id\" href=\"#msgbuf\">msgbuf</a>, \"disabled interrupts \", sizeof(<a class=\"id\" href=\"#msgbuf\">msgbuf</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msgbuf\">msgbuf</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"initcall %pF returned with %s\\n\", <a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#msgbuf\">msgbuf</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"", 
"extern <a class=\"id\" href=\"#initcall_t\">initcall_t</a> <a class=\"id\" href=\"#__initcall_start\">__initcall_start</a>[], <a class=\"id\" href=\"#__initcall_end\">__initcall_end</a>[], <a class=\"id\" href=\"#__early_initcall_end\">__early_initcall_end</a>[];", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#do_initcalls\">do_initcalls</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#initcall_t\">initcall_t</a> *<a class=\"id\" href=\"#fn\">fn</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#__early_initcall_end\">__early_initcall_end</a>; <a class=\"id\" href=\"#fn\">fn</a> &lt; <a class=\"id\" href=\"#__initcall_end\">__initcall_end</a>; <a class=\"id\" href=\"#fn\">fn</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_one_initcall\">do_one_initcall</a>(*<a class=\"id\" href=\"#fn\">fn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure there is no pending stuff from the initcall sequence */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_scheduled_work\">flush_scheduled_work</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Ok, the machine is now initialized. None of the devices</span>", 
"<span class=\"comment\"> * have been touched yet, but the CPU subsystem is up and</span>", 
"<span class=\"comment\"> * running, and memory and process management works.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Now we can finally start doing some real work..</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#do_basic_setup\">do_basic_setup</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuset_init_smp\">cpuset_init_smp</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#usermodehelper_init\">usermodehelper_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_tmpfs\">init_tmpfs</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#driver_init\">driver_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_irq_proc\">init_irq_proc</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_ctors\">do_ctors</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_initcalls\">do_initcalls</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#do_pre_smp_initcalls\">do_pre_smp_initcalls</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#initcall_t\">initcall_t</a> *<a class=\"id\" href=\"#fn\">fn</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#__initcall_start\">__initcall_start</a>; <a class=\"id\" href=\"#fn\">fn</a> &lt; <a class=\"id\" href=\"#__early_initcall_end\">__early_initcall_end</a>; <a class=\"id\" href=\"#fn\">fn</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_one_initcall\">do_one_initcall</a>(*<a class=\"id\" href=\"#fn\">fn</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#run_init_process\">run_init_process</a>(const char *<a class=\"id\" href=\"#init_filename\">init_filename</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#argv_init\">argv_init</a>[0] = <a class=\"id\" href=\"#init_filename\">init_filename</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kernel_execve\">kernel_execve</a>(<a class=\"id\" href=\"#init_filename\">init_filename</a>, <a class=\"id\" href=\"#argv_init\">argv_init</a>, <a class=\"id\" href=\"#envp_init\">envp_init</a>);", 
"}", 
"", 
"<span class=\"comment\">/* This is a non __init function. Force it to be noinline otherwise gcc</span>", 
"<span class=\"comment\"> * makes it inline to init() and it becomes part of init.text section</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> int <a class=\"id\" href=\"#init_post\">init_post</a>(void)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#kernel_lock\">kernel_lock</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* need to finish all async __init code before freeing the memory */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#async_synchronize_full\">async_synchronize_full</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_initmem\">free_initmem</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_rodata_ro\">mark_rodata_ro</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#system_state\">system_state</a> = <a class=\"id\" href=\"#SYSTEM_RUNNING\">SYSTEM_RUNNING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#numa_default_policy\">numa_default_policy</a>();", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SIGNAL_UNKILLABLE\">SIGNAL_UNKILLABLE</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ramdisk_execute_command\">ramdisk_execute_command</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#run_init_process\">run_init_process</a>(<a class=\"id\" href=\"#ramdisk_execute_command\">ramdisk_execute_command</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Failed to execute %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ramdisk_execute_command\">ramdisk_execute_command</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We try each of these until one succeeds.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The Bourne shell can be used instead of init if we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * trying to recover a really broken machine.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#execute_command\">execute_command</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#run_init_process\">run_init_process</a>(<a class=\"id\" href=\"#execute_command\">execute_command</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Failed to execute %s.  Attempting \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"defaults...\\n\", <a class=\"id\" href=\"#execute_command\">execute_command</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#run_init_process\">run_init_process</a>(\"/sbin/init\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#run_init_process\">run_init_process</a>(\"/etc/init\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#run_init_process\">run_init_process</a>(\"/bin/init\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#run_init_process\">run_init_process</a>(\"/bin/sh\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"No init found.  Try passing init= option to kernel. \"", 
"<span class=\"ts\"/>      \"See Linux Documentation/init.txt for guidance.\");", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#kernel_init\">kernel_init</a>(void * <a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait until kthreadd is all set-up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#kthreadd_done\">kthreadd_done</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * init can allocate pages on any node</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_mems_allowed\">set_mems_allowed</a>(<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>]);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * init can run on any cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#cpu_all_mask\">cpu_all_mask</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Tell the world that we're going to be the grim</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reaper of innocent orphaned children.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't want people to have to make incorrect</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * assumptions about where in the task array this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can be found.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_pid_ns\">init_pid_ns</a>.<a class=\"id\" href=\"#child_reaper\">child_reaper</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cad_pid\">cad_pid</a> = <a class=\"id\" href=\"#task_pid\">task_pid</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_prepare_cpus\">smp_prepare_cpus</a>(<a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_pre_smp_initcalls\">do_pre_smp_initcalls</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_init\">smp_init</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_init_smp\">sched_init_smp</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_basic_setup\">do_basic_setup</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Open the /dev/console on the rootfs, this should never fail */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sys_open\">sys_open</a>((const char <a class=\"id\" href=\"#__user\">__user</a> *) \"/dev/console\", <a class=\"id\" href=\"#O_RDWR\">O_RDWR</a>, 0) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Warning: unable to open an initial console.\\n\");", 
"", 
"<span class=\"ts\"/>(void) <a class=\"id\" href=\"#sys_dup\">sys_dup</a>(0);", 
"<span class=\"ts\"/>(void) <a class=\"id\" href=\"#sys_dup\">sys_dup</a>(0);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check if there is an early userspace init.  If yes, let it do all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the work</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ramdisk_execute_command\">ramdisk_execute_command</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ramdisk_execute_command\">ramdisk_execute_command</a> = \"/init\";", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sys_access\">sys_access</a>((const char <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#ramdisk_execute_command\">ramdisk_execute_command</a>, 0) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ramdisk_execute_command\">ramdisk_execute_command</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_namespace\">prepare_namespace</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ok, we have completed the initial bootup, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we're essentially up and running. Get rid of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * initmem segments and start the user-mode stuff..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_post\">init_post</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/b8/afe6335c96d28fa4c607fc063ba4d02a1218b8.xr', __xr_tmp);
