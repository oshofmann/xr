var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: nsutils - Utilities for accessing ACPI namespace, accessing</span>", 
"<span class=\"comment\"> *                        parents and siblings and Scope manipulation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"amlcode.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"actables.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_NAMESPACE\">ACPI_NAMESPACE</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"nsutils\")", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_ns_valid_path_separator\">acpi_ns_valid_path_separator</a>(char <a class=\"id\" href=\"#sep\">sep</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ACPI_OBSOLETE_FUNCTIONS\">ACPI_OBSOLETE_FUNCTIONS</a>", 
"<a class=\"id\" href=\"#acpi_name\">acpi_name</a> <a class=\"id\" href=\"#acpi_ns_find_parent_name\">acpi_ns_find_parent_name</a>(struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node_to_search\">node_to_search</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_report_error</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  module_name         - Caller's module name (for error output)</span>", 
"<span class=\"comment\"> *              line_number         - Caller's line number (for error output)</span>", 
"<span class=\"comment\"> *              internal_name       - Name or path of the namespace node</span>", 
"<span class=\"comment\"> *              lookup_status       - Exception code from NS lookup</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Print warning message with full pathname</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#acpi_ns_report_error\">acpi_ns_report_error</a>(const char *<a class=\"id\" href=\"#module_name\">module_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     const char *<a class=\"id\" href=\"#internal_name\">internal_name</a>, <a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#lookup_status\">lookup_status</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bad_name\">bad_name</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"ACPI Error (%s-%04d): \", <a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#line_number\">line_number</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lookup_status\">lookup_status</a> == <a class=\"id\" href=\"#AE_BAD_CHARACTER\">AE_BAD_CHARACTER</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* There is a non-ascii character in the name */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MOVE_32_TO_32\">ACPI_MOVE_32_TO_32</a>(&amp;<a class=\"id\" href=\"#bad_name\">bad_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(<a class=\"id\" href=\"#u32\">u32</a>, <a class=\"id\" href=\"#internal_name\">internal_name</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"[0x%4.4X] (NON-ASCII)\", <a class=\"id\" href=\"#bad_name\">bad_name</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Convert path to external format */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_externalize_name\">acpi_ns_externalize_name</a>(<a class=\"id\" href=\"#ACPI_UINT32_MAX\">ACPI_UINT32_MAX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#internal_name\">internal_name</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Print target name */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"[%s]\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"[COULD NOT EXTERNALIZE NAME]\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\" Namespace lookup failure, %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#acpi_format_exception\">acpi_format_exception</a>(<a class=\"id\" href=\"#lookup_status\">lookup_status</a>));", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_report_method_error</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  module_name         - Caller's module name (for error output)</span>", 
"<span class=\"comment\"> *              line_number         - Caller's line number (for error output)</span>", 
"<span class=\"comment\"> *              Message             - Error message to use on failure</span>", 
"<span class=\"comment\"> *              prefix_node         - Prefix relative to the path</span>", 
"<span class=\"comment\"> *              Path                - Path to the node (optional)</span>", 
"<span class=\"comment\"> *              method_status       - Execution status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Print warning message with full pathname</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#acpi_ns_report_method_error\">acpi_ns_report_method_error</a>(const char *<a class=\"id\" href=\"#module_name\">module_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line_number\">line_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#message\">message</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#prefix_node\">prefix_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#method_status\">method_status</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#prefix_node\">prefix_node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"ACPI Error (%s-%04d): \", <a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#line_number\">line_number</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ns_get_node\">acpi_ns_get_node</a>(<a class=\"id\" href=\"#prefix_node\">prefix_node</a>, <a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#ACPI_NS_NO_UPSEARCH\">ACPI_NS_NO_UPSEARCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"[Could not get node by pathname]\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ns_print_node_pathname\">acpi_ns_print_node_pathname</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#message\">message</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\", %s\\n\", <a class=\"id\" href=\"#acpi_format_exception\">acpi_format_exception</a>(<a class=\"id\" href=\"#method_status\">method_status</a>));", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_print_node_pathname</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Node            - Object</span>", 
"<span class=\"comment\"> *              Message         - Prefix message</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Print an object's full namespace pathname</span>", 
"<span class=\"comment\"> *              Manages allocation/freeing of a pathname buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void", 
"<a class=\"id\" href=\"#acpi_ns_print_node_pathname\">acpi_ns_print_node_pathname</a>(struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#message\">message</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_buffer\">acpi_buffer</a> <a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"[NULL NAME]\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Convert handle to full pathname and print it (with supplied message) */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE_LOCAL_BUFFER\">ACPI_ALLOCATE_LOCAL_BUFFER</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_handle_to_pathname\">acpi_ns_handle_to_pathname</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#message\">message</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"%s \", <a class=\"id\" href=\"#message\">message</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_printf\">acpi_os_printf</a>(\"[%s] (Node %p)\", (char *)<a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_valid_root_prefix</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Prefix          - Character to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      TRUE if a valid prefix</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Check if a character is a valid ACPI Root prefix</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_ns_valid_root_prefix\">acpi_ns_valid_root_prefix</a>(char <a class=\"id\" href=\"#prefix\">prefix</a>)", 
"{", 
"", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#u8\">u8</a>) (<a class=\"id\" href=\"#prefix\">prefix</a> == '\\\\'));", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_valid_path_separator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Sep         - Character to be checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      TRUE if a valid path separator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Check if a character is a valid ACPI path separator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_ns_valid_path_separator\">acpi_ns_valid_path_separator</a>(char <a class=\"id\" href=\"#sep\">sep</a>)", 
"{", 
"", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#u8\">u8</a>) (<a class=\"id\" href=\"#sep\">sep</a> == '.'));", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_get_type</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Node        - Parent Node to be examined</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Type field from Node whose handle is passed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Return the type of a Namespace node</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_object_type\">acpi_object_type</a> <a class=\"id\" href=\"#acpi_ns_get_type\">acpi_ns_get_type</a>(struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> * <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ns_get_type\">ns_get_type</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Null Node parameter\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_UINT32\">return_UINT32</a>(<a class=\"id\" href=\"#ACPI_TYPE_ANY\">ACPI_TYPE_ANY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_UINT32\">return_UINT32</a>((<a class=\"id\" href=\"#acpi_object_type\">acpi_object_type</a>) <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_local</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Type        - A namespace object type</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      LOCAL if names must be found locally in objects of the</span>", 
"<span class=\"comment\"> *              passed type, 0 if enclosing scopes should be searched</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Returns scope rule for the given object type.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_ns_local\">acpi_ns_local</a>(<a class=\"id\" href=\"#acpi_object_type\">acpi_object_type</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ns_local\">ns_local</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_ut_valid_object_type\">acpi_ut_valid_object_type</a>(<a class=\"id\" href=\"#type\">type</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Type code out of range  */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Invalid Object Type 0x%X\", <a class=\"id\" href=\"#type\">type</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_UINT32\">return_UINT32</a>(<a class=\"id\" href=\"#ACPI_NS_NORMAL\">ACPI_NS_NORMAL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_UINT32\">return_UINT32</a>((<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#acpi_gbl_ns_properties\">acpi_gbl_ns_properties</a>[<a class=\"id\" href=\"#type\">type</a>] &amp; <a class=\"id\" href=\"#ACPI_NS_LOCAL\">ACPI_NS_LOCAL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_get_internal_name_length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Info            - Info struct initialized with the</span>", 
"<span class=\"comment\"> *                                external name pointer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Calculate the length of the internal (AML) namestring</span>", 
"<span class=\"comment\"> *              corresponding to the external (ASL) namestring.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ns_get_internal_name_length\">acpi_ns_get_internal_name_length</a>(struct <a class=\"id\" href=\"#acpi_namestring_info\">acpi_namestring_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#next_external_char\">next_external_char</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_external_char\">next_external_char</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#external_name\">external_name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#num_carats\">num_carats</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#num_segments\">num_segments</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#fully_qualified\">fully_qualified</a> = <a class=\"id\" href=\"#FALSE\">FALSE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For the internal name, the required length is 4 bytes per segment, plus</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1 each for root_prefix, multi_name_prefix_op, segment count, trailing null</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (which is not really needed, but no there's harm in putting it there)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * strlen() + 1 covers the first name_seg, which has no path separator</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_ns_valid_root_prefix\">acpi_ns_valid_root_prefix</a>(*<a class=\"id\" href=\"#next_external_char\">next_external_char</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#fully_qualified\">fully_qualified</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_external_char\">next_external_char</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip redundant root_prefix, like \\\\_SB.PCI0.SBRG.EC0 */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#acpi_ns_valid_root_prefix\">acpi_ns_valid_root_prefix</a>(*<a class=\"id\" href=\"#next_external_char\">next_external_char</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_external_char\">next_external_char</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Handle Carat prefixes */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (*<a class=\"id\" href=\"#next_external_char\">next_external_char</a> == '^') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#num_carats\">num_carats</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_external_char\">next_external_char</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Determine the number of ACPI name \"segments\" by counting the number of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * path separators within the string. Start with one segment since the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * segment count is [(# separators) + 1], and zero separators is ok.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#next_external_char\">next_external_char</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#num_segments\">num_segments</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#next_external_char\">next_external_char</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_ns_valid_path_separator\">acpi_ns_valid_path_separator</a>(<a class=\"id\" href=\"#next_external_char\">next_external_char</a>[<a class=\"id\" href=\"#i\">i</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#num_segments\">num_segments</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#length\">length</a> = (<a class=\"id\" href=\"#ACPI_NAME_SIZE\">ACPI_NAME_SIZE</a> * <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#num_segments\">num_segments</a>) +", 
"<span class=\"ts\"/>    4 + <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#num_carats\">num_carats</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#next_external_char\">next_external_char</a> = <a class=\"id\" href=\"#next_external_char\">next_external_char</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_build_internal_name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Info            - Info struct fully initialized</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Construct the internal (AML) namestring</span>", 
"<span class=\"comment\"> *              corresponding to the external (ASL) namestring.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ns_build_internal_name\">acpi_ns_build_internal_name</a>(struct <a class=\"id\" href=\"#acpi_namestring_info\">acpi_namestring_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#num_segments\">num_segments</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#num_segments\">num_segments</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#internal_name\">internal_name</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#internal_name\">internal_name</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#external_name\">external_name</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#next_external_char\">next_external_char</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ns_build_internal_name\">ns_build_internal_name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Setup the correct prefixes, counts, and pointers */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#fully_qualified\">fully_qualified</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#internal_name\">internal_name</a>[0] = '\\\\';", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#num_segments\">num_segments</a> <= 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = &amp;<a class=\"id\" href=\"#internal_name\">internal_name</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#num_segments\">num_segments</a> == 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#internal_name\">internal_name</a>[1] = <a class=\"id\" href=\"#AML_DUAL_NAME_PREFIX\">AML_DUAL_NAME_PREFIX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = &amp;<a class=\"id\" href=\"#internal_name\">internal_name</a>[2];", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#internal_name\">internal_name</a>[1] = <a class=\"id\" href=\"#AML_MULTI_NAME_PREFIX_OP\">AML_MULTI_NAME_PREFIX_OP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#internal_name\">internal_name</a>[2] = (char)<a class=\"id\" href=\"#num_segments\">num_segments</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = &amp;<a class=\"id\" href=\"#internal_name\">internal_name</a>[3];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Not fully qualified.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Handle Carats first, then append the name segments</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#num_carats\">num_carats</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#num_carats\">num_carats</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#internal_name\">internal_name</a>[<a class=\"id\" href=\"#i\">i</a>] = '^';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#num_segments\">num_segments</a> <= 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = &amp;<a class=\"id\" href=\"#internal_name\">internal_name</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#num_segments\">num_segments</a> == 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#internal_name\">internal_name</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#AML_DUAL_NAME_PREFIX\">AML_DUAL_NAME_PREFIX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = &amp;<a class=\"id\" href=\"#internal_name\">internal_name</a>[(<a class=\"id\" href=\"#acpi_size\">acpi_size</a>) <a class=\"id\" href=\"#i\">i</a> + 1];", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#internal_name\">internal_name</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#AML_MULTI_NAME_PREFIX_OP\">AML_MULTI_NAME_PREFIX_OP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#internal_name\">internal_name</a>[(<a class=\"id\" href=\"#acpi_size\">acpi_size</a>) <a class=\"id\" href=\"#i\">i</a> + 1] = (char)<a class=\"id\" href=\"#num_segments\">num_segments</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = &amp;<a class=\"id\" href=\"#internal_name\">internal_name</a>[(<a class=\"id\" href=\"#acpi_size\">acpi_size</a>) <a class=\"id\" href=\"#i\">i</a> + 2];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Build the name (minus path separators) */</span>", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#num_segments\">num_segments</a>; <a class=\"id\" href=\"#num_segments\">num_segments</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_NAME_SIZE\">ACPI_NAME_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_ns_valid_path_separator\">acpi_ns_valid_path_separator</a>(*<a class=\"id\" href=\"#external_name\">external_name</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (*<a class=\"id\" href=\"#external_name\">external_name</a> == 0)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Pad the segment with underscore(s) if segment is short */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a>[<a class=\"id\" href=\"#i\">i</a>] = '_';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Convert the character to uppercase and save it */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a>[<a class=\"id\" href=\"#i\">i</a>] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (char)<a class=\"id\" href=\"#ACPI_TOUPPER\">ACPI_TOUPPER</a>((int)*<a class=\"id\" href=\"#external_name\">external_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#external_name\">external_name</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Now we must have a path separator, or the pathname is bad */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_ns_valid_path_separator\">acpi_ns_valid_path_separator</a>(*<a class=\"id\" href=\"#external_name\">external_name</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (*<a class=\"id\" href=\"#external_name\">external_name</a> != 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Move on the next segment */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#external_name\">external_name</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> += <a class=\"id\" href=\"#ACPI_NAME_SIZE\">ACPI_NAME_SIZE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Terminate the string */</span>", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#result\">result</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#fully_qualified\">fully_qualified</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Returning [%p] (abs) \\\"\\\\%s\\\"\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#internal_name\">internal_name</a>, <a class=\"id\" href=\"#internal_name\">internal_name</a>));", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>, \"Returning [%p] (rel) \\\"%s\\\"\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#internal_name\">internal_name</a>, <a class=\"id\" href=\"#internal_name\">internal_name</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_internalize_name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  *external_name          - External representation of name</span>", 
"<span class=\"comment\"> *              **Converted Name        - Where to return the resulting</span>", 
"<span class=\"comment\"> *                                        internal represention of the name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Convert an external representation (e.g. \"\\_PR_.CPU0\")</span>", 
"<span class=\"comment\"> *              to internal form (e.g. 5c 2f 02 5f 50 52 5f 43 50 55 30)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_internalize_name\">acpi_ns_internalize_name</a>(const char *<a class=\"id\" href=\"#external_name\">external_name</a>, char **<a class=\"id\" href=\"#converted_name\">converted_name</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#internal_name\">internal_name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namestring_info\">acpi_namestring_info</a> <a class=\"id\" href=\"#info\">info</a>;", 
];
xr_frag_insert('l/b9/812742c4323c545f1045913ad6a5fc7e7e1faf.xr', __xr_tmp);
