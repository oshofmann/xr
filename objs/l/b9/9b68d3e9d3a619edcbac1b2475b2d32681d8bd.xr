var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stringify\">stringify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kprobes\">kprobes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memory\">memory</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stop_machine\">stop_machine</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#alternative\">alternative</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#sections\">sections</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mce\">mce</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#nmi\">nmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#vsyscall\">vsyscall</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#fixmap\">fixmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_PATCH_LEN\">MAX_PATCH_LEN</a> (255-1)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"static int <a class=\"id\" href=\"#smp_alt_once\">smp_alt_once</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#bootonly\">bootonly</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_alt_once\">smp_alt_once</a> = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"smp-alt-boot\", <a class=\"id\" href=\"#bootonly\">bootonly</a>);", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_alt_once\">smp_alt_once</a> 1", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#__initdata_or_module\">__initdata_or_module</a> <a class=\"id\" href=\"#debug_alternative\">debug_alternative</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#debug_alt\">debug_alt</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_alternative\">debug_alternative</a> = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"debug-alternative\", <a class=\"id\" href=\"#debug_alt\">debug_alt</a>);", 
"", 
"static int <a class=\"id\" href=\"#noreplace_smp\">noreplace_smp</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_noreplace_smp\">setup_noreplace_smp</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#noreplace_smp\">noreplace_smp</a> = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"noreplace-smp\", <a class=\"id\" href=\"#setup_noreplace_smp\">setup_noreplace_smp</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PARAVIRT\">CONFIG_PARAVIRT</a>", 
"static int <a class=\"id\" href=\"#__initdata_or_module\">__initdata_or_module</a> <a class=\"id\" href=\"#noreplace_paravirt\">noreplace_paravirt</a> = 0;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_noreplace_paravirt\">setup_noreplace_paravirt</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#noreplace_paravirt\">noreplace_paravirt</a> = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"noreplace-paravirt\", <a class=\"id\" href=\"#setup_noreplace_paravirt\">setup_noreplace_paravirt</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...) if (<a class=\"id\" href=\"#debug_alternative\">debug_alternative</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>)", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#GENERIC_NOP1\">GENERIC_NOP1</a>) && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>)", 
"<span class=\"comment\">/* Use inline assembly to define this because the nops are defined</span>", 
"<span class=\"comment\">   as inline assembly strings in the include files and we cannot</span>", 
"<span class=\"comment\">   get them easily into strings. */</span>", 
"<a class=\"id\" href=\"#asm\">asm</a>(\"\\t\" <a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#__INITRODATA_OR_MODULE\">__INITRODATA_OR_MODULE</a>) \"\\nintelnops: \"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GENERIC_NOP1\">GENERIC_NOP1</a> <a class=\"id\" href=\"#GENERIC_NOP2\">GENERIC_NOP2</a> <a class=\"id\" href=\"#GENERIC_NOP3\">GENERIC_NOP3</a> <a class=\"id\" href=\"#GENERIC_NOP4\">GENERIC_NOP4</a> <a class=\"id\" href=\"#GENERIC_NOP5\">GENERIC_NOP5</a> <a class=\"id\" href=\"#GENERIC_NOP6\">GENERIC_NOP6</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#GENERIC_NOP7\">GENERIC_NOP7</a> <a class=\"id\" href=\"#GENERIC_NOP8\">GENERIC_NOP8</a>", 
"    \"\\t.previous\");", 
"extern const unsigned char <a class=\"id\" href=\"#intelnops\">intelnops</a>[];", 
"static const unsigned char *const <a class=\"id\" href=\"#__initconst_or_module\">__initconst_or_module</a>", 
"<a class=\"id\" href=\"#intel_nops\">intel_nops</a>[<a class=\"id\" href=\"#ASM_NOP_MAX\">ASM_NOP_MAX</a>+1] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#intelnops\">intelnops</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#intelnops\">intelnops</a> + 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#intelnops\">intelnops</a> + 1 + 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#intelnops\">intelnops</a> + 1 + 2 + 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#intelnops\">intelnops</a> + 1 + 2 + 3 + 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#intelnops\">intelnops</a> + 1 + 2 + 3 + 4 + 5,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#intelnops\">intelnops</a> + 1 + 2 + 3 + 4 + 5 + 6,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#intelnops\">intelnops</a> + 1 + 2 + 3 + 4 + 5 + 6 + 7,", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#K8_NOP1\">K8_NOP1</a>", 
"<a class=\"id\" href=\"#asm\">asm</a>(\"\\t\" <a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#__INITRODATA_OR_MODULE\">__INITRODATA_OR_MODULE</a>) \"\\nk8nops: \"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#K8_NOP1\">K8_NOP1</a> <a class=\"id\" href=\"#K8_NOP2\">K8_NOP2</a> <a class=\"id\" href=\"#K8_NOP3\">K8_NOP3</a> <a class=\"id\" href=\"#K8_NOP4\">K8_NOP4</a> <a class=\"id\" href=\"#K8_NOP5\">K8_NOP5</a> <a class=\"id\" href=\"#K8_NOP6\">K8_NOP6</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#K8_NOP7\">K8_NOP7</a> <a class=\"id\" href=\"#K8_NOP8\">K8_NOP8</a>", 
"    \"\\t.previous\");", 
"extern const unsigned char <a class=\"id\" href=\"#k8nops\">k8nops</a>[];", 
"static const unsigned char *const <a class=\"id\" href=\"#__initconst_or_module\">__initconst_or_module</a>", 
"<a class=\"id\" href=\"#k8_nops\">k8_nops</a>[<a class=\"id\" href=\"#ASM_NOP_MAX\">ASM_NOP_MAX</a>+1] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k8nops\">k8nops</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k8nops\">k8nops</a> + 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k8nops\">k8nops</a> + 1 + 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k8nops\">k8nops</a> + 1 + 2 + 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k8nops\">k8nops</a> + 1 + 2 + 3 + 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k8nops\">k8nops</a> + 1 + 2 + 3 + 4 + 5,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k8nops\">k8nops</a> + 1 + 2 + 3 + 4 + 5 + 6,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k8nops\">k8nops</a> + 1 + 2 + 3 + 4 + 5 + 6 + 7,", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#K7_NOP1\">K7_NOP1</a>) && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>)", 
"<a class=\"id\" href=\"#asm\">asm</a>(\"\\t\" <a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#__INITRODATA_OR_MODULE\">__INITRODATA_OR_MODULE</a>) \"\\nk7nops: \"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#K7_NOP1\">K7_NOP1</a> <a class=\"id\" href=\"#K7_NOP2\">K7_NOP2</a> <a class=\"id\" href=\"#K7_NOP3\">K7_NOP3</a> <a class=\"id\" href=\"#K7_NOP4\">K7_NOP4</a> <a class=\"id\" href=\"#K7_NOP5\">K7_NOP5</a> <a class=\"id\" href=\"#K7_NOP6\">K7_NOP6</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#K7_NOP7\">K7_NOP7</a> <a class=\"id\" href=\"#K7_NOP8\">K7_NOP8</a>", 
"    \"\\t.previous\");", 
"extern const unsigned char <a class=\"id\" href=\"#k7nops\">k7nops</a>[];", 
"static const unsigned char *const <a class=\"id\" href=\"#__initconst_or_module\">__initconst_or_module</a>", 
"<a class=\"id\" href=\"#k7_nops\">k7_nops</a>[<a class=\"id\" href=\"#ASM_NOP_MAX\">ASM_NOP_MAX</a>+1] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k7nops\">k7nops</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k7nops\">k7nops</a> + 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k7nops\">k7nops</a> + 1 + 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k7nops\">k7nops</a> + 1 + 2 + 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k7nops\">k7nops</a> + 1 + 2 + 3 + 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k7nops\">k7nops</a> + 1 + 2 + 3 + 4 + 5,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k7nops\">k7nops</a> + 1 + 2 + 3 + 4 + 5 + 6,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k7nops\">k7nops</a> + 1 + 2 + 3 + 4 + 5 + 6 + 7,", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#P6_NOP1\">P6_NOP1</a>", 
"<a class=\"id\" href=\"#asm\">asm</a>(\"\\t\" <a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#__INITRODATA_OR_MODULE\">__INITRODATA_OR_MODULE</a>) \"\\np6nops: \"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#P6_NOP1\">P6_NOP1</a> <a class=\"id\" href=\"#P6_NOP2\">P6_NOP2</a> <a class=\"id\" href=\"#P6_NOP3\">P6_NOP3</a> <a class=\"id\" href=\"#P6_NOP4\">P6_NOP4</a> <a class=\"id\" href=\"#P6_NOP5\">P6_NOP5</a> <a class=\"id\" href=\"#P6_NOP6\">P6_NOP6</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#P6_NOP7\">P6_NOP7</a> <a class=\"id\" href=\"#P6_NOP8\">P6_NOP8</a>", 
"    \"\\t.previous\");", 
"extern const unsigned char <a class=\"id\" href=\"#p6nops\">p6nops</a>[];", 
"static const unsigned char *const <a class=\"id\" href=\"#__initconst_or_module\">__initconst_or_module</a>", 
"<a class=\"id\" href=\"#p6_nops\">p6_nops</a>[<a class=\"id\" href=\"#ASM_NOP_MAX\">ASM_NOP_MAX</a>+1] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p6nops\">p6nops</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p6nops\">p6nops</a> + 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p6nops\">p6nops</a> + 1 + 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p6nops\">p6nops</a> + 1 + 2 + 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p6nops\">p6nops</a> + 1 + 2 + 3 + 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p6nops\">p6nops</a> + 1 + 2 + 3 + 4 + 5,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p6nops\">p6nops</a> + 1 + 2 + 3 + 4 + 5 + 6,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p6nops\">p6nops</a> + 1 + 2 + 3 + 4 + 5 + 6 + 7,", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"", 
"extern char <a class=\"id\" href=\"#__vsyscall_0\">__vsyscall_0</a>;", 
"static const unsigned char *const *<a class=\"id\" href=\"#__init_or_module\">__init_or_module</a> <a class=\"id\" href=\"#find_nop_table\">find_nop_table</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> == <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_NOPL\">X86_FEATURE_NOPL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p6_nops\">p6_nops</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#k8_nops\">k8_nops</a>;", 
"}", 
"", 
"#else <span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"", 
"static const unsigned char *const *<a class=\"id\" href=\"#__init_or_module\">__init_or_module</a> <a class=\"id\" href=\"#find_nop_table\">find_nop_table</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_K8\">X86_FEATURE_K8</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#k8_nops\">k8_nops</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_K7\">X86_FEATURE_K7</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#k7_nops\">k7_nops</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_NOPL\">X86_FEATURE_NOPL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p6_nops\">p6_nops</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#intel_nops\">intel_nops</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"", 
"<span class=\"comment\">/* Use this to add nops to a buffer, then text_poke the whole buffer. */</span>", 
"static void <a class=\"id\" href=\"#__init_or_module\">__init_or_module</a> <a class=\"id\" href=\"#add_nops\">add_nops</a>(void *<a class=\"id\" href=\"#insns\">insns</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned char *const *<a class=\"id\" href=\"#noptable\">noptable</a> = <a class=\"id\" href=\"#find_nop_table\">find_nop_table</a>();", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#noplen\">noplen</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#noplen\">noplen</a> &gt; <a class=\"id\" href=\"#ASM_NOP_MAX\">ASM_NOP_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#noplen\">noplen</a> = <a class=\"id\" href=\"#ASM_NOP_MAX\">ASM_NOP_MAX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#insns\">insns</a>, <a class=\"id\" href=\"#noptable\">noptable</a>[<a class=\"id\" href=\"#noplen\">noplen</a>], <a class=\"id\" href=\"#noplen\">noplen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insns\">insns</a> += <a class=\"id\" href=\"#noplen\">noplen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#noplen\">noplen</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#alt_instr\">alt_instr</a> <a class=\"id\" href=\"#__alt_instructions\">__alt_instructions</a>[], <a class=\"id\" href=\"#__alt_instructions_end\">__alt_instructions_end</a>[];", 
"extern <a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#__smp_locks\">__smp_locks</a>[], <a class=\"id\" href=\"#__smp_locks_end\">__smp_locks_end</a>[];", 
"static void *<a class=\"id\" href=\"#text_poke_early\">text_poke_early</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, const void *<a class=\"id\" href=\"#opcode\">opcode</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"comment\">/* Replace instructions with better alternatives for this CPU type.</span>", 
"<span class=\"comment\">   This runs before SMP is initialized to avoid SMP problems with</span>", 
"<span class=\"comment\">   self modifying code. This implies that assymetric systems where</span>", 
"<span class=\"comment\">   APs have less capabilities than the boot processor are not handled.</span>", 
"<span class=\"comment\">   Tough. Make sure you disable such features by hand. */</span>", 
"", 
"void <a class=\"id\" href=\"#__init_or_module\">__init_or_module</a> <a class=\"id\" href=\"#apply_alternatives\">apply_alternatives</a>(struct <a class=\"id\" href=\"#alt_instr\">alt_instr</a> *<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#alt_instr\">alt_instr</a> *<a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#alt_instr\">alt_instr</a> *<a class=\"id\" href=\"#a\">a</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#insnbuf\">insnbuf</a>[<a class=\"id\" href=\"#MAX_PATCH_LEN\">MAX_PATCH_LEN</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"%s: alt table %p -> %p\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#a\">a</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#a\">a</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#a\">a</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#instr\">instr</a> = <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#instr\">instr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#replacementlen\">replacementlen</a> &gt; <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#instrlen\">instrlen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#instrlen\">instrlen</a> &gt; sizeof(<a class=\"id\" href=\"#insnbuf\">insnbuf</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#cpuid\">cpuid</a> >= <a class=\"id\" href=\"#NCAPINTS\">NCAPINTS</a>*32);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#cpuid\">cpuid</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* vsyscall code is not mapped yet. resolve it manually. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#instr\">instr</a> >= (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#VSYSCALL_START\">VSYSCALL_START</a> && <a class=\"id\" href=\"#instr\">instr</a> &lt; (<a class=\"id\" href=\"#u8\">u8</a>*)<a class=\"id\" href=\"#VSYSCALL_END\">VSYSCALL_END</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#instr\">instr</a> = <a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#instr\">instr</a> - (<a class=\"id\" href=\"#u8\">u8</a>*)<a class=\"id\" href=\"#VSYSCALL_START\">VSYSCALL_START</a> + (<a class=\"id\" href=\"#u8\">u8</a>*)<a class=\"id\" href=\"#__pa_symbol\">__pa_symbol</a>(&amp;<a class=\"id\" href=\"#__vsyscall_0\">__vsyscall_0</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"%s: vsyscall fixup: %p => %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#instr\">instr</a>, <a class=\"id\" href=\"#instr\">instr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#insnbuf\">insnbuf</a>, <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#replacement\">replacement</a>, <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#replacementlen\">replacementlen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#insnbuf\">insnbuf</a> == 0xe8 && <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#replacementlen\">replacementlen</a> == 5)", 
"<span class=\"ts\"/><span class=\"ts\"/>    *(<a class=\"id\" href=\"#s32\">s32</a> *)(<a class=\"id\" href=\"#insnbuf\">insnbuf</a> + 1) += <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#replacement\">replacement</a> - <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#instr\">instr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_nops\">add_nops</a>(<a class=\"id\" href=\"#insnbuf\">insnbuf</a> + <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#replacementlen\">replacementlen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#instrlen\">instrlen</a> - <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#replacementlen\">replacementlen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#text_poke_early\">text_poke_early</a>(<a class=\"id\" href=\"#instr\">instr</a>, <a class=\"id\" href=\"#insnbuf\">insnbuf</a>, <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#instrlen\">instrlen</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"static void <a class=\"id\" href=\"#alternatives_smp_lock\">alternatives_smp_lock</a>(const <a class=\"id\" href=\"#s32\">s32</a> *<a class=\"id\" href=\"#start\">start</a>, const <a class=\"id\" href=\"#s32\">s32</a> *<a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#text\">text</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#text_end\">text_end</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#s32\">s32</a> *<a class=\"id\" href=\"#poff\">poff</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#poff\">poff</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#poff\">poff</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#poff\">poff</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ptr\">ptr</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#poff\">poff</a> + *<a class=\"id\" href=\"#poff\">poff</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#poff\">poff</a> || <a class=\"id\" href=\"#ptr\">ptr</a> &lt; <a class=\"id\" href=\"#text\">text</a> || <a class=\"id\" href=\"#ptr\">ptr</a> >= <a class=\"id\" href=\"#text_end\">text_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* turn DS segment override prefix into lock prefix */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#ptr\">ptr</a> == 0x3e)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#text_poke\">text_poke</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, ((unsigned char []){0xf0}), 1);", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#alternatives_smp_unlock\">alternatives_smp_unlock</a>(const <a class=\"id\" href=\"#s32\">s32</a> *<a class=\"id\" href=\"#start\">start</a>, const <a class=\"id\" href=\"#s32\">s32</a> *<a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#text\">text</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#text_end\">text_end</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#s32\">s32</a> *<a class=\"id\" href=\"#poff\">poff</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#noreplace_smp\">noreplace_smp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#poff\">poff</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#poff\">poff</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#poff\">poff</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ptr\">ptr</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#poff\">poff</a> + *<a class=\"id\" href=\"#poff\">poff</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#poff\">poff</a> || <a class=\"id\" href=\"#ptr\">ptr</a> &lt; <a class=\"id\" href=\"#text\">text</a> || <a class=\"id\" href=\"#ptr\">ptr</a> >= <a class=\"id\" href=\"#text_end\">text_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* turn lock prefix into DS segment override prefix */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#ptr\">ptr</a> == 0xf0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#text_poke\">text_poke</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, ((unsigned char []){0x3E}), 1);", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#text_mutex\">text_mutex</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#smp_alt_module\">smp_alt_module</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* what is this ??? */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a><span class=\"ts\"/>*<a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ptrs to lock prefixes */</span>", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#s32\">s32</a><span class=\"ts\"/>*<a class=\"id\" href=\"#locks\">locks</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#s32\">s32</a><span class=\"ts\"/>*<a class=\"id\" href=\"#locks_end\">locks_end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* .text segment, needed to avoid patching init code ;) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#text\">text</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#text_end\">text_end</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#next\">next</a>;", 
"};", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#smp_alt_modules\">smp_alt_modules</a>);", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#smp_alt\">smp_alt</a>);", 
"static int <a class=\"id\" href=\"#smp_mode\">smp_mode</a> = 1;<span class=\"ts\"/><span class=\"comment\">/* protected by smp_alt */</span>", 
"", 
"void <a class=\"id\" href=\"#__init_or_module\">__init_or_module</a> <a class=\"id\" href=\"#alternatives_smp_module_add\">alternatives_smp_module_add</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#locks\">locks</a>, void *<a class=\"id\" href=\"#locks_end\">locks_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#text\">text</a>,  void *<a class=\"id\" href=\"#text_end\">text_end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smp_alt_module\">smp_alt_module</a> *<a class=\"id\" href=\"#smp\">smp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#noreplace_smp\">noreplace_smp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_alt_once\">smp_alt_once</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_UP\">X86_FEATURE_UP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alternatives_smp_unlock\">alternatives_smp_unlock</a>(<a class=\"id\" href=\"#locks\">locks</a>, <a class=\"id\" href=\"#locks_end\">locks_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#text\">text</a>, <a class=\"id\" href=\"#text_end\">text_end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp\">smp</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#smp\">smp</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#NULL\">NULL</a> == <a class=\"id\" href=\"#smp\">smp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return; <span class=\"comment\">/* we'll run the (safe but slow) SMP code then ... */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#mod\">mod</a><span class=\"ts\"/>= <a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/>= <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#locks\">locks</a><span class=\"ts\"/>= <a class=\"id\" href=\"#locks\">locks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#locks_end\">locks_end</a><span class=\"ts\"/>= <a class=\"id\" href=\"#locks_end\">locks_end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#text\">text</a><span class=\"ts\"/>= <a class=\"id\" href=\"#text\">text</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#text_end\">text_end</a><span class=\"ts\"/>= <a class=\"id\" href=\"#text_end\">text_end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"%s: locks %p -> %p, text %p -> %p, name %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#locks\">locks</a>, <a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#locks_end\">locks_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#text\">text</a>, <a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#text_end\">text_end</a>, <a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#smp_alt\">smp_alt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#smp_alt_modules\">smp_alt_modules</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_UP\">X86_FEATURE_UP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alternatives_smp_unlock\">alternatives_smp_unlock</a>(<a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#locks\">locks</a>, <a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#locks_end\">locks_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#text\">text</a>, <a class=\"id\" href=\"#smp\">smp</a>-><a class=\"id\" href=\"#text_end\">text_end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#smp_alt\">smp_alt</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init_or_module\">__init_or_module</a> <a class=\"id\" href=\"#alternatives_smp_module_del\">alternatives_smp_module_del</a>(struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smp_alt_module\">smp_alt_module</a> *<a class=\"id\" href=\"#item\">item</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_alt_once\">smp_alt_once</a> || <a class=\"id\" href=\"#noreplace_smp\">noreplace_smp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#smp_alt\">smp_alt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#item\">item</a>, &amp;<a class=\"id\" href=\"#smp_alt_modules\">smp_alt_modules</a>, <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a> != <a class=\"id\" href=\"#item\">item</a>-><a class=\"id\" href=\"#mod\">mod</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#item\">item</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#smp_alt\">smp_alt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"%s: %s\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#item\">item</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#item\">item</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#smp_alt\">smp_alt</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#alternatives_smp_switch\">alternatives_smp_switch</a>(int <a class=\"id\" href=\"#smp\">smp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smp_alt_module\">smp_alt_module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Older binutils section handling bug prevented</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * alternatives-replacement from working reliably.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this still occurs then you should see a hang</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or crash shortly after this line:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"lockdep: fixing up alternatives.\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#noreplace_smp\">noreplace_smp</a> || <a class=\"id\" href=\"#smp_alt_once\">smp_alt_once</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#smp\">smp</a> && (<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() &gt; 1));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#smp_alt\">smp_alt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Avoid unnecessary switches because it forces JIT based VMs to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * throw away all cached translations, which can be quite costly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp\">smp</a> == <a class=\"id\" href=\"#smp_mode\">smp_mode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nothing */</span>", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#smp\">smp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"SMP alternatives: switching to SMP code\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(&amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>, <a class=\"id\" href=\"#X86_FEATURE_UP\">X86_FEATURE_UP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_cpu_cap\">clear_cpu_cap</a>(&amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(0), <a class=\"id\" href=\"#X86_FEATURE_UP\">X86_FEATURE_UP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#smp_alt_modules\">smp_alt_modules</a>, <a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alternatives_smp_lock\">alternatives_smp_lock</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#locks\">locks</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#locks_end\">locks_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#text\">text</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#text_end\">text_end</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"SMP alternatives: switching to UP code\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(&amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>, <a class=\"id\" href=\"#X86_FEATURE_UP\">X86_FEATURE_UP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(&amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(0), <a class=\"id\" href=\"#X86_FEATURE_UP\">X86_FEATURE_UP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#smp_alt_modules\">smp_alt_modules</a>, <a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alternatives_smp_unlock\">alternatives_smp_unlock</a>(<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#locks\">locks</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#locks_end\">locks_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#text\">text</a>, <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#text_end\">text_end</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mode\">smp_mode</a> = <a class=\"id\" href=\"#smp\">smp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#smp_alt\">smp_alt</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Return 1 if the address range is reserved for smp-alternatives */</span>", 
"int <a class=\"id\" href=\"#alternatives_text_reserved\">alternatives_text_reserved</a>(void *<a class=\"id\" href=\"#start\">start</a>, void *<a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#smp_alt_module\">smp_alt_module</a> *<a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#s32\">s32</a> *<a class=\"id\" href=\"#poff\">poff</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#text_start\">text_start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#text_end\">text_end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#mod\">mod</a>, &amp;<a class=\"id\" href=\"#smp_alt_modules\">smp_alt_modules</a>, <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#text\">text</a> &gt; <a class=\"id\" href=\"#text_end\">text_end</a> || <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#text_end\">text_end</a> &lt; <a class=\"id\" href=\"#text_start\">text_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#poff\">poff</a> = <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#locks\">locks</a>; <a class=\"id\" href=\"#poff\">poff</a> &lt; <a class=\"id\" href=\"#mod\">mod</a>-><a class=\"id\" href=\"#locks_end\">locks_end</a>; <a class=\"id\" href=\"#poff\">poff</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ptr\">ptr</a> = (const <a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#poff\">poff</a> + *<a class=\"id\" href=\"#poff\">poff</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#text_start\">text_start</a> <= <a class=\"id\" href=\"#ptr\">ptr</a> && <a class=\"id\" href=\"#text_end\">text_end</a> &gt; <a class=\"id\" href=\"#ptr\">ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PARAVIRT\">CONFIG_PARAVIRT</a>", 
"void <a class=\"id\" href=\"#__init_or_module\">__init_or_module</a> <a class=\"id\" href=\"#apply_paravirt\">apply_paravirt</a>(struct <a class=\"id\" href=\"#paravirt_patch_site\">paravirt_patch_site</a> *<a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#paravirt_patch_site\">paravirt_patch_site</a> *<a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#paravirt_patch_site\">paravirt_patch_site</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#insnbuf\">insnbuf</a>[<a class=\"id\" href=\"#MAX_PATCH_LEN\">MAX_PATCH_LEN</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#noreplace_paravirt\">noreplace_paravirt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#p\">p</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#used\">used</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#MAX_PATCH_LEN\">MAX_PATCH_LEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* prep the buffer with the original instructions */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#insnbuf\">insnbuf</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#instr\">instr</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#used\">used</a> = <a class=\"id\" href=\"#pv_init_ops\">pv_init_ops</a>.<a class=\"id\" href=\"#patch\">patch</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#instrtype\">instrtype</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#clobbers\">clobbers</a>, <a class=\"id\" href=\"#insnbuf\">insnbuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#instr\">instr</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#used\">used</a> &gt; <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Pad the rest with nops */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_nops\">add_nops</a>(<a class=\"id\" href=\"#insnbuf\">insnbuf</a> + <a class=\"id\" href=\"#used\">used</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#used\">used</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#text_poke_early\">text_poke_early</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#instr\">instr</a>, <a class=\"id\" href=\"#insnbuf\">insnbuf</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"extern struct <a class=\"id\" href=\"#paravirt_patch_site\">paravirt_patch_site</a> <a class=\"id\" href=\"#__start_parainstructions\">__start_parainstructions</a>[],", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__stop_parainstructions\">__stop_parainstructions</a>[];", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_PARAVIRT */</span>", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#alternative_instructions\">alternative_instructions</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* The patching is not fully atomic, so try to avoid local interruptions</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   that might execute the to be patched code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Other CPUs are not running. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stop_nmi\">stop_nmi</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't stop machine check exceptions while patching.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MCEs only happen when something got corrupted and in this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case we must do something about the corruption.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ignoring it is worse than a unlikely patching race.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Also machine checks tend to be broadcast and if one CPU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * goes into machine check the others follow quickly, so we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * expect a machine check to cause undue problems during to code</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * patching.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apply_alternatives\">apply_alternatives</a>(<a class=\"id\" href=\"#__alt_instructions\">__alt_instructions</a>, <a class=\"id\" href=\"#__alt_instructions_end\">__alt_instructions_end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* switch to patch-once-at-boottime-only mode and free the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tables in case we know the number of CPUs will never ever</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * change */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>() &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_alt_once\">smp_alt_once</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_alt_once\">smp_alt_once</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (1 == <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"SMP alternatives: switching to UP code\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(&amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>, <a class=\"id\" href=\"#X86_FEATURE_UP\">X86_FEATURE_UP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(&amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(0), <a class=\"id\" href=\"#X86_FEATURE_UP\">X86_FEATURE_UP</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alternatives_smp_unlock\">alternatives_smp_unlock</a>(<a class=\"id\" href=\"#__smp_locks\">__smp_locks</a>, <a class=\"id\" href=\"#__smp_locks_end\">__smp_locks_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_text\">_text</a>, <a class=\"id\" href=\"#_etext\">_etext</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alternatives_smp_module_add\">alternatives_smp_module_add</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, \"core kernel\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__smp_locks\">__smp_locks</a>, <a class=\"id\" href=\"#__smp_locks_end\">__smp_locks_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#_text\">_text</a>, <a class=\"id\" href=\"#_etext\">_etext</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Only switch to UP mode if we don't immediately boot others */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#num_present_cpus\">num_present_cpus</a>() == 1 || <a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a> <= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alternatives_smp_switch\">alternatives_smp_switch</a>(0);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
" <span class=\"ts\"/><a class=\"id\" href=\"#apply_paravirt\">apply_paravirt</a>(<a class=\"id\" href=\"#__parainstructions\">__parainstructions</a>, <a class=\"id\" href=\"#__parainstructions_end\">__parainstructions_end</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_alt_once\">smp_alt_once</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_init_pages\">free_init_pages</a>(\"SMP alternatives\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#__smp_locks\">__smp_locks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#__smp_locks_end\">__smp_locks_end</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restart_nmi\">restart_nmi</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * text_poke_early - Update instructions on a live kernel at boot time</span>", 
"<span class=\"comment\"> * @addr: address to modify</span>", 
"<span class=\"comment\"> * @opcode: source of the copy</span>", 
"<span class=\"comment\"> * @len: length to copy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When you use this code to patch more than one byte of an instruction</span>", 
"<span class=\"comment\"> * you need to make sure that other CPUs cannot execute this code in parallel.</span>", 
"<span class=\"comment\"> * Also no thread must be currently preempted in the middle of these</span>", 
"<span class=\"comment\"> * instructions. And on the local CPU you need to be protected again NMI or MCE</span>", 
"<span class=\"comment\"> * handlers seeing an inconsistent instruction while you patch.</span>", 
"<span class=\"comment\"> */</span>", 
"static void *<a class=\"id\" href=\"#__init_or_module\">__init_or_module</a> <a class=\"id\" href=\"#text_poke_early\">text_poke_early</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, const void *<a class=\"id\" href=\"#opcode\">opcode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#opcode\">opcode</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_core\">sync_core</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Could also do a CLFLUSH here to speed up CPU recovery; but</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   that causes hangs on some VIA CPUs. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * text_poke - Update instructions on a live kernel</span>", 
"<span class=\"comment\"> * @addr: address to modify</span>", 
"<span class=\"comment\"> * @opcode: source of the copy</span>", 
"<span class=\"comment\"> * @len: length to copy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Only atomic text poke/set should be allowed when not doing early patching.</span>", 
"<span class=\"comment\"> * It means the size must be writable atomically and the address must be aligned</span>", 
"<span class=\"comment\"> * in a way that permits an atomic write. It also makes sure we fit on a single</span>", 
"<span class=\"comment\"> * page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: Must be called under text_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#text_poke\">text_poke</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, const void *<a class=\"id\" href=\"#opcode\">opcode</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pages\">pages</a>[2];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#core_kernel_text\">core_kernel_text</a>((unsigned long)<a class=\"id\" href=\"#addr\">addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>[0] = <a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>[1] = <a class=\"id\" href=\"#vmalloc_to_page\">vmalloc_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>[0] = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#PageReserved\">PageReserved</a>(<a class=\"id\" href=\"#pages\">pages</a>[0]));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>[1] = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#pages\">pages</a>[0]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fixmap\">set_fixmap</a>(<a class=\"id\" href=\"#FIX_TEXT_POKE0\">FIX_TEXT_POKE0</a>, <a class=\"id\" href=\"#page_to_phys\">page_to_phys</a>(<a class=\"id\" href=\"#pages\">pages</a>[0]));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pages\">pages</a>[1])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_fixmap\">set_fixmap</a>(<a class=\"id\" href=\"#FIX_TEXT_POKE1\">FIX_TEXT_POKE1</a>, <a class=\"id\" href=\"#page_to_phys\">page_to_phys</a>(<a class=\"id\" href=\"#pages\">pages</a>[1]));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = (char *)<a class=\"id\" href=\"#fix_to_virt\">fix_to_virt</a>(<a class=\"id\" href=\"#FIX_TEXT_POKE0\">FIX_TEXT_POKE0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#vaddr\">vaddr</a>[(unsigned long)<a class=\"id\" href=\"#addr\">addr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>], <a class=\"id\" href=\"#opcode\">opcode</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_fixmap\">clear_fixmap</a>(<a class=\"id\" href=\"#FIX_TEXT_POKE0\">FIX_TEXT_POKE0</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pages\">pages</a>[1])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_fixmap\">clear_fixmap</a>(<a class=\"id\" href=\"#FIX_TEXT_POKE1\">FIX_TEXT_POKE1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_flush_tlb\">local_flush_tlb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_core\">sync_core</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Could also do a CLFLUSH here to speed up CPU recovery; but</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   that causes hangs on some VIA CPUs. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(((char *)<a class=\"id\" href=\"#addr\">addr</a>)[<a class=\"id\" href=\"#i\">i</a>] != ((char *)<a class=\"id\" href=\"#opcode\">opcode</a>)[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Cross-modifying kernel text with stop_machine().</span>", 
"<span class=\"comment\"> * This code originally comes from immediate value.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#stop_machine_first\">stop_machine_first</a>;", 
"static int <a class=\"id\" href=\"#wrote_text\">wrote_text</a>;", 
"", 
"struct <a class=\"id\" href=\"#text_poke_params\">text_poke_params</a> {", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>const void *<a class=\"id\" href=\"#opcode\">opcode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#stop_machine_text_poke\">stop_machine_text_poke</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#text_poke_params\">text_poke_params</a> *<a class=\"id\" href=\"#tpp\">tpp</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#stop_machine_first\">stop_machine_first</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#text_poke\">text_poke</a>(<a class=\"id\" href=\"#tpp\">tpp</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#tpp\">tpp</a>-><a class=\"id\" href=\"#opcode\">opcode</a>, <a class=\"id\" href=\"#tpp\">tpp</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();<span class=\"ts\"/><span class=\"comment\">/* Make sure other cpus see that this has run */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrote_text\">wrote_text</a> = 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#wrote_text\">wrote_text</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();<span class=\"ts\"/><span class=\"comment\">/* Load wrote_text before following execution */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_icache_range\">flush_icache_range</a>((unsigned long)<a class=\"id\" href=\"#tpp\">tpp</a>-><a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (unsigned long)<a class=\"id\" href=\"#tpp\">tpp</a>-><a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#tpp\">tpp</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * text_poke_smp - Update instructions on a live kernel on SMP</span>", 
"<span class=\"comment\"> * @addr: address to modify</span>", 
"<span class=\"comment\"> * @opcode: source of the copy</span>", 
"<span class=\"comment\"> * @len: length to copy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Modify multi-byte instruction by using stop_machine() on SMP. This allows</span>", 
"<span class=\"comment\"> * user to poke/set multi-byte text on SMP. Only non-NMI/MCE code modifying</span>", 
"<span class=\"comment\"> * should be allowed, since stop_machine() does _not_ protect code against</span>", 
"<span class=\"comment\"> * NMI and MCE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: Must be called under get_online_cpus() and text_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#__kprobes\">__kprobes</a> <a class=\"id\" href=\"#text_poke_smp\">text_poke_smp</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, const void *<a class=\"id\" href=\"#opcode\">opcode</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#text_poke_params\">text_poke_params</a> <a class=\"id\" href=\"#tpp\">tpp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tpp\">tpp</a>.<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tpp\">tpp</a>.<a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#opcode\">opcode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tpp\">tpp</a>.<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#stop_machine_first\">stop_machine_first</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrote_text\">wrote_text</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stop_machine\">stop_machine</a>(<a class=\"id\" href=\"#stop_machine_text_poke\">stop_machine_text_poke</a>, (void *)&amp;<a class=\"id\" href=\"#tpp\">tpp</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
];
xr_frag_insert('l/b9/9b68d3e9d3a619edcbac1b2475b2d32681d8bd.xr', __xr_tmp);
