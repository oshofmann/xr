var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * net/dst.h<span class=\"ts\"/>Protocol independent destination cache definitions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:<span class=\"ts\"/>Alexey Kuznetsov, &lt;kuznet@ms2.inr.ac.ru&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_NET_DST_H\">_NET_DST_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_NET_DST_H\">_NET_DST_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#dst_ops\">dst_ops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rtnetlink\">rtnetlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#neighbour\">neighbour</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * 0 - no debugging messages</span>", 
"<span class=\"comment\"> * 1 - rare events and bugs (default)</span>", 
"<span class=\"comment\"> * 2 - trace mode.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RT_CACHE_DEBUG\">RT_CACHE_DEBUG</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DST_GC_MIN\">DST_GC_MIN</a><span class=\"ts\"/>(<a class=\"id\" href=\"#HZ\">HZ</a>/10)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DST_GC_INC\">DST_GC_INC</a><span class=\"ts\"/>(<a class=\"id\" href=\"#HZ\">HZ</a>/2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DST_GC_MAX\">DST_GC_MAX</a><span class=\"ts\"/>(120*<a class=\"id\" href=\"#HZ\">HZ</a>)", 
"", 
"<span class=\"comment\">/* Each dst_entry has reference count and sits in some parent list(s).</span>", 
"<span class=\"comment\"> * When it is removed from parent list, it is \"freed\" (dst_free).</span>", 
"<span class=\"comment\"> * After this it enters dead state (dst-&gt;obsolete &gt; 0) and if its refcnt</span>", 
"<span class=\"comment\"> * is zero, it can be destroyed immediately, otherwise it is added</span>", 
"<span class=\"comment\"> * to gc list and garbage collector periodically checks the refcnt.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>;", 
"", 
"struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_head\">rcu_head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a><span class=\"ts\"/>*<a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a>       *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>short<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>short<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obsolete\">obsolete</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DST_HOST\">DST_HOST</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DST_NOXFRM\">DST_NOXFRM</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DST_NOPOLICY\">DST_NOPOLICY</a><span class=\"ts\"/><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DST_NOHASH\">DST_NOHASH</a><span class=\"ts\"/><span class=\"ts\"/>8", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a>;", 
"", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header_len\">header_len</a>;<span class=\"ts\"/><span class=\"comment\">/* more space at head required */</span>", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trailer_len\">trailer_len</a>;<span class=\"ts\"/><span class=\"comment\">/* space to reserve at tail */</span>", 
"", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rate_tokens\">rate_tokens</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rate_last\">rate_last</a>;<span class=\"ts\"/><span class=\"comment\">/* rate limiting for ICMP */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a><span class=\"ts\"/>*<a class=\"id\" href=\"#path\">path</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#neighbour\">neighbour</a><span class=\"ts\"/>*<a class=\"id\" href=\"#neighbour\">neighbour</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hh_cache\">hh_cache</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#hh\">hh</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_XFRM\">CONFIG_XFRM</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xfrm_state\">xfrm_state</a><span class=\"ts\"/>*<a class=\"id\" href=\"#xfrm\">xfrm</a>;", 
"#else", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#__pad1\">__pad1</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#input\">input</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>*);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#output\">output</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>*);", 
"", 
"<span class=\"ts\"/>struct  <a class=\"id\" href=\"#dst_ops\">dst_ops</a><span class=\"ts\"/>        *<a class=\"id\" href=\"#ops\">ops</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#metrics\">metrics</a>[<a class=\"id\" href=\"#RTAX_MAX\">RTAX_MAX</a>];", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_CLS_ROUTE\">CONFIG_NET_CLS_ROUTE</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tclassid\">tclassid</a>;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pad2\">__pad2</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Align __refcnt to a 64 bytes alignment</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (L1_CACHE_SIZE would be too much)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_64BIT\">CONFIG_64BIT</a>", 
"<span class=\"ts\"/>long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pad_to_align_refcnt\">__pad_to_align_refcnt</a>[1];", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __refcnt wants to be on a different cache line from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * input/output/ops or performance tanks badly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__refcnt\">__refcnt</a>;<span class=\"ts\"/><span class=\"comment\">/* client references<span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__use\">__use</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lastuse\">lastuse</a>;", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rtable\">rtable</a>    *<a class=\"id\" href=\"#rt_next\">rt_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rt6_info\">rt6_info</a>   *<a class=\"id\" href=\"#rt6_next\">rt6_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dn_route\">dn_route</a>  *<a class=\"id\" href=\"#dn_next\">dn_next</a>;", 
"<span class=\"ts\"/>};", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a>", 
"<a class=\"id\" href=\"#dst_metric\">dst_metric</a>(const struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#metric\">metric</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#metrics\">metrics</a>[<a class=\"id\" href=\"#metric\">metric</a>-1];", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a>", 
"<a class=\"id\" href=\"#dst_feature\">dst_feature</a>(const struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#feature\">feature</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_FEATURES\">RTAX_FEATURES</a>) &amp; <a class=\"id\" href=\"#feature\">feature</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#dst_mtu\">dst_mtu</a>(const struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mtu\">mtu</a> = <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_MTU\">RTAX_MTU</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Alexey put it here, so ask him about it :)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mtu\">mtu</a>;", 
"}", 
"", 
"<span class=\"comment\">/* RTT metrics are stored in milliseconds for user ABI, but used as jiffies */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#dst_metric_rtt\">dst_metric_rtt</a>(const struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#metric\">metric</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#metric\">metric</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_dst_metric_rtt\">set_dst_metric_rtt</a>(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#metric\">metric</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#rtt\">rtt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#metrics\">metrics</a>[<a class=\"id\" href=\"#metric\">metric</a>-1] = <a class=\"id\" href=\"#jiffies_to_msecs\">jiffies_to_msecs</a>(<a class=\"id\" href=\"#rtt\">rtt</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a>", 
"<a class=\"id\" href=\"#dst_allfrag\">dst_allfrag</a>(const struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dst_feature\">dst_feature</a>(<a class=\"id\" href=\"#dst\">dst</a>,  <a class=\"id\" href=\"#RTAX_FEATURE_ALLFRAG\">RTAX_FEATURE_ALLFRAG</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Yes, _exactly_. This is paranoia. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#dst_metric_locked\">dst_metric_locked</a>(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#metric\">metric</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dst_metric\">dst_metric</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#RTAX_LOCK\">RTAX_LOCK</a>) &amp; (1<<<a class=\"id\" href=\"#metric\">metric</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dst_hold\">dst_hold</a>(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> * <a class=\"id\" href=\"#dst\">dst</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If your kernel compilation stops here, please check</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __pad_to_align_refcnt declaration in struct dst_entry</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a>, <a class=\"id\" href=\"#__refcnt\">__refcnt</a>) &amp; 63);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#__refcnt\">__refcnt</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dst_use\">dst_use</a>(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>, unsigned long <a class=\"id\" href=\"#time\">time</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst_hold\">dst_hold</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#__use\">__use</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#lastuse\">lastuse</a> = <a class=\"id\" href=\"#time\">time</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dst_use_noref\">dst_use_noref</a>(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>, unsigned long <a class=\"id\" href=\"#time\">time</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#__use\">__use</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#lastuse\">lastuse</a> = <a class=\"id\" href=\"#time\">time</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> * <a class=\"id\" href=\"#dst_clone\">dst_clone</a>(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> * <a class=\"id\" href=\"#dst\">dst</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#__refcnt\">__refcnt</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dst\">dst</a>;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#dst_release\">dst_release</a>(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#refdst_drop\">refdst_drop</a>(unsigned long <a class=\"id\" href=\"#refdst\">refdst</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#refdst\">refdst</a> &amp; <a class=\"id\" href=\"#SKB_DST_NOREF\">SKB_DST_NOREF</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst_release\">dst_release</a>((struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *)(<a class=\"id\" href=\"#refdst\">refdst</a> &amp; <a class=\"id\" href=\"#SKB_DST_PTRMASK\">SKB_DST_PTRMASK</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * skb_dst_drop - drops skb dst</span>", 
"<span class=\"comment\"> * @skb: buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Drops dst reference count if a reference was taken.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_dst_drop\">skb_dst_drop</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#_skb_refdst\">_skb_refdst</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refdst_drop\">refdst_drop</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#_skb_refdst\">_skb_refdst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#_skb_refdst\">_skb_refdst</a> = 0UL;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_dst_copy\">skb_dst_copy</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#nskb\">nskb</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#oskb\">oskb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nskb\">nskb</a>-><a class=\"id\" href=\"#_skb_refdst\">_skb_refdst</a> = <a class=\"id\" href=\"#oskb\">oskb</a>-><a class=\"id\" href=\"#_skb_refdst\">_skb_refdst</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#nskb\">nskb</a>-><a class=\"id\" href=\"#_skb_refdst\">_skb_refdst</a> &amp; <a class=\"id\" href=\"#SKB_DST_NOREF\">SKB_DST_NOREF</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst_clone\">dst_clone</a>(<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#nskb\">nskb</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * skb_dst_force - makes sure skb dst is refcounted</span>", 
"<span class=\"comment\"> * @skb: buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If dst is not yet refcounted, let's do it</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_dst_force\">skb_dst_force</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_dst_is_noref\">skb_dst_is_noref</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#_skb_refdst\">_skb_refdst</a> &= ~<a class=\"id\" href=\"#SKB_DST_NOREF\">SKB_DST_NOREF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst_clone\">dst_clone</a>(<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_tunnel_rx - prepare skb for rx reinsert</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: tunnel device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>After decapsulation, packet is going to re-enter (netif_rx()) our stack,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>so make some cleanups, and perform accounting.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_tunnel_rx\">skb_tunnel_rx</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* TODO : stats should be SMP safe */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#rx_packets\">rx_packets</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#rx_bytes\">rx_bytes</a> += <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#rxhash\">rxhash</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_set_queue_mapping\">skb_set_queue_mapping</a>(<a class=\"id\" href=\"#skb\">skb</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_dst_drop\">skb_dst_drop</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf_reset\">nf_reset</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Children define the path of the packet through the</span>", 
"<span class=\"comment\"> * Linux networking.  Thus, destinations are stackable.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#skb_dst_pop\">skb_dst_pop</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#child\">child</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_dst_drop\">skb_dst_drop</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#child\">child</a>;", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#dst_discard\">dst_discard</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern void * <a class=\"id\" href=\"#dst_alloc\">dst_alloc</a>(struct <a class=\"id\" href=\"#dst_ops\">dst_ops</a> * <a class=\"id\" href=\"#ops\">ops</a>);", 
"extern void <a class=\"id\" href=\"#__dst_free\">__dst_free</a>(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> * <a class=\"id\" href=\"#dst\">dst</a>);", 
"extern struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst_destroy\">dst_destroy</a>(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> * <a class=\"id\" href=\"#dst\">dst</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dst_free\">dst_free</a>(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> * <a class=\"id\" href=\"#dst\">dst</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#obsolete\">obsolete</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#__refcnt\">__refcnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#dst_destroy\">dst_destroy</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dst\">dst</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__dst_free\">__dst_free</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dst_rcu_free\">dst_rcu_free</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst_free\">dst_free</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dst_confirm\">dst_confirm</a>(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#neigh_confirm\">neigh_confirm</a>(<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#neighbour\">neighbour</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dst_link_failure\">dst_link_failure</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a> && <a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#ops\">ops</a> && <a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#link_failure\">link_failure</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#link_failure\">link_failure</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dst_set_expires\">dst_set_expires</a>(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#expires\">expires</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expires\">expires</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#expires\">expires</a> == 0 || <a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#expires\">expires</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#expires\">expires</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Output packet to network from transport.  */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#dst_output\">dst_output</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#output\">output</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Input packet from network to transport.  */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#dst_input\">dst_input</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#input\">input</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst_check\">dst_check</a>(struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#cookie\">cookie</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#obsolete\">obsolete</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#check\">check</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#cookie\">cookie</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dst\">dst</a>;", 
"}", 
"", 
"extern void<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst_init\">dst_init</a>(void);", 
"", 
"<span class=\"comment\">/* Flags for xfrm_lookup flags argument. */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#XFRM_LOOKUP_WAIT\">XFRM_LOOKUP_WAIT</a> = 1 << 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#XFRM_LOOKUP_ICMP\">XFRM_LOOKUP_ICMP</a> = 1 << 1,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#flowi\">flowi</a>;", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_XFRM\">CONFIG_XFRM</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#xfrm_lookup\">xfrm_lookup</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> **<a class=\"id\" href=\"#dst_p\">dst_p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#flowi\">flowi</a> *<a class=\"id\" href=\"#fl\">fl</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"} ", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__xfrm_lookup\">__xfrm_lookup</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> **<a class=\"id\" href=\"#dst_p\">dst_p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#flowi\">flowi</a> *<a class=\"id\" href=\"#fl\">fl</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"extern int <a class=\"id\" href=\"#xfrm_lookup\">xfrm_lookup</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> **<a class=\"id\" href=\"#dst_p\">dst_p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#flowi\">flowi</a> *<a class=\"id\" href=\"#fl\">fl</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"extern int <a class=\"id\" href=\"#__xfrm_lookup\">__xfrm_lookup</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> **<a class=\"id\" href=\"#dst_p\">dst_p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#flowi\">flowi</a> *<a class=\"id\" href=\"#fl\">fl</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _NET_DST_H */</span>", 
];
xr_frag_insert('l/ba/2135d1b2d6b7f02cc98c45689f9c74cf6190c2.xr', __xr_tmp);
