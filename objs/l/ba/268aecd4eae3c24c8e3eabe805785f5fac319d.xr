var __xr_tmp = [
"", 
"#else <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#inc_rt_prio_smp\">inc_rt_prio_smp</a>(struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, int <a class=\"id\" href=\"#prio\">prio</a>, int <a class=\"id\" href=\"#prev_prio\">prev_prio</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#dec_rt_prio_smp\">dec_rt_prio_smp</a>(struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, int <a class=\"id\" href=\"#prio\">prio</a>, int <a class=\"id\" href=\"#prev_prio\">prev_prio</a>) {}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a> || <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"static void", 
"<a class=\"id\" href=\"#inc_rt_prio\">inc_rt_prio</a>(struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, int <a class=\"id\" href=\"#prio\">prio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#prev_prio\">prev_prio</a> = <a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#highest_prio\">highest_prio</a>.<a class=\"id\" href=\"#curr\">curr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prio\">prio</a> &lt; <a class=\"id\" href=\"#prev_prio\">prev_prio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#highest_prio\">highest_prio</a>.<a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#prio\">prio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_rt_prio_smp\">inc_rt_prio_smp</a>(<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, <a class=\"id\" href=\"#prio\">prio</a>, <a class=\"id\" href=\"#prev_prio\">prev_prio</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#dec_rt_prio\">dec_rt_prio</a>(struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, int <a class=\"id\" href=\"#prio\">prio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#prev_prio\">prev_prio</a> = <a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#highest_prio\">highest_prio</a>.<a class=\"id\" href=\"#curr\">curr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_nr_running\">rt_nr_running</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#prio\">prio</a> &lt; <a class=\"id\" href=\"#prev_prio\">prev_prio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This may have been our highest task, and therefore</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we may have some recomputation to do</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prio\">prio</a> == <a class=\"id\" href=\"#prev_prio\">prev_prio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_prio_array\">rt_prio_array</a> *<a class=\"id\" href=\"#array\">array</a> = &amp;<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#active\">active</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#highest_prio\">highest_prio</a>.<a class=\"id\" href=\"#curr\">curr</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_find_first_bit\">sched_find_first_bit</a>(<a class=\"id\" href=\"#array\">array</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#highest_prio\">highest_prio</a>.<a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dec_rt_prio_smp\">dec_rt_prio_smp</a>(<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, <a class=\"id\" href=\"#prio\">prio</a>, <a class=\"id\" href=\"#prev_prio\">prev_prio</a>);", 
"}", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#inc_rt_prio\">inc_rt_prio</a>(struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, int <a class=\"id\" href=\"#prio\">prio</a>) {}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dec_rt_prio\">dec_rt_prio</a>(struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, int <a class=\"id\" href=\"#prio\">prio</a>) {}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP || CONFIG_RT_GROUP_SCHED */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RT_GROUP_SCHED\">CONFIG_RT_GROUP_SCHED</a>", 
"", 
"static void", 
"<a class=\"id\" href=\"#inc_rt_group\">inc_rt_group</a>(struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>, struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_se_boosted\">rt_se_boosted</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_nr_boosted\">rt_nr_boosted</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#tg\">tg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_rt_bandwidth\">start_rt_bandwidth</a>(&amp;<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#rt_bandwidth\">rt_bandwidth</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#dec_rt_group\">dec_rt_group</a>(struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>, struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_se_boosted\">rt_se_boosted</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_nr_boosted\">rt_nr_boosted</a>--;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_nr_running\">rt_nr_running</a> && <a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_nr_boosted\">rt_nr_boosted</a>);", 
"}", 
"", 
"#else <span class=\"comment\">/* CONFIG_RT_GROUP_SCHED */</span>", 
"", 
"static void", 
"<a class=\"id\" href=\"#inc_rt_group\">inc_rt_group</a>(struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>, struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_rt_bandwidth\">start_rt_bandwidth</a>(&amp;<a class=\"id\" href=\"#def_rt_bandwidth\">def_rt_bandwidth</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#dec_rt_group\">dec_rt_group</a>(struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>, struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>) {}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_RT_GROUP_SCHED */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#inc_rt_tasks\">inc_rt_tasks</a>(struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>, struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#prio\">prio</a> = <a class=\"id\" href=\"#rt_se_prio\">rt_se_prio</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#rt_prio\">rt_prio</a>(<a class=\"id\" href=\"#prio\">prio</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_nr_running\">rt_nr_running</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_rt_prio\">inc_rt_prio</a>(<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, <a class=\"id\" href=\"#prio\">prio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_rt_migration\">inc_rt_migration</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>, <a class=\"id\" href=\"#rt_rq\">rt_rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_rt_group\">inc_rt_group</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>, <a class=\"id\" href=\"#rt_rq\">rt_rq</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#dec_rt_tasks\">dec_rt_tasks</a>(struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>, struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#rt_prio\">rt_prio</a>(<a class=\"id\" href=\"#rt_se_prio\">rt_se_prio</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_nr_running\">rt_nr_running</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_nr_running\">rt_nr_running</a>--;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dec_rt_prio\">dec_rt_prio</a>(<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, <a class=\"id\" href=\"#rt_se_prio\">rt_se_prio</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dec_rt_migration\">dec_rt_migration</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>, <a class=\"id\" href=\"#rt_rq\">rt_rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dec_rt_group\">dec_rt_group</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>, <a class=\"id\" href=\"#rt_rq\">rt_rq</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__enqueue_rt_entity\">__enqueue_rt_entity</a>(struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a> = <a class=\"id\" href=\"#rt_rq_of_se\">rt_rq_of_se</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_prio_array\">rt_prio_array</a> *<a class=\"id\" href=\"#array\">array</a> = &amp;<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#active\">active</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#group_rq\">group_rq</a> = <a class=\"id\" href=\"#group_rt_rq\">group_rt_rq</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#queue\">queue</a> = <a class=\"id\" href=\"#array\">array</a>-><a class=\"id\" href=\"#queue\">queue</a> + <a class=\"id\" href=\"#rt_se_prio\">rt_se_prio</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't enqueue the group if its throttled, or when empty.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The latter is a consequence of the former when a child group</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get throttled and the current group doesn't have any other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * active members.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group_rq\">group_rq</a> && (<a class=\"id\" href=\"#rt_rq_throttled\">rt_rq_throttled</a>(<a class=\"id\" href=\"#group_rq\">group_rq</a>) || !<a class=\"id\" href=\"#group_rq\">group_rq</a>-><a class=\"id\" href=\"#rt_nr_running\">rt_nr_running</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#rt_se\">rt_se</a>-><a class=\"id\" href=\"#run_list\">run_list</a>, <a class=\"id\" href=\"#queue\">queue</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#rt_se\">rt_se</a>-><a class=\"id\" href=\"#run_list\">run_list</a>, <a class=\"id\" href=\"#queue\">queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#rt_se_prio\">rt_se_prio</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>), <a class=\"id\" href=\"#array\">array</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_rt_tasks\">inc_rt_tasks</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>, <a class=\"id\" href=\"#rt_rq\">rt_rq</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__dequeue_rt_entity\">__dequeue_rt_entity</a>(struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a> = <a class=\"id\" href=\"#rt_rq_of_se\">rt_rq_of_se</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_prio_array\">rt_prio_array</a> *<a class=\"id\" href=\"#array\">array</a> = &amp;<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#active\">active</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#rt_se\">rt_se</a>-><a class=\"id\" href=\"#run_list\">run_list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#array\">array</a>-><a class=\"id\" href=\"#queue\">queue</a> + <a class=\"id\" href=\"#rt_se_prio\">rt_se_prio</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#rt_se_prio\">rt_se_prio</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>), <a class=\"id\" href=\"#array\">array</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dec_rt_tasks\">dec_rt_tasks</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>, <a class=\"id\" href=\"#rt_rq\">rt_rq</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Because the prio of an upper entry depends on the lower</span>", 
"<span class=\"comment\"> * entries, we must remove entries top - down.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dequeue_rt_stack\">dequeue_rt_stack</a>(struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#back\">back</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sched_rt_entity\">for_each_sched_rt_entity</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_se\">rt_se</a>-><a class=\"id\" href=\"#back\">back</a> = <a class=\"id\" href=\"#back\">back</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#back\">back</a> = <a class=\"id\" href=\"#rt_se\">rt_se</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#rt_se\">rt_se</a> = <a class=\"id\" href=\"#back\">back</a>; <a class=\"id\" href=\"#rt_se\">rt_se</a>; <a class=\"id\" href=\"#rt_se\">rt_se</a> = <a class=\"id\" href=\"#rt_se\">rt_se</a>-><a class=\"id\" href=\"#back\">back</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#on_rt_rq\">on_rt_rq</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dequeue_rt_entity\">__dequeue_rt_entity</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#enqueue_rt_entity\">enqueue_rt_entity</a>(struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dequeue_rt_stack\">dequeue_rt_stack</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sched_rt_entity\">for_each_sched_rt_entity</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__enqueue_rt_entity\">__enqueue_rt_entity</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dequeue_rt_entity\">dequeue_rt_entity</a>(struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dequeue_rt_stack\">dequeue_rt_stack</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sched_rt_entity\">for_each_sched_rt_entity</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a> = <a class=\"id\" href=\"#group_rt_rq\">group_rt_rq</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_rq\">rt_rq</a> && <a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_nr_running\">rt_nr_running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__enqueue_rt_entity\">__enqueue_rt_entity</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Adding/removing a task to/from a priority array:</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#enqueue_task_rt\">enqueue_task_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a> = &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ENQUEUE_WAKEUP\">ENQUEUE_WAKEUP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_se\">rt_se</a>-><a class=\"id\" href=\"#timeout\">timeout</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enqueue_rt_entity\">enqueue_rt_entity</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>, <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ENQUEUE_HEAD\">ENQUEUE_HEAD</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#task_current\">task_current</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>) && <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enqueue_pushable_task\">enqueue_pushable_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dequeue_task_rt\">dequeue_task_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a> = &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_curr_rt\">update_curr_rt</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dequeue_rt_entity\">dequeue_rt_entity</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dequeue_pushable_task\">dequeue_pushable_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Put task to the end of the run list without the overhead of dequeue</span>", 
"<span class=\"comment\"> * followed by enqueue.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#requeue_rt_entity\">requeue_rt_entity</a>(struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>, int <a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#on_rt_rq\">on_rt_rq</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_prio_array\">rt_prio_array</a> *<a class=\"id\" href=\"#array\">array</a> = &amp;<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#active\">active</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#queue\">queue</a> = <a class=\"id\" href=\"#array\">array</a>-><a class=\"id\" href=\"#queue\">queue</a> + <a class=\"id\" href=\"#rt_se_prio\">rt_se_prio</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#rt_se\">rt_se</a>-><a class=\"id\" href=\"#run_list\">run_list</a>, <a class=\"id\" href=\"#queue\">queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#rt_se\">rt_se</a>-><a class=\"id\" href=\"#run_list\">run_list</a>, <a class=\"id\" href=\"#queue\">queue</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#requeue_task_rt\">requeue_task_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a> = &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sched_rt_entity\">for_each_sched_rt_entity</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a> = <a class=\"id\" href=\"#rt_rq_of_se\">rt_rq_of_se</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#requeue_rt_entity\">requeue_rt_entity</a>(<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, <a class=\"id\" href=\"#rt_se\">rt_se</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#yield_task_rt\">yield_task_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#requeue_task_rt\">requeue_task_rt</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>, 0);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"static int <a class=\"id\" href=\"#find_lowest_rq\">find_lowest_rq</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"static int", 
"<a class=\"id\" href=\"#select_task_rq_rt\">select_task_rq_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#sd_flag\">sd_flag</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd_flag\">sd_flag</a> != <a class=\"id\" href=\"#SD_BALANCE_WAKE\">SD_BALANCE_WAKE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the current task is an RT task, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * try to see if we can wake this RT task up on another</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * runqueue. Otherwise simply start this RT task</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on its current runqueue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We want to avoid overloading runqueues. Even if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the RT task is of higher priority than the current RT task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * RT tasks behave differently than other tasks. If</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one gets preempted, we try to push it off to another queue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So trying to keep a preempting RT task on the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cache hot CPU will force the running RT task to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a cold CPU. So we waste all the cache for the lower</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * RT task in hopes of saving some of a RT task</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that is just being woken and probably will have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cold cache anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rt_task\">rt_task</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>)) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a> &gt; 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#find_lowest_rq\">find_lowest_rq</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#cpu\">cpu</a> == -1) ? <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>) : <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise, just let it ride on the affined RQ and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * post-schedule router will push the preempted task away</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#check_preempt_equal_prio\">check_preempt_equal_prio</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a> != 1", 
"<span class=\"ts\"/>    && <a class=\"id\" href=\"#cpupri_find\">cpupri_find</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#cpupri\">cpupri</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpupri_find\">cpupri_find</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#cpupri\">cpupri</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>, <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There appears to be other cpus that can accept</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current and none to run 'p', so lets reschedule</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to try and push current away:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#requeue_task_rt\">requeue_task_rt</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Preempt the current task with a newly woken task if needed:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#check_preempt_curr_rt\">check_preempt_curr_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> &lt; <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#prio\">prio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - the newly woken task is of equal priority to the current task</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - the newly woken task is non-migratable while current is migratable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - current will be preempted on the next reschedule</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we should check to see if current can readily move to a different</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpu.  If so, we will reschedule to allow the push logic to try</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to move current somewhere else, making room for our non-migratable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> == <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#prio\">prio</a> && !<a class=\"id\" href=\"#need_resched\">need_resched</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_preempt_equal_prio\">check_preempt_equal_prio</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#pick_next_rt_entity\">pick_next_rt_entity</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_prio_array\">rt_prio_array</a> *<a class=\"id\" href=\"#array\">array</a> = &amp;<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#active\">active</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#queue\">queue</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#sched_find_first_bit\">sched_find_first_bit</a>(<a class=\"id\" href=\"#array\">array</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#idx\">idx</a> >= <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue\">queue</a> = <a class=\"id\" href=\"#array\">array</a>-><a class=\"id\" href=\"#queue\">queue</a> + <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#queue\">queue</a>-><a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a>, <a class=\"id\" href=\"#run_list\">run_list</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#_pick_next_task_rt\">_pick_next_task_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a> = &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#rt_nr_running\">rt_nr_running</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_rq_throttled\">rt_rq_throttled</a>(<a class=\"id\" href=\"#rt_rq\">rt_rq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_se\">rt_se</a> = <a class=\"id\" href=\"#pick_next_rt_entity\">pick_next_rt_entity</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#rt_rq\">rt_rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_rq\">rt_rq</a> = <a class=\"id\" href=\"#group_rt_rq\">group_rt_rq</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#rt_rq\">rt_rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#rt_task_of\">rt_task_of</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#exec_start\">exec_start</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#clock\">clock</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#pick_next_task_rt\">pick_next_task_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#_pick_next_task_rt\">_pick_next_task_rt</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The running task is never eligible for pushing */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dequeue_pushable_task\">dequeue_pushable_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We detect this state here so that we can avoid taking the RQ</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock again later if there is no need to push</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#post_schedule\">post_schedule</a> = <a class=\"id\" href=\"#has_pushable_tasks\">has_pushable_tasks</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#put_prev_task_rt\">put_prev_task_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_curr_rt\">update_curr_rt</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#exec_start\">exec_start</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The previous task needs to be made eligible for pushing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if it is still active</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a> && <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enqueue_pushable_task\">enqueue_pushable_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"<span class=\"comment\">/* Only try algorithms three times */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RT_MAX_TRIES\">RT_MAX_TRIES</a> 3", 
"", 
"static void <a class=\"id\" href=\"#deactivate_task\">deactivate_task</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#sleep\">sleep</a>);", 
"", 
"static int <a class=\"id\" href=\"#pick_rt_task\">pick_rt_task</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#task_running\">task_running</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#cpu\">cpu</a> &lt; 0 || <a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>)) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a> &gt; 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Return the second highest RT task, NULL otherwise */</span>", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#pick_next_highest_task_rt\">pick_next_highest_task_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_rt_entity\">sched_rt_entity</a> *<a class=\"id\" href=\"#rt_se\">rt_se</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_prio_array\">rt_prio_array</a> *<a class=\"id\" href=\"#array\">array</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_leaf_rt_rq\">for_each_leaf_rt_rq</a>(<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, <a class=\"id\" href=\"#rq\">rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#array\">array</a> = &amp;<a class=\"id\" href=\"#rt_rq\">rt_rq</a>-><a class=\"id\" href=\"#active\">active</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#sched_find_first_bit\">sched_find_first_bit</a>(<a class=\"id\" href=\"#array\">array</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
" <a class=\"id\" href=\"#next_idx\">next_idx</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> >= <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> && <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prio\">prio</a> &lt; <a class=\"id\" href=\"#idx\">idx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>, <a class=\"id\" href=\"#array\">array</a>-><a class=\"id\" href=\"#queue\">queue</a> + <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#run_list\">run_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rt_entity_is_task\">rt_entity_is_task</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#rt_task_of\">rt_task_of</a>(<a class=\"id\" href=\"#rt_se\">rt_se</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pick_rt_task\">pick_rt_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(<a class=\"id\" href=\"#array\">array</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>, <a class=\"id\" href=\"#idx\">idx</a>+1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#next_idx\">next_idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a>, <a class=\"id\" href=\"#local_cpu_mask\">local_cpu_mask</a>);", 
"", 
"static int <a class=\"id\" href=\"#find_lowest_rq\">find_lowest_rq</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#lowest_mask\">lowest_mask</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#local_cpu_mask\">local_cpu_mask</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>      = <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1; <span class=\"comment\">/* No other targets possible */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpupri_find\">cpupri_find</a>(&amp;<a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#task\">task</a>)-><a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#cpupri\">cpupri</a>, <a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#lowest_mask\">lowest_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1; <span class=\"comment\">/* No targets found */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At this point we have built a mask of cpus representing the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lowest priority tasks in the system.  Now we want to elect</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the best one based on our affinity and topology.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We prioritize the last cpu that the task executed on since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it is most likely cache-hot in that location.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#lowest_mask\">lowest_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise, we consult the sched_domains span maps to figure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * out which cpu is logically closest to our hot cache data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#lowest_mask\">lowest_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_cpu\">this_cpu</a> = -1; <span class=\"comment\">/* Skip this_cpu opt if not among lowest */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_domain\">for_each_domain</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#sd\">sd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_WAKE_AFFINE\">SD_WAKE_AFFINE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#best_cpu\">best_cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * \"this_cpu\" is cheaper to preempt than a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * remote processor.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#this_cpu\">this_cpu</a> != -1 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#this_cpu\">this_cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#best_cpu\">best_cpu</a> = <a class=\"id\" href=\"#cpumask_first_and\">cpumask_first_and</a>(<a class=\"id\" href=\"#lowest_mask\">lowest_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#best_cpu\">best_cpu</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#best_cpu\">best_cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * And finally, if there were no matches within the domains</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * just give the caller *something* to work with from the compatible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * locations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_cpu\">this_cpu</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#this_cpu\">this_cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpumask_any\">cpumask_any</a>(<a class=\"id\" href=\"#lowest_mask\">lowest_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/* Will lock the rq it finds */</span>", 
"static struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#find_lock_lowest_rq\">find_lock_lowest_rq</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#lowest_rq\">lowest_rq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tries\">tries</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#tries\">tries</a> = 0; <a class=\"id\" href=\"#tries\">tries</a> &lt; <a class=\"id\" href=\"#RT_MAX_TRIES\">RT_MAX_TRIES</a>; <a class=\"id\" href=\"#tries\">tries</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#find_lowest_rq\">find_lowest_rq</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cpu\">cpu</a> == -1) || (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lowest_rq\">lowest_rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if the prio of this runqueue changed, try again */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#double_lock_balance\">double_lock_balance</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#lowest_rq\">lowest_rq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We had to unlock the run queue. In</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the mean time, task could have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * migrated already or had its affinity changed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Also make sure that it wasn't scheduled on its rq.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#task\">task</a>) != <a class=\"id\" href=\"#rq\">rq</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     !<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#lowest_rq\">lowest_rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#task_running\">task_running</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#task\">task</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     !<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#lowest_rq\">lowest_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lowest_rq\">lowest_rq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If this rq is still suitable use it. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lowest_rq\">lowest_rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#highest_prio\">highest_prio</a>.<a class=\"id\" href=\"#curr\">curr</a> &gt; <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#prio\">prio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* try again */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#double_unlock_balance\">double_unlock_balance</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#lowest_rq\">lowest_rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lowest_rq\">lowest_rq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#lowest_rq\">lowest_rq</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#pick_next_pushable_task\">pick_next_pushable_task</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#has_pushable_tasks\">has_pushable_tasks</a>(<a class=\"id\" href=\"#rq\">rq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#plist_first_entry\">plist_first_entry</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#pushable_tasks\">pushable_tasks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#task_struct\">task_struct</a>, <a class=\"id\" href=\"#pushable_tasks\">pushable_tasks</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#task_current\">task_current</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a> <= 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#rt_task\">rt_task</a>(<a class=\"id\" href=\"#p\">p</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If the current CPU has more than one RT task, see if the non</span>", 
"<span class=\"comment\"> * running task can migrate over to a CPU that is running a task</span>", 
"<span class=\"comment\"> * of lesser priority.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#push_rt_task\">push_rt_task</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next_task\">next_task</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#lowest_rq\">lowest_rq</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#overloaded\">overloaded</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_task\">next_task</a> = <a class=\"id\" href=\"#pick_next_pushable_task\">pick_next_pushable_task</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#next_task\">next_task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#next_task\">next_task</a> == <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It's possible that the next_task slipped in of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * higher priority than current. If that's the case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * just reschedule current.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#next_task\">next_task</a>-><a class=\"id\" href=\"#prio\">prio</a> &lt; <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#prio\">prio</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We might release rq lock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#next_task\">next_task</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* find_lock_lowest_rq locks the rq if found */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lowest_rq\">lowest_rq</a> = <a class=\"id\" href=\"#find_lock_lowest_rq\">find_lock_lowest_rq</a>(<a class=\"id\" href=\"#next_task\">next_task</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#lowest_rq\">lowest_rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * find lock_lowest_rq releases rq-&gt;lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so it is possible that next_task has migrated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We need to make sure that the task is still on the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * run-queue and is also still the next task eligible for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pushing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#pick_next_pushable_task\">pick_next_pushable_task</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#next_task\">next_task</a>) == <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a> && <a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#next_task\">next_task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we get here, the task hasnt moved at all, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * it has failed to push.  We will not try again,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * since the other cpus will pull from us when they</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * are ready.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dequeue_pushable_task\">dequeue_pushable_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#next_task\">next_task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No more tasks, just exit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Something has shifted, try again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#next_task\">next_task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_task\">next_task</a> = <a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deactivate_task\">deactivate_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#next_task\">next_task</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_task_cpu\">set_task_cpu</a>(<a class=\"id\" href=\"#next_task\">next_task</a>, <a class=\"id\" href=\"#lowest_rq\">lowest_rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#activate_task\">activate_task</a>(<a class=\"id\" href=\"#lowest_rq\">lowest_rq</a>, <a class=\"id\" href=\"#next_task\">next_task</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#lowest_rq\">lowest_rq</a>-><a class=\"id\" href=\"#curr\">curr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#double_unlock_balance\">double_unlock_balance</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#lowest_rq\">lowest_rq</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#next_task\">next_task</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#push_rt_tasks\">push_rt_tasks</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* push_rt_task will return true if it moved an RT */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#push_rt_task\">push_rt_task</a>(<a class=\"id\" href=\"#rq\">rq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pull_rt_task\">pull_rt_task</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#src_rq\">src_rq</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#rt_overloaded\">rt_overloaded</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#rto_mask\">rto_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#this_cpu\">this_cpu</a> == <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src_rq\">src_rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't bother taking the src_rq-&gt;lock if the next highest</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * task is known to be lower-priority than our current task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This may look racy, but if this value is about to go</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * logically higher, the src_rq will push this task away.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * And if its going logically lower, we do not care</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#src_rq\">src_rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#highest_prio\">highest_prio</a>.<a class=\"id\" href=\"#next\">next</a> >=", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#highest_prio\">highest_prio</a>.<a class=\"id\" href=\"#curr\">curr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can potentially drop this_rq's lock in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * double_lock_balance, and another CPU could</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * alter this_rq</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#double_lock_balance\">double_lock_balance</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>, <a class=\"id\" href=\"#src_rq\">src_rq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Are there still pullable RT tasks?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#src_rq\">src_rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#rt_nr_running\">rt_nr_running</a> <= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#skip\">skip</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pick_next_highest_task_rt\">pick_next_highest_task_rt</a>(<a class=\"id\" href=\"#src_rq\">src_rq</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do we have an RT task that preempts</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the to-be-scheduled task?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> && (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> &lt; <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#highest_prio\">highest_prio</a>.<a class=\"id\" href=\"#curr\">curr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#src_rq\">src_rq</a>-><a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * There's a chance that p is higher in priority</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * than what's currently running on its cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This is just that p is wakeing up and hasn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * had a chance to schedule. We only pull</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * p if it is lower in priority than the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * current task on the run queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> &lt; <a class=\"id\" href=\"#src_rq\">src_rq</a>-><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#prio\">prio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#skip\">skip</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_task\">deactivate_task</a>(<a class=\"id\" href=\"#src_rq\">src_rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_task_cpu\">set_task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#activate_task\">activate_task</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We continue with the search, just in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * case there's an even higher prio task</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * in another runqueue. (low likelyhood</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * but possible)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#skip\">skip</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#double_unlock_balance\">double_unlock_balance</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>, <a class=\"id\" href=\"#src_rq\">src_rq</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pre_schedule_rt\">pre_schedule_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Try to pull RT tasks here if we lower this rq's prio */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rt_task\">rt_task</a>(<a class=\"id\" href=\"#prev\">prev</a>)) && <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#highest_prio\">highest_prio</a>.<a class=\"id\" href=\"#curr\">curr</a> &gt; <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#prio\">prio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pull_rt_task\">pull_rt_task</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#post_schedule_rt\">post_schedule_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#push_rt_tasks\">push_rt_tasks</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If we are not running and we are not going to reschedule soon, we should</span>", 
"<span class=\"comment\"> * try to push tasks away now</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#task_woken_rt\">task_woken_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#task_running\">task_running</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#test_tsk_need_resched\">test_tsk_need_resched</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#has_pushable_tasks\">has_pushable_tasks</a>(<a class=\"id\" href=\"#rq\">rq</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#push_rt_tasks\">push_rt_tasks</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_cpus_allowed_rt\">set_cpus_allowed_rt</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#new_mask\">new_mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#new_mask\">new_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#rt_task\">rt_task</a>(<a class=\"id\" href=\"#p\">p</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Update the migration status of the RQ if we have an RT task</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which is running AND changing its weight value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#on_rq\">on_rq</a> && (<a class=\"id\" href=\"#weight\">weight</a> != <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#task_current\">task_current</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Make sure we dequeue this task from the pushable list</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * before going further.  It will either remain off of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the list because we are no longer pushable, or it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * will be requeued.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dequeue_pushable_task\">dequeue_pushable_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Requeue if our weight is changing and still &gt; 1</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#weight\">weight</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enqueue_pushable_task\">enqueue_pushable_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a> <= 1) && (<a class=\"id\" href=\"#weight\">weight</a> &gt; 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#rt_nr_migratory\">rt_nr_migratory</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a> &gt; 1) && (<a class=\"id\" href=\"#weight\">weight</a> <= 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#rt_nr_migratory\">rt_nr_migratory</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#rt_nr_migratory\">rt_nr_migratory</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_rt_migration\">update_rt_migration</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>, <a class=\"id\" href=\"#new_mask\">new_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#nr_cpus_allowed\">nr_cpus_allowed</a> = <a class=\"id\" href=\"#weight\">weight</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Assumes rq-&gt;lock is held */</span>", 
"static void <a class=\"id\" href=\"#rq_online_rt\">rq_online_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#overloaded\">overloaded</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_set_overload\">rt_set_overload</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__enable_runtime\">__enable_runtime</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpupri_set\">cpupri_set</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#cpupri\">cpupri</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#highest_prio\">highest_prio</a>.<a class=\"id\" href=\"#curr\">curr</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Assumes rq-&gt;lock is held */</span>", 
"static void <a class=\"id\" href=\"#rq_offline_rt\">rq_offline_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#overloaded\">overloaded</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_clear_overload\">rt_clear_overload</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__disable_runtime\">__disable_runtime</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpupri_set\">cpupri_set</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rd\">rd</a>-><a class=\"id\" href=\"#cpupri\">cpupri</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#CPUPRI_INVALID\">CPUPRI_INVALID</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When switch from the rt queue, we bring ourselves to a position</span>", 
"<span class=\"comment\"> * that we might want to pull RT tasks from other runqueues.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#switched_from_rt\">switched_from_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#running\">running</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there are other RT tasks then we will reschedule</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and the scheduling of the other RT tasks will handle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the balancing. But if we are the last RT task</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we may need to handle the pulling of RT tasks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#rt_nr_running\">rt_nr_running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pull_rt_task\">pull_rt_task</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_sched_rt_class\">init_sched_rt_class</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zalloc_cpumask_var_node\">zalloc_cpumask_var_node</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#local_cpu_mask\">local_cpu_mask</a>, <a class=\"id\" href=\"#i\">i</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#cpu_to_node\">cpu_to_node</a>(<a class=\"id\" href=\"#i\">i</a>));", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When switching a task to RT, we may overload the runqueue</span>", 
"<span class=\"comment\"> * with RT tasks. In this case we try to push them off to</span>", 
"<span class=\"comment\"> * other runqueues.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#switched_to_rt\">switched_to_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#running\">running</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#check_resched\">check_resched</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are already running, then there's nothing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that needs to be done. But if we are not running</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we may need to preempt the current running task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If that current running task is also an RT task</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then see if we can move to another run queue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#running\">running</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#overloaded\">overloaded</a> && <a class=\"id\" href=\"#push_rt_task\">push_rt_task</a>(<a class=\"id\" href=\"#rq\">rq</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <span class=\"comment\">/* Don't resched if we changed runqueues */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#rq\">rq</a> != <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_resched\">check_resched</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#check_resched\">check_resched</a> && <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> &lt; <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#prio\">prio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Priority of the task has changed. This may cause</span>", 
"<span class=\"comment\"> * us to initiate a push or pull.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#prio_changed_rt\">prio_changed_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#oldprio\">oldprio</a>, int <a class=\"id\" href=\"#running\">running</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#running\">running</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If our priority decreases while running, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * may need to pull tasks to this runqueue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#oldprio\">oldprio</a> &lt; <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pull_rt_task\">pull_rt_task</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If there's a higher priority task waiting to run</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then reschedule. Note, the above pull_rt_task</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * can release the rq lock and p could migrate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only reschedule if p is still on the same runqueue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> &gt; <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#highest_prio\">highest_prio</a>.<a class=\"id\" href=\"#curr\">curr</a> && <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a> == <a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* For UP simply resched on drop of prio */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#oldprio\">oldprio</a> &lt; <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This task is not running, but if it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * greater than the current running task</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then reschedule.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> &lt; <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#prio\">prio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#watchdog\">watchdog</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#soft\">soft</a>, <a class=\"id\" href=\"#hard\">hard</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* max may change after cur was read, this will be fixed next tick */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#soft\">soft</a> = <a class=\"id\" href=\"#task_rlimit\">task_rlimit</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#RLIMIT_RTTIME\">RLIMIT_RTTIME</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hard\">hard</a> = <a class=\"id\" href=\"#task_rlimit_max\">task_rlimit_max</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#RLIMIT_RTTIME\">RLIMIT_RTTIME</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#soft\">soft</a> != <a class=\"id\" href=\"#RLIM_INFINITY\">RLIM_INFINITY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#timeout\">timeout</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#soft\">soft</a>, <a class=\"id\" href=\"#hard\">hard</a>), <a class=\"id\" href=\"#USEC_PER_SEC\">USEC_PER_SEC</a>/<a class=\"id\" href=\"#HZ\">HZ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#timeout\">timeout</a> &gt; <a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#sched_exp\">sched_exp</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#task_tick_rt\">task_tick_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#queued\">queued</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_curr_rt\">update_curr_rt</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#watchdog\">watchdog</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * RR tasks need a special form of timeslice management.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * FIFO tasks have no timeslices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#policy\">policy</a> != <a class=\"id\" href=\"#SCHED_RR\">SCHED_RR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#time_slice\">time_slice</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#time_slice\">time_slice</a> = <a class=\"id\" href=\"#DEF_TIMESLICE\">DEF_TIMESLICE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Requeue to the end of queue if we are not the only element</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the queue:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#run_list\">run_list</a>.<a class=\"id\" href=\"#prev\">prev</a> != <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#rt\">rt</a>.<a class=\"id\" href=\"#run_list\">run_list</a>.<a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#requeue_task_rt\">requeue_task_rt</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_tsk_need_resched\">set_tsk_need_resched</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_curr_task_rt\">set_curr_task_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#exec_start\">exec_start</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#clock\">clock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The running task is never eligible for pushing */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dequeue_pushable_task\">dequeue_pushable_task</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#get_rr_interval_rt\">get_rr_interval_rt</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Time slice is 0 for SCHED_FIFO tasks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#policy\">policy</a> == <a class=\"id\" href=\"#SCHED_RR\">SCHED_RR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DEF_TIMESLICE\">DEF_TIMESLICE</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#sched_class\">sched_class</a> <a class=\"id\" href=\"#rt_sched_class\">rt_sched_class</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#fair_sched_class\">fair_sched_class</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enqueue_task\">enqueue_task</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#enqueue_task_rt\">enqueue_task_rt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#dequeue_task\">dequeue_task</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#dequeue_task_rt\">dequeue_task_rt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#yield_task\">yield_task</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#yield_task_rt\">yield_task_rt</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#check_preempt_curr\">check_preempt_curr</a><span class=\"ts\"/>= <a class=\"id\" href=\"#check_preempt_curr_rt\">check_preempt_curr_rt</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pick_next_task\">pick_next_task</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pick_next_task_rt\">pick_next_task_rt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#put_prev_task\">put_prev_task</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#put_prev_task_rt\">put_prev_task_rt</a>,", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#select_task_rq\">select_task_rq</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#select_task_rq_rt\">select_task_rq_rt</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_cpus_allowed\">set_cpus_allowed</a>       = <a class=\"id\" href=\"#set_cpus_allowed_rt\">set_cpus_allowed_rt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rq_online\">rq_online</a>              = <a class=\"id\" href=\"#rq_online_rt\">rq_online_rt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rq_offline\">rq_offline</a>             = <a class=\"id\" href=\"#rq_offline_rt\">rq_offline_rt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pre_schedule\">pre_schedule</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pre_schedule_rt\">pre_schedule_rt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#post_schedule\">post_schedule</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#post_schedule_rt\">post_schedule_rt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#task_woken\">task_woken</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#task_woken_rt\">task_woken_rt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#switched_from\">switched_from</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#switched_from_rt\">switched_from_rt</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_curr_task\">set_curr_task</a>          = <a class=\"id\" href=\"#set_curr_task_rt\">set_curr_task_rt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#task_tick\">task_tick</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#task_tick_rt\">task_tick_rt</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_rr_interval\">get_rr_interval</a><span class=\"ts\"/>= <a class=\"id\" href=\"#get_rr_interval_rt\">get_rr_interval_rt</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#prio_changed\">prio_changed</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#prio_changed_rt\">prio_changed_rt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#switched_to\">switched_to</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#switched_to_rt\">switched_to_rt</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"extern void <a class=\"id\" href=\"#print_rt_rq\">print_rt_rq</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>);", 
"", 
"static void <a class=\"id\" href=\"#print_rt_stats\">print_rt_stats</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rt_rq\">rt_rq</a> *<a class=\"id\" href=\"#rt_rq\">rt_rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_leaf_rt_rq\">for_each_leaf_rt_rq</a>(<a class=\"id\" href=\"#rt_rq\">rt_rq</a>, <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_rt_rq\">print_rt_rq</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#rt_rq\">rt_rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SCHED_DEBUG */</span>", 
"", 
];
xr_frag_insert('l/ba/268aecd4eae3c24c8e3eabe805785f5fac319d.xr', __xr_tmp);
