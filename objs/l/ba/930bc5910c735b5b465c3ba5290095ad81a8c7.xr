var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmf\">vmf</a>.<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#old_page\">old_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Notify the address space that the page is about to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * become writable so that it can prohibit this or wait</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for the page to get into an appropriate state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We do this without the lock held, so that it can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * sleep if it needs to.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_get\">page_cache_get</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a>(<a class=\"id\" href=\"#vma\">vma</a>, &amp;<a class=\"id\" href=\"#vmf\">vmf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tmp\">tmp</a> &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#VM_FAULT_ERROR\">VM_FAULT_ERROR</a> | <a class=\"id\" href=\"#VM_FAULT_NOPAGE\">VM_FAULT_NOPAGE</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unwritable_page\">unwritable_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#tmp\">tmp</a> &amp; <a class=\"id\" href=\"#VM_FAULT_LOCKED\">VM_FAULT_LOCKED</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#old_page\">old_page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0; <span class=\"comment\">/* retry the fault */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unwritable_page\">unwritable_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#old_page\">old_page</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Since we dropped the lock we need to revalidate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the PTE as someone else may have changed it.  If</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * they did, we just return, as we can count on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * MMU to tell us if they didn't also make it writable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_table\">page_table</a> = <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_same\">pte_same</a>(*<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#orig_pte\">orig_pte</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dirty_page\">dirty_page</a> = <a class=\"id\" href=\"#old_page\">old_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#dirty_page\">dirty_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reuse\">reuse</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reuse\">reuse</a>) {", 
"<a class=\"id\" href=\"#reuse\">reuse</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_page\">flush_cache_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(<a class=\"id\" href=\"#orig_pte\">orig_pte</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_mkyoung\">pte_mkyoung</a>(<a class=\"id\" href=\"#orig_pte\">orig_pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#maybe_mkwrite\">maybe_mkwrite</a>(<a class=\"id\" href=\"#pte_mkdirty\">pte_mkdirty</a>(<a class=\"id\" href=\"#entry\">entry</a>), <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ptep_set_access_flags\">ptep_set_access_flags</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#entry\">entry</a>,1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_mmu_cache\">update_mmu_cache</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#page_table\">page_table</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> |= <a class=\"id\" href=\"#VM_FAULT_WRITE\">VM_FAULT_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ok, we need to copy. Oh, well..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_get\">page_cache_get</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<a class=\"id\" href=\"#gotten\">gotten</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#anon_vma_prepare\">anon_vma_prepare</a>(<a class=\"id\" href=\"#vma\">vma</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#oom\">oom</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_zero_pfn\">is_zero_pfn</a>(<a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(<a class=\"id\" href=\"#orig_pte\">orig_pte</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_page\">new_page</a> = <a class=\"id\" href=\"#alloc_zeroed_user_highpage_movable\">alloc_zeroed_user_highpage_movable</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_page\">new_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#oom\">oom</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_page\">new_page</a> = <a class=\"id\" href=\"#alloc_page_vma\">alloc_page_vma</a>(<a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_page\">new_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#oom\">oom</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cow_user_page\">cow_user_page</a>(<a class=\"id\" href=\"#new_page\">new_page</a>, <a class=\"id\" href=\"#old_page\">old_page</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__SetPageUptodate\">__SetPageUptodate</a>(<a class=\"id\" href=\"#new_page\">new_page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't let another task, with possibly unlocked vma,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * keep the mlocked page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>) && <a class=\"id\" href=\"#old_page\">old_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);<span class=\"ts\"/><span class=\"comment\">/* for LRU manipulation */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_page_mlock\">clear_page_mlock</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_newpage_charge\">mem_cgroup_newpage_charge</a>(<a class=\"id\" href=\"#new_page\">new_page</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#oom_free_new\">oom_free_new</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Re-check the pte - we dropped the lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_table\">page_table</a> = <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#pte_same\">pte_same</a>(*<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#orig_pte\">orig_pte</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old_page\">old_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#old_page\">old_page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dec_mm_counter_fast\">dec_mm_counter_fast</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_FILEPAGES\">MM_FILEPAGES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_mm_counter_fast\">inc_mm_counter_fast</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_ANONPAGES\">MM_ANONPAGES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_mm_counter_fast\">inc_mm_counter_fast</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_ANONPAGES\">MM_ANONPAGES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_page\">flush_cache_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(<a class=\"id\" href=\"#orig_pte\">orig_pte</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#mk_pte\">mk_pte</a>(<a class=\"id\" href=\"#new_page\">new_page</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#maybe_mkwrite\">maybe_mkwrite</a>(<a class=\"id\" href=\"#pte_mkdirty\">pte_mkdirty</a>(<a class=\"id\" href=\"#entry\">entry</a>), <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Clear the pte entry and flush it first, before updating the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pte with the new entry. This will avoid a race condition</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * seen in the presence of one thread doing SMC and another</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * thread doing COW.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptep_clear_flush\">ptep_clear_flush</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#page_table\">page_table</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_add_new_anon_rmap\">page_add_new_anon_rmap</a>(<a class=\"id\" href=\"#new_page\">new_page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We call the notify macro here because, when using secondary</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mmu page tables (such as kvm shadow page tables), we want the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * new page to be mapped directly into the secondary page table.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at_notify\">set_pte_at_notify</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_mmu_cache\">update_mmu_cache</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#page_table\">page_table</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old_page\">old_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Only after switching the pte to the new page may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we remove the mapcount here. Otherwise another</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * process may come and find the rmap count decremented</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * before the pte is switched to the new page, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * \"reuse\" the old page writing into it while our pte</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * here still points into it and can be read by other</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * threads.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The critical issue is to order this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * page_remove_rmap with the ptp_clear_flush above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Those stores are ordered by (if nothing else,)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the barrier present in the atomic_add_negative</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * in page_remove_rmap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Then the TLB flush in ptep_clear_flush ensures that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * no process can access the old page before the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * decremented mapcount is visible. And the old page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * cannot be reused until after the decremented</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * mapcount is visible. So transitively, TLBs to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * old page will be flushed before it can be reused.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_remove_rmap\">page_remove_rmap</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Free the old page.. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_page\">new_page</a> = <a class=\"id\" href=\"#old_page\">old_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> |= <a class=\"id\" href=\"#VM_FAULT_WRITE\">VM_FAULT_WRITE</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_uncharge_page\">mem_cgroup_uncharge_page</a>(<a class=\"id\" href=\"#new_page\">new_page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_page\">new_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#new_page\">new_page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_page\">old_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dirty_page\">dirty_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Yes, Virginia, this is actually required to prevent a race</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with clear_page_dirty_for_io() from clearing the page dirty</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bit after it clear all dirty ptes, but before a racing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * do_wp_page installs a dirty pte.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * do_no_page is protected similarly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_locked\">wait_on_page_locked</a>(<a class=\"id\" href=\"#dirty_page\">dirty_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_dirty_balance\">set_page_dirty_balance</a>(<a class=\"id\" href=\"#dirty_page\">dirty_page</a>, <a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#dirty_page\">dirty_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#dirty_page\">dirty_page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>(<a class=\"id\" href=\"#dirty_page\">dirty_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#dirty_page\">dirty_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#dirty_page\">dirty_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>)<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Some device drivers do not set page.mapping</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * but still dirty their pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#balance_dirty_pages_ratelimited\">balance_dirty_pages_ratelimited</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* file_update_time outside page_lock */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_update_time\">file_update_time</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<a class=\"id\" href=\"#oom_free_new\">oom_free_new</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#new_page\">new_page</a>);", 
"<a class=\"id\" href=\"#oom\">oom</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_page\">old_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"", 
"<a class=\"id\" href=\"#unwritable_page\">unwritable_page</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#old_page\">old_page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helper functions for unmap_mapping_range().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * __ Notes on dropping i_mmap_lock to reduce latency while unmapping __</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We have to restart searching the prio_tree whenever we drop the lock,</span>", 
"<span class=\"comment\"> * since the iterator is only valid while the lock is held, and anyway</span>", 
"<span class=\"comment\"> * a later vma might be split and reinserted earlier while lock dropped.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The list of nonlinear vmas could be handled more efficiently, using</span>", 
"<span class=\"comment\"> * a placeholder, but handle it in the same way until a need is shown.</span>", 
"<span class=\"comment\"> * It is important to search the prio_tree before nonlinear list: a vma</span>", 
"<span class=\"comment\"> * may become nonlinear and be shifted from prio_tree to nonlinear list</span>", 
"<span class=\"comment\"> * while the lock is dropped; but never shifted from list to prio_tree.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In order to make forward progress despite restarting the search,</span>", 
"<span class=\"comment\"> * vm_truncate_count is used to mark a vma as now dealt with, so we can</span>", 
"<span class=\"comment\"> * quickly skip it next time around.  Since the prio_tree search only</span>", 
"<span class=\"comment\"> * shows us those vmas affected by unmapping the range in question, we</span>", 
"<span class=\"comment\"> * can't efficiently keep all vmas in step with mapping-&gt;truncate_count:</span>", 
"<span class=\"comment\"> * so instead reset them all whenever it wraps back to 0 (then go to 1).</span>", 
"<span class=\"comment\"> * mapping-&gt;truncate_count and vma-&gt;vm_truncate_count are protected by</span>", 
"<span class=\"comment\"> * i_mmap_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In order to make forward progress despite repeatedly restarting some</span>", 
"<span class=\"comment\"> * large vma, note the restart_addr from unmap_vmas when it breaks out:</span>", 
"<span class=\"comment\"> * and restart from that address when we reach that vma again.  It might</span>", 
"<span class=\"comment\"> * have been split or merged, shrunk or extended, but never shifted: so</span>", 
"<span class=\"comment\"> * restart_addr remains valid so long as it remains in the vma's range.</span>", 
"<span class=\"comment\"> * unmap_mapping_range forces truncate_count to leap over page-aligned</span>", 
"<span class=\"comment\"> * values so we can save vma's restart_addr in its truncate_count field.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#is_restart_addr\">is_restart_addr</a>(<a class=\"id\" href=\"#truncate_count\">truncate_count</a>) (!((<a class=\"id\" href=\"#truncate_count\">truncate_count</a>) &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>))", 
"", 
"static void <a class=\"id\" href=\"#reset_vma_truncate_counts\">reset_vma_truncate_counts</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_iter\">prio_tree_iter</a> <a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma_prio_tree_foreach\">vma_prio_tree_foreach</a>(<a class=\"id\" href=\"#vma\">vma</a>, &amp;<a class=\"id\" href=\"#iter\">iter</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap\">i_mmap</a>, 0, <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#vma\">vma</a>, &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_nonlinear\">i_mmap_nonlinear</a>, <a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a> = 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#unmap_mapping_range_vma\">unmap_mapping_range_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_addr\">start_addr</a>, unsigned long <a class=\"id\" href=\"#end_addr\">end_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zap_details\">zap_details</a> *<a class=\"id\" href=\"#details\">details</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#restart_addr\">restart_addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#need_break\">need_break</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * files that support invalidating or truncating portions of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * file from under mmaped areas must have their -&gt;fault function</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return a locked page (and set VM_FAULT_LOCKED in the return).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This provides synchronisation against concurrent unmapping here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restart_addr\">restart_addr</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_restart_addr\">is_restart_addr</a>(<a class=\"id\" href=\"#restart_addr\">restart_addr</a>) && <a class=\"id\" href=\"#start_addr\">start_addr</a> &lt; <a class=\"id\" href=\"#restart_addr\">restart_addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_addr\">start_addr</a> = <a class=\"id\" href=\"#restart_addr\">restart_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start_addr\">start_addr</a> >= <a class=\"id\" href=\"#end_addr\">end_addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Top of vma has been split off since last time */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a> = <a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#truncate_count\">truncate_count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#restart_addr\">restart_addr</a> = <a class=\"id\" href=\"#zap_page_range\">zap_page_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#start_addr\">start_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_addr\">end_addr</a> - <a class=\"id\" href=\"#start_addr\">start_addr</a>, <a class=\"id\" href=\"#details\">details</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#need_break\">need_break</a> = <a class=\"id\" href=\"#need_resched\">need_resched</a>() || <a class=\"id\" href=\"#spin_needbreak\">spin_needbreak</a>(<a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#restart_addr\">restart_addr</a> >= <a class=\"id\" href=\"#end_addr\">end_addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have now completed this vma: mark it so */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a> = <a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#truncate_count\">truncate_count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#need_break\">need_break</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Note restart_addr in vma's truncate_count field */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a> = <a class=\"id\" href=\"#restart_addr\">restart_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#need_break\">need_break</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unmap_mapping_range_tree\">unmap_mapping_range_tree</a>(struct <a class=\"id\" href=\"#prio_tree_root\">prio_tree_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#zap_details\">zap_details</a> *<a class=\"id\" href=\"#details\">details</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#prio_tree_iter\">prio_tree_iter</a> <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#vba\">vba</a>, <a class=\"id\" href=\"#vea\">vea</a>, <a class=\"id\" href=\"#zba\">zba</a>, <a class=\"id\" href=\"#zea\">zea</a>;", 
"", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma_prio_tree_foreach\">vma_prio_tree_foreach</a>(<a class=\"id\" href=\"#vma\">vma</a>, &amp;<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#first_index\">first_index</a>, <a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#last_index\">last_index</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip quickly over those we have already dealt with */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a> == <a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#truncate_count\">truncate_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vba\">vba</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vea\">vea</a> = <a class=\"id\" href=\"#vba\">vba</a> + ((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Assume for now that PAGE_CACHE_SHIFT == PAGE_SHIFT */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zba\">zba</a> = <a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#first_index\">first_index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zba\">zba</a> &lt; <a class=\"id\" href=\"#vba\">vba</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zba\">zba</a> = <a class=\"id\" href=\"#vba\">vba</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zea\">zea</a> = <a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#last_index\">last_index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zea\">zea</a> &gt; <a class=\"id\" href=\"#vea\">vea</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zea\">zea</a> = <a class=\"id\" href=\"#vea\">vea</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unmap_mapping_range_vma\">unmap_mapping_range_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#zba\">zba</a> - <a class=\"id\" href=\"#vba\">vba</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) + <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#zea\">zea</a> - <a class=\"id\" href=\"#vba\">vba</a> + 1) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) + <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#details\">details</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unmap_mapping_range_list\">unmap_mapping_range_list</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#zap_details\">zap_details</a> *<a class=\"id\" href=\"#details\">details</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In nonlinear VMAs there is no correspondence between virtual address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * offset and file offset.  So we must perform an exhaustive search</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * across *all* the pages in each nonlinear VMA, not just the pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * whose virtual address lies outside the file truncation point.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#shared\">shared</a>.<a class=\"id\" href=\"#vm_set\">vm_set</a>.<a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip quickly over those we have already dealt with */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a> == <a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#truncate_count\">truncate_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#details\">details</a>-><a class=\"id\" href=\"#nonlinear_vma\">nonlinear_vma</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unmap_mapping_range_vma\">unmap_mapping_range_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>, <a class=\"id\" href=\"#details\">details</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * unmap_mapping_range - unmap the portion of all mmaps in the specified address_space corresponding to the specified page range in the underlying file.</span>", 
"<span class=\"comment\"> * @mapping: the address space containing mmaps to be unmapped.</span>", 
"<span class=\"comment\"> * @holebegin: byte in first page to unmap, relative to the start of</span>", 
"<span class=\"comment\"> * the underlying file.  This will be rounded down to a PAGE_SIZE</span>", 
"<span class=\"comment\"> * boundary.  Note that this is different from truncate_pagecache(), which</span>", 
"<span class=\"comment\"> * must keep the partial page.  In contrast, we must get rid of</span>", 
"<span class=\"comment\"> * partial pages.</span>", 
"<span class=\"comment\"> * @holelen: size of prospective hole in bytes.  This will be rounded</span>", 
"<span class=\"comment\"> * up to a PAGE_SIZE boundary.  A holelen of zero truncates to the</span>", 
"<span class=\"comment\"> * end of the file.</span>", 
"<span class=\"comment\"> * @even_cows: 1 when truncating a file, unmap even private COWed pages;</span>", 
"<span class=\"comment\"> * but 0 when invalidating pagecache, don't throw away private data.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unmap_mapping_range\">unmap_mapping_range</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> const <a class=\"id\" href=\"#holebegin\">holebegin</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> const <a class=\"id\" href=\"#holelen\">holelen</a>, int <a class=\"id\" href=\"#even_cows\">even_cows</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zap_details\">zap_details</a> <a class=\"id\" href=\"#details\">details</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#hba\">hba</a> = <a class=\"id\" href=\"#holebegin\">holebegin</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#hlen\">hlen</a> = (<a class=\"id\" href=\"#holelen\">holelen</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for overflow. */</span>", 
"<span class=\"ts\"/>if (sizeof(<a class=\"id\" href=\"#holelen\">holelen</a>) &gt; sizeof(<a class=\"id\" href=\"#hlen\">hlen</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>long long <a class=\"id\" href=\"#holeend\">holeend</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#holebegin\">holebegin</a> + <a class=\"id\" href=\"#holelen\">holelen</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#holeend\">holeend</a> &amp; ~(long long)<a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlen\">hlen</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a> - <a class=\"id\" href=\"#hba\">hba</a> + 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#details\">details</a>.<a class=\"id\" href=\"#check_mapping\">check_mapping</a> = <a class=\"id\" href=\"#even_cows\">even_cows</a>? <a class=\"id\" href=\"#NULL\">NULL</a>: <a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#details\">details</a>.<a class=\"id\" href=\"#nonlinear_vma\">nonlinear_vma</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#details\">details</a>.<a class=\"id\" href=\"#first_index\">first_index</a> = <a class=\"id\" href=\"#hba\">hba</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#details\">details</a>.<a class=\"id\" href=\"#last_index\">last_index</a> = <a class=\"id\" href=\"#hba\">hba</a> + <a class=\"id\" href=\"#hlen\">hlen</a> - 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#details\">details</a>.<a class=\"id\" href=\"#last_index\">last_index</a> &lt; <a class=\"id\" href=\"#details\">details</a>.<a class=\"id\" href=\"#first_index\">first_index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#details\">details</a>.<a class=\"id\" href=\"#last_index\">last_index</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#details\">details</a>.<a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a> = &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Protect against endless unmapping loops */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#truncate_count\">truncate_count</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#is_restart_addr\">is_restart_addr</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#truncate_count\">truncate_count</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#truncate_count\">truncate_count</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reset_vma_truncate_counts\">reset_vma_truncate_counts</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#truncate_count\">truncate_count</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#details\">details</a>.<a class=\"id\" href=\"#truncate_count\">truncate_count</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#truncate_count\">truncate_count</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#prio_tree_empty\">prio_tree_empty</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap\">i_mmap</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_mapping_range_tree\">unmap_mapping_range_tree</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap\">i_mmap</a>, &amp;<a class=\"id\" href=\"#details\">details</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_nonlinear\">i_mmap_nonlinear</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_mapping_range_list\">unmap_mapping_range_list</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_nonlinear\">i_mmap_nonlinear</a>, &amp;<a class=\"id\" href=\"#details\">details</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unmap_mapping_range\">unmap_mapping_range</a>);", 
"", 
"int <a class=\"id\" href=\"#vmtruncate_range\">vmtruncate_range</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the underlying filesystem is not going to provide</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a way to truncate a range of blocks (punch a hole) -</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we should return failure right now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#truncate_range\">truncate_range</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_alloc_sem\">i_alloc_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unmap_mapping_range\">unmap_mapping_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#offset\">offset</a>, (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#offset\">offset</a>), 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#truncate_inode_pages_range\">truncate_inode_pages_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unmap_mapping_range\">unmap_mapping_range</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#offset\">offset</a>, (<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#offset\">offset</a>), 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#truncate_range\">truncate_range</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_alloc_sem\">i_alloc_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We enter with non-exclusive mmap_sem (to exclude vma changes,</span>", 
"<span class=\"comment\"> * but allow concurrent faults), and pte mapped but not yet locked.</span>", 
"<span class=\"comment\"> * We return with mmap_sem still held, but pte unmapped and unlocked.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_swap_page\">do_swap_page</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#orig_pte\">orig_pte</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, *<a class=\"id\" href=\"#swapcache\">swapcache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#exclusive\">exclusive</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_unmap_same\">pte_unmap_same</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#orig_pte\">orig_pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_to_swp_entry\">pte_to_swp_entry</a>(<a class=\"id\" href=\"#orig_pte\">orig_pte</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#non_swap_entry\">non_swap_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_migration_entry\">is_migration_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migration_entry_wait\">migration_entry_wait</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#is_hwpoison_entry\">is_hwpoison_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_HWPOISON\">VM_FAULT_HWPOISON</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_bad_pte\">print_bad_pte</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#orig_pte\">orig_pte</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delayacct_set_flag\">delayacct_set_flag</a>(<a class=\"id\" href=\"#DELAYACCT_PF_SWAPIN\">DELAYACCT_PF_SWAPIN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#lookup_swap_cache\">lookup_swap_cache</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grab_swap_token\">grab_swap_token</a>(<a class=\"id\" href=\"#mm\">mm</a>); <span class=\"comment\">/* Contend for token _before_ read-in */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#swapin_readahead\">swapin_readahead</a>(<a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Back out if somebody else faulted in this pte</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * while we released the pte lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_table\">page_table</a> = <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#pte_same\">pte_same</a>(*<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#orig_pte\">orig_pte</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delayacct_clear_flag\">delayacct_clear_flag</a>(<a class=\"id\" href=\"#DELAYACCT_PF_SWAPIN\">DELAYACCT_PF_SWAPIN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Had to read the page from swap area: Major fault */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_MAJOR\">VM_FAULT_MAJOR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#PGMAJFAULT\">PGMAJFAULT</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#PageHWPoison\">PageHWPoison</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * hwpoisoned dirty swapcache pages are kept for killing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * owner processes (which may be unknown at hwpoison time)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_HWPOISON\">VM_FAULT_HWPOISON</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delayacct_clear_flag\">delayacct_clear_flag</a>(<a class=\"id\" href=\"#DELAYACCT_PF_SWAPIN\">DELAYACCT_PF_SWAPIN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_release\">out_release</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delayacct_clear_flag\">delayacct_clear_flag</a>(<a class=\"id\" href=\"#DELAYACCT_PF_SWAPIN\">DELAYACCT_PF_SWAPIN</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure try_to_free_swap or reuse_swap_page or swapoff did not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * release the swapcache from under us.  The page pin, and pte_same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * test below, are not enough to exclude that.  Even if it is still</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * swapcache, we need to check that the page's swap has not changed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#val\">val</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_page\">out_page</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ksm_might_need_to_copy\">ksm_might_need_to_copy</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swapcache\">swapcache</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#ksm_does_need_to_copy\">ksm_does_need_to_copy</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#swapcache\">swapcache</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swapcache\">swapcache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_page\">out_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_try_charge_swapin\">mem_cgroup_try_charge_swapin</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, &amp;<a class=\"id\" href=\"#ptr\">ptr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_page\">out_page</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Back out if somebody else already faulted in this pte.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_table\">page_table</a> = <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pte_same\">pte_same</a>(*<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#orig_pte\">orig_pte</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_nomap\">out_nomap</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_nomap\">out_nomap</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The page isn't present yet, go ahead with the fault.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Be careful about the sequence of operations here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To get its accounting right, reuse_swap_page() must be called</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * while the page is counted on swap but not yet in mapcount i.e.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before page_add_anon_rmap() and swap_free(); try_to_free_swap()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * must be called after the swap_free(), or it will never succeed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Because delete_from_swap_page() may be called by reuse_swap_page(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mem_cgroup_commit_charge_swapin() may not be able to find swp_entry</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in page-&gt;private. In this case, a record in swap_cgroup  is silently</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * discarded at swap_free().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_mm_counter_fast\">inc_mm_counter_fast</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_ANONPAGES\">MM_ANONPAGES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dec_mm_counter_fast\">dec_mm_counter_fast</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_SWAPENTS\">MM_SWAPENTS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#mk_pte\">mk_pte</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>) && <a class=\"id\" href=\"#reuse_swap_page\">reuse_swap_page</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#maybe_mkwrite\">maybe_mkwrite</a>(<a class=\"id\" href=\"#pte_mkdirty\">pte_mkdirty</a>(<a class=\"id\" href=\"#pte\">pte</a>), <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> |= <a class=\"id\" href=\"#VM_FAULT_WRITE\">VM_FAULT_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exclusive\">exclusive</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_icache_page\">flush_icache_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_page_add_anon_rmap\">do_page_add_anon_rmap</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#exclusive\">exclusive</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* It's better to call commit-charge after rmap is established */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_commit_charge_swapin\">mem_cgroup_commit_charge_swapin</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#ptr\">ptr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap_free\">swap_free</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vm_swap_full\">vm_swap_full</a>() || (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>) || <a class=\"id\" href=\"#PageMlocked\">PageMlocked</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_free_swap\">try_to_free_swap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swapcache\">swapcache</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Hold the lock to avoid the swap entry to be reused</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * until we take the PT lock for the pte_same() check</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (to avoid false positives from pte_same). For</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * further safety release the lock after the swap_free</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so that the swap count won't change under a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * parallel locked swapcache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#swapcache\">swapcache</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#swapcache\">swapcache</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> |= <a class=\"id\" href=\"#do_wp_page\">do_wp_page</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#ptl\">ptl</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &amp; <a class=\"id\" href=\"#VM_FAULT_ERROR\">VM_FAULT_ERROR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> &= <a class=\"id\" href=\"#VM_FAULT_ERROR\">VM_FAULT_ERROR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No need to invalidate - it was non-present before */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_mmu_cache\">update_mmu_cache</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#page_table\">page_table</a>);", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<a class=\"id\" href=\"#out_nomap\">out_nomap</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_cancel_charge_swapin\">mem_cgroup_cancel_charge_swapin</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<a class=\"id\" href=\"#out_page\">out_page</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#out_release\">out_release</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#swapcache\">swapcache</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#swapcache\">swapcache</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#swapcache\">swapcache</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is like a special single-page \"expand_{down|up}wards()\",</span>", 
"<span class=\"comment\"> * except we must first make sure that 'address{-|+}PAGE_SIZE'</span>", 
"<span class=\"comment\"> * doesn't hit another vma.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#check_stack_guard_page\">check_stack_guard_page</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_GROWSDOWN\">VM_GROWSDOWN</a>) && <a class=\"id\" href=\"#address\">address</a> == <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_prev\">vm_prev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Is there a mapping abutting this one below?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * That's only ok if it's the same stack mapping</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that has gotten split..</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> && <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> == <a class=\"id\" href=\"#address\">address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_GROWSDOWN\">VM_GROWSDOWN</a> ? 0 : -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expand_stack\">expand_stack</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a> - <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_GROWSUP\">VM_GROWSUP</a>) && <a class=\"id\" href=\"#address\">address</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> == <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* As VM_GROWSDOWN but s/below/above/ */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> && <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> == <a class=\"id\" href=\"#address\">address</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_GROWSUP\">VM_GROWSUP</a> ? 0 : -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expand_upwards\">expand_upwards</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We enter with non-exclusive mmap_sem (to exclude vma changes,</span>", 
"<span class=\"comment\"> * but allow concurrent faults), and pte mapped but not yet locked.</span>", 
"<span class=\"comment\"> * We return with mmap_sem still held, but pte unmapped and unlocked.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_anonymous_page\">do_anonymous_page</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap\">pte_unmap</a>(<a class=\"id\" href=\"#page_table\">page_table</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if we need to add a guard page to the stack */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#check_stack_guard_page\">check_stack_guard_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use the zero-page for reads */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_mkspecial\">pte_mkspecial</a>(<a class=\"id\" href=\"#pfn_pte\">pfn_pte</a>(<a class=\"id\" href=\"#my_zero_pfn\">my_zero_pfn</a>(<a class=\"id\" href=\"#address\">address</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_table\">page_table</a> = <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_none\">pte_none</a>(*<a class=\"id\" href=\"#page_table\">page_table</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#setpte\">setpte</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate our own private page. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#anon_vma_prepare\">anon_vma_prepare</a>(<a class=\"id\" href=\"#vma\">vma</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#oom\">oom</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_zeroed_user_highpage_movable\">alloc_zeroed_user_highpage_movable</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#oom\">oom</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__SetPageUptodate\">__SetPageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_newpage_charge\">mem_cgroup_newpage_charge</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#oom_free_page\">oom_free_page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#mk_pte\">mk_pte</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_mkwrite\">pte_mkwrite</a>(<a class=\"id\" href=\"#pte_mkdirty\">pte_mkdirty</a>(<a class=\"id\" href=\"#entry\">entry</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_table\">page_table</a> = <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_none\">pte_none</a>(*<a class=\"id\" href=\"#page_table\">page_table</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#release\">release</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_mm_counter_fast\">inc_mm_counter_fast</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_ANONPAGES\">MM_ANONPAGES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_add_new_anon_rmap\">page_add_new_anon_rmap</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<a class=\"id\" href=\"#setpte\">setpte</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No need to invalidate - it was non-present before */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_mmu_cache\">update_mmu_cache</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#page_table\">page_table</a>);", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#release\">release</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_uncharge_page\">mem_cgroup_uncharge_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<a class=\"id\" href=\"#oom_free_page\">oom_free_page</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#oom\">oom</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __do_fault() tries to create a new page mapping. It aggressively</span>", 
"<span class=\"comment\"> * tries to share with existing pages, but makes a separate copy if</span>", 
"<span class=\"comment\"> * the FAULT_FLAG_WRITE is set in the flags parameter in order to avoid</span>", 
"<span class=\"comment\"> * the next page fault.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * As this is called only for pages that do not currently exist, we</span>", 
"<span class=\"comment\"> * do not need to flush old virtual caches or the TLB.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We enter with non-exclusive mmap_sem (to exclude vma changes,</span>", 
"<span class=\"comment\"> * but allow concurrent faults), and pte neither mapped nor locked.</span>", 
"<span class=\"comment\"> * We return with mmap_sem still held, but pte unmapped and unlocked.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__do_fault\">__do_fault</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#orig_pte\">orig_pte</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#page_table\">page_table</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#anon\">anon</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#charged\">charged</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#dirty_page\">dirty_page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_fault\">vm_fault</a> <a class=\"id\" href=\"#vmf\">vmf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmf\">vmf</a>.<a class=\"id\" href=\"#virtual_address\">virtual_address</a> = (void <a class=\"id\" href=\"#__user\">__user</a> *)(<a class=\"id\" href=\"#address\">address</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmf\">vmf</a>.<a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#pgoff\">pgoff</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmf\">vmf</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmf\">vmf</a>.<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#fault\">fault</a>(<a class=\"id\" href=\"#vma\">vma</a>, &amp;<a class=\"id\" href=\"#vmf\">vmf</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> &amp; (<a class=\"id\" href=\"#VM_FAULT_ERROR\">VM_FAULT_ERROR</a> | <a class=\"id\" href=\"#VM_FAULT_NOPAGE\">VM_FAULT_NOPAGE</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#PageHWPoison\">PageHWPoison</a>(<a class=\"id\" href=\"#vmf\">vmf</a>.<a class=\"id\" href=\"#page\">page</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &amp; <a class=\"id\" href=\"#VM_FAULT_LOCKED\">VM_FAULT_LOCKED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#vmf\">vmf</a>.<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#VM_FAULT_HWPOISON\">VM_FAULT_HWPOISON</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For consistency in subsequent calls, make the faulted page always</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * locked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#ret\">ret</a> &amp; <a class=\"id\" href=\"#VM_FAULT_LOCKED\">VM_FAULT_LOCKED</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#vmf\">vmf</a>.<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#vmf\">vmf</a>.<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Should we do an early C-O-W break?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#vmf\">vmf</a>.<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon\">anon</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#anon_vma_prepare\">anon_vma_prepare</a>(<a class=\"id\" href=\"#vma\">vma</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_page_vma\">alloc_page_vma</a>(<a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_newpage_charge\">mem_cgroup_newpage_charge</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#charged\">charged</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Don't let another task, with possibly unlocked vma,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * keep the mlocked page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_page_mlock\">clear_page_mlock</a>(<a class=\"id\" href=\"#vmf\">vmf</a>.<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy_user_highpage\">copy_user_highpage</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vmf\">vmf</a>.<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__SetPageUptodate\">__SetPageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If the page will be shareable, see if the backing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * address space wants to know that the page is about</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to become writable</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmf\">vmf</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>|<a class=\"id\" href=\"#FAULT_FLAG_MKWRITE\">FAULT_FLAG_MKWRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a>(<a class=\"id\" href=\"#vma\">vma</a>, &amp;<a class=\"id\" href=\"#vmf\">vmf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tmp\">tmp</a> &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#VM_FAULT_ERROR\">VM_FAULT_ERROR</a> | <a class=\"id\" href=\"#VM_FAULT_NOPAGE\">VM_FAULT_NOPAGE</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unwritable_page\">unwritable_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#tmp\">tmp</a> &amp; <a class=\"id\" href=\"#VM_FAULT_LOCKED\">VM_FAULT_LOCKED</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0; <span class=\"comment\">/* retry the fault */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unwritable_page\">unwritable_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_table\">page_table</a> = <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This silly early PAGE_DIRTY setting removes a race</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * due to the bad i386 page protection. But it's valid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for other architectures too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that if FAULT_FLAG_WRITE is set, we either now have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an exclusive copy of the page, or this is a shared mapping,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so we can make it writable and dirty to avoid having to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * handle that later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Only go through if we didn't race with anybody else... */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#pte_same\">pte_same</a>(*<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#orig_pte\">orig_pte</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_icache_page\">flush_icache_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#mk_pte\">mk_pte</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#maybe_mkwrite\">maybe_mkwrite</a>(<a class=\"id\" href=\"#pte_mkdirty\">pte_mkdirty</a>(<a class=\"id\" href=\"#entry\">entry</a>), <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#anon\">anon</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_mm_counter_fast\">inc_mm_counter_fast</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_ANONPAGES\">MM_ANONPAGES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_add_new_anon_rmap\">page_add_new_anon_rmap</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_mm_counter_fast\">inc_mm_counter_fast</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#MM_FILEPAGES\">MM_FILEPAGES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_add_file_rmap\">page_add_file_rmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dirty_page\">dirty_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_page\">get_page</a>(<a class=\"id\" href=\"#dirty_page\">dirty_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no need to invalidate: a not-present page won't be cached */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_mmu_cache\">update_mmu_cache</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#page_table\">page_table</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#charged\">charged</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_cgroup_uncharge_page\">mem_cgroup_uncharge_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#anon\">anon</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#anon\">anon</a> = 1; <span class=\"comment\">/* no anon but release faulted_page */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dirty_page\">dirty_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#set_page_dirty\">set_page_dirty</a>(<a class=\"id\" href=\"#dirty_page\">dirty_page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#dirty_page\">dirty_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#dirty_page\">dirty_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a> && <a class=\"id\" href=\"#mapping\">mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Some device drivers do not set page.mapping but still</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * dirty their pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#balance_dirty_pages_ratelimited\">balance_dirty_pages_ratelimited</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* file_update_time outside page_lock */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_update_time\">file_update_time</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#vmf\">vmf</a>.<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#anon\">anon</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#vmf\">vmf</a>.<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#unwritable_page\">unwritable_page</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#do_linear_fault\">do_linear_fault</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#orig_pte\">orig_pte</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a> = (((<a class=\"id\" href=\"#address\">address</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>- <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) + <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap\">pte_unmap</a>(<a class=\"id\" href=\"#page_table\">page_table</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__do_fault\">__do_fault</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#orig_pte\">orig_pte</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fault of a previously existing named mapping. Repopulate the pte</span>", 
"<span class=\"comment\"> * from the encoded file_pte if possible. This enables swappable</span>", 
"<span class=\"comment\"> * nonlinear vmas.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We enter with non-exclusive mmap_sem (to exclude vma changes,</span>", 
"<span class=\"comment\"> * but allow concurrent faults), and pte mapped but not yet locked.</span>", 
"<span class=\"comment\"> * We return with mmap_sem still held, but pte unmapped and unlocked.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_nonlinear_fault\">do_nonlinear_fault</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#orig_pte\">orig_pte</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#FAULT_FLAG_NONLINEAR\">FAULT_FLAG_NONLINEAR</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_unmap_same\">pte_unmap_same</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#page_table\">page_table</a>, <a class=\"id\" href=\"#orig_pte\">orig_pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_NONLINEAR\">VM_NONLINEAR</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Page table corrupted: show pte and kill process.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_bad_pte\">print_bad_pte</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#orig_pte\">orig_pte</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#VM_FAULT_SIGBUS\">VM_FAULT_SIGBUS</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#pte_to_pgoff\">pte_to_pgoff</a>(<a class=\"id\" href=\"#orig_pte\">orig_pte</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__do_fault\">__do_fault</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#orig_pte\">orig_pte</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These routines also need to handle stuff like marking pages dirty</span>", 
"<span class=\"comment\"> * and/or accessed for architectures that don't do it in hardware (most</span>", 
"<span class=\"comment\"> * RISC architectures).  The early dirtying is also good on the i386.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There is also a hook called \"update_mmu_cache()\" that architectures</span>", 
"<span class=\"comment\"> * with external mmu caches can use to update those (ie the Sparc or</span>", 
"<span class=\"comment\"> * PowerPC hashed page tables that act as extended TLBs).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We enter with non-exclusive mmap_sem (to exclude vma changes,</span>", 
"<span class=\"comment\"> * but allow concurrent faults), and pte mapped but not yet locked.</span>", 
"<span class=\"comment\"> * We return with mmap_sem still held, but pte unmapped and unlocked.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#handle_pte_fault\">handle_pte_fault</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_present\">pte_present</a>(<a class=\"id\" href=\"#entry\">entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_none\">pte_none</a>(<a class=\"id\" href=\"#entry\">entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#fault\">fault</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#do_linear_fault\">do_linear_fault</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#do_anonymous_page\">do_anonymous_page</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_file\">pte_file</a>(<a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#do_nonlinear_fault\">do_nonlinear_fault</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#do_swap_page\">do_swap_page</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptl\">ptl</a> = <a class=\"id\" href=\"#pte_lockptr\">pte_lockptr</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#pte_same\">pte_same</a>(*<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#entry\">entry</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_write\">pte_write</a>(<a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#do_wp_page\">do_wp_page</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#ptl\">ptl</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_mkdirty\">pte_mkdirty</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_mkyoung\">pte_mkyoung</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ptep_set_access_flags\">ptep_set_access_flags</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_mmu_cache\">update_mmu_cache</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is needed only for protection faults but the arch code</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is not yet telling us if this is a protection fault or not.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This still avoids useless tlb flushes for .text page faults</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with threads.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FAULT_FLAG_WRITE\">FAULT_FLAG_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_page\">flush_tlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * By the time we get here, we already hold the mm semaphore</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#handle_mm_fault\">handle_mm_fault</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#PGFAULT\">PGFAULT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do counter updates before entering really critical section. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_sync_rss_stat\">check_sync_rss_stat</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#hugetlb_fault\">hugetlb_fault</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_alloc\">pud_alloc</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pud\">pud</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_alloc\">pmd_alloc</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmd\">pmd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_alloc_map\">pte_alloc_map</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#VM_FAULT_OOM\">VM_FAULT_OOM</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#handle_pte_fault\">handle_pte_fault</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__PAGETABLE_PUD_FOLDED\">__PAGETABLE_PUD_FOLDED</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate page upper directory.</span>", 
"<span class=\"comment\"> * We've already handled the fast-path in-line.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__pud_alloc\">__pud_alloc</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#pud_alloc_one\">pud_alloc_one</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>(); <span class=\"comment\">/* See comment in __pte_alloc */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_present\">pgd_present</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Another has populated it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pud_free\">pud_free</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd_populate\">pgd_populate</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __PAGETABLE_PUD_FOLDED */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__PAGETABLE_PMD_FOLDED\">__PAGETABLE_PMD_FOLDED</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate page middle directory.</span>", 
"<span class=\"comment\"> * We've already handled the fast-path in-line.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__pmd_alloc\">__pmd_alloc</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#pmd_alloc_one\">pmd_alloc_one</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>(); <span class=\"comment\">/* See comment in __pte_alloc */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ARCH_HAS_4LEVEL_HACK\">__ARCH_HAS_4LEVEL_HACK</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_present\">pud_present</a>(*<a class=\"id\" href=\"#pud\">pud</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Another has populated it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_free\">pmd_free</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pud_populate\">pud_populate</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"#else", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_present\">pgd_present</a>(*<a class=\"id\" href=\"#pud\">pud</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Another has populated it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_free\">pmd_free</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd_populate\">pgd_populate</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __ARCH_HAS_4LEVEL_HACK */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __PAGETABLE_PMD_FOLDED */</span>", 
"", 
"int <a class=\"id\" href=\"#make_pages_present\">make_pages_present</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#write\">write</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#vma\">vma</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write\">write</a> = (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_WRITE\">VM_WRITE</a>) != 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) - <a class=\"id\" href=\"#addr\">addr</a>/<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user_pages\">get_user_pages</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#write\">write</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#len\">len</a> ? 0 : -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"}", 
"", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#__HAVE_ARCH_GATE_AREA\">__HAVE_ARCH_GATE_AREA</a>)", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#AT_SYSINFO_EHDR\">AT_SYSINFO_EHDR</a>)", 
"static struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> <a class=\"id\" href=\"#gate_vma\">gate_vma</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#gate_vma_init\">gate_vma_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate_vma\">gate_vma</a>.<a class=\"id\" href=\"#vm_mm\">vm_mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate_vma\">gate_vma</a>.<a class=\"id\" href=\"#vm_start\">vm_start</a> = <a class=\"id\" href=\"#FIXADDR_USER_START\">FIXADDR_USER_START</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate_vma\">gate_vma</a>.<a class=\"id\" href=\"#vm_end\">vm_end</a> = <a class=\"id\" href=\"#FIXADDR_USER_END\">FIXADDR_USER_END</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate_vma\">gate_vma</a>.<a class=\"id\" href=\"#vm_flags\">vm_flags</a> = <a class=\"id\" href=\"#VM_READ\">VM_READ</a> | <a class=\"id\" href=\"#VM_MAYREAD\">VM_MAYREAD</a> | <a class=\"id\" href=\"#VM_EXEC\">VM_EXEC</a> | <a class=\"id\" href=\"#VM_MAYEXEC\">VM_MAYEXEC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate_vma\">gate_vma</a>.<a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a> = <a class=\"id\" href=\"#__P101\">__P101</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure the vDSO gets into every core dump.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Dumping its contents makes post-mortem fully interpretable later</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * without matching up the same kernel and hardware config to see</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * what PC values meant.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gate_vma\">gate_vma</a>.<a class=\"id\" href=\"#vm_flags\">vm_flags</a> |= <a class=\"id\" href=\"#VM_ALWAYSDUMP\">VM_ALWAYSDUMP</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#__initcall\">__initcall</a>(<a class=\"id\" href=\"#gate_vma_init\">gate_vma_init</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#get_gate_vma\">get_gate_vma</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#AT_SYSINFO_EHDR\">AT_SYSINFO_EHDR</a>", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#gate_vma\">gate_vma</a>;", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"int <a class=\"id\" href=\"#in_gate_area_no_task\">in_gate_area_no_task</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#AT_SYSINFO_EHDR\">AT_SYSINFO_EHDR</a>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#FIXADDR_USER_START\">FIXADDR_USER_START</a>) && (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#FIXADDR_USER_END\">FIXADDR_USER_END</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* __HAVE_ARCH_GATE_AREA */</span>", 
"", 
"static int <a class=\"id\" href=\"#follow_pte\">follow_pte</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> **<a class=\"id\" href=\"#ptepp\">ptepp</a>, <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> **<a class=\"id\" href=\"#ptlp\">ptlp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none\">pgd_none</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>) || <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pgd_bad\">pgd_bad</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_none\">pud_none</a>(*<a class=\"id\" href=\"#pud\">pud</a>) || <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pud_bad\">pud_bad</a>(*<a class=\"id\" href=\"#pud\">pud</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_none\">pmd_none</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>) || <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pmd_bad\">pmd_bad</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We cannot handle huge page PFN maps. Luckily they don't exist. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_huge\">pmd_huge</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#address\">address</a>, <a class=\"id\" href=\"#ptlp\">ptlp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptep\">ptep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_present\">pte_present</a>(*<a class=\"id\" href=\"#ptep\">ptep</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ptepp\">ptepp</a> = <a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, *<a class=\"id\" href=\"#ptlp\">ptlp</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * follow_pfn - look up PFN at a user virtual address</span>", 
"<span class=\"comment\"> * @vma: memory mapping</span>", 
"<span class=\"comment\"> * @address: user virtual address</span>", 
"<span class=\"comment\"> * @pfn: location to store found PFN</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Only IO mappings and raw PFN mappings are allowed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns zero and the pfn at @pfn on success, -ve otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#follow_pfn\">follow_pfn</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_IO\">VM_IO</a> | <a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#follow_pte\">follow_pte</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#ptep\">ptep</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(*<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#follow_pfn\">follow_pfn</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_IOREMAP_PROT\">CONFIG_HAVE_IOREMAP_PROT</a>", 
"int <a class=\"id\" href=\"#follow_phys\">follow_phys</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, unsigned int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> *<a class=\"id\" href=\"#phys\">phys</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_IO\">VM_IO</a> | <a class=\"id\" href=\"#VM_PFNMAP\">VM_PFNMAP</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#follow_pte\">follow_pte</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#ptep\">ptep</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#FOLL_WRITE\">FOLL_WRITE</a>) && !<a class=\"id\" href=\"#pte_write\">pte_write</a>(<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#prot\">prot</a> = <a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#pte_pgprot\">pte_pgprot</a>(<a class=\"id\" href=\"#pte\">pte</a>));", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#phys\">phys</a> = (<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a>)<a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(<a class=\"id\" href=\"#pte\">pte</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#ptep\">ptep</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#generic_access_phys\">generic_access_phys</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#write\">write</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#phys_addr\">phys_addr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#prot\">prot</a> = 0;", 
"<span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#maddr\">maddr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#addr\">addr</a> &amp; (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>-1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#follow_phys\">follow_phys</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#write\">write</a>, &amp;<a class=\"id\" href=\"#prot\">prot</a>, &amp;<a class=\"id\" href=\"#phys_addr\">phys_addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maddr\">maddr</a> = <a class=\"id\" href=\"#ioremap_prot\">ioremap_prot</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#prot\">prot</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy_toio\">memcpy_toio</a>(<a class=\"id\" href=\"#maddr\">maddr</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy_fromio\">memcpy_fromio</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#maddr\">maddr</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#maddr\">maddr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Access another process' address space.</span>", 
"<span class=\"comment\"> * Source/target buffer must be kernel space,</span>", 
"<span class=\"comment\"> * Do not walk the page table directly, use get_user_pages</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#access_process_vm\">access_process_vm</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, void *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#write\">write</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#old_buf\">old_buf</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#get_task_mm\">get_task_mm</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* ignore errors, just check how much was successfully transferred */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#bytes\">bytes</a>, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#maddr\">maddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user_pages\">get_user_pages</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write\">write</a>, 1, &amp;<a class=\"id\" href=\"#page\">page</a>, &amp;<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Check if this is a VM_IO | VM_PFNMAP VMA, which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we can access using slightly different code.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_IOREMAP_PROT\">CONFIG_HAVE_IOREMAP_PROT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#access\">access</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#access\">access</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#write\">write</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> <= 0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#addr\">addr</a> &amp; (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>-1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bytes\">bytes</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>-<a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>-<a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maddr\">maddr</a> = <a class=\"id\" href=\"#kmap\">kmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#write\">write</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy_to_user_page\">copy_to_user_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#maddr\">maddr</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#bytes\">bytes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_dirty_lock\">set_page_dirty_lock</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy_from_user_page\">copy_from_user_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#maddr\">maddr</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#bytes\">bytes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap\">kunmap</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> += <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a> - <a class=\"id\" href=\"#old_buf\">old_buf</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Print the name of a VMA.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#print_vma_addr\">print_vma_addr</a>(char *<a class=\"id\" href=\"#prefix\">prefix</a>, unsigned long <a class=\"id\" href=\"#ip\">ip</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do not print if we are in atomic</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * contexts (in exception stacks, etc.):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#preempt_count\">preempt_count</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#ip\">ip</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a> = (char *)<a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#s\">s</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#d_path\">d_path</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_path\">f_path</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = \"?\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#strrchr\">strrchr</a>(<a class=\"id\" href=\"#p\">p</a>, '/');", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#s\">s</a>+1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s%s[%lx+%lx]\", <a class=\"id\" href=\"#prefix\">prefix</a>, <a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_LOCKING\">CONFIG_PROVE_LOCKING</a>", 
"void <a class=\"id\" href=\"#might_fault\">might_fault</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some code (nfs/sunrpc) uses socket ops on kernel memory while</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * holding the mmap_sem, this is safe because kernel memory doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get paged out, therefore we'll never actually fault, and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * below annotations will generate false positives.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#segment_eq\">segment_eq</a>(<a class=\"id\" href=\"#get_fs\">get_fs</a>(), <a class=\"id\" href=\"#KERNEL_DS\">KERNEL_DS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it would be nicer only to annotate paths which are not under</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pagefault_disable, however that requires a larger audit and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * providing helpers like get_user_atomic.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#in_atomic\">in_atomic</a>() && <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#might_lock_read\">might_lock_read</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#might_fault\">might_fault</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/ba/930bc5910c735b5b465c3ba5290095ad81a8c7.xr', __xr_tmp);
